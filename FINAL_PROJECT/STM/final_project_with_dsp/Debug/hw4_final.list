
hw4_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e558  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800e6e8  0800e6e8  0000f6e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec04  0800ec04  00010238  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ec04  0800ec04  0000fc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec0c  0800ec0c  00010238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec0c  0800ec0c  0000fc0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ec10  0800ec10  0000fc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000238  20000000  0800ec14  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002dfc  20000238  0800ee4c  00010238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003034  0800ee4c  00011034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f91e  00000000  00000000  00010268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a97  00000000  00000000  0003fb86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000029d8  00000000  00000000  00046620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000203a  00000000  00000000  00048ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031fed  00000000  00000000  0004b032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000349d7  00000000  00000000  0007d01f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001170db  00000000  00000000  000b19f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  001c8ad1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c11c  00000000  00000000  001c8b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001d4ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000d0a  00000000  00000000  001d4d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  001d5a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e6d0 	.word	0x0800e6d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0800e6d0 	.word	0x0800e6d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000f74:	b5b0      	push	{r4, r5, r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 8000f7a:	4b4e      	ldr	r3, [pc, #312]	@ (80010b4 <MX_BlueNRG_MS_Init+0x140>)
 8000f7c:	617b      	str	r3, [r7, #20]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 8000f7e:	f000 f8ad 	bl	80010dc <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f002 fb48 	bl	8003618 <BSP_PB_GetState>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b4a      	ldr	r3, [pc, #296]	@ (80010b8 <MX_BlueNRG_MS_Init+0x144>)
 8000f8e:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 8000f90:	2100      	movs	r1, #0
 8000f92:	484a      	ldr	r0, [pc, #296]	@ (80010bc <MX_BlueNRG_MS_Init+0x148>)
 8000f94:	f008 fe44 	bl	8009c20 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000f98:	1dba      	adds	r2, r7, #6
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f008 fcb2 	bl	800990a <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8000fa6:	f008 fcf2 	bl	800998e <hci_reset>
  HAL_Delay(100);
 8000faa:	2064      	movs	r0, #100	@ 0x64
 8000fac:	f002 ff7a 	bl	8003ea4 <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000fb0:	7a3b      	ldrb	r3, [r7, #8]
 8000fb2:	2b30      	cmp	r3, #48	@ 0x30
 8000fb4:	d902      	bls.n	8000fbc <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 8000fb6:	4b42      	ldr	r3, [pc, #264]	@ (80010c0 <MX_BlueNRG_MS_Init+0x14c>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8000fbc:	f107 0209 	add.w	r2, r7, #9
 8000fc0:	4b40      	ldr	r3, [pc, #256]	@ (80010c4 <MX_BlueNRG_MS_Init+0x150>)
 8000fc2:	2106      	movs	r1, #6
 8000fc4:	2080      	movs	r0, #128	@ 0x80
 8000fc6:	f008 fc1a 	bl	80097fe <aci_hal_read_config_data>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	613b      	str	r3, [r7, #16]

  if (ret) {
    PRINTF("Read Static Random address failed.\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8000fce:	4b3d      	ldr	r3, [pc, #244]	@ (80010c4 <MX_BlueNRG_MS_Init+0x150>)
 8000fd0:	795b      	ldrb	r3, [r3, #5]
 8000fd2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000fd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8000fd8:	d001      	beq.n	8000fde <MX_BlueNRG_MS_Init+0x6a>
    PRINTF("Static Random address not well formed.\n");
    while(1);
 8000fda:	bf00      	nop
 8000fdc:	e7fd      	b.n	8000fda <MX_BlueNRG_MS_Init+0x66>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8000fde:	f008 f9da 	bl	8009396 <aci_gatt_init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	613b      	str	r3, [r7, #16]
  if(ret){
    PRINTF("GATT_Init failed.\n");
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8000fe6:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <MX_BlueNRG_MS_Init+0x14c>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d110      	bne.n	8001010 <MX_BlueNRG_MS_Init+0x9c>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000fee:	f107 020e 	add.w	r2, r7, #14
 8000ff2:	f107 030a 	add.w	r3, r7, #10
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	4613      	mov	r3, r2
 8001000:	2207      	movs	r2, #7
 8001002:	2100      	movs	r1, #0
 8001004:	2001      	movs	r0, #1
 8001006:	f007 ff9a 	bl	8008f3e <aci_gap_init_IDB05A1>
 800100a:	4603      	mov	r3, r0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	e00a      	b.n	8001026 <MX_BlueNRG_MS_Init+0xb2>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8001010:	f107 030a 	add.w	r3, r7, #10
 8001014:	f107 020c 	add.w	r2, r7, #12
 8001018:	f107 010e 	add.w	r1, r7, #14
 800101c:	2001      	movs	r0, #1
 800101e:	f007 ffde 	bl	8008fde <aci_gap_init_IDB04A1>
 8001022:	4603      	mov	r3, r0
 8001024:	613b      	str	r3, [r7, #16]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("GAP_Init failed.\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8001026:	89fc      	ldrh	r4, [r7, #14]
 8001028:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 800102a:	6978      	ldr	r0, [r7, #20]
 800102c:	f7ff f920 	bl	8000270 <strlen>
 8001030:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8001032:	b2da      	uxtb	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	4613      	mov	r3, r2
 800103a:	2200      	movs	r2, #0
 800103c:	4629      	mov	r1, r5
 800103e:	4620      	mov	r0, r4
 8001040:	f008 fb20 	bl	8009684 <aci_gatt_update_char_value>
 8001044:	4603      	mov	r3, r0
 8001046:	613b      	str	r3, [r7, #16]
  if (ret) {
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_BlueNRG_MS_Init+0xde>
    PRINTF("aci_gatt_update_char_value failed.\n");
    while(1);
 800104e:	bf00      	nop
 8001050:	e7fd      	b.n	800104e <MX_BlueNRG_MS_Init+0xda>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8001052:	2301      	movs	r3, #1
 8001054:	9303      	str	r3, [sp, #12]
 8001056:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <MX_BlueNRG_MS_Init+0x154>)
 8001058:	9302      	str	r3, [sp, #8]
 800105a:	2300      	movs	r3, #0
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	2310      	movs	r3, #16
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2307      	movs	r3, #7
 8001064:	2200      	movs	r2, #0
 8001066:	2100      	movs	r1, #0
 8001068:	2001      	movs	r0, #1
 800106a:	f008 f8ec 	bl	8009246 <aci_gap_set_auth_requirement>
 800106e:	4603      	mov	r3, r0
 8001070:	613b      	str	r3, [r7, #16]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_BlueNRG_MS_Init+0x108>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
    while(1);
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <MX_BlueNRG_MS_Init+0x104>
  }

  PRINTF("BLE Stack Initialized\n");

  ret = Add_HWServW2ST_Service();
 800107c:	f000 fa30 	bl	80014e0 <Add_HWServW2ST_Service>
 8001080:	4603      	mov	r3, r0
 8001082:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_BlueNRG_MS_Init+0x11a>
    PRINTF("BlueMS HW service added successfully.\n");
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
 800108a:	bf00      	nop
 800108c:	e7fd      	b.n	800108a <MX_BlueNRG_MS_Init+0x116>
  }

  ret = Add_SWServW2ST_Service();
 800108e:	f000 faf9 	bl	8001684 <Add_SWServW2ST_Service>
 8001092:	4603      	mov	r3, r0
 8001094:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_BlueNRG_MS_Init+0x12c>
     PRINTF("BlueMS SW service added successfully.\n");
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
     while(1);
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <MX_BlueNRG_MS_Init+0x128>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 80010a0:	2104      	movs	r1, #4
 80010a2:	2001      	movs	r0, #1
 80010a4:	f008 fc00 	bl	80098a8 <aci_hal_set_tx_power_level>
 80010a8:	4603      	mov	r3, r0
 80010aa:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 80010ac:	bf00      	nop
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bdb0      	pop	{r4, r5, r7, pc}
 80010b4:	0800e6e8 	.word	0x0800e6e8
 80010b8:	20000000 	.word	0x20000000
 80010bc:	08001c49 	.word	0x08001c49
 80010c0:	20000254 	.word	0x20000254
 80010c4:	20000258 	.word	0x20000258
 80010c8:	0001e240 	.word	0x0001e240

080010cc <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 80010d0:	f000 f810 	bl	80010f4 <User_Process>
  hci_user_evt_proc();
 80010d4:	f008 ff1e 	bl	8009f14 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80010e0:	2101      	movs	r1, #1
 80010e2:	2000      	movs	r0, #0
 80010e4:	f002 fa44 	bl	8003570 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f002 f9d9 	bl	80034a0 <BSP_LED_Init>

//  BSP_COM_Init(COM1);
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 80010fa:	4b34      	ldr	r3, [pc, #208]	@ (80011cc <User_Process+0xd8>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 8001104:	f000 fd2c 	bl	8001b60 <Set_DeviceConnectable>
    set_connectable = FALSE;
 8001108:	4b30      	ldr	r3, [pc, #192]	@ (80011cc <User_Process+0xd8>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 800110e:	2000      	movs	r0, #0
 8001110:	f002 f9d8 	bl	80034c4 <BSP_LED_Toggle>

    if (connected)
 8001114:	4b2e      	ldr	r3, [pc, #184]	@ (80011d0 <User_Process+0xdc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d052      	beq.n	80011c2 <User_Process+0xce>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 800111c:	f002 feb6 	bl	8003e8c <HAL_GetTick>
 8001120:	4603      	mov	r3, r0
 8001122:	4618      	mov	r0, r3
 8001124:	f00a fd76 	bl	800bc14 <srand>

      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 8001128:	f107 0208 	add.w	r2, r7, #8
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f85a 	bl	80011ec <Set_Random_Environmental_Values>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8001138:	edd7 7a02 	vldr	s15, [r7, #8]
 800113c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80011d4 <User_Process+0xe0>
 8001140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001144:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001148:	edd7 7a03 	vldr	s15, [r7, #12]
 800114c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001150:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001158:	ee17 3a90 	vmov	r3, s15
 800115c:	b21b      	sxth	r3, r3
 800115e:	4619      	mov	r1, r3
 8001160:	ee16 0a90 	vmov	r0, s13
 8001164:	f000 fcb6 	bl	8001ad4 <BlueMS_Environmental_Update>

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
//      Set_Random_Motion_Values(counter);
      int16_t acc_data[3];
      BSP_ACCELERO_AccGetXYZ(acc_data);
 8001168:	463b      	mov	r3, r7
 800116a:	4618      	mov	r0, r3
 800116c:	f002 fe4a 	bl	8003e04 <BSP_ACCELERO_AccGetXYZ>

      x_axes.AXIS_X = acc_data[0];
 8001170:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001174:	461a      	mov	r2, r3
 8001176:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <User_Process+0xe4>)
 8001178:	601a      	str	r2, [r3, #0]
      x_axes.AXIS_Y = acc_data[1];
 800117a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800117e:	461a      	mov	r2, r3
 8001180:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <User_Process+0xe4>)
 8001182:	605a      	str	r2, [r3, #4]
      x_axes.AXIS_Z = acc_data[2];
 8001184:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001188:	461a      	mov	r2, r3
 800118a:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <User_Process+0xe4>)
 800118c:	609a      	str	r2, [r3, #8]

      Acc_Update(&x_axes, &g_axes, &m_axes);
 800118e:	4a13      	ldr	r2, [pc, #76]	@ (80011dc <User_Process+0xe8>)
 8001190:	4913      	ldr	r1, [pc, #76]	@ (80011e0 <User_Process+0xec>)
 8001192:	4811      	ldr	r0, [pc, #68]	@ (80011d8 <User_Process+0xe4>)
 8001194:	f000 fb06 	bl	80017a4 <Acc_Update>

      Quat_Update(&q_axes);
 8001198:	4812      	ldr	r0, [pc, #72]	@ (80011e4 <User_Process+0xf0>)
 800119a:	f000 fb8d 	bl	80018b8 <Quat_Update>

      counter ++;
 800119e:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <User_Process+0xf4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	4a10      	ldr	r2, [pc, #64]	@ (80011e8 <User_Process+0xf4>)
 80011a6:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 80011a8:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <User_Process+0xf4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b28      	cmp	r3, #40	@ 0x28
 80011ae:	d104      	bne.n	80011ba <User_Process+0xc6>
        counter = 0;
 80011b0:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <User_Process+0xf4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 80011b6:	f000 f899 	bl	80012ec <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 80011ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011be:	f002 fe71 	bl	8003ea4 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000001 	.word	0x20000001
 80011d0:	20000294 	.word	0x20000294
 80011d4:	42c80000 	.word	0x42c80000
 80011d8:	20000298 	.word	0x20000298
 80011dc:	200002b0 	.word	0x200002b0
 80011e0:	200002a4 	.word	0x200002a4
 80011e4:	200002bc 	.word	0x200002bc
 80011e8:	20000260 	.word	0x20000260

080011ec <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 80011ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 80011f8:	f00a fd3a 	bl	800bc70 <rand>
 80011fc:	4603      	mov	r3, r0
 80011fe:	17da      	asrs	r2, r3, #31
 8001200:	469a      	mov	sl, r3
 8001202:	4693      	mov	fp, r2
 8001204:	4652      	mov	r2, sl
 8001206:	465b      	mov	r3, fp
 8001208:	f04f 0000 	mov.w	r0, #0
 800120c:	f04f 0100 	mov.w	r1, #0
 8001210:	0099      	lsls	r1, r3, #2
 8001212:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001216:	0090      	lsls	r0, r2, #2
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	eb12 010a 	adds.w	r1, r2, sl
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	eb43 030b 	adc.w	r3, r3, fp
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001234:	f7ff fd08 	bl	8000c48 <__aeabi_uldivmod>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff f9a4 	bl	800058c <__aeabi_ul2d>
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	4b26      	ldr	r3, [pc, #152]	@ (80012e4 <Set_Random_Environmental_Values+0xf8>)
 800124a:	f7ff f81f 	bl	800028c <__adddf3>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fca7 	bl	8000ba8 <__aeabi_d2f>
 800125a:	4602      	mov	r2, r0
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8001260:	f00a fd06 	bl	800bc70 <rand>
 8001264:	4603      	mov	r3, r0
 8001266:	17da      	asrs	r2, r3, #31
 8001268:	4698      	mov	r8, r3
 800126a:	4691      	mov	r9, r2
 800126c:	4642      	mov	r2, r8
 800126e:	464b      	mov	r3, r9
 8001270:	f04f 0000 	mov.w	r0, #0
 8001274:	f04f 0100 	mov.w	r1, #0
 8001278:	0099      	lsls	r1, r3, #2
 800127a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800127e:	0090      	lsls	r0, r2, #2
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	eb12 0408 	adds.w	r4, r2, r8
 8001288:	eb43 0509 	adc.w	r5, r3, r9
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	012b      	lsls	r3, r5, #4
 8001296:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800129a:	0122      	lsls	r2, r4, #4
 800129c:	4614      	mov	r4, r2
 800129e:	461d      	mov	r5, r3
 80012a0:	4620      	mov	r0, r4
 80012a2:	4629      	mov	r1, r5
 80012a4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80012a8:	f04f 0300 	mov.w	r3, #0
 80012ac:	f7ff fccc 	bl	8000c48 <__aeabi_uldivmod>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff f968 	bl	800058c <__aeabi_ul2d>
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <Set_Random_Environmental_Values+0xfc>)
 80012c2:	f7fe ffe3 	bl	800028c <__adddf3>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fc6b 	bl	8000ba8 <__aeabi_d2f>
 80012d2:	4602      	mov	r2, r0
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	601a      	str	r2, [r3, #0]
}
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012e2:	bf00      	nop
 80012e4:	403b0000 	.word	0x403b0000
 80012e8:	408f4000 	.word	0x408f4000

080012ec <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 80012f0:	4b6e      	ldr	r3, [pc, #440]	@ (80014ac <Reset_Motion_Values+0x1c0>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b6e      	ldr	r3, [pc, #440]	@ (80014b0 <Reset_Motion_Values+0x1c4>)
 80012f6:	fb83 1302 	smull	r1, r3, r3, r2
 80012fa:	11d9      	asrs	r1, r3, #7
 80012fc:	17d3      	asrs	r3, r2, #31
 80012fe:	1acb      	subs	r3, r1, r3
 8001300:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001304:	fb01 f303 	mul.w	r3, r1, r3
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d103      	bne.n	8001316 <Reset_Motion_Values+0x2a>
 800130e:	4b67      	ldr	r3, [pc, #412]	@ (80014ac <Reset_Motion_Values+0x1c0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	425b      	negs	r3, r3
 8001314:	e000      	b.n	8001318 <Reset_Motion_Values+0x2c>
 8001316:	230a      	movs	r3, #10
 8001318:	4a64      	ldr	r2, [pc, #400]	@ (80014ac <Reset_Motion_Values+0x1c0>)
 800131a:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 800131c:	4b63      	ldr	r3, [pc, #396]	@ (80014ac <Reset_Motion_Values+0x1c0>)
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	4b63      	ldr	r3, [pc, #396]	@ (80014b0 <Reset_Motion_Values+0x1c4>)
 8001322:	fb83 1302 	smull	r1, r3, r3, r2
 8001326:	11d9      	asrs	r1, r3, #7
 8001328:	17d3      	asrs	r3, r2, #31
 800132a:	1acb      	subs	r3, r1, r3
 800132c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001330:	fb01 f303 	mul.w	r3, r1, r3
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d103      	bne.n	8001342 <Reset_Motion_Values+0x56>
 800133a:	4b5c      	ldr	r3, [pc, #368]	@ (80014ac <Reset_Motion_Values+0x1c0>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	425b      	negs	r3, r3
 8001340:	e001      	b.n	8001346 <Reset_Motion_Values+0x5a>
 8001342:	f06f 0309 	mvn.w	r3, #9
 8001346:	4a59      	ldr	r2, [pc, #356]	@ (80014ac <Reset_Motion_Values+0x1c0>)
 8001348:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 800134a:	4b58      	ldr	r3, [pc, #352]	@ (80014ac <Reset_Motion_Values+0x1c0>)
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	4b58      	ldr	r3, [pc, #352]	@ (80014b0 <Reset_Motion_Values+0x1c4>)
 8001350:	fb83 1302 	smull	r1, r3, r3, r2
 8001354:	11d9      	asrs	r1, r3, #7
 8001356:	17d3      	asrs	r3, r2, #31
 8001358:	1acb      	subs	r3, r1, r3
 800135a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800135e:	fb01 f303 	mul.w	r3, r1, r3
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d103      	bne.n	8001370 <Reset_Motion_Values+0x84>
 8001368:	4b50      	ldr	r3, [pc, #320]	@ (80014ac <Reset_Motion_Values+0x1c0>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	425b      	negs	r3, r3
 800136e:	e000      	b.n	8001372 <Reset_Motion_Values+0x86>
 8001370:	230a      	movs	r3, #10
 8001372:	4a4e      	ldr	r2, [pc, #312]	@ (80014ac <Reset_Motion_Values+0x1c0>)
 8001374:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8001376:	4b4f      	ldr	r3, [pc, #316]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b4d      	ldr	r3, [pc, #308]	@ (80014b0 <Reset_Motion_Values+0x1c4>)
 800137c:	fb83 1302 	smull	r1, r3, r3, r2
 8001380:	11d9      	asrs	r1, r3, #7
 8001382:	17d3      	asrs	r3, r2, #31
 8001384:	1acb      	subs	r3, r1, r3
 8001386:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800138a:	fb01 f303 	mul.w	r3, r1, r3
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d103      	bne.n	800139c <Reset_Motion_Values+0xb0>
 8001394:	4b47      	ldr	r3, [pc, #284]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	425b      	negs	r3, r3
 800139a:	e000      	b.n	800139e <Reset_Motion_Values+0xb2>
 800139c:	2364      	movs	r3, #100	@ 0x64
 800139e:	4a45      	ldr	r2, [pc, #276]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 80013a0:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 80013a2:	4b44      	ldr	r3, [pc, #272]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	4b42      	ldr	r3, [pc, #264]	@ (80014b0 <Reset_Motion_Values+0x1c4>)
 80013a8:	fb83 1302 	smull	r1, r3, r3, r2
 80013ac:	11d9      	asrs	r1, r3, #7
 80013ae:	17d3      	asrs	r3, r2, #31
 80013b0:	1acb      	subs	r3, r1, r3
 80013b2:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80013b6:	fb01 f303 	mul.w	r3, r1, r3
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d103      	bne.n	80013c8 <Reset_Motion_Values+0xdc>
 80013c0:	4b3c      	ldr	r3, [pc, #240]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	425b      	negs	r3, r3
 80013c6:	e001      	b.n	80013cc <Reset_Motion_Values+0xe0>
 80013c8:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80013cc:	4a39      	ldr	r2, [pc, #228]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 80013ce:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 80013d0:	4b38      	ldr	r3, [pc, #224]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	4b36      	ldr	r3, [pc, #216]	@ (80014b0 <Reset_Motion_Values+0x1c4>)
 80013d6:	fb83 1302 	smull	r1, r3, r3, r2
 80013da:	11d9      	asrs	r1, r3, #7
 80013dc:	17d3      	asrs	r3, r2, #31
 80013de:	1acb      	subs	r3, r1, r3
 80013e0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80013e4:	fb01 f303 	mul.w	r3, r1, r3
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d103      	bne.n	80013f6 <Reset_Motion_Values+0x10a>
 80013ee:	4b31      	ldr	r3, [pc, #196]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	425b      	negs	r3, r3
 80013f4:	e000      	b.n	80013f8 <Reset_Motion_Values+0x10c>
 80013f6:	2364      	movs	r3, #100	@ 0x64
 80013f8:	4a2e      	ldr	r2, [pc, #184]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 80013fa:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 80013fc:	4b2d      	ldr	r3, [pc, #180]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b2b      	ldr	r3, [pc, #172]	@ (80014b0 <Reset_Motion_Values+0x1c4>)
 8001402:	fb83 1302 	smull	r1, r3, r3, r2
 8001406:	11d9      	asrs	r1, r3, #7
 8001408:	17d3      	asrs	r3, r2, #31
 800140a:	1acb      	subs	r3, r1, r3
 800140c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001410:	fb01 f303 	mul.w	r3, r1, r3
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d103      	bne.n	8001422 <Reset_Motion_Values+0x136>
 800141a:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <Reset_Motion_Values+0x1cc>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	425b      	negs	r3, r3
 8001420:	e000      	b.n	8001424 <Reset_Motion_Values+0x138>
 8001422:	2303      	movs	r3, #3
 8001424:	4a24      	ldr	r2, [pc, #144]	@ (80014b8 <Reset_Motion_Values+0x1cc>)
 8001426:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8001428:	4b22      	ldr	r3, [pc, #136]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <Reset_Motion_Values+0x1c4>)
 800142e:	fb83 1302 	smull	r1, r3, r3, r2
 8001432:	11d9      	asrs	r1, r3, #7
 8001434:	17d3      	asrs	r3, r2, #31
 8001436:	1acb      	subs	r3, r1, r3
 8001438:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800143c:	fb01 f303 	mul.w	r3, r1, r3
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d103      	bne.n	800144e <Reset_Motion_Values+0x162>
 8001446:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <Reset_Motion_Values+0x1cc>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	425b      	negs	r3, r3
 800144c:	e001      	b.n	8001452 <Reset_Motion_Values+0x166>
 800144e:	f06f 0302 	mvn.w	r3, #2
 8001452:	4a19      	ldr	r2, [pc, #100]	@ (80014b8 <Reset_Motion_Values+0x1cc>)
 8001454:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8001456:	4b17      	ldr	r3, [pc, #92]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <Reset_Motion_Values+0x1c4>)
 800145c:	fb83 1302 	smull	r1, r3, r3, r2
 8001460:	11d9      	asrs	r1, r3, #7
 8001462:	17d3      	asrs	r3, r2, #31
 8001464:	1acb      	subs	r3, r1, r3
 8001466:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800146a:	fb01 f303 	mul.w	r3, r1, r3
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d103      	bne.n	800147c <Reset_Motion_Values+0x190>
 8001474:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <Reset_Motion_Values+0x1cc>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	425b      	negs	r3, r3
 800147a:	e000      	b.n	800147e <Reset_Motion_Values+0x192>
 800147c:	2303      	movs	r3, #3
 800147e:	4a0e      	ldr	r2, [pc, #56]	@ (80014b8 <Reset_Motion_Values+0x1cc>)
 8001480:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <Reset_Motion_Values+0x1d0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	425b      	negs	r3, r3
 8001488:	4a0c      	ldr	r2, [pc, #48]	@ (80014bc <Reset_Motion_Values+0x1d0>)
 800148a:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 800148c:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <Reset_Motion_Values+0x1d0>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	425b      	negs	r3, r3
 8001492:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <Reset_Motion_Values+0x1d0>)
 8001494:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <Reset_Motion_Values+0x1d0>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	425b      	negs	r3, r3
 800149c:	4a07      	ldr	r2, [pc, #28]	@ (80014bc <Reset_Motion_Values+0x1d0>)
 800149e:	6093      	str	r3, [r2, #8]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000298 	.word	0x20000298
 80014b0:	10624dd3 	.word	0x10624dd3
 80014b4:	200002a4 	.word	0x200002a4
 80014b8:	200002b0 	.word	0x200002b0
 80014bc:	200002bc 	.word	0x200002bc

080014c0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 80014ca:	4b04      	ldr	r3, [pc, #16]	@ (80014dc <BSP_PB_Callback+0x1c>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	2000025e 	.word	0x2000025e

080014e0 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void) //TODO: modify from this
{
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b08d      	sub	sp, #52	@ 0x34
 80014e4:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 80014e6:	231b      	movs	r3, #27
 80014e8:	713b      	strb	r3, [r7, #4]
 80014ea:	23c5      	movs	r3, #197	@ 0xc5
 80014ec:	717b      	strb	r3, [r7, #5]
 80014ee:	23d5      	movs	r3, #213	@ 0xd5
 80014f0:	71bb      	strb	r3, [r7, #6]
 80014f2:	23a5      	movs	r3, #165	@ 0xa5
 80014f4:	71fb      	strb	r3, [r7, #7]
 80014f6:	2302      	movs	r3, #2
 80014f8:	723b      	strb	r3, [r7, #8]
 80014fa:	2300      	movs	r3, #0
 80014fc:	727b      	strb	r3, [r7, #9]
 80014fe:	23b4      	movs	r3, #180	@ 0xb4
 8001500:	72bb      	strb	r3, [r7, #10]
 8001502:	239a      	movs	r3, #154	@ 0x9a
 8001504:	72fb      	strb	r3, [r7, #11]
 8001506:	23e1      	movs	r3, #225	@ 0xe1
 8001508:	733b      	strb	r3, [r7, #12]
 800150a:	2311      	movs	r3, #17
 800150c:	737b      	strb	r3, [r7, #13]
 800150e:	2301      	movs	r3, #1
 8001510:	73bb      	strb	r3, [r7, #14]
 8001512:	2300      	movs	r3, #0
 8001514:	73fb      	strb	r3, [r7, #15]
 8001516:	2300      	movs	r3, #0
 8001518:	743b      	strb	r3, [r7, #16]
 800151a:	2300      	movs	r3, #0
 800151c:	747b      	strb	r3, [r7, #17]
 800151e:	2300      	movs	r3, #0
 8001520:	74bb      	strb	r3, [r7, #18]
 8001522:	2300      	movs	r3, #0
 8001524:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001526:	4b52      	ldr	r3, [pc, #328]	@ (8001670 <Add_HWServW2ST_Service+0x190>)
 8001528:	461c      	mov	r4, r3
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800152e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8001532:	4b50      	ldr	r3, [pc, #320]	@ (8001674 <Add_HWServW2ST_Service+0x194>)
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2310      	movs	r3, #16
 8001538:	2201      	movs	r2, #1
 800153a:	494d      	ldr	r1, [pc, #308]	@ (8001670 <Add_HWServW2ST_Service+0x190>)
 800153c:	2002      	movs	r0, #2
 800153e:	f007 ff4d 	bl	80093dc <aci_gatt_add_serv>
 8001542:	4603      	mov	r3, r0
 8001544:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8001546:	7dfb      	ldrb	r3, [r7, #23]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 800154c:	2347      	movs	r3, #71	@ 0x47
 800154e:	e08a      	b.n	8001666 <Add_HWServW2ST_Service+0x186>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8001550:	231b      	movs	r3, #27
 8001552:	713b      	strb	r3, [r7, #4]
 8001554:	23c5      	movs	r3, #197	@ 0xc5
 8001556:	717b      	strb	r3, [r7, #5]
 8001558:	23d5      	movs	r3, #213	@ 0xd5
 800155a:	71bb      	strb	r3, [r7, #6]
 800155c:	23a5      	movs	r3, #165	@ 0xa5
 800155e:	71fb      	strb	r3, [r7, #7]
 8001560:	2302      	movs	r3, #2
 8001562:	723b      	strb	r3, [r7, #8]
 8001564:	2300      	movs	r3, #0
 8001566:	727b      	strb	r3, [r7, #9]
 8001568:	2336      	movs	r3, #54	@ 0x36
 800156a:	72bb      	strb	r3, [r7, #10]
 800156c:	23ac      	movs	r3, #172	@ 0xac
 800156e:	72fb      	strb	r3, [r7, #11]
 8001570:	23e1      	movs	r3, #225	@ 0xe1
 8001572:	733b      	strb	r3, [r7, #12]
 8001574:	2311      	movs	r3, #17
 8001576:	737b      	strb	r3, [r7, #13]
 8001578:	2301      	movs	r3, #1
 800157a:	73bb      	strb	r3, [r7, #14]
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	2300      	movs	r3, #0
 8001582:	743b      	strb	r3, [r7, #16]
 8001584:	2300      	movs	r3, #0
 8001586:	747b      	strb	r3, [r7, #17]
 8001588:	2300      	movs	r3, #0
 800158a:	74bb      	strb	r3, [r7, #18]
 800158c:	2300      	movs	r3, #0
 800158e:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 8001590:	7cbb      	ldrb	r3, [r7, #18]
 8001592:	f043 0304 	orr.w	r3, r3, #4
 8001596:	b2db      	uxtb	r3, r3
 8001598:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 800159a:	7cbb      	ldrb	r3, [r7, #18]
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80015a4:	4b34      	ldr	r3, [pc, #208]	@ (8001678 <Add_HWServW2ST_Service+0x198>)
 80015a6:	461c      	mov	r4, r3
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80015b0:	4b30      	ldr	r3, [pc, #192]	@ (8001674 <Add_HWServW2ST_Service+0x194>)
 80015b2:	8818      	ldrh	r0, [r3, #0]
 80015b4:	4b31      	ldr	r3, [pc, #196]	@ (800167c <Add_HWServW2ST_Service+0x19c>)
 80015b6:	9305      	str	r3, [sp, #20]
 80015b8:	2300      	movs	r3, #0
 80015ba:	9304      	str	r3, [sp, #16]
 80015bc:	2310      	movs	r3, #16
 80015be:	9303      	str	r3, [sp, #12]
 80015c0:	2304      	movs	r3, #4
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	2300      	movs	r3, #0
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	2312      	movs	r3, #18
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2308      	movs	r3, #8
 80015ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001678 <Add_HWServW2ST_Service+0x198>)
 80015d0:	2102      	movs	r1, #2
 80015d2:	f007 ff8c 	bl	80094ee <aci_gatt_add_char>
 80015d6:	4603      	mov	r3, r0
 80015d8:	75fb      	strb	r3, [r7, #23]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80015da:	7dfb      	ldrb	r3, [r7, #23]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <Add_HWServW2ST_Service+0x104>
    return BLE_STATUS_ERROR;
 80015e0:	2347      	movs	r3, #71	@ 0x47
 80015e2:	e040      	b.n	8001666 <Add_HWServW2ST_Service+0x186>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 80015e4:	231b      	movs	r3, #27
 80015e6:	713b      	strb	r3, [r7, #4]
 80015e8:	23c5      	movs	r3, #197	@ 0xc5
 80015ea:	717b      	strb	r3, [r7, #5]
 80015ec:	23d5      	movs	r3, #213	@ 0xd5
 80015ee:	71bb      	strb	r3, [r7, #6]
 80015f0:	23a5      	movs	r3, #165	@ 0xa5
 80015f2:	71fb      	strb	r3, [r7, #7]
 80015f4:	2302      	movs	r3, #2
 80015f6:	723b      	strb	r3, [r7, #8]
 80015f8:	2300      	movs	r3, #0
 80015fa:	727b      	strb	r3, [r7, #9]
 80015fc:	2336      	movs	r3, #54	@ 0x36
 80015fe:	72bb      	strb	r3, [r7, #10]
 8001600:	23ac      	movs	r3, #172	@ 0xac
 8001602:	72fb      	strb	r3, [r7, #11]
 8001604:	23e1      	movs	r3, #225	@ 0xe1
 8001606:	733b      	strb	r3, [r7, #12]
 8001608:	2311      	movs	r3, #17
 800160a:	737b      	strb	r3, [r7, #13]
 800160c:	2301      	movs	r3, #1
 800160e:	73bb      	strb	r3, [r7, #14]
 8001610:	2300      	movs	r3, #0
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	2300      	movs	r3, #0
 8001616:	743b      	strb	r3, [r7, #16]
 8001618:	2300      	movs	r3, #0
 800161a:	747b      	strb	r3, [r7, #17]
 800161c:	23e0      	movs	r3, #224	@ 0xe0
 800161e:	74bb      	strb	r3, [r7, #18]
 8001620:	2300      	movs	r3, #0
 8001622:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <Add_HWServW2ST_Service+0x198>)
 8001626:	461c      	mov	r4, r3
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800162c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001630:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <Add_HWServW2ST_Service+0x194>)
 8001632:	8818      	ldrh	r0, [r3, #0]
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <Add_HWServW2ST_Service+0x1a0>)
 8001636:	9305      	str	r3, [sp, #20]
 8001638:	2300      	movs	r3, #0
 800163a:	9304      	str	r3, [sp, #16]
 800163c:	2310      	movs	r3, #16
 800163e:	9303      	str	r3, [sp, #12]
 8001640:	2304      	movs	r3, #4
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	2300      	movs	r3, #0
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	2310      	movs	r3, #16
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	2314      	movs	r3, #20
 800164e:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <Add_HWServW2ST_Service+0x198>)
 8001650:	2102      	movs	r1, #2
 8001652:	f007 ff4c 	bl	80094ee <aci_gatt_add_char>
 8001656:	4603      	mov	r3, r0
 8001658:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800165a:	7dfb      	ldrb	r3, [r7, #23]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <Add_HWServW2ST_Service+0x184>
    return BLE_STATUS_ERROR;
 8001660:	2347      	movs	r3, #71	@ 0x47
 8001662:	e000      	b.n	8001666 <Add_HWServW2ST_Service+0x186>

  return BLE_STATUS_SUCCESS;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	371c      	adds	r7, #28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd90      	pop	{r4, r7, pc}
 800166e:	bf00      	nop
 8001670:	20000270 	.word	0x20000270
 8001674:	20000264 	.word	0x20000264
 8001678:	20000280 	.word	0x20000280
 800167c:	20000266 	.word	0x20000266
 8001680:	20000268 	.word	0x20000268

08001684 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b08d      	sub	sp, #52	@ 0x34
 8001688:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 800168a:	2301      	movs	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 800168e:	231b      	movs	r3, #27
 8001690:	703b      	strb	r3, [r7, #0]
 8001692:	23c5      	movs	r3, #197	@ 0xc5
 8001694:	707b      	strb	r3, [r7, #1]
 8001696:	23d5      	movs	r3, #213	@ 0xd5
 8001698:	70bb      	strb	r3, [r7, #2]
 800169a:	23a5      	movs	r3, #165	@ 0xa5
 800169c:	70fb      	strb	r3, [r7, #3]
 800169e:	2302      	movs	r3, #2
 80016a0:	713b      	strb	r3, [r7, #4]
 80016a2:	2300      	movs	r3, #0
 80016a4:	717b      	strb	r3, [r7, #5]
 80016a6:	23b4      	movs	r3, #180	@ 0xb4
 80016a8:	71bb      	strb	r3, [r7, #6]
 80016aa:	239a      	movs	r3, #154	@ 0x9a
 80016ac:	71fb      	strb	r3, [r7, #7]
 80016ae:	23e1      	movs	r3, #225	@ 0xe1
 80016b0:	723b      	strb	r3, [r7, #8]
 80016b2:	2311      	movs	r3, #17
 80016b4:	727b      	strb	r3, [r7, #9]
 80016b6:	2302      	movs	r3, #2
 80016b8:	72bb      	strb	r3, [r7, #10]
 80016ba:	2300      	movs	r3, #0
 80016bc:	72fb      	strb	r3, [r7, #11]
 80016be:	2300      	movs	r3, #0
 80016c0:	733b      	strb	r3, [r7, #12]
 80016c2:	2300      	movs	r3, #0
 80016c4:	737b      	strb	r3, [r7, #13]
 80016c6:	2300      	movs	r3, #0
 80016c8:	73bb      	strb	r3, [r7, #14]
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80016ce:	4b31      	ldr	r3, [pc, #196]	@ (8001794 <Add_SWServW2ST_Service+0x110>)
 80016d0:	461c      	mov	r4, r3
 80016d2:	463b      	mov	r3, r7
 80016d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	461a      	mov	r2, r3
 80016e0:	0052      	lsls	r2, r2, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	3301      	adds	r3, #1
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	4a2b      	ldr	r2, [pc, #172]	@ (8001798 <Add_SWServW2ST_Service+0x114>)
 80016ec:	9200      	str	r2, [sp, #0]
 80016ee:	2201      	movs	r2, #1
 80016f0:	4928      	ldr	r1, [pc, #160]	@ (8001794 <Add_SWServW2ST_Service+0x110>)
 80016f2:	2002      	movs	r0, #2
 80016f4:	f007 fe72 	bl	80093dc <aci_gatt_add_serv>
 80016f8:	4603      	mov	r3, r0
 80016fa:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80016fc:	7cfb      	ldrb	r3, [r7, #19]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d13f      	bne.n	8001782 <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8001702:	231b      	movs	r3, #27
 8001704:	703b      	strb	r3, [r7, #0]
 8001706:	23c5      	movs	r3, #197	@ 0xc5
 8001708:	707b      	strb	r3, [r7, #1]
 800170a:	23d5      	movs	r3, #213	@ 0xd5
 800170c:	70bb      	strb	r3, [r7, #2]
 800170e:	23a5      	movs	r3, #165	@ 0xa5
 8001710:	70fb      	strb	r3, [r7, #3]
 8001712:	2302      	movs	r3, #2
 8001714:	713b      	strb	r3, [r7, #4]
 8001716:	2300      	movs	r3, #0
 8001718:	717b      	strb	r3, [r7, #5]
 800171a:	2336      	movs	r3, #54	@ 0x36
 800171c:	71bb      	strb	r3, [r7, #6]
 800171e:	23ac      	movs	r3, #172	@ 0xac
 8001720:	71fb      	strb	r3, [r7, #7]
 8001722:	23e1      	movs	r3, #225	@ 0xe1
 8001724:	723b      	strb	r3, [r7, #8]
 8001726:	2311      	movs	r3, #17
 8001728:	727b      	strb	r3, [r7, #9]
 800172a:	2301      	movs	r3, #1
 800172c:	72bb      	strb	r3, [r7, #10]
 800172e:	2300      	movs	r3, #0
 8001730:	72fb      	strb	r3, [r7, #11]
 8001732:	2300      	movs	r3, #0
 8001734:	733b      	strb	r3, [r7, #12]
 8001736:	2301      	movs	r3, #1
 8001738:	737b      	strb	r3, [r7, #13]
 800173a:	2300      	movs	r3, #0
 800173c:	73bb      	strb	r3, [r7, #14]
 800173e:	2300      	movs	r3, #0
 8001740:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001742:	4b16      	ldr	r3, [pc, #88]	@ (800179c <Add_SWServW2ST_Service+0x118>)
 8001744:	461c      	mov	r4, r3
 8001746:	463b      	mov	r3, r7
 8001748:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800174a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 800174e:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <Add_SWServW2ST_Service+0x114>)
 8001750:	8818      	ldrh	r0, [r3, #0]
 8001752:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <Add_SWServW2ST_Service+0x11c>)
 8001754:	9305      	str	r3, [sp, #20]
 8001756:	2300      	movs	r3, #0
 8001758:	9304      	str	r3, [sp, #16]
 800175a:	2310      	movs	r3, #16
 800175c:	9303      	str	r3, [sp, #12]
 800175e:	2304      	movs	r3, #4
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	2300      	movs	r3, #0
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	2310      	movs	r3, #16
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2308      	movs	r3, #8
 800176c:	4a0b      	ldr	r2, [pc, #44]	@ (800179c <Add_SWServW2ST_Service+0x118>)
 800176e:	2102      	movs	r1, #2
 8001770:	f007 febd 	bl	80094ee <aci_gatt_add_char>
 8001774:	4603      	mov	r3, r0
 8001776:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8001778:	7cfb      	ldrb	r3, [r7, #19]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d103      	bne.n	8001786 <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 800177e:	2300      	movs	r3, #0
 8001780:	e003      	b.n	800178a <Add_SWServW2ST_Service+0x106>
    goto fail;
 8001782:	bf00      	nop
 8001784:	e000      	b.n	8001788 <Add_SWServW2ST_Service+0x104>
    goto fail;
 8001786:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 8001788:	2347      	movs	r3, #71	@ 0x47
}
 800178a:	4618      	mov	r0, r3
 800178c:	371c      	adds	r7, #28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd90      	pop	{r4, r7, pc}
 8001792:	bf00      	nop
 8001794:	20000270 	.word	0x20000270
 8001798:	2000026a 	.word	0x2000026a
 800179c:	20000280 	.word	0x20000280
 80017a0:	2000026c 	.word	0x2000026c

080017a4 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	@ 0x30
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 80017b0:	f002 fb6c 	bl	8003e8c <HAL_GetTick>
 80017b4:	4603      	mov	r3, r0
 80017b6:	08db      	lsrs	r3, r3, #3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	743b      	strb	r3, [r7, #16]
 80017bc:	f002 fb66 	bl	8003e8c <HAL_GetTick>
 80017c0:	4603      	mov	r3, r0
 80017c2:	0adb      	lsrs	r3, r3, #11
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	425b      	negs	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	74bb      	strb	r3, [r7, #18]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	425b      	negs	r3, r3
 80017da:	121b      	asrs	r3, r3, #8
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	753b      	strb	r3, [r7, #20]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	121b      	asrs	r3, r3, #8
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	425b      	negs	r3, r3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	75bb      	strb	r3, [r7, #22]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	425b      	negs	r3, r3
 8001804:	121b      	asrs	r3, r3, #8
 8001806:	b2db      	uxtb	r3, r3
 8001808:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	763b      	strb	r3, [r7, #24]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	121b      	asrs	r3, r3, #8
 8001818:	b2db      	uxtb	r3, r3
 800181a:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	76bb      	strb	r3, [r7, #26]
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	121b      	asrs	r3, r3, #8
 800182a:	b2db      	uxtb	r3, r3
 800182c:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	773b      	strb	r3, [r7, #28]
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	121b      	asrs	r3, r3, #8
 800183c:	b2db      	uxtb	r3, r3
 800183e:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	77bb      	strb	r3, [r7, #30]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	121b      	asrs	r3, r3, #8
 800184e:	b2db      	uxtb	r3, r3
 8001850:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	f887 3020 	strb.w	r3, [r7, #32]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	121b      	asrs	r3, r3, #8
 8001862:	b2db      	uxtb	r3, r3
 8001864:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	121b      	asrs	r3, r3, #8
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 800187e:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <Acc_Update+0x10c>)
 8001880:	8818      	ldrh	r0, [r3, #0]
 8001882:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <Acc_Update+0x110>)
 8001884:	8819      	ldrh	r1, [r3, #0]
 8001886:	f107 0310 	add.w	r3, r7, #16
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2314      	movs	r3, #20
 800188e:	2200      	movs	r2, #0
 8001890:	f007 fef8 	bl	8009684 <aci_gatt_update_char_value>
 8001894:	4603      	mov	r3, r0
 8001896:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 800189a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <Acc_Update+0x102>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 80018a2:	2347      	movs	r3, #71	@ 0x47
 80018a4:	e000      	b.n	80018a8 <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3728      	adds	r7, #40	@ 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000264 	.word	0x20000264
 80018b4:	20000268 	.word	0x20000268

080018b8 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af02      	add	r7, sp, #8
 80018be:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 80018c0:	f002 fae4 	bl	8003e8c <HAL_GetTick>
 80018c4:	4603      	mov	r3, r0
 80018c6:	08db      	lsrs	r3, r3, #3
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	733b      	strb	r3, [r7, #12]
 80018cc:	f002 fade 	bl	8003e8c <HAL_GetTick>
 80018d0:	4603      	mov	r3, r0
 80018d2:	0adb      	lsrs	r3, r3, #11
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	73bb      	strb	r3, [r7, #14]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	121b      	asrs	r3, r3, #8
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	743b      	strb	r3, [r7, #16]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	121b      	asrs	r3, r3, #8
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	74bb      	strb	r3, [r7, #18]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	121b      	asrs	r3, r3, #8
 800190a:	b2db      	uxtb	r3, r3
 800190c:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 800190e:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <Quat_Update+0x84>)
 8001910:	8818      	ldrh	r0, [r3, #0]
 8001912:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <Quat_Update+0x88>)
 8001914:	8819      	ldrh	r1, [r3, #0]
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2308      	movs	r3, #8
 800191e:	2200      	movs	r2, #0
 8001920:	f007 feb0 	bl	8009684 <aci_gatt_update_char_value>
 8001924:	4603      	mov	r3, r0
 8001926:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8001928:	7dfb      	ldrb	r3, [r7, #23]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <Quat_Update+0x7a>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 800192e:	2347      	movs	r3, #71	@ 0x47
 8001930:	e000      	b.n	8001934 <Quat_Update+0x7c>
  }

  return BLE_STATUS_SUCCESS;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2000026a 	.word	0x2000026a
 8001940:	2000026c 	.word	0x2000026c

08001944 <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 8001944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001948:	b08e      	sub	sp, #56	@ 0x38
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8001950:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001952:	4b57      	ldr	r3, [pc, #348]	@ (8001ab0 <Read_Request_CB+0x16c>)
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	3301      	adds	r3, #1
 8001958:	429a      	cmp	r2, r3
 800195a:	d105      	bne.n	8001968 <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 800195c:	4a55      	ldr	r2, [pc, #340]	@ (8001ab4 <Read_Request_CB+0x170>)
 800195e:	4956      	ldr	r1, [pc, #344]	@ (8001ab8 <Read_Request_CB+0x174>)
 8001960:	4856      	ldr	r0, [pc, #344]	@ (8001abc <Read_Request_CB+0x178>)
 8001962:	f7ff ff1f 	bl	80017a4 <Acc_Update>
 8001966:	e091      	b.n	8001a8c <Read_Request_CB+0x148>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8001968:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800196a:	4b55      	ldr	r3, [pc, #340]	@ (8001ac0 <Read_Request_CB+0x17c>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	3301      	adds	r3, #1
 8001970:	429a      	cmp	r2, r3
 8001972:	f040 808b 	bne.w	8001a8c <Read_Request_CB+0x148>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 8001976:	f00a f97b 	bl	800bc70 <rand>
 800197a:	4603      	mov	r3, r0
 800197c:	17da      	asrs	r2, r3, #31
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	61fa      	str	r2, [r7, #28]
 8001982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	0099      	lsls	r1, r3, #2
 8001990:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001994:	0090      	lsls	r0, r2, #2
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	69b9      	ldr	r1, [r7, #24]
 800199c:	1851      	adds	r1, r2, r1
 800199e:	6139      	str	r1, [r7, #16]
 80019a0:	69f9      	ldr	r1, [r7, #28]
 80019a2:	eb43 0101 	adc.w	r1, r3, r1
 80019a6:	6179      	str	r1, [r7, #20]
 80019a8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019b4:	f7ff f948 	bl	8000c48 <__aeabi_uldivmod>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f7fe fde4 	bl	800058c <__aeabi_ul2d>
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac4 <Read_Request_CB+0x180>)
 80019ca:	f7fe fc5f 	bl	800028c <__adddf3>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	f7ff f8e7 	bl	8000ba8 <__aeabi_d2f>
 80019da:	4603      	mov	r3, r0
 80019dc:	637b      	str	r3, [r7, #52]	@ 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 80019de:	f00a f947 	bl	800bc70 <rand>
 80019e2:	4603      	mov	r3, r0
 80019e4:	17da      	asrs	r2, r3, #31
 80019e6:	4698      	mov	r8, r3
 80019e8:	4691      	mov	r9, r2
 80019ea:	4642      	mov	r2, r8
 80019ec:	464b      	mov	r3, r9
 80019ee:	1891      	adds	r1, r2, r2
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	415b      	adcs	r3, r3
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019fa:	eb12 0408 	adds.w	r4, r2, r8
 80019fe:	eb43 0509 	adc.w	r5, r3, r9
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	016b      	lsls	r3, r5, #5
 8001a0c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001a10:	0162      	lsls	r2, r4, #5
 8001a12:	eb14 0a02 	adds.w	sl, r4, r2
 8001a16:	eb45 0b03 	adc.w	fp, r5, r3
 8001a1a:	eb1a 0308 	adds.w	r3, sl, r8
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	eb4b 0309 	adc.w	r3, fp, r9
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a32:	f7ff f909 	bl	8000c48 <__aeabi_uldivmod>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7fe fda5 	bl	800058c <__aeabi_ul2d>
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <Read_Request_CB+0x184>)
 8001a48:	f7fe fc20 	bl	800028c <__adddf3>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	f7ff f8a8 	bl	8000ba8 <__aeabi_d2f>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	633b      	str	r3, [r7, #48]	@ 0x30
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8001a5c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a60:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001acc <Read_Request_CB+0x188>
 8001a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a68:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001a6c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a70:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7c:	ee17 3a90 	vmov	r3, s15
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	4619      	mov	r1, r3
 8001a84:	ee16 0a90 	vmov	r0, s13
 8001a88:	f000 f824 	bl	8001ad4 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 8001a8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <Read_Request_CB+0x18c>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d007      	beq.n	8001aa4 <Read_Request_CB+0x160>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8001a94:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <Read_Request_CB+0x18c>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f007 fe83 	bl	80097a4 <aci_gatt_allow_read>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	3738      	adds	r7, #56	@ 0x38
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000268 	.word	0x20000268
 8001ab4:	200002b0 	.word	0x200002b0
 8001ab8:	200002a4 	.word	0x200002a4
 8001abc:	20000298 	.word	0x20000298
 8001ac0:	20000266 	.word	0x20000266
 8001ac4:	403b0000 	.word	0x403b0000
 8001ac8:	408f4000 	.word	0x408f4000
 8001acc:	42c80000 	.word	0x42c80000
 8001ad0:	20000290 	.word	0x20000290

08001ad4 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8001ae0:	f002 f9d4 	bl	8003e8c <HAL_GetTick>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	08db      	lsrs	r3, r3, #3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	733b      	strb	r3, [r7, #12]
 8001aec:	f002 f9ce 	bl	8003e8c <HAL_GetTick>
 8001af0:	4603      	mov	r3, r0
 8001af2:	0adb      	lsrs	r3, r3, #11
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	73bb      	strb	r3, [r7, #14]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	121b      	asrs	r3, r3, #8
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	73fb      	strb	r3, [r7, #15]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	141b      	asrs	r3, r3, #16
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	743b      	strb	r3, [r7, #16]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	161b      	asrs	r3, r3, #24
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 8001b16:	887b      	ldrh	r3, [r7, #2]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	74bb      	strb	r3, [r7, #18]
 8001b1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b20:	121b      	asrs	r3, r3, #8
 8001b22:	b21b      	sxth	r3, r3
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <BlueMS_Environmental_Update+0x84>)
 8001b2a:	8818      	ldrh	r0, [r3, #0]
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <BlueMS_Environmental_Update+0x88>)
 8001b2e:	8819      	ldrh	r1, [r3, #0]
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2308      	movs	r3, #8
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f007 fda3 	bl	8009684 <aci_gatt_update_char_value>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8001b42:	7dfb      	ldrb	r3, [r7, #23]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <BlueMS_Environmental_Update+0x78>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8001b48:	2347      	movs	r3, #71	@ 0x47
 8001b4a:	e000      	b.n	8001b4e <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000264 	.word	0x20000264
 8001b5c:	20000266 	.word	0x20000266

08001b60 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b092      	sub	sp, #72	@ 0x48
 8001b64:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 8001b66:	4a36      	ldr	r2, [pc, #216]	@ (8001c40 <Set_DeviceConnectable+0xe0>)
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b70:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8001b74:	2302      	movs	r3, #2
 8001b76:	703b      	strb	r3, [r7, #0]
 8001b78:	230a      	movs	r3, #10
 8001b7a:	707b      	strb	r3, [r7, #1]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	70bb      	strb	r3, [r7, #2]
 8001b80:	2308      	movs	r3, #8
 8001b82:	70fb      	strb	r3, [r7, #3]
 8001b84:	2309      	movs	r3, #9
 8001b86:	713b      	strb	r3, [r7, #4]
 8001b88:	2342      	movs	r3, #66	@ 0x42
 8001b8a:	717b      	strb	r3, [r7, #5]
 8001b8c:	236c      	movs	r3, #108	@ 0x6c
 8001b8e:	71bb      	strb	r3, [r7, #6]
 8001b90:	2375      	movs	r3, #117	@ 0x75
 8001b92:	71fb      	strb	r3, [r7, #7]
 8001b94:	2365      	movs	r3, #101	@ 0x65
 8001b96:	723b      	strb	r3, [r7, #8]
 8001b98:	234e      	movs	r3, #78	@ 0x4e
 8001b9a:	727b      	strb	r3, [r7, #9]
 8001b9c:	2352      	movs	r3, #82	@ 0x52
 8001b9e:	72bb      	strb	r3, [r7, #10]
 8001ba0:	2347      	movs	r3, #71	@ 0x47
 8001ba2:	72fb      	strb	r3, [r7, #11]
 8001ba4:	230d      	movs	r3, #13
 8001ba6:	733b      	strb	r3, [r7, #12]
 8001ba8:	23ff      	movs	r3, #255	@ 0xff
 8001baa:	737b      	strb	r3, [r7, #13]
 8001bac:	2301      	movs	r3, #1
 8001bae:	73bb      	strb	r3, [r7, #14]
 8001bb0:	2380      	movs	r3, #128	@ 0x80
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	743b      	strb	r3, [r7, #16]
 8001bb8:	23f4      	movs	r3, #244	@ 0xf4
 8001bba:	747b      	strb	r3, [r7, #17]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	74bb      	strb	r3, [r7, #18]
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c44 <Set_DeviceConnectable+0xe4>)
 8001bc6:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8001bc8:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8001bca:	4b1e      	ldr	r3, [pc, #120]	@ (8001c44 <Set_DeviceConnectable+0xe4>)
 8001bcc:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8001bce:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c44 <Set_DeviceConnectable+0xe4>)
 8001bd2:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8001bd4:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c44 <Set_DeviceConnectable+0xe4>)
 8001bd8:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8001bda:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8001bdc:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <Set_DeviceConnectable+0xe4>)
 8001bde:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8001be0:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 8001be2:	4b18      	ldr	r3, [pc, #96]	@ (8001c44 <Set_DeviceConnectable+0xe4>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 8001be6:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8001be8:	7cbb      	ldrb	r3, [r7, #18]
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f007 ff36 	bl	8009a66 <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	9306      	str	r3, [sp, #24]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	9305      	str	r3, [sp, #20]
 8001c02:	2300      	movs	r3, #0
 8001c04:	9304      	str	r3, [sp, #16]
 8001c06:	2300      	movs	r3, #0
 8001c08:	9303      	str	r3, [sp, #12]
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	9302      	str	r3, [sp, #8]
 8001c10:	2308      	movs	r3, #8
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	2300      	movs	r3, #0
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 8001c1e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8001c22:	2000      	movs	r0, #0
 8001c24:	f007 fa25 	bl	8009072 <aci_gap_set_discoverable>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8001c2e:	463b      	mov	r3, r7
 8001c30:	4619      	mov	r1, r3
 8001c32:	201a      	movs	r0, #26
 8001c34:	f007 fb5e 	bl	80092f4 <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8001c38:	bf00      	nop
 8001c3a:	3728      	adds	r7, #40	@ 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	0800e6f0 	.word	0x0800e6f0
 8001c44:	20000258 	.word	0x20000258

08001c48 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	@ 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	627b      	str	r3, [r7, #36]	@ 0x24
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c56:	3301      	adds	r3, #1
 8001c58:	623b      	str	r3, [r7, #32]

  if(hci_pckt->type != HCI_EVENT_PKT)
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d14a      	bne.n	8001cf8 <user_notify+0xb0>
    return;

  switch(event_pckt->evt){
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2bff      	cmp	r3, #255	@ 0xff
 8001c68:	d01f      	beq.n	8001caa <user_notify+0x62>
 8001c6a:	2bff      	cmp	r3, #255	@ 0xff
 8001c6c:	dc49      	bgt.n	8001d02 <user_notify+0xba>
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d002      	beq.n	8001c78 <user_notify+0x30>
 8001c72:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c74:	d003      	beq.n	8001c7e <user_notify+0x36>
 8001c76:	e044      	b.n	8001d02 <user_notify+0xba>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8001c78:	f000 f846 	bl	8001d08 <GAP_DisconnectionComplete_CB>
    }
    break;
 8001c7c:	e041      	b.n	8001d02 <user_notify+0xba>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	3302      	adds	r3, #2
 8001c82:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d137      	bne.n	8001cfc <user_notify+0xb4>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1d5a      	adds	r2, r3, #5
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	f000 f847 	bl	8001d34 <GAP_ConnectionComplete_CB>
        }
        break;
 8001ca6:	bf00      	nop
      }
    }
    break;
 8001ca8:	e028      	b.n	8001cfc <user_notify+0xb4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	3302      	adds	r3, #2
 8001cae:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode){
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	f640 4213 	movw	r2, #3091	@ 0xc13
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00d      	beq.n	8001cda <user_notify+0x92>
 8001cbe:	f640 4214 	movw	r2, #3092	@ 0xc14
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d11c      	bne.n	8001d00 <user_notify+0xb8>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3302      	adds	r3, #2
 8001cca:	61bb      	str	r3, [r7, #24]
          Read_Request_CB(pr->attr_handle);
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	885b      	ldrh	r3, [r3, #2]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fe36 	bl	8001944 <Read_Request_CB>
        }
        break;
 8001cd8:	e00d      	b.n	8001cf6 <user_notify+0xae>
      case EVT_BLUE_GATT_WRITE_PERMIT_REQ:
      	  {
      		evt_gatt_write_permit_req *pr = (void*)blue_evt->data;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3302      	adds	r3, #2
 8001cde:	617b      	str	r3, [r7, #20]
      		Attribute_Modified_CB(pr->attr_handle, pr->data_length, pr->data);
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	885b      	ldrh	r3, [r3, #2]
 8001ce4:	b298      	uxth	r0, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	7919      	ldrb	r1, [r3, #4]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	3305      	adds	r3, #5
 8001cee:	461a      	mov	r2, r3
 8001cf0:	f000 fa4a 	bl	8002188 <Attribute_Modified_CB>

      	  }
      	  break;
 8001cf4:	bf00      	nop
      }



    }
    break;
 8001cf6:	e003      	b.n	8001d00 <user_notify+0xb8>
    return;
 8001cf8:	bf00      	nop
 8001cfa:	e002      	b.n	8001d02 <user_notify+0xba>
    break;
 8001cfc:	bf00      	nop
 8001cfe:	e000      	b.n	8001d02 <user_notify+0xba>
    break;
 8001d00:	bf00      	nop
  }
}
 8001d02:	3728      	adds	r7, #40	@ 0x28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  connected = FALSE;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <GAP_DisconnectionComplete_CB+0x20>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <GAP_DisconnectionComplete_CB+0x24>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8001d18:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <GAP_DisconnectionComplete_CB+0x28>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	20000294 	.word	0x20000294
 8001d2c:	20000001 	.word	0x20000001
 8001d30:	20000292 	.word	0x20000292

08001d34 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8001d40:	4b0a      	ldr	r3, [pc, #40]	@ (8001d6c <GAP_ConnectionComplete_CB+0x38>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8001d46:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <GAP_ConnectionComplete_CB+0x3c>)
 8001d48:	887b      	ldrh	r3, [r7, #2]
 8001d4a:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 8001d4c:	2305      	movs	r3, #5
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	e002      	b.n	8001d58 <GAP_ConnectionComplete_CB+0x24>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f9      	bne.n	8001d52 <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	20000294 	.word	0x20000294
 8001d70:	20000290 	.word	0x20000290

08001d74 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <HCI_TL_SPI_Init+0x88>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d80:	4a1e      	ldr	r2, [pc, #120]	@ (8001dfc <HCI_TL_SPI_Init+0x88>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d88:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <HCI_TL_SPI_Init+0x88>)
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001d94:	2340      	movs	r3, #64	@ 0x40
 8001d96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d98:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001da2:	f107 030c 	add.w	r3, r7, #12
 8001da6:	4619      	mov	r1, r3
 8001da8:	4815      	ldr	r0, [pc, #84]	@ (8001e00 <HCI_TL_SPI_Init+0x8c>)
 8001daa:	f002 faeb 	bl	8004384 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001dae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db4:	2301      	movs	r3, #1
 8001db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dca:	f002 fadb 	bl	8004384 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001dce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001de0:	f107 030c 	add.w	r3, r7, #12
 8001de4:	4619      	mov	r1, r3
 8001de6:	4807      	ldr	r0, [pc, #28]	@ (8001e04 <HCI_TL_SPI_Init+0x90>)
 8001de8:	f002 facc 	bl	8004384 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 8001dec:	f001 fdc2 	bl	8003974 <BSP_SPI3_Init>
 8001df0:	4603      	mov	r3, r0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3720      	adds	r7, #32
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	48001000 	.word	0x48001000
 8001e04:	48000c00 	.word	0x48000c00

08001e08 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001e0c:	2140      	movs	r1, #64	@ 0x40
 8001e0e:	4808      	ldr	r0, [pc, #32]	@ (8001e30 <HCI_TL_SPI_DeInit+0x28>)
 8001e10:	f002 fc62 	bl	80046d8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001e14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e18:	4806      	ldr	r0, [pc, #24]	@ (8001e34 <HCI_TL_SPI_DeInit+0x2c>)
 8001e1a:	f002 fc5d 	bl	80046d8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8001e1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e26:	f002 fc57 	bl	80046d8 <HAL_GPIO_DeInit>
  return 0;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	48001000 	.word	0x48001000
 8001e34:	48000c00 	.word	0x48000c00

08001e38 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e42:	480d      	ldr	r0, [pc, #52]	@ (8001e78 <HCI_TL_SPI_Reset+0x40>)
 8001e44:	f002 fd54 	bl	80048f0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e52:	f002 fd4d 	bl	80048f0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001e56:	2005      	movs	r0, #5
 8001e58:	f002 f824 	bl	8003ea4 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e66:	f002 fd43 	bl	80048f0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001e6a:	2005      	movs	r0, #5
 8001e6c:	f002 f81a 	bl	8003ea4 <HAL_Delay>
  return 0;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	48000c00 	.word	0x48000c00

08001e7c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8001e8c:	23ff      	movs	r3, #255	@ 0xff
 8001e8e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001e90:	230b      	movs	r3, #11
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	2300      	movs	r3, #0
 8001e96:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e9e:	4822      	ldr	r0, [pc, #136]	@ (8001f28 <HCI_TL_SPI_Receive+0xac>)
 8001ea0:	f002 fd26 	bl	80048f0 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001ea4:	f107 010c 	add.w	r1, r7, #12
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2205      	movs	r2, #5
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f001 fd90 	bl	80039d4 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8001eb4:	7b3b      	ldrb	r3, [r7, #12]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d12a      	bne.n	8001f10 <HCI_TL_SPI_Receive+0x94>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8001eba:	7c3b      	ldrb	r3, [r7, #16]
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	b21a      	sxth	r2, r3
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	b21b      	sxth	r3, r3
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	b21b      	sxth	r3, r3
 8001eca:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8001ecc:	8bfb      	ldrh	r3, [r7, #30]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d01e      	beq.n	8001f10 <HCI_TL_SPI_Receive+0x94>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8001ed2:	8bfa      	ldrh	r2, [r7, #30]
 8001ed4:	887b      	ldrh	r3, [r7, #2]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d901      	bls.n	8001ede <HCI_TL_SPI_Receive+0x62>
        byte_count = size;
 8001eda:	887b      	ldrh	r3, [r7, #2]
 8001edc:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	777b      	strb	r3, [r7, #29]
 8001ee2:	e010      	b.n	8001f06 <HCI_TL_SPI_Receive+0x8a>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8001ee4:	f107 011b 	add.w	r1, r7, #27
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	2201      	movs	r2, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 fd70 	bl	80039d4 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8001ef4:	7f7b      	ldrb	r3, [r7, #29]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	7efa      	ldrb	r2, [r7, #27]
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8001f00:	7f7b      	ldrb	r3, [r7, #29]
 8001f02:	3301      	adds	r3, #1
 8001f04:	777b      	strb	r3, [r7, #29]
 8001f06:	7f7b      	ldrb	r3, [r7, #29]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	8bfa      	ldrh	r2, [r7, #30]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d8e9      	bhi.n	8001ee4 <HCI_TL_SPI_Receive+0x68>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001f10:	2201      	movs	r2, #1
 8001f12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f16:	4804      	ldr	r0, [pc, #16]	@ (8001f28 <HCI_TL_SPI_Receive+0xac>)
 8001f18:	f002 fcea 	bl	80048f0 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8001f1c:	7f7b      	ldrb	r3, [r7, #29]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3720      	adds	r7, #32
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	48000c00 	.word	0x48000c00

08001f2c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001f38:	230a      	movs	r3, #10
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f001 ffa4 	bl	8003e8c <HAL_GetTick>
 8001f44:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f50:	481c      	ldr	r0, [pc, #112]	@ (8001fc4 <HCI_TL_SPI_Send+0x98>)
 8001f52:	f002 fccd 	bl	80048f0 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001f56:	f107 0108 	add.w	r1, r7, #8
 8001f5a:	f107 0310 	add.w	r3, r7, #16
 8001f5e:	2205      	movs	r2, #5
 8001f60:	4618      	mov	r0, r3
 8001f62:	f001 fd37 	bl	80039d4 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8001f66:	7a3b      	ldrb	r3, [r7, #8]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d10f      	bne.n	8001f8c <HCI_TL_SPI_Send+0x60>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8001f6c:	7a7b      	ldrb	r3, [r7, #9]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	887b      	ldrh	r3, [r7, #2]
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d806      	bhi.n	8001f84 <HCI_TL_SPI_Send+0x58>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8001f76:	887b      	ldrh	r3, [r7, #2]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4913      	ldr	r1, [pc, #76]	@ (8001fc8 <HCI_TL_SPI_Send+0x9c>)
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f001 fd29 	bl	80039d4 <BSP_SPI3_SendRecv>
 8001f82:	e006      	b.n	8001f92 <HCI_TL_SPI_Send+0x66>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8001f84:	f06f 0301 	mvn.w	r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	e002      	b.n	8001f92 <HCI_TL_SPI_Send+0x66>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f90:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f98:	480a      	ldr	r0, [pc, #40]	@ (8001fc4 <HCI_TL_SPI_Send+0x98>)
 8001f9a:	f002 fca9 	bl	80048f0 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001f9e:	f001 ff75 	bl	8003e8c <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b0f      	cmp	r3, #15
 8001faa:	d903      	bls.n	8001fb4 <HCI_TL_SPI_Send+0x88>
    {
      result = -3;
 8001fac:	f06f 0302 	mvn.w	r3, #2
 8001fb0:	61fb      	str	r3, [r7, #28]
      break;
 8001fb2:	e002      	b.n	8001fba <HCI_TL_SPI_Send+0x8e>
    }
  } while(result < 0);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	dbc5      	blt.n	8001f46 <HCI_TL_SPI_Send+0x1a>

  return result;
 8001fba:	69fb      	ldr	r3, [r7, #28]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	48000c00 	.word	0x48000c00
 8001fc8:	200002d0 	.word	0x200002d0

08001fcc <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001fd0:	2140      	movs	r1, #64	@ 0x40
 8001fd2:	4805      	ldr	r0, [pc, #20]	@ (8001fe8 <IsDataAvailable+0x1c>)
 8001fd4:	f002 fc74 	bl	80048c0 <HAL_GPIO_ReadPin>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	bf0c      	ite	eq
 8001fde:	2301      	moveq	r3, #1
 8001fe0:	2300      	movne	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	48001000 	.word	0x48001000

08001fec <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001ff2:	4b12      	ldr	r3, [pc, #72]	@ (800203c <hci_tl_lowlevel_init+0x50>)
 8001ff4:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001ff6:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <hci_tl_lowlevel_init+0x54>)
 8001ff8:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001ffa:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <hci_tl_lowlevel_init+0x58>)
 8001ffc:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001ffe:	4b12      	ldr	r3, [pc, #72]	@ (8002048 <hci_tl_lowlevel_init+0x5c>)
 8002000:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8002002:	4b12      	ldr	r3, [pc, #72]	@ (800204c <hci_tl_lowlevel_init+0x60>)
 8002004:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8002006:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <hci_tl_lowlevel_init+0x64>)
 8002008:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	4618      	mov	r0, r3
 800200e:	f007 fe49 	bl	8009ca4 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8002012:	4910      	ldr	r1, [pc, #64]	@ (8002054 <hci_tl_lowlevel_init+0x68>)
 8002014:	4810      	ldr	r0, [pc, #64]	@ (8002058 <hci_tl_lowlevel_init+0x6c>)
 8002016:	f002 f971 	bl	80042fc <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 800201a:	4a10      	ldr	r2, [pc, #64]	@ (800205c <hci_tl_lowlevel_init+0x70>)
 800201c:	2100      	movs	r1, #0
 800201e:	480e      	ldr	r0, [pc, #56]	@ (8002058 <hci_tl_lowlevel_init+0x6c>)
 8002020:	f002 f952 	bl	80042c8 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002024:	2200      	movs	r2, #0
 8002026:	2100      	movs	r1, #0
 8002028:	2017      	movs	r0, #23
 800202a:	f002 f817 	bl	800405c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800202e:	2017      	movs	r0, #23
 8002030:	f002 f830 	bl	8004094 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8002034:	bf00      	nop
 8002036:	3720      	adds	r7, #32
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	08001d75 	.word	0x08001d75
 8002040:	08001e09 	.word	0x08001e09
 8002044:	08001f2d 	.word	0x08001f2d
 8002048:	08001e7d 	.word	0x08001e7d
 800204c:	08001e39 	.word	0x08001e39
 8002050:	08003a15 	.word	0x08003a15
 8002054:	16000006 	.word	0x16000006
 8002058:	200002c8 	.word	0x200002c8
 800205c:	08002061 	.word	0x08002061

08002060 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8002064:	e005      	b.n	8002072 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8002066:	2000      	movs	r0, #0
 8002068:	f007 ff80 	bl	8009f6c <hci_notify_asynch_evt>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d105      	bne.n	800207e <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8002072:	f7ff ffab 	bl	8001fcc <IsDataAvailable>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f4      	bne.n	8002066 <hci_tl_lowlevel_isr+0x6>
 800207c:	e000      	b.n	8002080 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 800207e:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4a07      	ldr	r2, [pc, #28]	@ (80020b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002094:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	4a06      	ldr	r2, [pc, #24]	@ (80020b4 <vApplicationGetIdleTaskMemory+0x30>)
 800209a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2280      	movs	r2, #128	@ 0x80
 80020a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	200003d0 	.word	0x200003d0
 80020b4:	20000424 	.word	0x20000424

080020b8 <Add_Acc_Service>:
//                       GATT_NOTIFY_ATTRIBUTE_WRITE,
//                       16, 1,
//                       &SampleFreqCharHandle);
// }
void Add_Acc_Service(void)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b08b      	sub	sp, #44	@ 0x2c
 80020bc:	af06      	add	r7, sp, #24
//	tBleStatus ret;
  uint8_t uuid128_base[16] = {
 80020be:	4b21      	ldr	r3, [pc, #132]	@ (8002144 <Add_Acc_Service+0x8c>)
 80020c0:	463c      	mov	r4, r7
 80020c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      0xd5, 0xa5, 0x02, 0x00, 0x36, 0xac, 0xe1, 0x11,
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

  // UUID for service: 0000AA00-0000-0001-11e1-ac360002a5d5
  uuid128_base[12] = 0x00;
 80020c8:	2300      	movs	r3, #0
 80020ca:	733b      	strb	r3, [r7, #12]
  uuid128_base[13] = 0xAA;
 80020cc:	23aa      	movs	r3, #170	@ 0xaa
 80020ce:	737b      	strb	r3, [r7, #13]
  aci_gatt_add_serv(UUID_TYPE_128, uuid128_base, PRIMARY_SERVICE, 7, &AccServiceHandle);\
 80020d0:	4639      	mov	r1, r7
 80020d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002148 <Add_Acc_Service+0x90>)
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2307      	movs	r3, #7
 80020d8:	2201      	movs	r2, #1
 80020da:	2002      	movs	r0, #2
 80020dc:	f007 f97e 	bl	80093dc <aci_gatt_add_serv>
//  if (ret != BLE_STATUS_SUCCESS) goto fail;

  // UUID for ACC characteristic: 00000100-0000-0001-11e1-ac360002a5d5
  uuid128_base[12] = 0x00;
 80020e0:	2300      	movs	r3, #0
 80020e2:	733b      	strb	r3, [r7, #12]
  uuid128_base[13] = 0x01;
 80020e4:	2301      	movs	r3, #1
 80020e6:	737b      	strb	r3, [r7, #13]
  aci_gatt_add_char(
 80020e8:	4b17      	ldr	r3, [pc, #92]	@ (8002148 <Add_Acc_Service+0x90>)
 80020ea:	8818      	ldrh	r0, [r3, #0]
 80020ec:	463a      	mov	r2, r7
 80020ee:	4b17      	ldr	r3, [pc, #92]	@ (800214c <Add_Acc_Service+0x94>)
 80020f0:	9305      	str	r3, [sp, #20]
 80020f2:	2301      	movs	r3, #1
 80020f4:	9304      	str	r3, [sp, #16]
 80020f6:	2310      	movs	r3, #16
 80020f8:	9303      	str	r3, [sp, #12]
 80020fa:	2301      	movs	r3, #1
 80020fc:	9302      	str	r3, [sp, #8]
 80020fe:	2300      	movs	r3, #0
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	2312      	movs	r3, #18
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2306      	movs	r3, #6
 8002108:	2102      	movs	r1, #2
 800210a:	f007 f9f0 	bl	80094ee <aci_gatt_add_char>
  //        CHAR_PROP_WRITE | CHAR_PROP_WRITE_WITHOUT_RESP,
  //        ATTR_PERMISSION_NONE,
  //        GATT_NOTIFY_ATTRIBUTE_WRITE,
  //        16, 1,
  //        &SampleFreqCharHandle);
  uuid128_base[12] = 0x01;
 800210e:	2301      	movs	r3, #1
 8002110:	733b      	strb	r3, [r7, #12]
  uuid128_base[13] = 0x01;
 8002112:	2301      	movs	r3, #1
 8002114:	737b      	strb	r3, [r7, #13]
  aci_gatt_add_char(
 8002116:	4b0c      	ldr	r3, [pc, #48]	@ (8002148 <Add_Acc_Service+0x90>)
 8002118:	8818      	ldrh	r0, [r3, #0]
 800211a:	463a      	mov	r2, r7
 800211c:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <Add_Acc_Service+0x98>)
 800211e:	9305      	str	r3, [sp, #20]
 8002120:	2301      	movs	r3, #1
 8002122:	9304      	str	r3, [sp, #16]
 8002124:	2310      	movs	r3, #16
 8002126:	9303      	str	r3, [sp, #12]
 8002128:	2302      	movs	r3, #2
 800212a:	9302      	str	r3, [sp, #8]
 800212c:	2300      	movs	r3, #0
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	230c      	movs	r3, #12
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2304      	movs	r3, #4
 8002136:	2102      	movs	r1, #2
 8002138:	f007 f9d9 	bl	80094ee <aci_gatt_add_char>
//  return BLE_STATUS_SUCCESS;
//// fail:
//   printf("Error while adding LED service.\n");
//   return BLE_STATUS_ERROR ;

}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bd90      	pop	{r4, r7, pc}
 8002144:	0800e6f8 	.word	0x0800e6f8
 8002148:	20001d44 	.word	0x20001d44
 800214c:	20001d46 	.word	0x20001d46
 8002150:	20001d48 	.word	0x20001d48

08002154 <Send_Action>:

  aci_gatt_update_char_value(AccServiceHandle, AccCharHandle, 0, 6, notification);
}

void Send_Action(char action[], uint8_t len)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af02      	add	r7, sp, #8
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
  //	return;
  aci_gatt_update_char_value(AccServiceHandle, AccCharHandle, 0, len, action);
 8002160:	4b07      	ldr	r3, [pc, #28]	@ (8002180 <Send_Action+0x2c>)
 8002162:	8818      	ldrh	r0, [r3, #0]
 8002164:	4b07      	ldr	r3, [pc, #28]	@ (8002184 <Send_Action+0x30>)
 8002166:	8819      	ldrh	r1, [r3, #0]
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	4613      	mov	r3, r2
 8002170:	2200      	movs	r2, #0
 8002172:	f007 fa87 	bl	8009684 <aci_gatt_update_char_value>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20001d44 	.word	0x20001d44
 8002184:	20001d46 	.word	0x20001d46

08002188 <Attribute_Modified_CB>:

void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	603a      	str	r2, [r7, #0]
 8002192:	80fb      	strh	r3, [r7, #6]
 8002194:	460b      	mov	r3, r1
 8002196:	717b      	strb	r3, [r7, #5]
  if (handle == SampleFreqCharHandle + 1) // +1 to reach the value handle
 8002198:	88fa      	ldrh	r2, [r7, #6]
 800219a:	4b15      	ldr	r3, [pc, #84]	@ (80021f0 <Attribute_Modified_CB+0x68>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	3301      	adds	r3, #1
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d121      	bne.n	80021e8 <Attribute_Modified_CB+0x60>
  {
    g_sample_rate = (uint32_t)(att_data[0] | (att_data[1] << 8) | (att_data[2] << 16) | (att_data[3] << 24));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	3301      	adds	r3, #1
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	431a      	orrs	r2, r3
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	3302      	adds	r3, #2
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	041b      	lsls	r3, r3, #16
 80021bc:	431a      	orrs	r2, r3
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	3303      	adds	r3, #3
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	061b      	lsls	r3, r3, #24
 80021c6:	4313      	orrs	r3, r2
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <Attribute_Modified_CB+0x6c>)
 80021cc:	601a      	str	r2, [r3, #0]

    if (g_sample_rate == 0)
 80021ce:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <Attribute_Modified_CB+0x6c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d102      	bne.n	80021dc <Attribute_Modified_CB+0x54>
      g_sample_rate = 1; // avoid divide-by-zero later
 80021d6:	4b07      	ldr	r3, [pc, #28]	@ (80021f4 <Attribute_Modified_CB+0x6c>)
 80021d8:	2201      	movs	r2, #1
 80021da:	601a      	str	r2, [r3, #0]
    printf("[BLE] Sample rate updated to: %lu\n", g_sample_rate);
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <Attribute_Modified_CB+0x6c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4619      	mov	r1, r3
 80021e2:	4805      	ldr	r0, [pc, #20]	@ (80021f8 <Attribute_Modified_CB+0x70>)
 80021e4:	f00a fa9a 	bl	800c71c <iprintf>
  }
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20001d48 	.word	0x20001d48
 80021f4:	20000004 	.word	0x20000004
 80021f8:	0800e708 	.word	0x0800e708

080021fc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002204:	1d39      	adds	r1, r7, #4
 8002206:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800220a:	2201      	movs	r2, #1
 800220c:	4803      	ldr	r0, [pc, #12]	@ (800221c <__io_putchar+0x20>)
 800220e:	f005 fe8d 	bl	8007f2c <HAL_UART_Transmit>
  return ch;
 8002212:	687b      	ldr	r3, [r7, #4]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	200006a0 	.word	0x200006a0

08002220 <main>:
 * @brief  The application entry point.
 * @retval int
 */

int main(void)
{
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b08e      	sub	sp, #56	@ 0x38
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002226:	f001 fe05 	bl	8003e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800222a:	f000 f843 	bl	80022b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800222e:	f000 f98f 	bl	8002550 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8002232:	f000 f8a1 	bl	8002378 <MX_DFSDM1_Init>
  // MX_I2C2_Init();
  MX_QUADSPI_Init();
 8002236:	f000 f8d7 	bl	80023e8 <MX_QUADSPI_Init>
  MX_USART1_UART_Init();
 800223a:	f000 f8fb 	bl	8002434 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800223e:	f000 f929 	bl	8002494 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002242:	f000 f957 	bl	80024f4 <MX_USB_OTG_FS_PCD_Init>
  MX_BlueNRG_MS_Init();
 8002246:	f7fe fe95 	bl	8000f74 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 800224a:	f001 fd9b 	bl	8003d84 <BSP_ACCELERO_Init>
  Add_Acc_Service();
 800224e:	f7ff ff33 	bl	80020b8 <Add_Acc_Service>
  /* definition and creation of defaultTask */
  /*osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);*/

  /* definition and creation of myTaskBLE */
  osThreadStaticDef(myTaskBLE, StartTaskBLE, osPriorityNormal, 0, 512, myTaskBLEBuffer, &myTaskBLEControlBlock);
 8002252:	4b14      	ldr	r3, [pc, #80]	@ (80022a4 <main+0x84>)
 8002254:	f107 041c 	add.w	r4, r7, #28
 8002258:	461d      	mov	r5, r3
 800225a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800225c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800225e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002262:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTaskBLEHandle = osThreadCreate(osThread(myTaskBLE), NULL);
 8002266:	f107 031c 	add.w	r3, r7, #28
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f007 ffff 	bl	800a270 <osThreadCreate>
 8002272:	4603      	mov	r3, r0
 8002274:	4a0c      	ldr	r2, [pc, #48]	@ (80022a8 <main+0x88>)
 8002276:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTaskACC */
  osThreadStaticDef(myTaskACC, StartTaskACC, osPriorityNormal, 0, 512, myTaskACCBuffer, &myTaskACCControlBlock);
 8002278:	4b0c      	ldr	r3, [pc, #48]	@ (80022ac <main+0x8c>)
 800227a:	463c      	mov	r4, r7
 800227c:	461d      	mov	r5, r3
 800227e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002282:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002286:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTaskACCHandle = osThreadCreate(osThread(myTaskACC), NULL);
 800228a:	463b      	mov	r3, r7
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f007 ffee 	bl	800a270 <osThreadCreate>
 8002294:	4603      	mov	r3, r0
 8002296:	4a06      	ldr	r2, [pc, #24]	@ (80022b0 <main+0x90>)
 8002298:	6013      	str	r3, [r2, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800229a:	f007 ffe2 	bl	800a262 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800229e:	bf00      	nop
 80022a0:	e7fd      	b.n	800229e <main+0x7e>
 80022a2:	bf00      	nop
 80022a4:	0800e738 	.word	0x0800e738
 80022a8:	20000c94 	.word	0x20000c94
 80022ac:	0800e760 	.word	0x0800e760
 80022b0:	200014ec 	.word	0x200014ec

080022b4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b096      	sub	sp, #88	@ 0x58
 80022b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ba:	f107 0314 	add.w	r3, r7, #20
 80022be:	2244      	movs	r2, #68	@ 0x44
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f00a fb72 	bl	800c9ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c8:	463b      	mov	r3, r7
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]
 80022d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80022da:	f003 fab5 	bl	8005848 <HAL_PWREx_ControlVoltageScaling>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80022e4:	f000 fc74 	bl	8002bd0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 80022e8:	f003 fa90 	bl	800580c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80022ec:	4b21      	ldr	r3, [pc, #132]	@ (8002374 <SystemClock_Config+0xc0>)
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f2:	4a20      	ldr	r2, [pc, #128]	@ (8002374 <SystemClock_Config+0xc0>)
 80022f4:	f023 0318 	bic.w	r3, r3, #24
 80022f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 80022fc:	2314      	movs	r3, #20
 80022fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002300:	2301      	movs	r3, #1
 8002302:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002304:	2301      	movs	r3, #1
 8002306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800230c:	2360      	movs	r3, #96	@ 0x60
 800230e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002310:	2302      	movs	r3, #2
 8002312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002314:	2301      	movs	r3, #1
 8002316:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002318:	2301      	movs	r3, #1
 800231a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800231c:	2328      	movs	r3, #40	@ 0x28
 800231e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002320:	2307      	movs	r3, #7
 8002322:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002324:	2302      	movs	r3, #2
 8002326:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002328:	2302      	movs	r3, #2
 800232a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	4618      	mov	r0, r3
 8002332:	f003 fbab 	bl	8005a8c <HAL_RCC_OscConfig>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800233c:	f000 fc48 	bl	8002bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002340:	230f      	movs	r3, #15
 8002342:	603b      	str	r3, [r7, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002344:	2303      	movs	r3, #3
 8002346:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002348:	2300      	movs	r3, #0
 800234a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002354:	463b      	mov	r3, r7
 8002356:	2104      	movs	r1, #4
 8002358:	4618      	mov	r0, r3
 800235a:	f003 ff73 	bl	8006244 <HAL_RCC_ClockConfig>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002364:	f000 fc34 	bl	8002bd0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
   */
  HAL_RCCEx_EnableMSIPLLMode();
 8002368:	f004 fcac 	bl	8006cc4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800236c:	bf00      	nop
 800236e:	3758      	adds	r7, #88	@ 0x58
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000

08002378 <MX_DFSDM1_Init>:
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800237c:	4b18      	ldr	r3, [pc, #96]	@ (80023e0 <MX_DFSDM1_Init+0x68>)
 800237e:	4a19      	ldr	r2, [pc, #100]	@ (80023e4 <MX_DFSDM1_Init+0x6c>)
 8002380:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8002382:	4b17      	ldr	r3, [pc, #92]	@ (80023e0 <MX_DFSDM1_Init+0x68>)
 8002384:	2201      	movs	r2, #1
 8002386:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002388:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <MX_DFSDM1_Init+0x68>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800238e:	4b14      	ldr	r3, [pc, #80]	@ (80023e0 <MX_DFSDM1_Init+0x68>)
 8002390:	2202      	movs	r2, #2
 8002392:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002394:	4b12      	ldr	r3, [pc, #72]	@ (80023e0 <MX_DFSDM1_Init+0x68>)
 8002396:	2200      	movs	r2, #0
 8002398:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800239a:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <MX_DFSDM1_Init+0x68>)
 800239c:	2200      	movs	r2, #0
 800239e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80023a0:	4b0f      	ldr	r3, [pc, #60]	@ (80023e0 <MX_DFSDM1_Init+0x68>)
 80023a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023a6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80023a8:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <MX_DFSDM1_Init+0x68>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80023ae:	4b0c      	ldr	r3, [pc, #48]	@ (80023e0 <MX_DFSDM1_Init+0x68>)
 80023b0:	2204      	movs	r2, #4
 80023b2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80023b4:	4b0a      	ldr	r3, [pc, #40]	@ (80023e0 <MX_DFSDM1_Init+0x68>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80023ba:	4b09      	ldr	r3, [pc, #36]	@ (80023e0 <MX_DFSDM1_Init+0x68>)
 80023bc:	2201      	movs	r2, #1
 80023be:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80023c0:	4b07      	ldr	r3, [pc, #28]	@ (80023e0 <MX_DFSDM1_Init+0x68>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80023c6:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <MX_DFSDM1_Init+0x68>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80023cc:	4804      	ldr	r0, [pc, #16]	@ (80023e0 <MX_DFSDM1_Init+0x68>)
 80023ce:	f001 fe6f 	bl	80040b0 <HAL_DFSDM_ChannelInit>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80023d8:	f000 fbfa 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */
}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000624 	.word	0x20000624
 80023e4:	40016020 	.word	0x40016020

080023e8 <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80023ec:	4b0f      	ldr	r3, [pc, #60]	@ (800242c <MX_QUADSPI_Init+0x44>)
 80023ee:	4a10      	ldr	r2, [pc, #64]	@ (8002430 <MX_QUADSPI_Init+0x48>)
 80023f0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <MX_QUADSPI_Init+0x44>)
 80023f4:	2202      	movs	r2, #2
 80023f6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <MX_QUADSPI_Init+0x44>)
 80023fa:	2204      	movs	r2, #4
 80023fc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	@ (800242c <MX_QUADSPI_Init+0x44>)
 8002400:	2210      	movs	r2, #16
 8002402:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002404:	4b09      	ldr	r3, [pc, #36]	@ (800242c <MX_QUADSPI_Init+0x44>)
 8002406:	2217      	movs	r2, #23
 8002408:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800240a:	4b08      	ldr	r3, [pc, #32]	@ (800242c <MX_QUADSPI_Init+0x44>)
 800240c:	2200      	movs	r2, #0
 800240e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002410:	4b06      	ldr	r3, [pc, #24]	@ (800242c <MX_QUADSPI_Init+0x44>)
 8002412:	2200      	movs	r2, #0
 8002414:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002416:	4805      	ldr	r0, [pc, #20]	@ (800242c <MX_QUADSPI_Init+0x44>)
 8002418:	f003 fa7c 	bl	8005914 <HAL_QSPI_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8002422:	f000 fbd5 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	2000065c 	.word	0x2000065c
 8002430:	a0001000 	.word	0xa0001000

08002434 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002438:	4b14      	ldr	r3, [pc, #80]	@ (800248c <MX_USART1_UART_Init+0x58>)
 800243a:	4a15      	ldr	r2, [pc, #84]	@ (8002490 <MX_USART1_UART_Init+0x5c>)
 800243c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800243e:	4b13      	ldr	r3, [pc, #76]	@ (800248c <MX_USART1_UART_Init+0x58>)
 8002440:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002444:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002446:	4b11      	ldr	r3, [pc, #68]	@ (800248c <MX_USART1_UART_Init+0x58>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800244c:	4b0f      	ldr	r3, [pc, #60]	@ (800248c <MX_USART1_UART_Init+0x58>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002452:	4b0e      	ldr	r3, [pc, #56]	@ (800248c <MX_USART1_UART_Init+0x58>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002458:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <MX_USART1_UART_Init+0x58>)
 800245a:	220c      	movs	r2, #12
 800245c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245e:	4b0b      	ldr	r3, [pc, #44]	@ (800248c <MX_USART1_UART_Init+0x58>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002464:	4b09      	ldr	r3, [pc, #36]	@ (800248c <MX_USART1_UART_Init+0x58>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800246a:	4b08      	ldr	r3, [pc, #32]	@ (800248c <MX_USART1_UART_Init+0x58>)
 800246c:	2200      	movs	r2, #0
 800246e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002470:	4b06      	ldr	r3, [pc, #24]	@ (800248c <MX_USART1_UART_Init+0x58>)
 8002472:	2200      	movs	r2, #0
 8002474:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002476:	4805      	ldr	r0, [pc, #20]	@ (800248c <MX_USART1_UART_Init+0x58>)
 8002478:	f005 fd0a 	bl	8007e90 <HAL_UART_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002482:	f000 fba5 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200006a0 	.word	0x200006a0
 8002490:	40013800 	.word	0x40013800

08002494 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002498:	4b14      	ldr	r3, [pc, #80]	@ (80024ec <MX_USART3_UART_Init+0x58>)
 800249a:	4a15      	ldr	r2, [pc, #84]	@ (80024f0 <MX_USART3_UART_Init+0x5c>)
 800249c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800249e:	4b13      	ldr	r3, [pc, #76]	@ (80024ec <MX_USART3_UART_Init+0x58>)
 80024a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024a6:	4b11      	ldr	r3, [pc, #68]	@ (80024ec <MX_USART3_UART_Init+0x58>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024ac:	4b0f      	ldr	r3, [pc, #60]	@ (80024ec <MX_USART3_UART_Init+0x58>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024b2:	4b0e      	ldr	r3, [pc, #56]	@ (80024ec <MX_USART3_UART_Init+0x58>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024b8:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <MX_USART3_UART_Init+0x58>)
 80024ba:	220c      	movs	r2, #12
 80024bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024be:	4b0b      	ldr	r3, [pc, #44]	@ (80024ec <MX_USART3_UART_Init+0x58>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c4:	4b09      	ldr	r3, [pc, #36]	@ (80024ec <MX_USART3_UART_Init+0x58>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ca:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <MX_USART3_UART_Init+0x58>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024d0:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <MX_USART3_UART_Init+0x58>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024d6:	4805      	ldr	r0, [pc, #20]	@ (80024ec <MX_USART3_UART_Init+0x58>)
 80024d8:	f005 fcda 	bl	8007e90 <HAL_UART_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80024e2:	f000 fb75 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000728 	.word	0x20000728
 80024f0:	40004800 	.word	0x40004800

080024f4 <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80024f8:	4b14      	ldr	r3, [pc, #80]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024fa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80024fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002500:	4b12      	ldr	r3, [pc, #72]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002502:	2206      	movs	r2, #6
 8002504:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002506:	4b11      	ldr	r3, [pc, #68]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002508:	2202      	movs	r2, #2
 800250a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800250c:	4b0f      	ldr	r3, [pc, #60]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800250e:	2202      	movs	r2, #2
 8002510:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002512:	4b0e      	ldr	r3, [pc, #56]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002514:	2200      	movs	r2, #0
 8002516:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002518:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800251a:	2200      	movs	r2, #0
 800251c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800251e:	4b0b      	ldr	r3, [pc, #44]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002520:	2200      	movs	r2, #0
 8002522:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8002524:	4b09      	ldr	r3, [pc, #36]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002526:	2200      	movs	r2, #0
 8002528:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800252a:	4b08      	ldr	r3, [pc, #32]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800252c:	2200      	movs	r2, #0
 800252e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002530:	4b06      	ldr	r3, [pc, #24]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002532:	2200      	movs	r2, #0
 8002534:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002536:	4805      	ldr	r0, [pc, #20]	@ (800254c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002538:	f003 f835 	bl	80055a6 <HAL_PCD_Init>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002542:	f000 fb45 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	200007b0 	.word	0x200007b0

08002550 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	@ 0x28
 8002554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002556:	f107 0314 	add.w	r3, r7, #20
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
 8002564:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002566:	4bbd      	ldr	r3, [pc, #756]	@ (800285c <MX_GPIO_Init+0x30c>)
 8002568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800256a:	4abc      	ldr	r2, [pc, #752]	@ (800285c <MX_GPIO_Init+0x30c>)
 800256c:	f043 0310 	orr.w	r3, r3, #16
 8002570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002572:	4bba      	ldr	r3, [pc, #744]	@ (800285c <MX_GPIO_Init+0x30c>)
 8002574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800257e:	4bb7      	ldr	r3, [pc, #732]	@ (800285c <MX_GPIO_Init+0x30c>)
 8002580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002582:	4ab6      	ldr	r2, [pc, #728]	@ (800285c <MX_GPIO_Init+0x30c>)
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800258a:	4bb4      	ldr	r3, [pc, #720]	@ (800285c <MX_GPIO_Init+0x30c>)
 800258c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	4bb1      	ldr	r3, [pc, #708]	@ (800285c <MX_GPIO_Init+0x30c>)
 8002598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259a:	4ab0      	ldr	r2, [pc, #704]	@ (800285c <MX_GPIO_Init+0x30c>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025a2:	4bae      	ldr	r3, [pc, #696]	@ (800285c <MX_GPIO_Init+0x30c>)
 80025a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	60bb      	str	r3, [r7, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ae:	4bab      	ldr	r3, [pc, #684]	@ (800285c <MX_GPIO_Init+0x30c>)
 80025b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b2:	4aaa      	ldr	r2, [pc, #680]	@ (800285c <MX_GPIO_Init+0x30c>)
 80025b4:	f043 0302 	orr.w	r3, r3, #2
 80025b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025ba:	4ba8      	ldr	r3, [pc, #672]	@ (800285c <MX_GPIO_Init+0x30c>)
 80025bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	607b      	str	r3, [r7, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025c6:	4ba5      	ldr	r3, [pc, #660]	@ (800285c <MX_GPIO_Init+0x30c>)
 80025c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ca:	4aa4      	ldr	r2, [pc, #656]	@ (800285c <MX_GPIO_Init+0x30c>)
 80025cc:	f043 0308 	orr.w	r3, r3, #8
 80025d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025d2:	4ba2      	ldr	r3, [pc, #648]	@ (800285c <MX_GPIO_Init+0x30c>)
 80025d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin | ISM43362_RST_Pin, GPIO_PIN_RESET);
 80025de:	2200      	movs	r2, #0
 80025e0:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80025e4:	489e      	ldr	r0, [pc, #632]	@ (8002860 <MX_GPIO_Init+0x310>)
 80025e6:	f002 f983 	bl	80048f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin, GPIO_PIN_RESET);
 80025ea:	2200      	movs	r2, #0
 80025ec:	f248 1104 	movw	r1, #33028	@ 0x8104
 80025f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025f4:	f002 f97c 	bl	80048f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin | SPSGRF_915_SDN_Pin | ARD_D5_Pin, GPIO_PIN_RESET);
 80025f8:	2200      	movs	r2, #0
 80025fa:	f24b 0114 	movw	r1, #45076	@ 0xb014
 80025fe:	4899      	ldr	r0, [pc, #612]	@ (8002864 <MX_GPIO_Init+0x314>)
 8002600:	f002 f976 	bl	80048f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin | PMOD_RESET_Pin | STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8002604:	2200      	movs	r2, #0
 8002606:	f241 0181 	movw	r1, #4225	@ 0x1081
 800260a:	4897      	ldr	r0, [pc, #604]	@ (8002868 <MX_GPIO_Init+0x318>)
 800260c:	f002 f970 	bl	80048f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002610:	2201      	movs	r2, #1
 8002612:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002616:	4894      	ldr	r0, [pc, #592]	@ (8002868 <MX_GPIO_Init+0x318>)
 8002618:	f002 f96a 	bl	80048f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800261c:	2200      	movs	r2, #0
 800261e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8002622:	4892      	ldr	r0, [pc, #584]	@ (800286c <MX_GPIO_Init+0x31c>)
 8002624:	f002 f964 	bl	80048f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002628:	2201      	movs	r2, #1
 800262a:	2120      	movs	r1, #32
 800262c:	488d      	ldr	r0, [pc, #564]	@ (8002864 <MX_GPIO_Init+0x314>)
 800262e:	f002 f95f 	bl	80048f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002632:	2201      	movs	r2, #1
 8002634:	2101      	movs	r1, #1
 8002636:	488a      	ldr	r0, [pc, #552]	@ (8002860 <MX_GPIO_Init+0x310>)
 8002638:	f002 f95a 	bl	80048f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin | ISM43362_RST_Pin | ISM43362_SPI3_CSN_Pin;
 800263c:	f240 1315 	movw	r3, #277	@ 0x115
 8002640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002642:	2301      	movs	r3, #1
 8002644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264a:	2300      	movs	r3, #0
 800264c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800264e:	f107 0314 	add.w	r3, r7, #20
 8002652:	4619      	mov	r1, r3
 8002654:	4882      	ldr	r0, [pc, #520]	@ (8002860 <MX_GPIO_Init+0x310>)
 8002656:	f001 fe95 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin | SPSGRF_915_GPIO3_EXTI5_Pin | SPBTLE_RF_IRQ_EXTI6_Pin | ISM43362_DRDY_EXTI1_Pin;
 800265a:	236a      	movs	r3, #106	@ 0x6a
 800265c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800265e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	4619      	mov	r1, r3
 800266e:	487c      	ldr	r0, [pc, #496]	@ (8002860 <MX_GPIO_Init+0x310>)
 8002670:	f001 fe88 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin | ARD_A4_Pin | ARD_A3_Pin | ARD_A2_Pin | ARD_A1_Pin | ARD_A0_Pin;
 8002674:	233f      	movs	r3, #63	@ 0x3f
 8002676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002678:	230b      	movs	r3, #11
 800267a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002680:	f107 0314 	add.w	r3, r7, #20
 8002684:	4619      	mov	r1, r3
 8002686:	4879      	ldr	r0, [pc, #484]	@ (800286c <MX_GPIO_Init+0x31c>)
 8002688:	f001 fe7c 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin | ARD_D0_Pin;
 800268c:	2303      	movs	r3, #3
 800268e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002698:	2303      	movs	r3, #3
 800269a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800269c:	2308      	movs	r3, #8
 800269e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a0:	f107 0314 	add.w	r3, r7, #20
 80026a4:	4619      	mov	r1, r3
 80026a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026aa:	f001 fe6b 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin;
 80026ae:	f248 1304 	movw	r3, #33028	@ 0x8104
 80026b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026b4:	2301      	movs	r3, #1
 80026b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026bc:	2300      	movs	r3, #0
 80026be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	4619      	mov	r1, r3
 80026c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026ca:	f001 fe5b 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80026ce:	2308      	movs	r3, #8
 80026d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	2300      	movs	r3, #0
 80026dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026de:	2301      	movs	r3, #1
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	4619      	mov	r1, r3
 80026e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026ec:	f001 fe4a 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80026f0:	2310      	movs	r3, #16
 80026f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80026f4:	230b      	movs	r3, #11
 80026f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	4619      	mov	r1, r3
 8002702:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002706:	f001 fe3d 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin | ARD_D12_Pin | ARD_D11_Pin;
 800270a:	23e0      	movs	r3, #224	@ 0xe0
 800270c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002716:	2303      	movs	r3, #3
 8002718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800271a:	2305      	movs	r3, #5
 800271c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271e:	f107 0314 	add.w	r3, r7, #20
 8002722:	4619      	mov	r1, r3
 8002724:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002728:	f001 fe2c 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800272c:	2301      	movs	r3, #1
 800272e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002730:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	4619      	mov	r1, r3
 8002740:	4848      	ldr	r0, [pc, #288]	@ (8002864 <MX_GPIO_Init+0x314>)
 8002742:	f001 fe1f 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002746:	2302      	movs	r3, #2
 8002748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800274a:	230b      	movs	r3, #11
 800274c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002752:	f107 0314 	add.w	r3, r7, #20
 8002756:	4619      	mov	r1, r3
 8002758:	4842      	ldr	r0, [pc, #264]	@ (8002864 <MX_GPIO_Init+0x314>)
 800275a:	f001 fe13 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin | SPSGRF_915_SDN_Pin | ARD_D5_Pin | SPSGRF_915_SPI3_CSN_Pin;
 800275e:	f24b 0334 	movw	r3, #45108	@ 0xb034
 8002762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002764:	2301      	movs	r3, #1
 8002766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276c:	2300      	movs	r3, #0
 800276e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	4619      	mov	r1, r3
 8002776:	483b      	ldr	r0, [pc, #236]	@ (8002864 <MX_GPIO_Init+0x314>)
 8002778:	f001 fe04 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin | LSM6DSL_INT1_EXTI11_Pin | ARD_D2_Pin | HTS221_DRDY_EXTI15_Pin | PMOD_IRQ_EXTI12_Pin;
 800277c:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8002780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002782:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	4619      	mov	r1, r3
 8002792:	4835      	ldr	r0, [pc, #212]	@ (8002868 <MX_GPIO_Init+0x318>)
 8002794:	f001 fdf6 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | SPBTLE_RF_SPI3_CSN_Pin | PMOD_RESET_Pin | STSAFE_A100_RESET_Pin;
 8002798:	f243 0381 	movw	r3, #12417	@ 0x3081
 800279c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800279e:	2301      	movs	r3, #1
 80027a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	4619      	mov	r1, r3
 80027b0:	482d      	ldr	r0, [pc, #180]	@ (8002868 <MX_GPIO_Init+0x318>)
 80027b2:	f001 fde7 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin;
 80027b6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80027ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027bc:	2301      	movs	r3, #1
 80027be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2300      	movs	r3, #0
 80027c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	4619      	mov	r1, r3
 80027ce:	4827      	ldr	r0, [pc, #156]	@ (800286c <MX_GPIO_Init+0x31c>)
 80027d0:	f001 fdd8 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin | LSM3MDL_DRDY_EXTI8_Pin;
 80027d4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80027d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	4619      	mov	r1, r3
 80027ea:	4820      	ldr	r0, [pc, #128]	@ (800286c <MX_GPIO_Init+0x31c>)
 80027ec:	f001 fdca 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80027f0:	2302      	movs	r3, #2
 80027f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	2302      	movs	r3, #2
 80027f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fc:	2303      	movs	r3, #3
 80027fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002800:	2305      	movs	r3, #5
 8002802:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	4619      	mov	r1, r3
 800280a:	4817      	ldr	r0, [pc, #92]	@ (8002868 <MX_GPIO_Init+0x318>)
 800280c:	f001 fdba 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin | PMOD_UART2_RTS_Pin | PMOD_UART2_TX_Pin | PMOD_UART2_RX_Pin;
 8002810:	2378      	movs	r3, #120	@ 0x78
 8002812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002814:	2302      	movs	r3, #2
 8002816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281c:	2303      	movs	r3, #3
 800281e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002820:	2307      	movs	r3, #7
 8002822:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	4619      	mov	r1, r3
 800282a:	480f      	ldr	r0, [pc, #60]	@ (8002868 <MX_GPIO_Init+0x318>)
 800282c:	f001 fdaa 	bl	8004384 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin | ARD_D14_Pin;
 8002830:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002836:	2312      	movs	r3, #18
 8002838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283e:	2303      	movs	r3, #3
 8002840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002842:	2304      	movs	r3, #4
 8002844:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002846:	f107 0314 	add.w	r3, r7, #20
 800284a:	4619      	mov	r1, r3
 800284c:	4805      	ldr	r0, [pc, #20]	@ (8002864 <MX_GPIO_Init+0x314>)
 800284e:	f001 fd99 	bl	8004384 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	2105      	movs	r1, #5
 8002856:	2017      	movs	r0, #23
 8002858:	e00a      	b.n	8002870 <MX_GPIO_Init+0x320>
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000
 8002860:	48001000 	.word	0x48001000
 8002864:	48000400 	.word	0x48000400
 8002868:	48000c00 	.word	0x48000c00
 800286c:	48000800 	.word	0x48000800
 8002870:	f001 fbf4 	bl	800405c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002874:	2017      	movs	r0, #23
 8002876:	f001 fc0d 	bl	8004094 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	2105      	movs	r1, #5
 800287e:	2028      	movs	r0, #40	@ 0x28
 8002880:	f001 fbec 	bl	800405c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002884:	2028      	movs	r0, #40	@ 0x28
 8002886:	f001 fc05 	bl	8004094 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800288a:	bf00      	nop
 800288c:	3728      	adds	r7, #40	@ 0x28
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop

08002894 <StartTaskBLE>:
 */
/* USER CODE END Header_StartTaskBLE */


void StartTaskBLE(void const *argument)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
//	    	    printf("Advertising started.\n");
//	    	}
  /* Infinite loop */
  for (;;)
  {
    MX_BlueNRG_MS_Process();
 800289c:	f7fe fc16 	bl	80010cc <MX_BlueNRG_MS_Process>
 80028a0:	e7fc      	b.n	800289c <StartTaskBLE+0x8>
	...

080028a4 <StartTaskACC>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTaskACC */
void StartTaskACC(void const *argument)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b096      	sub	sp, #88	@ 0x58
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskACC */
  const TickType_t ten_seconds = pdMS_TO_TICKS(10000);
 80028ac:	f242 7310 	movw	r3, #10000	@ 0x2710
 80028b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  const TickType_t three_seconds = pdMS_TO_TICKS(3000);
 80028b2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80028b6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t shake_count = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint8_t shake_state = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint32_t start_time, cd_start_time;
  uint8_t cooldown = false;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f




//  arm_fir_init_f32(&Sx, NUM_TAPS, firCoeffs, firStateX, BLOCK_SIZE);
  arm_fir_init_f32(&Sx, NUM_TAPS, firCoeffs, firStateX, BLOCK_SIZE);
 80028c8:	2301      	movs	r3, #1
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	4ba6      	ldr	r3, [pc, #664]	@ (8002b68 <StartTaskACC+0x2c4>)
 80028ce:	4aa7      	ldr	r2, [pc, #668]	@ (8002b6c <StartTaskACC+0x2c8>)
 80028d0:	2105      	movs	r1, #5
 80028d2:	48a7      	ldr	r0, [pc, #668]	@ (8002b70 <StartTaskACC+0x2cc>)
 80028d4:	f008 ff0e 	bl	800b6f4 <arm_fir_init_f32>
  arm_fir_init_f32(&Sy, NUM_TAPS, firCoeffs, firStateY, BLOCK_SIZE);
 80028d8:	2301      	movs	r3, #1
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	4ba5      	ldr	r3, [pc, #660]	@ (8002b74 <StartTaskACC+0x2d0>)
 80028de:	4aa3      	ldr	r2, [pc, #652]	@ (8002b6c <StartTaskACC+0x2c8>)
 80028e0:	2105      	movs	r1, #5
 80028e2:	48a5      	ldr	r0, [pc, #660]	@ (8002b78 <StartTaskACC+0x2d4>)
 80028e4:	f008 ff06 	bl	800b6f4 <arm_fir_init_f32>
  arm_fir_init_f32(&Sz, NUM_TAPS, firCoeffs, firStateZ, BLOCK_SIZE);
 80028e8:	2301      	movs	r3, #1
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	4ba3      	ldr	r3, [pc, #652]	@ (8002b7c <StartTaskACC+0x2d8>)
 80028ee:	4a9f      	ldr	r2, [pc, #636]	@ (8002b6c <StartTaskACC+0x2c8>)
 80028f0:	2105      	movs	r1, #5
 80028f2:	48a3      	ldr	r0, [pc, #652]	@ (8002b80 <StartTaskACC+0x2dc>)
 80028f4:	f008 fefe 	bl	800b6f4 <arm_fir_init_f32>

  float32_t noisy_input, filtered_output;
  float32_t angle = 0.0f;
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	633b      	str	r3, [r7, #48]	@ 0x30
  float32_t step = 2 * PI / 50;  // ~1Hz sine wave if loop runs at 10Hz
 80028fe:	4ba1      	ldr	r3, [pc, #644]	@ (8002b84 <StartTaskACC+0x2e0>)
 8002900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int counter = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (;;)
  {
	osDelay(10);
 8002906:	200a      	movs	r0, #10
 8002908:	f007 fcfe 	bl	800a308 <osDelay>
////    osDelay(10);
//    continue;



    BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 800290c:	489e      	ldr	r0, [pc, #632]	@ (8002b88 <StartTaskACC+0x2e4>)
 800290e:	f001 fa79 	bl	8003e04 <BSP_ACCELERO_AccGetXYZ>
	float32_t xin = (float32_t)pDataXYZ[0];
 8002912:	4b9d      	ldr	r3, [pc, #628]	@ (8002b88 <StartTaskACC+0x2e4>)
 8002914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002918:	ee07 3a90 	vmov	s15, r3
 800291c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002920:	edc7 7a07 	vstr	s15, [r7, #28]
	float32_t yin = (float32_t)pDataXYZ[1];
 8002924:	4b98      	ldr	r3, [pc, #608]	@ (8002b88 <StartTaskACC+0x2e4>)
 8002926:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002932:	edc7 7a06 	vstr	s15, [r7, #24]
	float32_t zin = (float32_t)pDataXYZ[2];
 8002936:	4b94      	ldr	r3, [pc, #592]	@ (8002b88 <StartTaskACC+0x2e4>)
 8002938:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800293c:	ee07 3a90 	vmov	s15, r3
 8002940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002944:	edc7 7a05 	vstr	s15, [r7, #20]

//	printf("pre x=%.2f y=%.2f z=%.2f\r\n", xin,yin,zin);
	float32_t xout, yout, zout;

	arm_fir_f32(&Sx, &xin, &xout, BLOCK_SIZE);
 8002948:	f107 0210 	add.w	r2, r7, #16
 800294c:	f107 011c 	add.w	r1, r7, #28
 8002950:	2301      	movs	r3, #1
 8002952:	4887      	ldr	r0, [pc, #540]	@ (8002b70 <StartTaskACC+0x2cc>)
 8002954:	f008 fede 	bl	800b714 <arm_fir_f32>
	arm_fir_f32(&Sy, &yin, &yout, BLOCK_SIZE);
 8002958:	f107 020c 	add.w	r2, r7, #12
 800295c:	f107 0118 	add.w	r1, r7, #24
 8002960:	2301      	movs	r3, #1
 8002962:	4885      	ldr	r0, [pc, #532]	@ (8002b78 <StartTaskACC+0x2d4>)
 8002964:	f008 fed6 	bl	800b714 <arm_fir_f32>
	arm_fir_f32(&Sz, &zin, &zout, BLOCK_SIZE);
 8002968:	f107 0208 	add.w	r2, r7, #8
 800296c:	f107 0114 	add.w	r1, r7, #20
 8002970:	2301      	movs	r3, #1
 8002972:	4883      	ldr	r0, [pc, #524]	@ (8002b80 <StartTaskACC+0x2dc>)
 8002974:	f008 fece 	bl	800b714 <arm_fir_f32>
//	printf("Filtered x=%.2f y=%.2f z=%.2f\r\n", xout, yout, zout);



//	continue;
	int16_t x = (int16_t)xout;
 8002978:	edd7 7a04 	vldr	s15, [r7, #16]
 800297c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002980:	ee17 3a90 	vmov	r3, s15
 8002984:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t y = (int16_t)yout;
 8002986:	edd7 7a03 	vldr	s15, [r7, #12]
 800298a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800298e:	ee17 3a90 	vmov	r3, s15
 8002992:	84bb      	strh	r3, [r7, #36]	@ 0x24
	int16_t z = (int16_t)zout;
 8002994:	edd7 7a02 	vldr	s15, [r7, #8]
 8002998:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800299c:	ee17 3a90 	vmov	r3, s15
 80029a0:	847b      	strh	r3, [r7, #34]	@ 0x22

//	printf("converted x=%d, y=%d, z=%d\n", x,y,z);
//	continue;

    switch (shake_state){
 80029a2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d04f      	beq.n	8002a4a <StartTaskACC+0x1a6>
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	dc7c      	bgt.n	8002aa8 <StartTaskACC+0x204>
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <StartTaskACC+0x114>
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d01f      	beq.n	80029f6 <StartTaskACC+0x152>
 80029b6:	e077      	b.n	8002aa8 <StartTaskACC+0x204>
    case 0:
    	shake_count = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
    	if (x > 500){
 80029bc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80029c0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80029c4:	dd08      	ble.n	80029d8 <StartTaskACC+0x134>
    		start_time = HAL_GetTick();
 80029c6:	f001 fa61 	bl	8003e8c <HAL_GetTick>
 80029ca:	6478      	str	r0, [r7, #68]	@ 0x44
    		shake_state = 1;
 80029cc:	2301      	movs	r3, #1
 80029ce:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    		shake_count++;
 80029d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029d4:	3301      	adds	r3, #1
 80029d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    	}
    	if (x < -500){
 80029d8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80029dc:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80029e0:	da5d      	bge.n	8002a9e <StartTaskACC+0x1fa>
    		start_time = HAL_GetTick();
 80029e2:	f001 fa53 	bl	8003e8c <HAL_GetTick>
 80029e6:	6478      	str	r0, [r7, #68]	@ 0x44
    		shake_state = 2;
 80029e8:	2302      	movs	r3, #2
 80029ea:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    		shake_count++;
 80029ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029f0:	3301      	adds	r3, #1
 80029f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    	}
//    	start_time = sHAL_GetTick();
//    	printf("x=%d\n", x);
    	break;
 80029f4:	e053      	b.n	8002a9e <StartTaskACC+0x1fa>
    case 1:
    	if (x < -500){
 80029f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80029fa:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80029fe:	da13      	bge.n	8002a28 <StartTaskACC+0x184>
//			start_time = HAL_GetTick();
			shake_state = 2;
 8002a00:	2302      	movs	r3, #2
 8002a02:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
			shake_count++;
 8002a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a08:	3301      	adds	r3, #1
 8002a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
			if (shake_count > 10){
 8002a0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a0e:	2b0a      	cmp	r3, #10
 8002a10:	d947      	bls.n	8002aa2 <StartTaskACC+0x1fe>
				printf("shake!\n");
 8002a12:	485e      	ldr	r0, [pc, #376]	@ (8002b8c <StartTaskACC+0x2e8>)
 8002a14:	f009 feea 	bl	800c7ec <puts>
				Send_Action("shake", 5);
 8002a18:	2105      	movs	r1, #5
 8002a1a:	485d      	ldr	r0, [pc, #372]	@ (8002b90 <StartTaskACC+0x2ec>)
 8002a1c:	f7ff fb9a 	bl	8002154 <Send_Action>
				shake_state = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
			}
		}else if (HAL_GetTick() - start_time > 3000){
			printf("no shake but = %d\n", shake_count);
			shake_state = 0;
		}
		break;
 8002a26:	e03c      	b.n	8002aa2 <StartTaskACC+0x1fe>
		}else if (HAL_GetTick() - start_time > 3000){
 8002a28:	f001 fa30 	bl	8003e8c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d933      	bls.n	8002aa2 <StartTaskACC+0x1fe>
			printf("no shake but = %d\n", shake_count);
 8002a3a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002a3c:	4855      	ldr	r0, [pc, #340]	@ (8002b94 <StartTaskACC+0x2f0>)
 8002a3e:	f009 fe6d 	bl	800c71c <iprintf>
			shake_state = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
		break;
 8002a48:	e02b      	b.n	8002aa2 <StartTaskACC+0x1fe>
    case 2:
      	if (x > 500){
 8002a4a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002a4e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002a52:	dd13      	ble.n	8002a7c <StartTaskACC+0x1d8>
//  			start_time = HAL_GetTick();
  			shake_state = 1;
 8002a54:	2301      	movs	r3, #1
 8002a56:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  			shake_count++;
 8002a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  			if (shake_count > 10){
 8002a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a62:	2b0a      	cmp	r3, #10
 8002a64:	d91f      	bls.n	8002aa6 <StartTaskACC+0x202>
  				printf("shake!\n");
 8002a66:	4849      	ldr	r0, [pc, #292]	@ (8002b8c <StartTaskACC+0x2e8>)
 8002a68:	f009 fec0 	bl	800c7ec <puts>
				Send_Action("shake", 5);
 8002a6c:	2105      	movs	r1, #5
 8002a6e:	4848      	ldr	r0, [pc, #288]	@ (8002b90 <StartTaskACC+0x2ec>)
 8002a70:	f7ff fb70 	bl	8002154 <Send_Action>
				shake_state = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
			}
  		}else if (HAL_GetTick() - start_time > 3000){
			printf("no shake but = %d\n", shake_count);
  			shake_state = 0;
  		}
  		break;
 8002a7a:	e014      	b.n	8002aa6 <StartTaskACC+0x202>
  		}else if (HAL_GetTick() - start_time > 3000){
 8002a7c:	f001 fa06 	bl	8003e8c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d90b      	bls.n	8002aa6 <StartTaskACC+0x202>
			printf("no shake but = %d\n", shake_count);
 8002a8e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002a90:	4840      	ldr	r0, [pc, #256]	@ (8002b94 <StartTaskACC+0x2f0>)
 8002a92:	f009 fe43 	bl	800c71c <iprintf>
  			shake_state = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  		break;
 8002a9c:	e003      	b.n	8002aa6 <StartTaskACC+0x202>
    	break;
 8002a9e:	bf00      	nop
 8002aa0:	e002      	b.n	8002aa8 <StartTaskACC+0x204>
		break;
 8002aa2:	bf00      	nop
 8002aa4:	e000      	b.n	8002aa8 <StartTaskACC+0x204>
  		break;
 8002aa6:	bf00      	nop
    }
//    continue;
    if (cooldown){
 8002aa8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <StartTaskACC+0x222>
    	if (HAL_GetTick() - cd_start_time > 350){
 8002ab0:	f001 f9ec 	bl	8003e8c <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8002abe:	d94e      	bls.n	8002b5e <StartTaskACC+0x2ba>
    		cooldown = false;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    	}else{
    		continue;
    	}
    }
    if (x > x_threshold)
 8002ac6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002aca:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	dd0d      	ble.n	8002aee <StartTaskACC+0x24a>
    {
//      printf("x = %d \n", x);
      printf("right\n");
 8002ad2:	4831      	ldr	r0, [pc, #196]	@ (8002b98 <StartTaskACC+0x2f4>)
 8002ad4:	f009 fe8a 	bl	800c7ec <puts>
      Send_Action("right", 5);
 8002ad8:	2105      	movs	r1, #5
 8002ada:	482f      	ldr	r0, [pc, #188]	@ (8002b98 <StartTaskACC+0x2f4>)
 8002adc:	f7ff fb3a 	bl	8002154 <Send_Action>
      cooldown = true;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      cd_start_time = HAL_GetTick();
 8002ae6:	f001 f9d1 	bl	8003e8c <HAL_GetTick>
 8002aea:	6438      	str	r0, [r7, #64]	@ 0x40
 8002aec:	e011      	b.n	8002b12 <StartTaskACC+0x26e>
//      osDelay(350);
    }
    else if (x < -x_threshold)
 8002aee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002af2:	4a2a      	ldr	r2, [pc, #168]	@ (8002b9c <StartTaskACC+0x2f8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	da0c      	bge.n	8002b12 <StartTaskACC+0x26e>
    {
//      printf("x = %d \n", x);
      printf("left\n");
 8002af8:	4829      	ldr	r0, [pc, #164]	@ (8002ba0 <StartTaskACC+0x2fc>)
 8002afa:	f009 fe77 	bl	800c7ec <puts>
      Send_Action("left", 4);
 8002afe:	2104      	movs	r1, #4
 8002b00:	4827      	ldr	r0, [pc, #156]	@ (8002ba0 <StartTaskACC+0x2fc>)
 8002b02:	f7ff fb27 	bl	8002154 <Send_Action>
      cooldown = true;
 8002b06:	2301      	movs	r3, #1
 8002b08:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      cd_start_time = HAL_GetTick();
 8002b0c:	f001 f9be 	bl	8003e8c <HAL_GetTick>
 8002b10:	6438      	str	r0, [r7, #64]	@ 0x40
//      osDelay(350);
    }
    if (z - g > z_threshold)
 8002b12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002b16:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	dd0d      	ble.n	8002b3a <StartTaskACC+0x296>
    {
//      printf("z = %d\n", z);

      printf("up\n");
 8002b1e:	4821      	ldr	r0, [pc, #132]	@ (8002ba4 <StartTaskACC+0x300>)
 8002b20:	f009 fe64 	bl	800c7ec <puts>
      Send_Action("up", 2);
 8002b24:	2102      	movs	r1, #2
 8002b26:	481f      	ldr	r0, [pc, #124]	@ (8002ba4 <StartTaskACC+0x300>)
 8002b28:	f7ff fb14 	bl	8002154 <Send_Action>
      cooldown = true;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      cd_start_time = HAL_GetTick();
 8002b32:	f001 f9ab 	bl	8003e8c <HAL_GetTick>
 8002b36:	6438      	str	r0, [r7, #64]	@ 0x40
      cooldown = true;
      cd_start_time = HAL_GetTick();
//      osDelay(350);
    }

    continue;
 8002b38:	e013      	b.n	8002b62 <StartTaskACC+0x2be>
    else if (z - g < -z_threshold)
 8002b3a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002b3e:	2bf9      	cmp	r3, #249	@ 0xf9
 8002b40:	dc0f      	bgt.n	8002b62 <StartTaskACC+0x2be>
      printf("down\n");
 8002b42:	4819      	ldr	r0, [pc, #100]	@ (8002ba8 <StartTaskACC+0x304>)
 8002b44:	f009 fe52 	bl	800c7ec <puts>
      Send_Action("down", 4);
 8002b48:	2104      	movs	r1, #4
 8002b4a:	4817      	ldr	r0, [pc, #92]	@ (8002ba8 <StartTaskACC+0x304>)
 8002b4c:	f7ff fb02 	bl	8002154 <Send_Action>
      cooldown = true;
 8002b50:	2301      	movs	r3, #1
 8002b52:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      cd_start_time = HAL_GetTick();
 8002b56:	f001 f999 	bl	8003e8c <HAL_GetTick>
 8002b5a:	6438      	str	r0, [r7, #64]	@ 0x40
    continue;
 8002b5c:	e001      	b.n	8002b62 <StartTaskACC+0x2be>
    		continue;
 8002b5e:	bf00      	nop
 8002b60:	e6d1      	b.n	8002906 <StartTaskACC+0x62>
    continue;
 8002b62:	bf00      	nop
  {
 8002b64:	e6cf      	b.n	8002906 <StartTaskACC+0x62>
 8002b66:	bf00      	nop
 8002b68:	20001d78 	.word	0x20001d78
 8002b6c:	20000008 	.word	0x20000008
 8002b70:	20001d54 	.word	0x20001d54
 8002b74:	20001d8c 	.word	0x20001d8c
 8002b78:	20001d60 	.word	0x20001d60
 8002b7c:	20001da0 	.word	0x20001da0
 8002b80:	20001d6c 	.word	0x20001d6c
 8002b84:	3e00adfd 	.word	0x3e00adfd
 8002b88:	20001d4c 	.word	0x20001d4c
 8002b8c:	0800e794 	.word	0x0800e794
 8002b90:	0800e79c 	.word	0x0800e79c
 8002b94:	0800e7a4 	.word	0x0800e7a4
 8002b98:	0800e7b8 	.word	0x0800e7b8
 8002b9c:	fffffd12 	.word	0xfffffd12
 8002ba0:	0800e7c0 	.word	0x0800e7c0
 8002ba4:	0800e7c8 	.word	0x0800e7c8
 8002ba8:	0800e7cc 	.word	0x0800e7cc

08002bac <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a04      	ldr	r2, [pc, #16]	@ (8002bcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d101      	bne.n	8002bc2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002bbe:	f001 f951 	bl	8003e64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40001000 	.word	0x40001000

08002bd0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd4:	b672      	cpsid	i
}
 8002bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bd8:	bf00      	nop
 8002bda:	e7fd      	b.n	8002bd8 <Error_Handler+0x8>

08002bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be2:	4b11      	ldr	r3, [pc, #68]	@ (8002c28 <HAL_MspInit+0x4c>)
 8002be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002be6:	4a10      	ldr	r2, [pc, #64]	@ (8002c28 <HAL_MspInit+0x4c>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bee:	4b0e      	ldr	r3, [pc, #56]	@ (8002c28 <HAL_MspInit+0x4c>)
 8002bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002c28 <HAL_MspInit+0x4c>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8002c28 <HAL_MspInit+0x4c>)
 8002c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c04:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c06:	4b08      	ldr	r3, [pc, #32]	@ (8002c28 <HAL_MspInit+0x4c>)
 8002c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c12:	2200      	movs	r2, #0
 8002c14:	210f      	movs	r1, #15
 8002c16:	f06f 0001 	mvn.w	r0, #1
 8002c1a:	f001 fa1f 	bl	800405c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40021000 	.word	0x40021000

08002c2c <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b0ac      	sub	sp, #176	@ 0xb0
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c34:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	2288      	movs	r2, #136	@ 0x88
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f009 fead 	bl	800c9ac <memset>
  if(DFSDM1_Init == 0)
 8002c52:	4b25      	ldr	r3, [pc, #148]	@ (8002ce8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d142      	bne.n	8002ce0 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002c5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c5e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c66:	f107 0314 	add.w	r3, r7, #20
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f003 fd40 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8002c76:	f7ff ffab 	bl	8002bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cec <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8002cec <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002c80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c84:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c86:	4b19      	ldr	r3, [pc, #100]	@ (8002cec <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c92:	4b16      	ldr	r3, [pc, #88]	@ (8002cec <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c96:	4a15      	ldr	r2, [pc, #84]	@ (8002cec <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002c98:	f043 0310 	orr.w	r3, r3, #16
 8002c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c9e:	4b13      	ldr	r3, [pc, #76]	@ (8002cec <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca2:	f003 0310 	and.w	r3, r3, #16
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002caa:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8002cae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002cc4:	2306      	movs	r3, #6
 8002cc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4807      	ldr	r0, [pc, #28]	@ (8002cf0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8002cd2:	f001 fb57 	bl	8004384 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8002cd6:	4b04      	ldr	r3, [pc, #16]	@ (8002ce8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	4a02      	ldr	r2, [pc, #8]	@ (8002ce8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002cde:	6013      	str	r3, [r2, #0]
  }

}
 8002ce0:	bf00      	nop
 8002ce2:	37b0      	adds	r7, #176	@ 0xb0
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20001db4 	.word	0x20001db4
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	48001000 	.word	0x48001000

08002cf4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b0ac      	sub	sp, #176	@ 0xb0
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	2288      	movs	r2, #136	@ 0x88
 8002d12:	2100      	movs	r1, #0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f009 fe49 	bl	800c9ac <memset>
  if(hi2c->Instance==I2C2)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a21      	ldr	r2, [pc, #132]	@ (8002da4 <HAL_I2C_MspInit+0xb0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d13b      	bne.n	8002d9c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002d24:	2380      	movs	r3, #128	@ 0x80
 8002d26:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d2c:	f107 0314 	add.w	r3, r7, #20
 8002d30:	4618      	mov	r0, r3
 8002d32:	f003 fcdd 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002d3c:	f7ff ff48 	bl	8002bd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d40:	4b19      	ldr	r3, [pc, #100]	@ (8002da8 <HAL_I2C_MspInit+0xb4>)
 8002d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d44:	4a18      	ldr	r2, [pc, #96]	@ (8002da8 <HAL_I2C_MspInit+0xb4>)
 8002d46:	f043 0302 	orr.w	r3, r3, #2
 8002d4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d4c:	4b16      	ldr	r3, [pc, #88]	@ (8002da8 <HAL_I2C_MspInit+0xb4>)
 8002d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002d58:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002d5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d60:	2312      	movs	r3, #18
 8002d62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d72:	2304      	movs	r3, #4
 8002d74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d78:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	480b      	ldr	r0, [pc, #44]	@ (8002dac <HAL_I2C_MspInit+0xb8>)
 8002d80:	f001 fb00 	bl	8004384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d84:	4b08      	ldr	r3, [pc, #32]	@ (8002da8 <HAL_I2C_MspInit+0xb4>)
 8002d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d88:	4a07      	ldr	r2, [pc, #28]	@ (8002da8 <HAL_I2C_MspInit+0xb4>)
 8002d8a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d90:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <HAL_I2C_MspInit+0xb4>)
 8002d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002d9c:	bf00      	nop
 8002d9e:	37b0      	adds	r7, #176	@ 0xb0
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40005800 	.word	0x40005800
 8002da8:	40021000 	.word	0x40021000
 8002dac:	48000400 	.word	0x48000400

08002db0 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8002dec <HAL_I2C_MspDeInit+0x3c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d10f      	bne.n	8002de2 <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C2_MspDeInit 0 */

    /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <HAL_I2C_MspDeInit+0x40>)
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002df0 <HAL_I2C_MspDeInit+0x40>)
 8002dc8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002dcc:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8002dce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002dd2:	4808      	ldr	r0, [pc, #32]	@ (8002df4 <HAL_I2C_MspDeInit+0x44>)
 8002dd4:	f001 fc80 	bl	80046d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002dd8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002ddc:	4805      	ldr	r0, [pc, #20]	@ (8002df4 <HAL_I2C_MspDeInit+0x44>)
 8002dde:	f001 fc7b 	bl	80046d8 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C2_MspDeInit 1 */

    /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40005800 	.word	0x40005800
 8002df0:	40021000 	.word	0x40021000
 8002df4:	48000400 	.word	0x48000400

08002df8 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	@ 0x28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a17      	ldr	r2, [pc, #92]	@ (8002e74 <HAL_QSPI_MspInit+0x7c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d128      	bne.n	8002e6c <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002e1a:	4b17      	ldr	r3, [pc, #92]	@ (8002e78 <HAL_QSPI_MspInit+0x80>)
 8002e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e1e:	4a16      	ldr	r2, [pc, #88]	@ (8002e78 <HAL_QSPI_MspInit+0x80>)
 8002e20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e24:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e26:	4b14      	ldr	r3, [pc, #80]	@ (8002e78 <HAL_QSPI_MspInit+0x80>)
 8002e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e32:	4b11      	ldr	r3, [pc, #68]	@ (8002e78 <HAL_QSPI_MspInit+0x80>)
 8002e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e36:	4a10      	ldr	r2, [pc, #64]	@ (8002e78 <HAL_QSPI_MspInit+0x80>)
 8002e38:	f043 0310 	orr.w	r3, r3, #16
 8002e3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e78 <HAL_QSPI_MspInit+0x80>)
 8002e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002e4a:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002e4e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e50:	2302      	movs	r3, #2
 8002e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002e5c:	230a      	movs	r3, #10
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	4619      	mov	r1, r3
 8002e66:	4805      	ldr	r0, [pc, #20]	@ (8002e7c <HAL_QSPI_MspInit+0x84>)
 8002e68:	f001 fa8c 	bl	8004384 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002e6c:	bf00      	nop
 8002e6e:	3728      	adds	r7, #40	@ 0x28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	a0001000 	.word	0xa0001000
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	48001000 	.word	0x48001000

08002e80 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b0ae      	sub	sp, #184	@ 0xb8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e88:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e98:	f107 031c 	add.w	r3, r7, #28
 8002e9c:	2288      	movs	r2, #136	@ 0x88
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f009 fd83 	bl	800c9ac <memset>
  if(huart->Instance==USART1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a42      	ldr	r2, [pc, #264]	@ (8002fb4 <HAL_UART_MspInit+0x134>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d13b      	bne.n	8002f28 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eb8:	f107 031c 	add.w	r3, r7, #28
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f003 fc17 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ec8:	f7ff fe82 	bl	8002bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ecc:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb8 <HAL_UART_MspInit+0x138>)
 8002ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed0:	4a39      	ldr	r2, [pc, #228]	@ (8002fb8 <HAL_UART_MspInit+0x138>)
 8002ed2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ed6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ed8:	4b37      	ldr	r3, [pc, #220]	@ (8002fb8 <HAL_UART_MspInit+0x138>)
 8002eda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002edc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee4:	4b34      	ldr	r3, [pc, #208]	@ (8002fb8 <HAL_UART_MspInit+0x138>)
 8002ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee8:	4a33      	ldr	r2, [pc, #204]	@ (8002fb8 <HAL_UART_MspInit+0x138>)
 8002eea:	f043 0302 	orr.w	r3, r3, #2
 8002eee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ef0:	4b31      	ldr	r3, [pc, #196]	@ (8002fb8 <HAL_UART_MspInit+0x138>)
 8002ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002efc:	23c0      	movs	r3, #192	@ 0xc0
 8002efe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f02:	2302      	movs	r3, #2
 8002f04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f14:	2307      	movs	r3, #7
 8002f16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f1a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4826      	ldr	r0, [pc, #152]	@ (8002fbc <HAL_UART_MspInit+0x13c>)
 8002f22:	f001 fa2f 	bl	8004384 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f26:	e040      	b.n	8002faa <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a24      	ldr	r2, [pc, #144]	@ (8002fc0 <HAL_UART_MspInit+0x140>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d13b      	bne.n	8002faa <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f32:	2304      	movs	r3, #4
 8002f34:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f36:	2300      	movs	r3, #0
 8002f38:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f3a:	f107 031c 	add.w	r3, r7, #28
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f003 fbd6 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_UART_MspInit+0xce>
      Error_Handler();
 8002f4a:	f7ff fe41 	bl	8002bd0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb8 <HAL_UART_MspInit+0x138>)
 8002f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f52:	4a19      	ldr	r2, [pc, #100]	@ (8002fb8 <HAL_UART_MspInit+0x138>)
 8002f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f58:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f5a:	4b17      	ldr	r3, [pc, #92]	@ (8002fb8 <HAL_UART_MspInit+0x138>)
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f62:	613b      	str	r3, [r7, #16]
 8002f64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f66:	4b14      	ldr	r3, [pc, #80]	@ (8002fb8 <HAL_UART_MspInit+0x138>)
 8002f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f6a:	4a13      	ldr	r2, [pc, #76]	@ (8002fb8 <HAL_UART_MspInit+0x138>)
 8002f6c:	f043 0308 	orr.w	r3, r3, #8
 8002f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f72:	4b11      	ldr	r3, [pc, #68]	@ (8002fb8 <HAL_UART_MspInit+0x138>)
 8002f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002f7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002f82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f86:	2302      	movs	r3, #2
 8002f88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f92:	2303      	movs	r3, #3
 8002f94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f98:	2307      	movs	r3, #7
 8002f9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f9e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4807      	ldr	r0, [pc, #28]	@ (8002fc4 <HAL_UART_MspInit+0x144>)
 8002fa6:	f001 f9ed 	bl	8004384 <HAL_GPIO_Init>
}
 8002faa:	bf00      	nop
 8002fac:	37b8      	adds	r7, #184	@ 0xb8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40013800 	.word	0x40013800
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	48000400 	.word	0x48000400
 8002fc0:	40004800 	.word	0x40004800
 8002fc4:	48000c00 	.word	0x48000c00

08002fc8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b0ac      	sub	sp, #176	@ 0xb0
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	2288      	movs	r2, #136	@ 0x88
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f009 fcdf 	bl	800c9ac <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ff6:	d17c      	bne.n	80030f2 <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002ff8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ffc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002ffe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003002:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003006:	2301      	movs	r3, #1
 8003008:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800300a:	2301      	movs	r3, #1
 800300c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800300e:	2318      	movs	r3, #24
 8003010:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003012:	2307      	movs	r3, #7
 8003014:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003016:	2302      	movs	r3, #2
 8003018:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800301a:	2302      	movs	r3, #2
 800301c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800301e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003022:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	4618      	mov	r0, r3
 800302a:	f003 fb61 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8003034:	f7ff fdcc 	bl	8002bd0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003038:	4b30      	ldr	r3, [pc, #192]	@ (80030fc <HAL_PCD_MspInit+0x134>)
 800303a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800303c:	4a2f      	ldr	r2, [pc, #188]	@ (80030fc <HAL_PCD_MspInit+0x134>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003044:	4b2d      	ldr	r3, [pc, #180]	@ (80030fc <HAL_PCD_MspInit+0x134>)
 8003046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8003050:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003054:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003058:	2300      	movs	r3, #0
 800305a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003064:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003068:	4619      	mov	r1, r3
 800306a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800306e:	f001 f989 	bl	8004384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8003072:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003076:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307a:	2302      	movs	r3, #2
 800307c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003080:	2300      	movs	r3, #0
 8003082:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003086:	2303      	movs	r3, #3
 8003088:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800308c:	230a      	movs	r3, #10
 800308e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003092:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003096:	4619      	mov	r1, r3
 8003098:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800309c:	f001 f972 	bl	8004384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80030a0:	4b16      	ldr	r3, [pc, #88]	@ (80030fc <HAL_PCD_MspInit+0x134>)
 80030a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a4:	4a15      	ldr	r2, [pc, #84]	@ (80030fc <HAL_PCD_MspInit+0x134>)
 80030a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030ac:	4b13      	ldr	r3, [pc, #76]	@ (80030fc <HAL_PCD_MspInit+0x134>)
 80030ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b8:	4b10      	ldr	r3, [pc, #64]	@ (80030fc <HAL_PCD_MspInit+0x134>)
 80030ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d114      	bne.n	80030ee <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c4:	4b0d      	ldr	r3, [pc, #52]	@ (80030fc <HAL_PCD_MspInit+0x134>)
 80030c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c8:	4a0c      	ldr	r2, [pc, #48]	@ (80030fc <HAL_PCD_MspInit+0x134>)
 80030ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80030d0:	4b0a      	ldr	r3, [pc, #40]	@ (80030fc <HAL_PCD_MspInit+0x134>)
 80030d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80030dc:	f002 fc0a 	bl	80058f4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e0:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <HAL_PCD_MspInit+0x134>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e4:	4a05      	ldr	r2, [pc, #20]	@ (80030fc <HAL_PCD_MspInit+0x134>)
 80030e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ea:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80030ec:	e001      	b.n	80030f2 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80030ee:	f002 fc01 	bl	80058f4 <HAL_PWREx_EnableVddUSB>
}
 80030f2:	bf00      	nop
 80030f4:	37b0      	adds	r7, #176	@ 0xb0
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40021000 	.word	0x40021000

08003100 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08e      	sub	sp, #56	@ 0x38
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800310e:	4b34      	ldr	r3, [pc, #208]	@ (80031e0 <HAL_InitTick+0xe0>)
 8003110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003112:	4a33      	ldr	r2, [pc, #204]	@ (80031e0 <HAL_InitTick+0xe0>)
 8003114:	f043 0310 	orr.w	r3, r3, #16
 8003118:	6593      	str	r3, [r2, #88]	@ 0x58
 800311a:	4b31      	ldr	r3, [pc, #196]	@ (80031e0 <HAL_InitTick+0xe0>)
 800311c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003126:	f107 0210 	add.w	r2, r7, #16
 800312a:	f107 0314 	add.w	r3, r7, #20
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f003 fa4b 	bl	80065cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800313a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313c:	2b00      	cmp	r3, #0
 800313e:	d103      	bne.n	8003148 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003140:	f003 fa18 	bl	8006574 <HAL_RCC_GetPCLK1Freq>
 8003144:	6378      	str	r0, [r7, #52]	@ 0x34
 8003146:	e004      	b.n	8003152 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003148:	f003 fa14 	bl	8006574 <HAL_RCC_GetPCLK1Freq>
 800314c:	4603      	mov	r3, r0
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003154:	4a23      	ldr	r2, [pc, #140]	@ (80031e4 <HAL_InitTick+0xe4>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	0c9b      	lsrs	r3, r3, #18
 800315c:	3b01      	subs	r3, #1
 800315e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003160:	4b21      	ldr	r3, [pc, #132]	@ (80031e8 <HAL_InitTick+0xe8>)
 8003162:	4a22      	ldr	r2, [pc, #136]	@ (80031ec <HAL_InitTick+0xec>)
 8003164:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003166:	4b20      	ldr	r3, [pc, #128]	@ (80031e8 <HAL_InitTick+0xe8>)
 8003168:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800316c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800316e:	4a1e      	ldr	r2, [pc, #120]	@ (80031e8 <HAL_InitTick+0xe8>)
 8003170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003172:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003174:	4b1c      	ldr	r3, [pc, #112]	@ (80031e8 <HAL_InitTick+0xe8>)
 8003176:	2200      	movs	r2, #0
 8003178:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800317a:	4b1b      	ldr	r3, [pc, #108]	@ (80031e8 <HAL_InitTick+0xe8>)
 800317c:	2200      	movs	r2, #0
 800317e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003180:	4b19      	ldr	r3, [pc, #100]	@ (80031e8 <HAL_InitTick+0xe8>)
 8003182:	2200      	movs	r2, #0
 8003184:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003186:	4818      	ldr	r0, [pc, #96]	@ (80031e8 <HAL_InitTick+0xe8>)
 8003188:	f004 fbbc 	bl	8007904 <HAL_TIM_Base_Init>
 800318c:	4603      	mov	r3, r0
 800318e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003192:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003196:	2b00      	cmp	r3, #0
 8003198:	d11b      	bne.n	80031d2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800319a:	4813      	ldr	r0, [pc, #76]	@ (80031e8 <HAL_InitTick+0xe8>)
 800319c:	f004 fc14 	bl	80079c8 <HAL_TIM_Base_Start_IT>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80031a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d111      	bne.n	80031d2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80031ae:	2036      	movs	r0, #54	@ 0x36
 80031b0:	f000 ff70 	bl	8004094 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b0f      	cmp	r3, #15
 80031b8:	d808      	bhi.n	80031cc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80031ba:	2200      	movs	r2, #0
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	2036      	movs	r0, #54	@ 0x36
 80031c0:	f000 ff4c 	bl	800405c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031c4:	4a0a      	ldr	r2, [pc, #40]	@ (80031f0 <HAL_InitTick+0xf0>)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e002      	b.n	80031d2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80031d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3738      	adds	r7, #56	@ 0x38
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000
 80031e4:	431bde83 	.word	0x431bde83
 80031e8:	20001db8 	.word	0x20001db8
 80031ec:	40001000 	.word	0x40001000
 80031f0:	20000064 	.word	0x20000064

080031f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031f8:	bf00      	nop
 80031fa:	e7fd      	b.n	80031f8 <NMI_Handler+0x4>

080031fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003200:	bf00      	nop
 8003202:	e7fd      	b.n	8003200 <HardFault_Handler+0x4>

08003204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003208:	bf00      	nop
 800320a:	e7fd      	b.n	8003208 <MemManage_Handler+0x4>

0800320c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003210:	bf00      	nop
 8003212:	e7fd      	b.n	8003210 <BusFault_Handler+0x4>

08003214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003218:	bf00      	nop
 800321a:	e7fd      	b.n	8003218 <UsageFault_Handler+0x4>

0800321c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8003230:	2020      	movs	r0, #32
 8003232:	f001 fb8f 	bl	8004954 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8003236:	4806      	ldr	r0, [pc, #24]	@ (8003250 <EXTI9_5_IRQHandler+0x24>)
 8003238:	f001 f874 	bl	8004324 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800323c:	2080      	movs	r0, #128	@ 0x80
 800323e:	f001 fb89 	bl	8004954 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8003242:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003246:	f001 fb85 	bl	8004954 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	200002c8 	.word	0x200002c8

08003254 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8003258:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800325c:	f001 fb7a 	bl	8004954 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8003260:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003264:	f001 fb76 	bl	8004954 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8003268:	4806      	ldr	r0, [pc, #24]	@ (8003284 <EXTI15_10_IRQHandler+0x30>)
 800326a:	f001 f85b 	bl	8004324 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800326e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003272:	f001 fb6f 	bl	8004954 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8003276:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800327a:	f001 fb6b 	bl	8004954 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000028 	.word	0x20000028

08003288 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800328c:	4802      	ldr	r0, [pc, #8]	@ (8003298 <TIM6_DAC_IRQHandler+0x10>)
 800328e:	f004 fc0b 	bl	8007aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20001db8 	.word	0x20001db8

0800329c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return 1;
 80032a0:	2301      	movs	r3, #1
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <_kill>:

int _kill(int pid, int sig)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032b6:	f009 fbcb 	bl	800ca50 <__errno>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2216      	movs	r2, #22
 80032be:	601a      	str	r2, [r3, #0]
  return -1;
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <_exit>:

void _exit (int status)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032d4:	f04f 31ff 	mov.w	r1, #4294967295
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff ffe7 	bl	80032ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80032de:	bf00      	nop
 80032e0:	e7fd      	b.n	80032de <_exit+0x12>

080032e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b086      	sub	sp, #24
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	e00a      	b.n	800330a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032f4:	f3af 8000 	nop.w
 80032f8:	4601      	mov	r1, r0
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	60ba      	str	r2, [r7, #8]
 8003300:	b2ca      	uxtb	r2, r1
 8003302:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	3301      	adds	r3, #1
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	429a      	cmp	r2, r3
 8003310:	dbf0      	blt.n	80032f4 <_read+0x12>
  }

  return len;
 8003312:	687b      	ldr	r3, [r7, #4]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	e009      	b.n	8003342 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	60ba      	str	r2, [r7, #8]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe ff60 	bl	80021fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	3301      	adds	r3, #1
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	429a      	cmp	r2, r3
 8003348:	dbf1      	blt.n	800332e <_write+0x12>
  }
  return len;
 800334a:	687b      	ldr	r3, [r7, #4]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <_close>:

int _close(int file)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800335c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800337c:	605a      	str	r2, [r3, #4]
  return 0;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <_isatty>:

int _isatty(int file)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003394:	2301      	movs	r3, #1
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b085      	sub	sp, #20
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033c4:	4a14      	ldr	r2, [pc, #80]	@ (8003418 <_sbrk+0x5c>)
 80033c6:	4b15      	ldr	r3, [pc, #84]	@ (800341c <_sbrk+0x60>)
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033d0:	4b13      	ldr	r3, [pc, #76]	@ (8003420 <_sbrk+0x64>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d102      	bne.n	80033de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033d8:	4b11      	ldr	r3, [pc, #68]	@ (8003420 <_sbrk+0x64>)
 80033da:	4a12      	ldr	r2, [pc, #72]	@ (8003424 <_sbrk+0x68>)
 80033dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033de:	4b10      	ldr	r3, [pc, #64]	@ (8003420 <_sbrk+0x64>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d207      	bcs.n	80033fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033ec:	f009 fb30 	bl	800ca50 <__errno>
 80033f0:	4603      	mov	r3, r0
 80033f2:	220c      	movs	r2, #12
 80033f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033f6:	f04f 33ff 	mov.w	r3, #4294967295
 80033fa:	e009      	b.n	8003410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033fc:	4b08      	ldr	r3, [pc, #32]	@ (8003420 <_sbrk+0x64>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003402:	4b07      	ldr	r3, [pc, #28]	@ (8003420 <_sbrk+0x64>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4413      	add	r3, r2
 800340a:	4a05      	ldr	r2, [pc, #20]	@ (8003420 <_sbrk+0x64>)
 800340c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800340e:	68fb      	ldr	r3, [r7, #12]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20018000 	.word	0x20018000
 800341c:	00000400 	.word	0x00000400
 8003420:	20001e04 	.word	0x20001e04
 8003424:	20003038 	.word	0x20003038

08003428 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <SystemInit+0x20>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003432:	4a05      	ldr	r2, [pc, #20]	@ (8003448 <SystemInit+0x20>)
 8003434:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003438:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800343c:	bf00      	nop
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800344c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003484 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003450:	f7ff ffea 	bl	8003428 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003454:	480c      	ldr	r0, [pc, #48]	@ (8003488 <LoopForever+0x6>)
  ldr r1, =_edata
 8003456:	490d      	ldr	r1, [pc, #52]	@ (800348c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003458:	4a0d      	ldr	r2, [pc, #52]	@ (8003490 <LoopForever+0xe>)
  movs r3, #0
 800345a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800345c:	e002      	b.n	8003464 <LoopCopyDataInit>

0800345e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800345e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003462:	3304      	adds	r3, #4

08003464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003468:	d3f9      	bcc.n	800345e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800346a:	4a0a      	ldr	r2, [pc, #40]	@ (8003494 <LoopForever+0x12>)
  ldr r4, =_ebss
 800346c:	4c0a      	ldr	r4, [pc, #40]	@ (8003498 <LoopForever+0x16>)
  movs r3, #0
 800346e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003470:	e001      	b.n	8003476 <LoopFillZerobss>

08003472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003474:	3204      	adds	r2, #4

08003476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003478:	d3fb      	bcc.n	8003472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800347a:	f009 faef 	bl	800ca5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800347e:	f7fe fecf 	bl	8002220 <main>

08003482 <LoopForever>:

LoopForever:
    b LoopForever
 8003482:	e7fe      	b.n	8003482 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003484:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800348c:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8003490:	0800ec14 	.word	0x0800ec14
  ldr r2, =_sbss
 8003494:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8003498:	20003034 	.word	0x20003034

0800349c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800349c:	e7fe      	b.n	800349c <ADC1_2_IRQHandler>
	...

080034a0 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	4a04      	ldr	r2, [pc, #16]	@ (80034c0 <BSP_LED_Init+0x20>)
 80034ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b2:	4798      	blx	r3
  return BSP_ERROR_NONE;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	0800e824 	.word	0x0800e824

080034c4 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	4a06      	ldr	r2, [pc, #24]	@ (80034ec <BSP_LED_Toggle+0x28>)
 80034d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f001 fa1f 	bl	8004920 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000020 	.word	0x20000020

080034f0 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003568 <LED_USER_GPIO_Init+0x78>)
 80034f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003568 <LED_USER_GPIO_Init+0x78>)
 80034fc:	f043 0302 	orr.w	r3, r3, #2
 8003500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003502:	4b19      	ldr	r3, [pc, #100]	@ (8003568 <LED_USER_GPIO_Init+0x78>)
 8003504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800350e:	f107 030c 	add.w	r3, r7, #12
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	605a      	str	r2, [r3, #4]
 8003518:	609a      	str	r2, [r3, #8]
 800351a:	60da      	str	r2, [r3, #12]
 800351c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800351e:	4b12      	ldr	r3, [pc, #72]	@ (8003568 <LED_USER_GPIO_Init+0x78>)
 8003520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003522:	4a11      	ldr	r2, [pc, #68]	@ (8003568 <LED_USER_GPIO_Init+0x78>)
 8003524:	f043 0302 	orr.w	r3, r3, #2
 8003528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800352a:	4b0f      	ldr	r3, [pc, #60]	@ (8003568 <LED_USER_GPIO_Init+0x78>)
 800352c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	607b      	str	r3, [r7, #4]
 8003534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8003536:	2200      	movs	r2, #0
 8003538:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800353c:	480b      	ldr	r0, [pc, #44]	@ (800356c <LED_USER_GPIO_Init+0x7c>)
 800353e:	f001 f9d7 	bl	80048f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8003542:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003548:	2301      	movs	r3, #1
 800354a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003550:	2300      	movs	r3, #0
 8003552:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8003554:	f107 030c 	add.w	r3, r7, #12
 8003558:	4619      	mov	r1, r3
 800355a:	4804      	ldr	r0, [pc, #16]	@ (800356c <LED_USER_GPIO_Init+0x7c>)
 800355c:	f000 ff12 	bl	8004384 <HAL_GPIO_Init>

}
 8003560:	bf00      	nop
 8003562:	3720      	adds	r7, #32
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000
 800356c:	48000400 	.word	0x48000400

08003570 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	460a      	mov	r2, r1
 800357a:	71fb      	strb	r3, [r7, #7]
 800357c:	4613      	mov	r3, r2
 800357e:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	4a1f      	ldr	r2, [pc, #124]	@ (8003604 <BSP_PB_Init+0x94>)
 8003588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800358c:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800358e:	79bb      	ldrb	r3, [r7, #6]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d132      	bne.n	80035fa <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4a1b      	ldr	r2, [pc, #108]	@ (8003608 <BSP_PB_Init+0x98>)
 800359a:	441a      	add	r2, r3
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	491b      	ldr	r1, [pc, #108]	@ (800360c <BSP_PB_Init+0x9c>)
 80035a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035a4:	4619      	mov	r1, r3
 80035a6:	4610      	mov	r0, r2
 80035a8:	f000 fea8 	bl	80042fc <HAL_EXTI_GetHandle>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80035b2:	f06f 0303 	mvn.w	r3, #3
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	e01f      	b.n	80035fa <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	4a12      	ldr	r2, [pc, #72]	@ (8003608 <BSP_PB_Init+0x98>)
 80035c0:	1898      	adds	r0, r3, r2
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	4a12      	ldr	r2, [pc, #72]	@ (8003610 <BSP_PB_Init+0xa0>)
 80035c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ca:	461a      	mov	r2, r3
 80035cc:	2100      	movs	r1, #0
 80035ce:	f000 fe7b 	bl	80042c8 <HAL_EXTI_RegisterCallback>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80035d8:	f06f 0303 	mvn.w	r3, #3
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	e00c      	b.n	80035fa <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80035e0:	2028      	movs	r0, #40	@ 0x28
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003614 <BSP_PB_Init+0xa4>)
 80035e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ea:	2200      	movs	r2, #0
 80035ec:	4619      	mov	r1, r3
 80035ee:	f000 fd35 	bl	800405c <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80035f2:	2328      	movs	r3, #40	@ 0x28
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fd4d 	bl	8004094 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 80035fa:	68fb      	ldr	r3, [r7, #12]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	0800e828 	.word	0x0800e828
 8003608:	20000028 	.word	0x20000028
 800360c:	0800e82c 	.word	0x0800e82c
 8003610:	0800e830 	.word	0x0800e830
 8003614:	0800e834 	.word	0x0800e834

08003618 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	4a09      	ldr	r2, [pc, #36]	@ (800364c <BSP_PB_GetState+0x34>)
 8003626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800362e:	4611      	mov	r1, r2
 8003630:	4618      	mov	r0, r3
 8003632:	f001 f945 	bl	80048c0 <HAL_GPIO_ReadPin>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000024 	.word	0x20000024

08003650 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003654:	2000      	movs	r0, #0
 8003656:	f7fd ff33 	bl	80014c0 <BSP_PB_Callback>
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003666:	4b19      	ldr	r3, [pc, #100]	@ (80036cc <BUTTON_USER_GPIO_Init+0x6c>)
 8003668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366a:	4a18      	ldr	r2, [pc, #96]	@ (80036cc <BUTTON_USER_GPIO_Init+0x6c>)
 800366c:	f043 0304 	orr.w	r3, r3, #4
 8003670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003672:	4b16      	ldr	r3, [pc, #88]	@ (80036cc <BUTTON_USER_GPIO_Init+0x6c>)
 8003674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800367e:	f107 030c 	add.w	r3, r7, #12
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	605a      	str	r2, [r3, #4]
 8003688:	609a      	str	r2, [r3, #8]
 800368a:	60da      	str	r2, [r3, #12]
 800368c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800368e:	4b0f      	ldr	r3, [pc, #60]	@ (80036cc <BUTTON_USER_GPIO_Init+0x6c>)
 8003690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003692:	4a0e      	ldr	r2, [pc, #56]	@ (80036cc <BUTTON_USER_GPIO_Init+0x6c>)
 8003694:	f043 0304 	orr.w	r3, r3, #4
 8003698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800369a:	4b0c      	ldr	r3, [pc, #48]	@ (80036cc <BUTTON_USER_GPIO_Init+0x6c>)
 800369c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	607b      	str	r3, [r7, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 80036a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80036ac:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80036b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80036b6:	f107 030c 	add.w	r3, r7, #12
 80036ba:	4619      	mov	r1, r3
 80036bc:	4804      	ldr	r0, [pc, #16]	@ (80036d0 <BUTTON_USER_GPIO_Init+0x70>)
 80036be:	f000 fe61 	bl	8004384 <HAL_GPIO_Init>

}
 80036c2:	bf00      	nop
 80036c4:	3720      	adds	r7, #32
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40021000 	.word	0x40021000
 80036d0:	48000800 	.word	0x48000800

080036d4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80036d8:	4802      	ldr	r0, [pc, #8]	@ (80036e4 <SENSOR_IO_Init+0x10>)
 80036da:	f000 f85b 	bl	8003794 <I2Cx_Init>
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20001e08 	.word	0x20001e08

080036e8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	4603      	mov	r3, r0
 80036f0:	71fb      	strb	r3, [r7, #7]
 80036f2:	460b      	mov	r3, r1
 80036f4:	71bb      	strb	r3, [r7, #6]
 80036f6:	4613      	mov	r3, r2
 80036f8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80036fa:	79bb      	ldrb	r3, [r7, #6]
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	79f9      	ldrb	r1, [r7, #7]
 8003700:	2301      	movs	r3, #1
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	1d7b      	adds	r3, r7, #5
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	2301      	movs	r3, #1
 800370a:	4803      	ldr	r0, [pc, #12]	@ (8003718 <SENSOR_IO_Write+0x30>)
 800370c:	f000 f8f5 	bl	80038fa <I2Cx_WriteMultiple>
}
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	20001e08 	.word	0x20001e08

0800371c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af02      	add	r7, sp, #8
 8003722:	4603      	mov	r3, r0
 8003724:	460a      	mov	r2, r1
 8003726:	71fb      	strb	r3, [r7, #7]
 8003728:	4613      	mov	r3, r2
 800372a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800372c:	2300      	movs	r3, #0
 800372e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003730:	79bb      	ldrb	r3, [r7, #6]
 8003732:	b29a      	uxth	r2, r3
 8003734:	79f9      	ldrb	r1, [r7, #7]
 8003736:	2301      	movs	r3, #1
 8003738:	9301      	str	r3, [sp, #4]
 800373a:	f107 030f 	add.w	r3, r7, #15
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	2301      	movs	r3, #1
 8003742:	4804      	ldr	r0, [pc, #16]	@ (8003754 <SENSOR_IO_Read+0x38>)
 8003744:	f000 f8ac 	bl	80038a0 <I2Cx_ReadMultiple>

  return read_value;
 8003748:	7bfb      	ldrb	r3, [r7, #15]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20001e08 	.word	0x20001e08

08003758 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af02      	add	r7, sp, #8
 800375e:	603a      	str	r2, [r7, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	4603      	mov	r3, r0
 8003764:	71fb      	strb	r3, [r7, #7]
 8003766:	460b      	mov	r3, r1
 8003768:	71bb      	strb	r3, [r7, #6]
 800376a:	4613      	mov	r3, r2
 800376c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800376e:	79bb      	ldrb	r3, [r7, #6]
 8003770:	b29a      	uxth	r2, r3
 8003772:	79f9      	ldrb	r1, [r7, #7]
 8003774:	88bb      	ldrh	r3, [r7, #4]
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	2301      	movs	r3, #1
 800377e:	4804      	ldr	r0, [pc, #16]	@ (8003790 <SENSOR_IO_ReadMultiple+0x38>)
 8003780:	f000 f88e 	bl	80038a0 <I2Cx_ReadMultiple>
 8003784:	4603      	mov	r3, r0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20001e08 	.word	0x20001e08

08003794 <I2Cx_Init>:
 * @brief  Initializes I2C HAL.
 * @param  i2c_handler  I2C handler
 * @retval None
 */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance = DISCOVERY_I2Cx;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a12      	ldr	r2, [pc, #72]	@ (80037e8 <I2Cx_Init+0x54>)
 80037a0:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing = DISCOVERY_I2Cx_TIMING;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a11      	ldr	r2, [pc, #68]	@ (80037ec <I2Cx_Init+0x58>)
 80037a6:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1 = 0;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2 = 0;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f80f 	bl	80037f0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f001 f8e1 	bl	800499a <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 80037d8:	2100      	movs	r1, #0
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f001 fe98 	bl	8005510 <HAL_I2CEx_ConfigAnalogFilter>
}
 80037e0:	bf00      	nop
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40005800 	.word	0x40005800
 80037ec:	00702681 	.word	0x00702681

080037f0 <I2Cx_MspInit>:



static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08a      	sub	sp, #40	@ 0x28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80037f8:	4b27      	ldr	r3, [pc, #156]	@ (8003898 <I2Cx_MspInit+0xa8>)
 80037fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fc:	4a26      	ldr	r2, [pc, #152]	@ (8003898 <I2Cx_MspInit+0xa8>)
 80037fe:	f043 0302 	orr.w	r3, r3, #2
 8003802:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003804:	4b24      	ldr	r3, [pc, #144]	@ (8003898 <I2Cx_MspInit+0xa8>)
 8003806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8003810:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003814:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003816:	2312      	movs	r3, #18
 8003818:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800381a:	2301      	movs	r3, #1
 800381c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800381e:	2303      	movs	r3, #3
 8003820:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003822:	2304      	movs	r3, #4
 8003824:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003826:	f107 0314 	add.w	r3, r7, #20
 800382a:	4619      	mov	r1, r3
 800382c:	481b      	ldr	r0, [pc, #108]	@ (800389c <I2Cx_MspInit+0xac>)
 800382e:	f000 fda9 	bl	8004384 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003832:	f107 0314 	add.w	r3, r7, #20
 8003836:	4619      	mov	r1, r3
 8003838:	4818      	ldr	r0, [pc, #96]	@ (800389c <I2Cx_MspInit+0xac>)
 800383a:	f000 fda3 	bl	8004384 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800383e:	4b16      	ldr	r3, [pc, #88]	@ (8003898 <I2Cx_MspInit+0xa8>)
 8003840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003842:	4a15      	ldr	r2, [pc, #84]	@ (8003898 <I2Cx_MspInit+0xa8>)
 8003844:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003848:	6593      	str	r3, [r2, #88]	@ 0x58
 800384a:	4b13      	ldr	r3, [pc, #76]	@ (8003898 <I2Cx_MspInit+0xa8>)
 800384c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003856:	4b10      	ldr	r3, [pc, #64]	@ (8003898 <I2Cx_MspInit+0xa8>)
 8003858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385a:	4a0f      	ldr	r2, [pc, #60]	@ (8003898 <I2Cx_MspInit+0xa8>)
 800385c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003860:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003862:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <I2Cx_MspInit+0xa8>)
 8003864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003866:	4a0c      	ldr	r2, [pc, #48]	@ (8003898 <I2Cx_MspInit+0xa8>)
 8003868:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800386c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800386e:	2200      	movs	r2, #0
 8003870:	210f      	movs	r1, #15
 8003872:	2021      	movs	r0, #33	@ 0x21
 8003874:	f000 fbf2 	bl	800405c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003878:	2021      	movs	r0, #33	@ 0x21
 800387a:	f000 fc0b 	bl	8004094 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800387e:	2200      	movs	r2, #0
 8003880:	210f      	movs	r1, #15
 8003882:	2022      	movs	r0, #34	@ 0x22
 8003884:	f000 fbea 	bl	800405c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003888:	2022      	movs	r0, #34	@ 0x22
 800388a:	f000 fc03 	bl	8004094 <HAL_NVIC_EnableIRQ>
}
 800388e:	bf00      	nop
 8003890:	3728      	adds	r7, #40	@ 0x28
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40021000 	.word	0x40021000
 800389c:	48000400 	.word	0x48000400

080038a0 <I2Cx_ReadMultiple>:
 * @param  Buffer  Pointer to data buffer
 * @param  Length  Length of the data
 * @retval HAL status
 */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08a      	sub	sp, #40	@ 0x28
 80038a4:	af04      	add	r7, sp, #16
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	4608      	mov	r0, r1
 80038aa:	4611      	mov	r1, r2
 80038ac:	461a      	mov	r2, r3
 80038ae:	4603      	mov	r3, r0
 80038b0:	72fb      	strb	r3, [r7, #11]
 80038b2:	460b      	mov	r3, r1
 80038b4:	813b      	strh	r3, [r7, #8]
 80038b6:	4613      	mov	r3, r2
 80038b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80038be:	7afb      	ldrb	r3, [r7, #11]
 80038c0:	b299      	uxth	r1, r3
 80038c2:	88f8      	ldrh	r0, [r7, #6]
 80038c4:	893a      	ldrh	r2, [r7, #8]
 80038c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038ca:	9302      	str	r3, [sp, #8]
 80038cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80038ce:	9301      	str	r3, [sp, #4]
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	4603      	mov	r3, r0
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f001 fa3e 	bl	8004d58 <HAL_I2C_Mem_Read>
 80038dc:	4603      	mov	r3, r0
 80038de:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d004      	beq.n	80038f0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80038e6:	7afb      	ldrb	r3, [r7, #11]
 80038e8:	4619      	mov	r1, r3
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f832 	bl	8003954 <I2Cx_Error>
  }
  return status;
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <I2Cx_WriteMultiple>:
 * @param  Buffer  The target register value to be written
 * @param  Length  buffer size to be written
 * @retval HAL status
 */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b08a      	sub	sp, #40	@ 0x28
 80038fe:	af04      	add	r7, sp, #16
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	4608      	mov	r0, r1
 8003904:	4611      	mov	r1, r2
 8003906:	461a      	mov	r2, r3
 8003908:	4603      	mov	r3, r0
 800390a:	72fb      	strb	r3, [r7, #11]
 800390c:	460b      	mov	r3, r1
 800390e:	813b      	strh	r3, [r7, #8]
 8003910:	4613      	mov	r3, r2
 8003912:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003918:	7afb      	ldrb	r3, [r7, #11]
 800391a:	b299      	uxth	r1, r3
 800391c:	88f8      	ldrh	r0, [r7, #6]
 800391e:	893a      	ldrh	r2, [r7, #8]
 8003920:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003924:	9302      	str	r3, [sp, #8]
 8003926:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003928:	9301      	str	r3, [sp, #4]
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	4603      	mov	r3, r0
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f001 f8fd 	bl	8004b30 <HAL_I2C_Mem_Write>
 8003936:	4603      	mov	r3, r0
 8003938:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 800393a:	7dfb      	ldrb	r3, [r7, #23]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d004      	beq.n	800394a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003940:	7afb      	ldrb	r3, [r7, #11]
 8003942:	4619      	mov	r1, r3
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f805 	bl	8003954 <I2Cx_Error>
  }
  return status;
 800394a:	7dfb      	ldrb	r3, [r7, #23]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <I2Cx_Error>:
 * @param  i2c_handler  I2C handler
 * @param  Addr  I2C Address
 * @retval None
 */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f001 f8b5 	bl	8004ad0 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff ff14 	bl	8003794 <I2Cx_Init>
}
 800396c:	bf00      	nop
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800397a:	2300      	movs	r3, #0
 800397c:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 800397e:	4b12      	ldr	r3, [pc, #72]	@ (80039c8 <BSP_SPI3_Init+0x54>)
 8003980:	4a12      	ldr	r2, [pc, #72]	@ (80039cc <BSP_SPI3_Init+0x58>)
 8003982:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 8003984:	4b12      	ldr	r3, [pc, #72]	@ (80039d0 <BSP_SPI3_Init+0x5c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	4911      	ldr	r1, [pc, #68]	@ (80039d0 <BSP_SPI3_Init+0x5c>)
 800398c:	600a      	str	r2, [r1, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d114      	bne.n	80039bc <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 8003992:	480d      	ldr	r0, [pc, #52]	@ (80039c8 <BSP_SPI3_Init+0x54>)
 8003994:	f003 fe44 	bl	8007620 <HAL_SPI_GetState>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10e      	bne.n	80039bc <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 800399e:	480a      	ldr	r0, [pc, #40]	@ (80039c8 <BSP_SPI3_Init+0x54>)
 80039a0:	f000 f882 	bl	8003aa8 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d108      	bne.n	80039bc <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 80039aa:	4807      	ldr	r0, [pc, #28]	@ (80039c8 <BSP_SPI3_Init+0x54>)
 80039ac:	f000 f83a 	bl	8003a24 <MX_SPI3_Init>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80039b6:	f06f 0307 	mvn.w	r3, #7
 80039ba:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 80039bc:	687b      	ldr	r3, [r7, #4]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20001e5c 	.word	0x20001e5c
 80039cc:	40003c00 	.word	0x40003c00
 80039d0:	20001ec0 	.word	0x20001ec0

080039d4 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	4613      	mov	r3, r2
 80039e0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 80039e6:	88fb      	ldrh	r3, [r7, #6]
 80039e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80039ec:	9200      	str	r2, [sp, #0]
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	68f9      	ldr	r1, [r7, #12]
 80039f2:	4807      	ldr	r0, [pc, #28]	@ (8003a10 <BSP_SPI3_SendRecv+0x3c>)
 80039f4:	f003 fbf5 	bl	80071e2 <HAL_SPI_TransmitReceive>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80039fe:	f06f 0305 	mvn.w	r3, #5
 8003a02:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003a04:	697b      	ldr	r3, [r7, #20]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20001e5c 	.word	0x20001e5c

08003a14 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003a18:	f000 fa38 	bl	8003e8c <HAL_GetTick>
 8003a1c:	4603      	mov	r3, r0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa4 <MX_SPI3_Init+0x80>)
 8003a34:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a3c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003a4a:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a5e:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2207      	movs	r2, #7
 8003a7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2208      	movs	r2, #8
 8003a88:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f003 fafc 	bl	8007088 <HAL_SPI_Init>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40003c00 	.word	0x40003c00

08003aa8 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08a      	sub	sp, #40	@ 0x28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003ab0:	4b27      	ldr	r3, [pc, #156]	@ (8003b50 <SPI3_MspInit+0xa8>)
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab4:	4a26      	ldr	r2, [pc, #152]	@ (8003b50 <SPI3_MspInit+0xa8>)
 8003ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003abc:	4b24      	ldr	r3, [pc, #144]	@ (8003b50 <SPI3_MspInit+0xa8>)
 8003abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ac8:	4b21      	ldr	r3, [pc, #132]	@ (8003b50 <SPI3_MspInit+0xa8>)
 8003aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003acc:	4a20      	ldr	r2, [pc, #128]	@ (8003b50 <SPI3_MspInit+0xa8>)
 8003ace:	f043 0304 	orr.w	r3, r3, #4
 8003ad2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8003b50 <SPI3_MspInit+0xa8>)
 8003ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8003ae0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aee:	2303      	movs	r3, #3
 8003af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 8003af2:	2306      	movs	r3, #6
 8003af4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003af6:	f107 0314 	add.w	r3, r7, #20
 8003afa:	4619      	mov	r1, r3
 8003afc:	4815      	ldr	r0, [pc, #84]	@ (8003b54 <SPI3_MspInit+0xac>)
 8003afe:	f000 fc41 	bl	8004384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 8003b02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b08:	2302      	movs	r3, #2
 8003b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b10:	2303      	movs	r3, #3
 8003b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8003b14:	2306      	movs	r3, #6
 8003b16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003b18:	f107 0314 	add.w	r3, r7, #20
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	480d      	ldr	r0, [pc, #52]	@ (8003b54 <SPI3_MspInit+0xac>)
 8003b20:	f000 fc30 	bl	8004384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8003b24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b32:	2303      	movs	r3, #3
 8003b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8003b36:	2306      	movs	r3, #6
 8003b38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003b3a:	f107 0314 	add.w	r3, r7, #20
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4804      	ldr	r0, [pc, #16]	@ (8003b54 <SPI3_MspInit+0xac>)
 8003b42:	f000 fc1f 	bl	8004384 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8003b46:	bf00      	nop
 8003b48:	3728      	adds	r7, #40	@ 0x28
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000
 8003b54:	48000800 	.word	0x48000800

08003b58 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003b62:	2300      	movs	r3, #0
 8003b64:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003b66:	2110      	movs	r1, #16
 8003b68:	20d4      	movs	r0, #212	@ 0xd4
 8003b6a:	f7ff fdd7 	bl	800371c <SENSOR_IO_Read>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003b76:	7bbb      	ldrb	r3, [r7, #14]
 8003b78:	f003 0303 	and.w	r3, r3, #3
 8003b7c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003b7e:	7bba      	ldrb	r2, [r7, #14]
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8003b86:	7bbb      	ldrb	r3, [r7, #14]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	2110      	movs	r1, #16
 8003b8c:	20d4      	movs	r0, #212	@ 0xd4
 8003b8e:	f7ff fdab 	bl	80036e8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003b92:	2112      	movs	r1, #18
 8003b94:	20d4      	movs	r0, #212	@ 0xd4
 8003b96:	f7ff fdc1 	bl	800371c <SENSOR_IO_Read>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003b9e:	88fb      	ldrh	r3, [r7, #6]
 8003ba0:	0a1b      	lsrs	r3, r3, #8
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003ba6:	7bbb      	ldrb	r3, [r7, #14]
 8003ba8:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8003bac:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003bae:	7bba      	ldrb	r2, [r7, #14]
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003bb6:	7bbb      	ldrb	r3, [r7, #14]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	2112      	movs	r1, #18
 8003bbc:	20d4      	movs	r0, #212	@ 0xd4
 8003bbe:	f7ff fd93 	bl	80036e8 <SENSOR_IO_Write>
}
 8003bc2:	bf00      	nop
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003bd4:	2110      	movs	r1, #16
 8003bd6:	20d4      	movs	r0, #212	@ 0xd4
 8003bd8:	f7ff fda0 	bl	800371c <SENSOR_IO_Read>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	461a      	mov	r2, r3
 8003bec:	2110      	movs	r1, #16
 8003bee:	20d4      	movs	r0, #212	@ 0xd4
 8003bf0:	f7ff fd7a 	bl	80036e8 <SENSOR_IO_Write>
}
 8003bf4:	bf00      	nop
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8003c00:	f7ff fd68 	bl	80036d4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8003c04:	210f      	movs	r1, #15
 8003c06:	20d4      	movs	r0, #212	@ 0xd4
 8003c08:	f7ff fd88 	bl	800371c <SENSOR_IO_Read>
 8003c0c:	4603      	mov	r3, r0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b084      	sub	sp, #16
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	4603      	mov	r3, r0
 8003c1a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8003c20:	2115      	movs	r1, #21
 8003c22:	20d4      	movs	r0, #212	@ 0xd4
 8003c24:	f7ff fd7a 	bl	800371c <SENSOR_IO_Read>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	f023 0310 	bic.w	r3, r3, #16
 8003c32:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003c34:	88fb      	ldrh	r3, [r7, #6]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	f043 0310 	orr.w	r3, r3, #16
 8003c40:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	461a      	mov	r2, r3
 8003c46:	2115      	movs	r1, #21
 8003c48:	20d4      	movs	r0, #212	@ 0xd4
 8003c4a:	f7ff fd4d 	bl	80036e8 <SENSOR_IO_Write>
}
 8003c4e:	bf00      	nop
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003c6e:	2110      	movs	r1, #16
 8003c70:	20d4      	movs	r0, #212	@ 0xd4
 8003c72:	f7ff fd53 	bl	800371c <SENSOR_IO_Read>
 8003c76:	4603      	mov	r3, r0
 8003c78:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003c7a:	f107 0208 	add.w	r2, r7, #8
 8003c7e:	2306      	movs	r3, #6
 8003c80:	2128      	movs	r1, #40	@ 0x28
 8003c82:	20d4      	movs	r0, #212	@ 0xd4
 8003c84:	f7ff fd68 	bl	8003758 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003c88:	2300      	movs	r3, #0
 8003c8a:	77fb      	strb	r3, [r7, #31]
 8003c8c:	e01a      	b.n	8003cc4 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003c8e:	7ffb      	ldrb	r3, [r7, #31]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	3301      	adds	r3, #1
 8003c94:	3320      	adds	r3, #32
 8003c96:	443b      	add	r3, r7
 8003c98:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003c9c:	021b      	lsls	r3, r3, #8
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	7ffa      	ldrb	r2, [r7, #31]
 8003ca2:	0052      	lsls	r2, r2, #1
 8003ca4:	3220      	adds	r2, #32
 8003ca6:	443a      	add	r2, r7
 8003ca8:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8003cac:	4413      	add	r3, r2
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	7ffb      	ldrb	r3, [r7, #31]
 8003cb2:	b212      	sxth	r2, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	3320      	adds	r3, #32
 8003cb8:	443b      	add	r3, r7
 8003cba:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003cbe:	7ffb      	ldrb	r3, [r7, #31]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	77fb      	strb	r3, [r7, #31]
 8003cc4:	7ffb      	ldrb	r3, [r7, #31]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d9e1      	bls.n	8003c8e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8003cca:	7dfb      	ldrb	r3, [r7, #23]
 8003ccc:	f003 030c 	and.w	r3, r3, #12
 8003cd0:	2b0c      	cmp	r3, #12
 8003cd2:	d829      	bhi.n	8003d28 <LSM6DSL_AccReadXYZ+0xd0>
 8003cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003cdc <LSM6DSL_AccReadXYZ+0x84>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003d11 	.word	0x08003d11
 8003ce0:	08003d29 	.word	0x08003d29
 8003ce4:	08003d29 	.word	0x08003d29
 8003ce8:	08003d29 	.word	0x08003d29
 8003cec:	08003d23 	.word	0x08003d23
 8003cf0:	08003d29 	.word	0x08003d29
 8003cf4:	08003d29 	.word	0x08003d29
 8003cf8:	08003d29 	.word	0x08003d29
 8003cfc:	08003d17 	.word	0x08003d17
 8003d00:	08003d29 	.word	0x08003d29
 8003d04:	08003d29 	.word	0x08003d29
 8003d08:	08003d29 	.word	0x08003d29
 8003d0c:	08003d1d 	.word	0x08003d1d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8003d10:	4b18      	ldr	r3, [pc, #96]	@ (8003d74 <LSM6DSL_AccReadXYZ+0x11c>)
 8003d12:	61bb      	str	r3, [r7, #24]
    break;
 8003d14:	e008      	b.n	8003d28 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8003d16:	4b18      	ldr	r3, [pc, #96]	@ (8003d78 <LSM6DSL_AccReadXYZ+0x120>)
 8003d18:	61bb      	str	r3, [r7, #24]
    break;
 8003d1a:	e005      	b.n	8003d28 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8003d1c:	4b17      	ldr	r3, [pc, #92]	@ (8003d7c <LSM6DSL_AccReadXYZ+0x124>)
 8003d1e:	61bb      	str	r3, [r7, #24]
    break;
 8003d20:	e002      	b.n	8003d28 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8003d22:	4b17      	ldr	r3, [pc, #92]	@ (8003d80 <LSM6DSL_AccReadXYZ+0x128>)
 8003d24:	61bb      	str	r3, [r7, #24]
    break;    
 8003d26:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003d28:	2300      	movs	r3, #0
 8003d2a:	77fb      	strb	r3, [r7, #31]
 8003d2c:	e01a      	b.n	8003d64 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003d2e:	7ffb      	ldrb	r3, [r7, #31]
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	3320      	adds	r3, #32
 8003d34:	443b      	add	r3, r7
 8003d36:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d42:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d4a:	7ffb      	ldrb	r3, [r7, #31]
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	4413      	add	r3, r2
 8003d52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d56:	ee17 2a90 	vmov	r2, s15
 8003d5a:	b212      	sxth	r2, r2
 8003d5c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003d5e:	7ffb      	ldrb	r3, [r7, #31]
 8003d60:	3301      	adds	r3, #1
 8003d62:	77fb      	strb	r3, [r7, #31]
 8003d64:	7ffb      	ldrb	r3, [r7, #31]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d9e1      	bls.n	8003d2e <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8003d6a:	bf00      	nop
 8003d6c:	bf00      	nop
 8003d6e:	3720      	adds	r7, #32
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	3d79db23 	.word	0x3d79db23
 8003d78:	3df9db23 	.word	0x3df9db23
 8003d7c:	3e79db23 	.word	0x3e79db23
 8003d80:	3ef9db23 	.word	0x3ef9db23

08003d84 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8003d92:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <BSP_ACCELERO_Init+0x78>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	4798      	blx	r3
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b6a      	cmp	r3, #106	@ 0x6a
 8003d9c:	d002      	beq.n	8003da4 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
 8003da2:	e025      	b.n	8003df0 <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8003da4:	4b16      	ldr	r3, [pc, #88]	@ (8003e00 <BSP_ACCELERO_Init+0x7c>)
 8003da6:	4a15      	ldr	r2, [pc, #84]	@ (8003dfc <BSP_ACCELERO_Init+0x78>)
 8003da8:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8003daa:	2330      	movs	r3, #48	@ 0x30
 8003dac:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8003db2:	2300      	movs	r3, #0
 8003db4:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8003db6:	2340      	movs	r3, #64	@ 0x40
 8003db8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	72fb      	strb	r3, [r7, #11]

    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8003dc2:	797a      	ldrb	r2, [r7, #5]
 8003dc4:	7abb      	ldrb	r3, [r7, #10]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003dcc:	7a3b      	ldrb	r3, [r7, #8]
 8003dce:	f043 0304 	orr.w	r3, r3, #4
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	b21b      	sxth	r3, r3
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	b21a      	sxth	r2, r3
 8003dda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	b21b      	sxth	r3, r3
 8003de2:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003de4:	4b06      	ldr	r3, [pc, #24]	@ (8003e00 <BSP_ACCELERO_Init+0x7c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	89ba      	ldrh	r2, [r7, #12]
 8003dec:	4610      	mov	r0, r2
 8003dee:	4798      	blx	r3
  }

  return ret;
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000030 	.word	0x20000030
 8003e00:	20001ec4 	.word	0x20001ec4

08003e04 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8003e0c:	4b08      	ldr	r3, [pc, #32]	@ (8003e30 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d009      	beq.n	8003e28 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8003e14:	4b06      	ldr	r3, [pc, #24]	@ (8003e30 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d004      	beq.n	8003e28 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8003e1e:	4b04      	ldr	r3, [pc, #16]	@ (8003e30 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	4798      	blx	r3
    }
  }
}
 8003e28:	bf00      	nop
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	20001ec4 	.word	0x20001ec4

08003e34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e3e:	2003      	movs	r0, #3
 8003e40:	f000 f901 	bl	8004046 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e44:	200f      	movs	r0, #15
 8003e46:	f7ff f95b 	bl	8003100 <HAL_InitTick>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	71fb      	strb	r3, [r7, #7]
 8003e54:	e001      	b.n	8003e5a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e56:	f7fe fec1 	bl	8002bdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e68:	4b06      	ldr	r3, [pc, #24]	@ (8003e84 <HAL_IncTick+0x20>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4b06      	ldr	r3, [pc, #24]	@ (8003e88 <HAL_IncTick+0x24>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4413      	add	r3, r2
 8003e74:	4a04      	ldr	r2, [pc, #16]	@ (8003e88 <HAL_IncTick+0x24>)
 8003e76:	6013      	str	r3, [r2, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	20000068 	.word	0x20000068
 8003e88:	20001ec8 	.word	0x20001ec8

08003e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e90:	4b03      	ldr	r3, [pc, #12]	@ (8003ea0 <HAL_GetTick+0x14>)
 8003e92:	681b      	ldr	r3, [r3, #0]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20001ec8 	.word	0x20001ec8

08003ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003eac:	f7ff ffee 	bl	8003e8c <HAL_GetTick>
 8003eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebc:	d005      	beq.n	8003eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee8 <HAL_Delay+0x44>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003eca:	bf00      	nop
 8003ecc:	f7ff ffde 	bl	8003e8c <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d8f7      	bhi.n	8003ecc <HAL_Delay+0x28>
  {
  }
}
 8003edc:	bf00      	nop
 8003ede:	bf00      	nop
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000068 	.word	0x20000068

08003eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003efc:	4b0c      	ldr	r3, [pc, #48]	@ (8003f30 <__NVIC_SetPriorityGrouping+0x44>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f08:	4013      	ands	r3, r2
 8003f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f1e:	4a04      	ldr	r2, [pc, #16]	@ (8003f30 <__NVIC_SetPriorityGrouping+0x44>)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	60d3      	str	r3, [r2, #12]
}
 8003f24:	bf00      	nop
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	e000ed00 	.word	0xe000ed00

08003f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f38:	4b04      	ldr	r3, [pc, #16]	@ (8003f4c <__NVIC_GetPriorityGrouping+0x18>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	0a1b      	lsrs	r3, r3, #8
 8003f3e:	f003 0307 	and.w	r3, r3, #7
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	e000ed00 	.word	0xe000ed00

08003f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	db0b      	blt.n	8003f7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	f003 021f 	and.w	r2, r3, #31
 8003f68:	4907      	ldr	r1, [pc, #28]	@ (8003f88 <__NVIC_EnableIRQ+0x38>)
 8003f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	2001      	movs	r0, #1
 8003f72:	fa00 f202 	lsl.w	r2, r0, r2
 8003f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	e000e100 	.word	0xe000e100

08003f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	6039      	str	r1, [r7, #0]
 8003f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	db0a      	blt.n	8003fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	490c      	ldr	r1, [pc, #48]	@ (8003fd8 <__NVIC_SetPriority+0x4c>)
 8003fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003faa:	0112      	lsls	r2, r2, #4
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	440b      	add	r3, r1
 8003fb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fb4:	e00a      	b.n	8003fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	4908      	ldr	r1, [pc, #32]	@ (8003fdc <__NVIC_SetPriority+0x50>)
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	3b04      	subs	r3, #4
 8003fc4:	0112      	lsls	r2, r2, #4
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	440b      	add	r3, r1
 8003fca:	761a      	strb	r2, [r3, #24]
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	e000e100 	.word	0xe000e100
 8003fdc:	e000ed00 	.word	0xe000ed00

08003fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b089      	sub	sp, #36	@ 0x24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f1c3 0307 	rsb	r3, r3, #7
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	bf28      	it	cs
 8003ffe:	2304      	movcs	r3, #4
 8004000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	3304      	adds	r3, #4
 8004006:	2b06      	cmp	r3, #6
 8004008:	d902      	bls.n	8004010 <NVIC_EncodePriority+0x30>
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	3b03      	subs	r3, #3
 800400e:	e000      	b.n	8004012 <NVIC_EncodePriority+0x32>
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004014:	f04f 32ff 	mov.w	r2, #4294967295
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43da      	mvns	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	401a      	ands	r2, r3
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004028:	f04f 31ff 	mov.w	r1, #4294967295
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	fa01 f303 	lsl.w	r3, r1, r3
 8004032:	43d9      	mvns	r1, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004038:	4313      	orrs	r3, r2
         );
}
 800403a:	4618      	mov	r0, r3
 800403c:	3724      	adds	r7, #36	@ 0x24
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff ff4c 	bl	8003eec <__NVIC_SetPriorityGrouping>
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800406e:	f7ff ff61 	bl	8003f34 <__NVIC_GetPriorityGrouping>
 8004072:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	68b9      	ldr	r1, [r7, #8]
 8004078:	6978      	ldr	r0, [r7, #20]
 800407a:	f7ff ffb1 	bl	8003fe0 <NVIC_EncodePriority>
 800407e:	4602      	mov	r2, r0
 8004080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff ff80 	bl	8003f8c <__NVIC_SetPriority>
}
 800408c:	bf00      	nop
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	4603      	mov	r3, r0
 800409c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800409e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff ff54 	bl	8003f50 <__NVIC_EnableIRQ>
}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e0ac      	b.n	800421c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 f8b2 	bl	8004230 <DFSDM_GetChannelFromInstance>
 80040cc:	4603      	mov	r3, r0
 80040ce:	4a55      	ldr	r2, [pc, #340]	@ (8004224 <HAL_DFSDM_ChannelInit+0x174>)
 80040d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e09f      	b.n	800421c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7fe fda5 	bl	8002c2c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80040e2:	4b51      	ldr	r3, [pc, #324]	@ (8004228 <HAL_DFSDM_ChannelInit+0x178>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3301      	adds	r3, #1
 80040e8:	4a4f      	ldr	r2, [pc, #316]	@ (8004228 <HAL_DFSDM_ChannelInit+0x178>)
 80040ea:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80040ec:	4b4e      	ldr	r3, [pc, #312]	@ (8004228 <HAL_DFSDM_ChannelInit+0x178>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d125      	bne.n	8004140 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80040f4:	4b4d      	ldr	r3, [pc, #308]	@ (800422c <HAL_DFSDM_ChannelInit+0x17c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a4c      	ldr	r2, [pc, #304]	@ (800422c <HAL_DFSDM_ChannelInit+0x17c>)
 80040fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040fe:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004100:	4b4a      	ldr	r3, [pc, #296]	@ (800422c <HAL_DFSDM_ChannelInit+0x17c>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	4948      	ldr	r1, [pc, #288]	@ (800422c <HAL_DFSDM_ChannelInit+0x17c>)
 800410a:	4313      	orrs	r3, r2
 800410c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800410e:	4b47      	ldr	r3, [pc, #284]	@ (800422c <HAL_DFSDM_ChannelInit+0x17c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a46      	ldr	r2, [pc, #280]	@ (800422c <HAL_DFSDM_ChannelInit+0x17c>)
 8004114:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8004118:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	791b      	ldrb	r3, [r3, #4]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d108      	bne.n	8004134 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004122:	4b42      	ldr	r3, [pc, #264]	@ (800422c <HAL_DFSDM_ChannelInit+0x17c>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	3b01      	subs	r3, #1
 800412c:	041b      	lsls	r3, r3, #16
 800412e:	493f      	ldr	r1, [pc, #252]	@ (800422c <HAL_DFSDM_ChannelInit+0x17c>)
 8004130:	4313      	orrs	r3, r2
 8004132:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004134:	4b3d      	ldr	r3, [pc, #244]	@ (800422c <HAL_DFSDM_ChannelInit+0x17c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a3c      	ldr	r2, [pc, #240]	@ (800422c <HAL_DFSDM_ChannelInit+0x17c>)
 800413a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800413e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800414e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6819      	ldr	r1, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800415e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004164:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 020f 	bic.w	r2, r2, #15
 800417c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6819      	ldr	r1, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800418c:	431a      	orrs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80041a4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6899      	ldr	r1, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b4:	3b01      	subs	r3, #1
 80041b6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f002 0207 	and.w	r2, r2, #7
 80041d0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6859      	ldr	r1, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041dc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80041fc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f000 f810 	bl	8004230 <DFSDM_GetChannelFromInstance>
 8004210:	4602      	mov	r2, r0
 8004212:	4904      	ldr	r1, [pc, #16]	@ (8004224 <HAL_DFSDM_ChannelInit+0x174>)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	20001ed0 	.word	0x20001ed0
 8004228:	20001ecc 	.word	0x20001ecc
 800422c:	40016000 	.word	0x40016000

08004230 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a1c      	ldr	r2, [pc, #112]	@ (80042ac <DFSDM_GetChannelFromInstance+0x7c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d102      	bne.n	8004246 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	e02b      	b.n	800429e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a19      	ldr	r2, [pc, #100]	@ (80042b0 <DFSDM_GetChannelFromInstance+0x80>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d102      	bne.n	8004254 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800424e:	2301      	movs	r3, #1
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	e024      	b.n	800429e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a17      	ldr	r2, [pc, #92]	@ (80042b4 <DFSDM_GetChannelFromInstance+0x84>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d102      	bne.n	8004262 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800425c:	2302      	movs	r3, #2
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	e01d      	b.n	800429e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a14      	ldr	r2, [pc, #80]	@ (80042b8 <DFSDM_GetChannelFromInstance+0x88>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d102      	bne.n	8004270 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800426a:	2304      	movs	r3, #4
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	e016      	b.n	800429e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a12      	ldr	r2, [pc, #72]	@ (80042bc <DFSDM_GetChannelFromInstance+0x8c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d102      	bne.n	800427e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004278:	2305      	movs	r3, #5
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	e00f      	b.n	800429e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a0f      	ldr	r2, [pc, #60]	@ (80042c0 <DFSDM_GetChannelFromInstance+0x90>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d102      	bne.n	800428c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004286:	2306      	movs	r3, #6
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	e008      	b.n	800429e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a0d      	ldr	r2, [pc, #52]	@ (80042c4 <DFSDM_GetChannelFromInstance+0x94>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d102      	bne.n	800429a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004294:	2307      	movs	r3, #7
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	e001      	b.n	800429e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800429a:	2303      	movs	r3, #3
 800429c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800429e:	68fb      	ldr	r3, [r7, #12]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	40016000 	.word	0x40016000
 80042b0:	40016020 	.word	0x40016020
 80042b4:	40016040 	.word	0x40016040
 80042b8:	40016080 	.word	0x40016080
 80042bc:	400160a0 	.word	0x400160a0
 80042c0:	400160c0 	.word	0x400160c0
 80042c4:	400160e0 	.word	0x400160e0

080042c8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	460b      	mov	r3, r1
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80042da:	7afb      	ldrb	r3, [r7, #11]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d103      	bne.n	80042e8 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	605a      	str	r2, [r3, #4]
      break;
 80042e6:	e002      	b.n	80042ee <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	75fb      	strb	r3, [r7, #23]
      break;
 80042ec:	bf00      	nop
  }

  return status;
 80042ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e003      	b.n	8004318 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004316:	2300      	movs	r3, #0
  }
}
 8004318:	4618      	mov	r0, r3
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	0c1b      	lsrs	r3, r3, #16
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	2201      	movs	r2, #1
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <HAL_EXTI_IRQHandler+0x5c>)
 800434e:	4413      	add	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	4013      	ands	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d009      	beq.n	8004376 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	4798      	blx	r3
    }
  }
}
 8004376:	bf00      	nop
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40010414 	.word	0x40010414

08004384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004384:	b480      	push	{r7}
 8004386:	b087      	sub	sp, #28
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004392:	e17f      	b.n	8004694 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	2101      	movs	r1, #1
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	fa01 f303 	lsl.w	r3, r1, r3
 80043a0:	4013      	ands	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 8171 	beq.w	800468e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d005      	beq.n	80043c4 <HAL_GPIO_Init+0x40>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d130      	bne.n	8004426 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	2203      	movs	r2, #3
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	43db      	mvns	r3, r3
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	4013      	ands	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043fa:	2201      	movs	r2, #1
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43db      	mvns	r3, r3
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4013      	ands	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	091b      	lsrs	r3, r3, #4
 8004410:	f003 0201 	and.w	r2, r3, #1
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	2b03      	cmp	r3, #3
 8004430:	d118      	bne.n	8004464 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004436:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004438:	2201      	movs	r2, #1
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43db      	mvns	r3, r3
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4013      	ands	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	08db      	lsrs	r3, r3, #3
 800444e:	f003 0201 	and.w	r2, r3, #1
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	2b03      	cmp	r3, #3
 800446e:	d017      	beq.n	80044a0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	2203      	movs	r2, #3
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	43db      	mvns	r3, r3
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4013      	ands	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f003 0303 	and.w	r3, r3, #3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d123      	bne.n	80044f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	08da      	lsrs	r2, r3, #3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3208      	adds	r2, #8
 80044b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	220f      	movs	r2, #15
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	43db      	mvns	r3, r3
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4013      	ands	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	08da      	lsrs	r2, r3, #3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3208      	adds	r2, #8
 80044ee:	6939      	ldr	r1, [r7, #16]
 80044f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	2203      	movs	r2, #3
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	43db      	mvns	r3, r3
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4013      	ands	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 0203 	and.w	r2, r3, #3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 80ac 	beq.w	800468e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004536:	4b5f      	ldr	r3, [pc, #380]	@ (80046b4 <HAL_GPIO_Init+0x330>)
 8004538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800453a:	4a5e      	ldr	r2, [pc, #376]	@ (80046b4 <HAL_GPIO_Init+0x330>)
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	6613      	str	r3, [r2, #96]	@ 0x60
 8004542:	4b5c      	ldr	r3, [pc, #368]	@ (80046b4 <HAL_GPIO_Init+0x330>)
 8004544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	60bb      	str	r3, [r7, #8]
 800454c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800454e:	4a5a      	ldr	r2, [pc, #360]	@ (80046b8 <HAL_GPIO_Init+0x334>)
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	089b      	lsrs	r3, r3, #2
 8004554:	3302      	adds	r3, #2
 8004556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800455a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	220f      	movs	r2, #15
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43db      	mvns	r3, r3
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4013      	ands	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004578:	d025      	beq.n	80045c6 <HAL_GPIO_Init+0x242>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a4f      	ldr	r2, [pc, #316]	@ (80046bc <HAL_GPIO_Init+0x338>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d01f      	beq.n	80045c2 <HAL_GPIO_Init+0x23e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a4e      	ldr	r2, [pc, #312]	@ (80046c0 <HAL_GPIO_Init+0x33c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d019      	beq.n	80045be <HAL_GPIO_Init+0x23a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a4d      	ldr	r2, [pc, #308]	@ (80046c4 <HAL_GPIO_Init+0x340>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d013      	beq.n	80045ba <HAL_GPIO_Init+0x236>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a4c      	ldr	r2, [pc, #304]	@ (80046c8 <HAL_GPIO_Init+0x344>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d00d      	beq.n	80045b6 <HAL_GPIO_Init+0x232>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a4b      	ldr	r2, [pc, #300]	@ (80046cc <HAL_GPIO_Init+0x348>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d007      	beq.n	80045b2 <HAL_GPIO_Init+0x22e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a4a      	ldr	r2, [pc, #296]	@ (80046d0 <HAL_GPIO_Init+0x34c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d101      	bne.n	80045ae <HAL_GPIO_Init+0x22a>
 80045aa:	2306      	movs	r3, #6
 80045ac:	e00c      	b.n	80045c8 <HAL_GPIO_Init+0x244>
 80045ae:	2307      	movs	r3, #7
 80045b0:	e00a      	b.n	80045c8 <HAL_GPIO_Init+0x244>
 80045b2:	2305      	movs	r3, #5
 80045b4:	e008      	b.n	80045c8 <HAL_GPIO_Init+0x244>
 80045b6:	2304      	movs	r3, #4
 80045b8:	e006      	b.n	80045c8 <HAL_GPIO_Init+0x244>
 80045ba:	2303      	movs	r3, #3
 80045bc:	e004      	b.n	80045c8 <HAL_GPIO_Init+0x244>
 80045be:	2302      	movs	r3, #2
 80045c0:	e002      	b.n	80045c8 <HAL_GPIO_Init+0x244>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <HAL_GPIO_Init+0x244>
 80045c6:	2300      	movs	r3, #0
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	f002 0203 	and.w	r2, r2, #3
 80045ce:	0092      	lsls	r2, r2, #2
 80045d0:	4093      	lsls	r3, r2
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045d8:	4937      	ldr	r1, [pc, #220]	@ (80046b8 <HAL_GPIO_Init+0x334>)
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	089b      	lsrs	r3, r3, #2
 80045de:	3302      	adds	r3, #2
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045e6:	4b3b      	ldr	r3, [pc, #236]	@ (80046d4 <HAL_GPIO_Init+0x350>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	43db      	mvns	r3, r3
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4013      	ands	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800460a:	4a32      	ldr	r2, [pc, #200]	@ (80046d4 <HAL_GPIO_Init+0x350>)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004610:	4b30      	ldr	r3, [pc, #192]	@ (80046d4 <HAL_GPIO_Init+0x350>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	43db      	mvns	r3, r3
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4013      	ands	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004634:	4a27      	ldr	r2, [pc, #156]	@ (80046d4 <HAL_GPIO_Init+0x350>)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800463a:	4b26      	ldr	r3, [pc, #152]	@ (80046d4 <HAL_GPIO_Init+0x350>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	43db      	mvns	r3, r3
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4013      	ands	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800465e:	4a1d      	ldr	r2, [pc, #116]	@ (80046d4 <HAL_GPIO_Init+0x350>)
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004664:	4b1b      	ldr	r3, [pc, #108]	@ (80046d4 <HAL_GPIO_Init+0x350>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	43db      	mvns	r3, r3
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4013      	ands	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004688:	4a12      	ldr	r2, [pc, #72]	@ (80046d4 <HAL_GPIO_Init+0x350>)
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	3301      	adds	r3, #1
 8004692:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	fa22 f303 	lsr.w	r3, r2, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f47f ae78 	bne.w	8004394 <HAL_GPIO_Init+0x10>
  }
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40021000 	.word	0x40021000
 80046b8:	40010000 	.word	0x40010000
 80046bc:	48000400 	.word	0x48000400
 80046c0:	48000800 	.word	0x48000800
 80046c4:	48000c00 	.word	0x48000c00
 80046c8:	48001000 	.word	0x48001000
 80046cc:	48001400 	.word	0x48001400
 80046d0:	48001800 	.word	0x48001800
 80046d4:	40010400 	.word	0x40010400

080046d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80046e6:	e0cd      	b.n	8004884 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80046e8:	2201      	movs	r2, #1
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	4013      	ands	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80c0 	beq.w	800487e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80046fe:	4a68      	ldr	r2, [pc, #416]	@ (80048a0 <HAL_GPIO_DeInit+0x1c8>)
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	089b      	lsrs	r3, r3, #2
 8004704:	3302      	adds	r3, #2
 8004706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	220f      	movs	r2, #15
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4013      	ands	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004726:	d025      	beq.n	8004774 <HAL_GPIO_DeInit+0x9c>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a5e      	ldr	r2, [pc, #376]	@ (80048a4 <HAL_GPIO_DeInit+0x1cc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d01f      	beq.n	8004770 <HAL_GPIO_DeInit+0x98>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a5d      	ldr	r2, [pc, #372]	@ (80048a8 <HAL_GPIO_DeInit+0x1d0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d019      	beq.n	800476c <HAL_GPIO_DeInit+0x94>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a5c      	ldr	r2, [pc, #368]	@ (80048ac <HAL_GPIO_DeInit+0x1d4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d013      	beq.n	8004768 <HAL_GPIO_DeInit+0x90>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a5b      	ldr	r2, [pc, #364]	@ (80048b0 <HAL_GPIO_DeInit+0x1d8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d00d      	beq.n	8004764 <HAL_GPIO_DeInit+0x8c>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a5a      	ldr	r2, [pc, #360]	@ (80048b4 <HAL_GPIO_DeInit+0x1dc>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d007      	beq.n	8004760 <HAL_GPIO_DeInit+0x88>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a59      	ldr	r2, [pc, #356]	@ (80048b8 <HAL_GPIO_DeInit+0x1e0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d101      	bne.n	800475c <HAL_GPIO_DeInit+0x84>
 8004758:	2306      	movs	r3, #6
 800475a:	e00c      	b.n	8004776 <HAL_GPIO_DeInit+0x9e>
 800475c:	2307      	movs	r3, #7
 800475e:	e00a      	b.n	8004776 <HAL_GPIO_DeInit+0x9e>
 8004760:	2305      	movs	r3, #5
 8004762:	e008      	b.n	8004776 <HAL_GPIO_DeInit+0x9e>
 8004764:	2304      	movs	r3, #4
 8004766:	e006      	b.n	8004776 <HAL_GPIO_DeInit+0x9e>
 8004768:	2303      	movs	r3, #3
 800476a:	e004      	b.n	8004776 <HAL_GPIO_DeInit+0x9e>
 800476c:	2302      	movs	r3, #2
 800476e:	e002      	b.n	8004776 <HAL_GPIO_DeInit+0x9e>
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <HAL_GPIO_DeInit+0x9e>
 8004774:	2300      	movs	r3, #0
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	f002 0203 	and.w	r2, r2, #3
 800477c:	0092      	lsls	r2, r2, #2
 800477e:	4093      	lsls	r3, r2
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	429a      	cmp	r2, r3
 8004784:	d132      	bne.n	80047ec <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004786:	4b4d      	ldr	r3, [pc, #308]	@ (80048bc <HAL_GPIO_DeInit+0x1e4>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	43db      	mvns	r3, r3
 800478e:	494b      	ldr	r1, [pc, #300]	@ (80048bc <HAL_GPIO_DeInit+0x1e4>)
 8004790:	4013      	ands	r3, r2
 8004792:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004794:	4b49      	ldr	r3, [pc, #292]	@ (80048bc <HAL_GPIO_DeInit+0x1e4>)
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	43db      	mvns	r3, r3
 800479c:	4947      	ldr	r1, [pc, #284]	@ (80048bc <HAL_GPIO_DeInit+0x1e4>)
 800479e:	4013      	ands	r3, r2
 80047a0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80047a2:	4b46      	ldr	r3, [pc, #280]	@ (80048bc <HAL_GPIO_DeInit+0x1e4>)
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	43db      	mvns	r3, r3
 80047aa:	4944      	ldr	r1, [pc, #272]	@ (80048bc <HAL_GPIO_DeInit+0x1e4>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80047b0:	4b42      	ldr	r3, [pc, #264]	@ (80048bc <HAL_GPIO_DeInit+0x1e4>)
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	43db      	mvns	r3, r3
 80047b8:	4940      	ldr	r1, [pc, #256]	@ (80048bc <HAL_GPIO_DeInit+0x1e4>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f003 0303 	and.w	r3, r3, #3
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	220f      	movs	r2, #15
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80047ce:	4a34      	ldr	r2, [pc, #208]	@ (80048a0 <HAL_GPIO_DeInit+0x1c8>)
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	089b      	lsrs	r3, r3, #2
 80047d4:	3302      	adds	r3, #2
 80047d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	43da      	mvns	r2, r3
 80047de:	4830      	ldr	r0, [pc, #192]	@ (80048a0 <HAL_GPIO_DeInit+0x1c8>)
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	089b      	lsrs	r3, r3, #2
 80047e4:	400a      	ands	r2, r1
 80047e6:	3302      	adds	r3, #2
 80047e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	2103      	movs	r1, #3
 80047f6:	fa01 f303 	lsl.w	r3, r1, r3
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	08da      	lsrs	r2, r3, #3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3208      	adds	r2, #8
 8004808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	220f      	movs	r2, #15
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	43db      	mvns	r3, r3
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	08d2      	lsrs	r2, r2, #3
 8004820:	4019      	ands	r1, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3208      	adds	r2, #8
 8004826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	2103      	movs	r1, #3
 8004834:	fa01 f303 	lsl.w	r3, r1, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	401a      	ands	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	2101      	movs	r1, #1
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	fa01 f303 	lsl.w	r3, r1, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	401a      	ands	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	2103      	movs	r1, #3
 800485e:	fa01 f303 	lsl.w	r3, r1, r3
 8004862:	43db      	mvns	r3, r3
 8004864:	401a      	ands	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800486e:	2101      	movs	r1, #1
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	fa01 f303 	lsl.w	r3, r1, r3
 8004876:	43db      	mvns	r3, r3
 8004878:	401a      	ands	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	3301      	adds	r3, #1
 8004882:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	f47f af2b 	bne.w	80046e8 <HAL_GPIO_DeInit+0x10>
  }
}
 8004892:	bf00      	nop
 8004894:	bf00      	nop
 8004896:	371c      	adds	r7, #28
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	40010000 	.word	0x40010000
 80048a4:	48000400 	.word	0x48000400
 80048a8:	48000800 	.word	0x48000800
 80048ac:	48000c00 	.word	0x48000c00
 80048b0:	48001000 	.word	0x48001000
 80048b4:	48001400 	.word	0x48001400
 80048b8:	48001800 	.word	0x48001800
 80048bc:	40010400 	.word	0x40010400

080048c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	887b      	ldrh	r3, [r7, #2]
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d002      	beq.n	80048de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048d8:	2301      	movs	r3, #1
 80048da:	73fb      	strb	r3, [r7, #15]
 80048dc:	e001      	b.n	80048e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048de:	2300      	movs	r3, #0
 80048e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	807b      	strh	r3, [r7, #2]
 80048fc:	4613      	mov	r3, r2
 80048fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004900:	787b      	ldrb	r3, [r7, #1]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004906:	887a      	ldrh	r2, [r7, #2]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800490c:	e002      	b.n	8004914 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800490e:	887a      	ldrh	r2, [r7, #2]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004932:	887a      	ldrh	r2, [r7, #2]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4013      	ands	r3, r2
 8004938:	041a      	lsls	r2, r3, #16
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	43d9      	mvns	r1, r3
 800493e:	887b      	ldrh	r3, [r7, #2]
 8004940:	400b      	ands	r3, r1
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	619a      	str	r2, [r3, #24]
}
 8004948:	bf00      	nop
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800495e:	4b08      	ldr	r3, [pc, #32]	@ (8004980 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	4013      	ands	r3, r2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d006      	beq.n	8004978 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800496a:	4a05      	ldr	r2, [pc, #20]	@ (8004980 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800496c:	88fb      	ldrh	r3, [r7, #6]
 800496e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004970:	88fb      	ldrh	r3, [r7, #6]
 8004972:	4618      	mov	r0, r3
 8004974:	f000 f806 	bl	8004984 <HAL_GPIO_EXTI_Callback>
  }
}
 8004978:	bf00      	nop
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40010400 	.word	0x40010400

08004984 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e08d      	b.n	8004ac8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d106      	bne.n	80049c6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7fe f997 	bl	8002cf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2224      	movs	r2, #36	@ 0x24
 80049ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0201 	bic.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80049ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d107      	bne.n	8004a14 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a10:	609a      	str	r2, [r3, #8]
 8004a12:	e006      	b.n	8004a22 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004a20:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d108      	bne.n	8004a3c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a38:	605a      	str	r2, [r3, #4]
 8004a3a:	e007      	b.n	8004a4c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a4a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a5e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a6e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69d9      	ldr	r1, [r3, #28]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1a      	ldr	r2, [r3, #32]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0201 	orr.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e021      	b.n	8004b26 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2224      	movs	r2, #36	@ 0x24
 8004ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fe f958 	bl	8002db0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	4608      	mov	r0, r1
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4603      	mov	r3, r0
 8004b40:	817b      	strh	r3, [r7, #10]
 8004b42:	460b      	mov	r3, r1
 8004b44:	813b      	strh	r3, [r7, #8]
 8004b46:	4613      	mov	r3, r2
 8004b48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b20      	cmp	r3, #32
 8004b54:	f040 80f9 	bne.w	8004d4a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_I2C_Mem_Write+0x34>
 8004b5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d105      	bne.n	8004b70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b6a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0ed      	b.n	8004d4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_I2C_Mem_Write+0x4e>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e0e6      	b.n	8004d4c <HAL_I2C_Mem_Write+0x21c>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b86:	f7ff f981 	bl	8003e8c <HAL_GetTick>
 8004b8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	2319      	movs	r3, #25
 8004b92:	2201      	movs	r2, #1
 8004b94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 fac3 	bl	8005124 <I2C_WaitOnFlagUntilTimeout>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0d1      	b.n	8004d4c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2221      	movs	r2, #33	@ 0x21
 8004bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2240      	movs	r2, #64	@ 0x40
 8004bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a3a      	ldr	r2, [r7, #32]
 8004bc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bd0:	88f8      	ldrh	r0, [r7, #6]
 8004bd2:	893a      	ldrh	r2, [r7, #8]
 8004bd4:	8979      	ldrh	r1, [r7, #10]
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	9301      	str	r3, [sp, #4]
 8004bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	4603      	mov	r3, r0
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 f9d3 	bl	8004f8c <I2C_RequestMemoryWrite>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0a9      	b.n	8004d4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2bff      	cmp	r3, #255	@ 0xff
 8004c00:	d90e      	bls.n	8004c20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	22ff      	movs	r2, #255	@ 0xff
 8004c06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	8979      	ldrh	r1, [r7, #10]
 8004c10:	2300      	movs	r3, #0
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 fc47 	bl	80054ac <I2C_TransferConfig>
 8004c1e:	e00f      	b.n	8004c40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	8979      	ldrh	r1, [r7, #10]
 8004c32:	2300      	movs	r3, #0
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fc36 	bl	80054ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 fac6 	bl	80051d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e07b      	b.n	8004d4c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c58:	781a      	ldrb	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d034      	beq.n	8004cf8 <HAL_I2C_Mem_Write+0x1c8>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d130      	bne.n	8004cf8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2180      	movs	r1, #128	@ 0x80
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 fa3f 	bl	8005124 <I2C_WaitOnFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e04d      	b.n	8004d4c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2bff      	cmp	r3, #255	@ 0xff
 8004cb8:	d90e      	bls.n	8004cd8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	22ff      	movs	r2, #255	@ 0xff
 8004cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	8979      	ldrh	r1, [r7, #10]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 fbeb 	bl	80054ac <I2C_TransferConfig>
 8004cd6:	e00f      	b.n	8004cf8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	8979      	ldrh	r1, [r7, #10]
 8004cea:	2300      	movs	r3, #0
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 fbda 	bl	80054ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d19e      	bne.n	8004c40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 faac 	bl	8005264 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e01a      	b.n	8004d4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6859      	ldr	r1, [r3, #4]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	4b0a      	ldr	r3, [pc, #40]	@ (8004d54 <HAL_I2C_Mem_Write+0x224>)
 8004d2a:	400b      	ands	r3, r1
 8004d2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	e000      	b.n	8004d4c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004d4a:	2302      	movs	r3, #2
  }
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	fe00e800 	.word	0xfe00e800

08004d58 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	4608      	mov	r0, r1
 8004d62:	4611      	mov	r1, r2
 8004d64:	461a      	mov	r2, r3
 8004d66:	4603      	mov	r3, r0
 8004d68:	817b      	strh	r3, [r7, #10]
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	813b      	strh	r3, [r7, #8]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	f040 80fd 	bne.w	8004f7a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <HAL_I2C_Mem_Read+0x34>
 8004d86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d105      	bne.n	8004d98 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d92:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e0f1      	b.n	8004f7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_I2C_Mem_Read+0x4e>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e0ea      	b.n	8004f7c <HAL_I2C_Mem_Read+0x224>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004dae:	f7ff f86d 	bl	8003e8c <HAL_GetTick>
 8004db2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	2319      	movs	r3, #25
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f9af 	bl	8005124 <I2C_WaitOnFlagUntilTimeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e0d5      	b.n	8004f7c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2222      	movs	r2, #34	@ 0x22
 8004dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2240      	movs	r2, #64	@ 0x40
 8004ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a3a      	ldr	r2, [r7, #32]
 8004dea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004df0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004df8:	88f8      	ldrh	r0, [r7, #6]
 8004dfa:	893a      	ldrh	r2, [r7, #8]
 8004dfc:	8979      	ldrh	r1, [r7, #10]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	9301      	str	r3, [sp, #4]
 8004e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	4603      	mov	r3, r0
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 f913 	bl	8005034 <I2C_RequestMemoryRead>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d005      	beq.n	8004e20 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e0ad      	b.n	8004f7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2bff      	cmp	r3, #255	@ 0xff
 8004e28:	d90e      	bls.n	8004e48 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	8979      	ldrh	r1, [r7, #10]
 8004e38:	4b52      	ldr	r3, [pc, #328]	@ (8004f84 <HAL_I2C_Mem_Read+0x22c>)
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 fb33 	bl	80054ac <I2C_TransferConfig>
 8004e46:	e00f      	b.n	8004e68 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	8979      	ldrh	r1, [r7, #10]
 8004e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004f84 <HAL_I2C_Mem_Read+0x22c>)
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fb22 	bl	80054ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2104      	movs	r1, #4
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 f956 	bl	8005124 <I2C_WaitOnFlagUntilTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e07c      	b.n	8004f7c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d034      	beq.n	8004f28 <HAL_I2C_Mem_Read+0x1d0>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d130      	bne.n	8004f28 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2180      	movs	r1, #128	@ 0x80
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 f927 	bl	8005124 <I2C_WaitOnFlagUntilTimeout>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e04d      	b.n	8004f7c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2bff      	cmp	r3, #255	@ 0xff
 8004ee8:	d90e      	bls.n	8004f08 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	8979      	ldrh	r1, [r7, #10]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 fad3 	bl	80054ac <I2C_TransferConfig>
 8004f06:	e00f      	b.n	8004f28 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	8979      	ldrh	r1, [r7, #10]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 fac2 	bl	80054ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d19a      	bne.n	8004e68 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 f994 	bl	8005264 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e01a      	b.n	8004f7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6859      	ldr	r1, [r3, #4]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	4b0b      	ldr	r3, [pc, #44]	@ (8004f88 <HAL_I2C_Mem_Read+0x230>)
 8004f5a:	400b      	ands	r3, r1
 8004f5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	e000      	b.n	8004f7c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
  }
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	80002400 	.word	0x80002400
 8004f88:	fe00e800 	.word	0xfe00e800

08004f8c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	4608      	mov	r0, r1
 8004f96:	4611      	mov	r1, r2
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	817b      	strh	r3, [r7, #10]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	813b      	strh	r3, [r7, #8]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004fa6:	88fb      	ldrh	r3, [r7, #6]
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	8979      	ldrh	r1, [r7, #10]
 8004fac:	4b20      	ldr	r3, [pc, #128]	@ (8005030 <I2C_RequestMemoryWrite+0xa4>)
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 fa79 	bl	80054ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	69b9      	ldr	r1, [r7, #24]
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 f909 	bl	80051d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e02c      	b.n	8005028 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fce:	88fb      	ldrh	r3, [r7, #6]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d105      	bne.n	8004fe0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fd4:	893b      	ldrh	r3, [r7, #8]
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	629a      	str	r2, [r3, #40]	@ 0x28
 8004fde:	e015      	b.n	800500c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fe0:	893b      	ldrh	r3, [r7, #8]
 8004fe2:	0a1b      	lsrs	r3, r3, #8
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fee:	69fa      	ldr	r2, [r7, #28]
 8004ff0:	69b9      	ldr	r1, [r7, #24]
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 f8ef 	bl	80051d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e012      	b.n	8005028 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005002:	893b      	ldrh	r3, [r7, #8]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2200      	movs	r2, #0
 8005014:	2180      	movs	r1, #128	@ 0x80
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 f884 	bl	8005124 <I2C_WaitOnFlagUntilTimeout>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	80002000 	.word	0x80002000

08005034 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af02      	add	r7, sp, #8
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	4608      	mov	r0, r1
 800503e:	4611      	mov	r1, r2
 8005040:	461a      	mov	r2, r3
 8005042:	4603      	mov	r3, r0
 8005044:	817b      	strh	r3, [r7, #10]
 8005046:	460b      	mov	r3, r1
 8005048:	813b      	strh	r3, [r7, #8]
 800504a:	4613      	mov	r3, r2
 800504c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	b2da      	uxtb	r2, r3
 8005052:	8979      	ldrh	r1, [r7, #10]
 8005054:	4b20      	ldr	r3, [pc, #128]	@ (80050d8 <I2C_RequestMemoryRead+0xa4>)
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	2300      	movs	r3, #0
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 fa26 	bl	80054ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005060:	69fa      	ldr	r2, [r7, #28]
 8005062:	69b9      	ldr	r1, [r7, #24]
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f8b6 	bl	80051d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e02c      	b.n	80050ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005074:	88fb      	ldrh	r3, [r7, #6]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d105      	bne.n	8005086 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800507a:	893b      	ldrh	r3, [r7, #8]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	629a      	str	r2, [r3, #40]	@ 0x28
 8005084:	e015      	b.n	80050b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005086:	893b      	ldrh	r3, [r7, #8]
 8005088:	0a1b      	lsrs	r3, r3, #8
 800508a:	b29b      	uxth	r3, r3
 800508c:	b2da      	uxtb	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	69b9      	ldr	r1, [r7, #24]
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 f89c 	bl	80051d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e012      	b.n	80050ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050a8:	893b      	ldrh	r3, [r7, #8]
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	2200      	movs	r2, #0
 80050ba:	2140      	movs	r1, #64	@ 0x40
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f831 	bl	8005124 <I2C_WaitOnFlagUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e000      	b.n	80050ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	80002000 	.word	0x80002000

080050dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d103      	bne.n	80050fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2200      	movs	r2, #0
 80050f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b01      	cmp	r3, #1
 8005106:	d007      	beq.n	8005118 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699a      	ldr	r2, [r3, #24]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	619a      	str	r2, [r3, #24]
  }
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	4613      	mov	r3, r2
 8005132:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005134:	e03b      	b.n	80051ae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	6839      	ldr	r1, [r7, #0]
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f8d6 	bl	80052ec <I2C_IsErrorOccurred>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e041      	b.n	80051ce <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005150:	d02d      	beq.n	80051ae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005152:	f7fe fe9b 	bl	8003e8c <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d302      	bcc.n	8005168 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d122      	bne.n	80051ae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	4013      	ands	r3, r2
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	429a      	cmp	r2, r3
 8005176:	bf0c      	ite	eq
 8005178:	2301      	moveq	r3, #1
 800517a:	2300      	movne	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	461a      	mov	r2, r3
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	429a      	cmp	r2, r3
 8005184:	d113      	bne.n	80051ae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800518a:	f043 0220 	orr.w	r2, r3, #32
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e00f      	b.n	80051ce <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	699a      	ldr	r2, [r3, #24]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4013      	ands	r3, r2
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	bf0c      	ite	eq
 80051be:	2301      	moveq	r3, #1
 80051c0:	2300      	movne	r3, #0
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d0b4      	beq.n	8005136 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051e2:	e033      	b.n	800524c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f87f 	bl	80052ec <I2C_IsErrorOccurred>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e031      	b.n	800525c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fe:	d025      	beq.n	800524c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005200:	f7fe fe44 	bl	8003e8c <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	429a      	cmp	r2, r3
 800520e:	d302      	bcc.n	8005216 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d11a      	bne.n	800524c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b02      	cmp	r3, #2
 8005222:	d013      	beq.n	800524c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005228:	f043 0220 	orr.w	r2, r3, #32
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2220      	movs	r2, #32
 8005234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e007      	b.n	800525c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b02      	cmp	r3, #2
 8005258:	d1c4      	bne.n	80051e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005270:	e02f      	b.n	80052d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	68b9      	ldr	r1, [r7, #8]
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 f838 	bl	80052ec <I2C_IsErrorOccurred>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e02d      	b.n	80052e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005286:	f7fe fe01 	bl	8003e8c <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	429a      	cmp	r2, r3
 8005294:	d302      	bcc.n	800529c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d11a      	bne.n	80052d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	d013      	beq.n	80052d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ae:	f043 0220 	orr.w	r2, r3, #32
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e007      	b.n	80052e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	f003 0320 	and.w	r3, r3, #32
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d1c8      	bne.n	8005272 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08a      	sub	sp, #40	@ 0x28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052f8:	2300      	movs	r3, #0
 80052fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005306:	2300      	movs	r3, #0
 8005308:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	f003 0310 	and.w	r3, r3, #16
 8005314:	2b00      	cmp	r3, #0
 8005316:	d068      	beq.n	80053ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2210      	movs	r2, #16
 800531e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005320:	e049      	b.n	80053b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005328:	d045      	beq.n	80053b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800532a:	f7fe fdaf 	bl	8003e8c <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	429a      	cmp	r2, r3
 8005338:	d302      	bcc.n	8005340 <I2C_IsErrorOccurred+0x54>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d13a      	bne.n	80053b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800534a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005352:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800535e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005362:	d121      	bne.n	80053a8 <I2C_IsErrorOccurred+0xbc>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800536a:	d01d      	beq.n	80053a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800536c:	7cfb      	ldrb	r3, [r7, #19]
 800536e:	2b20      	cmp	r3, #32
 8005370:	d01a      	beq.n	80053a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005380:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005382:	f7fe fd83 	bl	8003e8c <HAL_GetTick>
 8005386:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005388:	e00e      	b.n	80053a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800538a:	f7fe fd7f 	bl	8003e8c <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b19      	cmp	r3, #25
 8005396:	d907      	bls.n	80053a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	f043 0320 	orr.w	r3, r3, #32
 800539e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80053a6:	e006      	b.n	80053b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	f003 0320 	and.w	r3, r3, #32
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	d1e9      	bne.n	800538a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	d003      	beq.n	80053cc <I2C_IsErrorOccurred+0xe0>
 80053c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0aa      	beq.n	8005322 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80053cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d103      	bne.n	80053dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2220      	movs	r2, #32
 80053da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	f043 0304 	orr.w	r3, r3, #4
 80053e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00b      	beq.n	8005414 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	f043 0301 	orr.w	r3, r3, #1
 8005402:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800540c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00b      	beq.n	8005436 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	f043 0308 	orr.w	r3, r3, #8
 8005424:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800542e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00b      	beq.n	8005458 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	f043 0302 	orr.w	r3, r3, #2
 8005446:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005450:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005458:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01c      	beq.n	800549a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f7ff fe3b 	bl	80050dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6859      	ldr	r1, [r3, #4]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	4b0d      	ldr	r3, [pc, #52]	@ (80054a8 <I2C_IsErrorOccurred+0x1bc>)
 8005472:	400b      	ands	r3, r1
 8005474:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	431a      	orrs	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2220      	movs	r2, #32
 8005486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800549a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3728      	adds	r7, #40	@ 0x28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	fe00e800 	.word	0xfe00e800

080054ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	607b      	str	r3, [r7, #4]
 80054b6:	460b      	mov	r3, r1
 80054b8:	817b      	strh	r3, [r7, #10]
 80054ba:	4613      	mov	r3, r2
 80054bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054be:	897b      	ldrh	r3, [r7, #10]
 80054c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054c4:	7a7b      	ldrb	r3, [r7, #9]
 80054c6:	041b      	lsls	r3, r3, #16
 80054c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80054da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	0d5b      	lsrs	r3, r3, #21
 80054e6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80054ea:	4b08      	ldr	r3, [pc, #32]	@ (800550c <I2C_TransferConfig+0x60>)
 80054ec:	430b      	orrs	r3, r1
 80054ee:	43db      	mvns	r3, r3
 80054f0:	ea02 0103 	and.w	r1, r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	03ff63ff 	.word	0x03ff63ff

08005510 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b20      	cmp	r3, #32
 8005524:	d138      	bne.n	8005598 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005530:	2302      	movs	r3, #2
 8005532:	e032      	b.n	800559a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2224      	movs	r2, #36	@ 0x24
 8005540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0201 	bic.w	r2, r2, #1
 8005552:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005562:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6819      	ldr	r1, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0201 	orr.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2220      	movs	r2, #32
 8005588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	e000      	b.n	800559a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005598:	2302      	movs	r3, #2
  }
}
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b086      	sub	sp, #24
 80055aa:	af02      	add	r7, sp, #8
 80055ac:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e101      	b.n	80057bc <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d106      	bne.n	80055d2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7fd fcfb 	bl	8002fc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2203      	movs	r2, #3
 80055d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f003 fa2b 	bl	8008a40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6818      	ldr	r0, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	7c1a      	ldrb	r2, [r3, #16]
 80055f2:	f88d 2000 	strb.w	r2, [sp]
 80055f6:	3304      	adds	r3, #4
 80055f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055fa:	f003 f9f4 	bl	80089e6 <USB_CoreInit>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d005      	beq.n	8005610 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e0d5      	b.n	80057bc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2100      	movs	r1, #0
 8005616:	4618      	mov	r0, r3
 8005618:	f003 fa23 	bl	8008a62 <USB_SetCurrentMode>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d005      	beq.n	800562e <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2202      	movs	r2, #2
 8005626:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e0c6      	b.n	80057bc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800562e:	2300      	movs	r3, #0
 8005630:	73fb      	strb	r3, [r7, #15]
 8005632:	e04a      	b.n	80056ca <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005634:	7bfa      	ldrb	r2, [r7, #15]
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	4613      	mov	r3, r2
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	3315      	adds	r3, #21
 8005644:	2201      	movs	r2, #1
 8005646:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005648:	7bfa      	ldrb	r2, [r7, #15]
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	4613      	mov	r3, r2
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	3314      	adds	r3, #20
 8005658:	7bfa      	ldrb	r2, [r7, #15]
 800565a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800565c:	7bfa      	ldrb	r2, [r7, #15]
 800565e:	7bfb      	ldrb	r3, [r7, #15]
 8005660:	b298      	uxth	r0, r3
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	4613      	mov	r3, r2
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	4413      	add	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	332e      	adds	r3, #46	@ 0x2e
 8005670:	4602      	mov	r2, r0
 8005672:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005674:	7bfa      	ldrb	r2, [r7, #15]
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	4613      	mov	r3, r2
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	4413      	add	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	440b      	add	r3, r1
 8005682:	3318      	adds	r3, #24
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005688:	7bfa      	ldrb	r2, [r7, #15]
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	331c      	adds	r3, #28
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800569c:	7bfa      	ldrb	r2, [r7, #15]
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	4613      	mov	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	4413      	add	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	3320      	adds	r3, #32
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056b0:	7bfa      	ldrb	r2, [r7, #15]
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	4613      	mov	r3, r2
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	4413      	add	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	3324      	adds	r3, #36	@ 0x24
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	3301      	adds	r3, #1
 80056c8:	73fb      	strb	r3, [r7, #15]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	791b      	ldrb	r3, [r3, #4]
 80056ce:	7bfa      	ldrb	r2, [r7, #15]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d3af      	bcc.n	8005634 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056d4:	2300      	movs	r3, #0
 80056d6:	73fb      	strb	r3, [r7, #15]
 80056d8:	e044      	b.n	8005764 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056da:	7bfa      	ldrb	r2, [r7, #15]
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	4613      	mov	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	4413      	add	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	440b      	add	r3, r1
 80056e8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80056ec:	2200      	movs	r2, #0
 80056ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80056f0:	7bfa      	ldrb	r2, [r7, #15]
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	4613      	mov	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005702:	7bfa      	ldrb	r2, [r7, #15]
 8005704:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005706:	7bfa      	ldrb	r2, [r7, #15]
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	4613      	mov	r3, r2
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	4413      	add	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	440b      	add	r3, r1
 8005714:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005718:	2200      	movs	r2, #0
 800571a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800571c:	7bfa      	ldrb	r2, [r7, #15]
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	4613      	mov	r3, r2
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	440b      	add	r3, r1
 800572a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005732:	7bfa      	ldrb	r2, [r7, #15]
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	4413      	add	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	440b      	add	r3, r1
 8005740:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005748:	7bfa      	ldrb	r2, [r7, #15]
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	4613      	mov	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800575e:	7bfb      	ldrb	r3, [r7, #15]
 8005760:	3301      	adds	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	791b      	ldrb	r3, [r3, #4]
 8005768:	7bfa      	ldrb	r2, [r7, #15]
 800576a:	429a      	cmp	r2, r3
 800576c:	d3b5      	bcc.n	80056da <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6818      	ldr	r0, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	7c1a      	ldrb	r2, [r3, #16]
 8005776:	f88d 2000 	strb.w	r2, [sp]
 800577a:	3304      	adds	r3, #4
 800577c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800577e:	f003 f9bd 	bl	8008afc <USB_DevInit>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d005      	beq.n	8005794 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e013      	b.n	80057bc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	7b1b      	ldrb	r3, [r3, #12]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d102      	bne.n	80057b0 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f80a 	bl	80057c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f003 fb62 	bl	8008e7e <USB_DevDisconnect>

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057f6:	f043 0303 	orr.w	r3, r3, #3
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005810:	4b05      	ldr	r3, [pc, #20]	@ (8005828 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a04      	ldr	r2, [pc, #16]	@ (8005828 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800581a:	6013      	str	r3, [r2, #0]
}
 800581c:	bf00      	nop
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	40007000 	.word	0x40007000

0800582c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005830:	4b04      	ldr	r3, [pc, #16]	@ (8005844 <HAL_PWREx_GetVoltageRange+0x18>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005838:	4618      	mov	r0, r3
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40007000 	.word	0x40007000

08005848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005856:	d130      	bne.n	80058ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005858:	4b23      	ldr	r3, [pc, #140]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005864:	d038      	beq.n	80058d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005866:	4b20      	ldr	r3, [pc, #128]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800586e:	4a1e      	ldr	r2, [pc, #120]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005870:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005874:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005876:	4b1d      	ldr	r3, [pc, #116]	@ (80058ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2232      	movs	r2, #50	@ 0x32
 800587c:	fb02 f303 	mul.w	r3, r2, r3
 8005880:	4a1b      	ldr	r2, [pc, #108]	@ (80058f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005882:	fba2 2303 	umull	r2, r3, r2, r3
 8005886:	0c9b      	lsrs	r3, r3, #18
 8005888:	3301      	adds	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800588c:	e002      	b.n	8005894 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3b01      	subs	r3, #1
 8005892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005894:	4b14      	ldr	r3, [pc, #80]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800589c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058a0:	d102      	bne.n	80058a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1f2      	bne.n	800588e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058a8:	4b0f      	ldr	r3, [pc, #60]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058b4:	d110      	bne.n	80058d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e00f      	b.n	80058da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80058ba:	4b0b      	ldr	r3, [pc, #44]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80058c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058c6:	d007      	beq.n	80058d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058c8:	4b07      	ldr	r3, [pc, #28]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80058d0:	4a05      	ldr	r2, [pc, #20]	@ (80058e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40007000 	.word	0x40007000
 80058ec:	2000001c 	.word	0x2000001c
 80058f0:	431bde83 	.word	0x431bde83

080058f4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80058f8:	4b05      	ldr	r3, [pc, #20]	@ (8005910 <HAL_PWREx_EnableVddUSB+0x1c>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	4a04      	ldr	r2, [pc, #16]	@ (8005910 <HAL_PWREx_EnableVddUSB+0x1c>)
 80058fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005902:	6053      	str	r3, [r2, #4]
}
 8005904:	bf00      	nop
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40007000 	.word	0x40007000

08005914 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af02      	add	r7, sp, #8
 800591a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800591c:	f7fe fab6 	bl	8003e8c <HAL_GetTick>
 8005920:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e063      	b.n	80059f4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10b      	bne.n	8005950 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7fd fa59 	bl	8002df8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005946:	f241 3188 	movw	r1, #5000	@ 0x1388
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f858 	bl	8005a00 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	3b01      	subs	r3, #1
 8005960:	021a      	lsls	r2, r3, #8
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	2120      	movs	r1, #32
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f850 	bl	8005a1c <QSPI_WaitFlagStateUntilTimeout>
 800597c:	4603      	mov	r3, r0
 800597e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005980:	7afb      	ldrb	r3, [r7, #11]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d131      	bne.n	80059ea <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005990:	f023 0310 	bic.w	r3, r3, #16
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6852      	ldr	r2, [r2, #4]
 8005998:	0611      	lsls	r1, r2, #24
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	68d2      	ldr	r2, [r2, #12]
 800599e:	4311      	orrs	r1, r2
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6812      	ldr	r2, [r2, #0]
 80059a4:	430b      	orrs	r3, r1
 80059a6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	4b13      	ldr	r3, [pc, #76]	@ (80059fc <HAL_QSPI_Init+0xe8>)
 80059b0:	4013      	ands	r3, r2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6912      	ldr	r2, [r2, #16]
 80059b6:	0411      	lsls	r1, r2, #16
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6952      	ldr	r2, [r2, #20]
 80059bc:	4311      	orrs	r1, r2
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6992      	ldr	r2, [r2, #24]
 80059c2:	4311      	orrs	r1, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6812      	ldr	r2, [r2, #0]
 80059c8:	430b      	orrs	r3, r1
 80059ca:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80059f2:	7afb      	ldrb	r3, [r7, #11]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	ffe0f8fe 	.word	0xffe0f8fe

08005a00 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005a2c:	e01a      	b.n	8005a64 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a34:	d016      	beq.n	8005a64 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a36:	f7fe fa29 	bl	8003e8c <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d302      	bcc.n	8005a4c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10b      	bne.n	8005a64 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2204      	movs	r2, #4
 8005a50:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a58:	f043 0201 	orr.w	r2, r3, #1
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e00e      	b.n	8005a82 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	bf14      	ite	ne
 8005a72:	2301      	movne	r3, #1
 8005a74:	2300      	moveq	r3, #0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	461a      	mov	r2, r3
 8005a7a:	79fb      	ldrb	r3, [r7, #7]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d1d6      	bne.n	8005a2e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e3ca      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a9e:	4b97      	ldr	r3, [pc, #604]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 030c 	and.w	r3, r3, #12
 8005aa6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005aa8:	4b94      	ldr	r3, [pc, #592]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0303 	and.w	r3, r3, #3
 8005ab0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0310 	and.w	r3, r3, #16
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 80e4 	beq.w	8005c88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d007      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x4a>
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	2b0c      	cmp	r3, #12
 8005aca:	f040 808b 	bne.w	8005be4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	f040 8087 	bne.w	8005be4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ad6:	4b89      	ldr	r3, [pc, #548]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d005      	beq.n	8005aee <HAL_RCC_OscConfig+0x62>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e3a2      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1a      	ldr	r2, [r3, #32]
 8005af2:	4b82      	ldr	r3, [pc, #520]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d004      	beq.n	8005b08 <HAL_RCC_OscConfig+0x7c>
 8005afe:	4b7f      	ldr	r3, [pc, #508]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b06:	e005      	b.n	8005b14 <HAL_RCC_OscConfig+0x88>
 8005b08:	4b7c      	ldr	r3, [pc, #496]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b0e:	091b      	lsrs	r3, r3, #4
 8005b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d223      	bcs.n	8005b60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 fd87 	bl	8006630 <RCC_SetFlashLatencyFromMSIRange>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e383      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b2c:	4b73      	ldr	r3, [pc, #460]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a72      	ldr	r2, [pc, #456]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005b32:	f043 0308 	orr.w	r3, r3, #8
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	4b70      	ldr	r3, [pc, #448]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	496d      	ldr	r1, [pc, #436]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b4a:	4b6c      	ldr	r3, [pc, #432]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	021b      	lsls	r3, r3, #8
 8005b58:	4968      	ldr	r1, [pc, #416]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	604b      	str	r3, [r1, #4]
 8005b5e:	e025      	b.n	8005bac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b60:	4b66      	ldr	r3, [pc, #408]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a65      	ldr	r2, [pc, #404]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005b66:	f043 0308 	orr.w	r3, r3, #8
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	4b63      	ldr	r3, [pc, #396]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	4960      	ldr	r1, [pc, #384]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b7e:	4b5f      	ldr	r3, [pc, #380]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	021b      	lsls	r3, r3, #8
 8005b8c:	495b      	ldr	r1, [pc, #364]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d109      	bne.n	8005bac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 fd47 	bl	8006630 <RCC_SetFlashLatencyFromMSIRange>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e343      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bac:	f000 fc4a 	bl	8006444 <HAL_RCC_GetSysClockFreq>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	4b52      	ldr	r3, [pc, #328]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	091b      	lsrs	r3, r3, #4
 8005bb8:	f003 030f 	and.w	r3, r3, #15
 8005bbc:	4950      	ldr	r1, [pc, #320]	@ (8005d00 <HAL_RCC_OscConfig+0x274>)
 8005bbe:	5ccb      	ldrb	r3, [r1, r3]
 8005bc0:	f003 031f 	and.w	r3, r3, #31
 8005bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc8:	4a4e      	ldr	r2, [pc, #312]	@ (8005d04 <HAL_RCC_OscConfig+0x278>)
 8005bca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005bcc:	4b4e      	ldr	r3, [pc, #312]	@ (8005d08 <HAL_RCC_OscConfig+0x27c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fd fa95 	bl	8003100 <HAL_InitTick>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d052      	beq.n	8005c86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	e327      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d032      	beq.n	8005c52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005bec:	4b43      	ldr	r3, [pc, #268]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a42      	ldr	r2, [pc, #264]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005bf2:	f043 0301 	orr.w	r3, r3, #1
 8005bf6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005bf8:	f7fe f948 	bl	8003e8c <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c00:	f7fe f944 	bl	8003e8c <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e310      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c12:	4b3a      	ldr	r3, [pc, #232]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0f0      	beq.n	8005c00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c1e:	4b37      	ldr	r3, [pc, #220]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a36      	ldr	r2, [pc, #216]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005c24:	f043 0308 	orr.w	r3, r3, #8
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	4b34      	ldr	r3, [pc, #208]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	4931      	ldr	r1, [pc, #196]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c3c:	4b2f      	ldr	r3, [pc, #188]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	021b      	lsls	r3, r3, #8
 8005c4a:	492c      	ldr	r1, [pc, #176]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	604b      	str	r3, [r1, #4]
 8005c50:	e01a      	b.n	8005c88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005c52:	4b2a      	ldr	r3, [pc, #168]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a29      	ldr	r2, [pc, #164]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005c58:	f023 0301 	bic.w	r3, r3, #1
 8005c5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c5e:	f7fe f915 	bl	8003e8c <HAL_GetTick>
 8005c62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c64:	e008      	b.n	8005c78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c66:	f7fe f911 	bl	8003e8c <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e2dd      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c78:	4b20      	ldr	r3, [pc, #128]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1f0      	bne.n	8005c66 <HAL_RCC_OscConfig+0x1da>
 8005c84:	e000      	b.n	8005c88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d074      	beq.n	8005d7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d005      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x21a>
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	2b0c      	cmp	r3, #12
 8005c9e:	d10e      	bne.n	8005cbe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d10b      	bne.n	8005cbe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca6:	4b15      	ldr	r3, [pc, #84]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d064      	beq.n	8005d7c <HAL_RCC_OscConfig+0x2f0>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d160      	bne.n	8005d7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e2ba      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cc6:	d106      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x24a>
 8005cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005cce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	e026      	b.n	8005d24 <HAL_RCC_OscConfig+0x298>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cde:	d115      	bne.n	8005d0c <HAL_RCC_OscConfig+0x280>
 8005ce0:	4b06      	ldr	r3, [pc, #24]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a05      	ldr	r2, [pc, #20]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005ce6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	4b03      	ldr	r3, [pc, #12]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a02      	ldr	r2, [pc, #8]	@ (8005cfc <HAL_RCC_OscConfig+0x270>)
 8005cf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	e014      	b.n	8005d24 <HAL_RCC_OscConfig+0x298>
 8005cfa:	bf00      	nop
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	0800e7dc 	.word	0x0800e7dc
 8005d04:	2000001c 	.word	0x2000001c
 8005d08:	20000064 	.word	0x20000064
 8005d0c:	4ba0      	ldr	r3, [pc, #640]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a9f      	ldr	r2, [pc, #636]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005d12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	4b9d      	ldr	r3, [pc, #628]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a9c      	ldr	r2, [pc, #624]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005d1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d013      	beq.n	8005d54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2c:	f7fe f8ae 	bl	8003e8c <HAL_GetTick>
 8005d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d34:	f7fe f8aa 	bl	8003e8c <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b64      	cmp	r3, #100	@ 0x64
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e276      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d46:	4b92      	ldr	r3, [pc, #584]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0f0      	beq.n	8005d34 <HAL_RCC_OscConfig+0x2a8>
 8005d52:	e014      	b.n	8005d7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d54:	f7fe f89a 	bl	8003e8c <HAL_GetTick>
 8005d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d5c:	f7fe f896 	bl	8003e8c <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b64      	cmp	r3, #100	@ 0x64
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e262      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d6e:	4b88      	ldr	r3, [pc, #544]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1f0      	bne.n	8005d5c <HAL_RCC_OscConfig+0x2d0>
 8005d7a:	e000      	b.n	8005d7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d060      	beq.n	8005e4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	d005      	beq.n	8005d9c <HAL_RCC_OscConfig+0x310>
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	2b0c      	cmp	r3, #12
 8005d94:	d119      	bne.n	8005dca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d116      	bne.n	8005dca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d9c:	4b7c      	ldr	r3, [pc, #496]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d005      	beq.n	8005db4 <HAL_RCC_OscConfig+0x328>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e23f      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005db4:	4b76      	ldr	r3, [pc, #472]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	061b      	lsls	r3, r3, #24
 8005dc2:	4973      	ldr	r1, [pc, #460]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dc8:	e040      	b.n	8005e4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d023      	beq.n	8005e1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dd2:	4b6f      	ldr	r3, [pc, #444]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a6e      	ldr	r2, [pc, #440]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dde:	f7fe f855 	bl	8003e8c <HAL_GetTick>
 8005de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005de4:	e008      	b.n	8005df8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005de6:	f7fe f851 	bl	8003e8c <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e21d      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005df8:	4b65      	ldr	r3, [pc, #404]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0f0      	beq.n	8005de6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e04:	4b62      	ldr	r3, [pc, #392]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	061b      	lsls	r3, r3, #24
 8005e12:	495f      	ldr	r1, [pc, #380]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	604b      	str	r3, [r1, #4]
 8005e18:	e018      	b.n	8005e4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e1a:	4b5d      	ldr	r3, [pc, #372]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a5c      	ldr	r2, [pc, #368]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005e20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e26:	f7fe f831 	bl	8003e8c <HAL_GetTick>
 8005e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e2c:	e008      	b.n	8005e40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e2e:	f7fe f82d 	bl	8003e8c <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d901      	bls.n	8005e40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e1f9      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e40:	4b53      	ldr	r3, [pc, #332]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1f0      	bne.n	8005e2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d03c      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d01c      	beq.n	8005e9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e60:	4b4b      	ldr	r3, [pc, #300]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e66:	4a4a      	ldr	r2, [pc, #296]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005e68:	f043 0301 	orr.w	r3, r3, #1
 8005e6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e70:	f7fe f80c 	bl	8003e8c <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e78:	f7fe f808 	bl	8003e8c <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e1d4      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e8a:	4b41      	ldr	r3, [pc, #260]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0ef      	beq.n	8005e78 <HAL_RCC_OscConfig+0x3ec>
 8005e98:	e01b      	b.n	8005ed2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e9a:	4b3d      	ldr	r3, [pc, #244]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ea0:	4a3b      	ldr	r2, [pc, #236]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005ea2:	f023 0301 	bic.w	r3, r3, #1
 8005ea6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eaa:	f7fd ffef 	bl	8003e8c <HAL_GetTick>
 8005eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005eb0:	e008      	b.n	8005ec4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eb2:	f7fd ffeb 	bl	8003e8c <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e1b7      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ec4:	4b32      	ldr	r3, [pc, #200]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1ef      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0304 	and.w	r3, r3, #4
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 80a6 	beq.w	800602c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005ee4:	4b2a      	ldr	r3, [pc, #168]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ee8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10d      	bne.n	8005f0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ef0:	4b27      	ldr	r3, [pc, #156]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef4:	4a26      	ldr	r2, [pc, #152]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005efa:	6593      	str	r3, [r2, #88]	@ 0x58
 8005efc:	4b24      	ldr	r3, [pc, #144]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f0c:	4b21      	ldr	r3, [pc, #132]	@ (8005f94 <HAL_RCC_OscConfig+0x508>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d118      	bne.n	8005f4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f18:	4b1e      	ldr	r3, [pc, #120]	@ (8005f94 <HAL_RCC_OscConfig+0x508>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005f94 <HAL_RCC_OscConfig+0x508>)
 8005f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f24:	f7fd ffb2 	bl	8003e8c <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f2a:	e008      	b.n	8005f3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f2c:	f7fd ffae 	bl	8003e8c <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e17a      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f3e:	4b15      	ldr	r3, [pc, #84]	@ (8005f94 <HAL_RCC_OscConfig+0x508>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d0f0      	beq.n	8005f2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d108      	bne.n	8005f64 <HAL_RCC_OscConfig+0x4d8>
 8005f52:	4b0f      	ldr	r3, [pc, #60]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f58:	4a0d      	ldr	r2, [pc, #52]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005f5a:	f043 0301 	orr.w	r3, r3, #1
 8005f5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f62:	e029      	b.n	8005fb8 <HAL_RCC_OscConfig+0x52c>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2b05      	cmp	r3, #5
 8005f6a:	d115      	bne.n	8005f98 <HAL_RCC_OscConfig+0x50c>
 8005f6c:	4b08      	ldr	r3, [pc, #32]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f72:	4a07      	ldr	r2, [pc, #28]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005f74:	f043 0304 	orr.w	r3, r3, #4
 8005f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f7c:	4b04      	ldr	r3, [pc, #16]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f82:	4a03      	ldr	r2, [pc, #12]	@ (8005f90 <HAL_RCC_OscConfig+0x504>)
 8005f84:	f043 0301 	orr.w	r3, r3, #1
 8005f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f8c:	e014      	b.n	8005fb8 <HAL_RCC_OscConfig+0x52c>
 8005f8e:	bf00      	nop
 8005f90:	40021000 	.word	0x40021000
 8005f94:	40007000 	.word	0x40007000
 8005f98:	4b9c      	ldr	r3, [pc, #624]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 8005f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f9e:	4a9b      	ldr	r2, [pc, #620]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 8005fa0:	f023 0301 	bic.w	r3, r3, #1
 8005fa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005fa8:	4b98      	ldr	r3, [pc, #608]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 8005faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fae:	4a97      	ldr	r2, [pc, #604]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 8005fb0:	f023 0304 	bic.w	r3, r3, #4
 8005fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d016      	beq.n	8005fee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc0:	f7fd ff64 	bl	8003e8c <HAL_GetTick>
 8005fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fc6:	e00a      	b.n	8005fde <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fc8:	f7fd ff60 	bl	8003e8c <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e12a      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fde:	4b8b      	ldr	r3, [pc, #556]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 8005fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d0ed      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x53c>
 8005fec:	e015      	b.n	800601a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fee:	f7fd ff4d 	bl	8003e8c <HAL_GetTick>
 8005ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ff4:	e00a      	b.n	800600c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ff6:	f7fd ff49 	bl	8003e8c <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006004:	4293      	cmp	r3, r2
 8006006:	d901      	bls.n	800600c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e113      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800600c:	4b7f      	ldr	r3, [pc, #508]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 800600e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1ed      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800601a:	7ffb      	ldrb	r3, [r7, #31]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d105      	bne.n	800602c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006020:	4b7a      	ldr	r3, [pc, #488]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 8006022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006024:	4a79      	ldr	r2, [pc, #484]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 8006026:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800602a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 80fe 	beq.w	8006232 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603a:	2b02      	cmp	r3, #2
 800603c:	f040 80d0 	bne.w	80061e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006040:	4b72      	ldr	r3, [pc, #456]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f003 0203 	and.w	r2, r3, #3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006050:	429a      	cmp	r2, r3
 8006052:	d130      	bne.n	80060b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605e:	3b01      	subs	r3, #1
 8006060:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006062:	429a      	cmp	r2, r3
 8006064:	d127      	bne.n	80060b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006070:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006072:	429a      	cmp	r2, r3
 8006074:	d11f      	bne.n	80060b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006080:	2a07      	cmp	r2, #7
 8006082:	bf14      	ite	ne
 8006084:	2201      	movne	r2, #1
 8006086:	2200      	moveq	r2, #0
 8006088:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800608a:	4293      	cmp	r3, r2
 800608c:	d113      	bne.n	80060b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006098:	085b      	lsrs	r3, r3, #1
 800609a:	3b01      	subs	r3, #1
 800609c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800609e:	429a      	cmp	r2, r3
 80060a0:	d109      	bne.n	80060b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ac:	085b      	lsrs	r3, r3, #1
 80060ae:	3b01      	subs	r3, #1
 80060b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d06e      	beq.n	8006194 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	2b0c      	cmp	r3, #12
 80060ba:	d069      	beq.n	8006190 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80060bc:	4b53      	ldr	r3, [pc, #332]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d105      	bne.n	80060d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80060c8:	4b50      	ldr	r3, [pc, #320]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e0ad      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80060d8:	4b4c      	ldr	r3, [pc, #304]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a4b      	ldr	r2, [pc, #300]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 80060de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80060e4:	f7fd fed2 	bl	8003e8c <HAL_GetTick>
 80060e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060ea:	e008      	b.n	80060fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060ec:	f7fd fece 	bl	8003e8c <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e09a      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060fe:	4b43      	ldr	r3, [pc, #268]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1f0      	bne.n	80060ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800610a:	4b40      	ldr	r3, [pc, #256]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	4b40      	ldr	r3, [pc, #256]	@ (8006210 <HAL_RCC_OscConfig+0x784>)
 8006110:	4013      	ands	r3, r2
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800611a:	3a01      	subs	r2, #1
 800611c:	0112      	lsls	r2, r2, #4
 800611e:	4311      	orrs	r1, r2
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006124:	0212      	lsls	r2, r2, #8
 8006126:	4311      	orrs	r1, r2
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800612c:	0852      	lsrs	r2, r2, #1
 800612e:	3a01      	subs	r2, #1
 8006130:	0552      	lsls	r2, r2, #21
 8006132:	4311      	orrs	r1, r2
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006138:	0852      	lsrs	r2, r2, #1
 800613a:	3a01      	subs	r2, #1
 800613c:	0652      	lsls	r2, r2, #25
 800613e:	4311      	orrs	r1, r2
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006144:	0912      	lsrs	r2, r2, #4
 8006146:	0452      	lsls	r2, r2, #17
 8006148:	430a      	orrs	r2, r1
 800614a:	4930      	ldr	r1, [pc, #192]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 800614c:	4313      	orrs	r3, r2
 800614e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006150:	4b2e      	ldr	r3, [pc, #184]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a2d      	ldr	r2, [pc, #180]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 8006156:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800615a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800615c:	4b2b      	ldr	r3, [pc, #172]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	4a2a      	ldr	r2, [pc, #168]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 8006162:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006166:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006168:	f7fd fe90 	bl	8003e8c <HAL_GetTick>
 800616c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800616e:	e008      	b.n	8006182 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006170:	f7fd fe8c 	bl	8003e8c <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e058      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006182:	4b22      	ldr	r3, [pc, #136]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0f0      	beq.n	8006170 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800618e:	e050      	b.n	8006232 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e04f      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006194:	4b1d      	ldr	r3, [pc, #116]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d148      	bne.n	8006232 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80061a0:	4b1a      	ldr	r3, [pc, #104]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a19      	ldr	r2, [pc, #100]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 80061a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061ac:	4b17      	ldr	r3, [pc, #92]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	4a16      	ldr	r2, [pc, #88]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 80061b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80061b8:	f7fd fe68 	bl	8003e8c <HAL_GetTick>
 80061bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061c0:	f7fd fe64 	bl	8003e8c <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e030      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061d2:	4b0e      	ldr	r3, [pc, #56]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0f0      	beq.n	80061c0 <HAL_RCC_OscConfig+0x734>
 80061de:	e028      	b.n	8006232 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2b0c      	cmp	r3, #12
 80061e4:	d023      	beq.n	800622e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061e6:	4b09      	ldr	r3, [pc, #36]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a08      	ldr	r2, [pc, #32]	@ (800620c <HAL_RCC_OscConfig+0x780>)
 80061ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f2:	f7fd fe4b 	bl	8003e8c <HAL_GetTick>
 80061f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061f8:	e00c      	b.n	8006214 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061fa:	f7fd fe47 	bl	8003e8c <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b02      	cmp	r3, #2
 8006206:	d905      	bls.n	8006214 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e013      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
 800620c:	40021000 	.word	0x40021000
 8006210:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006214:	4b09      	ldr	r3, [pc, #36]	@ (800623c <HAL_RCC_OscConfig+0x7b0>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1ec      	bne.n	80061fa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006220:	4b06      	ldr	r3, [pc, #24]	@ (800623c <HAL_RCC_OscConfig+0x7b0>)
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	4905      	ldr	r1, [pc, #20]	@ (800623c <HAL_RCC_OscConfig+0x7b0>)
 8006226:	4b06      	ldr	r3, [pc, #24]	@ (8006240 <HAL_RCC_OscConfig+0x7b4>)
 8006228:	4013      	ands	r3, r2
 800622a:	60cb      	str	r3, [r1, #12]
 800622c:	e001      	b.n	8006232 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e000      	b.n	8006234 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3720      	adds	r7, #32
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	40021000 	.word	0x40021000
 8006240:	feeefffc 	.word	0xfeeefffc

08006244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e0e7      	b.n	8006428 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006258:	4b75      	ldr	r3, [pc, #468]	@ (8006430 <HAL_RCC_ClockConfig+0x1ec>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	429a      	cmp	r2, r3
 8006264:	d910      	bls.n	8006288 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006266:	4b72      	ldr	r3, [pc, #456]	@ (8006430 <HAL_RCC_ClockConfig+0x1ec>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f023 0207 	bic.w	r2, r3, #7
 800626e:	4970      	ldr	r1, [pc, #448]	@ (8006430 <HAL_RCC_ClockConfig+0x1ec>)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	4313      	orrs	r3, r2
 8006274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006276:	4b6e      	ldr	r3, [pc, #440]	@ (8006430 <HAL_RCC_ClockConfig+0x1ec>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0307 	and.w	r3, r3, #7
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	429a      	cmp	r2, r3
 8006282:	d001      	beq.n	8006288 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e0cf      	b.n	8006428 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d010      	beq.n	80062b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689a      	ldr	r2, [r3, #8]
 8006298:	4b66      	ldr	r3, [pc, #408]	@ (8006434 <HAL_RCC_ClockConfig+0x1f0>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d908      	bls.n	80062b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062a4:	4b63      	ldr	r3, [pc, #396]	@ (8006434 <HAL_RCC_ClockConfig+0x1f0>)
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	4960      	ldr	r1, [pc, #384]	@ (8006434 <HAL_RCC_ClockConfig+0x1f0>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d04c      	beq.n	800635c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d107      	bne.n	80062da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062ca:	4b5a      	ldr	r3, [pc, #360]	@ (8006434 <HAL_RCC_ClockConfig+0x1f0>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d121      	bne.n	800631a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e0a6      	b.n	8006428 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d107      	bne.n	80062f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062e2:	4b54      	ldr	r3, [pc, #336]	@ (8006434 <HAL_RCC_ClockConfig+0x1f0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d115      	bne.n	800631a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e09a      	b.n	8006428 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d107      	bne.n	800630a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062fa:	4b4e      	ldr	r3, [pc, #312]	@ (8006434 <HAL_RCC_ClockConfig+0x1f0>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d109      	bne.n	800631a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e08e      	b.n	8006428 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800630a:	4b4a      	ldr	r3, [pc, #296]	@ (8006434 <HAL_RCC_ClockConfig+0x1f0>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e086      	b.n	8006428 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800631a:	4b46      	ldr	r3, [pc, #280]	@ (8006434 <HAL_RCC_ClockConfig+0x1f0>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f023 0203 	bic.w	r2, r3, #3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	4943      	ldr	r1, [pc, #268]	@ (8006434 <HAL_RCC_ClockConfig+0x1f0>)
 8006328:	4313      	orrs	r3, r2
 800632a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800632c:	f7fd fdae 	bl	8003e8c <HAL_GetTick>
 8006330:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006332:	e00a      	b.n	800634a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006334:	f7fd fdaa 	bl	8003e8c <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006342:	4293      	cmp	r3, r2
 8006344:	d901      	bls.n	800634a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e06e      	b.n	8006428 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800634a:	4b3a      	ldr	r3, [pc, #232]	@ (8006434 <HAL_RCC_ClockConfig+0x1f0>)
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 020c 	and.w	r2, r3, #12
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	429a      	cmp	r2, r3
 800635a:	d1eb      	bne.n	8006334 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d010      	beq.n	800638a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	4b31      	ldr	r3, [pc, #196]	@ (8006434 <HAL_RCC_ClockConfig+0x1f0>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006374:	429a      	cmp	r2, r3
 8006376:	d208      	bcs.n	800638a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006378:	4b2e      	ldr	r3, [pc, #184]	@ (8006434 <HAL_RCC_ClockConfig+0x1f0>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	492b      	ldr	r1, [pc, #172]	@ (8006434 <HAL_RCC_ClockConfig+0x1f0>)
 8006386:	4313      	orrs	r3, r2
 8006388:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800638a:	4b29      	ldr	r3, [pc, #164]	@ (8006430 <HAL_RCC_ClockConfig+0x1ec>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0307 	and.w	r3, r3, #7
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	429a      	cmp	r2, r3
 8006396:	d210      	bcs.n	80063ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006398:	4b25      	ldr	r3, [pc, #148]	@ (8006430 <HAL_RCC_ClockConfig+0x1ec>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f023 0207 	bic.w	r2, r3, #7
 80063a0:	4923      	ldr	r1, [pc, #140]	@ (8006430 <HAL_RCC_ClockConfig+0x1ec>)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063a8:	4b21      	ldr	r3, [pc, #132]	@ (8006430 <HAL_RCC_ClockConfig+0x1ec>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0307 	and.w	r3, r3, #7
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d001      	beq.n	80063ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e036      	b.n	8006428 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0304 	and.w	r3, r3, #4
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d008      	beq.n	80063d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006434 <HAL_RCC_ClockConfig+0x1f0>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	4918      	ldr	r1, [pc, #96]	@ (8006434 <HAL_RCC_ClockConfig+0x1f0>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0308 	and.w	r3, r3, #8
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d009      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063e4:	4b13      	ldr	r3, [pc, #76]	@ (8006434 <HAL_RCC_ClockConfig+0x1f0>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	00db      	lsls	r3, r3, #3
 80063f2:	4910      	ldr	r1, [pc, #64]	@ (8006434 <HAL_RCC_ClockConfig+0x1f0>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063f8:	f000 f824 	bl	8006444 <HAL_RCC_GetSysClockFreq>
 80063fc:	4602      	mov	r2, r0
 80063fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006434 <HAL_RCC_ClockConfig+0x1f0>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	091b      	lsrs	r3, r3, #4
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	490b      	ldr	r1, [pc, #44]	@ (8006438 <HAL_RCC_ClockConfig+0x1f4>)
 800640a:	5ccb      	ldrb	r3, [r1, r3]
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	fa22 f303 	lsr.w	r3, r2, r3
 8006414:	4a09      	ldr	r2, [pc, #36]	@ (800643c <HAL_RCC_ClockConfig+0x1f8>)
 8006416:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006418:	4b09      	ldr	r3, [pc, #36]	@ (8006440 <HAL_RCC_ClockConfig+0x1fc>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4618      	mov	r0, r3
 800641e:	f7fc fe6f 	bl	8003100 <HAL_InitTick>
 8006422:	4603      	mov	r3, r0
 8006424:	72fb      	strb	r3, [r7, #11]

  return status;
 8006426:	7afb      	ldrb	r3, [r7, #11]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	40022000 	.word	0x40022000
 8006434:	40021000 	.word	0x40021000
 8006438:	0800e7dc 	.word	0x0800e7dc
 800643c:	2000001c 	.word	0x2000001c
 8006440:	20000064 	.word	0x20000064

08006444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006444:	b480      	push	{r7}
 8006446:	b089      	sub	sp, #36	@ 0x24
 8006448:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	61fb      	str	r3, [r7, #28]
 800644e:	2300      	movs	r3, #0
 8006450:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006452:	4b3e      	ldr	r3, [pc, #248]	@ (800654c <HAL_RCC_GetSysClockFreq+0x108>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f003 030c 	and.w	r3, r3, #12
 800645a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800645c:	4b3b      	ldr	r3, [pc, #236]	@ (800654c <HAL_RCC_GetSysClockFreq+0x108>)
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	f003 0303 	and.w	r3, r3, #3
 8006464:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d005      	beq.n	8006478 <HAL_RCC_GetSysClockFreq+0x34>
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	2b0c      	cmp	r3, #12
 8006470:	d121      	bne.n	80064b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d11e      	bne.n	80064b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006478:	4b34      	ldr	r3, [pc, #208]	@ (800654c <HAL_RCC_GetSysClockFreq+0x108>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	2b00      	cmp	r3, #0
 8006482:	d107      	bne.n	8006494 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006484:	4b31      	ldr	r3, [pc, #196]	@ (800654c <HAL_RCC_GetSysClockFreq+0x108>)
 8006486:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800648a:	0a1b      	lsrs	r3, r3, #8
 800648c:	f003 030f 	and.w	r3, r3, #15
 8006490:	61fb      	str	r3, [r7, #28]
 8006492:	e005      	b.n	80064a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006494:	4b2d      	ldr	r3, [pc, #180]	@ (800654c <HAL_RCC_GetSysClockFreq+0x108>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	091b      	lsrs	r3, r3, #4
 800649a:	f003 030f 	and.w	r3, r3, #15
 800649e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80064a0:	4a2b      	ldr	r2, [pc, #172]	@ (8006550 <HAL_RCC_GetSysClockFreq+0x10c>)
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10d      	bne.n	80064cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80064b4:	e00a      	b.n	80064cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	2b04      	cmp	r3, #4
 80064ba:	d102      	bne.n	80064c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80064bc:	4b25      	ldr	r3, [pc, #148]	@ (8006554 <HAL_RCC_GetSysClockFreq+0x110>)
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	e004      	b.n	80064cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d101      	bne.n	80064cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80064c8:	4b23      	ldr	r3, [pc, #140]	@ (8006558 <HAL_RCC_GetSysClockFreq+0x114>)
 80064ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	2b0c      	cmp	r3, #12
 80064d0:	d134      	bne.n	800653c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064d2:	4b1e      	ldr	r3, [pc, #120]	@ (800654c <HAL_RCC_GetSysClockFreq+0x108>)
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f003 0303 	and.w	r3, r3, #3
 80064da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d003      	beq.n	80064ea <HAL_RCC_GetSysClockFreq+0xa6>
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b03      	cmp	r3, #3
 80064e6:	d003      	beq.n	80064f0 <HAL_RCC_GetSysClockFreq+0xac>
 80064e8:	e005      	b.n	80064f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80064ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006554 <HAL_RCC_GetSysClockFreq+0x110>)
 80064ec:	617b      	str	r3, [r7, #20]
      break;
 80064ee:	e005      	b.n	80064fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80064f0:	4b19      	ldr	r3, [pc, #100]	@ (8006558 <HAL_RCC_GetSysClockFreq+0x114>)
 80064f2:	617b      	str	r3, [r7, #20]
      break;
 80064f4:	e002      	b.n	80064fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	617b      	str	r3, [r7, #20]
      break;
 80064fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064fc:	4b13      	ldr	r3, [pc, #76]	@ (800654c <HAL_RCC_GetSysClockFreq+0x108>)
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	091b      	lsrs	r3, r3, #4
 8006502:	f003 0307 	and.w	r3, r3, #7
 8006506:	3301      	adds	r3, #1
 8006508:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800650a:	4b10      	ldr	r3, [pc, #64]	@ (800654c <HAL_RCC_GetSysClockFreq+0x108>)
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	0a1b      	lsrs	r3, r3, #8
 8006510:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	fb03 f202 	mul.w	r2, r3, r2
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006520:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006522:	4b0a      	ldr	r3, [pc, #40]	@ (800654c <HAL_RCC_GetSysClockFreq+0x108>)
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	0e5b      	lsrs	r3, r3, #25
 8006528:	f003 0303 	and.w	r3, r3, #3
 800652c:	3301      	adds	r3, #1
 800652e:	005b      	lsls	r3, r3, #1
 8006530:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	fbb2 f3f3 	udiv	r3, r2, r3
 800653a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800653c:	69bb      	ldr	r3, [r7, #24]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3724      	adds	r7, #36	@ 0x24
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40021000 	.word	0x40021000
 8006550:	0800e7f4 	.word	0x0800e7f4
 8006554:	00f42400 	.word	0x00f42400
 8006558:	007a1200 	.word	0x007a1200

0800655c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800655c:	b480      	push	{r7}
 800655e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006560:	4b03      	ldr	r3, [pc, #12]	@ (8006570 <HAL_RCC_GetHCLKFreq+0x14>)
 8006562:	681b      	ldr	r3, [r3, #0]
}
 8006564:	4618      	mov	r0, r3
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	2000001c 	.word	0x2000001c

08006574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006578:	f7ff fff0 	bl	800655c <HAL_RCC_GetHCLKFreq>
 800657c:	4602      	mov	r2, r0
 800657e:	4b06      	ldr	r3, [pc, #24]	@ (8006598 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	0a1b      	lsrs	r3, r3, #8
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	4904      	ldr	r1, [pc, #16]	@ (800659c <HAL_RCC_GetPCLK1Freq+0x28>)
 800658a:	5ccb      	ldrb	r3, [r1, r3]
 800658c:	f003 031f 	and.w	r3, r3, #31
 8006590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006594:	4618      	mov	r0, r3
 8006596:	bd80      	pop	{r7, pc}
 8006598:	40021000 	.word	0x40021000
 800659c:	0800e7ec 	.word	0x0800e7ec

080065a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80065a4:	f7ff ffda 	bl	800655c <HAL_RCC_GetHCLKFreq>
 80065a8:	4602      	mov	r2, r0
 80065aa:	4b06      	ldr	r3, [pc, #24]	@ (80065c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	0adb      	lsrs	r3, r3, #11
 80065b0:	f003 0307 	and.w	r3, r3, #7
 80065b4:	4904      	ldr	r1, [pc, #16]	@ (80065c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80065b6:	5ccb      	ldrb	r3, [r1, r3]
 80065b8:	f003 031f 	and.w	r3, r3, #31
 80065bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	40021000 	.word	0x40021000
 80065c8:	0800e7ec 	.word	0x0800e7ec

080065cc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	220f      	movs	r2, #15
 80065da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80065dc:	4b12      	ldr	r3, [pc, #72]	@ (8006628 <HAL_RCC_GetClockConfig+0x5c>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f003 0203 	and.w	r2, r3, #3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80065e8:	4b0f      	ldr	r3, [pc, #60]	@ (8006628 <HAL_RCC_GetClockConfig+0x5c>)
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80065f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006628 <HAL_RCC_GetClockConfig+0x5c>)
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006600:	4b09      	ldr	r3, [pc, #36]	@ (8006628 <HAL_RCC_GetClockConfig+0x5c>)
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	08db      	lsrs	r3, r3, #3
 8006606:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800660e:	4b07      	ldr	r3, [pc, #28]	@ (800662c <HAL_RCC_GetClockConfig+0x60>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0207 	and.w	r2, r3, #7
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	601a      	str	r2, [r3, #0]
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	40021000 	.word	0x40021000
 800662c:	40022000 	.word	0x40022000

08006630 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006638:	2300      	movs	r3, #0
 800663a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800663c:	4b2a      	ldr	r3, [pc, #168]	@ (80066e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800663e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006648:	f7ff f8f0 	bl	800582c <HAL_PWREx_GetVoltageRange>
 800664c:	6178      	str	r0, [r7, #20]
 800664e:	e014      	b.n	800667a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006650:	4b25      	ldr	r3, [pc, #148]	@ (80066e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006654:	4a24      	ldr	r2, [pc, #144]	@ (80066e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800665a:	6593      	str	r3, [r2, #88]	@ 0x58
 800665c:	4b22      	ldr	r3, [pc, #136]	@ (80066e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800665e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006668:	f7ff f8e0 	bl	800582c <HAL_PWREx_GetVoltageRange>
 800666c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800666e:	4b1e      	ldr	r3, [pc, #120]	@ (80066e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006672:	4a1d      	ldr	r2, [pc, #116]	@ (80066e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006674:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006678:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006680:	d10b      	bne.n	800669a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b80      	cmp	r3, #128	@ 0x80
 8006686:	d919      	bls.n	80066bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2ba0      	cmp	r3, #160	@ 0xa0
 800668c:	d902      	bls.n	8006694 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800668e:	2302      	movs	r3, #2
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	e013      	b.n	80066bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006694:	2301      	movs	r3, #1
 8006696:	613b      	str	r3, [r7, #16]
 8006698:	e010      	b.n	80066bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b80      	cmp	r3, #128	@ 0x80
 800669e:	d902      	bls.n	80066a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80066a0:	2303      	movs	r3, #3
 80066a2:	613b      	str	r3, [r7, #16]
 80066a4:	e00a      	b.n	80066bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b80      	cmp	r3, #128	@ 0x80
 80066aa:	d102      	bne.n	80066b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80066ac:	2302      	movs	r3, #2
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	e004      	b.n	80066bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b70      	cmp	r3, #112	@ 0x70
 80066b6:	d101      	bne.n	80066bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80066b8:	2301      	movs	r3, #1
 80066ba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80066bc:	4b0b      	ldr	r3, [pc, #44]	@ (80066ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f023 0207 	bic.w	r2, r3, #7
 80066c4:	4909      	ldr	r1, [pc, #36]	@ (80066ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80066cc:	4b07      	ldr	r3, [pc, #28]	@ (80066ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d001      	beq.n	80066de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e000      	b.n	80066e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40021000 	.word	0x40021000
 80066ec:	40022000 	.word	0x40022000

080066f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066f8:	2300      	movs	r3, #0
 80066fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066fc:	2300      	movs	r3, #0
 80066fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006708:	2b00      	cmp	r3, #0
 800670a:	d041      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006710:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006714:	d02a      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006716:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800671a:	d824      	bhi.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800671c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006720:	d008      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006722:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006726:	d81e      	bhi.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800672c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006730:	d010      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006732:	e018      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006734:	4b86      	ldr	r3, [pc, #536]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	4a85      	ldr	r2, [pc, #532]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800673a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800673e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006740:	e015      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3304      	adds	r3, #4
 8006746:	2100      	movs	r1, #0
 8006748:	4618      	mov	r0, r3
 800674a:	f000 facb 	bl	8006ce4 <RCCEx_PLLSAI1_Config>
 800674e:	4603      	mov	r3, r0
 8006750:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006752:	e00c      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3320      	adds	r3, #32
 8006758:	2100      	movs	r1, #0
 800675a:	4618      	mov	r0, r3
 800675c:	f000 fbb6 	bl	8006ecc <RCCEx_PLLSAI2_Config>
 8006760:	4603      	mov	r3, r0
 8006762:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006764:	e003      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	74fb      	strb	r3, [r7, #19]
      break;
 800676a:	e000      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800676c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800676e:	7cfb      	ldrb	r3, [r7, #19]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10b      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006774:	4b76      	ldr	r3, [pc, #472]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800677a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006782:	4973      	ldr	r1, [pc, #460]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006784:	4313      	orrs	r3, r2
 8006786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800678a:	e001      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678c:	7cfb      	ldrb	r3, [r7, #19]
 800678e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d041      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80067a4:	d02a      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80067a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80067aa:	d824      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80067ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067b0:	d008      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80067b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067b6:	d81e      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80067bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067c0:	d010      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80067c2:	e018      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80067c4:	4b62      	ldr	r3, [pc, #392]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	4a61      	ldr	r2, [pc, #388]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067d0:	e015      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3304      	adds	r3, #4
 80067d6:	2100      	movs	r1, #0
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 fa83 	bl	8006ce4 <RCCEx_PLLSAI1_Config>
 80067de:	4603      	mov	r3, r0
 80067e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067e2:	e00c      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3320      	adds	r3, #32
 80067e8:	2100      	movs	r1, #0
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fb6e 	bl	8006ecc <RCCEx_PLLSAI2_Config>
 80067f0:	4603      	mov	r3, r0
 80067f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80067f4:	e003      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	74fb      	strb	r3, [r7, #19]
      break;
 80067fa:	e000      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80067fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067fe:	7cfb      	ldrb	r3, [r7, #19]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10b      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006804:	4b52      	ldr	r3, [pc, #328]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800680a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006812:	494f      	ldr	r1, [pc, #316]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006814:	4313      	orrs	r3, r2
 8006816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800681a:	e001      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681c:	7cfb      	ldrb	r3, [r7, #19]
 800681e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 80a0 	beq.w	800696e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800682e:	2300      	movs	r3, #0
 8006830:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006832:	4b47      	ldr	r3, [pc, #284]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800683e:	2301      	movs	r3, #1
 8006840:	e000      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006842:	2300      	movs	r3, #0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00d      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006848:	4b41      	ldr	r3, [pc, #260]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800684a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800684c:	4a40      	ldr	r2, [pc, #256]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800684e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006852:	6593      	str	r3, [r2, #88]	@ 0x58
 8006854:	4b3e      	ldr	r3, [pc, #248]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800685c:	60bb      	str	r3, [r7, #8]
 800685e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006860:	2301      	movs	r3, #1
 8006862:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006864:	4b3b      	ldr	r3, [pc, #236]	@ (8006954 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a3a      	ldr	r2, [pc, #232]	@ (8006954 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800686a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800686e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006870:	f7fd fb0c 	bl	8003e8c <HAL_GetTick>
 8006874:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006876:	e009      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006878:	f7fd fb08 	bl	8003e8c <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d902      	bls.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	74fb      	strb	r3, [r7, #19]
        break;
 800688a:	e005      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800688c:	4b31      	ldr	r3, [pc, #196]	@ (8006954 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006894:	2b00      	cmp	r3, #0
 8006896:	d0ef      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006898:	7cfb      	ldrb	r3, [r7, #19]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d15c      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800689e:	4b2c      	ldr	r3, [pc, #176]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01f      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d019      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068bc:	4b24      	ldr	r3, [pc, #144]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068c8:	4b21      	ldr	r3, [pc, #132]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ce:	4a20      	ldr	r2, [pc, #128]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068de:	4a1c      	ldr	r2, [pc, #112]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068e8:	4a19      	ldr	r2, [pc, #100]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d016      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068fa:	f7fd fac7 	bl	8003e8c <HAL_GetTick>
 80068fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006900:	e00b      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006902:	f7fd fac3 	bl	8003e8c <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006910:	4293      	cmp	r3, r2
 8006912:	d902      	bls.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	74fb      	strb	r3, [r7, #19]
            break;
 8006918:	e006      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800691a:	4b0d      	ldr	r3, [pc, #52]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800691c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d0ec      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006928:	7cfb      	ldrb	r3, [r7, #19]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10c      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800692e:	4b08      	ldr	r3, [pc, #32]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006934:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800693e:	4904      	ldr	r1, [pc, #16]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006940:	4313      	orrs	r3, r2
 8006942:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006946:	e009      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006948:	7cfb      	ldrb	r3, [r7, #19]
 800694a:	74bb      	strb	r3, [r7, #18]
 800694c:	e006      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800694e:	bf00      	nop
 8006950:	40021000 	.word	0x40021000
 8006954:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006958:	7cfb      	ldrb	r3, [r7, #19]
 800695a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800695c:	7c7b      	ldrb	r3, [r7, #17]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d105      	bne.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006962:	4b9e      	ldr	r3, [pc, #632]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006966:	4a9d      	ldr	r2, [pc, #628]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006968:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800696c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00a      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800697a:	4b98      	ldr	r3, [pc, #608]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800697c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006980:	f023 0203 	bic.w	r2, r3, #3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006988:	4994      	ldr	r1, [pc, #592]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800698a:	4313      	orrs	r3, r2
 800698c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00a      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800699c:	4b8f      	ldr	r3, [pc, #572]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800699e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069a2:	f023 020c 	bic.w	r2, r3, #12
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069aa:	498c      	ldr	r1, [pc, #560]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0304 	and.w	r3, r3, #4
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00a      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069be:	4b87      	ldr	r3, [pc, #540]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069cc:	4983      	ldr	r1, [pc, #524]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0308 	and.w	r3, r3, #8
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00a      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80069e0:	4b7e      	ldr	r3, [pc, #504]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ee:	497b      	ldr	r1, [pc, #492]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0310 	and.w	r3, r3, #16
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00a      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a02:	4b76      	ldr	r3, [pc, #472]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a10:	4972      	ldr	r1, [pc, #456]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00a      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a24:	4b6d      	ldr	r3, [pc, #436]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a2a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a32:	496a      	ldr	r1, [pc, #424]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a46:	4b65      	ldr	r3, [pc, #404]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a54:	4961      	ldr	r1, [pc, #388]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00a      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a68:	4b5c      	ldr	r3, [pc, #368]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a76:	4959      	ldr	r1, [pc, #356]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a8a:	4b54      	ldr	r3, [pc, #336]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a90:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a98:	4950      	ldr	r1, [pc, #320]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00a      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006aac:	4b4b      	ldr	r3, [pc, #300]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ab2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aba:	4948      	ldr	r1, [pc, #288]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00a      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ace:	4b43      	ldr	r3, [pc, #268]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006adc:	493f      	ldr	r1, [pc, #252]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d028      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006af0:	4b3a      	ldr	r3, [pc, #232]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006afe:	4937      	ldr	r1, [pc, #220]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b0e:	d106      	bne.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b10:	4b32      	ldr	r3, [pc, #200]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	4a31      	ldr	r2, [pc, #196]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b1a:	60d3      	str	r3, [r2, #12]
 8006b1c:	e011      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b26:	d10c      	bne.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 f8d8 	bl	8006ce4 <RCCEx_PLLSAI1_Config>
 8006b34:	4603      	mov	r3, r0
 8006b36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006b38:	7cfb      	ldrb	r3, [r7, #19]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006b3e:	7cfb      	ldrb	r3, [r7, #19]
 8006b40:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d028      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006b4e:	4b23      	ldr	r3, [pc, #140]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b54:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b5c:	491f      	ldr	r1, [pc, #124]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b6c:	d106      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	4a1a      	ldr	r2, [pc, #104]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b78:	60d3      	str	r3, [r2, #12]
 8006b7a:	e011      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b84:	d10c      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	3304      	adds	r3, #4
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 f8a9 	bl	8006ce4 <RCCEx_PLLSAI1_Config>
 8006b92:	4603      	mov	r3, r0
 8006b94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b96:	7cfb      	ldrb	r3, [r7, #19]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006b9c:	7cfb      	ldrb	r3, [r7, #19]
 8006b9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d02b      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bac:	4b0b      	ldr	r3, [pc, #44]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bba:	4908      	ldr	r1, [pc, #32]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bca:	d109      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bcc:	4b03      	ldr	r3, [pc, #12]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	4a02      	ldr	r2, [pc, #8]	@ (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bd6:	60d3      	str	r3, [r2, #12]
 8006bd8:	e014      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006bda:	bf00      	nop
 8006bdc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006be4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006be8:	d10c      	bne.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3304      	adds	r3, #4
 8006bee:	2101      	movs	r1, #1
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 f877 	bl	8006ce4 <RCCEx_PLLSAI1_Config>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006bfa:	7cfb      	ldrb	r3, [r7, #19]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006c00:	7cfb      	ldrb	r3, [r7, #19]
 8006c02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d02f      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c10:	4b2b      	ldr	r3, [pc, #172]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c16:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c1e:	4928      	ldr	r1, [pc, #160]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c2e:	d10d      	bne.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	3304      	adds	r3, #4
 8006c34:	2102      	movs	r1, #2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 f854 	bl	8006ce4 <RCCEx_PLLSAI1_Config>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c40:	7cfb      	ldrb	r3, [r7, #19]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d014      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006c46:	7cfb      	ldrb	r3, [r7, #19]
 8006c48:	74bb      	strb	r3, [r7, #18]
 8006c4a:	e011      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c54:	d10c      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	3320      	adds	r3, #32
 8006c5a:	2102      	movs	r1, #2
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 f935 	bl	8006ecc <RCCEx_PLLSAI2_Config>
 8006c62:	4603      	mov	r3, r0
 8006c64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c66:	7cfb      	ldrb	r3, [r7, #19]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006c6c:	7cfb      	ldrb	r3, [r7, #19]
 8006c6e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00a      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c7c:	4b10      	ldr	r3, [pc, #64]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c82:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c8a:	490d      	ldr	r1, [pc, #52]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00b      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c9e:	4b08      	ldr	r3, [pc, #32]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ca4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cae:	4904      	ldr	r1, [pc, #16]	@ (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006cb6:	7cbb      	ldrb	r3, [r7, #18]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	40021000 	.word	0x40021000

08006cc4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006cc8:	4b05      	ldr	r3, [pc, #20]	@ (8006ce0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a04      	ldr	r2, [pc, #16]	@ (8006ce0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006cce:	f043 0304 	orr.w	r3, r3, #4
 8006cd2:	6013      	str	r3, [r2, #0]
}
 8006cd4:	bf00      	nop
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	40021000 	.word	0x40021000

08006ce4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006cf2:	4b75      	ldr	r3, [pc, #468]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f003 0303 	and.w	r3, r3, #3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d018      	beq.n	8006d30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006cfe:	4b72      	ldr	r3, [pc, #456]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	f003 0203 	and.w	r2, r3, #3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d10d      	bne.n	8006d2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
       ||
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d009      	beq.n	8006d2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006d16:	4b6c      	ldr	r3, [pc, #432]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	091b      	lsrs	r3, r3, #4
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
       ||
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d047      	beq.n	8006dba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	73fb      	strb	r3, [r7, #15]
 8006d2e:	e044      	b.n	8006dba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	d018      	beq.n	8006d6a <RCCEx_PLLSAI1_Config+0x86>
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d825      	bhi.n	8006d88 <RCCEx_PLLSAI1_Config+0xa4>
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d002      	beq.n	8006d46 <RCCEx_PLLSAI1_Config+0x62>
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d009      	beq.n	8006d58 <RCCEx_PLLSAI1_Config+0x74>
 8006d44:	e020      	b.n	8006d88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d46:	4b60      	ldr	r3, [pc, #384]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d11d      	bne.n	8006d8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d56:	e01a      	b.n	8006d8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d58:	4b5b      	ldr	r3, [pc, #364]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d116      	bne.n	8006d92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d68:	e013      	b.n	8006d92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d6a:	4b57      	ldr	r3, [pc, #348]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10f      	bne.n	8006d96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d76:	4b54      	ldr	r3, [pc, #336]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d109      	bne.n	8006d96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d86:	e006      	b.n	8006d96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d8c:	e004      	b.n	8006d98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d8e:	bf00      	nop
 8006d90:	e002      	b.n	8006d98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d92:	bf00      	nop
 8006d94:	e000      	b.n	8006d98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d96:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10d      	bne.n	8006dba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006d9e:	4b4a      	ldr	r3, [pc, #296]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6819      	ldr	r1, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	011b      	lsls	r3, r3, #4
 8006db2:	430b      	orrs	r3, r1
 8006db4:	4944      	ldr	r1, [pc, #272]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d17d      	bne.n	8006ebc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006dc0:	4b41      	ldr	r3, [pc, #260]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a40      	ldr	r2, [pc, #256]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006dca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dcc:	f7fd f85e 	bl	8003e8c <HAL_GetTick>
 8006dd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006dd2:	e009      	b.n	8006de8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006dd4:	f7fd f85a 	bl	8003e8c <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d902      	bls.n	8006de8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	73fb      	strb	r3, [r7, #15]
        break;
 8006de6:	e005      	b.n	8006df4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006de8:	4b37      	ldr	r3, [pc, #220]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1ef      	bne.n	8006dd4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d160      	bne.n	8006ebc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d111      	bne.n	8006e24 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e00:	4b31      	ldr	r3, [pc, #196]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006e08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	6892      	ldr	r2, [r2, #8]
 8006e10:	0211      	lsls	r1, r2, #8
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	68d2      	ldr	r2, [r2, #12]
 8006e16:	0912      	lsrs	r2, r2, #4
 8006e18:	0452      	lsls	r2, r2, #17
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	492a      	ldr	r1, [pc, #168]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	610b      	str	r3, [r1, #16]
 8006e22:	e027      	b.n	8006e74 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d112      	bne.n	8006e50 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e2a:	4b27      	ldr	r3, [pc, #156]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006e32:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	6892      	ldr	r2, [r2, #8]
 8006e3a:	0211      	lsls	r1, r2, #8
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6912      	ldr	r2, [r2, #16]
 8006e40:	0852      	lsrs	r2, r2, #1
 8006e42:	3a01      	subs	r2, #1
 8006e44:	0552      	lsls	r2, r2, #21
 8006e46:	430a      	orrs	r2, r1
 8006e48:	491f      	ldr	r1, [pc, #124]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	610b      	str	r3, [r1, #16]
 8006e4e:	e011      	b.n	8006e74 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006e50:	4b1d      	ldr	r3, [pc, #116]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006e58:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	6892      	ldr	r2, [r2, #8]
 8006e60:	0211      	lsls	r1, r2, #8
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	6952      	ldr	r2, [r2, #20]
 8006e66:	0852      	lsrs	r2, r2, #1
 8006e68:	3a01      	subs	r2, #1
 8006e6a:	0652      	lsls	r2, r2, #25
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	4916      	ldr	r1, [pc, #88]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006e74:	4b14      	ldr	r3, [pc, #80]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a13      	ldr	r2, [pc, #76]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e80:	f7fd f804 	bl	8003e8c <HAL_GetTick>
 8006e84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e86:	e009      	b.n	8006e9c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e88:	f7fd f800 	bl	8003e8c <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d902      	bls.n	8006e9c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	73fb      	strb	r3, [r7, #15]
          break;
 8006e9a:	e005      	b.n	8006ea8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d0ef      	beq.n	8006e88 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d106      	bne.n	8006ebc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006eae:	4b06      	ldr	r3, [pc, #24]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006eb0:	691a      	ldr	r2, [r3, #16]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	4904      	ldr	r1, [pc, #16]	@ (8006ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	40021000 	.word	0x40021000

08006ecc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006eda:	4b6a      	ldr	r3, [pc, #424]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d018      	beq.n	8006f18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006ee6:	4b67      	ldr	r3, [pc, #412]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	f003 0203 	and.w	r2, r3, #3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d10d      	bne.n	8006f12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
       ||
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d009      	beq.n	8006f12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006efe:	4b61      	ldr	r3, [pc, #388]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	091b      	lsrs	r3, r3, #4
 8006f04:	f003 0307 	and.w	r3, r3, #7
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
       ||
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d047      	beq.n	8006fa2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	73fb      	strb	r3, [r7, #15]
 8006f16:	e044      	b.n	8006fa2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d018      	beq.n	8006f52 <RCCEx_PLLSAI2_Config+0x86>
 8006f20:	2b03      	cmp	r3, #3
 8006f22:	d825      	bhi.n	8006f70 <RCCEx_PLLSAI2_Config+0xa4>
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d002      	beq.n	8006f2e <RCCEx_PLLSAI2_Config+0x62>
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d009      	beq.n	8006f40 <RCCEx_PLLSAI2_Config+0x74>
 8006f2c:	e020      	b.n	8006f70 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006f2e:	4b55      	ldr	r3, [pc, #340]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d11d      	bne.n	8006f76 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f3e:	e01a      	b.n	8006f76 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006f40:	4b50      	ldr	r3, [pc, #320]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d116      	bne.n	8006f7a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f50:	e013      	b.n	8006f7a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006f52:	4b4c      	ldr	r3, [pc, #304]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10f      	bne.n	8006f7e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006f5e:	4b49      	ldr	r3, [pc, #292]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d109      	bne.n	8006f7e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f6e:	e006      	b.n	8006f7e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	73fb      	strb	r3, [r7, #15]
      break;
 8006f74:	e004      	b.n	8006f80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006f76:	bf00      	nop
 8006f78:	e002      	b.n	8006f80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006f7a:	bf00      	nop
 8006f7c:	e000      	b.n	8006f80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006f7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10d      	bne.n	8006fa2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006f86:	4b3f      	ldr	r3, [pc, #252]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6819      	ldr	r1, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	011b      	lsls	r3, r3, #4
 8006f9a:	430b      	orrs	r3, r1
 8006f9c:	4939      	ldr	r1, [pc, #228]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d167      	bne.n	8007078 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006fa8:	4b36      	ldr	r3, [pc, #216]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a35      	ldr	r2, [pc, #212]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fb4:	f7fc ff6a 	bl	8003e8c <HAL_GetTick>
 8006fb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006fba:	e009      	b.n	8006fd0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006fbc:	f7fc ff66 	bl	8003e8c <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d902      	bls.n	8006fd0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	73fb      	strb	r3, [r7, #15]
        break;
 8006fce:	e005      	b.n	8006fdc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006fd0:	4b2c      	ldr	r3, [pc, #176]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1ef      	bne.n	8006fbc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d14a      	bne.n	8007078 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d111      	bne.n	800700c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006fe8:	4b26      	ldr	r3, [pc, #152]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	6892      	ldr	r2, [r2, #8]
 8006ff8:	0211      	lsls	r1, r2, #8
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	68d2      	ldr	r2, [r2, #12]
 8006ffe:	0912      	lsrs	r2, r2, #4
 8007000:	0452      	lsls	r2, r2, #17
 8007002:	430a      	orrs	r2, r1
 8007004:	491f      	ldr	r1, [pc, #124]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007006:	4313      	orrs	r3, r2
 8007008:	614b      	str	r3, [r1, #20]
 800700a:	e011      	b.n	8007030 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800700c:	4b1d      	ldr	r3, [pc, #116]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007014:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6892      	ldr	r2, [r2, #8]
 800701c:	0211      	lsls	r1, r2, #8
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	6912      	ldr	r2, [r2, #16]
 8007022:	0852      	lsrs	r2, r2, #1
 8007024:	3a01      	subs	r2, #1
 8007026:	0652      	lsls	r2, r2, #25
 8007028:	430a      	orrs	r2, r1
 800702a:	4916      	ldr	r1, [pc, #88]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 800702c:	4313      	orrs	r3, r2
 800702e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007030:	4b14      	ldr	r3, [pc, #80]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a13      	ldr	r2, [pc, #76]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800703a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800703c:	f7fc ff26 	bl	8003e8c <HAL_GetTick>
 8007040:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007042:	e009      	b.n	8007058 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007044:	f7fc ff22 	bl	8003e8c <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	2b02      	cmp	r3, #2
 8007050:	d902      	bls.n	8007058 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	73fb      	strb	r3, [r7, #15]
          break;
 8007056:	e005      	b.n	8007064 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007058:	4b0a      	ldr	r3, [pc, #40]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0ef      	beq.n	8007044 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d106      	bne.n	8007078 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800706a:	4b06      	ldr	r3, [pc, #24]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 800706c:	695a      	ldr	r2, [r3, #20]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	4904      	ldr	r1, [pc, #16]	@ (8007084 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007074:	4313      	orrs	r3, r2
 8007076:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007078:	7bfb      	ldrb	r3, [r7, #15]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	40021000 	.word	0x40021000

08007088 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e095      	b.n	80071c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d108      	bne.n	80070b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070aa:	d009      	beq.n	80070c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	61da      	str	r2, [r3, #28]
 80070b2:	e005      	b.n	80070c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d106      	bne.n	80070e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f877 	bl	80071ce <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007100:	d902      	bls.n	8007108 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	e002      	b.n	800710e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007108:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800710c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007116:	d007      	beq.n	8007128 <HAL_SPI_Init+0xa0>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007120:	d002      	beq.n	8007128 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007138:	431a      	orrs	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	431a      	orrs	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	431a      	orrs	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007156:	431a      	orrs	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007160:	431a      	orrs	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800716a:	ea42 0103 	orr.w	r1, r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007172:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	0c1b      	lsrs	r3, r3, #16
 8007184:	f003 0204 	and.w	r2, r3, #4
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718c:	f003 0310 	and.w	r3, r3, #16
 8007190:	431a      	orrs	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007196:	f003 0308 	and.w	r3, r3, #8
 800719a:	431a      	orrs	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80071a4:	ea42 0103 	orr.w	r1, r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b083      	sub	sp, #12
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b08a      	sub	sp, #40	@ 0x28
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	607a      	str	r2, [r7, #4]
 80071ee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071f0:	2301      	movs	r3, #1
 80071f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071f4:	f7fc fe4a 	bl	8003e8c <HAL_GetTick>
 80071f8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007200:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007208:	887b      	ldrh	r3, [r7, #2]
 800720a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800720c:	887b      	ldrh	r3, [r7, #2]
 800720e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007210:	7ffb      	ldrb	r3, [r7, #31]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d00c      	beq.n	8007230 <HAL_SPI_TransmitReceive+0x4e>
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800721c:	d106      	bne.n	800722c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d102      	bne.n	800722c <HAL_SPI_TransmitReceive+0x4a>
 8007226:	7ffb      	ldrb	r3, [r7, #31]
 8007228:	2b04      	cmp	r3, #4
 800722a:	d001      	beq.n	8007230 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800722c:	2302      	movs	r3, #2
 800722e:	e1f3      	b.n	8007618 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d005      	beq.n	8007242 <HAL_SPI_TransmitReceive+0x60>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <HAL_SPI_TransmitReceive+0x60>
 800723c:	887b      	ldrh	r3, [r7, #2]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e1e8      	b.n	8007618 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800724c:	2b01      	cmp	r3, #1
 800724e:	d101      	bne.n	8007254 <HAL_SPI_TransmitReceive+0x72>
 8007250:	2302      	movs	r3, #2
 8007252:	e1e1      	b.n	8007618 <HAL_SPI_TransmitReceive+0x436>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b04      	cmp	r3, #4
 8007266:	d003      	beq.n	8007270 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2205      	movs	r2, #5
 800726c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	887a      	ldrh	r2, [r7, #2]
 8007280:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	887a      	ldrh	r2, [r7, #2]
 8007288:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	887a      	ldrh	r2, [r7, #2]
 8007296:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	887a      	ldrh	r2, [r7, #2]
 800729c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80072b2:	d802      	bhi.n	80072ba <HAL_SPI_TransmitReceive+0xd8>
 80072b4:	8abb      	ldrh	r3, [r7, #20]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d908      	bls.n	80072cc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	685a      	ldr	r2, [r3, #4]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80072c8:	605a      	str	r2, [r3, #4]
 80072ca:	e007      	b.n	80072dc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685a      	ldr	r2, [r3, #4]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072da:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e6:	2b40      	cmp	r3, #64	@ 0x40
 80072e8:	d007      	beq.n	80072fa <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007302:	f240 8083 	bls.w	800740c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d002      	beq.n	8007314 <HAL_SPI_TransmitReceive+0x132>
 800730e:	8afb      	ldrh	r3, [r7, #22]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d16f      	bne.n	80073f4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007318:	881a      	ldrh	r2, [r3, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007324:	1c9a      	adds	r2, r3, #2
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800732e:	b29b      	uxth	r3, r3
 8007330:	3b01      	subs	r3, #1
 8007332:	b29a      	uxth	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007338:	e05c      	b.n	80073f4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	2b02      	cmp	r3, #2
 8007346:	d11b      	bne.n	8007380 <HAL_SPI_TransmitReceive+0x19e>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800734c:	b29b      	uxth	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d016      	beq.n	8007380 <HAL_SPI_TransmitReceive+0x19e>
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	2b01      	cmp	r3, #1
 8007356:	d113      	bne.n	8007380 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735c:	881a      	ldrh	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007368:	1c9a      	adds	r2, r3, #2
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007372:	b29b      	uxth	r3, r3
 8007374:	3b01      	subs	r3, #1
 8007376:	b29a      	uxth	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800737c:	2300      	movs	r3, #0
 800737e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b01      	cmp	r3, #1
 800738c:	d11c      	bne.n	80073c8 <HAL_SPI_TransmitReceive+0x1e6>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007394:	b29b      	uxth	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d016      	beq.n	80073c8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68da      	ldr	r2, [r3, #12]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a4:	b292      	uxth	r2, r2
 80073a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ac:	1c9a      	adds	r2, r3, #2
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	3b01      	subs	r3, #1
 80073bc:	b29a      	uxth	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073c4:	2301      	movs	r3, #1
 80073c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80073c8:	f7fc fd60 	bl	8003e8c <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d80d      	bhi.n	80073f4 <HAL_SPI_TransmitReceive+0x212>
 80073d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073de:	d009      	beq.n	80073f4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e111      	b.n	8007618 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d19d      	bne.n	800733a <HAL_SPI_TransmitReceive+0x158>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007404:	b29b      	uxth	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d197      	bne.n	800733a <HAL_SPI_TransmitReceive+0x158>
 800740a:	e0e5      	b.n	80075d8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d003      	beq.n	800741c <HAL_SPI_TransmitReceive+0x23a>
 8007414:	8afb      	ldrh	r3, [r7, #22]
 8007416:	2b01      	cmp	r3, #1
 8007418:	f040 80d1 	bne.w	80075be <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b01      	cmp	r3, #1
 8007424:	d912      	bls.n	800744c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742a:	881a      	ldrh	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007436:	1c9a      	adds	r2, r3, #2
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007440:	b29b      	uxth	r3, r3
 8007442:	3b02      	subs	r3, #2
 8007444:	b29a      	uxth	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800744a:	e0b8      	b.n	80075be <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	330c      	adds	r3, #12
 8007456:	7812      	ldrb	r2, [r2, #0]
 8007458:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007468:	b29b      	uxth	r3, r3
 800746a:	3b01      	subs	r3, #1
 800746c:	b29a      	uxth	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007472:	e0a4      	b.n	80075be <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 0302 	and.w	r3, r3, #2
 800747e:	2b02      	cmp	r3, #2
 8007480:	d134      	bne.n	80074ec <HAL_SPI_TransmitReceive+0x30a>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007486:	b29b      	uxth	r3, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	d02f      	beq.n	80074ec <HAL_SPI_TransmitReceive+0x30a>
 800748c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748e:	2b01      	cmp	r3, #1
 8007490:	d12c      	bne.n	80074ec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007496:	b29b      	uxth	r3, r3
 8007498:	2b01      	cmp	r3, #1
 800749a:	d912      	bls.n	80074c2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a0:	881a      	ldrh	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ac:	1c9a      	adds	r2, r3, #2
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	3b02      	subs	r3, #2
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80074c0:	e012      	b.n	80074e8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	330c      	adds	r3, #12
 80074cc:	7812      	ldrb	r2, [r2, #0]
 80074ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d4:	1c5a      	adds	r2, r3, #1
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074de:	b29b      	uxth	r3, r3
 80074e0:	3b01      	subs	r3, #1
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074e8:	2300      	movs	r3, #0
 80074ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d148      	bne.n	800758c <HAL_SPI_TransmitReceive+0x3aa>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007500:	b29b      	uxth	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d042      	beq.n	800758c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800750c:	b29b      	uxth	r3, r3
 800750e:	2b01      	cmp	r3, #1
 8007510:	d923      	bls.n	800755a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68da      	ldr	r2, [r3, #12]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751c:	b292      	uxth	r2, r2
 800751e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007524:	1c9a      	adds	r2, r3, #2
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007530:	b29b      	uxth	r3, r3
 8007532:	3b02      	subs	r3, #2
 8007534:	b29a      	uxth	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007542:	b29b      	uxth	r3, r3
 8007544:	2b01      	cmp	r3, #1
 8007546:	d81f      	bhi.n	8007588 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007556:	605a      	str	r2, [r3, #4]
 8007558:	e016      	b.n	8007588 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f103 020c 	add.w	r2, r3, #12
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007566:	7812      	ldrb	r2, [r2, #0]
 8007568:	b2d2      	uxtb	r2, r2
 800756a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800757c:	b29b      	uxth	r3, r3
 800757e:	3b01      	subs	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007588:	2301      	movs	r3, #1
 800758a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800758c:	f7fc fc7e 	bl	8003e8c <HAL_GetTick>
 8007590:	4602      	mov	r2, r0
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007598:	429a      	cmp	r2, r3
 800759a:	d803      	bhi.n	80075a4 <HAL_SPI_TransmitReceive+0x3c2>
 800759c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a2:	d102      	bne.n	80075aa <HAL_SPI_TransmitReceive+0x3c8>
 80075a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d109      	bne.n	80075be <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e02c      	b.n	8007618 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f47f af55 	bne.w	8007474 <HAL_SPI_TransmitReceive+0x292>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f47f af4e 	bne.w	8007474 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075d8:	6a3a      	ldr	r2, [r7, #32]
 80075da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f000 f94b 	bl	8007878 <SPI_EndRxTxTransaction>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d008      	beq.n	80075fa <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2220      	movs	r2, #32
 80075ec:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e00e      	b.n	8007618 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800760e:	2b00      	cmp	r3, #0
 8007610:	d001      	beq.n	8007616 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e000      	b.n	8007618 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8007616:	2300      	movs	r3, #0
  }
}
 8007618:	4618      	mov	r0, r3
 800761a:	3728      	adds	r7, #40	@ 0x28
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800762e:	b2db      	uxtb	r3, r3
}
 8007630:	4618      	mov	r0, r3
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b088      	sub	sp, #32
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	603b      	str	r3, [r7, #0]
 8007648:	4613      	mov	r3, r2
 800764a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800764c:	f7fc fc1e 	bl	8003e8c <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007654:	1a9b      	subs	r3, r3, r2
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	4413      	add	r3, r2
 800765a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800765c:	f7fc fc16 	bl	8003e8c <HAL_GetTick>
 8007660:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007662:	4b39      	ldr	r3, [pc, #228]	@ (8007748 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	015b      	lsls	r3, r3, #5
 8007668:	0d1b      	lsrs	r3, r3, #20
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	fb02 f303 	mul.w	r3, r2, r3
 8007670:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007672:	e054      	b.n	800771e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767a:	d050      	beq.n	800771e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800767c:	f7fc fc06 	bl	8003e8c <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	69fa      	ldr	r2, [r7, #28]
 8007688:	429a      	cmp	r2, r3
 800768a:	d902      	bls.n	8007692 <SPI_WaitFlagStateUntilTimeout+0x56>
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d13d      	bne.n	800770e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80076a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076aa:	d111      	bne.n	80076d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076b4:	d004      	beq.n	80076c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076be:	d107      	bne.n	80076d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076d8:	d10f      	bne.n	80076fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e017      	b.n	800773e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	3b01      	subs	r3, #1
 800771c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	689a      	ldr	r2, [r3, #8]
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	4013      	ands	r3, r2
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	429a      	cmp	r2, r3
 800772c:	bf0c      	ite	eq
 800772e:	2301      	moveq	r3, #1
 8007730:	2300      	movne	r3, #0
 8007732:	b2db      	uxtb	r3, r3
 8007734:	461a      	mov	r2, r3
 8007736:	79fb      	ldrb	r3, [r7, #7]
 8007738:	429a      	cmp	r2, r3
 800773a:	d19b      	bne.n	8007674 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3720      	adds	r7, #32
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	2000001c 	.word	0x2000001c

0800774c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08a      	sub	sp, #40	@ 0x28
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
 8007758:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800775a:	2300      	movs	r3, #0
 800775c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800775e:	f7fc fb95 	bl	8003e8c <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007766:	1a9b      	subs	r3, r3, r2
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	4413      	add	r3, r2
 800776c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800776e:	f7fc fb8d 	bl	8003e8c <HAL_GetTick>
 8007772:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	330c      	adds	r3, #12
 800777a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800777c:	4b3d      	ldr	r3, [pc, #244]	@ (8007874 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	4613      	mov	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	00da      	lsls	r2, r3, #3
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	0d1b      	lsrs	r3, r3, #20
 800778c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800778e:	fb02 f303 	mul.w	r3, r2, r3
 8007792:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007794:	e060      	b.n	8007858 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800779c:	d107      	bne.n	80077ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d104      	bne.n	80077ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80077ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b4:	d050      	beq.n	8007858 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077b6:	f7fc fb69 	bl	8003e8c <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	6a3b      	ldr	r3, [r7, #32]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d902      	bls.n	80077cc <SPI_WaitFifoStateUntilTimeout+0x80>
 80077c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d13d      	bne.n	8007848 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80077da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077e4:	d111      	bne.n	800780a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077ee:	d004      	beq.n	80077fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077f8:	d107      	bne.n	800780a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007808:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800780e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007812:	d10f      	bne.n	8007834 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007832:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e010      	b.n	800786a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	3b01      	subs	r3, #1
 8007856:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689a      	ldr	r2, [r3, #8]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	4013      	ands	r3, r2
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	429a      	cmp	r2, r3
 8007866:	d196      	bne.n	8007796 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3728      	adds	r7, #40	@ 0x28
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	2000001c 	.word	0x2000001c

08007878 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b086      	sub	sp, #24
 800787c:	af02      	add	r7, sp, #8
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2200      	movs	r2, #0
 800788c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f7ff ff5b 	bl	800774c <SPI_WaitFifoStateUntilTimeout>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d007      	beq.n	80078ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078a0:	f043 0220 	orr.w	r2, r3, #32
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e027      	b.n	80078fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	2200      	movs	r2, #0
 80078b4:	2180      	movs	r1, #128	@ 0x80
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f7ff fec0 	bl	800763c <SPI_WaitFlagStateUntilTimeout>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d007      	beq.n	80078d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078c6:	f043 0220 	orr.w	r2, r3, #32
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e014      	b.n	80078fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	2200      	movs	r2, #0
 80078da:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f7ff ff34 	bl	800774c <SPI_WaitFifoStateUntilTimeout>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d007      	beq.n	80078fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078ee:	f043 0220 	orr.w	r2, r3, #32
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e000      	b.n	80078fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e049      	b.n	80079aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d106      	bne.n	8007930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f841 	bl	80079b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	3304      	adds	r3, #4
 8007940:	4619      	mov	r1, r3
 8007942:	4610      	mov	r0, r2
 8007944:	f000 f9e0 	bl	8007d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80079ba:	bf00      	nop
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
	...

080079c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d001      	beq.n	80079e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e04f      	b.n	8007a80 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2202      	movs	r2, #2
 80079e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68da      	ldr	r2, [r3, #12]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f042 0201 	orr.w	r2, r2, #1
 80079f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a23      	ldr	r2, [pc, #140]	@ (8007a8c <HAL_TIM_Base_Start_IT+0xc4>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d01d      	beq.n	8007a3e <HAL_TIM_Base_Start_IT+0x76>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a0a:	d018      	beq.n	8007a3e <HAL_TIM_Base_Start_IT+0x76>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a1f      	ldr	r2, [pc, #124]	@ (8007a90 <HAL_TIM_Base_Start_IT+0xc8>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d013      	beq.n	8007a3e <HAL_TIM_Base_Start_IT+0x76>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8007a94 <HAL_TIM_Base_Start_IT+0xcc>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d00e      	beq.n	8007a3e <HAL_TIM_Base_Start_IT+0x76>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a1c      	ldr	r2, [pc, #112]	@ (8007a98 <HAL_TIM_Base_Start_IT+0xd0>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d009      	beq.n	8007a3e <HAL_TIM_Base_Start_IT+0x76>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a1b      	ldr	r2, [pc, #108]	@ (8007a9c <HAL_TIM_Base_Start_IT+0xd4>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d004      	beq.n	8007a3e <HAL_TIM_Base_Start_IT+0x76>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a19      	ldr	r2, [pc, #100]	@ (8007aa0 <HAL_TIM_Base_Start_IT+0xd8>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d115      	bne.n	8007a6a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689a      	ldr	r2, [r3, #8]
 8007a44:	4b17      	ldr	r3, [pc, #92]	@ (8007aa4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007a46:	4013      	ands	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2b06      	cmp	r3, #6
 8007a4e:	d015      	beq.n	8007a7c <HAL_TIM_Base_Start_IT+0xb4>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a56:	d011      	beq.n	8007a7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f042 0201 	orr.w	r2, r2, #1
 8007a66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a68:	e008      	b.n	8007a7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f042 0201 	orr.w	r2, r2, #1
 8007a78:	601a      	str	r2, [r3, #0]
 8007a7a:	e000      	b.n	8007a7e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	40012c00 	.word	0x40012c00
 8007a90:	40000400 	.word	0x40000400
 8007a94:	40000800 	.word	0x40000800
 8007a98:	40000c00 	.word	0x40000c00
 8007a9c:	40013400 	.word	0x40013400
 8007aa0:	40014000 	.word	0x40014000
 8007aa4:	00010007 	.word	0x00010007

08007aa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d020      	beq.n	8007b0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f003 0302 	and.w	r3, r3, #2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d01b      	beq.n	8007b0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f06f 0202 	mvn.w	r2, #2
 8007adc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	f003 0303 	and.w	r3, r3, #3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d003      	beq.n	8007afa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f8e9 	bl	8007cca <HAL_TIM_IC_CaptureCallback>
 8007af8:	e005      	b.n	8007b06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f8db 	bl	8007cb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f8ec 	bl	8007cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f003 0304 	and.w	r3, r3, #4
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d020      	beq.n	8007b58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f003 0304 	and.w	r3, r3, #4
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d01b      	beq.n	8007b58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f06f 0204 	mvn.w	r2, #4
 8007b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2202      	movs	r2, #2
 8007b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f8c3 	bl	8007cca <HAL_TIM_IC_CaptureCallback>
 8007b44:	e005      	b.n	8007b52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f8b5 	bl	8007cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f8c6 	bl	8007cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	f003 0308 	and.w	r3, r3, #8
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d020      	beq.n	8007ba4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f003 0308 	and.w	r3, r3, #8
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d01b      	beq.n	8007ba4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f06f 0208 	mvn.w	r2, #8
 8007b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2204      	movs	r2, #4
 8007b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	f003 0303 	and.w	r3, r3, #3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f89d 	bl	8007cca <HAL_TIM_IC_CaptureCallback>
 8007b90:	e005      	b.n	8007b9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f88f 	bl	8007cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f8a0 	bl	8007cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	f003 0310 	and.w	r3, r3, #16
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d020      	beq.n	8007bf0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f003 0310 	and.w	r3, r3, #16
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01b      	beq.n	8007bf0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f06f 0210 	mvn.w	r2, #16
 8007bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2208      	movs	r2, #8
 8007bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d003      	beq.n	8007bde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f877 	bl	8007cca <HAL_TIM_IC_CaptureCallback>
 8007bdc:	e005      	b.n	8007bea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f869 	bl	8007cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f87a 	bl	8007cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00c      	beq.n	8007c14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f003 0301 	and.w	r3, r3, #1
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d007      	beq.n	8007c14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f06f 0201 	mvn.w	r2, #1
 8007c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7fa ffcc 	bl	8002bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d104      	bne.n	8007c28 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00c      	beq.n	8007c42 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d007      	beq.n	8007c42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f913 	bl	8007e68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00c      	beq.n	8007c66 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d007      	beq.n	8007c66 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f90b 	bl	8007e7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00c      	beq.n	8007c8a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d007      	beq.n	8007c8a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f834 	bl	8007cf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	f003 0320 	and.w	r3, r3, #32
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00c      	beq.n	8007cae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f003 0320 	and.w	r3, r3, #32
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d007      	beq.n	8007cae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f06f 0220 	mvn.w	r2, #32
 8007ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f8d3 	bl	8007e54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cae:	bf00      	nop
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b083      	sub	sp, #12
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cd2:	bf00      	nop
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b083      	sub	sp, #12
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ce6:	bf00      	nop
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b083      	sub	sp, #12
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cfa:	bf00      	nop
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
	...

08007d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a46      	ldr	r2, [pc, #280]	@ (8007e34 <TIM_Base_SetConfig+0x12c>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d013      	beq.n	8007d48 <TIM_Base_SetConfig+0x40>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d26:	d00f      	beq.n	8007d48 <TIM_Base_SetConfig+0x40>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a43      	ldr	r2, [pc, #268]	@ (8007e38 <TIM_Base_SetConfig+0x130>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d00b      	beq.n	8007d48 <TIM_Base_SetConfig+0x40>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a42      	ldr	r2, [pc, #264]	@ (8007e3c <TIM_Base_SetConfig+0x134>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d007      	beq.n	8007d48 <TIM_Base_SetConfig+0x40>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a41      	ldr	r2, [pc, #260]	@ (8007e40 <TIM_Base_SetConfig+0x138>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d003      	beq.n	8007d48 <TIM_Base_SetConfig+0x40>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a40      	ldr	r2, [pc, #256]	@ (8007e44 <TIM_Base_SetConfig+0x13c>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d108      	bne.n	8007d5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a35      	ldr	r2, [pc, #212]	@ (8007e34 <TIM_Base_SetConfig+0x12c>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d01f      	beq.n	8007da2 <TIM_Base_SetConfig+0x9a>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d68:	d01b      	beq.n	8007da2 <TIM_Base_SetConfig+0x9a>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a32      	ldr	r2, [pc, #200]	@ (8007e38 <TIM_Base_SetConfig+0x130>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d017      	beq.n	8007da2 <TIM_Base_SetConfig+0x9a>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a31      	ldr	r2, [pc, #196]	@ (8007e3c <TIM_Base_SetConfig+0x134>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d013      	beq.n	8007da2 <TIM_Base_SetConfig+0x9a>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a30      	ldr	r2, [pc, #192]	@ (8007e40 <TIM_Base_SetConfig+0x138>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d00f      	beq.n	8007da2 <TIM_Base_SetConfig+0x9a>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a2f      	ldr	r2, [pc, #188]	@ (8007e44 <TIM_Base_SetConfig+0x13c>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d00b      	beq.n	8007da2 <TIM_Base_SetConfig+0x9a>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a2e      	ldr	r2, [pc, #184]	@ (8007e48 <TIM_Base_SetConfig+0x140>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d007      	beq.n	8007da2 <TIM_Base_SetConfig+0x9a>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a2d      	ldr	r2, [pc, #180]	@ (8007e4c <TIM_Base_SetConfig+0x144>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d003      	beq.n	8007da2 <TIM_Base_SetConfig+0x9a>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a2c      	ldr	r2, [pc, #176]	@ (8007e50 <TIM_Base_SetConfig+0x148>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d108      	bne.n	8007db4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a16      	ldr	r2, [pc, #88]	@ (8007e34 <TIM_Base_SetConfig+0x12c>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d00f      	beq.n	8007e00 <TIM_Base_SetConfig+0xf8>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a18      	ldr	r2, [pc, #96]	@ (8007e44 <TIM_Base_SetConfig+0x13c>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d00b      	beq.n	8007e00 <TIM_Base_SetConfig+0xf8>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a17      	ldr	r2, [pc, #92]	@ (8007e48 <TIM_Base_SetConfig+0x140>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d007      	beq.n	8007e00 <TIM_Base_SetConfig+0xf8>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a16      	ldr	r2, [pc, #88]	@ (8007e4c <TIM_Base_SetConfig+0x144>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d003      	beq.n	8007e00 <TIM_Base_SetConfig+0xf8>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a15      	ldr	r2, [pc, #84]	@ (8007e50 <TIM_Base_SetConfig+0x148>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d103      	bne.n	8007e08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	691a      	ldr	r2, [r3, #16]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d105      	bne.n	8007e26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	f023 0201 	bic.w	r2, r3, #1
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	611a      	str	r2, [r3, #16]
  }
}
 8007e26:	bf00      	nop
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	40012c00 	.word	0x40012c00
 8007e38:	40000400 	.word	0x40000400
 8007e3c:	40000800 	.word	0x40000800
 8007e40:	40000c00 	.word	0x40000c00
 8007e44:	40013400 	.word	0x40013400
 8007e48:	40014000 	.word	0x40014000
 8007e4c:	40014400 	.word	0x40014400
 8007e50:	40014800 	.word	0x40014800

08007e54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e040      	b.n	8007f24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d106      	bne.n	8007eb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7fa ffe4 	bl	8002e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2224      	movs	r2, #36	@ 0x24
 8007ebc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 0201 	bic.w	r2, r2, #1
 8007ecc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d002      	beq.n	8007edc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fb6a 	bl	80085b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f8af 	bl	8008040 <UART_SetConfig>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d101      	bne.n	8007eec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e01b      	b.n	8007f24 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007efa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689a      	ldr	r2, [r3, #8]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f042 0201 	orr.w	r2, r2, #1
 8007f1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fbe9 	bl	80086f4 <UART_CheckIdleState>
 8007f22:	4603      	mov	r3, r0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b08a      	sub	sp, #40	@ 0x28
 8007f30:	af02      	add	r7, sp, #8
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	603b      	str	r3, [r7, #0]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f40:	2b20      	cmp	r3, #32
 8007f42:	d177      	bne.n	8008034 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d002      	beq.n	8007f50 <HAL_UART_Transmit+0x24>
 8007f4a:	88fb      	ldrh	r3, [r7, #6]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e070      	b.n	8008036 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2221      	movs	r2, #33	@ 0x21
 8007f60:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f62:	f7fb ff93 	bl	8003e8c <HAL_GetTick>
 8007f66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	88fa      	ldrh	r2, [r7, #6]
 8007f6c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	88fa      	ldrh	r2, [r7, #6]
 8007f74:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f80:	d108      	bne.n	8007f94 <HAL_UART_Transmit+0x68>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d104      	bne.n	8007f94 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	61bb      	str	r3, [r7, #24]
 8007f92:	e003      	b.n	8007f9c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f9c:	e02f      	b.n	8007ffe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	2180      	movs	r1, #128	@ 0x80
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f000 fc4b 	bl	8008844 <UART_WaitOnFlagUntilTimeout>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d004      	beq.n	8007fbe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e03b      	b.n	8008036 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d10b      	bne.n	8007fdc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	881a      	ldrh	r2, [r3, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fd0:	b292      	uxth	r2, r2
 8007fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	3302      	adds	r3, #2
 8007fd8:	61bb      	str	r3, [r7, #24]
 8007fda:	e007      	b.n	8007fec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	781a      	ldrb	r2, [r3, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008004:	b29b      	uxth	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1c9      	bne.n	8007f9e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	2200      	movs	r2, #0
 8008012:	2140      	movs	r1, #64	@ 0x40
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f000 fc15 	bl	8008844 <UART_WaitOnFlagUntilTimeout>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d004      	beq.n	800802a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2220      	movs	r2, #32
 8008024:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	e005      	b.n	8008036 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2220      	movs	r2, #32
 800802e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	e000      	b.n	8008036 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008034:	2302      	movs	r3, #2
  }
}
 8008036:	4618      	mov	r0, r3
 8008038:	3720      	adds	r7, #32
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008044:	b08a      	sub	sp, #40	@ 0x28
 8008046:	af00      	add	r7, sp, #0
 8008048:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800804a:	2300      	movs	r3, #0
 800804c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	689a      	ldr	r2, [r3, #8]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	431a      	orrs	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	431a      	orrs	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	69db      	ldr	r3, [r3, #28]
 8008064:	4313      	orrs	r3, r2
 8008066:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	4ba4      	ldr	r3, [pc, #656]	@ (8008300 <UART_SetConfig+0x2c0>)
 8008070:	4013      	ands	r3, r2
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	6812      	ldr	r2, [r2, #0]
 8008076:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008078:	430b      	orrs	r3, r1
 800807a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	68da      	ldr	r2, [r3, #12]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	430a      	orrs	r2, r1
 8008090:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a99      	ldr	r2, [pc, #612]	@ (8008304 <UART_SetConfig+0x2c4>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d004      	beq.n	80080ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080a8:	4313      	orrs	r3, r2
 80080aa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080bc:	430a      	orrs	r2, r1
 80080be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a90      	ldr	r2, [pc, #576]	@ (8008308 <UART_SetConfig+0x2c8>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d126      	bne.n	8008118 <UART_SetConfig+0xd8>
 80080ca:	4b90      	ldr	r3, [pc, #576]	@ (800830c <UART_SetConfig+0x2cc>)
 80080cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080d0:	f003 0303 	and.w	r3, r3, #3
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d81b      	bhi.n	8008110 <UART_SetConfig+0xd0>
 80080d8:	a201      	add	r2, pc, #4	@ (adr r2, 80080e0 <UART_SetConfig+0xa0>)
 80080da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080de:	bf00      	nop
 80080e0:	080080f1 	.word	0x080080f1
 80080e4:	08008101 	.word	0x08008101
 80080e8:	080080f9 	.word	0x080080f9
 80080ec:	08008109 	.word	0x08008109
 80080f0:	2301      	movs	r3, #1
 80080f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080f6:	e116      	b.n	8008326 <UART_SetConfig+0x2e6>
 80080f8:	2302      	movs	r3, #2
 80080fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80080fe:	e112      	b.n	8008326 <UART_SetConfig+0x2e6>
 8008100:	2304      	movs	r3, #4
 8008102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008106:	e10e      	b.n	8008326 <UART_SetConfig+0x2e6>
 8008108:	2308      	movs	r3, #8
 800810a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800810e:	e10a      	b.n	8008326 <UART_SetConfig+0x2e6>
 8008110:	2310      	movs	r3, #16
 8008112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008116:	e106      	b.n	8008326 <UART_SetConfig+0x2e6>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a7c      	ldr	r2, [pc, #496]	@ (8008310 <UART_SetConfig+0x2d0>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d138      	bne.n	8008194 <UART_SetConfig+0x154>
 8008122:	4b7a      	ldr	r3, [pc, #488]	@ (800830c <UART_SetConfig+0x2cc>)
 8008124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008128:	f003 030c 	and.w	r3, r3, #12
 800812c:	2b0c      	cmp	r3, #12
 800812e:	d82d      	bhi.n	800818c <UART_SetConfig+0x14c>
 8008130:	a201      	add	r2, pc, #4	@ (adr r2, 8008138 <UART_SetConfig+0xf8>)
 8008132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008136:	bf00      	nop
 8008138:	0800816d 	.word	0x0800816d
 800813c:	0800818d 	.word	0x0800818d
 8008140:	0800818d 	.word	0x0800818d
 8008144:	0800818d 	.word	0x0800818d
 8008148:	0800817d 	.word	0x0800817d
 800814c:	0800818d 	.word	0x0800818d
 8008150:	0800818d 	.word	0x0800818d
 8008154:	0800818d 	.word	0x0800818d
 8008158:	08008175 	.word	0x08008175
 800815c:	0800818d 	.word	0x0800818d
 8008160:	0800818d 	.word	0x0800818d
 8008164:	0800818d 	.word	0x0800818d
 8008168:	08008185 	.word	0x08008185
 800816c:	2300      	movs	r3, #0
 800816e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008172:	e0d8      	b.n	8008326 <UART_SetConfig+0x2e6>
 8008174:	2302      	movs	r3, #2
 8008176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800817a:	e0d4      	b.n	8008326 <UART_SetConfig+0x2e6>
 800817c:	2304      	movs	r3, #4
 800817e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008182:	e0d0      	b.n	8008326 <UART_SetConfig+0x2e6>
 8008184:	2308      	movs	r3, #8
 8008186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800818a:	e0cc      	b.n	8008326 <UART_SetConfig+0x2e6>
 800818c:	2310      	movs	r3, #16
 800818e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008192:	e0c8      	b.n	8008326 <UART_SetConfig+0x2e6>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a5e      	ldr	r2, [pc, #376]	@ (8008314 <UART_SetConfig+0x2d4>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d125      	bne.n	80081ea <UART_SetConfig+0x1aa>
 800819e:	4b5b      	ldr	r3, [pc, #364]	@ (800830c <UART_SetConfig+0x2cc>)
 80081a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80081a8:	2b30      	cmp	r3, #48	@ 0x30
 80081aa:	d016      	beq.n	80081da <UART_SetConfig+0x19a>
 80081ac:	2b30      	cmp	r3, #48	@ 0x30
 80081ae:	d818      	bhi.n	80081e2 <UART_SetConfig+0x1a2>
 80081b0:	2b20      	cmp	r3, #32
 80081b2:	d00a      	beq.n	80081ca <UART_SetConfig+0x18a>
 80081b4:	2b20      	cmp	r3, #32
 80081b6:	d814      	bhi.n	80081e2 <UART_SetConfig+0x1a2>
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <UART_SetConfig+0x182>
 80081bc:	2b10      	cmp	r3, #16
 80081be:	d008      	beq.n	80081d2 <UART_SetConfig+0x192>
 80081c0:	e00f      	b.n	80081e2 <UART_SetConfig+0x1a2>
 80081c2:	2300      	movs	r3, #0
 80081c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081c8:	e0ad      	b.n	8008326 <UART_SetConfig+0x2e6>
 80081ca:	2302      	movs	r3, #2
 80081cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081d0:	e0a9      	b.n	8008326 <UART_SetConfig+0x2e6>
 80081d2:	2304      	movs	r3, #4
 80081d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081d8:	e0a5      	b.n	8008326 <UART_SetConfig+0x2e6>
 80081da:	2308      	movs	r3, #8
 80081dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081e0:	e0a1      	b.n	8008326 <UART_SetConfig+0x2e6>
 80081e2:	2310      	movs	r3, #16
 80081e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80081e8:	e09d      	b.n	8008326 <UART_SetConfig+0x2e6>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a4a      	ldr	r2, [pc, #296]	@ (8008318 <UART_SetConfig+0x2d8>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d125      	bne.n	8008240 <UART_SetConfig+0x200>
 80081f4:	4b45      	ldr	r3, [pc, #276]	@ (800830c <UART_SetConfig+0x2cc>)
 80081f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80081fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8008200:	d016      	beq.n	8008230 <UART_SetConfig+0x1f0>
 8008202:	2bc0      	cmp	r3, #192	@ 0xc0
 8008204:	d818      	bhi.n	8008238 <UART_SetConfig+0x1f8>
 8008206:	2b80      	cmp	r3, #128	@ 0x80
 8008208:	d00a      	beq.n	8008220 <UART_SetConfig+0x1e0>
 800820a:	2b80      	cmp	r3, #128	@ 0x80
 800820c:	d814      	bhi.n	8008238 <UART_SetConfig+0x1f8>
 800820e:	2b00      	cmp	r3, #0
 8008210:	d002      	beq.n	8008218 <UART_SetConfig+0x1d8>
 8008212:	2b40      	cmp	r3, #64	@ 0x40
 8008214:	d008      	beq.n	8008228 <UART_SetConfig+0x1e8>
 8008216:	e00f      	b.n	8008238 <UART_SetConfig+0x1f8>
 8008218:	2300      	movs	r3, #0
 800821a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800821e:	e082      	b.n	8008326 <UART_SetConfig+0x2e6>
 8008220:	2302      	movs	r3, #2
 8008222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008226:	e07e      	b.n	8008326 <UART_SetConfig+0x2e6>
 8008228:	2304      	movs	r3, #4
 800822a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800822e:	e07a      	b.n	8008326 <UART_SetConfig+0x2e6>
 8008230:	2308      	movs	r3, #8
 8008232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008236:	e076      	b.n	8008326 <UART_SetConfig+0x2e6>
 8008238:	2310      	movs	r3, #16
 800823a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800823e:	e072      	b.n	8008326 <UART_SetConfig+0x2e6>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a35      	ldr	r2, [pc, #212]	@ (800831c <UART_SetConfig+0x2dc>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d12a      	bne.n	80082a0 <UART_SetConfig+0x260>
 800824a:	4b30      	ldr	r3, [pc, #192]	@ (800830c <UART_SetConfig+0x2cc>)
 800824c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008250:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008254:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008258:	d01a      	beq.n	8008290 <UART_SetConfig+0x250>
 800825a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800825e:	d81b      	bhi.n	8008298 <UART_SetConfig+0x258>
 8008260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008264:	d00c      	beq.n	8008280 <UART_SetConfig+0x240>
 8008266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800826a:	d815      	bhi.n	8008298 <UART_SetConfig+0x258>
 800826c:	2b00      	cmp	r3, #0
 800826e:	d003      	beq.n	8008278 <UART_SetConfig+0x238>
 8008270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008274:	d008      	beq.n	8008288 <UART_SetConfig+0x248>
 8008276:	e00f      	b.n	8008298 <UART_SetConfig+0x258>
 8008278:	2300      	movs	r3, #0
 800827a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800827e:	e052      	b.n	8008326 <UART_SetConfig+0x2e6>
 8008280:	2302      	movs	r3, #2
 8008282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008286:	e04e      	b.n	8008326 <UART_SetConfig+0x2e6>
 8008288:	2304      	movs	r3, #4
 800828a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800828e:	e04a      	b.n	8008326 <UART_SetConfig+0x2e6>
 8008290:	2308      	movs	r3, #8
 8008292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008296:	e046      	b.n	8008326 <UART_SetConfig+0x2e6>
 8008298:	2310      	movs	r3, #16
 800829a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800829e:	e042      	b.n	8008326 <UART_SetConfig+0x2e6>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a17      	ldr	r2, [pc, #92]	@ (8008304 <UART_SetConfig+0x2c4>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d13a      	bne.n	8008320 <UART_SetConfig+0x2e0>
 80082aa:	4b18      	ldr	r3, [pc, #96]	@ (800830c <UART_SetConfig+0x2cc>)
 80082ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80082b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082b8:	d01a      	beq.n	80082f0 <UART_SetConfig+0x2b0>
 80082ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082be:	d81b      	bhi.n	80082f8 <UART_SetConfig+0x2b8>
 80082c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082c4:	d00c      	beq.n	80082e0 <UART_SetConfig+0x2a0>
 80082c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082ca:	d815      	bhi.n	80082f8 <UART_SetConfig+0x2b8>
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d003      	beq.n	80082d8 <UART_SetConfig+0x298>
 80082d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082d4:	d008      	beq.n	80082e8 <UART_SetConfig+0x2a8>
 80082d6:	e00f      	b.n	80082f8 <UART_SetConfig+0x2b8>
 80082d8:	2300      	movs	r3, #0
 80082da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082de:	e022      	b.n	8008326 <UART_SetConfig+0x2e6>
 80082e0:	2302      	movs	r3, #2
 80082e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082e6:	e01e      	b.n	8008326 <UART_SetConfig+0x2e6>
 80082e8:	2304      	movs	r3, #4
 80082ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082ee:	e01a      	b.n	8008326 <UART_SetConfig+0x2e6>
 80082f0:	2308      	movs	r3, #8
 80082f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082f6:	e016      	b.n	8008326 <UART_SetConfig+0x2e6>
 80082f8:	2310      	movs	r3, #16
 80082fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80082fe:	e012      	b.n	8008326 <UART_SetConfig+0x2e6>
 8008300:	efff69f3 	.word	0xefff69f3
 8008304:	40008000 	.word	0x40008000
 8008308:	40013800 	.word	0x40013800
 800830c:	40021000 	.word	0x40021000
 8008310:	40004400 	.word	0x40004400
 8008314:	40004800 	.word	0x40004800
 8008318:	40004c00 	.word	0x40004c00
 800831c:	40005000 	.word	0x40005000
 8008320:	2310      	movs	r3, #16
 8008322:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a9f      	ldr	r2, [pc, #636]	@ (80085a8 <UART_SetConfig+0x568>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d17a      	bne.n	8008426 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008330:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008334:	2b08      	cmp	r3, #8
 8008336:	d824      	bhi.n	8008382 <UART_SetConfig+0x342>
 8008338:	a201      	add	r2, pc, #4	@ (adr r2, 8008340 <UART_SetConfig+0x300>)
 800833a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833e:	bf00      	nop
 8008340:	08008365 	.word	0x08008365
 8008344:	08008383 	.word	0x08008383
 8008348:	0800836d 	.word	0x0800836d
 800834c:	08008383 	.word	0x08008383
 8008350:	08008373 	.word	0x08008373
 8008354:	08008383 	.word	0x08008383
 8008358:	08008383 	.word	0x08008383
 800835c:	08008383 	.word	0x08008383
 8008360:	0800837b 	.word	0x0800837b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008364:	f7fe f906 	bl	8006574 <HAL_RCC_GetPCLK1Freq>
 8008368:	61f8      	str	r0, [r7, #28]
        break;
 800836a:	e010      	b.n	800838e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800836c:	4b8f      	ldr	r3, [pc, #572]	@ (80085ac <UART_SetConfig+0x56c>)
 800836e:	61fb      	str	r3, [r7, #28]
        break;
 8008370:	e00d      	b.n	800838e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008372:	f7fe f867 	bl	8006444 <HAL_RCC_GetSysClockFreq>
 8008376:	61f8      	str	r0, [r7, #28]
        break;
 8008378:	e009      	b.n	800838e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800837a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800837e:	61fb      	str	r3, [r7, #28]
        break;
 8008380:	e005      	b.n	800838e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008382:	2300      	movs	r3, #0
 8008384:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800838c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 80fb 	beq.w	800858c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	4613      	mov	r3, r2
 800839c:	005b      	lsls	r3, r3, #1
 800839e:	4413      	add	r3, r2
 80083a0:	69fa      	ldr	r2, [r7, #28]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d305      	bcc.n	80083b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80083ac:	69fa      	ldr	r2, [r7, #28]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d903      	bls.n	80083ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80083b8:	e0e8      	b.n	800858c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	2200      	movs	r2, #0
 80083be:	461c      	mov	r4, r3
 80083c0:	4615      	mov	r5, r2
 80083c2:	f04f 0200 	mov.w	r2, #0
 80083c6:	f04f 0300 	mov.w	r3, #0
 80083ca:	022b      	lsls	r3, r5, #8
 80083cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80083d0:	0222      	lsls	r2, r4, #8
 80083d2:	68f9      	ldr	r1, [r7, #12]
 80083d4:	6849      	ldr	r1, [r1, #4]
 80083d6:	0849      	lsrs	r1, r1, #1
 80083d8:	2000      	movs	r0, #0
 80083da:	4688      	mov	r8, r1
 80083dc:	4681      	mov	r9, r0
 80083de:	eb12 0a08 	adds.w	sl, r2, r8
 80083e2:	eb43 0b09 	adc.w	fp, r3, r9
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	603b      	str	r3, [r7, #0]
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083f4:	4650      	mov	r0, sl
 80083f6:	4659      	mov	r1, fp
 80083f8:	f7f8 fc26 	bl	8000c48 <__aeabi_uldivmod>
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	4613      	mov	r3, r2
 8008402:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800840a:	d308      	bcc.n	800841e <UART_SetConfig+0x3de>
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008412:	d204      	bcs.n	800841e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	69ba      	ldr	r2, [r7, #24]
 800841a:	60da      	str	r2, [r3, #12]
 800841c:	e0b6      	b.n	800858c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008424:	e0b2      	b.n	800858c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800842e:	d15e      	bne.n	80084ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008430:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008434:	2b08      	cmp	r3, #8
 8008436:	d828      	bhi.n	800848a <UART_SetConfig+0x44a>
 8008438:	a201      	add	r2, pc, #4	@ (adr r2, 8008440 <UART_SetConfig+0x400>)
 800843a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843e:	bf00      	nop
 8008440:	08008465 	.word	0x08008465
 8008444:	0800846d 	.word	0x0800846d
 8008448:	08008475 	.word	0x08008475
 800844c:	0800848b 	.word	0x0800848b
 8008450:	0800847b 	.word	0x0800847b
 8008454:	0800848b 	.word	0x0800848b
 8008458:	0800848b 	.word	0x0800848b
 800845c:	0800848b 	.word	0x0800848b
 8008460:	08008483 	.word	0x08008483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008464:	f7fe f886 	bl	8006574 <HAL_RCC_GetPCLK1Freq>
 8008468:	61f8      	str	r0, [r7, #28]
        break;
 800846a:	e014      	b.n	8008496 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800846c:	f7fe f898 	bl	80065a0 <HAL_RCC_GetPCLK2Freq>
 8008470:	61f8      	str	r0, [r7, #28]
        break;
 8008472:	e010      	b.n	8008496 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008474:	4b4d      	ldr	r3, [pc, #308]	@ (80085ac <UART_SetConfig+0x56c>)
 8008476:	61fb      	str	r3, [r7, #28]
        break;
 8008478:	e00d      	b.n	8008496 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800847a:	f7fd ffe3 	bl	8006444 <HAL_RCC_GetSysClockFreq>
 800847e:	61f8      	str	r0, [r7, #28]
        break;
 8008480:	e009      	b.n	8008496 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008482:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008486:	61fb      	str	r3, [r7, #28]
        break;
 8008488:	e005      	b.n	8008496 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800848a:	2300      	movs	r3, #0
 800848c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008494:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d077      	beq.n	800858c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	005a      	lsls	r2, r3, #1
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	085b      	lsrs	r3, r3, #1
 80084a6:	441a      	add	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	2b0f      	cmp	r3, #15
 80084b6:	d916      	bls.n	80084e6 <UART_SetConfig+0x4a6>
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084be:	d212      	bcs.n	80084e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	f023 030f 	bic.w	r3, r3, #15
 80084c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	085b      	lsrs	r3, r3, #1
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	f003 0307 	and.w	r3, r3, #7
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	8afb      	ldrh	r3, [r7, #22]
 80084d8:	4313      	orrs	r3, r2
 80084da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	8afa      	ldrh	r2, [r7, #22]
 80084e2:	60da      	str	r2, [r3, #12]
 80084e4:	e052      	b.n	800858c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80084ec:	e04e      	b.n	800858c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80084f2:	2b08      	cmp	r3, #8
 80084f4:	d827      	bhi.n	8008546 <UART_SetConfig+0x506>
 80084f6:	a201      	add	r2, pc, #4	@ (adr r2, 80084fc <UART_SetConfig+0x4bc>)
 80084f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fc:	08008521 	.word	0x08008521
 8008500:	08008529 	.word	0x08008529
 8008504:	08008531 	.word	0x08008531
 8008508:	08008547 	.word	0x08008547
 800850c:	08008537 	.word	0x08008537
 8008510:	08008547 	.word	0x08008547
 8008514:	08008547 	.word	0x08008547
 8008518:	08008547 	.word	0x08008547
 800851c:	0800853f 	.word	0x0800853f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008520:	f7fe f828 	bl	8006574 <HAL_RCC_GetPCLK1Freq>
 8008524:	61f8      	str	r0, [r7, #28]
        break;
 8008526:	e014      	b.n	8008552 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008528:	f7fe f83a 	bl	80065a0 <HAL_RCC_GetPCLK2Freq>
 800852c:	61f8      	str	r0, [r7, #28]
        break;
 800852e:	e010      	b.n	8008552 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008530:	4b1e      	ldr	r3, [pc, #120]	@ (80085ac <UART_SetConfig+0x56c>)
 8008532:	61fb      	str	r3, [r7, #28]
        break;
 8008534:	e00d      	b.n	8008552 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008536:	f7fd ff85 	bl	8006444 <HAL_RCC_GetSysClockFreq>
 800853a:	61f8      	str	r0, [r7, #28]
        break;
 800853c:	e009      	b.n	8008552 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800853e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008542:	61fb      	str	r3, [r7, #28]
        break;
 8008544:	e005      	b.n	8008552 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008546:	2300      	movs	r3, #0
 8008548:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008550:	bf00      	nop
    }

    if (pclk != 0U)
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d019      	beq.n	800858c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	085a      	lsrs	r2, r3, #1
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	441a      	add	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	fbb2 f3f3 	udiv	r3, r2, r3
 800856a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	2b0f      	cmp	r3, #15
 8008570:	d909      	bls.n	8008586 <UART_SetConfig+0x546>
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008578:	d205      	bcs.n	8008586 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	b29a      	uxth	r2, r3
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	60da      	str	r2, [r3, #12]
 8008584:	e002      	b.n	800858c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008598:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800859c:	4618      	mov	r0, r3
 800859e:	3728      	adds	r7, #40	@ 0x28
 80085a0:	46bd      	mov	sp, r7
 80085a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085a6:	bf00      	nop
 80085a8:	40008000 	.word	0x40008000
 80085ac:	00f42400 	.word	0x00f42400

080085b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085bc:	f003 0308 	and.w	r3, r3, #8
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00a      	beq.n	80085da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	430a      	orrs	r2, r1
 80085d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00a      	beq.n	80085fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	430a      	orrs	r2, r1
 80085fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008600:	f003 0302 	and.w	r3, r3, #2
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00a      	beq.n	800861e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	430a      	orrs	r2, r1
 800861c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008622:	f003 0304 	and.w	r3, r3, #4
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00a      	beq.n	8008640 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	430a      	orrs	r2, r1
 800863e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008644:	f003 0310 	and.w	r3, r3, #16
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00a      	beq.n	8008662 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	430a      	orrs	r2, r1
 8008660:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008666:	f003 0320 	and.w	r3, r3, #32
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00a      	beq.n	8008684 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	430a      	orrs	r2, r1
 8008682:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800868c:	2b00      	cmp	r3, #0
 800868e:	d01a      	beq.n	80086c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	430a      	orrs	r2, r1
 80086a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086ae:	d10a      	bne.n	80086c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	430a      	orrs	r2, r1
 80086c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00a      	beq.n	80086e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	430a      	orrs	r2, r1
 80086e6:	605a      	str	r2, [r3, #4]
  }
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b098      	sub	sp, #96	@ 0x60
 80086f8:	af02      	add	r7, sp, #8
 80086fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008704:	f7fb fbc2 	bl	8003e8c <HAL_GetTick>
 8008708:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0308 	and.w	r3, r3, #8
 8008714:	2b08      	cmp	r3, #8
 8008716:	d12e      	bne.n	8008776 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008718:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008720:	2200      	movs	r2, #0
 8008722:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f88c 	bl	8008844 <UART_WaitOnFlagUntilTimeout>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d021      	beq.n	8008776 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800873a:	e853 3f00 	ldrex	r3, [r3]
 800873e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008742:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008746:	653b      	str	r3, [r7, #80]	@ 0x50
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	461a      	mov	r2, r3
 800874e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008750:	647b      	str	r3, [r7, #68]	@ 0x44
 8008752:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008754:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008756:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008758:	e841 2300 	strex	r3, r2, [r1]
 800875c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800875e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1e6      	bne.n	8008732 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2220      	movs	r2, #32
 8008768:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e062      	b.n	800883c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0304 	and.w	r3, r3, #4
 8008780:	2b04      	cmp	r3, #4
 8008782:	d149      	bne.n	8008818 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008784:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800878c:	2200      	movs	r2, #0
 800878e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f856 	bl	8008844 <UART_WaitOnFlagUntilTimeout>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d03c      	beq.n	8008818 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a6:	e853 3f00 	ldrex	r3, [r3]
 80087aa:	623b      	str	r3, [r7, #32]
   return(result);
 80087ac:	6a3b      	ldr	r3, [r7, #32]
 80087ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	461a      	mov	r2, r3
 80087ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80087be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087c4:	e841 2300 	strex	r3, r2, [r1]
 80087c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e6      	bne.n	800879e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3308      	adds	r3, #8
 80087d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	e853 3f00 	ldrex	r3, [r3]
 80087de:	60fb      	str	r3, [r7, #12]
   return(result);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f023 0301 	bic.w	r3, r3, #1
 80087e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3308      	adds	r3, #8
 80087ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087f0:	61fa      	str	r2, [r7, #28]
 80087f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f4:	69b9      	ldr	r1, [r7, #24]
 80087f6:	69fa      	ldr	r2, [r7, #28]
 80087f8:	e841 2300 	strex	r3, r2, [r1]
 80087fc:	617b      	str	r3, [r7, #20]
   return(result);
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1e5      	bne.n	80087d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2220      	movs	r2, #32
 8008808:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008814:	2303      	movs	r3, #3
 8008816:	e011      	b.n	800883c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2220      	movs	r2, #32
 800881c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2220      	movs	r2, #32
 8008822:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3758      	adds	r7, #88	@ 0x58
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	603b      	str	r3, [r7, #0]
 8008850:	4613      	mov	r3, r2
 8008852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008854:	e04f      	b.n	80088f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885c:	d04b      	beq.n	80088f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800885e:	f7fb fb15 	bl	8003e8c <HAL_GetTick>
 8008862:	4602      	mov	r2, r0
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	69ba      	ldr	r2, [r7, #24]
 800886a:	429a      	cmp	r2, r3
 800886c:	d302      	bcc.n	8008874 <UART_WaitOnFlagUntilTimeout+0x30>
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008874:	2303      	movs	r3, #3
 8008876:	e04e      	b.n	8008916 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 0304 	and.w	r3, r3, #4
 8008882:	2b00      	cmp	r3, #0
 8008884:	d037      	beq.n	80088f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2b80      	cmp	r3, #128	@ 0x80
 800888a:	d034      	beq.n	80088f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2b40      	cmp	r3, #64	@ 0x40
 8008890:	d031      	beq.n	80088f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	69db      	ldr	r3, [r3, #28]
 8008898:	f003 0308 	and.w	r3, r3, #8
 800889c:	2b08      	cmp	r3, #8
 800889e:	d110      	bne.n	80088c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2208      	movs	r2, #8
 80088a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 f838 	bl	800891e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2208      	movs	r2, #8
 80088b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e029      	b.n	8008916 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	69db      	ldr	r3, [r3, #28]
 80088c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088d0:	d111      	bne.n	80088f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f000 f81e 	bl	800891e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2220      	movs	r2, #32
 80088e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e00f      	b.n	8008916 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	69da      	ldr	r2, [r3, #28]
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	4013      	ands	r3, r2
 8008900:	68ba      	ldr	r2, [r7, #8]
 8008902:	429a      	cmp	r2, r3
 8008904:	bf0c      	ite	eq
 8008906:	2301      	moveq	r3, #1
 8008908:	2300      	movne	r3, #0
 800890a:	b2db      	uxtb	r3, r3
 800890c:	461a      	mov	r2, r3
 800890e:	79fb      	ldrb	r3, [r7, #7]
 8008910:	429a      	cmp	r2, r3
 8008912:	d0a0      	beq.n	8008856 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800891e:	b480      	push	{r7}
 8008920:	b095      	sub	sp, #84	@ 0x54
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800892e:	e853 3f00 	ldrex	r3, [r3]
 8008932:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008936:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800893a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	461a      	mov	r2, r3
 8008942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008944:	643b      	str	r3, [r7, #64]	@ 0x40
 8008946:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008948:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800894a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800894c:	e841 2300 	strex	r3, r2, [r1]
 8008950:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1e6      	bne.n	8008926 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3308      	adds	r3, #8
 800895e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008960:	6a3b      	ldr	r3, [r7, #32]
 8008962:	e853 3f00 	ldrex	r3, [r3]
 8008966:	61fb      	str	r3, [r7, #28]
   return(result);
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	f023 0301 	bic.w	r3, r3, #1
 800896e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3308      	adds	r3, #8
 8008976:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008978:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800897a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800897e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008980:	e841 2300 	strex	r3, r2, [r1]
 8008984:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1e5      	bne.n	8008958 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008990:	2b01      	cmp	r3, #1
 8008992:	d118      	bne.n	80089c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	e853 3f00 	ldrex	r3, [r3]
 80089a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	f023 0310 	bic.w	r3, r3, #16
 80089a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	461a      	mov	r2, r3
 80089b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089b2:	61bb      	str	r3, [r7, #24]
 80089b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b6:	6979      	ldr	r1, [r7, #20]
 80089b8:	69ba      	ldr	r2, [r7, #24]
 80089ba:	e841 2300 	strex	r3, r2, [r1]
 80089be:	613b      	str	r3, [r7, #16]
   return(result);
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1e6      	bne.n	8008994 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2220      	movs	r2, #32
 80089ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80089da:	bf00      	nop
 80089dc:	3754      	adds	r7, #84	@ 0x54
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089e6:	b084      	sub	sp, #16
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	f107 001c 	add.w	r0, r7, #28
 80089f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fa69 	bl	8008edc <USB_CoreReset>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008a0e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d106      	bne.n	8008a24 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a1a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	639a      	str	r2, [r3, #56]	@ 0x38
 8008a22:	e005      	b.n	8008a30 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a28:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a3c:	b004      	add	sp, #16
 8008a3e:	4770      	bx	lr

08008a40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	f023 0201 	bic.w	r2, r3, #1
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b084      	sub	sp, #16
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a7e:	78fb      	ldrb	r3, [r7, #3]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d115      	bne.n	8008ab0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008a90:	200a      	movs	r0, #10
 8008a92:	f7fb fa07 	bl	8003ea4 <HAL_Delay>
      ms += 10U;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	330a      	adds	r3, #10
 8008a9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fa0f 	bl	8008ec0 <USB_GetMode>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d01e      	beq.n	8008ae6 <USB_SetCurrentMode+0x84>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2bc7      	cmp	r3, #199	@ 0xc7
 8008aac:	d9f0      	bls.n	8008a90 <USB_SetCurrentMode+0x2e>
 8008aae:	e01a      	b.n	8008ae6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ab0:	78fb      	ldrb	r3, [r7, #3]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d115      	bne.n	8008ae2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008ac2:	200a      	movs	r0, #10
 8008ac4:	f7fb f9ee 	bl	8003ea4 <HAL_Delay>
      ms += 10U;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	330a      	adds	r3, #10
 8008acc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f9f6 	bl	8008ec0 <USB_GetMode>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d005      	beq.n	8008ae6 <USB_SetCurrentMode+0x84>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2bc7      	cmp	r3, #199	@ 0xc7
 8008ade:	d9f0      	bls.n	8008ac2 <USB_SetCurrentMode+0x60>
 8008ae0:	e001      	b.n	8008ae6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e005      	b.n	8008af2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2bc8      	cmp	r3, #200	@ 0xc8
 8008aea:	d101      	bne.n	8008af0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	e000      	b.n	8008af2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
	...

08008afc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008afc:	b084      	sub	sp, #16
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b086      	sub	sp, #24
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008b0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b16:	2300      	movs	r3, #0
 8008b18:	613b      	str	r3, [r7, #16]
 8008b1a:	e009      	b.n	8008b30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	3340      	adds	r3, #64	@ 0x40
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	2200      	movs	r2, #0
 8008b28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	613b      	str	r3, [r7, #16]
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	2b0e      	cmp	r3, #14
 8008b34:	d9f2      	bls.n	8008b1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b36:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d11c      	bne.n	8008b78 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b4c:	f043 0302 	orr.w	r3, r3, #2
 8008b50:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b56:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	601a      	str	r2, [r3, #0]
 8008b76:	e005      	b.n	8008b84 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b7c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008b90:	2103      	movs	r1, #3
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f95a 	bl	8008e4c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b98:	2110      	movs	r1, #16
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f8f6 	bl	8008d8c <USB_FlushTxFifo>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d001      	beq.n	8008baa <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f920 	bl	8008df0 <USB_FlushRxFifo>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bcc:	461a      	mov	r2, r3
 8008bce:	2300      	movs	r3, #0
 8008bd0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bd8:	461a      	mov	r2, r3
 8008bda:	2300      	movs	r3, #0
 8008bdc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bde:	2300      	movs	r3, #0
 8008be0:	613b      	str	r3, [r7, #16]
 8008be2:	e043      	b.n	8008c6c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008bfa:	d118      	bne.n	8008c2e <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10a      	bne.n	8008c18 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	015a      	lsls	r2, r3, #5
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	4413      	add	r3, r2
 8008c0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c0e:	461a      	mov	r2, r3
 8008c10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	e013      	b.n	8008c40 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	015a      	lsls	r2, r3, #5
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c24:	461a      	mov	r2, r3
 8008c26:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008c2a:	6013      	str	r3, [r2, #0]
 8008c2c:	e008      	b.n	8008c40 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	015a      	lsls	r2, r3, #5
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	2300      	movs	r3, #0
 8008c50:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	015a      	lsls	r2, r3, #5
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4413      	add	r3, r2
 8008c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c5e:	461a      	mov	r2, r3
 8008c60:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008c64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	613b      	str	r3, [r7, #16]
 8008c6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008c70:	461a      	mov	r2, r3
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d3b5      	bcc.n	8008be4 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c78:	2300      	movs	r3, #0
 8008c7a:	613b      	str	r3, [r7, #16]
 8008c7c:	e043      	b.n	8008d06 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c94:	d118      	bne.n	8008cc8 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10a      	bne.n	8008cb2 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ca8:	461a      	mov	r2, r3
 8008caa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	e013      	b.n	8008cda <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008cc4:	6013      	str	r3, [r2, #0]
 8008cc6:	e008      	b.n	8008cda <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	015a      	lsls	r2, r3, #5
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	015a      	lsls	r2, r3, #5
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	2300      	movs	r3, #0
 8008cea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	015a      	lsls	r2, r3, #5
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008cfe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	3301      	adds	r3, #1
 8008d04:	613b      	str	r3, [r7, #16]
 8008d06:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d3b5      	bcc.n	8008c7e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d24:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008d32:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	f043 0210 	orr.w	r2, r3, #16
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	699a      	ldr	r2, [r3, #24]
 8008d44:	4b10      	ldr	r3, [pc, #64]	@ (8008d88 <USB_DevInit+0x28c>)
 8008d46:	4313      	orrs	r3, r2
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d4c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d005      	beq.n	8008d60 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	f043 0208 	orr.w	r2, r3, #8
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008d60:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d107      	bne.n	8008d78 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d70:	f043 0304 	orr.w	r3, r3, #4
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3718      	adds	r7, #24
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d84:	b004      	add	sp, #16
 8008d86:	4770      	bx	lr
 8008d88:	803c3800 	.word	0x803c3800

08008d8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008da6:	d901      	bls.n	8008dac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e01b      	b.n	8008de4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	daf2      	bge.n	8008d9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008db4:	2300      	movs	r3, #0
 8008db6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	019b      	lsls	r3, r3, #6
 8008dbc:	f043 0220 	orr.w	r2, r3, #32
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008dd0:	d901      	bls.n	8008dd6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e006      	b.n	8008de4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	f003 0320 	and.w	r3, r3, #32
 8008dde:	2b20      	cmp	r3, #32
 8008de0:	d0f0      	beq.n	8008dc4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e08:	d901      	bls.n	8008e0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e018      	b.n	8008e40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	daf2      	bge.n	8008dfc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e16:	2300      	movs	r3, #0
 8008e18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2210      	movs	r2, #16
 8008e1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	3301      	adds	r3, #1
 8008e24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e2c:	d901      	bls.n	8008e32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e006      	b.n	8008e40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	f003 0310 	and.w	r3, r3, #16
 8008e3a:	2b10      	cmp	r3, #16
 8008e3c:	d0f0      	beq.n	8008e20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3714      	adds	r7, #20
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	68f9      	ldr	r1, [r7, #12]
 8008e68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b085      	sub	sp, #20
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008e98:	f023 0303 	bic.w	r3, r3, #3
 8008e9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008eac:	f043 0302 	orr.w	r3, r3, #2
 8008eb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	695b      	ldr	r3, [r3, #20]
 8008ecc:	f003 0301 	and.w	r3, r3, #1
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	3301      	adds	r3, #1
 8008eec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ef4:	d901      	bls.n	8008efa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	e01b      	b.n	8008f32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	daf2      	bge.n	8008ee8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f02:	2300      	movs	r3, #0
 8008f04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	f043 0201 	orr.w	r2, r3, #1
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3301      	adds	r3, #1
 8008f16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f1e:	d901      	bls.n	8008f24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e006      	b.n	8008f32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d0f0      	beq.n	8008f12 <USB_CoreReset+0x36>

  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3714      	adds	r7, #20
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr

08008f3e <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b08c      	sub	sp, #48	@ 0x30
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	603b      	str	r3, [r7, #0]
 8008f46:	4603      	mov	r3, r0
 8008f48:	71fb      	strb	r3, [r7, #7]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	71bb      	strb	r3, [r7, #6]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8008f52:	79fb      	ldrb	r3, [r7, #7]
 8008f54:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8008f56:	79bb      	ldrb	r3, [r7, #6]
 8008f58:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8008f5a:	797b      	ldrb	r3, [r7, #5]
 8008f5c:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008f5e:	f107 030c 	add.w	r3, r7, #12
 8008f62:	2207      	movs	r2, #7
 8008f64:	2100      	movs	r1, #0
 8008f66:	4618      	mov	r0, r3
 8008f68:	f003 fd20 	bl	800c9ac <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008f6c:	f107 0318 	add.w	r3, r7, #24
 8008f70:	2218      	movs	r2, #24
 8008f72:	2100      	movs	r1, #0
 8008f74:	4618      	mov	r0, r3
 8008f76:	f003 fd19 	bl	800c9ac <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008f7a:	233f      	movs	r3, #63	@ 0x3f
 8008f7c:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8008f7e:	238a      	movs	r3, #138	@ 0x8a
 8008f80:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8008f82:	f107 0314 	add.w	r3, r7, #20
 8008f86:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8008f88:	2303      	movs	r3, #3
 8008f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 8008f8c:	f107 030c 	add.w	r3, r7, #12
 8008f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8008f92:	2307      	movs	r3, #7
 8008f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008f96:	f107 0318 	add.w	r3, r7, #24
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 fea1 	bl	8009ce4 <hci_send_req>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	da01      	bge.n	8008fac <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8008fa8:	23ff      	movs	r3, #255	@ 0xff
 8008faa:	e014      	b.n	8008fd6 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8008fac:	7b3b      	ldrb	r3, [r7, #12]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8008fb2:	7b3b      	ldrb	r3, [r7, #12]
 8008fb4:	e00f      	b.n	8008fd6 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8008fb6:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8008fba:	b29a      	uxth	r2, r3
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8008fc0:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc8:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8008fca:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fd2:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3730      	adds	r7, #48	@ 0x30
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b08e      	sub	sp, #56	@ 0x38
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	603b      	str	r3, [r7, #0]
 8008fea:	4603      	mov	r3, r0
 8008fec:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8008fee:	7bfb      	ldrb	r3, [r7, #15]
 8008ff0:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008ff2:	f107 0314 	add.w	r3, r7, #20
 8008ff6:	2207      	movs	r2, #7
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f003 fcd6 	bl	800c9ac <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009000:	f107 0320 	add.w	r3, r7, #32
 8009004:	2218      	movs	r2, #24
 8009006:	2100      	movs	r1, #0
 8009008:	4618      	mov	r0, r3
 800900a:	f003 fccf 	bl	800c9ac <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800900e:	233f      	movs	r3, #63	@ 0x3f
 8009010:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8009012:	238a      	movs	r3, #138	@ 0x8a
 8009014:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 8009016:	f107 031c 	add.w	r3, r7, #28
 800901a:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 800901c:	2301      	movs	r3, #1
 800901e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8009020:	f107 0314 	add.w	r3, r7, #20
 8009024:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8009026:	2307      	movs	r3, #7
 8009028:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800902a:	f107 0320 	add.w	r3, r7, #32
 800902e:	2100      	movs	r1, #0
 8009030:	4618      	mov	r0, r3
 8009032:	f000 fe57 	bl	8009ce4 <hci_send_req>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	da01      	bge.n	8009040 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 800903c:	23ff      	movs	r3, #255	@ 0xff
 800903e:	e014      	b.n	800906a <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8009040:	7d3b      	ldrb	r3, [r7, #20]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8009046:	7d3b      	ldrb	r3, [r7, #20]
 8009048:	e00f      	b.n	800906a <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 800904a:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800904e:	b29a      	uxth	r2, r3
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8009054:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8009058:	b29a      	uxth	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800905e:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8009062:	b29a      	uxth	r2, r3
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3738      	adds	r7, #56	@ 0x38
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8009072:	b590      	push	{r4, r7, lr}
 8009074:	b095      	sub	sp, #84	@ 0x54
 8009076:	af00      	add	r7, sp, #0
 8009078:	4604      	mov	r4, r0
 800907a:	4608      	mov	r0, r1
 800907c:	4611      	mov	r1, r2
 800907e:	461a      	mov	r2, r3
 8009080:	4623      	mov	r3, r4
 8009082:	71fb      	strb	r3, [r7, #7]
 8009084:	4603      	mov	r3, r0
 8009086:	80bb      	strh	r3, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	807b      	strh	r3, [r7, #2]
 800908c:	4613      	mov	r3, r2
 800908e:	71bb      	strb	r3, [r7, #6]
//	return BLE_STATUS_INVALID_PARAMS;
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8009090:	2300      	movs	r3, #0
 8009092:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8009096:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800909a:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800909e:	4413      	add	r3, r2
 80090a0:	330e      	adds	r3, #14
 80090a2:	2b28      	cmp	r3, #40	@ 0x28
 80090a4:	d901      	bls.n	80090aa <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 80090a6:	2342      	movs	r3, #66	@ 0x42
 80090a8:	e0c9      	b.n	800923e <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 80090aa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80090ae:	3350      	adds	r3, #80	@ 0x50
 80090b0:	443b      	add	r3, r7
 80090b2:	79fa      	ldrb	r2, [r7, #7]
 80090b4:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80090b8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80090bc:	3301      	adds	r3, #1
 80090be:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 80090c2:	88bb      	ldrh	r3, [r7, #4]
 80090c4:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 80090c6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80090ca:	f107 0208 	add.w	r2, r7, #8
 80090ce:	4413      	add	r3, r2
 80090d0:	88ba      	ldrh	r2, [r7, #4]
 80090d2:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80090d4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80090d8:	3302      	adds	r3, #2
 80090da:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 80090de:	887b      	ldrh	r3, [r7, #2]
 80090e0:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 80090e2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80090e6:	f107 0208 	add.w	r2, r7, #8
 80090ea:	4413      	add	r3, r2
 80090ec:	887a      	ldrh	r2, [r7, #2]
 80090ee:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80090f0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80090f4:	3302      	adds	r3, #2
 80090f6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 80090fa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80090fe:	3350      	adds	r3, #80	@ 0x50
 8009100:	443b      	add	r3, r7
 8009102:	79ba      	ldrb	r2, [r7, #6]
 8009104:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009108:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800910c:	3301      	adds	r3, #1
 800910e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8009112:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009116:	3350      	adds	r3, #80	@ 0x50
 8009118:	443b      	add	r3, r7
 800911a:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800911e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009122:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009126:	3301      	adds	r3, #1
 8009128:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 800912c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009130:	3350      	adds	r3, #80	@ 0x50
 8009132:	443b      	add	r3, r7
 8009134:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8009138:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800913c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009140:	3301      	adds	r3, #1
 8009142:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8009146:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800914a:	f107 0208 	add.w	r2, r7, #8
 800914e:	4413      	add	r3, r2
 8009150:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8009154:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009156:	4618      	mov	r0, r3
 8009158:	f003 fca7 	bl	800caaa <memcpy>
  indx +=  LocalNameLen;
 800915c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8009160:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8009164:	4413      	add	r3, r2
 8009166:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800916a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800916e:	3350      	adds	r3, #80	@ 0x50
 8009170:	443b      	add	r3, r7
 8009172:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8009176:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800917a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800917e:	3301      	adds	r3, #1
 8009180:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8009184:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009188:	f107 0208 	add.w	r2, r7, #8
 800918c:	4413      	add	r3, r2
 800918e:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8009192:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8009194:	4618      	mov	r0, r3
 8009196:	f003 fc88 	bl	800caaa <memcpy>
  indx +=  ServiceUUIDLen;  
 800919a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800919e:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80091a2:	4413      	add	r3, r2
 80091a4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 80091a8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80091ac:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80091b0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80091b4:	f107 0208 	add.w	r2, r7, #8
 80091b8:	4413      	add	r3, r2
 80091ba:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 80091be:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80091c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80091c4:	3302      	adds	r3, #2
 80091c6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 80091ca:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80091ce:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80091d2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80091d6:	f107 0208 	add.w	r2, r7, #8
 80091da:	4413      	add	r3, r2
 80091dc:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 80091e0:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 80091e2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80091e6:	3302      	adds	r3, #2
 80091e8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80091ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80091f0:	2218      	movs	r2, #24
 80091f2:	2100      	movs	r1, #0
 80091f4:	4618      	mov	r0, r3
 80091f6:	f003 fbd9 	bl	800c9ac <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80091fa:	233f      	movs	r3, #63	@ 0x3f
 80091fc:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 80091fe:	2383      	movs	r3, #131	@ 0x83
 8009200:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 8009202:	f107 0308 	add.w	r3, r7, #8
 8009206:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 8009208:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800920c:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 800920e:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 8009212:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 8009214:	2301      	movs	r3, #1
 8009216:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8009218:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800921c:	2100      	movs	r1, #0
 800921e:	4618      	mov	r0, r3
 8009220:	f000 fd60 	bl	8009ce4 <hci_send_req>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	da01      	bge.n	800922e <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 800922a:	23ff      	movs	r3, #255	@ 0xff
 800922c:	e007      	b.n	800923e <aci_gap_set_discoverable+0x1cc>

  if (status) {
 800922e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009232:	2b00      	cmp	r3, #0
 8009234:	d002      	beq.n	800923c <aci_gap_set_discoverable+0x1ca>
//	  return BLE_STATUS_TIMEOUT;
	  return status;
 8009236:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800923a:	e000      	b.n	800923e <aci_gap_set_discoverable+0x1cc>

  }

  return 0;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3754      	adds	r7, #84	@ 0x54
 8009242:	46bd      	mov	sp, r7
 8009244:	bd90      	pop	{r4, r7, pc}

08009246 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8009246:	b590      	push	{r4, r7, lr}
 8009248:	b091      	sub	sp, #68	@ 0x44
 800924a:	af00      	add	r7, sp, #0
 800924c:	603a      	str	r2, [r7, #0]
 800924e:	461a      	mov	r2, r3
 8009250:	4603      	mov	r3, r0
 8009252:	71fb      	strb	r3, [r7, #7]
 8009254:	460b      	mov	r3, r1
 8009256:	71bb      	strb	r3, [r7, #6]
 8009258:	4613      	mov	r3, r2
 800925a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800925c:	79fb      	ldrb	r3, [r7, #7]
 800925e:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8009260:	79bb      	ldrb	r3, [r7, #6]
 8009262:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8009264:	79bb      	ldrb	r3, [r7, #6]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00a      	beq.n	8009280 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	f107 030e 	add.w	r3, r7, #14
 8009270:	6814      	ldr	r4, [r2, #0]
 8009272:	6850      	ldr	r0, [r2, #4]
 8009274:	6891      	ldr	r1, [r2, #8]
 8009276:	68d2      	ldr	r2, [r2, #12]
 8009278:	601c      	str	r4, [r3, #0]
 800927a:	6058      	str	r0, [r3, #4]
 800927c:	6099      	str	r1, [r3, #8]
 800927e:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8009280:	797b      	ldrb	r3, [r7, #5]
 8009282:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8009284:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8009288:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800928a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800928e:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8009292:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009294:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 8009298:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800929c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80092a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80092a4:	2218      	movs	r2, #24
 80092a6:	2100      	movs	r1, #0
 80092a8:	4618      	mov	r0, r3
 80092aa:	f003 fb7f 	bl	800c9ac <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80092ae:	233f      	movs	r3, #63	@ 0x3f
 80092b0:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 80092b2:	2386      	movs	r3, #134	@ 0x86
 80092b4:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 80092b6:	f107 030c 	add.w	r3, r7, #12
 80092ba:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 80092bc:	231a      	movs	r3, #26
 80092be:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 80092c0:	f107 030b 	add.w	r3, r7, #11
 80092c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 80092c6:	2301      	movs	r3, #1
 80092c8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 80092ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80092ce:	2100      	movs	r1, #0
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 fd07 	bl	8009ce4 <hci_send_req>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	da01      	bge.n	80092e0 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 80092dc:	23ff      	movs	r3, #255	@ 0xff
 80092de:	e005      	b.n	80092ec <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 80092e0:	7afb      	ldrb	r3, [r7, #11]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <aci_gap_set_auth_requirement+0xa4>
    return status;
 80092e6:	7afb      	ldrb	r3, [r7, #11]
 80092e8:	e000      	b.n	80092ec <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3744      	adds	r7, #68	@ 0x44
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd90      	pop	{r4, r7, pc}

080092f4 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b092      	sub	sp, #72	@ 0x48
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	4603      	mov	r3, r0
 80092fc:	6039      	str	r1, [r7, #0]
 80092fe:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 8009306:	79fb      	ldrb	r3, [r7, #7]
 8009308:	2b1f      	cmp	r3, #31
 800930a:	d901      	bls.n	8009310 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 800930c:	2342      	movs	r3, #66	@ 0x42
 800930e:	e03e      	b.n	800938e <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 8009310:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009314:	3348      	adds	r3, #72	@ 0x48
 8009316:	443b      	add	r3, r7
 8009318:	79fa      	ldrb	r2, [r7, #7]
 800931a:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 800931e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009322:	3301      	adds	r3, #1
 8009324:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8009328:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800932c:	f107 0208 	add.w	r2, r7, #8
 8009330:	4413      	add	r3, r2
 8009332:	79fa      	ldrb	r2, [r7, #7]
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	4618      	mov	r0, r3
 8009338:	f003 fbb7 	bl	800caaa <memcpy>
  indx +=  AdvLen;
 800933c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8009340:	79fb      	ldrb	r3, [r7, #7]
 8009342:	4413      	add	r3, r2
 8009344:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009348:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800934c:	2218      	movs	r2, #24
 800934e:	2100      	movs	r1, #0
 8009350:	4618      	mov	r0, r3
 8009352:	f003 fb2b 	bl	800c9ac <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009356:	233f      	movs	r3, #63	@ 0x3f
 8009358:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800935a:	238e      	movs	r3, #142	@ 0x8e
 800935c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 800935e:	f107 0308 	add.w	r3, r7, #8
 8009362:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8009364:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009368:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 800936a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800936e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 8009370:	2301      	movs	r3, #1
 8009372:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8009374:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009378:	2100      	movs	r1, #0
 800937a:	4618      	mov	r0, r3
 800937c:	f000 fcb2 	bl	8009ce4 <hci_send_req>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	da01      	bge.n	800938a <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 8009386:	23ff      	movs	r3, #255	@ 0xff
 8009388:	e001      	b.n	800938e <aci_gap_update_adv_data+0x9a>
    
  return status;
 800938a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800938e:	4618      	mov	r0, r3
 8009390:	3748      	adds	r7, #72	@ 0x48
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b088      	sub	sp, #32
 800939a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800939c:	f107 0308 	add.w	r3, r7, #8
 80093a0:	2218      	movs	r2, #24
 80093a2:	2100      	movs	r1, #0
 80093a4:	4618      	mov	r0, r3
 80093a6:	f003 fb01 	bl	800c9ac <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80093aa:	233f      	movs	r3, #63	@ 0x3f
 80093ac:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 80093ae:	f240 1301 	movw	r3, #257	@ 0x101
 80093b2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80093b4:	1dfb      	adds	r3, r7, #7
 80093b6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80093b8:	2301      	movs	r3, #1
 80093ba:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 80093bc:	f107 0308 	add.w	r3, r7, #8
 80093c0:	2100      	movs	r1, #0
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 fc8e 	bl	8009ce4 <hci_send_req>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	da01      	bge.n	80093d2 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 80093ce:	23ff      	movs	r3, #255	@ 0xff
 80093d0:	e000      	b.n	80093d4 <aci_gatt_init+0x3e>

  return status;
 80093d2:	79fb      	ldrb	r3, [r7, #7]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3720      	adds	r7, #32
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b090      	sub	sp, #64	@ 0x40
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6039      	str	r1, [r7, #0]
 80093e4:	4611      	mov	r1, r2
 80093e6:	461a      	mov	r2, r3
 80093e8:	4603      	mov	r3, r0
 80093ea:	71fb      	strb	r3, [r7, #7]
 80093ec:	460b      	mov	r3, r1
 80093ee:	71bb      	strb	r3, [r7, #6]
 80093f0:	4613      	mov	r3, r2
 80093f2:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80093f4:	2300      	movs	r3, #0
 80093f6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 80093fa:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80093fe:	3340      	adds	r3, #64	@ 0x40
 8009400:	443b      	add	r3, r7
 8009402:	79fa      	ldrb	r2, [r7, #7]
 8009404:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8009408:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800940c:	3301      	adds	r3, #1
 800940e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8009412:	79fb      	ldrb	r3, [r7, #7]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d103      	bne.n	8009420 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8009418:	2302      	movs	r3, #2
 800941a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800941e:	e002      	b.n	8009426 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8009420:	2310      	movs	r3, #16
 8009422:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8009426:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800942a:	f107 020c 	add.w	r2, r7, #12
 800942e:	4413      	add	r3, r2
 8009430:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	4618      	mov	r0, r3
 8009438:	f003 fb37 	bl	800caaa <memcpy>
  indx +=  uuid_len;
 800943c:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8009440:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009444:	4413      	add	r3, r2
 8009446:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 800944a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800944e:	3340      	adds	r3, #64	@ 0x40
 8009450:	443b      	add	r3, r7
 8009452:	79ba      	ldrb	r2, [r7, #6]
 8009454:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8009458:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800945c:	3301      	adds	r3, #1
 800945e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 8009462:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009466:	3340      	adds	r3, #64	@ 0x40
 8009468:	443b      	add	r3, r7
 800946a:	797a      	ldrb	r2, [r7, #5]
 800946c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8009470:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009474:	3301      	adds	r3, #1
 8009476:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800947a:	f107 0320 	add.w	r3, r7, #32
 800947e:	2203      	movs	r2, #3
 8009480:	2100      	movs	r1, #0
 8009482:	4618      	mov	r0, r3
 8009484:	f003 fa92 	bl	800c9ac <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009488:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800948c:	2218      	movs	r2, #24
 800948e:	2100      	movs	r1, #0
 8009490:	4618      	mov	r0, r3
 8009492:	f003 fa8b 	bl	800c9ac <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009496:	233f      	movs	r3, #63	@ 0x3f
 8009498:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 800949a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800949e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 80094a0:	f107 030c 	add.w	r3, r7, #12
 80094a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 80094a6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80094aa:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 80094ac:	f107 0320 	add.w	r3, r7, #32
 80094b0:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80094b2:	2303      	movs	r3, #3
 80094b4:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 80094b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094ba:	2100      	movs	r1, #0
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 fc11 	bl	8009ce4 <hci_send_req>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	da01      	bge.n	80094cc <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 80094c8:	23ff      	movs	r3, #255	@ 0xff
 80094ca:	e00c      	b.n	80094e6 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 80094cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d002      	beq.n	80094da <aci_gatt_add_serv+0xfe>
    return resp.status;
 80094d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80094d8:	e005      	b.n	80094e6 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 80094da:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 80094de:	b29a      	uxth	r2, r3
 80094e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094e2:	801a      	strh	r2, [r3, #0]

  return 0;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3740      	adds	r7, #64	@ 0x40
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b092      	sub	sp, #72	@ 0x48
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	603a      	str	r2, [r7, #0]
 80094f6:	461a      	mov	r2, r3
 80094f8:	4603      	mov	r3, r0
 80094fa:	80fb      	strh	r3, [r7, #6]
 80094fc:	460b      	mov	r3, r1
 80094fe:	717b      	strb	r3, [r7, #5]
 8009500:	4613      	mov	r3, r2
 8009502:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8009504:	2300      	movs	r3, #0
 8009506:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 800950a:	88fb      	ldrh	r3, [r7, #6]
 800950c:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800950e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009512:	f107 020c 	add.w	r2, r7, #12
 8009516:	4413      	add	r3, r2
 8009518:	88fa      	ldrh	r2, [r7, #6]
 800951a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800951c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009520:	3302      	adds	r3, #2
 8009522:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 8009526:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800952a:	3348      	adds	r3, #72	@ 0x48
 800952c:	443b      	add	r3, r7
 800952e:	797a      	ldrb	r2, [r7, #5]
 8009530:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009534:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009538:	3301      	adds	r3, #1
 800953a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 800953e:	797b      	ldrb	r3, [r7, #5]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d103      	bne.n	800954c <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8009544:	2302      	movs	r3, #2
 8009546:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800954a:	e002      	b.n	8009552 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 800954c:	2310      	movs	r3, #16
 800954e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8009552:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009556:	f107 020c 	add.w	r2, r7, #12
 800955a:	4413      	add	r3, r2
 800955c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	4618      	mov	r0, r3
 8009564:	f003 faa1 	bl	800caaa <memcpy>
  indx +=  uuid_len;
 8009568:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800956c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009570:	4413      	add	r3, r2
 8009572:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 8009576:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800957a:	3348      	adds	r3, #72	@ 0x48
 800957c:	443b      	add	r3, r7
 800957e:	793a      	ldrb	r2, [r7, #4]
 8009580:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009584:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009588:	3301      	adds	r3, #1
 800958a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 800958e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009592:	3348      	adds	r3, #72	@ 0x48
 8009594:	443b      	add	r3, r7
 8009596:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 800959a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800959e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80095a2:	3301      	adds	r3, #1
 80095a4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 80095a8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80095ac:	3348      	adds	r3, #72	@ 0x48
 80095ae:	443b      	add	r3, r7
 80095b0:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 80095b4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80095b8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80095bc:	3301      	adds	r3, #1
 80095be:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 80095c2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80095c6:	3348      	adds	r3, #72	@ 0x48
 80095c8:	443b      	add	r3, r7
 80095ca:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 80095ce:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80095d2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80095d6:	3301      	adds	r3, #1
 80095d8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 80095dc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80095e0:	3348      	adds	r3, #72	@ 0x48
 80095e2:	443b      	add	r3, r7
 80095e4:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80095e8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80095ec:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80095f0:	3301      	adds	r3, #1
 80095f2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 80095f6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80095fa:	3348      	adds	r3, #72	@ 0x48
 80095fc:	443b      	add	r3, r7
 80095fe:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8009602:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009606:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800960a:	3301      	adds	r3, #1
 800960c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009610:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009614:	2203      	movs	r2, #3
 8009616:	2100      	movs	r1, #0
 8009618:	4618      	mov	r0, r3
 800961a:	f003 f9c7 	bl	800c9ac <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800961e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009622:	2218      	movs	r2, #24
 8009624:	2100      	movs	r1, #0
 8009626:	4618      	mov	r0, r3
 8009628:	f003 f9c0 	bl	800c9ac <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800962c:	233f      	movs	r3, #63	@ 0x3f
 800962e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8009630:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8009634:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8009636:	f107 030c 	add.w	r3, r7, #12
 800963a:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 800963c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009640:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 8009642:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8009648:	2303      	movs	r3, #3
 800964a:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800964c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009650:	2100      	movs	r1, #0
 8009652:	4618      	mov	r0, r3
 8009654:	f000 fb46 	bl	8009ce4 <hci_send_req>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	da01      	bge.n	8009662 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 800965e:	23ff      	movs	r3, #255	@ 0xff
 8009660:	e00c      	b.n	800967c <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8009662:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009666:	2b00      	cmp	r3, #0
 8009668:	d002      	beq.n	8009670 <aci_gatt_add_char+0x182>
    return resp.status;
 800966a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800966e:	e005      	b.n	800967c <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8009670:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 8009674:	b29a      	uxth	r2, r3
 8009676:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009678:	801a      	strh	r2, [r3, #0]

  return 0;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3748      	adds	r7, #72	@ 0x48
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8009684:	b590      	push	{r4, r7, lr}
 8009686:	b0ab      	sub	sp, #172	@ 0xac
 8009688:	af00      	add	r7, sp, #0
 800968a:	4604      	mov	r4, r0
 800968c:	4608      	mov	r0, r1
 800968e:	4611      	mov	r1, r2
 8009690:	461a      	mov	r2, r3
 8009692:	4623      	mov	r3, r4
 8009694:	80fb      	strh	r3, [r7, #6]
 8009696:	4603      	mov	r3, r0
 8009698:	80bb      	strh	r3, [r7, #4]
 800969a:	460b      	mov	r3, r1
 800969c:	70fb      	strb	r3, [r7, #3]
 800969e:	4613      	mov	r3, r2
 80096a0:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80096a2:	2300      	movs	r3, #0
 80096a4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80096a8:	78bb      	ldrb	r3, [r7, #2]
 80096aa:	2b7a      	cmp	r3, #122	@ 0x7a
 80096ac:	d901      	bls.n	80096b2 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 80096ae:	2342      	movs	r3, #66	@ 0x42
 80096b0:	e074      	b.n	800979c <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 80096b2:	88fb      	ldrh	r3, [r7, #6]
 80096b4:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 80096b6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80096ba:	f107 0208 	add.w	r2, r7, #8
 80096be:	4413      	add	r3, r2
 80096c0:	88fa      	ldrh	r2, [r7, #6]
 80096c2:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80096c4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80096c8:	3302      	adds	r3, #2
 80096ca:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 80096ce:	88bb      	ldrh	r3, [r7, #4]
 80096d0:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 80096d2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80096d6:	f107 0208 	add.w	r2, r7, #8
 80096da:	4413      	add	r3, r2
 80096dc:	88ba      	ldrh	r2, [r7, #4]
 80096de:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80096e0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80096e4:	3302      	adds	r3, #2
 80096e6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 80096ea:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80096ee:	33a8      	adds	r3, #168	@ 0xa8
 80096f0:	443b      	add	r3, r7
 80096f2:	78fa      	ldrb	r2, [r7, #3]
 80096f4:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80096f8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80096fc:	3301      	adds	r3, #1
 80096fe:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 8009702:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009706:	33a8      	adds	r3, #168	@ 0xa8
 8009708:	443b      	add	r3, r7
 800970a:	78ba      	ldrb	r2, [r7, #2]
 800970c:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8009710:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009714:	3301      	adds	r3, #1
 8009716:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800971a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800971e:	f107 0208 	add.w	r2, r7, #8
 8009722:	4413      	add	r3, r2
 8009724:	78ba      	ldrb	r2, [r7, #2]
 8009726:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800972a:	4618      	mov	r0, r3
 800972c:	f003 f9bd 	bl	800caaa <memcpy>
  indx +=  charValueLen;
 8009730:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8009734:	78bb      	ldrb	r3, [r7, #2]
 8009736:	4413      	add	r3, r2
 8009738:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800973c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8009740:	2218      	movs	r2, #24
 8009742:	2100      	movs	r1, #0
 8009744:	4618      	mov	r0, r3
 8009746:	f003 f931 	bl	800c9ac <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800974a:	233f      	movs	r3, #63	@ 0x3f
 800974c:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8009750:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8009754:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 8009758:	f107 0308 	add.w	r3, r7, #8
 800975c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 8009760:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 8009768:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 800976c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8009770:	2301      	movs	r3, #1
 8009772:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8009776:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800977a:	2100      	movs	r1, #0
 800977c:	4618      	mov	r0, r3
 800977e:	f000 fab1 	bl	8009ce4 <hci_send_req>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	da01      	bge.n	800978c <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 8009788:	23ff      	movs	r3, #255	@ 0xff
 800978a:	e007      	b.n	800979c <aci_gatt_update_char_value+0x118>

  if (status) {
 800978c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <aci_gatt_update_char_value+0x116>
    return status;
 8009794:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8009798:	e000      	b.n	800979c <aci_gatt_update_char_value+0x118>
  }

  return 0;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	37ac      	adds	r7, #172	@ 0xac
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd90      	pop	{r4, r7, pc}

080097a4 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b08a      	sub	sp, #40	@ 0x28
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 80097ae:	88fb      	ldrh	r3, [r7, #6]
 80097b0:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 80097b2:	f107 0310 	add.w	r3, r7, #16
 80097b6:	2218      	movs	r2, #24
 80097b8:	2100      	movs	r1, #0
 80097ba:	4618      	mov	r0, r3
 80097bc:	f003 f8f6 	bl	800c9ac <memset>
    rq.ogf = OGF_VENDOR_CMD;
 80097c0:	233f      	movs	r3, #63	@ 0x3f
 80097c2:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 80097c4:	f240 1327 	movw	r3, #295	@ 0x127
 80097c8:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 80097ca:	f107 030c 	add.w	r3, r7, #12
 80097ce:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 80097d0:	2302      	movs	r3, #2
 80097d2:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 80097d4:	f107 030b 	add.w	r3, r7, #11
 80097d8:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 80097da:	2301      	movs	r3, #1
 80097dc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 80097de:	f107 0310 	add.w	r3, r7, #16
 80097e2:	2100      	movs	r1, #0
 80097e4:	4618      	mov	r0, r3
 80097e6:	f000 fa7d 	bl	8009ce4 <hci_send_req>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	da01      	bge.n	80097f4 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 80097f0:	23ff      	movs	r3, #255	@ 0xff
 80097f2:	e000      	b.n	80097f6 <aci_gatt_allow_read+0x52>

    return status;
 80097f4:	7afb      	ldrb	r3, [r7, #11]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3728      	adds	r7, #40	@ 0x28
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b0ac      	sub	sp, #176	@ 0xb0
 8009802:	af00      	add	r7, sp, #0
 8009804:	60ba      	str	r2, [r7, #8]
 8009806:	607b      	str	r3, [r7, #4]
 8009808:	4603      	mov	r3, r0
 800980a:	73fb      	strb	r3, [r7, #15]
 800980c:	460b      	mov	r3, r1
 800980e:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 8009810:	7bfb      	ldrb	r3, [r7, #15]
 8009812:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009816:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800981a:	2218      	movs	r2, #24
 800981c:	2100      	movs	r1, #0
 800981e:	4618      	mov	r0, r3
 8009820:	f003 f8c4 	bl	800c9ac <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009824:	233f      	movs	r3, #63	@ 0x3f
 8009826:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 800982a:	230d      	movs	r3, #13
 800982c:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 8009830:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8009834:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 8009838:	2301      	movs	r3, #1
 800983a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 800983e:	f107 0314 	add.w	r3, r7, #20
 8009842:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 8009846:	2380      	movs	r3, #128	@ 0x80
 8009848:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 800984c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8009850:	2100      	movs	r1, #0
 8009852:	4618      	mov	r0, r3
 8009854:	f000 fa46 	bl	8009ce4 <hci_send_req>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	da01      	bge.n	8009862 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 800985e:	23ff      	movs	r3, #255	@ 0xff
 8009860:	e01e      	b.n	80098a0 <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 8009862:	7d3b      	ldrb	r3, [r7, #20]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d001      	beq.n	800986c <aci_hal_read_config_data+0x6e>
    return rp.status;
 8009868:	7d3b      	ldrb	r3, [r7, #20]
 800986a:	e019      	b.n	80098a0 <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 800986c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009870:	b2db      	uxtb	r3, r3
 8009872:	3b01      	subs	r3, #1
 8009874:	b2da      	uxtb	r2, r3
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	461a      	mov	r2, r3
 8009880:	89bb      	ldrh	r3, [r7, #12]
 8009882:	4293      	cmp	r3, r2
 8009884:	d201      	bcs.n	800988a <aci_hal_read_config_data+0x8c>
 8009886:	89ba      	ldrh	r2, [r7, #12]
 8009888:	e002      	b.n	8009890 <aci_hal_read_config_data+0x92>
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	461a      	mov	r2, r3
 8009890:	f107 0314 	add.w	r3, r7, #20
 8009894:	3301      	adds	r3, #1
 8009896:	4619      	mov	r1, r3
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f003 f906 	bl	800caaa <memcpy>
  
  return 0;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	37b0      	adds	r7, #176	@ 0xb0
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08a      	sub	sp, #40	@ 0x28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	4603      	mov	r3, r0
 80098b0:	460a      	mov	r2, r1
 80098b2:	71fb      	strb	r3, [r7, #7]
 80098b4:	4613      	mov	r3, r2
 80098b6:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 80098b8:	79fb      	ldrb	r3, [r7, #7]
 80098ba:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 80098bc:	79bb      	ldrb	r3, [r7, #6]
 80098be:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80098c0:	f107 0310 	add.w	r3, r7, #16
 80098c4:	2218      	movs	r2, #24
 80098c6:	2100      	movs	r1, #0
 80098c8:	4618      	mov	r0, r3
 80098ca:	f003 f86f 	bl	800c9ac <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80098ce:	233f      	movs	r3, #63	@ 0x3f
 80098d0:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 80098d2:	230f      	movs	r3, #15
 80098d4:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 80098d6:	f107 030c 	add.w	r3, r7, #12
 80098da:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 80098dc:	2302      	movs	r3, #2
 80098de:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 80098e0:	f107 030b 	add.w	r3, r7, #11
 80098e4:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 80098e6:	2301      	movs	r3, #1
 80098e8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 80098ea:	f107 0310 	add.w	r3, r7, #16
 80098ee:	2100      	movs	r1, #0
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 f9f7 	bl	8009ce4 <hci_send_req>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	da01      	bge.n	8009900 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 80098fc:	23ff      	movs	r3, #255	@ 0xff
 80098fe:	e000      	b.n	8009902 <aci_hal_set_tx_power_level+0x5a>

  return status;
 8009900:	7afb      	ldrb	r3, [r7, #11]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3728      	adds	r7, #40	@ 0x28
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800990a:	b590      	push	{r4, r7, lr}
 800990c:	b089      	sub	sp, #36	@ 0x24
 800990e:	af02      	add	r7, sp, #8
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8009914:	f107 0410 	add.w	r4, r7, #16
 8009918:	f107 0215 	add.w	r2, r7, #21
 800991c:	f107 0112 	add.w	r1, r7, #18
 8009920:	f107 0016 	add.w	r0, r7, #22
 8009924:	f107 030e 	add.w	r3, r7, #14
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	4623      	mov	r3, r4
 800992c:	f000 f851 	bl	80099d2 <hci_le_read_local_version>
 8009930:	4603      	mov	r3, r0
 8009932:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8009934:	7dfb      	ldrb	r3, [r7, #23]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d124      	bne.n	8009984 <getBlueNRGVersion+0x7a>
    *hwVersion = hci_revision >> 8;
 800993a:	8a7b      	ldrh	r3, [r7, #18]
 800993c:	0a1b      	lsrs	r3, r3, #8
 800993e:	b29b      	uxth	r3, r3
 8009940:	b2da      	uxtb	r2, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8009946:	8a7b      	ldrh	r3, [r7, #18]
 8009948:	021b      	lsls	r3, r3, #8
 800994a:	b29a      	uxth	r2, r3
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	881b      	ldrh	r3, [r3, #0]
 8009954:	b21a      	sxth	r2, r3
 8009956:	89fb      	ldrh	r3, [r7, #14]
 8009958:	b21b      	sxth	r3, r3
 800995a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800995e:	b21b      	sxth	r3, r3
 8009960:	4313      	orrs	r3, r2
 8009962:	b21b      	sxth	r3, r3
 8009964:	b29a      	uxth	r2, r3
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	881b      	ldrh	r3, [r3, #0]
 800996e:	b21a      	sxth	r2, r3
 8009970:	89fb      	ldrh	r3, [r7, #14]
 8009972:	b21b      	sxth	r3, r3
 8009974:	f003 030f 	and.w	r3, r3, #15
 8009978:	b21b      	sxth	r3, r3
 800997a:	4313      	orrs	r3, r2
 800997c:	b21b      	sxth	r3, r3
 800997e:	b29a      	uxth	r2, r3
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8009984:	7dfb      	ldrb	r3, [r7, #23]
}
 8009986:	4618      	mov	r0, r3
 8009988:	371c      	adds	r7, #28
 800998a:	46bd      	mov	sp, r7
 800998c:	bd90      	pop	{r4, r7, pc}

0800998e <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b088      	sub	sp, #32
 8009992:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009994:	f107 0308 	add.w	r3, r7, #8
 8009998:	2218      	movs	r2, #24
 800999a:	2100      	movs	r1, #0
 800999c:	4618      	mov	r0, r3
 800999e:	f003 f805 	bl	800c9ac <memset>
  rq.ogf = OGF_HOST_CTL;
 80099a2:	2303      	movs	r3, #3
 80099a4:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 80099a6:	2303      	movs	r3, #3
 80099a8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80099aa:	1dfb      	adds	r3, r7, #7
 80099ac:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80099ae:	2301      	movs	r3, #1
 80099b0:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 80099b2:	f107 0308 	add.w	r3, r7, #8
 80099b6:	2100      	movs	r1, #0
 80099b8:	4618      	mov	r0, r3
 80099ba:	f000 f993 	bl	8009ce4 <hci_send_req>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	da01      	bge.n	80099c8 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 80099c4:	23ff      	movs	r3, #255	@ 0xff
 80099c6:	e000      	b.n	80099ca <hci_reset+0x3c>
  
  return status;  
 80099c8:	79fb      	ldrb	r3, [r7, #7]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3720      	adds	r7, #32
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b08e      	sub	sp, #56	@ 0x38
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	60f8      	str	r0, [r7, #12]
 80099da:	60b9      	str	r1, [r7, #8]
 80099dc:	607a      	str	r2, [r7, #4]
 80099de:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80099e0:	f107 0314 	add.w	r3, r7, #20
 80099e4:	2209      	movs	r2, #9
 80099e6:	2100      	movs	r1, #0
 80099e8:	4618      	mov	r0, r3
 80099ea:	f002 ffdf 	bl	800c9ac <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80099ee:	f107 0320 	add.w	r3, r7, #32
 80099f2:	2218      	movs	r2, #24
 80099f4:	2100      	movs	r1, #0
 80099f6:	4618      	mov	r0, r3
 80099f8:	f002 ffd8 	bl	800c9ac <memset>
  rq.ogf = OGF_INFO_PARAM;
 80099fc:	2304      	movs	r3, #4
 80099fe:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8009a00:	2301      	movs	r3, #1
 8009a02:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 8009a04:	2300      	movs	r3, #0
 8009a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8009a0c:	f107 0314 	add.w	r3, r7, #20
 8009a10:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8009a12:	2309      	movs	r3, #9
 8009a14:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009a16:	f107 0320 	add.w	r3, r7, #32
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 f961 	bl	8009ce4 <hci_send_req>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	da01      	bge.n	8009a2c <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8009a28:	23ff      	movs	r3, #255	@ 0xff
 8009a2a:	e018      	b.n	8009a5e <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8009a2c:	7d3b      	ldrb	r3, [r7, #20]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <hci_le_read_local_version+0x64>
    return resp.status;
 8009a32:	7d3b      	ldrb	r3, [r7, #20]
 8009a34:	e013      	b.n	8009a5e <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8009a36:	7d7a      	ldrb	r2, [r7, #21]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8009a3c:	8afa      	ldrh	r2, [r7, #22]
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8009a42:	7e3a      	ldrb	r2, [r7, #24]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8009a48:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8009a4c:	b29a      	uxth	r2, r3
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8009a52:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8009a56:	b29a      	uxth	r2, r3
 8009a58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a5a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3738      	adds	r7, #56	@ 0x38
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b092      	sub	sp, #72	@ 0x48
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	6039      	str	r1, [r7, #0]
 8009a70:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8009a72:	f107 0310 	add.w	r3, r7, #16
 8009a76:	2220      	movs	r2, #32
 8009a78:	2100      	movs	r1, #0
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f002 ff96 	bl	800c9ac <memset>
  scan_resp_cp.length = length;
 8009a80:	79fb      	ldrb	r3, [r7, #7]
 8009a82:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8009a84:	79fb      	ldrb	r3, [r7, #7]
 8009a86:	2b1f      	cmp	r3, #31
 8009a88:	bf28      	it	cs
 8009a8a:	231f      	movcs	r3, #31
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	461a      	mov	r2, r3
 8009a90:	f107 0310 	add.w	r3, r7, #16
 8009a94:	3301      	adds	r3, #1
 8009a96:	6839      	ldr	r1, [r7, #0]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f003 f806 	bl	800caaa <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009a9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009aa2:	2218      	movs	r2, #24
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f002 ff80 	bl	800c9ac <memset>
  rq.ogf = OGF_LE_CTL;
 8009aac:	2308      	movs	r3, #8
 8009aae:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8009ab0:	2309      	movs	r3, #9
 8009ab2:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 8009ab4:	f107 0310 	add.w	r3, r7, #16
 8009ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8009aba:	2320      	movs	r3, #32
 8009abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 8009abe:	f107 030f 	add.w	r3, r7, #15
 8009ac2:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009ac8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009acc:	2100      	movs	r1, #0
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f000 f908 	bl	8009ce4 <hci_send_req>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	da01      	bge.n	8009ade <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8009ada:	23ff      	movs	r3, #255	@ 0xff
 8009adc:	e000      	b.n	8009ae0 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8009ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3748      	adds	r7, #72	@ 0x48
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	3308      	adds	r3, #8
 8009af4:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	2b04      	cmp	r3, #4
 8009afc:	d001      	beq.n	8009b02 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8009afe:	2301      	movs	r3, #1
 8009b00:	e00c      	b.n	8009b1c <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	3302      	adds	r3, #2
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	461a      	mov	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009b10:	3b03      	subs	r3, #3
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d001      	beq.n	8009b1a <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8009b16:	2302      	movs	r3, #2
 8009b18:	e000      	b.n	8009b1c <verify_packet+0x34>
  
  return 0;      
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3714      	adds	r7, #20
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b0a6      	sub	sp, #152	@ 0x98
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	607b      	str	r3, [r7, #4]
 8009b30:	4603      	mov	r3, r0
 8009b32:	81fb      	strh	r3, [r7, #14]
 8009b34:	460b      	mov	r3, r1
 8009b36:	81bb      	strh	r3, [r7, #12]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8009b3c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b44:	b21a      	sxth	r2, r3
 8009b46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009b4a:	029b      	lsls	r3, r3, #10
 8009b4c:	b21b      	sxth	r3, r3
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	b21b      	sxth	r3, r3
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8009b56:	7afb      	ldrb	r3, [r7, #11]
 8009b58:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8009b5e:	f107 0318 	add.w	r3, r7, #24
 8009b62:	3301      	adds	r3, #1
 8009b64:	461a      	mov	r2, r3
 8009b66:	f107 0314 	add.w	r3, r7, #20
 8009b6a:	8819      	ldrh	r1, [r3, #0]
 8009b6c:	789b      	ldrb	r3, [r3, #2]
 8009b6e:	8011      	strh	r1, [r2, #0]
 8009b70:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8009b72:	f107 0318 	add.w	r3, r7, #24
 8009b76:	3304      	adds	r3, #4
 8009b78:	7afa      	ldrb	r2, [r7, #11]
 8009b7a:	6879      	ldr	r1, [r7, #4]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f002 ff94 	bl	800caaa <memcpy>
  
  if (hciContext.io.Send)
 8009b82:	4b09      	ldr	r3, [pc, #36]	@ (8009ba8 <send_cmd+0x80>)
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d009      	beq.n	8009b9e <send_cmd+0x76>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8009b8a:	4b07      	ldr	r3, [pc, #28]	@ (8009ba8 <send_cmd+0x80>)
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	7afa      	ldrb	r2, [r7, #11]
 8009b90:	b292      	uxth	r2, r2
 8009b92:	3204      	adds	r2, #4
 8009b94:	b291      	uxth	r1, r2
 8009b96:	f107 0218 	add.w	r2, r7, #24
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	4798      	blx	r3
  }
}
 8009b9e:	bf00      	nop
 8009ba0:	3798      	adds	r7, #152	@ 0x98
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	200021bc 	.word	0x200021bc

08009bac <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8009bb6:	e00a      	b.n	8009bce <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8009bb8:	f107 030c 	add.w	r3, r7, #12
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6838      	ldr	r0, [r7, #0]
 8009bc0:	f000 fae8 	bl	800a194 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fa4f 	bl	800a06c <list_insert_head>
  while (!list_is_empty(src_list))
 8009bce:	6838      	ldr	r0, [r7, #0]
 8009bd0:	f000 fa2a 	bl	800a028 <list_is_empty>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d0ee      	beq.n	8009bb8 <move_list+0xc>
  }
}
 8009bda:	bf00      	nop
 8009bdc:	bf00      	nop
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009bea:	e009      	b.n	8009c00 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8009bec:	1d3b      	adds	r3, r7, #4
 8009bee:	4619      	mov	r1, r3
 8009bf0:	4809      	ldr	r0, [pc, #36]	@ (8009c18 <free_event_list+0x34>)
 8009bf2:	f000 faa8 	bl	800a146 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	4808      	ldr	r0, [pc, #32]	@ (8009c1c <free_event_list+0x38>)
 8009bfc:	f000 fa5c 	bl	800a0b8 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009c00:	4806      	ldr	r0, [pc, #24]	@ (8009c1c <free_event_list+0x38>)
 8009c02:	f000 faee 	bl	800a1e2 <list_get_size>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	ddef      	ble.n	8009bec <free_event_list+0x8>
  }
}
 8009c0c:	bf00      	nop
 8009c0e:	bf00      	nop
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	20001ef8 	.word	0x20001ef8
 8009c1c:	20001ef0 	.word	0x20001ef0

08009c20 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d002      	beq.n	8009c36 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8009c30:	4a18      	ldr	r2, [pc, #96]	@ (8009c94 <hci_init+0x74>)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8009c36:	4818      	ldr	r0, [pc, #96]	@ (8009c98 <hci_init+0x78>)
 8009c38:	f000 f9e6 	bl	800a008 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8009c3c:	4817      	ldr	r0, [pc, #92]	@ (8009c9c <hci_init+0x7c>)
 8009c3e:	f000 f9e3 	bl	800a008 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8009c42:	f7f8 f9d3 	bl	8001fec <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009c46:	2300      	movs	r3, #0
 8009c48:	73fb      	strb	r3, [r7, #15]
 8009c4a:	e00c      	b.n	8009c66 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8009c4c:	7bfb      	ldrb	r3, [r7, #15]
 8009c4e:	228c      	movs	r2, #140	@ 0x8c
 8009c50:	fb02 f303 	mul.w	r3, r2, r3
 8009c54:	4a12      	ldr	r2, [pc, #72]	@ (8009ca0 <hci_init+0x80>)
 8009c56:	4413      	add	r3, r2
 8009c58:	4619      	mov	r1, r3
 8009c5a:	480f      	ldr	r0, [pc, #60]	@ (8009c98 <hci_init+0x78>)
 8009c5c:	f000 fa2c 	bl	800a0b8 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
 8009c62:	3301      	adds	r3, #1
 8009c64:	73fb      	strb	r3, [r7, #15]
 8009c66:	7bfb      	ldrb	r3, [r7, #15]
 8009c68:	2b04      	cmp	r3, #4
 8009c6a:	d9ef      	bls.n	8009c4c <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8009c6c:	4b09      	ldr	r3, [pc, #36]	@ (8009c94 <hci_init+0x74>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d003      	beq.n	8009c7c <hci_init+0x5c>
 8009c74:	4b07      	ldr	r3, [pc, #28]	@ (8009c94 <hci_init+0x74>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2000      	movs	r0, #0
 8009c7a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8009c7c:	4b05      	ldr	r3, [pc, #20]	@ (8009c94 <hci_init+0x74>)
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d002      	beq.n	8009c8a <hci_init+0x6a>
 8009c84:	4b03      	ldr	r3, [pc, #12]	@ (8009c94 <hci_init+0x74>)
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	4798      	blx	r3
}
 8009c8a:	bf00      	nop
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	200021bc 	.word	0x200021bc
 8009c98:	20001ef0 	.word	0x20001ef0
 8009c9c:	20001ef8 	.word	0x20001ef8
 8009ca0:	20001f00 	.word	0x20001f00

08009ca4 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8009ce0 <hci_register_io_bus+0x3c>)
 8009cb2:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	4a09      	ldr	r2, [pc, #36]	@ (8009ce0 <hci_register_io_bus+0x3c>)
 8009cba:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	691b      	ldr	r3, [r3, #16]
 8009cc0:	4a07      	ldr	r2, [pc, #28]	@ (8009ce0 <hci_register_io_bus+0x3c>)
 8009cc2:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	4a05      	ldr	r2, [pc, #20]	@ (8009ce0 <hci_register_io_bus+0x3c>)
 8009cca:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	4a03      	ldr	r2, [pc, #12]	@ (8009ce0 <hci_register_io_bus+0x3c>)
 8009cd2:	6093      	str	r3, [r2, #8]
}
 8009cd4:	bf00      	nop
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr
 8009ce0:	200021bc 	.word	0x200021bc

08009ce4 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b08e      	sub	sp, #56	@ 0x38
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	885b      	ldrh	r3, [r3, #2]
 8009cf4:	b21b      	sxth	r3, r3
 8009cf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cfa:	b21a      	sxth	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	b21b      	sxth	r3, r3
 8009d02:	029b      	lsls	r3, r3, #10
 8009d04:	b21b      	sxth	r3, r3
 8009d06:	4313      	orrs	r3, r2
 8009d08:	b21b      	sxth	r3, r3
 8009d0a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8009d10:	f107 0308 	add.w	r3, r7, #8
 8009d14:	4618      	mov	r0, r3
 8009d16:	f000 f977 	bl	800a008 <list_init_head>

  free_event_list();
 8009d1a:	f7ff ff63 	bl	8009be4 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	8818      	ldrh	r0, [r3, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	8859      	ldrh	r1, [r3, #2]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	b2da      	uxtb	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	f7ff fefa 	bl	8009b28 <send_cmd>
  
  if (async)
 8009d34:	78fb      	ldrb	r3, [r7, #3]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d001      	beq.n	8009d3e <hci_send_req+0x5a>
  {
    return 0;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	e0e2      	b.n	8009f04 <hci_send_req+0x220>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8009d3e:	f7fa f8a5 	bl	8003e8c <HAL_GetTick>
 8009d42:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8009d44:	f7fa f8a2 	bl	8003e8c <HAL_GetTick>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d4c:	1ad3      	subs	r3, r2, r3
 8009d4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009d52:	f200 80b3 	bhi.w	8009ebc <hci_send_req+0x1d8>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8009d56:	486d      	ldr	r0, [pc, #436]	@ (8009f0c <hci_send_req+0x228>)
 8009d58:	f000 f966 	bl	800a028 <list_is_empty>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d000      	beq.n	8009d64 <hci_send_req+0x80>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8009d62:	e7ef      	b.n	8009d44 <hci_send_req+0x60>
      {
        break;
 8009d64:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8009d66:	f107 0310 	add.w	r3, r7, #16
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	4867      	ldr	r0, [pc, #412]	@ (8009f0c <hci_send_req+0x228>)
 8009d6e:	f000 f9ea 	bl	800a146 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	3308      	adds	r3, #8
 8009d76:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8009d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	2b04      	cmp	r3, #4
 8009d7e:	d17f      	bne.n	8009e80 <hci_send_req+0x19c>
    {
      event_pckt = (void *)(hci_hdr->data);
 8009d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d82:	3301      	adds	r3, #1
 8009d84:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	3308      	adds	r3, #8
 8009d8a:	3303      	adds	r3, #3
 8009d8c:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009d94:	3b03      	subs	r3, #3
 8009d96:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8009d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d9e:	d04c      	beq.n	8009e3a <hci_send_req+0x156>
 8009da0:	2b3e      	cmp	r3, #62	@ 0x3e
 8009da2:	dc68      	bgt.n	8009e76 <hci_send_req+0x192>
 8009da4:	2b10      	cmp	r3, #16
 8009da6:	f000 808b 	beq.w	8009ec0 <hci_send_req+0x1dc>
 8009daa:	2b10      	cmp	r3, #16
 8009dac:	dc63      	bgt.n	8009e76 <hci_send_req+0x192>
 8009dae:	2b0e      	cmp	r3, #14
 8009db0:	d023      	beq.n	8009dfa <hci_send_req+0x116>
 8009db2:	2b0f      	cmp	r3, #15
 8009db4:	d15f      	bne.n	8009e76 <hci_send_req+0x192>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8009db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db8:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	885b      	ldrh	r3, [r3, #2]
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d17e      	bne.n	8009ec4 <hci_send_req+0x1e0>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	2b0f      	cmp	r3, #15
 8009dcc:	d004      	beq.n	8009dd8 <hci_send_req+0xf4>
          if (cs->status) {
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d051      	beq.n	8009e7a <hci_send_req+0x196>
            goto failed;
 8009dd6:	e078      	b.n	8009eca <hci_send_req+0x1e6>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	695a      	ldr	r2, [r3, #20]
 8009ddc:	6a3b      	ldr	r3, [r7, #32]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	bf28      	it	cs
 8009de2:	461a      	movcs	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6918      	ldr	r0, [r3, #16]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	695b      	ldr	r3, [r3, #20]
 8009df0:	461a      	mov	r2, r3
 8009df2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009df4:	f002 fe59 	bl	800caaa <memcpy>
        goto done;
 8009df8:	e078      	b.n	8009eec <hci_send_req+0x208>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfc:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d15d      	bne.n	8009ec8 <hci_send_req+0x1e4>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0e:	3303      	adds	r3, #3
 8009e10:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8009e12:	6a3b      	ldr	r3, [r7, #32]
 8009e14:	3b03      	subs	r3, #3
 8009e16:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	695a      	ldr	r2, [r3, #20]
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	bf28      	it	cs
 8009e22:	461a      	movcs	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6918      	ldr	r0, [r3, #16]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	695b      	ldr	r3, [r3, #20]
 8009e30:	461a      	mov	r2, r3
 8009e32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009e34:	f002 fe39 	bl	800caaa <memcpy>
        goto done;
 8009e38:	e058      	b.n	8009eec <hci_send_req+0x208>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3c:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d118      	bne.n	8009e7e <hci_send_req+0x19a>
          break;
      
        len -= 1;
 8009e4c:	6a3b      	ldr	r3, [r7, #32]
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	695a      	ldr	r2, [r3, #20]
 8009e56:	6a3b      	ldr	r3, [r7, #32]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	bf28      	it	cs
 8009e5c:	461a      	movcs	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6918      	ldr	r0, [r3, #16]
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	1c59      	adds	r1, r3, #1
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	695b      	ldr	r3, [r3, #20]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	f002 fe1b 	bl	800caaa <memcpy>
        goto done;
 8009e74:	e03a      	b.n	8009eec <hci_send_req+0x208>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8009e76:	bf00      	nop
 8009e78:	e002      	b.n	8009e80 <hci_send_req+0x19c>
          break;
 8009e7a:	bf00      	nop
 8009e7c:	e000      	b.n	8009e80 <hci_send_req+0x19c>
          break;
 8009e7e:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8009e80:	4823      	ldr	r0, [pc, #140]	@ (8009f10 <hci_send_req+0x22c>)
 8009e82:	f000 f8d1 	bl	800a028 <list_is_empty>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00d      	beq.n	8009ea8 <hci_send_req+0x1c4>
 8009e8c:	481f      	ldr	r0, [pc, #124]	@ (8009f0c <hci_send_req+0x228>)
 8009e8e:	f000 f8cb 	bl	800a028 <list_is_empty>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d007      	beq.n	8009ea8 <hci_send_req+0x1c4>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	481c      	ldr	r0, [pc, #112]	@ (8009f10 <hci_send_req+0x22c>)
 8009e9e:	f000 f90b 	bl	800a0b8 <list_insert_tail>
      hciReadPacket=NULL;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	613b      	str	r3, [r7, #16]
 8009ea6:	e008      	b.n	8009eba <hci_send_req+0x1d6>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	f107 0308 	add.w	r3, r7, #8
 8009eae:	4611      	mov	r1, r2
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f000 f901 	bl	800a0b8 <list_insert_tail>
      hciReadPacket=NULL;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	613b      	str	r3, [r7, #16]
  {
 8009eba:	e740      	b.n	8009d3e <hci_send_req+0x5a>
        goto failed;
 8009ebc:	bf00      	nop
 8009ebe:	e004      	b.n	8009eca <hci_send_req+0x1e6>
        goto failed;
 8009ec0:	bf00      	nop
 8009ec2:	e002      	b.n	8009eca <hci_send_req+0x1e6>
          goto failed;
 8009ec4:	bf00      	nop
 8009ec6:	e000      	b.n	8009eca <hci_send_req+0x1e6>
          goto failed;
 8009ec8:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d004      	beq.n	8009eda <hci_send_req+0x1f6>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	480e      	ldr	r0, [pc, #56]	@ (8009f10 <hci_send_req+0x22c>)
 8009ed6:	f000 f8c9 	bl	800a06c <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009eda:	f107 0308 	add.w	r3, r7, #8
 8009ede:	4619      	mov	r1, r3
 8009ee0:	480a      	ldr	r0, [pc, #40]	@ (8009f0c <hci_send_req+0x228>)
 8009ee2:	f7ff fe63 	bl	8009bac <move_list>

  return -1;
 8009ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eea:	e00b      	b.n	8009f04 <hci_send_req+0x220>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	4619      	mov	r1, r3
 8009ef0:	4807      	ldr	r0, [pc, #28]	@ (8009f10 <hci_send_req+0x22c>)
 8009ef2:	f000 f8bb 	bl	800a06c <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009ef6:	f107 0308 	add.w	r3, r7, #8
 8009efa:	4619      	mov	r1, r3
 8009efc:	4803      	ldr	r0, [pc, #12]	@ (8009f0c <hci_send_req+0x228>)
 8009efe:	f7ff fe55 	bl	8009bac <move_list>

  return 0;
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3738      	adds	r7, #56	@ 0x38
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	20001ef8 	.word	0x20001ef8
 8009f10:	20001ef0 	.word	0x20001ef0

08009f14 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009f1e:	e013      	b.n	8009f48 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8009f20:	1d3b      	adds	r3, r7, #4
 8009f22:	4619      	mov	r1, r3
 8009f24:	480e      	ldr	r0, [pc, #56]	@ (8009f60 <hci_user_evt_proc+0x4c>)
 8009f26:	f000 f90e 	bl	800a146 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8009f64 <hci_user_evt_proc+0x50>)
 8009f2c:	69db      	ldr	r3, [r3, #28]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d005      	beq.n	8009f3e <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8009f32:	4b0c      	ldr	r3, [pc, #48]	@ (8009f64 <hci_user_evt_proc+0x50>)
 8009f34:	69db      	ldr	r3, [r3, #28]
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	3208      	adds	r2, #8
 8009f3a:	4610      	mov	r0, r2
 8009f3c:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4619      	mov	r1, r3
 8009f42:	4809      	ldr	r0, [pc, #36]	@ (8009f68 <hci_user_evt_proc+0x54>)
 8009f44:	f000 f8b8 	bl	800a0b8 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009f48:	4805      	ldr	r0, [pc, #20]	@ (8009f60 <hci_user_evt_proc+0x4c>)
 8009f4a:	f000 f86d 	bl	800a028 <list_is_empty>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d0e5      	beq.n	8009f20 <hci_user_evt_proc+0xc>
  }
}
 8009f54:	bf00      	nop
 8009f56:	bf00      	nop
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	20001ef8 	.word	0x20001ef8
 8009f64:	200021bc 	.word	0x200021bc
 8009f68:	20001ef0 	.word	0x20001ef0

08009f6c <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b086      	sub	sp, #24
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8009f74:	2300      	movs	r3, #0
 8009f76:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8009f7c:	481f      	ldr	r0, [pc, #124]	@ (8009ffc <hci_notify_asynch_evt+0x90>)
 8009f7e:	f000 f853 	bl	800a028 <list_is_empty>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d132      	bne.n	8009fee <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8009f88:	f107 030c 	add.w	r3, r7, #12
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	481b      	ldr	r0, [pc, #108]	@ (8009ffc <hci_notify_asynch_evt+0x90>)
 8009f90:	f000 f8d9 	bl	800a146 <list_remove_head>
    
    if (hciContext.io.Receive)
 8009f94:	4b1a      	ldr	r3, [pc, #104]	@ (800a000 <hci_notify_asynch_evt+0x94>)
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d02a      	beq.n	8009ff2 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8009f9c:	4b18      	ldr	r3, [pc, #96]	@ (800a000 <hci_notify_asynch_evt+0x94>)
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	3208      	adds	r2, #8
 8009fa4:	2180      	movs	r1, #128	@ 0x80
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	4798      	blx	r3
 8009faa:	4603      	mov	r3, r0
 8009fac:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8009fae:	7cfb      	ldrb	r3, [r7, #19]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d016      	beq.n	8009fe2 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	7cfa      	ldrb	r2, [r7, #19]
 8009fb8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7ff fd92 	bl	8009ae8 <verify_packet>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d105      	bne.n	8009fd6 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	4619      	mov	r1, r3
 8009fce:	480d      	ldr	r0, [pc, #52]	@ (800a004 <hci_notify_asynch_evt+0x98>)
 8009fd0:	f000 f872 	bl	800a0b8 <list_insert_tail>
 8009fd4:	e00d      	b.n	8009ff2 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	4619      	mov	r1, r3
 8009fda:	4808      	ldr	r0, [pc, #32]	@ (8009ffc <hci_notify_asynch_evt+0x90>)
 8009fdc:	f000 f846 	bl	800a06c <list_insert_head>
 8009fe0:	e007      	b.n	8009ff2 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	4805      	ldr	r0, [pc, #20]	@ (8009ffc <hci_notify_asynch_evt+0x90>)
 8009fe8:	f000 f840 	bl	800a06c <list_insert_head>
 8009fec:	e001      	b.n	8009ff2 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8009ff2:	697b      	ldr	r3, [r7, #20]

}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3718      	adds	r7, #24
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	20001ef0 	.word	0x20001ef0
 800a000:	200021bc 	.word	0x200021bc
 800a004:	20001ef8 	.word	0x20001ef8

0800a008 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	605a      	str	r2, [r3, #4]
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800a028:	b480      	push	{r7}
 800a02a:	b087      	sub	sp, #28
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a030:	f3ef 8310 	mrs	r3, PRIMASK
 800a034:	60fb      	str	r3, [r7, #12]
  return(result);
 800a036:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a038:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a03a:	b672      	cpsid	i
}
 800a03c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	429a      	cmp	r2, r3
 800a046:	d102      	bne.n	800a04e <list_is_empty+0x26>
  {
    return_value = 1;
 800a048:	2301      	movs	r3, #1
 800a04a:	75fb      	strb	r3, [r7, #23]
 800a04c:	e001      	b.n	800a052 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800a04e:	2300      	movs	r3, #0
 800a050:	75fb      	strb	r3, [r7, #23]
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	f383 8810 	msr	PRIMASK, r3
}
 800a05c:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800a05e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a060:	4618      	mov	r0, r3
 800a062:	371c      	adds	r7, #28
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b087      	sub	sp, #28
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a076:	f3ef 8310 	mrs	r3, PRIMASK
 800a07a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a07c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a07e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a080:	b672      	cpsid	i
}
 800a082:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	683a      	ldr	r2, [r7, #0]
 800a096:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	683a      	ldr	r2, [r7, #0]
 800a09e:	605a      	str	r2, [r3, #4]
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	f383 8810 	msr	PRIMASK, r3
}
 800a0aa:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a0ac:	bf00      	nop
 800a0ae:	371c      	adds	r7, #28
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b087      	sub	sp, #28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0c2:	f3ef 8310 	mrs	r3, PRIMASK
 800a0c6:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a0ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0cc:	b672      	cpsid	i
}
 800a0ce:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	685a      	ldr	r2, [r3, #4]
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	683a      	ldr	r2, [r7, #0]
 800a0e2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	683a      	ldr	r2, [r7, #0]
 800a0ea:	601a      	str	r2, [r3, #0]
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	f383 8810 	msr	PRIMASK, r3
}
 800a0f6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a0f8:	bf00      	nop
 800a0fa:	371c      	adds	r7, #28
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800a104:	b480      	push	{r7}
 800a106:	b087      	sub	sp, #28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a10c:	f3ef 8310 	mrs	r3, PRIMASK
 800a110:	60fb      	str	r3, [r7, #12]
  return(result);
 800a112:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a114:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a116:	b672      	cpsid	i
}
 800a118:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	6812      	ldr	r2, [r2, #0]
 800a122:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	6852      	ldr	r2, [r2, #4]
 800a12c:	605a      	str	r2, [r3, #4]
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	f383 8810 	msr	PRIMASK, r3
}
 800a138:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a13a:	bf00      	nop
 800a13c:	371c      	adds	r7, #28
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b086      	sub	sp, #24
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a150:	f3ef 8310 	mrs	r3, PRIMASK
 800a154:	60fb      	str	r3, [r7, #12]
  return(result);
 800a156:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a158:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a15a:	b672      	cpsid	i
}
 800a15c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7ff ffca 	bl	800a104 <list_remove_node>
  (*node)->next = NULL;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2200      	movs	r2, #0
 800a176:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2200      	movs	r2, #0
 800a17e:	605a      	str	r2, [r3, #4]
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	f383 8810 	msr	PRIMASK, r3
}
 800a18a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a18c:	bf00      	nop
 800a18e:	3718      	adds	r7, #24
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b086      	sub	sp, #24
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a19e:	f3ef 8310 	mrs	r3, PRIMASK
 800a1a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a1a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1a8:	b672      	cpsid	i
}
 800a1aa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7ff ffa3 	bl	800a104 <list_remove_node>
  (*node)->next = NULL;
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	605a      	str	r2, [r3, #4]
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	f383 8810 	msr	PRIMASK, r3
}
 800a1d8:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a1da:	bf00      	nop
 800a1dc:	3718      	adds	r7, #24
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b089      	sub	sp, #36	@ 0x24
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  int size = 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1ee:	f3ef 8310 	mrs	r3, PRIMASK
 800a1f2:	613b      	str	r3, [r7, #16]
  return(result);
 800a1f4:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a1f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1f8:	b672      	cpsid	i
}
 800a1fa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800a202:	e005      	b.n	800a210 <list_get_size+0x2e>
  {
    size++;
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	3301      	adds	r3, #1
 800a208:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800a210:	69ba      	ldr	r2, [r7, #24]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	429a      	cmp	r2, r3
 800a216:	d1f5      	bne.n	800a204 <list_get_size+0x22>
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f383 8810 	msr	PRIMASK, r3
}
 800a222:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800a224:	69fb      	ldr	r3, [r7, #28]
}
 800a226:	4618      	mov	r0, r3
 800a228:	3724      	adds	r7, #36	@ 0x24
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr

0800a232 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a232:	b480      	push	{r7}
 800a234:	b085      	sub	sp, #20
 800a236:	af00      	add	r7, sp, #0
 800a238:	4603      	mov	r3, r0
 800a23a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a23c:	2300      	movs	r3, #0
 800a23e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a240:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a244:	2b84      	cmp	r3, #132	@ 0x84
 800a246:	d005      	beq.n	800a254 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a248:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4413      	add	r3, r2
 800a250:	3303      	adds	r3, #3
 800a252:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a254:	68fb      	ldr	r3, [r7, #12]
}
 800a256:	4618      	mov	r0, r3
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr

0800a262 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a266:	f000 fae5 	bl	800a834 <vTaskStartScheduler>
  
  return osOK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a270:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a272:	b089      	sub	sp, #36	@ 0x24
 800a274:	af04      	add	r7, sp, #16
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	695b      	ldr	r3, [r3, #20]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d020      	beq.n	800a2c4 <osThreadCreate+0x54>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d01c      	beq.n	800a2c4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	685c      	ldr	r4, [r3, #4]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	691e      	ldr	r6, [r3, #16]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7ff ffc8 	bl	800a232 <makeFreeRtosPriority>
 800a2a2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	695b      	ldr	r3, [r3, #20]
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a2ac:	9202      	str	r2, [sp, #8]
 800a2ae:	9301      	str	r3, [sp, #4]
 800a2b0:	9100      	str	r1, [sp, #0]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	4632      	mov	r2, r6
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	f000 f8ed 	bl	800a498 <xTaskCreateStatic>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	60fb      	str	r3, [r7, #12]
 800a2c2:	e01c      	b.n	800a2fe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685c      	ldr	r4, [r3, #4]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a2d0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7ff ffaa 	bl	800a232 <makeFreeRtosPriority>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	f107 030c 	add.w	r3, r7, #12
 800a2e4:	9301      	str	r3, [sp, #4]
 800a2e6:	9200      	str	r2, [sp, #0]
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	4632      	mov	r2, r6
 800a2ec:	4629      	mov	r1, r5
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f000 f932 	bl	800a558 <xTaskCreate>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d001      	beq.n	800a2fe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	e000      	b.n	800a300 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3714      	adds	r7, #20
 800a304:	46bd      	mov	sp, r7
 800a306:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a308 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d001      	beq.n	800a31e <osDelay+0x16>
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	e000      	b.n	800a320 <osDelay+0x18>
 800a31e:	2301      	movs	r3, #1
 800a320:	4618      	mov	r0, r3
 800a322:	f000 fa51 	bl	800a7c8 <vTaskDelay>
  
  return osOK;
 800a326:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f103 0208 	add.w	r2, r3, #8
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f04f 32ff 	mov.w	r2, #4294967295
 800a348:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f103 0208 	add.w	r2, r3, #8
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f103 0208 	add.w	r2, r3, #8
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a37e:	bf00      	nop
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a38a:	b480      	push	{r7}
 800a38c:	b085      	sub	sp, #20
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
 800a392:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	689a      	ldr	r2, [r3, #8]
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	683a      	ldr	r2, [r7, #0]
 800a3ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	1c5a      	adds	r2, r3, #1
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	601a      	str	r2, [r3, #0]
}
 800a3c6:	bf00      	nop
 800a3c8:	3714      	adds	r7, #20
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b085      	sub	sp, #20
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
 800a3da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e8:	d103      	bne.n	800a3f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	60fb      	str	r3, [r7, #12]
 800a3f0:	e00c      	b.n	800a40c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	3308      	adds	r3, #8
 800a3f6:	60fb      	str	r3, [r7, #12]
 800a3f8:	e002      	b.n	800a400 <vListInsert+0x2e>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	60fb      	str	r3, [r7, #12]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d2f6      	bcs.n	800a3fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	685a      	ldr	r2, [r3, #4]
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	683a      	ldr	r2, [r7, #0]
 800a41a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	683a      	ldr	r2, [r7, #0]
 800a426:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	1c5a      	adds	r2, r3, #1
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	601a      	str	r2, [r3, #0]
}
 800a438:	bf00      	nop
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	6892      	ldr	r2, [r2, #8]
 800a45a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	6852      	ldr	r2, [r2, #4]
 800a464:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d103      	bne.n	800a478 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	689a      	ldr	r2, [r3, #8]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	1e5a      	subs	r2, r3, #1
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3714      	adds	r7, #20
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b08e      	sub	sp, #56	@ 0x38
 800a49c:	af04      	add	r7, sp, #16
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	607a      	str	r2, [r7, #4]
 800a4a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a4a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d10b      	bne.n	800a4c4 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a4ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b0:	f383 8811 	msr	BASEPRI, r3
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a4be:	bf00      	nop
 800a4c0:	bf00      	nop
 800a4c2:	e7fd      	b.n	800a4c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10b      	bne.n	800a4e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	61fb      	str	r3, [r7, #28]
}
 800a4dc:	bf00      	nop
 800a4de:	bf00      	nop
 800a4e0:	e7fd      	b.n	800a4de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a4e2:	2354      	movs	r3, #84	@ 0x54
 800a4e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	2b54      	cmp	r3, #84	@ 0x54
 800a4ea:	d00b      	beq.n	800a504 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	61bb      	str	r3, [r7, #24]
}
 800a4fe:	bf00      	nop
 800a500:	bf00      	nop
 800a502:	e7fd      	b.n	800a500 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a504:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d01e      	beq.n	800a54a <xTaskCreateStatic+0xb2>
 800a50c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d01b      	beq.n	800a54a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a514:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a518:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a51a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a51e:	2202      	movs	r2, #2
 800a520:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a524:	2300      	movs	r3, #0
 800a526:	9303      	str	r3, [sp, #12]
 800a528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a52a:	9302      	str	r3, [sp, #8]
 800a52c:	f107 0314 	add.w	r3, r7, #20
 800a530:	9301      	str	r3, [sp, #4]
 800a532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a534:	9300      	str	r3, [sp, #0]
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	68b9      	ldr	r1, [r7, #8]
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f000 f850 	bl	800a5e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a542:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a544:	f000 f8d6 	bl	800a6f4 <prvAddNewTaskToReadyList>
 800a548:	e001      	b.n	800a54e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a54a:	2300      	movs	r3, #0
 800a54c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a54e:	697b      	ldr	r3, [r7, #20]
	}
 800a550:	4618      	mov	r0, r3
 800a552:	3728      	adds	r7, #40	@ 0x28
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b08c      	sub	sp, #48	@ 0x30
 800a55c:	af04      	add	r7, sp, #16
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	603b      	str	r3, [r7, #0]
 800a564:	4613      	mov	r3, r2
 800a566:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a568:	88fb      	ldrh	r3, [r7, #6]
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 fed3 	bl	800b318 <pvPortMalloc>
 800a572:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00e      	beq.n	800a598 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a57a:	2054      	movs	r0, #84	@ 0x54
 800a57c:	f000 fecc 	bl	800b318 <pvPortMalloc>
 800a580:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d003      	beq.n	800a590 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	697a      	ldr	r2, [r7, #20]
 800a58c:	631a      	str	r2, [r3, #48]	@ 0x30
 800a58e:	e005      	b.n	800a59c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a590:	6978      	ldr	r0, [r7, #20]
 800a592:	f000 ff8f 	bl	800b4b4 <vPortFree>
 800a596:	e001      	b.n	800a59c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a598:	2300      	movs	r3, #0
 800a59a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d017      	beq.n	800a5d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a5aa:	88fa      	ldrh	r2, [r7, #6]
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	9303      	str	r3, [sp, #12]
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	9302      	str	r3, [sp, #8]
 800a5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b6:	9301      	str	r3, [sp, #4]
 800a5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ba:	9300      	str	r3, [sp, #0]
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	68b9      	ldr	r1, [r7, #8]
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f000 f80e 	bl	800a5e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a5c6:	69f8      	ldr	r0, [r7, #28]
 800a5c8:	f000 f894 	bl	800a6f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	61bb      	str	r3, [r7, #24]
 800a5d0:	e002      	b.n	800a5d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a5d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a5d8:	69bb      	ldr	r3, [r7, #24]
	}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3720      	adds	r7, #32
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b088      	sub	sp, #32
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	60f8      	str	r0, [r7, #12]
 800a5ea:	60b9      	str	r1, [r7, #8]
 800a5ec:	607a      	str	r2, [r7, #4]
 800a5ee:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	4413      	add	r3, r2
 800a600:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	f023 0307 	bic.w	r3, r3, #7
 800a608:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	f003 0307 	and.w	r3, r3, #7
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00b      	beq.n	800a62c <prvInitialiseNewTask+0x4a>
	__asm volatile
 800a614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a618:	f383 8811 	msr	BASEPRI, r3
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	617b      	str	r3, [r7, #20]
}
 800a626:	bf00      	nop
 800a628:	bf00      	nop
 800a62a:	e7fd      	b.n	800a628 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d01f      	beq.n	800a672 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a632:	2300      	movs	r3, #0
 800a634:	61fb      	str	r3, [r7, #28]
 800a636:	e012      	b.n	800a65e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	4413      	add	r3, r2
 800a63e:	7819      	ldrb	r1, [r3, #0]
 800a640:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	4413      	add	r3, r2
 800a646:	3334      	adds	r3, #52	@ 0x34
 800a648:	460a      	mov	r2, r1
 800a64a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	4413      	add	r3, r2
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d006      	beq.n	800a666 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	3301      	adds	r3, #1
 800a65c:	61fb      	str	r3, [r7, #28]
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	2b0f      	cmp	r3, #15
 800a662:	d9e9      	bls.n	800a638 <prvInitialiseNewTask+0x56>
 800a664:	e000      	b.n	800a668 <prvInitialiseNewTask+0x86>
			{
				break;
 800a666:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66a:	2200      	movs	r2, #0
 800a66c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a670:	e003      	b.n	800a67a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a674:	2200      	movs	r2, #0
 800a676:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67c:	2b06      	cmp	r3, #6
 800a67e:	d901      	bls.n	800a684 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a680:	2306      	movs	r3, #6
 800a682:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a686:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a688:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a68c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a68e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a692:	2200      	movs	r2, #0
 800a694:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a698:	3304      	adds	r3, #4
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7ff fe68 	bl	800a370 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a2:	3318      	adds	r3, #24
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7ff fe63 	bl	800a370 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b2:	f1c3 0207 	rsb	r2, r3, #7
 800a6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6be:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a6ce:	683a      	ldr	r2, [r7, #0]
 800a6d0:	68f9      	ldr	r1, [r7, #12]
 800a6d2:	69b8      	ldr	r0, [r7, #24]
 800a6d4:	f000 fc0e 	bl	800aef4 <pxPortInitialiseStack>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a6de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d002      	beq.n	800a6ea <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6ea:	bf00      	nop
 800a6ec:	3720      	adds	r7, #32
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
	...

0800a6f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a6fc:	f000 fd2c 	bl	800b158 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a700:	4b2a      	ldr	r3, [pc, #168]	@ (800a7ac <prvAddNewTaskToReadyList+0xb8>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	3301      	adds	r3, #1
 800a706:	4a29      	ldr	r2, [pc, #164]	@ (800a7ac <prvAddNewTaskToReadyList+0xb8>)
 800a708:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a70a:	4b29      	ldr	r3, [pc, #164]	@ (800a7b0 <prvAddNewTaskToReadyList+0xbc>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d109      	bne.n	800a726 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a712:	4a27      	ldr	r2, [pc, #156]	@ (800a7b0 <prvAddNewTaskToReadyList+0xbc>)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a718:	4b24      	ldr	r3, [pc, #144]	@ (800a7ac <prvAddNewTaskToReadyList+0xb8>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d110      	bne.n	800a742 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a720:	f000 fac4 	bl	800acac <prvInitialiseTaskLists>
 800a724:	e00d      	b.n	800a742 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a726:	4b23      	ldr	r3, [pc, #140]	@ (800a7b4 <prvAddNewTaskToReadyList+0xc0>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d109      	bne.n	800a742 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a72e:	4b20      	ldr	r3, [pc, #128]	@ (800a7b0 <prvAddNewTaskToReadyList+0xbc>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a738:	429a      	cmp	r2, r3
 800a73a:	d802      	bhi.n	800a742 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a73c:	4a1c      	ldr	r2, [pc, #112]	@ (800a7b0 <prvAddNewTaskToReadyList+0xbc>)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a742:	4b1d      	ldr	r3, [pc, #116]	@ (800a7b8 <prvAddNewTaskToReadyList+0xc4>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	3301      	adds	r3, #1
 800a748:	4a1b      	ldr	r2, [pc, #108]	@ (800a7b8 <prvAddNewTaskToReadyList+0xc4>)
 800a74a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a750:	2201      	movs	r2, #1
 800a752:	409a      	lsls	r2, r3
 800a754:	4b19      	ldr	r3, [pc, #100]	@ (800a7bc <prvAddNewTaskToReadyList+0xc8>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4313      	orrs	r3, r2
 800a75a:	4a18      	ldr	r2, [pc, #96]	@ (800a7bc <prvAddNewTaskToReadyList+0xc8>)
 800a75c:	6013      	str	r3, [r2, #0]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a762:	4613      	mov	r3, r2
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	4413      	add	r3, r2
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	4a15      	ldr	r2, [pc, #84]	@ (800a7c0 <prvAddNewTaskToReadyList+0xcc>)
 800a76c:	441a      	add	r2, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	3304      	adds	r3, #4
 800a772:	4619      	mov	r1, r3
 800a774:	4610      	mov	r0, r2
 800a776:	f7ff fe08 	bl	800a38a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a77a:	f000 fd1f 	bl	800b1bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a77e:	4b0d      	ldr	r3, [pc, #52]	@ (800a7b4 <prvAddNewTaskToReadyList+0xc0>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00e      	beq.n	800a7a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a786:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b0 <prvAddNewTaskToReadyList+0xbc>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a790:	429a      	cmp	r2, r3
 800a792:	d207      	bcs.n	800a7a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a794:	4b0b      	ldr	r3, [pc, #44]	@ (800a7c4 <prvAddNewTaskToReadyList+0xd0>)
 800a796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a79a:	601a      	str	r2, [r3, #0]
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7a4:	bf00      	nop
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	200022dc 	.word	0x200022dc
 800a7b0:	200021dc 	.word	0x200021dc
 800a7b4:	200022e8 	.word	0x200022e8
 800a7b8:	200022f8 	.word	0x200022f8
 800a7bc:	200022e4 	.word	0x200022e4
 800a7c0:	200021e0 	.word	0x200021e0
 800a7c4:	e000ed04 	.word	0xe000ed04

0800a7c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d018      	beq.n	800a80c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a7da:	4b14      	ldr	r3, [pc, #80]	@ (800a82c <vTaskDelay+0x64>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00b      	beq.n	800a7fa <vTaskDelay+0x32>
	__asm volatile
 800a7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e6:	f383 8811 	msr	BASEPRI, r3
 800a7ea:	f3bf 8f6f 	isb	sy
 800a7ee:	f3bf 8f4f 	dsb	sy
 800a7f2:	60bb      	str	r3, [r7, #8]
}
 800a7f4:	bf00      	nop
 800a7f6:	bf00      	nop
 800a7f8:	e7fd      	b.n	800a7f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a7fa:	f000 f87d 	bl	800a8f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a7fe:	2100      	movs	r1, #0
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fb11 	bl	800ae28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a806:	f000 f885 	bl	800a914 <xTaskResumeAll>
 800a80a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d107      	bne.n	800a822 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a812:	4b07      	ldr	r3, [pc, #28]	@ (800a830 <vTaskDelay+0x68>)
 800a814:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a818:	601a      	str	r2, [r3, #0]
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a822:	bf00      	nop
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	20002304 	.word	0x20002304
 800a830:	e000ed04 	.word	0xe000ed04

0800a834 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b08a      	sub	sp, #40	@ 0x28
 800a838:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a83a:	2300      	movs	r3, #0
 800a83c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a83e:	2300      	movs	r3, #0
 800a840:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a842:	463a      	mov	r2, r7
 800a844:	1d39      	adds	r1, r7, #4
 800a846:	f107 0308 	add.w	r3, r7, #8
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7f7 fc1a 	bl	8002084 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	9202      	str	r2, [sp, #8]
 800a858:	9301      	str	r3, [sp, #4]
 800a85a:	2300      	movs	r3, #0
 800a85c:	9300      	str	r3, [sp, #0]
 800a85e:	2300      	movs	r3, #0
 800a860:	460a      	mov	r2, r1
 800a862:	491f      	ldr	r1, [pc, #124]	@ (800a8e0 <vTaskStartScheduler+0xac>)
 800a864:	481f      	ldr	r0, [pc, #124]	@ (800a8e4 <vTaskStartScheduler+0xb0>)
 800a866:	f7ff fe17 	bl	800a498 <xTaskCreateStatic>
 800a86a:	4603      	mov	r3, r0
 800a86c:	4a1e      	ldr	r2, [pc, #120]	@ (800a8e8 <vTaskStartScheduler+0xb4>)
 800a86e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a870:	4b1d      	ldr	r3, [pc, #116]	@ (800a8e8 <vTaskStartScheduler+0xb4>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d002      	beq.n	800a87e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a878:	2301      	movs	r3, #1
 800a87a:	617b      	str	r3, [r7, #20]
 800a87c:	e001      	b.n	800a882 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a87e:	2300      	movs	r3, #0
 800a880:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d116      	bne.n	800a8b6 <vTaskStartScheduler+0x82>
	__asm volatile
 800a888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a88c:	f383 8811 	msr	BASEPRI, r3
 800a890:	f3bf 8f6f 	isb	sy
 800a894:	f3bf 8f4f 	dsb	sy
 800a898:	613b      	str	r3, [r7, #16]
}
 800a89a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a89c:	4b13      	ldr	r3, [pc, #76]	@ (800a8ec <vTaskStartScheduler+0xb8>)
 800a89e:	f04f 32ff 	mov.w	r2, #4294967295
 800a8a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a8a4:	4b12      	ldr	r3, [pc, #72]	@ (800a8f0 <vTaskStartScheduler+0xbc>)
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a8aa:	4b12      	ldr	r3, [pc, #72]	@ (800a8f4 <vTaskStartScheduler+0xc0>)
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a8b0:	f000 fbae 	bl	800b010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a8b4:	e00f      	b.n	800a8d6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8bc:	d10b      	bne.n	800a8d6 <vTaskStartScheduler+0xa2>
	__asm volatile
 800a8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	60fb      	str	r3, [r7, #12]
}
 800a8d0:	bf00      	nop
 800a8d2:	bf00      	nop
 800a8d4:	e7fd      	b.n	800a8d2 <vTaskStartScheduler+0x9e>
}
 800a8d6:	bf00      	nop
 800a8d8:	3718      	adds	r7, #24
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	0800e7d4 	.word	0x0800e7d4
 800a8e4:	0800ac7d 	.word	0x0800ac7d
 800a8e8:	20002300 	.word	0x20002300
 800a8ec:	200022fc 	.word	0x200022fc
 800a8f0:	200022e8 	.word	0x200022e8
 800a8f4:	200022e0 	.word	0x200022e0

0800a8f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a8fc:	4b04      	ldr	r3, [pc, #16]	@ (800a910 <vTaskSuspendAll+0x18>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	3301      	adds	r3, #1
 800a902:	4a03      	ldr	r2, [pc, #12]	@ (800a910 <vTaskSuspendAll+0x18>)
 800a904:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a906:	bf00      	nop
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr
 800a910:	20002304 	.word	0x20002304

0800a914 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a91a:	2300      	movs	r3, #0
 800a91c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a91e:	2300      	movs	r3, #0
 800a920:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a922:	4b42      	ldr	r3, [pc, #264]	@ (800aa2c <xTaskResumeAll+0x118>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10b      	bne.n	800a942 <xTaskResumeAll+0x2e>
	__asm volatile
 800a92a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a92e:	f383 8811 	msr	BASEPRI, r3
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	603b      	str	r3, [r7, #0]
}
 800a93c:	bf00      	nop
 800a93e:	bf00      	nop
 800a940:	e7fd      	b.n	800a93e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a942:	f000 fc09 	bl	800b158 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a946:	4b39      	ldr	r3, [pc, #228]	@ (800aa2c <xTaskResumeAll+0x118>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3b01      	subs	r3, #1
 800a94c:	4a37      	ldr	r2, [pc, #220]	@ (800aa2c <xTaskResumeAll+0x118>)
 800a94e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a950:	4b36      	ldr	r3, [pc, #216]	@ (800aa2c <xTaskResumeAll+0x118>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d161      	bne.n	800aa1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a958:	4b35      	ldr	r3, [pc, #212]	@ (800aa30 <xTaskResumeAll+0x11c>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d05d      	beq.n	800aa1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a960:	e02e      	b.n	800a9c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a962:	4b34      	ldr	r3, [pc, #208]	@ (800aa34 <xTaskResumeAll+0x120>)
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	3318      	adds	r3, #24
 800a96e:	4618      	mov	r0, r3
 800a970:	f7ff fd68 	bl	800a444 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	3304      	adds	r3, #4
 800a978:	4618      	mov	r0, r3
 800a97a:	f7ff fd63 	bl	800a444 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a982:	2201      	movs	r2, #1
 800a984:	409a      	lsls	r2, r3
 800a986:	4b2c      	ldr	r3, [pc, #176]	@ (800aa38 <xTaskResumeAll+0x124>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	4a2a      	ldr	r2, [pc, #168]	@ (800aa38 <xTaskResumeAll+0x124>)
 800a98e:	6013      	str	r3, [r2, #0]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a994:	4613      	mov	r3, r2
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	4413      	add	r3, r2
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	4a27      	ldr	r2, [pc, #156]	@ (800aa3c <xTaskResumeAll+0x128>)
 800a99e:	441a      	add	r2, r3
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	3304      	adds	r3, #4
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	4610      	mov	r0, r2
 800a9a8:	f7ff fcef 	bl	800a38a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9b0:	4b23      	ldr	r3, [pc, #140]	@ (800aa40 <xTaskResumeAll+0x12c>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d302      	bcc.n	800a9c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a9ba:	4b22      	ldr	r3, [pc, #136]	@ (800aa44 <xTaskResumeAll+0x130>)
 800a9bc:	2201      	movs	r2, #1
 800a9be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9c0:	4b1c      	ldr	r3, [pc, #112]	@ (800aa34 <xTaskResumeAll+0x120>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d1cc      	bne.n	800a962 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d001      	beq.n	800a9d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a9ce:	f000 fa0b 	bl	800ade8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a9d2:	4b1d      	ldr	r3, [pc, #116]	@ (800aa48 <xTaskResumeAll+0x134>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d010      	beq.n	800aa00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a9de:	f000 f837 	bl	800aa50 <xTaskIncrementTick>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d002      	beq.n	800a9ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a9e8:	4b16      	ldr	r3, [pc, #88]	@ (800aa44 <xTaskResumeAll+0x130>)
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1f1      	bne.n	800a9de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a9fa:	4b13      	ldr	r3, [pc, #76]	@ (800aa48 <xTaskResumeAll+0x134>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aa00:	4b10      	ldr	r3, [pc, #64]	@ (800aa44 <xTaskResumeAll+0x130>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d009      	beq.n	800aa1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa0c:	4b0f      	ldr	r3, [pc, #60]	@ (800aa4c <xTaskResumeAll+0x138>)
 800aa0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa12:	601a      	str	r2, [r3, #0]
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa1c:	f000 fbce 	bl	800b1bc <vPortExitCritical>

	return xAlreadyYielded;
 800aa20:	68bb      	ldr	r3, [r7, #8]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	20002304 	.word	0x20002304
 800aa30:	200022dc 	.word	0x200022dc
 800aa34:	2000229c 	.word	0x2000229c
 800aa38:	200022e4 	.word	0x200022e4
 800aa3c:	200021e0 	.word	0x200021e0
 800aa40:	200021dc 	.word	0x200021dc
 800aa44:	200022f0 	.word	0x200022f0
 800aa48:	200022ec 	.word	0x200022ec
 800aa4c:	e000ed04 	.word	0xe000ed04

0800aa50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa56:	2300      	movs	r3, #0
 800aa58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa5a:	4b4f      	ldr	r3, [pc, #316]	@ (800ab98 <xTaskIncrementTick+0x148>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	f040 808f 	bne.w	800ab82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa64:	4b4d      	ldr	r3, [pc, #308]	@ (800ab9c <xTaskIncrementTick+0x14c>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa6c:	4a4b      	ldr	r2, [pc, #300]	@ (800ab9c <xTaskIncrementTick+0x14c>)
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d121      	bne.n	800aabc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa78:	4b49      	ldr	r3, [pc, #292]	@ (800aba0 <xTaskIncrementTick+0x150>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00b      	beq.n	800aa9a <xTaskIncrementTick+0x4a>
	__asm volatile
 800aa82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa86:	f383 8811 	msr	BASEPRI, r3
 800aa8a:	f3bf 8f6f 	isb	sy
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	603b      	str	r3, [r7, #0]
}
 800aa94:	bf00      	nop
 800aa96:	bf00      	nop
 800aa98:	e7fd      	b.n	800aa96 <xTaskIncrementTick+0x46>
 800aa9a:	4b41      	ldr	r3, [pc, #260]	@ (800aba0 <xTaskIncrementTick+0x150>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	60fb      	str	r3, [r7, #12]
 800aaa0:	4b40      	ldr	r3, [pc, #256]	@ (800aba4 <xTaskIncrementTick+0x154>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a3e      	ldr	r2, [pc, #248]	@ (800aba0 <xTaskIncrementTick+0x150>)
 800aaa6:	6013      	str	r3, [r2, #0]
 800aaa8:	4a3e      	ldr	r2, [pc, #248]	@ (800aba4 <xTaskIncrementTick+0x154>)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6013      	str	r3, [r2, #0]
 800aaae:	4b3e      	ldr	r3, [pc, #248]	@ (800aba8 <xTaskIncrementTick+0x158>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	3301      	adds	r3, #1
 800aab4:	4a3c      	ldr	r2, [pc, #240]	@ (800aba8 <xTaskIncrementTick+0x158>)
 800aab6:	6013      	str	r3, [r2, #0]
 800aab8:	f000 f996 	bl	800ade8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aabc:	4b3b      	ldr	r3, [pc, #236]	@ (800abac <xTaskIncrementTick+0x15c>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	693a      	ldr	r2, [r7, #16]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d348      	bcc.n	800ab58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aac6:	4b36      	ldr	r3, [pc, #216]	@ (800aba0 <xTaskIncrementTick+0x150>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d104      	bne.n	800aada <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aad0:	4b36      	ldr	r3, [pc, #216]	@ (800abac <xTaskIncrementTick+0x15c>)
 800aad2:	f04f 32ff 	mov.w	r2, #4294967295
 800aad6:	601a      	str	r2, [r3, #0]
					break;
 800aad8:	e03e      	b.n	800ab58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aada:	4b31      	ldr	r3, [pc, #196]	@ (800aba0 <xTaskIncrementTick+0x150>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aaea:	693a      	ldr	r2, [r7, #16]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d203      	bcs.n	800aafa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aaf2:	4a2e      	ldr	r2, [pc, #184]	@ (800abac <xTaskIncrementTick+0x15c>)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aaf8:	e02e      	b.n	800ab58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	3304      	adds	r3, #4
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7ff fca0 	bl	800a444 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d004      	beq.n	800ab16 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	3318      	adds	r3, #24
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7ff fc97 	bl	800a444 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	409a      	lsls	r2, r3
 800ab1e:	4b24      	ldr	r3, [pc, #144]	@ (800abb0 <xTaskIncrementTick+0x160>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4313      	orrs	r3, r2
 800ab24:	4a22      	ldr	r2, [pc, #136]	@ (800abb0 <xTaskIncrementTick+0x160>)
 800ab26:	6013      	str	r3, [r2, #0]
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	4413      	add	r3, r2
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	4a1f      	ldr	r2, [pc, #124]	@ (800abb4 <xTaskIncrementTick+0x164>)
 800ab36:	441a      	add	r2, r3
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	3304      	adds	r3, #4
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	4610      	mov	r0, r2
 800ab40:	f7ff fc23 	bl	800a38a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab48:	4b1b      	ldr	r3, [pc, #108]	@ (800abb8 <xTaskIncrementTick+0x168>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d3b9      	bcc.n	800aac6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ab52:	2301      	movs	r3, #1
 800ab54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab56:	e7b6      	b.n	800aac6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab58:	4b17      	ldr	r3, [pc, #92]	@ (800abb8 <xTaskIncrementTick+0x168>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab5e:	4915      	ldr	r1, [pc, #84]	@ (800abb4 <xTaskIncrementTick+0x164>)
 800ab60:	4613      	mov	r3, r2
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	4413      	add	r3, r2
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	440b      	add	r3, r1
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d901      	bls.n	800ab74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ab70:	2301      	movs	r3, #1
 800ab72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab74:	4b11      	ldr	r3, [pc, #68]	@ (800abbc <xTaskIncrementTick+0x16c>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d007      	beq.n	800ab8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	617b      	str	r3, [r7, #20]
 800ab80:	e004      	b.n	800ab8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ab82:	4b0f      	ldr	r3, [pc, #60]	@ (800abc0 <xTaskIncrementTick+0x170>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	3301      	adds	r3, #1
 800ab88:	4a0d      	ldr	r2, [pc, #52]	@ (800abc0 <xTaskIncrementTick+0x170>)
 800ab8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab8c:	697b      	ldr	r3, [r7, #20]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3718      	adds	r7, #24
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	20002304 	.word	0x20002304
 800ab9c:	200022e0 	.word	0x200022e0
 800aba0:	20002294 	.word	0x20002294
 800aba4:	20002298 	.word	0x20002298
 800aba8:	200022f4 	.word	0x200022f4
 800abac:	200022fc 	.word	0x200022fc
 800abb0:	200022e4 	.word	0x200022e4
 800abb4:	200021e0 	.word	0x200021e0
 800abb8:	200021dc 	.word	0x200021dc
 800abbc:	200022f0 	.word	0x200022f0
 800abc0:	200022ec 	.word	0x200022ec

0800abc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800abc4:	b480      	push	{r7}
 800abc6:	b087      	sub	sp, #28
 800abc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800abca:	4b27      	ldr	r3, [pc, #156]	@ (800ac68 <vTaskSwitchContext+0xa4>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d003      	beq.n	800abda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800abd2:	4b26      	ldr	r3, [pc, #152]	@ (800ac6c <vTaskSwitchContext+0xa8>)
 800abd4:	2201      	movs	r2, #1
 800abd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abd8:	e040      	b.n	800ac5c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800abda:	4b24      	ldr	r3, [pc, #144]	@ (800ac6c <vTaskSwitchContext+0xa8>)
 800abdc:	2200      	movs	r2, #0
 800abde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abe0:	4b23      	ldr	r3, [pc, #140]	@ (800ac70 <vTaskSwitchContext+0xac>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	fab3 f383 	clz	r3, r3
 800abec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800abee:	7afb      	ldrb	r3, [r7, #11]
 800abf0:	f1c3 031f 	rsb	r3, r3, #31
 800abf4:	617b      	str	r3, [r7, #20]
 800abf6:	491f      	ldr	r1, [pc, #124]	@ (800ac74 <vTaskSwitchContext+0xb0>)
 800abf8:	697a      	ldr	r2, [r7, #20]
 800abfa:	4613      	mov	r3, r2
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	4413      	add	r3, r2
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	440b      	add	r3, r1
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d10b      	bne.n	800ac22 <vTaskSwitchContext+0x5e>
	__asm volatile
 800ac0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac0e:	f383 8811 	msr	BASEPRI, r3
 800ac12:	f3bf 8f6f 	isb	sy
 800ac16:	f3bf 8f4f 	dsb	sy
 800ac1a:	607b      	str	r3, [r7, #4]
}
 800ac1c:	bf00      	nop
 800ac1e:	bf00      	nop
 800ac20:	e7fd      	b.n	800ac1e <vTaskSwitchContext+0x5a>
 800ac22:	697a      	ldr	r2, [r7, #20]
 800ac24:	4613      	mov	r3, r2
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	4a11      	ldr	r2, [pc, #68]	@ (800ac74 <vTaskSwitchContext+0xb0>)
 800ac2e:	4413      	add	r3, r2
 800ac30:	613b      	str	r3, [r7, #16]
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	685a      	ldr	r2, [r3, #4]
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	605a      	str	r2, [r3, #4]
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	685a      	ldr	r2, [r3, #4]
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	3308      	adds	r3, #8
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d104      	bne.n	800ac52 <vTaskSwitchContext+0x8e>
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	685a      	ldr	r2, [r3, #4]
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	605a      	str	r2, [r3, #4]
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	4a07      	ldr	r2, [pc, #28]	@ (800ac78 <vTaskSwitchContext+0xb4>)
 800ac5a:	6013      	str	r3, [r2, #0]
}
 800ac5c:	bf00      	nop
 800ac5e:	371c      	adds	r7, #28
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr
 800ac68:	20002304 	.word	0x20002304
 800ac6c:	200022f0 	.word	0x200022f0
 800ac70:	200022e4 	.word	0x200022e4
 800ac74:	200021e0 	.word	0x200021e0
 800ac78:	200021dc 	.word	0x200021dc

0800ac7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac84:	f000 f852 	bl	800ad2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac88:	4b06      	ldr	r3, [pc, #24]	@ (800aca4 <prvIdleTask+0x28>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d9f9      	bls.n	800ac84 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac90:	4b05      	ldr	r3, [pc, #20]	@ (800aca8 <prvIdleTask+0x2c>)
 800ac92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac96:	601a      	str	r2, [r3, #0]
 800ac98:	f3bf 8f4f 	dsb	sy
 800ac9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aca0:	e7f0      	b.n	800ac84 <prvIdleTask+0x8>
 800aca2:	bf00      	nop
 800aca4:	200021e0 	.word	0x200021e0
 800aca8:	e000ed04 	.word	0xe000ed04

0800acac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800acb2:	2300      	movs	r3, #0
 800acb4:	607b      	str	r3, [r7, #4]
 800acb6:	e00c      	b.n	800acd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	4613      	mov	r3, r2
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	4413      	add	r3, r2
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	4a12      	ldr	r2, [pc, #72]	@ (800ad0c <prvInitialiseTaskLists+0x60>)
 800acc4:	4413      	add	r3, r2
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7ff fb32 	bl	800a330 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	3301      	adds	r3, #1
 800acd0:	607b      	str	r3, [r7, #4]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2b06      	cmp	r3, #6
 800acd6:	d9ef      	bls.n	800acb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800acd8:	480d      	ldr	r0, [pc, #52]	@ (800ad10 <prvInitialiseTaskLists+0x64>)
 800acda:	f7ff fb29 	bl	800a330 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800acde:	480d      	ldr	r0, [pc, #52]	@ (800ad14 <prvInitialiseTaskLists+0x68>)
 800ace0:	f7ff fb26 	bl	800a330 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ace4:	480c      	ldr	r0, [pc, #48]	@ (800ad18 <prvInitialiseTaskLists+0x6c>)
 800ace6:	f7ff fb23 	bl	800a330 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800acea:	480c      	ldr	r0, [pc, #48]	@ (800ad1c <prvInitialiseTaskLists+0x70>)
 800acec:	f7ff fb20 	bl	800a330 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800acf0:	480b      	ldr	r0, [pc, #44]	@ (800ad20 <prvInitialiseTaskLists+0x74>)
 800acf2:	f7ff fb1d 	bl	800a330 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800acf6:	4b0b      	ldr	r3, [pc, #44]	@ (800ad24 <prvInitialiseTaskLists+0x78>)
 800acf8:	4a05      	ldr	r2, [pc, #20]	@ (800ad10 <prvInitialiseTaskLists+0x64>)
 800acfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800acfc:	4b0a      	ldr	r3, [pc, #40]	@ (800ad28 <prvInitialiseTaskLists+0x7c>)
 800acfe:	4a05      	ldr	r2, [pc, #20]	@ (800ad14 <prvInitialiseTaskLists+0x68>)
 800ad00:	601a      	str	r2, [r3, #0]
}
 800ad02:	bf00      	nop
 800ad04:	3708      	adds	r7, #8
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	200021e0 	.word	0x200021e0
 800ad10:	2000226c 	.word	0x2000226c
 800ad14:	20002280 	.word	0x20002280
 800ad18:	2000229c 	.word	0x2000229c
 800ad1c:	200022b0 	.word	0x200022b0
 800ad20:	200022c8 	.word	0x200022c8
 800ad24:	20002294 	.word	0x20002294
 800ad28:	20002298 	.word	0x20002298

0800ad2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad32:	e019      	b.n	800ad68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ad34:	f000 fa10 	bl	800b158 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad38:	4b10      	ldr	r3, [pc, #64]	@ (800ad7c <prvCheckTasksWaitingTermination+0x50>)
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	3304      	adds	r3, #4
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7ff fb7d 	bl	800a444 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ad4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad80 <prvCheckTasksWaitingTermination+0x54>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	4a0b      	ldr	r2, [pc, #44]	@ (800ad80 <prvCheckTasksWaitingTermination+0x54>)
 800ad52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ad54:	4b0b      	ldr	r3, [pc, #44]	@ (800ad84 <prvCheckTasksWaitingTermination+0x58>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	3b01      	subs	r3, #1
 800ad5a:	4a0a      	ldr	r2, [pc, #40]	@ (800ad84 <prvCheckTasksWaitingTermination+0x58>)
 800ad5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ad5e:	f000 fa2d 	bl	800b1bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 f810 	bl	800ad88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad68:	4b06      	ldr	r3, [pc, #24]	@ (800ad84 <prvCheckTasksWaitingTermination+0x58>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d1e1      	bne.n	800ad34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ad70:	bf00      	nop
 800ad72:	bf00      	nop
 800ad74:	3708      	adds	r7, #8
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	200022b0 	.word	0x200022b0
 800ad80:	200022dc 	.word	0x200022dc
 800ad84:	200022c4 	.word	0x200022c4

0800ad88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d108      	bne.n	800adac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f000 fb88 	bl	800b4b4 <vPortFree>
				vPortFree( pxTCB );
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 fb85 	bl	800b4b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800adaa:	e019      	b.n	800ade0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d103      	bne.n	800adbe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 fb7c 	bl	800b4b4 <vPortFree>
	}
 800adbc:	e010      	b.n	800ade0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d00b      	beq.n	800ade0 <prvDeleteTCB+0x58>
	__asm volatile
 800adc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adcc:	f383 8811 	msr	BASEPRI, r3
 800add0:	f3bf 8f6f 	isb	sy
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	60fb      	str	r3, [r7, #12]
}
 800adda:	bf00      	nop
 800addc:	bf00      	nop
 800adde:	e7fd      	b.n	800addc <prvDeleteTCB+0x54>
	}
 800ade0:	bf00      	nop
 800ade2:	3710      	adds	r7, #16
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800adee:	4b0c      	ldr	r3, [pc, #48]	@ (800ae20 <prvResetNextTaskUnblockTime+0x38>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d104      	bne.n	800ae02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800adf8:	4b0a      	ldr	r3, [pc, #40]	@ (800ae24 <prvResetNextTaskUnblockTime+0x3c>)
 800adfa:	f04f 32ff 	mov.w	r2, #4294967295
 800adfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ae00:	e008      	b.n	800ae14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae02:	4b07      	ldr	r3, [pc, #28]	@ (800ae20 <prvResetNextTaskUnblockTime+0x38>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	4a04      	ldr	r2, [pc, #16]	@ (800ae24 <prvResetNextTaskUnblockTime+0x3c>)
 800ae12:	6013      	str	r3, [r2, #0]
}
 800ae14:	bf00      	nop
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr
 800ae20:	20002294 	.word	0x20002294
 800ae24:	200022fc 	.word	0x200022fc

0800ae28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae32:	4b29      	ldr	r3, [pc, #164]	@ (800aed8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae38:	4b28      	ldr	r3, [pc, #160]	@ (800aedc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	3304      	adds	r3, #4
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7ff fb00 	bl	800a444 <uxListRemove>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10b      	bne.n	800ae62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ae4a:	4b24      	ldr	r3, [pc, #144]	@ (800aedc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae50:	2201      	movs	r2, #1
 800ae52:	fa02 f303 	lsl.w	r3, r2, r3
 800ae56:	43da      	mvns	r2, r3
 800ae58:	4b21      	ldr	r3, [pc, #132]	@ (800aee0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4013      	ands	r3, r2
 800ae5e:	4a20      	ldr	r2, [pc, #128]	@ (800aee0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ae60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae68:	d10a      	bne.n	800ae80 <prvAddCurrentTaskToDelayedList+0x58>
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d007      	beq.n	800ae80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae70:	4b1a      	ldr	r3, [pc, #104]	@ (800aedc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3304      	adds	r3, #4
 800ae76:	4619      	mov	r1, r3
 800ae78:	481a      	ldr	r0, [pc, #104]	@ (800aee4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ae7a:	f7ff fa86 	bl	800a38a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ae7e:	e026      	b.n	800aece <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4413      	add	r3, r2
 800ae86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ae88:	4b14      	ldr	r3, [pc, #80]	@ (800aedc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68ba      	ldr	r2, [r7, #8]
 800ae8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d209      	bcs.n	800aeac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae98:	4b13      	ldr	r3, [pc, #76]	@ (800aee8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	4b0f      	ldr	r3, [pc, #60]	@ (800aedc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	3304      	adds	r3, #4
 800aea2:	4619      	mov	r1, r3
 800aea4:	4610      	mov	r0, r2
 800aea6:	f7ff fa94 	bl	800a3d2 <vListInsert>
}
 800aeaa:	e010      	b.n	800aece <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aeac:	4b0f      	ldr	r3, [pc, #60]	@ (800aeec <prvAddCurrentTaskToDelayedList+0xc4>)
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	4b0a      	ldr	r3, [pc, #40]	@ (800aedc <prvAddCurrentTaskToDelayedList+0xb4>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	4610      	mov	r0, r2
 800aeba:	f7ff fa8a 	bl	800a3d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aebe:	4b0c      	ldr	r3, [pc, #48]	@ (800aef0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	68ba      	ldr	r2, [r7, #8]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d202      	bcs.n	800aece <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800aec8:	4a09      	ldr	r2, [pc, #36]	@ (800aef0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	6013      	str	r3, [r2, #0]
}
 800aece:	bf00      	nop
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	200022e0 	.word	0x200022e0
 800aedc:	200021dc 	.word	0x200021dc
 800aee0:	200022e4 	.word	0x200022e4
 800aee4:	200022c8 	.word	0x200022c8
 800aee8:	20002298 	.word	0x20002298
 800aeec:	20002294 	.word	0x20002294
 800aef0:	200022fc 	.word	0x200022fc

0800aef4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	3b04      	subs	r3, #4
 800af04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800af0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	3b04      	subs	r3, #4
 800af12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	f023 0201 	bic.w	r2, r3, #1
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	3b04      	subs	r3, #4
 800af22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800af24:	4a0c      	ldr	r2, [pc, #48]	@ (800af58 <pxPortInitialiseStack+0x64>)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	3b14      	subs	r3, #20
 800af2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	3b04      	subs	r3, #4
 800af3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f06f 0202 	mvn.w	r2, #2
 800af42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	3b20      	subs	r3, #32
 800af48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800af4a:	68fb      	ldr	r3, [r7, #12]
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3714      	adds	r7, #20
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr
 800af58:	0800af5d 	.word	0x0800af5d

0800af5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800af5c:	b480      	push	{r7}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800af62:	2300      	movs	r3, #0
 800af64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800af66:	4b13      	ldr	r3, [pc, #76]	@ (800afb4 <prvTaskExitError+0x58>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af6e:	d00b      	beq.n	800af88 <prvTaskExitError+0x2c>
	__asm volatile
 800af70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af74:	f383 8811 	msr	BASEPRI, r3
 800af78:	f3bf 8f6f 	isb	sy
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	60fb      	str	r3, [r7, #12]
}
 800af82:	bf00      	nop
 800af84:	bf00      	nop
 800af86:	e7fd      	b.n	800af84 <prvTaskExitError+0x28>
	__asm volatile
 800af88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af8c:	f383 8811 	msr	BASEPRI, r3
 800af90:	f3bf 8f6f 	isb	sy
 800af94:	f3bf 8f4f 	dsb	sy
 800af98:	60bb      	str	r3, [r7, #8]
}
 800af9a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af9c:	bf00      	nop
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d0fc      	beq.n	800af9e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800afa4:	bf00      	nop
 800afa6:	bf00      	nop
 800afa8:	3714      	adds	r7, #20
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	2000006c 	.word	0x2000006c
	...

0800afc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800afc0:	4b07      	ldr	r3, [pc, #28]	@ (800afe0 <pxCurrentTCBConst2>)
 800afc2:	6819      	ldr	r1, [r3, #0]
 800afc4:	6808      	ldr	r0, [r1, #0]
 800afc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afca:	f380 8809 	msr	PSP, r0
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	f04f 0000 	mov.w	r0, #0
 800afd6:	f380 8811 	msr	BASEPRI, r0
 800afda:	4770      	bx	lr
 800afdc:	f3af 8000 	nop.w

0800afe0 <pxCurrentTCBConst2>:
 800afe0:	200021dc 	.word	0x200021dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800afe4:	bf00      	nop
 800afe6:	bf00      	nop

0800afe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800afe8:	4808      	ldr	r0, [pc, #32]	@ (800b00c <prvPortStartFirstTask+0x24>)
 800afea:	6800      	ldr	r0, [r0, #0]
 800afec:	6800      	ldr	r0, [r0, #0]
 800afee:	f380 8808 	msr	MSP, r0
 800aff2:	f04f 0000 	mov.w	r0, #0
 800aff6:	f380 8814 	msr	CONTROL, r0
 800affa:	b662      	cpsie	i
 800affc:	b661      	cpsie	f
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	f3bf 8f6f 	isb	sy
 800b006:	df00      	svc	0
 800b008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b00a:	bf00      	nop
 800b00c:	e000ed08 	.word	0xe000ed08

0800b010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b086      	sub	sp, #24
 800b014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b016:	4b47      	ldr	r3, [pc, #284]	@ (800b134 <xPortStartScheduler+0x124>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a47      	ldr	r2, [pc, #284]	@ (800b138 <xPortStartScheduler+0x128>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d10b      	bne.n	800b038 <xPortStartScheduler+0x28>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	60fb      	str	r3, [r7, #12]
}
 800b032:	bf00      	nop
 800b034:	bf00      	nop
 800b036:	e7fd      	b.n	800b034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b038:	4b3e      	ldr	r3, [pc, #248]	@ (800b134 <xPortStartScheduler+0x124>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a3f      	ldr	r2, [pc, #252]	@ (800b13c <xPortStartScheduler+0x12c>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d10b      	bne.n	800b05a <xPortStartScheduler+0x4a>
	__asm volatile
 800b042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b046:	f383 8811 	msr	BASEPRI, r3
 800b04a:	f3bf 8f6f 	isb	sy
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	613b      	str	r3, [r7, #16]
}
 800b054:	bf00      	nop
 800b056:	bf00      	nop
 800b058:	e7fd      	b.n	800b056 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b05a:	4b39      	ldr	r3, [pc, #228]	@ (800b140 <xPortStartScheduler+0x130>)
 800b05c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	b2db      	uxtb	r3, r3
 800b064:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	22ff      	movs	r2, #255	@ 0xff
 800b06a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	b2db      	uxtb	r3, r3
 800b072:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b074:	78fb      	ldrb	r3, [r7, #3]
 800b076:	b2db      	uxtb	r3, r3
 800b078:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b07c:	b2da      	uxtb	r2, r3
 800b07e:	4b31      	ldr	r3, [pc, #196]	@ (800b144 <xPortStartScheduler+0x134>)
 800b080:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b082:	4b31      	ldr	r3, [pc, #196]	@ (800b148 <xPortStartScheduler+0x138>)
 800b084:	2207      	movs	r2, #7
 800b086:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b088:	e009      	b.n	800b09e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b08a:	4b2f      	ldr	r3, [pc, #188]	@ (800b148 <xPortStartScheduler+0x138>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	3b01      	subs	r3, #1
 800b090:	4a2d      	ldr	r2, [pc, #180]	@ (800b148 <xPortStartScheduler+0x138>)
 800b092:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b094:	78fb      	ldrb	r3, [r7, #3]
 800b096:	b2db      	uxtb	r3, r3
 800b098:	005b      	lsls	r3, r3, #1
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b09e:	78fb      	ldrb	r3, [r7, #3]
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0a6:	2b80      	cmp	r3, #128	@ 0x80
 800b0a8:	d0ef      	beq.n	800b08a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b0aa:	4b27      	ldr	r3, [pc, #156]	@ (800b148 <xPortStartScheduler+0x138>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f1c3 0307 	rsb	r3, r3, #7
 800b0b2:	2b04      	cmp	r3, #4
 800b0b4:	d00b      	beq.n	800b0ce <xPortStartScheduler+0xbe>
	__asm volatile
 800b0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ba:	f383 8811 	msr	BASEPRI, r3
 800b0be:	f3bf 8f6f 	isb	sy
 800b0c2:	f3bf 8f4f 	dsb	sy
 800b0c6:	60bb      	str	r3, [r7, #8]
}
 800b0c8:	bf00      	nop
 800b0ca:	bf00      	nop
 800b0cc:	e7fd      	b.n	800b0ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b0ce:	4b1e      	ldr	r3, [pc, #120]	@ (800b148 <xPortStartScheduler+0x138>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	021b      	lsls	r3, r3, #8
 800b0d4:	4a1c      	ldr	r2, [pc, #112]	@ (800b148 <xPortStartScheduler+0x138>)
 800b0d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b0d8:	4b1b      	ldr	r3, [pc, #108]	@ (800b148 <xPortStartScheduler+0x138>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b0e0:	4a19      	ldr	r2, [pc, #100]	@ (800b148 <xPortStartScheduler+0x138>)
 800b0e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	b2da      	uxtb	r2, r3
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b0ec:	4b17      	ldr	r3, [pc, #92]	@ (800b14c <xPortStartScheduler+0x13c>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a16      	ldr	r2, [pc, #88]	@ (800b14c <xPortStartScheduler+0x13c>)
 800b0f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b0f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b0f8:	4b14      	ldr	r3, [pc, #80]	@ (800b14c <xPortStartScheduler+0x13c>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a13      	ldr	r2, [pc, #76]	@ (800b14c <xPortStartScheduler+0x13c>)
 800b0fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b102:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b104:	f000 f8da 	bl	800b2bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b108:	4b11      	ldr	r3, [pc, #68]	@ (800b150 <xPortStartScheduler+0x140>)
 800b10a:	2200      	movs	r2, #0
 800b10c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b10e:	f000 f8f9 	bl	800b304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b112:	4b10      	ldr	r3, [pc, #64]	@ (800b154 <xPortStartScheduler+0x144>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a0f      	ldr	r2, [pc, #60]	@ (800b154 <xPortStartScheduler+0x144>)
 800b118:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b11c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b11e:	f7ff ff63 	bl	800afe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b122:	f7ff fd4f 	bl	800abc4 <vTaskSwitchContext>
	prvTaskExitError();
 800b126:	f7ff ff19 	bl	800af5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3718      	adds	r7, #24
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}
 800b134:	e000ed00 	.word	0xe000ed00
 800b138:	410fc271 	.word	0x410fc271
 800b13c:	410fc270 	.word	0x410fc270
 800b140:	e000e400 	.word	0xe000e400
 800b144:	20002308 	.word	0x20002308
 800b148:	2000230c 	.word	0x2000230c
 800b14c:	e000ed20 	.word	0xe000ed20
 800b150:	2000006c 	.word	0x2000006c
 800b154:	e000ef34 	.word	0xe000ef34

0800b158 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
	__asm volatile
 800b15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b162:	f383 8811 	msr	BASEPRI, r3
 800b166:	f3bf 8f6f 	isb	sy
 800b16a:	f3bf 8f4f 	dsb	sy
 800b16e:	607b      	str	r3, [r7, #4]
}
 800b170:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b172:	4b10      	ldr	r3, [pc, #64]	@ (800b1b4 <vPortEnterCritical+0x5c>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	3301      	adds	r3, #1
 800b178:	4a0e      	ldr	r2, [pc, #56]	@ (800b1b4 <vPortEnterCritical+0x5c>)
 800b17a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b17c:	4b0d      	ldr	r3, [pc, #52]	@ (800b1b4 <vPortEnterCritical+0x5c>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2b01      	cmp	r3, #1
 800b182:	d110      	bne.n	800b1a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b184:	4b0c      	ldr	r3, [pc, #48]	@ (800b1b8 <vPortEnterCritical+0x60>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00b      	beq.n	800b1a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	603b      	str	r3, [r7, #0]
}
 800b1a0:	bf00      	nop
 800b1a2:	bf00      	nop
 800b1a4:	e7fd      	b.n	800b1a2 <vPortEnterCritical+0x4a>
	}
}
 800b1a6:	bf00      	nop
 800b1a8:	370c      	adds	r7, #12
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	2000006c 	.word	0x2000006c
 800b1b8:	e000ed04 	.word	0xe000ed04

0800b1bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b1c2:	4b12      	ldr	r3, [pc, #72]	@ (800b20c <vPortExitCritical+0x50>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d10b      	bne.n	800b1e2 <vPortExitCritical+0x26>
	__asm volatile
 800b1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	607b      	str	r3, [r7, #4]
}
 800b1dc:	bf00      	nop
 800b1de:	bf00      	nop
 800b1e0:	e7fd      	b.n	800b1de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b1e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b20c <vPortExitCritical+0x50>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	4a08      	ldr	r2, [pc, #32]	@ (800b20c <vPortExitCritical+0x50>)
 800b1ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b1ec:	4b07      	ldr	r3, [pc, #28]	@ (800b20c <vPortExitCritical+0x50>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d105      	bne.n	800b200 <vPortExitCritical+0x44>
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b1fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b200:	bf00      	nop
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr
 800b20c:	2000006c 	.word	0x2000006c

0800b210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b210:	f3ef 8009 	mrs	r0, PSP
 800b214:	f3bf 8f6f 	isb	sy
 800b218:	4b15      	ldr	r3, [pc, #84]	@ (800b270 <pxCurrentTCBConst>)
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	f01e 0f10 	tst.w	lr, #16
 800b220:	bf08      	it	eq
 800b222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22a:	6010      	str	r0, [r2, #0]
 800b22c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b230:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b234:	f380 8811 	msr	BASEPRI, r0
 800b238:	f3bf 8f4f 	dsb	sy
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f7ff fcc0 	bl	800abc4 <vTaskSwitchContext>
 800b244:	f04f 0000 	mov.w	r0, #0
 800b248:	f380 8811 	msr	BASEPRI, r0
 800b24c:	bc09      	pop	{r0, r3}
 800b24e:	6819      	ldr	r1, [r3, #0]
 800b250:	6808      	ldr	r0, [r1, #0]
 800b252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b256:	f01e 0f10 	tst.w	lr, #16
 800b25a:	bf08      	it	eq
 800b25c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b260:	f380 8809 	msr	PSP, r0
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	f3af 8000 	nop.w

0800b270 <pxCurrentTCBConst>:
 800b270:	200021dc 	.word	0x200021dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b274:	bf00      	nop
 800b276:	bf00      	nop

0800b278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
	__asm volatile
 800b27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b282:	f383 8811 	msr	BASEPRI, r3
 800b286:	f3bf 8f6f 	isb	sy
 800b28a:	f3bf 8f4f 	dsb	sy
 800b28e:	607b      	str	r3, [r7, #4]
}
 800b290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b292:	f7ff fbdd 	bl	800aa50 <xTaskIncrementTick>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d003      	beq.n	800b2a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b29c:	4b06      	ldr	r3, [pc, #24]	@ (800b2b8 <SysTick_Handler+0x40>)
 800b29e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2a2:	601a      	str	r2, [r3, #0]
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	f383 8811 	msr	BASEPRI, r3
}
 800b2ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b2b0:	bf00      	nop
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	e000ed04 	.word	0xe000ed04

0800b2bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b2bc:	b480      	push	{r7}
 800b2be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b2c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b2f0 <vPortSetupTimerInterrupt+0x34>)
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b2c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b2f4 <vPortSetupTimerInterrupt+0x38>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b2cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b2f8 <vPortSetupTimerInterrupt+0x3c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a0a      	ldr	r2, [pc, #40]	@ (800b2fc <vPortSetupTimerInterrupt+0x40>)
 800b2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2d6:	099b      	lsrs	r3, r3, #6
 800b2d8:	4a09      	ldr	r2, [pc, #36]	@ (800b300 <vPortSetupTimerInterrupt+0x44>)
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b2de:	4b04      	ldr	r3, [pc, #16]	@ (800b2f0 <vPortSetupTimerInterrupt+0x34>)
 800b2e0:	2207      	movs	r2, #7
 800b2e2:	601a      	str	r2, [r3, #0]
}
 800b2e4:	bf00      	nop
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop
 800b2f0:	e000e010 	.word	0xe000e010
 800b2f4:	e000e018 	.word	0xe000e018
 800b2f8:	2000001c 	.word	0x2000001c
 800b2fc:	10624dd3 	.word	0x10624dd3
 800b300:	e000e014 	.word	0xe000e014

0800b304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b304:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b314 <vPortEnableVFP+0x10>
 800b308:	6801      	ldr	r1, [r0, #0]
 800b30a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b30e:	6001      	str	r1, [r0, #0]
 800b310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b312:	bf00      	nop
 800b314:	e000ed88 	.word	0xe000ed88

0800b318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b08a      	sub	sp, #40	@ 0x28
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b320:	2300      	movs	r3, #0
 800b322:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b324:	f7ff fae8 	bl	800a8f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b328:	4b5c      	ldr	r3, [pc, #368]	@ (800b49c <pvPortMalloc+0x184>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d101      	bne.n	800b334 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b330:	f000 f924 	bl	800b57c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b334:	4b5a      	ldr	r3, [pc, #360]	@ (800b4a0 <pvPortMalloc+0x188>)
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	4013      	ands	r3, r2
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	f040 8095 	bne.w	800b46c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d01e      	beq.n	800b386 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b348:	2208      	movs	r2, #8
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4413      	add	r3, r2
 800b34e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f003 0307 	and.w	r3, r3, #7
 800b356:	2b00      	cmp	r3, #0
 800b358:	d015      	beq.n	800b386 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f023 0307 	bic.w	r3, r3, #7
 800b360:	3308      	adds	r3, #8
 800b362:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f003 0307 	and.w	r3, r3, #7
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00b      	beq.n	800b386 <pvPortMalloc+0x6e>
	__asm volatile
 800b36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b372:	f383 8811 	msr	BASEPRI, r3
 800b376:	f3bf 8f6f 	isb	sy
 800b37a:	f3bf 8f4f 	dsb	sy
 800b37e:	617b      	str	r3, [r7, #20]
}
 800b380:	bf00      	nop
 800b382:	bf00      	nop
 800b384:	e7fd      	b.n	800b382 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d06f      	beq.n	800b46c <pvPortMalloc+0x154>
 800b38c:	4b45      	ldr	r3, [pc, #276]	@ (800b4a4 <pvPortMalloc+0x18c>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	429a      	cmp	r2, r3
 800b394:	d86a      	bhi.n	800b46c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b396:	4b44      	ldr	r3, [pc, #272]	@ (800b4a8 <pvPortMalloc+0x190>)
 800b398:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b39a:	4b43      	ldr	r3, [pc, #268]	@ (800b4a8 <pvPortMalloc+0x190>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3a0:	e004      	b.n	800b3ac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d903      	bls.n	800b3be <pvPortMalloc+0xa6>
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1f1      	bne.n	800b3a2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b3be:	4b37      	ldr	r3, [pc, #220]	@ (800b49c <pvPortMalloc+0x184>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d051      	beq.n	800b46c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b3c8:	6a3b      	ldr	r3, [r7, #32]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	2208      	movs	r2, #8
 800b3ce:	4413      	add	r3, r2
 800b3d0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	6a3b      	ldr	r3, [r7, #32]
 800b3d8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3dc:	685a      	ldr	r2, [r3, #4]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	1ad2      	subs	r2, r2, r3
 800b3e2:	2308      	movs	r3, #8
 800b3e4:	005b      	lsls	r3, r3, #1
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d920      	bls.n	800b42c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b3ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	f003 0307 	and.w	r3, r3, #7
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d00b      	beq.n	800b414 <pvPortMalloc+0xfc>
	__asm volatile
 800b3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	613b      	str	r3, [r7, #16]
}
 800b40e:	bf00      	nop
 800b410:	bf00      	nop
 800b412:	e7fd      	b.n	800b410 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b416:	685a      	ldr	r2, [r3, #4]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	1ad2      	subs	r2, r2, r3
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b426:	69b8      	ldr	r0, [r7, #24]
 800b428:	f000 f90a 	bl	800b640 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b42c:	4b1d      	ldr	r3, [pc, #116]	@ (800b4a4 <pvPortMalloc+0x18c>)
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	1ad3      	subs	r3, r2, r3
 800b436:	4a1b      	ldr	r2, [pc, #108]	@ (800b4a4 <pvPortMalloc+0x18c>)
 800b438:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b43a:	4b1a      	ldr	r3, [pc, #104]	@ (800b4a4 <pvPortMalloc+0x18c>)
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	4b1b      	ldr	r3, [pc, #108]	@ (800b4ac <pvPortMalloc+0x194>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	429a      	cmp	r2, r3
 800b444:	d203      	bcs.n	800b44e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b446:	4b17      	ldr	r3, [pc, #92]	@ (800b4a4 <pvPortMalloc+0x18c>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a18      	ldr	r2, [pc, #96]	@ (800b4ac <pvPortMalloc+0x194>)
 800b44c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b450:	685a      	ldr	r2, [r3, #4]
 800b452:	4b13      	ldr	r3, [pc, #76]	@ (800b4a0 <pvPortMalloc+0x188>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	431a      	orrs	r2, r3
 800b458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b45a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b45e:	2200      	movs	r2, #0
 800b460:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b462:	4b13      	ldr	r3, [pc, #76]	@ (800b4b0 <pvPortMalloc+0x198>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	3301      	adds	r3, #1
 800b468:	4a11      	ldr	r2, [pc, #68]	@ (800b4b0 <pvPortMalloc+0x198>)
 800b46a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b46c:	f7ff fa52 	bl	800a914 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	f003 0307 	and.w	r3, r3, #7
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00b      	beq.n	800b492 <pvPortMalloc+0x17a>
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	60fb      	str	r3, [r7, #12]
}
 800b48c:	bf00      	nop
 800b48e:	bf00      	nop
 800b490:	e7fd      	b.n	800b48e <pvPortMalloc+0x176>
	return pvReturn;
 800b492:	69fb      	ldr	r3, [r7, #28]
}
 800b494:	4618      	mov	r0, r3
 800b496:	3728      	adds	r7, #40	@ 0x28
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	20002ed0 	.word	0x20002ed0
 800b4a0:	20002ee4 	.word	0x20002ee4
 800b4a4:	20002ed4 	.word	0x20002ed4
 800b4a8:	20002ec8 	.word	0x20002ec8
 800b4ac:	20002ed8 	.word	0x20002ed8
 800b4b0:	20002edc 	.word	0x20002edc

0800b4b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b086      	sub	sp, #24
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d04f      	beq.n	800b566 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b4c6:	2308      	movs	r3, #8
 800b4c8:	425b      	negs	r3, r3
 800b4ca:	697a      	ldr	r2, [r7, #20]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	685a      	ldr	r2, [r3, #4]
 800b4d8:	4b25      	ldr	r3, [pc, #148]	@ (800b570 <vPortFree+0xbc>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4013      	ands	r3, r2
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10b      	bne.n	800b4fa <vPortFree+0x46>
	__asm volatile
 800b4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e6:	f383 8811 	msr	BASEPRI, r3
 800b4ea:	f3bf 8f6f 	isb	sy
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	60fb      	str	r3, [r7, #12]
}
 800b4f4:	bf00      	nop
 800b4f6:	bf00      	nop
 800b4f8:	e7fd      	b.n	800b4f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00b      	beq.n	800b51a <vPortFree+0x66>
	__asm volatile
 800b502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	60bb      	str	r3, [r7, #8]
}
 800b514:	bf00      	nop
 800b516:	bf00      	nop
 800b518:	e7fd      	b.n	800b516 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	685a      	ldr	r2, [r3, #4]
 800b51e:	4b14      	ldr	r3, [pc, #80]	@ (800b570 <vPortFree+0xbc>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4013      	ands	r3, r2
 800b524:	2b00      	cmp	r3, #0
 800b526:	d01e      	beq.n	800b566 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d11a      	bne.n	800b566 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	685a      	ldr	r2, [r3, #4]
 800b534:	4b0e      	ldr	r3, [pc, #56]	@ (800b570 <vPortFree+0xbc>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	43db      	mvns	r3, r3
 800b53a:	401a      	ands	r2, r3
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b540:	f7ff f9da 	bl	800a8f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	685a      	ldr	r2, [r3, #4]
 800b548:	4b0a      	ldr	r3, [pc, #40]	@ (800b574 <vPortFree+0xc0>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4413      	add	r3, r2
 800b54e:	4a09      	ldr	r2, [pc, #36]	@ (800b574 <vPortFree+0xc0>)
 800b550:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b552:	6938      	ldr	r0, [r7, #16]
 800b554:	f000 f874 	bl	800b640 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b558:	4b07      	ldr	r3, [pc, #28]	@ (800b578 <vPortFree+0xc4>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	3301      	adds	r3, #1
 800b55e:	4a06      	ldr	r2, [pc, #24]	@ (800b578 <vPortFree+0xc4>)
 800b560:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b562:	f7ff f9d7 	bl	800a914 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b566:	bf00      	nop
 800b568:	3718      	adds	r7, #24
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	20002ee4 	.word	0x20002ee4
 800b574:	20002ed4 	.word	0x20002ed4
 800b578:	20002ee0 	.word	0x20002ee0

0800b57c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b57c:	b480      	push	{r7}
 800b57e:	b085      	sub	sp, #20
 800b580:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b582:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800b586:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b588:	4b27      	ldr	r3, [pc, #156]	@ (800b628 <prvHeapInit+0xac>)
 800b58a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f003 0307 	and.w	r3, r3, #7
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00c      	beq.n	800b5b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	3307      	adds	r3, #7
 800b59a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f023 0307 	bic.w	r3, r3, #7
 800b5a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b5a4:	68ba      	ldr	r2, [r7, #8]
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	1ad3      	subs	r3, r2, r3
 800b5aa:	4a1f      	ldr	r2, [pc, #124]	@ (800b628 <prvHeapInit+0xac>)
 800b5ac:	4413      	add	r3, r2
 800b5ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b5b4:	4a1d      	ldr	r2, [pc, #116]	@ (800b62c <prvHeapInit+0xb0>)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b5ba:	4b1c      	ldr	r3, [pc, #112]	@ (800b62c <prvHeapInit+0xb0>)
 800b5bc:	2200      	movs	r2, #0
 800b5be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	68ba      	ldr	r2, [r7, #8]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b5c8:	2208      	movs	r2, #8
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	1a9b      	subs	r3, r3, r2
 800b5ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f023 0307 	bic.w	r3, r3, #7
 800b5d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	4a15      	ldr	r2, [pc, #84]	@ (800b630 <prvHeapInit+0xb4>)
 800b5dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b5de:	4b14      	ldr	r3, [pc, #80]	@ (800b630 <prvHeapInit+0xb4>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b5e6:	4b12      	ldr	r3, [pc, #72]	@ (800b630 <prvHeapInit+0xb4>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	1ad2      	subs	r2, r2, r3
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b5fc:	4b0c      	ldr	r3, [pc, #48]	@ (800b630 <prvHeapInit+0xb4>)
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	4a0a      	ldr	r2, [pc, #40]	@ (800b634 <prvHeapInit+0xb8>)
 800b60a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	4a09      	ldr	r2, [pc, #36]	@ (800b638 <prvHeapInit+0xbc>)
 800b612:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b614:	4b09      	ldr	r3, [pc, #36]	@ (800b63c <prvHeapInit+0xc0>)
 800b616:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b61a:	601a      	str	r2, [r3, #0]
}
 800b61c:	bf00      	nop
 800b61e:	3714      	adds	r7, #20
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr
 800b628:	20002310 	.word	0x20002310
 800b62c:	20002ec8 	.word	0x20002ec8
 800b630:	20002ed0 	.word	0x20002ed0
 800b634:	20002ed8 	.word	0x20002ed8
 800b638:	20002ed4 	.word	0x20002ed4
 800b63c:	20002ee4 	.word	0x20002ee4

0800b640 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b640:	b480      	push	{r7}
 800b642:	b085      	sub	sp, #20
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b648:	4b28      	ldr	r3, [pc, #160]	@ (800b6ec <prvInsertBlockIntoFreeList+0xac>)
 800b64a:	60fb      	str	r3, [r7, #12]
 800b64c:	e002      	b.n	800b654 <prvInsertBlockIntoFreeList+0x14>
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	60fb      	str	r3, [r7, #12]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d8f7      	bhi.n	800b64e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	68ba      	ldr	r2, [r7, #8]
 800b668:	4413      	add	r3, r2
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d108      	bne.n	800b682 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	685a      	ldr	r2, [r3, #4]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	441a      	add	r2, r3
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	68ba      	ldr	r2, [r7, #8]
 800b68c:	441a      	add	r2, r3
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	429a      	cmp	r2, r3
 800b694:	d118      	bne.n	800b6c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	4b15      	ldr	r3, [pc, #84]	@ (800b6f0 <prvInsertBlockIntoFreeList+0xb0>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d00d      	beq.n	800b6be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	685a      	ldr	r2, [r3, #4]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	441a      	add	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	601a      	str	r2, [r3, #0]
 800b6bc:	e008      	b.n	800b6d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b6be:	4b0c      	ldr	r3, [pc, #48]	@ (800b6f0 <prvInsertBlockIntoFreeList+0xb0>)
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	601a      	str	r2, [r3, #0]
 800b6c6:	e003      	b.n	800b6d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b6d0:	68fa      	ldr	r2, [r7, #12]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d002      	beq.n	800b6de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6de:	bf00      	nop
 800b6e0:	3714      	adds	r7, #20
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr
 800b6ea:	bf00      	nop
 800b6ec:	20002ec8 	.word	0x20002ec8
 800b6f0:	20002ed0 	.word	0x20002ed0

0800b6f4 <arm_fir_init_f32>:
 800b6f4:	b538      	push	{r3, r4, r5, lr}
 800b6f6:	9c04      	ldr	r4, [sp, #16]
 800b6f8:	6082      	str	r2, [r0, #8]
 800b6fa:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800b6fe:	3c01      	subs	r4, #1
 800b700:	440c      	add	r4, r1
 800b702:	8001      	strh	r1, [r0, #0]
 800b704:	4605      	mov	r5, r0
 800b706:	00a2      	lsls	r2, r4, #2
 800b708:	4618      	mov	r0, r3
 800b70a:	2100      	movs	r1, #0
 800b70c:	f001 f94e 	bl	800c9ac <memset>
 800b710:	6068      	str	r0, [r5, #4]
 800b712:	bd38      	pop	{r3, r4, r5, pc}

0800b714 <arm_fir_f32>:
 800b714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b718:	ed2d 8b10 	vpush	{d8-d15}
 800b71c:	b08b      	sub	sp, #44	@ 0x2c
 800b71e:	f8b0 8000 	ldrh.w	r8, [r0]
 800b722:	9003      	str	r0, [sp, #12]
 800b724:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 800b728:	461e      	mov	r6, r3
 800b72a:	9304      	str	r3, [sp, #16]
 800b72c:	f108 4380 	add.w	r3, r8, #1073741824	@ 0x40000000
 800b730:	3b01      	subs	r3, #1
 800b732:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 800b736:	08f3      	lsrs	r3, r6, #3
 800b738:	9002      	str	r0, [sp, #8]
 800b73a:	9500      	str	r5, [sp, #0]
 800b73c:	9301      	str	r3, [sp, #4]
 800b73e:	f000 81f1 	beq.w	800bb24 <arm_fir_f32+0x410>
 800b742:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 800b746:	f100 0620 	add.w	r6, r0, #32
 800b74a:	9405      	str	r4, [sp, #20]
 800b74c:	0164      	lsls	r4, r4, #5
 800b74e:	4420      	add	r0, r4
 800b750:	f008 0a07 	and.w	sl, r8, #7
 800b754:	9607      	str	r6, [sp, #28]
 800b756:	9006      	str	r0, [sp, #24]
 800b758:	469c      	mov	ip, r3
 800b75a:	4650      	mov	r0, sl
 800b75c:	4623      	mov	r3, r4
 800b75e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b762:	f8cd 8020 	str.w	r8, [sp, #32]
 800b766:	1937      	adds	r7, r6, r4
 800b768:	f109 0b1c 	add.w	fp, r9, #28
 800b76c:	f8dd e014 	ldr.w	lr, [sp, #20]
 800b770:	9209      	str	r2, [sp, #36]	@ 0x24
 800b772:	f8cd 9014 	str.w	r9, [sp, #20]
 800b776:	f101 0620 	add.w	r6, r1, #32
 800b77a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800b77e:	9106      	str	r1, [sp, #24]
 800b780:	3520      	adds	r5, #32
 800b782:	f102 0420 	add.w	r4, r2, #32
 800b786:	4698      	mov	r8, r3
 800b788:	f856 3c20 	ldr.w	r3, [r6, #-32]
 800b78c:	f845 3c20 	str.w	r3, [r5, #-32]
 800b790:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800b794:	f845 3c1c 	str.w	r3, [r5, #-28]
 800b798:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800b79c:	f845 3c18 	str.w	r3, [r5, #-24]
 800b7a0:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800b7a4:	f845 3c14 	str.w	r3, [r5, #-20]
 800b7a8:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800b7ac:	f845 3c10 	str.w	r3, [r5, #-16]
 800b7b0:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800b7b4:	f845 3c0c 	str.w	r3, [r5, #-12]
 800b7b8:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800b7bc:	f845 3c08 	str.w	r3, [r5, #-8]
 800b7c0:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b7c4:	f845 3c04 	str.w	r3, [r5, #-4]
 800b7c8:	ed1b 2a07 	vldr	s4, [fp, #-28]	@ 0xffffffe4
 800b7cc:	ed5b 1a06 	vldr	s3, [fp, #-24]	@ 0xffffffe8
 800b7d0:	ed1b 1a05 	vldr	s2, [fp, #-20]	@ 0xffffffec
 800b7d4:	ed5b 0a04 	vldr	s1, [fp, #-16]
 800b7d8:	ed1b 0a03 	vldr	s0, [fp, #-12]
 800b7dc:	ed1b 8a02 	vldr	s16, [fp, #-8]
 800b7e0:	ed5b 8a01 	vldr	s17, [fp, #-4]
 800b7e4:	eddf 6af5 	vldr	s13, [pc, #980]	@ 800bbbc <arm_fir_f32+0x4a8>
 800b7e8:	465a      	mov	r2, fp
 800b7ea:	f1be 0f00 	cmp.w	lr, #0
 800b7ee:	f000 81fe 	beq.w	800bbee <arm_fir_f32+0x4da>
 800b7f2:	f10b 0120 	add.w	r1, fp, #32
 800b7f6:	eef0 ba66 	vmov.f32	s23, s13
 800b7fa:	eeb0 6a66 	vmov.f32	s12, s13
 800b7fe:	eeb0 9a66 	vmov.f32	s18, s13
 800b802:	eef0 9a66 	vmov.f32	s19, s13
 800b806:	eeb0 aa66 	vmov.f32	s20, s13
 800b80a:	eef0 aa66 	vmov.f32	s21, s13
 800b80e:	eeb0 ba66 	vmov.f32	s22, s13
 800b812:	460a      	mov	r2, r1
 800b814:	4653      	mov	r3, sl
 800b816:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 800b81a:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 800b81e:	ed53 ea07 	vldr	s29, [r3, #-28]	@ 0xffffffe4
 800b822:	ed13 ea06 	vldr	s28, [r3, #-24]	@ 0xffffffe8
 800b826:	ed53 da05 	vldr	s27, [r3, #-20]	@ 0xffffffec
 800b82a:	ed53 ca04 	vldr	s25, [r3, #-16]
 800b82e:	ed53 2a03 	vldr	s5, [r3, #-12]
 800b832:	ed13 4a02 	vldr	s8, [r3, #-8]
 800b836:	ed13 5a01 	vldr	s10, [r3, #-4]
 800b83a:	ee67 fa02 	vmul.f32	s31, s14, s4
 800b83e:	ee27 da21 	vmul.f32	s26, s14, s3
 800b842:	ed12 2a07 	vldr	s4, [r2, #-28]	@ 0xffffffe4
 800b846:	ee27 ca01 	vmul.f32	s24, s14, s2
 800b84a:	ee27 3a20 	vmul.f32	s6, s14, s1
 800b84e:	ee67 3a00 	vmul.f32	s7, s14, s0
 800b852:	ee67 5a08 	vmul.f32	s11, s14, s16
 800b856:	ee27 fa28 	vmul.f32	s30, s14, s17
 800b85a:	ee67 7a24 	vmul.f32	s15, s14, s9
 800b85e:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800b862:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800b866:	ee6e faa1 	vmul.f32	s31, s29, s3
 800b86a:	ee2e da81 	vmul.f32	s26, s29, s2
 800b86e:	ed52 1a06 	vldr	s3, [r2, #-24]	@ 0xffffffe8
 800b872:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800b876:	ee73 9a29 	vadd.f32	s19, s6, s19
 800b87a:	ee2e caa0 	vmul.f32	s24, s29, s1
 800b87e:	ee2e 3a80 	vmul.f32	s6, s29, s0
 800b882:	ee33 9a89 	vadd.f32	s18, s7, s18
 800b886:	ee35 6a86 	vadd.f32	s12, s11, s12
 800b88a:	ee6e 3a88 	vmul.f32	s7, s29, s16
 800b88e:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 800b892:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800b896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b89a:	ee24 faae 	vmul.f32	s30, s9, s29
 800b89e:	ee6e ea82 	vmul.f32	s29, s29, s4
 800b8a2:	ee2e 7a01 	vmul.f32	s14, s28, s2
 800b8a6:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800b8aa:	ed12 1a05 	vldr	s2, [r2, #-20]	@ 0xffffffec
 800b8ae:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800b8b2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800b8b6:	ee2e da20 	vmul.f32	s26, s28, s1
 800b8ba:	ee2e ca00 	vmul.f32	s24, s28, s0
 800b8be:	ee73 9a29 	vadd.f32	s19, s6, s19
 800b8c2:	ee33 9a89 	vadd.f32	s18, s7, s18
 800b8c6:	ee2e 3a08 	vmul.f32	s6, s28, s16
 800b8ca:	ee6e 3a28 	vmul.f32	s7, s28, s17
 800b8ce:	ee35 6a86 	vadd.f32	s12, s11, s12
 800b8d2:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800b8d6:	ee64 5a8e 	vmul.f32	s11, s9, s28
 800b8da:	ee22 fa0e 	vmul.f32	s30, s4, s28
 800b8de:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 800b8e2:	ee2e ea21 	vmul.f32	s28, s28, s3
 800b8e6:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 800b8ea:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800b8ee:	ed52 0a04 	vldr	s1, [r2, #-16]
 800b8f2:	ee2d da80 	vmul.f32	s26, s27, s0
 800b8f6:	ee37 ba0b 	vadd.f32	s22, s14, s22
 800b8fa:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800b8fe:	ee73 9a29 	vadd.f32	s19, s6, s19
 800b902:	ee2d ca88 	vmul.f32	s24, s27, s16
 800b906:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 800b90a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800b90e:	ee35 6a86 	vadd.f32	s12, s11, s12
 800b912:	ee64 3aad 	vmul.f32	s7, s9, s27
 800b916:	ee62 5a2d 	vmul.f32	s11, s4, s27
 800b91a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800b91e:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800b922:	ee21 faad 	vmul.f32	s30, s3, s27
 800b926:	ee6d da81 	vmul.f32	s27, s27, s2
 800b92a:	ee6c fa80 	vmul.f32	s31, s25, s0
 800b92e:	ee36 ba8b 	vadd.f32	s22, s13, s22
 800b932:	ed12 0a03 	vldr	s0, [r2, #-12]
 800b936:	ee3d da2a 	vadd.f32	s26, s26, s21
 800b93a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800b93e:	ee6c aa88 	vmul.f32	s21, s25, s16
 800b942:	ee2c caa8 	vmul.f32	s24, s25, s17
 800b946:	ee73 9a29 	vadd.f32	s19, s6, s19
 800b94a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800b94e:	ee24 3aac 	vmul.f32	s6, s9, s25
 800b952:	ee62 3a2c 	vmul.f32	s7, s4, s25
 800b956:	ee35 6a86 	vadd.f32	s12, s11, s12
 800b95a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800b95e:	ee61 5aac 	vmul.f32	s11, s3, s25
 800b962:	ee21 fa2c 	vmul.f32	s30, s2, s25
 800b966:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800b96a:	ee6c caa0 	vmul.f32	s25, s25, s1
 800b96e:	ee62 ea88 	vmul.f32	s29, s5, s16
 800b972:	ee3a da8d 	vadd.f32	s26, s21, s26
 800b976:	ed12 8a02 	vldr	s16, [r2, #-8]
 800b97a:	ee62 aaa8 	vmul.f32	s21, s5, s17
 800b97e:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800b982:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800b986:	ee73 9a29 	vadd.f32	s19, s6, s19
 800b98a:	ee24 caa2 	vmul.f32	s24, s9, s5
 800b98e:	ee22 3a22 	vmul.f32	s6, s4, s5
 800b992:	ee33 9a89 	vadd.f32	s18, s7, s18
 800b996:	ee35 6a86 	vadd.f32	s12, s11, s12
 800b99a:	ee61 3aa2 	vmul.f32	s7, s3, s5
 800b99e:	ee61 5a22 	vmul.f32	s11, s2, s5
 800b9a2:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800b9a6:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 800b9aa:	ee20 faa2 	vmul.f32	s30, s1, s5
 800b9ae:	ee62 2a80 	vmul.f32	s5, s5, s0
 800b9b2:	ee7e fa8b 	vadd.f32	s31, s29, s22
 800b9b6:	ee72 7aa7 	vadd.f32	s15, s5, s15
 800b9ba:	ee24 ba28 	vmul.f32	s22, s8, s17
 800b9be:	ee7a aa8d 	vadd.f32	s21, s21, s26
 800b9c2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800b9c6:	ee24 da84 	vmul.f32	s26, s9, s8
 800b9ca:	ee22 ca04 	vmul.f32	s24, s4, s8
 800b9ce:	ee73 9a29 	vadd.f32	s19, s6, s19
 800b9d2:	ee33 9a89 	vadd.f32	s18, s7, s18
 800b9d6:	ee21 3a84 	vmul.f32	s6, s3, s8
 800b9da:	ee61 3a04 	vmul.f32	s7, s2, s8
 800b9de:	ee35 6a86 	vadd.f32	s12, s11, s12
 800b9e2:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800b9e6:	ee60 5a84 	vmul.f32	s11, s1, s8
 800b9ea:	ee20 7a04 	vmul.f32	s14, s0, s8
 800b9ee:	ee64 6a08 	vmul.f32	s13, s8, s16
 800b9f2:	ed52 8a01 	vldr	s17, [r2, #-4]
 800b9f6:	ee73 9a29 	vadd.f32	s19, s6, s19
 800b9fa:	ee33 9a89 	vadd.f32	s18, s7, s18
 800b9fe:	ee35 6a86 	vadd.f32	s12, s11, s12
 800ba02:	ee37 7a2b 	vadd.f32	s14, s14, s23
 800ba06:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ba0a:	ee3b ba2f 	vadd.f32	s22, s22, s31
 800ba0e:	ee64 4a85 	vmul.f32	s9, s9, s10
 800ba12:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800ba16:	ee22 4a05 	vmul.f32	s8, s4, s10
 800ba1a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800ba1e:	ee61 2a85 	vmul.f32	s5, s3, s10
 800ba22:	ee21 3a05 	vmul.f32	s6, s2, s10
 800ba26:	ee60 3a85 	vmul.f32	s7, s1, s10
 800ba2a:	ee60 5a05 	vmul.f32	s11, s0, s10
 800ba2e:	ee68 ba05 	vmul.f32	s23, s16, s10
 800ba32:	ee65 7a28 	vmul.f32	s15, s10, s17
 800ba36:	3320      	adds	r3, #32
 800ba38:	429f      	cmp	r7, r3
 800ba3a:	ee34 ba8b 	vadd.f32	s22, s9, s22
 800ba3e:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800ba42:	ee32 aa8a 	vadd.f32	s20, s5, s20
 800ba46:	ee73 9a29 	vadd.f32	s19, s6, s19
 800ba4a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800ba4e:	ee35 6a86 	vadd.f32	s12, s11, s12
 800ba52:	ee7b ba87 	vadd.f32	s23, s23, s14
 800ba56:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800ba5a:	f102 0220 	add.w	r2, r2, #32
 800ba5e:	f47f aeda 	bne.w	800b816 <arm_fir_f32+0x102>
 800ba62:	eb0b 0208 	add.w	r2, fp, r8
 800ba66:	46cb      	mov	fp, r9
 800ba68:	b3a0      	cbz	r0, 800bad4 <arm_fir_f32+0x3c0>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	ecfb 7a01 	vldmia	fp!, {s15}
 800ba70:	ecf2 5a01 	vldmia	r2!, {s11}
 800ba74:	ee27 2a82 	vmul.f32	s4, s15, s4
 800ba78:	ee67 2aa1 	vmul.f32	s5, s15, s3
 800ba7c:	ee27 3a81 	vmul.f32	s6, s15, s2
 800ba80:	ee67 3aa0 	vmul.f32	s7, s15, s1
 800ba84:	ee27 4a80 	vmul.f32	s8, s15, s0
 800ba88:	ee67 4a88 	vmul.f32	s9, s15, s16
 800ba8c:	ee27 5aa8 	vmul.f32	s10, s15, s17
 800ba90:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ba94:	3b01      	subs	r3, #1
 800ba96:	ee3b ba02 	vadd.f32	s22, s22, s4
 800ba9a:	ee7a aaa2 	vadd.f32	s21, s21, s5
 800ba9e:	eeb0 2a61 	vmov.f32	s4, s3
 800baa2:	ee3a aa03 	vadd.f32	s20, s20, s6
 800baa6:	eef0 1a41 	vmov.f32	s3, s2
 800baaa:	ee79 9aa3 	vadd.f32	s19, s19, s7
 800baae:	eeb0 1a60 	vmov.f32	s2, s1
 800bab2:	ee39 9a04 	vadd.f32	s18, s18, s8
 800bab6:	eef0 0a40 	vmov.f32	s1, s0
 800baba:	ee36 6a24 	vadd.f32	s12, s12, s9
 800babe:	eeb0 0a48 	vmov.f32	s0, s16
 800bac2:	ee7b ba85 	vadd.f32	s23, s23, s10
 800bac6:	eeb0 8a68 	vmov.f32	s16, s17
 800baca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800bace:	eef0 8a65 	vmov.f32	s17, s11
 800bad2:	d1cb      	bne.n	800ba6c <arm_fir_f32+0x358>
 800bad4:	f1bc 0c01 	subs.w	ip, ip, #1
 800bad8:	ed04 ba08 	vstr	s22, [r4, #-32]	@ 0xffffffe0
 800badc:	ed44 aa07 	vstr	s21, [r4, #-28]	@ 0xffffffe4
 800bae0:	ed04 aa06 	vstr	s20, [r4, #-24]	@ 0xffffffe8
 800bae4:	ed44 9a05 	vstr	s19, [r4, #-20]	@ 0xffffffec
 800bae8:	ed04 9a04 	vstr	s18, [r4, #-16]
 800baec:	ed04 6a03 	vstr	s12, [r4, #-12]
 800baf0:	ed44 ba02 	vstr	s23, [r4, #-8]
 800baf4:	ed44 6a01 	vstr	s13, [r4, #-4]
 800baf8:	f106 0620 	add.w	r6, r6, #32
 800bafc:	f105 0520 	add.w	r5, r5, #32
 800bb00:	f104 0420 	add.w	r4, r4, #32
 800bb04:	468b      	mov	fp, r1
 800bb06:	f47f ae3f 	bne.w	800b788 <arm_fir_f32+0x74>
 800bb0a:	9b01      	ldr	r3, [sp, #4]
 800bb0c:	9800      	ldr	r0, [sp, #0]
 800bb0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb14:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 800bb18:	015b      	lsls	r3, r3, #5
 800bb1a:	4418      	add	r0, r3
 800bb1c:	4419      	add	r1, r3
 800bb1e:	441a      	add	r2, r3
 800bb20:	4499      	add	r9, r3
 800bb22:	9000      	str	r0, [sp, #0]
 800bb24:	9b04      	ldr	r3, [sp, #16]
 800bb26:	f013 0707 	ands.w	r7, r3, #7
 800bb2a:	d020      	beq.n	800bb6e <arm_fir_f32+0x45a>
 800bb2c:	00bf      	lsls	r7, r7, #2
 800bb2e:	9e00      	ldr	r6, [sp, #0]
 800bb30:	f8dd e008 	ldr.w	lr, [sp, #8]
 800bb34:	eb01 0c07 	add.w	ip, r1, r7
 800bb38:	464d      	mov	r5, r9
 800bb3a:	f851 3b04 	ldr.w	r3, [r1], #4
 800bb3e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800bbbc <arm_fir_f32+0x4a8>
 800bb42:	f846 3b04 	str.w	r3, [r6], #4
 800bb46:	4674      	mov	r4, lr
 800bb48:	4643      	mov	r3, r8
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	ecf0 7a01 	vldmia	r0!, {s15}
 800bb50:	ecf4 6a01 	vldmia	r4!, {s13}
 800bb54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb5e:	d1f5      	bne.n	800bb4c <arm_fir_f32+0x438>
 800bb60:	4561      	cmp	r1, ip
 800bb62:	eca2 7a01 	vstmia	r2!, {s14}
 800bb66:	f105 0504 	add.w	r5, r5, #4
 800bb6a:	d1e6      	bne.n	800bb3a <arm_fir_f32+0x426>
 800bb6c:	44b9      	add	r9, r7
 800bb6e:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb72:	9b03      	ldr	r3, [sp, #12]
 800bb74:	ea5f 0498 	movs.w	r4, r8, lsr #2
 800bb78:	685d      	ldr	r5, [r3, #4]
 800bb7a:	d021      	beq.n	800bbc0 <arm_fir_f32+0x4ac>
 800bb7c:	f109 0210 	add.w	r2, r9, #16
 800bb80:	f105 0310 	add.w	r3, r5, #16
 800bb84:	4621      	mov	r1, r4
 800bb86:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800bb8a:	f843 0c10 	str.w	r0, [r3, #-16]
 800bb8e:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800bb92:	f843 0c0c 	str.w	r0, [r3, #-12]
 800bb96:	f852 0c08 	ldr.w	r0, [r2, #-8]
 800bb9a:	f843 0c08 	str.w	r0, [r3, #-8]
 800bb9e:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bba2:	f843 0c04 	str.w	r0, [r3, #-4]
 800bba6:	3901      	subs	r1, #1
 800bba8:	f102 0210 	add.w	r2, r2, #16
 800bbac:	f103 0310 	add.w	r3, r3, #16
 800bbb0:	d1e9      	bne.n	800bb86 <arm_fir_f32+0x472>
 800bbb2:	0124      	lsls	r4, r4, #4
 800bbb4:	44a1      	add	r9, r4
 800bbb6:	4425      	add	r5, r4
 800bbb8:	e002      	b.n	800bbc0 <arm_fir_f32+0x4ac>
 800bbba:	bf00      	nop
 800bbbc:	00000000 	.word	0x00000000
 800bbc0:	f018 0803 	ands.w	r8, r8, #3
 800bbc4:	d00e      	beq.n	800bbe4 <arm_fir_f32+0x4d0>
 800bbc6:	f8d9 3000 	ldr.w	r3, [r9]
 800bbca:	602b      	str	r3, [r5, #0]
 800bbcc:	f1b8 0801 	subs.w	r8, r8, #1
 800bbd0:	d008      	beq.n	800bbe4 <arm_fir_f32+0x4d0>
 800bbd2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bbd6:	606b      	str	r3, [r5, #4]
 800bbd8:	f1b8 0f01 	cmp.w	r8, #1
 800bbdc:	bf1c      	itt	ne
 800bbde:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 800bbe2:	60ab      	strne	r3, [r5, #8]
 800bbe4:	b00b      	add	sp, #44	@ 0x2c
 800bbe6:	ecbd 8b10 	vpop	{d8-d15}
 800bbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbee:	eef0 ba66 	vmov.f32	s23, s13
 800bbf2:	eeb0 6a66 	vmov.f32	s12, s13
 800bbf6:	eeb0 9a66 	vmov.f32	s18, s13
 800bbfa:	eef0 9a66 	vmov.f32	s19, s13
 800bbfe:	eeb0 aa66 	vmov.f32	s20, s13
 800bc02:	eef0 aa66 	vmov.f32	s21, s13
 800bc06:	eeb0 ba66 	vmov.f32	s22, s13
 800bc0a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800bc0e:	f102 0120 	add.w	r1, r2, #32
 800bc12:	e729      	b.n	800ba68 <arm_fir_f32+0x354>

0800bc14 <srand>:
 800bc14:	b538      	push	{r3, r4, r5, lr}
 800bc16:	4b10      	ldr	r3, [pc, #64]	@ (800bc58 <srand+0x44>)
 800bc18:	681d      	ldr	r5, [r3, #0]
 800bc1a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800bc1c:	4604      	mov	r4, r0
 800bc1e:	b9b3      	cbnz	r3, 800bc4e <srand+0x3a>
 800bc20:	2018      	movs	r0, #24
 800bc22:	f001 fe13 	bl	800d84c <malloc>
 800bc26:	4602      	mov	r2, r0
 800bc28:	6328      	str	r0, [r5, #48]	@ 0x30
 800bc2a:	b920      	cbnz	r0, 800bc36 <srand+0x22>
 800bc2c:	4b0b      	ldr	r3, [pc, #44]	@ (800bc5c <srand+0x48>)
 800bc2e:	480c      	ldr	r0, [pc, #48]	@ (800bc60 <srand+0x4c>)
 800bc30:	2146      	movs	r1, #70	@ 0x46
 800bc32:	f000 ff49 	bl	800cac8 <__assert_func>
 800bc36:	490b      	ldr	r1, [pc, #44]	@ (800bc64 <srand+0x50>)
 800bc38:	4b0b      	ldr	r3, [pc, #44]	@ (800bc68 <srand+0x54>)
 800bc3a:	e9c0 1300 	strd	r1, r3, [r0]
 800bc3e:	4b0b      	ldr	r3, [pc, #44]	@ (800bc6c <srand+0x58>)
 800bc40:	6083      	str	r3, [r0, #8]
 800bc42:	230b      	movs	r3, #11
 800bc44:	8183      	strh	r3, [r0, #12]
 800bc46:	2100      	movs	r1, #0
 800bc48:	2001      	movs	r0, #1
 800bc4a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800bc4e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800bc50:	2200      	movs	r2, #0
 800bc52:	611c      	str	r4, [r3, #16]
 800bc54:	615a      	str	r2, [r3, #20]
 800bc56:	bd38      	pop	{r3, r4, r5, pc}
 800bc58:	2000007c 	.word	0x2000007c
 800bc5c:	0800e838 	.word	0x0800e838
 800bc60:	0800e84f 	.word	0x0800e84f
 800bc64:	abcd330e 	.word	0xabcd330e
 800bc68:	e66d1234 	.word	0xe66d1234
 800bc6c:	0005deec 	.word	0x0005deec

0800bc70 <rand>:
 800bc70:	4b16      	ldr	r3, [pc, #88]	@ (800bccc <rand+0x5c>)
 800bc72:	b510      	push	{r4, lr}
 800bc74:	681c      	ldr	r4, [r3, #0]
 800bc76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800bc78:	b9b3      	cbnz	r3, 800bca8 <rand+0x38>
 800bc7a:	2018      	movs	r0, #24
 800bc7c:	f001 fde6 	bl	800d84c <malloc>
 800bc80:	4602      	mov	r2, r0
 800bc82:	6320      	str	r0, [r4, #48]	@ 0x30
 800bc84:	b920      	cbnz	r0, 800bc90 <rand+0x20>
 800bc86:	4b12      	ldr	r3, [pc, #72]	@ (800bcd0 <rand+0x60>)
 800bc88:	4812      	ldr	r0, [pc, #72]	@ (800bcd4 <rand+0x64>)
 800bc8a:	2152      	movs	r1, #82	@ 0x52
 800bc8c:	f000 ff1c 	bl	800cac8 <__assert_func>
 800bc90:	4911      	ldr	r1, [pc, #68]	@ (800bcd8 <rand+0x68>)
 800bc92:	4b12      	ldr	r3, [pc, #72]	@ (800bcdc <rand+0x6c>)
 800bc94:	e9c0 1300 	strd	r1, r3, [r0]
 800bc98:	4b11      	ldr	r3, [pc, #68]	@ (800bce0 <rand+0x70>)
 800bc9a:	6083      	str	r3, [r0, #8]
 800bc9c:	230b      	movs	r3, #11
 800bc9e:	8183      	strh	r3, [r0, #12]
 800bca0:	2100      	movs	r1, #0
 800bca2:	2001      	movs	r0, #1
 800bca4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800bca8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bcaa:	480e      	ldr	r0, [pc, #56]	@ (800bce4 <rand+0x74>)
 800bcac:	690b      	ldr	r3, [r1, #16]
 800bcae:	694c      	ldr	r4, [r1, #20]
 800bcb0:	4a0d      	ldr	r2, [pc, #52]	@ (800bce8 <rand+0x78>)
 800bcb2:	4358      	muls	r0, r3
 800bcb4:	fb02 0004 	mla	r0, r2, r4, r0
 800bcb8:	fba3 3202 	umull	r3, r2, r3, r2
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	eb40 0002 	adc.w	r0, r0, r2
 800bcc2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800bcc6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800bcca:	bd10      	pop	{r4, pc}
 800bccc:	2000007c 	.word	0x2000007c
 800bcd0:	0800e838 	.word	0x0800e838
 800bcd4:	0800e84f 	.word	0x0800e84f
 800bcd8:	abcd330e 	.word	0xabcd330e
 800bcdc:	e66d1234 	.word	0xe66d1234
 800bce0:	0005deec 	.word	0x0005deec
 800bce4:	5851f42d 	.word	0x5851f42d
 800bce8:	4c957f2d 	.word	0x4c957f2d

0800bcec <__cvt>:
 800bcec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcf0:	ec57 6b10 	vmov	r6, r7, d0
 800bcf4:	2f00      	cmp	r7, #0
 800bcf6:	460c      	mov	r4, r1
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	463b      	mov	r3, r7
 800bcfc:	bfbb      	ittet	lt
 800bcfe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bd02:	461f      	movlt	r7, r3
 800bd04:	2300      	movge	r3, #0
 800bd06:	232d      	movlt	r3, #45	@ 0x2d
 800bd08:	700b      	strb	r3, [r1, #0]
 800bd0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd0c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bd10:	4691      	mov	r9, r2
 800bd12:	f023 0820 	bic.w	r8, r3, #32
 800bd16:	bfbc      	itt	lt
 800bd18:	4632      	movlt	r2, r6
 800bd1a:	4616      	movlt	r6, r2
 800bd1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bd20:	d005      	beq.n	800bd2e <__cvt+0x42>
 800bd22:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bd26:	d100      	bne.n	800bd2a <__cvt+0x3e>
 800bd28:	3401      	adds	r4, #1
 800bd2a:	2102      	movs	r1, #2
 800bd2c:	e000      	b.n	800bd30 <__cvt+0x44>
 800bd2e:	2103      	movs	r1, #3
 800bd30:	ab03      	add	r3, sp, #12
 800bd32:	9301      	str	r3, [sp, #4]
 800bd34:	ab02      	add	r3, sp, #8
 800bd36:	9300      	str	r3, [sp, #0]
 800bd38:	ec47 6b10 	vmov	d0, r6, r7
 800bd3c:	4653      	mov	r3, sl
 800bd3e:	4622      	mov	r2, r4
 800bd40:	f000 ff6a 	bl	800cc18 <_dtoa_r>
 800bd44:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bd48:	4605      	mov	r5, r0
 800bd4a:	d119      	bne.n	800bd80 <__cvt+0x94>
 800bd4c:	f019 0f01 	tst.w	r9, #1
 800bd50:	d00e      	beq.n	800bd70 <__cvt+0x84>
 800bd52:	eb00 0904 	add.w	r9, r0, r4
 800bd56:	2200      	movs	r2, #0
 800bd58:	2300      	movs	r3, #0
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	4639      	mov	r1, r7
 800bd5e:	f7f4 feb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd62:	b108      	cbz	r0, 800bd68 <__cvt+0x7c>
 800bd64:	f8cd 900c 	str.w	r9, [sp, #12]
 800bd68:	2230      	movs	r2, #48	@ 0x30
 800bd6a:	9b03      	ldr	r3, [sp, #12]
 800bd6c:	454b      	cmp	r3, r9
 800bd6e:	d31e      	bcc.n	800bdae <__cvt+0xc2>
 800bd70:	9b03      	ldr	r3, [sp, #12]
 800bd72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd74:	1b5b      	subs	r3, r3, r5
 800bd76:	4628      	mov	r0, r5
 800bd78:	6013      	str	r3, [r2, #0]
 800bd7a:	b004      	add	sp, #16
 800bd7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bd84:	eb00 0904 	add.w	r9, r0, r4
 800bd88:	d1e5      	bne.n	800bd56 <__cvt+0x6a>
 800bd8a:	7803      	ldrb	r3, [r0, #0]
 800bd8c:	2b30      	cmp	r3, #48	@ 0x30
 800bd8e:	d10a      	bne.n	800bda6 <__cvt+0xba>
 800bd90:	2200      	movs	r2, #0
 800bd92:	2300      	movs	r3, #0
 800bd94:	4630      	mov	r0, r6
 800bd96:	4639      	mov	r1, r7
 800bd98:	f7f4 fe96 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd9c:	b918      	cbnz	r0, 800bda6 <__cvt+0xba>
 800bd9e:	f1c4 0401 	rsb	r4, r4, #1
 800bda2:	f8ca 4000 	str.w	r4, [sl]
 800bda6:	f8da 3000 	ldr.w	r3, [sl]
 800bdaa:	4499      	add	r9, r3
 800bdac:	e7d3      	b.n	800bd56 <__cvt+0x6a>
 800bdae:	1c59      	adds	r1, r3, #1
 800bdb0:	9103      	str	r1, [sp, #12]
 800bdb2:	701a      	strb	r2, [r3, #0]
 800bdb4:	e7d9      	b.n	800bd6a <__cvt+0x7e>

0800bdb6 <__exponent>:
 800bdb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdb8:	2900      	cmp	r1, #0
 800bdba:	bfba      	itte	lt
 800bdbc:	4249      	neglt	r1, r1
 800bdbe:	232d      	movlt	r3, #45	@ 0x2d
 800bdc0:	232b      	movge	r3, #43	@ 0x2b
 800bdc2:	2909      	cmp	r1, #9
 800bdc4:	7002      	strb	r2, [r0, #0]
 800bdc6:	7043      	strb	r3, [r0, #1]
 800bdc8:	dd29      	ble.n	800be1e <__exponent+0x68>
 800bdca:	f10d 0307 	add.w	r3, sp, #7
 800bdce:	461d      	mov	r5, r3
 800bdd0:	270a      	movs	r7, #10
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	fbb1 f6f7 	udiv	r6, r1, r7
 800bdd8:	fb07 1416 	mls	r4, r7, r6, r1
 800bddc:	3430      	adds	r4, #48	@ 0x30
 800bdde:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bde2:	460c      	mov	r4, r1
 800bde4:	2c63      	cmp	r4, #99	@ 0x63
 800bde6:	f103 33ff 	add.w	r3, r3, #4294967295
 800bdea:	4631      	mov	r1, r6
 800bdec:	dcf1      	bgt.n	800bdd2 <__exponent+0x1c>
 800bdee:	3130      	adds	r1, #48	@ 0x30
 800bdf0:	1e94      	subs	r4, r2, #2
 800bdf2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bdf6:	1c41      	adds	r1, r0, #1
 800bdf8:	4623      	mov	r3, r4
 800bdfa:	42ab      	cmp	r3, r5
 800bdfc:	d30a      	bcc.n	800be14 <__exponent+0x5e>
 800bdfe:	f10d 0309 	add.w	r3, sp, #9
 800be02:	1a9b      	subs	r3, r3, r2
 800be04:	42ac      	cmp	r4, r5
 800be06:	bf88      	it	hi
 800be08:	2300      	movhi	r3, #0
 800be0a:	3302      	adds	r3, #2
 800be0c:	4403      	add	r3, r0
 800be0e:	1a18      	subs	r0, r3, r0
 800be10:	b003      	add	sp, #12
 800be12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be14:	f813 6b01 	ldrb.w	r6, [r3], #1
 800be18:	f801 6f01 	strb.w	r6, [r1, #1]!
 800be1c:	e7ed      	b.n	800bdfa <__exponent+0x44>
 800be1e:	2330      	movs	r3, #48	@ 0x30
 800be20:	3130      	adds	r1, #48	@ 0x30
 800be22:	7083      	strb	r3, [r0, #2]
 800be24:	70c1      	strb	r1, [r0, #3]
 800be26:	1d03      	adds	r3, r0, #4
 800be28:	e7f1      	b.n	800be0e <__exponent+0x58>
	...

0800be2c <_printf_float>:
 800be2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be30:	b08d      	sub	sp, #52	@ 0x34
 800be32:	460c      	mov	r4, r1
 800be34:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800be38:	4616      	mov	r6, r2
 800be3a:	461f      	mov	r7, r3
 800be3c:	4605      	mov	r5, r0
 800be3e:	f000 fdbd 	bl	800c9bc <_localeconv_r>
 800be42:	6803      	ldr	r3, [r0, #0]
 800be44:	9304      	str	r3, [sp, #16]
 800be46:	4618      	mov	r0, r3
 800be48:	f7f4 fa12 	bl	8000270 <strlen>
 800be4c:	2300      	movs	r3, #0
 800be4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800be50:	f8d8 3000 	ldr.w	r3, [r8]
 800be54:	9005      	str	r0, [sp, #20]
 800be56:	3307      	adds	r3, #7
 800be58:	f023 0307 	bic.w	r3, r3, #7
 800be5c:	f103 0208 	add.w	r2, r3, #8
 800be60:	f894 a018 	ldrb.w	sl, [r4, #24]
 800be64:	f8d4 b000 	ldr.w	fp, [r4]
 800be68:	f8c8 2000 	str.w	r2, [r8]
 800be6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800be70:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800be74:	9307      	str	r3, [sp, #28]
 800be76:	f8cd 8018 	str.w	r8, [sp, #24]
 800be7a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800be7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be82:	4b9c      	ldr	r3, [pc, #624]	@ (800c0f4 <_printf_float+0x2c8>)
 800be84:	f04f 32ff 	mov.w	r2, #4294967295
 800be88:	f7f4 fe50 	bl	8000b2c <__aeabi_dcmpun>
 800be8c:	bb70      	cbnz	r0, 800beec <_printf_float+0xc0>
 800be8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be92:	4b98      	ldr	r3, [pc, #608]	@ (800c0f4 <_printf_float+0x2c8>)
 800be94:	f04f 32ff 	mov.w	r2, #4294967295
 800be98:	f7f4 fe2a 	bl	8000af0 <__aeabi_dcmple>
 800be9c:	bb30      	cbnz	r0, 800beec <_printf_float+0xc0>
 800be9e:	2200      	movs	r2, #0
 800bea0:	2300      	movs	r3, #0
 800bea2:	4640      	mov	r0, r8
 800bea4:	4649      	mov	r1, r9
 800bea6:	f7f4 fe19 	bl	8000adc <__aeabi_dcmplt>
 800beaa:	b110      	cbz	r0, 800beb2 <_printf_float+0x86>
 800beac:	232d      	movs	r3, #45	@ 0x2d
 800beae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800beb2:	4a91      	ldr	r2, [pc, #580]	@ (800c0f8 <_printf_float+0x2cc>)
 800beb4:	4b91      	ldr	r3, [pc, #580]	@ (800c0fc <_printf_float+0x2d0>)
 800beb6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800beba:	bf8c      	ite	hi
 800bebc:	4690      	movhi	r8, r2
 800bebe:	4698      	movls	r8, r3
 800bec0:	2303      	movs	r3, #3
 800bec2:	6123      	str	r3, [r4, #16]
 800bec4:	f02b 0304 	bic.w	r3, fp, #4
 800bec8:	6023      	str	r3, [r4, #0]
 800beca:	f04f 0900 	mov.w	r9, #0
 800bece:	9700      	str	r7, [sp, #0]
 800bed0:	4633      	mov	r3, r6
 800bed2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bed4:	4621      	mov	r1, r4
 800bed6:	4628      	mov	r0, r5
 800bed8:	f000 f9d2 	bl	800c280 <_printf_common>
 800bedc:	3001      	adds	r0, #1
 800bede:	f040 808d 	bne.w	800bffc <_printf_float+0x1d0>
 800bee2:	f04f 30ff 	mov.w	r0, #4294967295
 800bee6:	b00d      	add	sp, #52	@ 0x34
 800bee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beec:	4642      	mov	r2, r8
 800beee:	464b      	mov	r3, r9
 800bef0:	4640      	mov	r0, r8
 800bef2:	4649      	mov	r1, r9
 800bef4:	f7f4 fe1a 	bl	8000b2c <__aeabi_dcmpun>
 800bef8:	b140      	cbz	r0, 800bf0c <_printf_float+0xe0>
 800befa:	464b      	mov	r3, r9
 800befc:	2b00      	cmp	r3, #0
 800befe:	bfbc      	itt	lt
 800bf00:	232d      	movlt	r3, #45	@ 0x2d
 800bf02:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bf06:	4a7e      	ldr	r2, [pc, #504]	@ (800c100 <_printf_float+0x2d4>)
 800bf08:	4b7e      	ldr	r3, [pc, #504]	@ (800c104 <_printf_float+0x2d8>)
 800bf0a:	e7d4      	b.n	800beb6 <_printf_float+0x8a>
 800bf0c:	6863      	ldr	r3, [r4, #4]
 800bf0e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bf12:	9206      	str	r2, [sp, #24]
 800bf14:	1c5a      	adds	r2, r3, #1
 800bf16:	d13b      	bne.n	800bf90 <_printf_float+0x164>
 800bf18:	2306      	movs	r3, #6
 800bf1a:	6063      	str	r3, [r4, #4]
 800bf1c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bf20:	2300      	movs	r3, #0
 800bf22:	6022      	str	r2, [r4, #0]
 800bf24:	9303      	str	r3, [sp, #12]
 800bf26:	ab0a      	add	r3, sp, #40	@ 0x28
 800bf28:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bf2c:	ab09      	add	r3, sp, #36	@ 0x24
 800bf2e:	9300      	str	r3, [sp, #0]
 800bf30:	6861      	ldr	r1, [r4, #4]
 800bf32:	ec49 8b10 	vmov	d0, r8, r9
 800bf36:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	f7ff fed6 	bl	800bcec <__cvt>
 800bf40:	9b06      	ldr	r3, [sp, #24]
 800bf42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bf44:	2b47      	cmp	r3, #71	@ 0x47
 800bf46:	4680      	mov	r8, r0
 800bf48:	d129      	bne.n	800bf9e <_printf_float+0x172>
 800bf4a:	1cc8      	adds	r0, r1, #3
 800bf4c:	db02      	blt.n	800bf54 <_printf_float+0x128>
 800bf4e:	6863      	ldr	r3, [r4, #4]
 800bf50:	4299      	cmp	r1, r3
 800bf52:	dd41      	ble.n	800bfd8 <_printf_float+0x1ac>
 800bf54:	f1aa 0a02 	sub.w	sl, sl, #2
 800bf58:	fa5f fa8a 	uxtb.w	sl, sl
 800bf5c:	3901      	subs	r1, #1
 800bf5e:	4652      	mov	r2, sl
 800bf60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bf64:	9109      	str	r1, [sp, #36]	@ 0x24
 800bf66:	f7ff ff26 	bl	800bdb6 <__exponent>
 800bf6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf6c:	1813      	adds	r3, r2, r0
 800bf6e:	2a01      	cmp	r2, #1
 800bf70:	4681      	mov	r9, r0
 800bf72:	6123      	str	r3, [r4, #16]
 800bf74:	dc02      	bgt.n	800bf7c <_printf_float+0x150>
 800bf76:	6822      	ldr	r2, [r4, #0]
 800bf78:	07d2      	lsls	r2, r2, #31
 800bf7a:	d501      	bpl.n	800bf80 <_printf_float+0x154>
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	6123      	str	r3, [r4, #16]
 800bf80:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d0a2      	beq.n	800bece <_printf_float+0xa2>
 800bf88:	232d      	movs	r3, #45	@ 0x2d
 800bf8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf8e:	e79e      	b.n	800bece <_printf_float+0xa2>
 800bf90:	9a06      	ldr	r2, [sp, #24]
 800bf92:	2a47      	cmp	r2, #71	@ 0x47
 800bf94:	d1c2      	bne.n	800bf1c <_printf_float+0xf0>
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d1c0      	bne.n	800bf1c <_printf_float+0xf0>
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	e7bd      	b.n	800bf1a <_printf_float+0xee>
 800bf9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bfa2:	d9db      	bls.n	800bf5c <_printf_float+0x130>
 800bfa4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bfa8:	d118      	bne.n	800bfdc <_printf_float+0x1b0>
 800bfaa:	2900      	cmp	r1, #0
 800bfac:	6863      	ldr	r3, [r4, #4]
 800bfae:	dd0b      	ble.n	800bfc8 <_printf_float+0x19c>
 800bfb0:	6121      	str	r1, [r4, #16]
 800bfb2:	b913      	cbnz	r3, 800bfba <_printf_float+0x18e>
 800bfb4:	6822      	ldr	r2, [r4, #0]
 800bfb6:	07d0      	lsls	r0, r2, #31
 800bfb8:	d502      	bpl.n	800bfc0 <_printf_float+0x194>
 800bfba:	3301      	adds	r3, #1
 800bfbc:	440b      	add	r3, r1
 800bfbe:	6123      	str	r3, [r4, #16]
 800bfc0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bfc2:	f04f 0900 	mov.w	r9, #0
 800bfc6:	e7db      	b.n	800bf80 <_printf_float+0x154>
 800bfc8:	b913      	cbnz	r3, 800bfd0 <_printf_float+0x1a4>
 800bfca:	6822      	ldr	r2, [r4, #0]
 800bfcc:	07d2      	lsls	r2, r2, #31
 800bfce:	d501      	bpl.n	800bfd4 <_printf_float+0x1a8>
 800bfd0:	3302      	adds	r3, #2
 800bfd2:	e7f4      	b.n	800bfbe <_printf_float+0x192>
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	e7f2      	b.n	800bfbe <_printf_float+0x192>
 800bfd8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bfdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfde:	4299      	cmp	r1, r3
 800bfe0:	db05      	blt.n	800bfee <_printf_float+0x1c2>
 800bfe2:	6823      	ldr	r3, [r4, #0]
 800bfe4:	6121      	str	r1, [r4, #16]
 800bfe6:	07d8      	lsls	r0, r3, #31
 800bfe8:	d5ea      	bpl.n	800bfc0 <_printf_float+0x194>
 800bfea:	1c4b      	adds	r3, r1, #1
 800bfec:	e7e7      	b.n	800bfbe <_printf_float+0x192>
 800bfee:	2900      	cmp	r1, #0
 800bff0:	bfd4      	ite	le
 800bff2:	f1c1 0202 	rsble	r2, r1, #2
 800bff6:	2201      	movgt	r2, #1
 800bff8:	4413      	add	r3, r2
 800bffa:	e7e0      	b.n	800bfbe <_printf_float+0x192>
 800bffc:	6823      	ldr	r3, [r4, #0]
 800bffe:	055a      	lsls	r2, r3, #21
 800c000:	d407      	bmi.n	800c012 <_printf_float+0x1e6>
 800c002:	6923      	ldr	r3, [r4, #16]
 800c004:	4642      	mov	r2, r8
 800c006:	4631      	mov	r1, r6
 800c008:	4628      	mov	r0, r5
 800c00a:	47b8      	blx	r7
 800c00c:	3001      	adds	r0, #1
 800c00e:	d12b      	bne.n	800c068 <_printf_float+0x23c>
 800c010:	e767      	b.n	800bee2 <_printf_float+0xb6>
 800c012:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c016:	f240 80dd 	bls.w	800c1d4 <_printf_float+0x3a8>
 800c01a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c01e:	2200      	movs	r2, #0
 800c020:	2300      	movs	r3, #0
 800c022:	f7f4 fd51 	bl	8000ac8 <__aeabi_dcmpeq>
 800c026:	2800      	cmp	r0, #0
 800c028:	d033      	beq.n	800c092 <_printf_float+0x266>
 800c02a:	4a37      	ldr	r2, [pc, #220]	@ (800c108 <_printf_float+0x2dc>)
 800c02c:	2301      	movs	r3, #1
 800c02e:	4631      	mov	r1, r6
 800c030:	4628      	mov	r0, r5
 800c032:	47b8      	blx	r7
 800c034:	3001      	adds	r0, #1
 800c036:	f43f af54 	beq.w	800bee2 <_printf_float+0xb6>
 800c03a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c03e:	4543      	cmp	r3, r8
 800c040:	db02      	blt.n	800c048 <_printf_float+0x21c>
 800c042:	6823      	ldr	r3, [r4, #0]
 800c044:	07d8      	lsls	r0, r3, #31
 800c046:	d50f      	bpl.n	800c068 <_printf_float+0x23c>
 800c048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c04c:	4631      	mov	r1, r6
 800c04e:	4628      	mov	r0, r5
 800c050:	47b8      	blx	r7
 800c052:	3001      	adds	r0, #1
 800c054:	f43f af45 	beq.w	800bee2 <_printf_float+0xb6>
 800c058:	f04f 0900 	mov.w	r9, #0
 800c05c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c060:	f104 0a1a 	add.w	sl, r4, #26
 800c064:	45c8      	cmp	r8, r9
 800c066:	dc09      	bgt.n	800c07c <_printf_float+0x250>
 800c068:	6823      	ldr	r3, [r4, #0]
 800c06a:	079b      	lsls	r3, r3, #30
 800c06c:	f100 8103 	bmi.w	800c276 <_printf_float+0x44a>
 800c070:	68e0      	ldr	r0, [r4, #12]
 800c072:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c074:	4298      	cmp	r0, r3
 800c076:	bfb8      	it	lt
 800c078:	4618      	movlt	r0, r3
 800c07a:	e734      	b.n	800bee6 <_printf_float+0xba>
 800c07c:	2301      	movs	r3, #1
 800c07e:	4652      	mov	r2, sl
 800c080:	4631      	mov	r1, r6
 800c082:	4628      	mov	r0, r5
 800c084:	47b8      	blx	r7
 800c086:	3001      	adds	r0, #1
 800c088:	f43f af2b 	beq.w	800bee2 <_printf_float+0xb6>
 800c08c:	f109 0901 	add.w	r9, r9, #1
 800c090:	e7e8      	b.n	800c064 <_printf_float+0x238>
 800c092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c094:	2b00      	cmp	r3, #0
 800c096:	dc39      	bgt.n	800c10c <_printf_float+0x2e0>
 800c098:	4a1b      	ldr	r2, [pc, #108]	@ (800c108 <_printf_float+0x2dc>)
 800c09a:	2301      	movs	r3, #1
 800c09c:	4631      	mov	r1, r6
 800c09e:	4628      	mov	r0, r5
 800c0a0:	47b8      	blx	r7
 800c0a2:	3001      	adds	r0, #1
 800c0a4:	f43f af1d 	beq.w	800bee2 <_printf_float+0xb6>
 800c0a8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c0ac:	ea59 0303 	orrs.w	r3, r9, r3
 800c0b0:	d102      	bne.n	800c0b8 <_printf_float+0x28c>
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	07d9      	lsls	r1, r3, #31
 800c0b6:	d5d7      	bpl.n	800c068 <_printf_float+0x23c>
 800c0b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0bc:	4631      	mov	r1, r6
 800c0be:	4628      	mov	r0, r5
 800c0c0:	47b8      	blx	r7
 800c0c2:	3001      	adds	r0, #1
 800c0c4:	f43f af0d 	beq.w	800bee2 <_printf_float+0xb6>
 800c0c8:	f04f 0a00 	mov.w	sl, #0
 800c0cc:	f104 0b1a 	add.w	fp, r4, #26
 800c0d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0d2:	425b      	negs	r3, r3
 800c0d4:	4553      	cmp	r3, sl
 800c0d6:	dc01      	bgt.n	800c0dc <_printf_float+0x2b0>
 800c0d8:	464b      	mov	r3, r9
 800c0da:	e793      	b.n	800c004 <_printf_float+0x1d8>
 800c0dc:	2301      	movs	r3, #1
 800c0de:	465a      	mov	r2, fp
 800c0e0:	4631      	mov	r1, r6
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	47b8      	blx	r7
 800c0e6:	3001      	adds	r0, #1
 800c0e8:	f43f aefb 	beq.w	800bee2 <_printf_float+0xb6>
 800c0ec:	f10a 0a01 	add.w	sl, sl, #1
 800c0f0:	e7ee      	b.n	800c0d0 <_printf_float+0x2a4>
 800c0f2:	bf00      	nop
 800c0f4:	7fefffff 	.word	0x7fefffff
 800c0f8:	0800e8ab 	.word	0x0800e8ab
 800c0fc:	0800e8a7 	.word	0x0800e8a7
 800c100:	0800e8b3 	.word	0x0800e8b3
 800c104:	0800e8af 	.word	0x0800e8af
 800c108:	0800e8b7 	.word	0x0800e8b7
 800c10c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c10e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c112:	4553      	cmp	r3, sl
 800c114:	bfa8      	it	ge
 800c116:	4653      	movge	r3, sl
 800c118:	2b00      	cmp	r3, #0
 800c11a:	4699      	mov	r9, r3
 800c11c:	dc36      	bgt.n	800c18c <_printf_float+0x360>
 800c11e:	f04f 0b00 	mov.w	fp, #0
 800c122:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c126:	f104 021a 	add.w	r2, r4, #26
 800c12a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c12c:	9306      	str	r3, [sp, #24]
 800c12e:	eba3 0309 	sub.w	r3, r3, r9
 800c132:	455b      	cmp	r3, fp
 800c134:	dc31      	bgt.n	800c19a <_printf_float+0x36e>
 800c136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c138:	459a      	cmp	sl, r3
 800c13a:	dc3a      	bgt.n	800c1b2 <_printf_float+0x386>
 800c13c:	6823      	ldr	r3, [r4, #0]
 800c13e:	07da      	lsls	r2, r3, #31
 800c140:	d437      	bmi.n	800c1b2 <_printf_float+0x386>
 800c142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c144:	ebaa 0903 	sub.w	r9, sl, r3
 800c148:	9b06      	ldr	r3, [sp, #24]
 800c14a:	ebaa 0303 	sub.w	r3, sl, r3
 800c14e:	4599      	cmp	r9, r3
 800c150:	bfa8      	it	ge
 800c152:	4699      	movge	r9, r3
 800c154:	f1b9 0f00 	cmp.w	r9, #0
 800c158:	dc33      	bgt.n	800c1c2 <_printf_float+0x396>
 800c15a:	f04f 0800 	mov.w	r8, #0
 800c15e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c162:	f104 0b1a 	add.w	fp, r4, #26
 800c166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c168:	ebaa 0303 	sub.w	r3, sl, r3
 800c16c:	eba3 0309 	sub.w	r3, r3, r9
 800c170:	4543      	cmp	r3, r8
 800c172:	f77f af79 	ble.w	800c068 <_printf_float+0x23c>
 800c176:	2301      	movs	r3, #1
 800c178:	465a      	mov	r2, fp
 800c17a:	4631      	mov	r1, r6
 800c17c:	4628      	mov	r0, r5
 800c17e:	47b8      	blx	r7
 800c180:	3001      	adds	r0, #1
 800c182:	f43f aeae 	beq.w	800bee2 <_printf_float+0xb6>
 800c186:	f108 0801 	add.w	r8, r8, #1
 800c18a:	e7ec      	b.n	800c166 <_printf_float+0x33a>
 800c18c:	4642      	mov	r2, r8
 800c18e:	4631      	mov	r1, r6
 800c190:	4628      	mov	r0, r5
 800c192:	47b8      	blx	r7
 800c194:	3001      	adds	r0, #1
 800c196:	d1c2      	bne.n	800c11e <_printf_float+0x2f2>
 800c198:	e6a3      	b.n	800bee2 <_printf_float+0xb6>
 800c19a:	2301      	movs	r3, #1
 800c19c:	4631      	mov	r1, r6
 800c19e:	4628      	mov	r0, r5
 800c1a0:	9206      	str	r2, [sp, #24]
 800c1a2:	47b8      	blx	r7
 800c1a4:	3001      	adds	r0, #1
 800c1a6:	f43f ae9c 	beq.w	800bee2 <_printf_float+0xb6>
 800c1aa:	9a06      	ldr	r2, [sp, #24]
 800c1ac:	f10b 0b01 	add.w	fp, fp, #1
 800c1b0:	e7bb      	b.n	800c12a <_printf_float+0x2fe>
 800c1b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1b6:	4631      	mov	r1, r6
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	47b8      	blx	r7
 800c1bc:	3001      	adds	r0, #1
 800c1be:	d1c0      	bne.n	800c142 <_printf_float+0x316>
 800c1c0:	e68f      	b.n	800bee2 <_printf_float+0xb6>
 800c1c2:	9a06      	ldr	r2, [sp, #24]
 800c1c4:	464b      	mov	r3, r9
 800c1c6:	4442      	add	r2, r8
 800c1c8:	4631      	mov	r1, r6
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	47b8      	blx	r7
 800c1ce:	3001      	adds	r0, #1
 800c1d0:	d1c3      	bne.n	800c15a <_printf_float+0x32e>
 800c1d2:	e686      	b.n	800bee2 <_printf_float+0xb6>
 800c1d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c1d8:	f1ba 0f01 	cmp.w	sl, #1
 800c1dc:	dc01      	bgt.n	800c1e2 <_printf_float+0x3b6>
 800c1de:	07db      	lsls	r3, r3, #31
 800c1e0:	d536      	bpl.n	800c250 <_printf_float+0x424>
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	4642      	mov	r2, r8
 800c1e6:	4631      	mov	r1, r6
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	47b8      	blx	r7
 800c1ec:	3001      	adds	r0, #1
 800c1ee:	f43f ae78 	beq.w	800bee2 <_printf_float+0xb6>
 800c1f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1f6:	4631      	mov	r1, r6
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	47b8      	blx	r7
 800c1fc:	3001      	adds	r0, #1
 800c1fe:	f43f ae70 	beq.w	800bee2 <_printf_float+0xb6>
 800c202:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c206:	2200      	movs	r2, #0
 800c208:	2300      	movs	r3, #0
 800c20a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c20e:	f7f4 fc5b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c212:	b9c0      	cbnz	r0, 800c246 <_printf_float+0x41a>
 800c214:	4653      	mov	r3, sl
 800c216:	f108 0201 	add.w	r2, r8, #1
 800c21a:	4631      	mov	r1, r6
 800c21c:	4628      	mov	r0, r5
 800c21e:	47b8      	blx	r7
 800c220:	3001      	adds	r0, #1
 800c222:	d10c      	bne.n	800c23e <_printf_float+0x412>
 800c224:	e65d      	b.n	800bee2 <_printf_float+0xb6>
 800c226:	2301      	movs	r3, #1
 800c228:	465a      	mov	r2, fp
 800c22a:	4631      	mov	r1, r6
 800c22c:	4628      	mov	r0, r5
 800c22e:	47b8      	blx	r7
 800c230:	3001      	adds	r0, #1
 800c232:	f43f ae56 	beq.w	800bee2 <_printf_float+0xb6>
 800c236:	f108 0801 	add.w	r8, r8, #1
 800c23a:	45d0      	cmp	r8, sl
 800c23c:	dbf3      	blt.n	800c226 <_printf_float+0x3fa>
 800c23e:	464b      	mov	r3, r9
 800c240:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c244:	e6df      	b.n	800c006 <_printf_float+0x1da>
 800c246:	f04f 0800 	mov.w	r8, #0
 800c24a:	f104 0b1a 	add.w	fp, r4, #26
 800c24e:	e7f4      	b.n	800c23a <_printf_float+0x40e>
 800c250:	2301      	movs	r3, #1
 800c252:	4642      	mov	r2, r8
 800c254:	e7e1      	b.n	800c21a <_printf_float+0x3ee>
 800c256:	2301      	movs	r3, #1
 800c258:	464a      	mov	r2, r9
 800c25a:	4631      	mov	r1, r6
 800c25c:	4628      	mov	r0, r5
 800c25e:	47b8      	blx	r7
 800c260:	3001      	adds	r0, #1
 800c262:	f43f ae3e 	beq.w	800bee2 <_printf_float+0xb6>
 800c266:	f108 0801 	add.w	r8, r8, #1
 800c26a:	68e3      	ldr	r3, [r4, #12]
 800c26c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c26e:	1a5b      	subs	r3, r3, r1
 800c270:	4543      	cmp	r3, r8
 800c272:	dcf0      	bgt.n	800c256 <_printf_float+0x42a>
 800c274:	e6fc      	b.n	800c070 <_printf_float+0x244>
 800c276:	f04f 0800 	mov.w	r8, #0
 800c27a:	f104 0919 	add.w	r9, r4, #25
 800c27e:	e7f4      	b.n	800c26a <_printf_float+0x43e>

0800c280 <_printf_common>:
 800c280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c284:	4616      	mov	r6, r2
 800c286:	4698      	mov	r8, r3
 800c288:	688a      	ldr	r2, [r1, #8]
 800c28a:	690b      	ldr	r3, [r1, #16]
 800c28c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c290:	4293      	cmp	r3, r2
 800c292:	bfb8      	it	lt
 800c294:	4613      	movlt	r3, r2
 800c296:	6033      	str	r3, [r6, #0]
 800c298:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c29c:	4607      	mov	r7, r0
 800c29e:	460c      	mov	r4, r1
 800c2a0:	b10a      	cbz	r2, 800c2a6 <_printf_common+0x26>
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	6033      	str	r3, [r6, #0]
 800c2a6:	6823      	ldr	r3, [r4, #0]
 800c2a8:	0699      	lsls	r1, r3, #26
 800c2aa:	bf42      	ittt	mi
 800c2ac:	6833      	ldrmi	r3, [r6, #0]
 800c2ae:	3302      	addmi	r3, #2
 800c2b0:	6033      	strmi	r3, [r6, #0]
 800c2b2:	6825      	ldr	r5, [r4, #0]
 800c2b4:	f015 0506 	ands.w	r5, r5, #6
 800c2b8:	d106      	bne.n	800c2c8 <_printf_common+0x48>
 800c2ba:	f104 0a19 	add.w	sl, r4, #25
 800c2be:	68e3      	ldr	r3, [r4, #12]
 800c2c0:	6832      	ldr	r2, [r6, #0]
 800c2c2:	1a9b      	subs	r3, r3, r2
 800c2c4:	42ab      	cmp	r3, r5
 800c2c6:	dc26      	bgt.n	800c316 <_printf_common+0x96>
 800c2c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c2cc:	6822      	ldr	r2, [r4, #0]
 800c2ce:	3b00      	subs	r3, #0
 800c2d0:	bf18      	it	ne
 800c2d2:	2301      	movne	r3, #1
 800c2d4:	0692      	lsls	r2, r2, #26
 800c2d6:	d42b      	bmi.n	800c330 <_printf_common+0xb0>
 800c2d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c2dc:	4641      	mov	r1, r8
 800c2de:	4638      	mov	r0, r7
 800c2e0:	47c8      	blx	r9
 800c2e2:	3001      	adds	r0, #1
 800c2e4:	d01e      	beq.n	800c324 <_printf_common+0xa4>
 800c2e6:	6823      	ldr	r3, [r4, #0]
 800c2e8:	6922      	ldr	r2, [r4, #16]
 800c2ea:	f003 0306 	and.w	r3, r3, #6
 800c2ee:	2b04      	cmp	r3, #4
 800c2f0:	bf02      	ittt	eq
 800c2f2:	68e5      	ldreq	r5, [r4, #12]
 800c2f4:	6833      	ldreq	r3, [r6, #0]
 800c2f6:	1aed      	subeq	r5, r5, r3
 800c2f8:	68a3      	ldr	r3, [r4, #8]
 800c2fa:	bf0c      	ite	eq
 800c2fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c300:	2500      	movne	r5, #0
 800c302:	4293      	cmp	r3, r2
 800c304:	bfc4      	itt	gt
 800c306:	1a9b      	subgt	r3, r3, r2
 800c308:	18ed      	addgt	r5, r5, r3
 800c30a:	2600      	movs	r6, #0
 800c30c:	341a      	adds	r4, #26
 800c30e:	42b5      	cmp	r5, r6
 800c310:	d11a      	bne.n	800c348 <_printf_common+0xc8>
 800c312:	2000      	movs	r0, #0
 800c314:	e008      	b.n	800c328 <_printf_common+0xa8>
 800c316:	2301      	movs	r3, #1
 800c318:	4652      	mov	r2, sl
 800c31a:	4641      	mov	r1, r8
 800c31c:	4638      	mov	r0, r7
 800c31e:	47c8      	blx	r9
 800c320:	3001      	adds	r0, #1
 800c322:	d103      	bne.n	800c32c <_printf_common+0xac>
 800c324:	f04f 30ff 	mov.w	r0, #4294967295
 800c328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c32c:	3501      	adds	r5, #1
 800c32e:	e7c6      	b.n	800c2be <_printf_common+0x3e>
 800c330:	18e1      	adds	r1, r4, r3
 800c332:	1c5a      	adds	r2, r3, #1
 800c334:	2030      	movs	r0, #48	@ 0x30
 800c336:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c33a:	4422      	add	r2, r4
 800c33c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c340:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c344:	3302      	adds	r3, #2
 800c346:	e7c7      	b.n	800c2d8 <_printf_common+0x58>
 800c348:	2301      	movs	r3, #1
 800c34a:	4622      	mov	r2, r4
 800c34c:	4641      	mov	r1, r8
 800c34e:	4638      	mov	r0, r7
 800c350:	47c8      	blx	r9
 800c352:	3001      	adds	r0, #1
 800c354:	d0e6      	beq.n	800c324 <_printf_common+0xa4>
 800c356:	3601      	adds	r6, #1
 800c358:	e7d9      	b.n	800c30e <_printf_common+0x8e>
	...

0800c35c <_printf_i>:
 800c35c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c360:	7e0f      	ldrb	r7, [r1, #24]
 800c362:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c364:	2f78      	cmp	r7, #120	@ 0x78
 800c366:	4691      	mov	r9, r2
 800c368:	4680      	mov	r8, r0
 800c36a:	460c      	mov	r4, r1
 800c36c:	469a      	mov	sl, r3
 800c36e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c372:	d807      	bhi.n	800c384 <_printf_i+0x28>
 800c374:	2f62      	cmp	r7, #98	@ 0x62
 800c376:	d80a      	bhi.n	800c38e <_printf_i+0x32>
 800c378:	2f00      	cmp	r7, #0
 800c37a:	f000 80d1 	beq.w	800c520 <_printf_i+0x1c4>
 800c37e:	2f58      	cmp	r7, #88	@ 0x58
 800c380:	f000 80b8 	beq.w	800c4f4 <_printf_i+0x198>
 800c384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c388:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c38c:	e03a      	b.n	800c404 <_printf_i+0xa8>
 800c38e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c392:	2b15      	cmp	r3, #21
 800c394:	d8f6      	bhi.n	800c384 <_printf_i+0x28>
 800c396:	a101      	add	r1, pc, #4	@ (adr r1, 800c39c <_printf_i+0x40>)
 800c398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c39c:	0800c3f5 	.word	0x0800c3f5
 800c3a0:	0800c409 	.word	0x0800c409
 800c3a4:	0800c385 	.word	0x0800c385
 800c3a8:	0800c385 	.word	0x0800c385
 800c3ac:	0800c385 	.word	0x0800c385
 800c3b0:	0800c385 	.word	0x0800c385
 800c3b4:	0800c409 	.word	0x0800c409
 800c3b8:	0800c385 	.word	0x0800c385
 800c3bc:	0800c385 	.word	0x0800c385
 800c3c0:	0800c385 	.word	0x0800c385
 800c3c4:	0800c385 	.word	0x0800c385
 800c3c8:	0800c507 	.word	0x0800c507
 800c3cc:	0800c433 	.word	0x0800c433
 800c3d0:	0800c4c1 	.word	0x0800c4c1
 800c3d4:	0800c385 	.word	0x0800c385
 800c3d8:	0800c385 	.word	0x0800c385
 800c3dc:	0800c529 	.word	0x0800c529
 800c3e0:	0800c385 	.word	0x0800c385
 800c3e4:	0800c433 	.word	0x0800c433
 800c3e8:	0800c385 	.word	0x0800c385
 800c3ec:	0800c385 	.word	0x0800c385
 800c3f0:	0800c4c9 	.word	0x0800c4c9
 800c3f4:	6833      	ldr	r3, [r6, #0]
 800c3f6:	1d1a      	adds	r2, r3, #4
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	6032      	str	r2, [r6, #0]
 800c3fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c400:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c404:	2301      	movs	r3, #1
 800c406:	e09c      	b.n	800c542 <_printf_i+0x1e6>
 800c408:	6833      	ldr	r3, [r6, #0]
 800c40a:	6820      	ldr	r0, [r4, #0]
 800c40c:	1d19      	adds	r1, r3, #4
 800c40e:	6031      	str	r1, [r6, #0]
 800c410:	0606      	lsls	r6, r0, #24
 800c412:	d501      	bpl.n	800c418 <_printf_i+0xbc>
 800c414:	681d      	ldr	r5, [r3, #0]
 800c416:	e003      	b.n	800c420 <_printf_i+0xc4>
 800c418:	0645      	lsls	r5, r0, #25
 800c41a:	d5fb      	bpl.n	800c414 <_printf_i+0xb8>
 800c41c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c420:	2d00      	cmp	r5, #0
 800c422:	da03      	bge.n	800c42c <_printf_i+0xd0>
 800c424:	232d      	movs	r3, #45	@ 0x2d
 800c426:	426d      	negs	r5, r5
 800c428:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c42c:	4858      	ldr	r0, [pc, #352]	@ (800c590 <_printf_i+0x234>)
 800c42e:	230a      	movs	r3, #10
 800c430:	e011      	b.n	800c456 <_printf_i+0xfa>
 800c432:	6821      	ldr	r1, [r4, #0]
 800c434:	6833      	ldr	r3, [r6, #0]
 800c436:	0608      	lsls	r0, r1, #24
 800c438:	f853 5b04 	ldr.w	r5, [r3], #4
 800c43c:	d402      	bmi.n	800c444 <_printf_i+0xe8>
 800c43e:	0649      	lsls	r1, r1, #25
 800c440:	bf48      	it	mi
 800c442:	b2ad      	uxthmi	r5, r5
 800c444:	2f6f      	cmp	r7, #111	@ 0x6f
 800c446:	4852      	ldr	r0, [pc, #328]	@ (800c590 <_printf_i+0x234>)
 800c448:	6033      	str	r3, [r6, #0]
 800c44a:	bf14      	ite	ne
 800c44c:	230a      	movne	r3, #10
 800c44e:	2308      	moveq	r3, #8
 800c450:	2100      	movs	r1, #0
 800c452:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c456:	6866      	ldr	r6, [r4, #4]
 800c458:	60a6      	str	r6, [r4, #8]
 800c45a:	2e00      	cmp	r6, #0
 800c45c:	db05      	blt.n	800c46a <_printf_i+0x10e>
 800c45e:	6821      	ldr	r1, [r4, #0]
 800c460:	432e      	orrs	r6, r5
 800c462:	f021 0104 	bic.w	r1, r1, #4
 800c466:	6021      	str	r1, [r4, #0]
 800c468:	d04b      	beq.n	800c502 <_printf_i+0x1a6>
 800c46a:	4616      	mov	r6, r2
 800c46c:	fbb5 f1f3 	udiv	r1, r5, r3
 800c470:	fb03 5711 	mls	r7, r3, r1, r5
 800c474:	5dc7      	ldrb	r7, [r0, r7]
 800c476:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c47a:	462f      	mov	r7, r5
 800c47c:	42bb      	cmp	r3, r7
 800c47e:	460d      	mov	r5, r1
 800c480:	d9f4      	bls.n	800c46c <_printf_i+0x110>
 800c482:	2b08      	cmp	r3, #8
 800c484:	d10b      	bne.n	800c49e <_printf_i+0x142>
 800c486:	6823      	ldr	r3, [r4, #0]
 800c488:	07df      	lsls	r7, r3, #31
 800c48a:	d508      	bpl.n	800c49e <_printf_i+0x142>
 800c48c:	6923      	ldr	r3, [r4, #16]
 800c48e:	6861      	ldr	r1, [r4, #4]
 800c490:	4299      	cmp	r1, r3
 800c492:	bfde      	ittt	le
 800c494:	2330      	movle	r3, #48	@ 0x30
 800c496:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c49a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c49e:	1b92      	subs	r2, r2, r6
 800c4a0:	6122      	str	r2, [r4, #16]
 800c4a2:	f8cd a000 	str.w	sl, [sp]
 800c4a6:	464b      	mov	r3, r9
 800c4a8:	aa03      	add	r2, sp, #12
 800c4aa:	4621      	mov	r1, r4
 800c4ac:	4640      	mov	r0, r8
 800c4ae:	f7ff fee7 	bl	800c280 <_printf_common>
 800c4b2:	3001      	adds	r0, #1
 800c4b4:	d14a      	bne.n	800c54c <_printf_i+0x1f0>
 800c4b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ba:	b004      	add	sp, #16
 800c4bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	f043 0320 	orr.w	r3, r3, #32
 800c4c6:	6023      	str	r3, [r4, #0]
 800c4c8:	4832      	ldr	r0, [pc, #200]	@ (800c594 <_printf_i+0x238>)
 800c4ca:	2778      	movs	r7, #120	@ 0x78
 800c4cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c4d0:	6823      	ldr	r3, [r4, #0]
 800c4d2:	6831      	ldr	r1, [r6, #0]
 800c4d4:	061f      	lsls	r7, r3, #24
 800c4d6:	f851 5b04 	ldr.w	r5, [r1], #4
 800c4da:	d402      	bmi.n	800c4e2 <_printf_i+0x186>
 800c4dc:	065f      	lsls	r7, r3, #25
 800c4de:	bf48      	it	mi
 800c4e0:	b2ad      	uxthmi	r5, r5
 800c4e2:	6031      	str	r1, [r6, #0]
 800c4e4:	07d9      	lsls	r1, r3, #31
 800c4e6:	bf44      	itt	mi
 800c4e8:	f043 0320 	orrmi.w	r3, r3, #32
 800c4ec:	6023      	strmi	r3, [r4, #0]
 800c4ee:	b11d      	cbz	r5, 800c4f8 <_printf_i+0x19c>
 800c4f0:	2310      	movs	r3, #16
 800c4f2:	e7ad      	b.n	800c450 <_printf_i+0xf4>
 800c4f4:	4826      	ldr	r0, [pc, #152]	@ (800c590 <_printf_i+0x234>)
 800c4f6:	e7e9      	b.n	800c4cc <_printf_i+0x170>
 800c4f8:	6823      	ldr	r3, [r4, #0]
 800c4fa:	f023 0320 	bic.w	r3, r3, #32
 800c4fe:	6023      	str	r3, [r4, #0]
 800c500:	e7f6      	b.n	800c4f0 <_printf_i+0x194>
 800c502:	4616      	mov	r6, r2
 800c504:	e7bd      	b.n	800c482 <_printf_i+0x126>
 800c506:	6833      	ldr	r3, [r6, #0]
 800c508:	6825      	ldr	r5, [r4, #0]
 800c50a:	6961      	ldr	r1, [r4, #20]
 800c50c:	1d18      	adds	r0, r3, #4
 800c50e:	6030      	str	r0, [r6, #0]
 800c510:	062e      	lsls	r6, r5, #24
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	d501      	bpl.n	800c51a <_printf_i+0x1be>
 800c516:	6019      	str	r1, [r3, #0]
 800c518:	e002      	b.n	800c520 <_printf_i+0x1c4>
 800c51a:	0668      	lsls	r0, r5, #25
 800c51c:	d5fb      	bpl.n	800c516 <_printf_i+0x1ba>
 800c51e:	8019      	strh	r1, [r3, #0]
 800c520:	2300      	movs	r3, #0
 800c522:	6123      	str	r3, [r4, #16]
 800c524:	4616      	mov	r6, r2
 800c526:	e7bc      	b.n	800c4a2 <_printf_i+0x146>
 800c528:	6833      	ldr	r3, [r6, #0]
 800c52a:	1d1a      	adds	r2, r3, #4
 800c52c:	6032      	str	r2, [r6, #0]
 800c52e:	681e      	ldr	r6, [r3, #0]
 800c530:	6862      	ldr	r2, [r4, #4]
 800c532:	2100      	movs	r1, #0
 800c534:	4630      	mov	r0, r6
 800c536:	f7f3 fe4b 	bl	80001d0 <memchr>
 800c53a:	b108      	cbz	r0, 800c540 <_printf_i+0x1e4>
 800c53c:	1b80      	subs	r0, r0, r6
 800c53e:	6060      	str	r0, [r4, #4]
 800c540:	6863      	ldr	r3, [r4, #4]
 800c542:	6123      	str	r3, [r4, #16]
 800c544:	2300      	movs	r3, #0
 800c546:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c54a:	e7aa      	b.n	800c4a2 <_printf_i+0x146>
 800c54c:	6923      	ldr	r3, [r4, #16]
 800c54e:	4632      	mov	r2, r6
 800c550:	4649      	mov	r1, r9
 800c552:	4640      	mov	r0, r8
 800c554:	47d0      	blx	sl
 800c556:	3001      	adds	r0, #1
 800c558:	d0ad      	beq.n	800c4b6 <_printf_i+0x15a>
 800c55a:	6823      	ldr	r3, [r4, #0]
 800c55c:	079b      	lsls	r3, r3, #30
 800c55e:	d413      	bmi.n	800c588 <_printf_i+0x22c>
 800c560:	68e0      	ldr	r0, [r4, #12]
 800c562:	9b03      	ldr	r3, [sp, #12]
 800c564:	4298      	cmp	r0, r3
 800c566:	bfb8      	it	lt
 800c568:	4618      	movlt	r0, r3
 800c56a:	e7a6      	b.n	800c4ba <_printf_i+0x15e>
 800c56c:	2301      	movs	r3, #1
 800c56e:	4632      	mov	r2, r6
 800c570:	4649      	mov	r1, r9
 800c572:	4640      	mov	r0, r8
 800c574:	47d0      	blx	sl
 800c576:	3001      	adds	r0, #1
 800c578:	d09d      	beq.n	800c4b6 <_printf_i+0x15a>
 800c57a:	3501      	adds	r5, #1
 800c57c:	68e3      	ldr	r3, [r4, #12]
 800c57e:	9903      	ldr	r1, [sp, #12]
 800c580:	1a5b      	subs	r3, r3, r1
 800c582:	42ab      	cmp	r3, r5
 800c584:	dcf2      	bgt.n	800c56c <_printf_i+0x210>
 800c586:	e7eb      	b.n	800c560 <_printf_i+0x204>
 800c588:	2500      	movs	r5, #0
 800c58a:	f104 0619 	add.w	r6, r4, #25
 800c58e:	e7f5      	b.n	800c57c <_printf_i+0x220>
 800c590:	0800e8b9 	.word	0x0800e8b9
 800c594:	0800e8ca 	.word	0x0800e8ca

0800c598 <std>:
 800c598:	2300      	movs	r3, #0
 800c59a:	b510      	push	{r4, lr}
 800c59c:	4604      	mov	r4, r0
 800c59e:	e9c0 3300 	strd	r3, r3, [r0]
 800c5a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5a6:	6083      	str	r3, [r0, #8]
 800c5a8:	8181      	strh	r1, [r0, #12]
 800c5aa:	6643      	str	r3, [r0, #100]	@ 0x64
 800c5ac:	81c2      	strh	r2, [r0, #14]
 800c5ae:	6183      	str	r3, [r0, #24]
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	2208      	movs	r2, #8
 800c5b4:	305c      	adds	r0, #92	@ 0x5c
 800c5b6:	f000 f9f9 	bl	800c9ac <memset>
 800c5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c5f0 <std+0x58>)
 800c5bc:	6263      	str	r3, [r4, #36]	@ 0x24
 800c5be:	4b0d      	ldr	r3, [pc, #52]	@ (800c5f4 <std+0x5c>)
 800c5c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c5f8 <std+0x60>)
 800c5c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c5c6:	4b0d      	ldr	r3, [pc, #52]	@ (800c5fc <std+0x64>)
 800c5c8:	6323      	str	r3, [r4, #48]	@ 0x30
 800c5ca:	4b0d      	ldr	r3, [pc, #52]	@ (800c600 <std+0x68>)
 800c5cc:	6224      	str	r4, [r4, #32]
 800c5ce:	429c      	cmp	r4, r3
 800c5d0:	d006      	beq.n	800c5e0 <std+0x48>
 800c5d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c5d6:	4294      	cmp	r4, r2
 800c5d8:	d002      	beq.n	800c5e0 <std+0x48>
 800c5da:	33d0      	adds	r3, #208	@ 0xd0
 800c5dc:	429c      	cmp	r4, r3
 800c5de:	d105      	bne.n	800c5ec <std+0x54>
 800c5e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5e8:	f000 ba5c 	b.w	800caa4 <__retarget_lock_init_recursive>
 800c5ec:	bd10      	pop	{r4, pc}
 800c5ee:	bf00      	nop
 800c5f0:	0800c7fd 	.word	0x0800c7fd
 800c5f4:	0800c81f 	.word	0x0800c81f
 800c5f8:	0800c857 	.word	0x0800c857
 800c5fc:	0800c87b 	.word	0x0800c87b
 800c600:	20002ee8 	.word	0x20002ee8

0800c604 <stdio_exit_handler>:
 800c604:	4a02      	ldr	r2, [pc, #8]	@ (800c610 <stdio_exit_handler+0xc>)
 800c606:	4903      	ldr	r1, [pc, #12]	@ (800c614 <stdio_exit_handler+0x10>)
 800c608:	4803      	ldr	r0, [pc, #12]	@ (800c618 <stdio_exit_handler+0x14>)
 800c60a:	f000 b869 	b.w	800c6e0 <_fwalk_sglue>
 800c60e:	bf00      	nop
 800c610:	20000070 	.word	0x20000070
 800c614:	0800e439 	.word	0x0800e439
 800c618:	20000080 	.word	0x20000080

0800c61c <cleanup_stdio>:
 800c61c:	6841      	ldr	r1, [r0, #4]
 800c61e:	4b0c      	ldr	r3, [pc, #48]	@ (800c650 <cleanup_stdio+0x34>)
 800c620:	4299      	cmp	r1, r3
 800c622:	b510      	push	{r4, lr}
 800c624:	4604      	mov	r4, r0
 800c626:	d001      	beq.n	800c62c <cleanup_stdio+0x10>
 800c628:	f001 ff06 	bl	800e438 <_fflush_r>
 800c62c:	68a1      	ldr	r1, [r4, #8]
 800c62e:	4b09      	ldr	r3, [pc, #36]	@ (800c654 <cleanup_stdio+0x38>)
 800c630:	4299      	cmp	r1, r3
 800c632:	d002      	beq.n	800c63a <cleanup_stdio+0x1e>
 800c634:	4620      	mov	r0, r4
 800c636:	f001 feff 	bl	800e438 <_fflush_r>
 800c63a:	68e1      	ldr	r1, [r4, #12]
 800c63c:	4b06      	ldr	r3, [pc, #24]	@ (800c658 <cleanup_stdio+0x3c>)
 800c63e:	4299      	cmp	r1, r3
 800c640:	d004      	beq.n	800c64c <cleanup_stdio+0x30>
 800c642:	4620      	mov	r0, r4
 800c644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c648:	f001 bef6 	b.w	800e438 <_fflush_r>
 800c64c:	bd10      	pop	{r4, pc}
 800c64e:	bf00      	nop
 800c650:	20002ee8 	.word	0x20002ee8
 800c654:	20002f50 	.word	0x20002f50
 800c658:	20002fb8 	.word	0x20002fb8

0800c65c <global_stdio_init.part.0>:
 800c65c:	b510      	push	{r4, lr}
 800c65e:	4b0b      	ldr	r3, [pc, #44]	@ (800c68c <global_stdio_init.part.0+0x30>)
 800c660:	4c0b      	ldr	r4, [pc, #44]	@ (800c690 <global_stdio_init.part.0+0x34>)
 800c662:	4a0c      	ldr	r2, [pc, #48]	@ (800c694 <global_stdio_init.part.0+0x38>)
 800c664:	601a      	str	r2, [r3, #0]
 800c666:	4620      	mov	r0, r4
 800c668:	2200      	movs	r2, #0
 800c66a:	2104      	movs	r1, #4
 800c66c:	f7ff ff94 	bl	800c598 <std>
 800c670:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c674:	2201      	movs	r2, #1
 800c676:	2109      	movs	r1, #9
 800c678:	f7ff ff8e 	bl	800c598 <std>
 800c67c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c680:	2202      	movs	r2, #2
 800c682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c686:	2112      	movs	r1, #18
 800c688:	f7ff bf86 	b.w	800c598 <std>
 800c68c:	20003020 	.word	0x20003020
 800c690:	20002ee8 	.word	0x20002ee8
 800c694:	0800c605 	.word	0x0800c605

0800c698 <__sfp_lock_acquire>:
 800c698:	4801      	ldr	r0, [pc, #4]	@ (800c6a0 <__sfp_lock_acquire+0x8>)
 800c69a:	f000 ba04 	b.w	800caa6 <__retarget_lock_acquire_recursive>
 800c69e:	bf00      	nop
 800c6a0:	20003029 	.word	0x20003029

0800c6a4 <__sfp_lock_release>:
 800c6a4:	4801      	ldr	r0, [pc, #4]	@ (800c6ac <__sfp_lock_release+0x8>)
 800c6a6:	f000 b9ff 	b.w	800caa8 <__retarget_lock_release_recursive>
 800c6aa:	bf00      	nop
 800c6ac:	20003029 	.word	0x20003029

0800c6b0 <__sinit>:
 800c6b0:	b510      	push	{r4, lr}
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	f7ff fff0 	bl	800c698 <__sfp_lock_acquire>
 800c6b8:	6a23      	ldr	r3, [r4, #32]
 800c6ba:	b11b      	cbz	r3, 800c6c4 <__sinit+0x14>
 800c6bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6c0:	f7ff bff0 	b.w	800c6a4 <__sfp_lock_release>
 800c6c4:	4b04      	ldr	r3, [pc, #16]	@ (800c6d8 <__sinit+0x28>)
 800c6c6:	6223      	str	r3, [r4, #32]
 800c6c8:	4b04      	ldr	r3, [pc, #16]	@ (800c6dc <__sinit+0x2c>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d1f5      	bne.n	800c6bc <__sinit+0xc>
 800c6d0:	f7ff ffc4 	bl	800c65c <global_stdio_init.part.0>
 800c6d4:	e7f2      	b.n	800c6bc <__sinit+0xc>
 800c6d6:	bf00      	nop
 800c6d8:	0800c61d 	.word	0x0800c61d
 800c6dc:	20003020 	.word	0x20003020

0800c6e0 <_fwalk_sglue>:
 800c6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6e4:	4607      	mov	r7, r0
 800c6e6:	4688      	mov	r8, r1
 800c6e8:	4614      	mov	r4, r2
 800c6ea:	2600      	movs	r6, #0
 800c6ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6f0:	f1b9 0901 	subs.w	r9, r9, #1
 800c6f4:	d505      	bpl.n	800c702 <_fwalk_sglue+0x22>
 800c6f6:	6824      	ldr	r4, [r4, #0]
 800c6f8:	2c00      	cmp	r4, #0
 800c6fa:	d1f7      	bne.n	800c6ec <_fwalk_sglue+0xc>
 800c6fc:	4630      	mov	r0, r6
 800c6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c702:	89ab      	ldrh	r3, [r5, #12]
 800c704:	2b01      	cmp	r3, #1
 800c706:	d907      	bls.n	800c718 <_fwalk_sglue+0x38>
 800c708:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c70c:	3301      	adds	r3, #1
 800c70e:	d003      	beq.n	800c718 <_fwalk_sglue+0x38>
 800c710:	4629      	mov	r1, r5
 800c712:	4638      	mov	r0, r7
 800c714:	47c0      	blx	r8
 800c716:	4306      	orrs	r6, r0
 800c718:	3568      	adds	r5, #104	@ 0x68
 800c71a:	e7e9      	b.n	800c6f0 <_fwalk_sglue+0x10>

0800c71c <iprintf>:
 800c71c:	b40f      	push	{r0, r1, r2, r3}
 800c71e:	b507      	push	{r0, r1, r2, lr}
 800c720:	4906      	ldr	r1, [pc, #24]	@ (800c73c <iprintf+0x20>)
 800c722:	ab04      	add	r3, sp, #16
 800c724:	6808      	ldr	r0, [r1, #0]
 800c726:	f853 2b04 	ldr.w	r2, [r3], #4
 800c72a:	6881      	ldr	r1, [r0, #8]
 800c72c:	9301      	str	r3, [sp, #4]
 800c72e:	f001 fce7 	bl	800e100 <_vfiprintf_r>
 800c732:	b003      	add	sp, #12
 800c734:	f85d eb04 	ldr.w	lr, [sp], #4
 800c738:	b004      	add	sp, #16
 800c73a:	4770      	bx	lr
 800c73c:	2000007c 	.word	0x2000007c

0800c740 <_puts_r>:
 800c740:	6a03      	ldr	r3, [r0, #32]
 800c742:	b570      	push	{r4, r5, r6, lr}
 800c744:	6884      	ldr	r4, [r0, #8]
 800c746:	4605      	mov	r5, r0
 800c748:	460e      	mov	r6, r1
 800c74a:	b90b      	cbnz	r3, 800c750 <_puts_r+0x10>
 800c74c:	f7ff ffb0 	bl	800c6b0 <__sinit>
 800c750:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c752:	07db      	lsls	r3, r3, #31
 800c754:	d405      	bmi.n	800c762 <_puts_r+0x22>
 800c756:	89a3      	ldrh	r3, [r4, #12]
 800c758:	0598      	lsls	r0, r3, #22
 800c75a:	d402      	bmi.n	800c762 <_puts_r+0x22>
 800c75c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c75e:	f000 f9a2 	bl	800caa6 <__retarget_lock_acquire_recursive>
 800c762:	89a3      	ldrh	r3, [r4, #12]
 800c764:	0719      	lsls	r1, r3, #28
 800c766:	d502      	bpl.n	800c76e <_puts_r+0x2e>
 800c768:	6923      	ldr	r3, [r4, #16]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d135      	bne.n	800c7da <_puts_r+0x9a>
 800c76e:	4621      	mov	r1, r4
 800c770:	4628      	mov	r0, r5
 800c772:	f000 f8c5 	bl	800c900 <__swsetup_r>
 800c776:	b380      	cbz	r0, 800c7da <_puts_r+0x9a>
 800c778:	f04f 35ff 	mov.w	r5, #4294967295
 800c77c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c77e:	07da      	lsls	r2, r3, #31
 800c780:	d405      	bmi.n	800c78e <_puts_r+0x4e>
 800c782:	89a3      	ldrh	r3, [r4, #12]
 800c784:	059b      	lsls	r3, r3, #22
 800c786:	d402      	bmi.n	800c78e <_puts_r+0x4e>
 800c788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c78a:	f000 f98d 	bl	800caa8 <__retarget_lock_release_recursive>
 800c78e:	4628      	mov	r0, r5
 800c790:	bd70      	pop	{r4, r5, r6, pc}
 800c792:	2b00      	cmp	r3, #0
 800c794:	da04      	bge.n	800c7a0 <_puts_r+0x60>
 800c796:	69a2      	ldr	r2, [r4, #24]
 800c798:	429a      	cmp	r2, r3
 800c79a:	dc17      	bgt.n	800c7cc <_puts_r+0x8c>
 800c79c:	290a      	cmp	r1, #10
 800c79e:	d015      	beq.n	800c7cc <_puts_r+0x8c>
 800c7a0:	6823      	ldr	r3, [r4, #0]
 800c7a2:	1c5a      	adds	r2, r3, #1
 800c7a4:	6022      	str	r2, [r4, #0]
 800c7a6:	7019      	strb	r1, [r3, #0]
 800c7a8:	68a3      	ldr	r3, [r4, #8]
 800c7aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c7ae:	3b01      	subs	r3, #1
 800c7b0:	60a3      	str	r3, [r4, #8]
 800c7b2:	2900      	cmp	r1, #0
 800c7b4:	d1ed      	bne.n	800c792 <_puts_r+0x52>
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	da11      	bge.n	800c7de <_puts_r+0x9e>
 800c7ba:	4622      	mov	r2, r4
 800c7bc:	210a      	movs	r1, #10
 800c7be:	4628      	mov	r0, r5
 800c7c0:	f000 f85f 	bl	800c882 <__swbuf_r>
 800c7c4:	3001      	adds	r0, #1
 800c7c6:	d0d7      	beq.n	800c778 <_puts_r+0x38>
 800c7c8:	250a      	movs	r5, #10
 800c7ca:	e7d7      	b.n	800c77c <_puts_r+0x3c>
 800c7cc:	4622      	mov	r2, r4
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	f000 f857 	bl	800c882 <__swbuf_r>
 800c7d4:	3001      	adds	r0, #1
 800c7d6:	d1e7      	bne.n	800c7a8 <_puts_r+0x68>
 800c7d8:	e7ce      	b.n	800c778 <_puts_r+0x38>
 800c7da:	3e01      	subs	r6, #1
 800c7dc:	e7e4      	b.n	800c7a8 <_puts_r+0x68>
 800c7de:	6823      	ldr	r3, [r4, #0]
 800c7e0:	1c5a      	adds	r2, r3, #1
 800c7e2:	6022      	str	r2, [r4, #0]
 800c7e4:	220a      	movs	r2, #10
 800c7e6:	701a      	strb	r2, [r3, #0]
 800c7e8:	e7ee      	b.n	800c7c8 <_puts_r+0x88>
	...

0800c7ec <puts>:
 800c7ec:	4b02      	ldr	r3, [pc, #8]	@ (800c7f8 <puts+0xc>)
 800c7ee:	4601      	mov	r1, r0
 800c7f0:	6818      	ldr	r0, [r3, #0]
 800c7f2:	f7ff bfa5 	b.w	800c740 <_puts_r>
 800c7f6:	bf00      	nop
 800c7f8:	2000007c 	.word	0x2000007c

0800c7fc <__sread>:
 800c7fc:	b510      	push	{r4, lr}
 800c7fe:	460c      	mov	r4, r1
 800c800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c804:	f000 f900 	bl	800ca08 <_read_r>
 800c808:	2800      	cmp	r0, #0
 800c80a:	bfab      	itete	ge
 800c80c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c80e:	89a3      	ldrhlt	r3, [r4, #12]
 800c810:	181b      	addge	r3, r3, r0
 800c812:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c816:	bfac      	ite	ge
 800c818:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c81a:	81a3      	strhlt	r3, [r4, #12]
 800c81c:	bd10      	pop	{r4, pc}

0800c81e <__swrite>:
 800c81e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c822:	461f      	mov	r7, r3
 800c824:	898b      	ldrh	r3, [r1, #12]
 800c826:	05db      	lsls	r3, r3, #23
 800c828:	4605      	mov	r5, r0
 800c82a:	460c      	mov	r4, r1
 800c82c:	4616      	mov	r6, r2
 800c82e:	d505      	bpl.n	800c83c <__swrite+0x1e>
 800c830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c834:	2302      	movs	r3, #2
 800c836:	2200      	movs	r2, #0
 800c838:	f000 f8d4 	bl	800c9e4 <_lseek_r>
 800c83c:	89a3      	ldrh	r3, [r4, #12]
 800c83e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c842:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c846:	81a3      	strh	r3, [r4, #12]
 800c848:	4632      	mov	r2, r6
 800c84a:	463b      	mov	r3, r7
 800c84c:	4628      	mov	r0, r5
 800c84e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c852:	f000 b8eb 	b.w	800ca2c <_write_r>

0800c856 <__sseek>:
 800c856:	b510      	push	{r4, lr}
 800c858:	460c      	mov	r4, r1
 800c85a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c85e:	f000 f8c1 	bl	800c9e4 <_lseek_r>
 800c862:	1c43      	adds	r3, r0, #1
 800c864:	89a3      	ldrh	r3, [r4, #12]
 800c866:	bf15      	itete	ne
 800c868:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c86a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c86e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c872:	81a3      	strheq	r3, [r4, #12]
 800c874:	bf18      	it	ne
 800c876:	81a3      	strhne	r3, [r4, #12]
 800c878:	bd10      	pop	{r4, pc}

0800c87a <__sclose>:
 800c87a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c87e:	f000 b8a1 	b.w	800c9c4 <_close_r>

0800c882 <__swbuf_r>:
 800c882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c884:	460e      	mov	r6, r1
 800c886:	4614      	mov	r4, r2
 800c888:	4605      	mov	r5, r0
 800c88a:	b118      	cbz	r0, 800c894 <__swbuf_r+0x12>
 800c88c:	6a03      	ldr	r3, [r0, #32]
 800c88e:	b90b      	cbnz	r3, 800c894 <__swbuf_r+0x12>
 800c890:	f7ff ff0e 	bl	800c6b0 <__sinit>
 800c894:	69a3      	ldr	r3, [r4, #24]
 800c896:	60a3      	str	r3, [r4, #8]
 800c898:	89a3      	ldrh	r3, [r4, #12]
 800c89a:	071a      	lsls	r2, r3, #28
 800c89c:	d501      	bpl.n	800c8a2 <__swbuf_r+0x20>
 800c89e:	6923      	ldr	r3, [r4, #16]
 800c8a0:	b943      	cbnz	r3, 800c8b4 <__swbuf_r+0x32>
 800c8a2:	4621      	mov	r1, r4
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	f000 f82b 	bl	800c900 <__swsetup_r>
 800c8aa:	b118      	cbz	r0, 800c8b4 <__swbuf_r+0x32>
 800c8ac:	f04f 37ff 	mov.w	r7, #4294967295
 800c8b0:	4638      	mov	r0, r7
 800c8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8b4:	6823      	ldr	r3, [r4, #0]
 800c8b6:	6922      	ldr	r2, [r4, #16]
 800c8b8:	1a98      	subs	r0, r3, r2
 800c8ba:	6963      	ldr	r3, [r4, #20]
 800c8bc:	b2f6      	uxtb	r6, r6
 800c8be:	4283      	cmp	r3, r0
 800c8c0:	4637      	mov	r7, r6
 800c8c2:	dc05      	bgt.n	800c8d0 <__swbuf_r+0x4e>
 800c8c4:	4621      	mov	r1, r4
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	f001 fdb6 	bl	800e438 <_fflush_r>
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	d1ed      	bne.n	800c8ac <__swbuf_r+0x2a>
 800c8d0:	68a3      	ldr	r3, [r4, #8]
 800c8d2:	3b01      	subs	r3, #1
 800c8d4:	60a3      	str	r3, [r4, #8]
 800c8d6:	6823      	ldr	r3, [r4, #0]
 800c8d8:	1c5a      	adds	r2, r3, #1
 800c8da:	6022      	str	r2, [r4, #0]
 800c8dc:	701e      	strb	r6, [r3, #0]
 800c8de:	6962      	ldr	r2, [r4, #20]
 800c8e0:	1c43      	adds	r3, r0, #1
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d004      	beq.n	800c8f0 <__swbuf_r+0x6e>
 800c8e6:	89a3      	ldrh	r3, [r4, #12]
 800c8e8:	07db      	lsls	r3, r3, #31
 800c8ea:	d5e1      	bpl.n	800c8b0 <__swbuf_r+0x2e>
 800c8ec:	2e0a      	cmp	r6, #10
 800c8ee:	d1df      	bne.n	800c8b0 <__swbuf_r+0x2e>
 800c8f0:	4621      	mov	r1, r4
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	f001 fda0 	bl	800e438 <_fflush_r>
 800c8f8:	2800      	cmp	r0, #0
 800c8fa:	d0d9      	beq.n	800c8b0 <__swbuf_r+0x2e>
 800c8fc:	e7d6      	b.n	800c8ac <__swbuf_r+0x2a>
	...

0800c900 <__swsetup_r>:
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	4b29      	ldr	r3, [pc, #164]	@ (800c9a8 <__swsetup_r+0xa8>)
 800c904:	4605      	mov	r5, r0
 800c906:	6818      	ldr	r0, [r3, #0]
 800c908:	460c      	mov	r4, r1
 800c90a:	b118      	cbz	r0, 800c914 <__swsetup_r+0x14>
 800c90c:	6a03      	ldr	r3, [r0, #32]
 800c90e:	b90b      	cbnz	r3, 800c914 <__swsetup_r+0x14>
 800c910:	f7ff fece 	bl	800c6b0 <__sinit>
 800c914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c918:	0719      	lsls	r1, r3, #28
 800c91a:	d422      	bmi.n	800c962 <__swsetup_r+0x62>
 800c91c:	06da      	lsls	r2, r3, #27
 800c91e:	d407      	bmi.n	800c930 <__swsetup_r+0x30>
 800c920:	2209      	movs	r2, #9
 800c922:	602a      	str	r2, [r5, #0]
 800c924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c928:	81a3      	strh	r3, [r4, #12]
 800c92a:	f04f 30ff 	mov.w	r0, #4294967295
 800c92e:	e033      	b.n	800c998 <__swsetup_r+0x98>
 800c930:	0758      	lsls	r0, r3, #29
 800c932:	d512      	bpl.n	800c95a <__swsetup_r+0x5a>
 800c934:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c936:	b141      	cbz	r1, 800c94a <__swsetup_r+0x4a>
 800c938:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c93c:	4299      	cmp	r1, r3
 800c93e:	d002      	beq.n	800c946 <__swsetup_r+0x46>
 800c940:	4628      	mov	r0, r5
 800c942:	f000 ff39 	bl	800d7b8 <_free_r>
 800c946:	2300      	movs	r3, #0
 800c948:	6363      	str	r3, [r4, #52]	@ 0x34
 800c94a:	89a3      	ldrh	r3, [r4, #12]
 800c94c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c950:	81a3      	strh	r3, [r4, #12]
 800c952:	2300      	movs	r3, #0
 800c954:	6063      	str	r3, [r4, #4]
 800c956:	6923      	ldr	r3, [r4, #16]
 800c958:	6023      	str	r3, [r4, #0]
 800c95a:	89a3      	ldrh	r3, [r4, #12]
 800c95c:	f043 0308 	orr.w	r3, r3, #8
 800c960:	81a3      	strh	r3, [r4, #12]
 800c962:	6923      	ldr	r3, [r4, #16]
 800c964:	b94b      	cbnz	r3, 800c97a <__swsetup_r+0x7a>
 800c966:	89a3      	ldrh	r3, [r4, #12]
 800c968:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c96c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c970:	d003      	beq.n	800c97a <__swsetup_r+0x7a>
 800c972:	4621      	mov	r1, r4
 800c974:	4628      	mov	r0, r5
 800c976:	f001 fdbf 	bl	800e4f8 <__smakebuf_r>
 800c97a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c97e:	f013 0201 	ands.w	r2, r3, #1
 800c982:	d00a      	beq.n	800c99a <__swsetup_r+0x9a>
 800c984:	2200      	movs	r2, #0
 800c986:	60a2      	str	r2, [r4, #8]
 800c988:	6962      	ldr	r2, [r4, #20]
 800c98a:	4252      	negs	r2, r2
 800c98c:	61a2      	str	r2, [r4, #24]
 800c98e:	6922      	ldr	r2, [r4, #16]
 800c990:	b942      	cbnz	r2, 800c9a4 <__swsetup_r+0xa4>
 800c992:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c996:	d1c5      	bne.n	800c924 <__swsetup_r+0x24>
 800c998:	bd38      	pop	{r3, r4, r5, pc}
 800c99a:	0799      	lsls	r1, r3, #30
 800c99c:	bf58      	it	pl
 800c99e:	6962      	ldrpl	r2, [r4, #20]
 800c9a0:	60a2      	str	r2, [r4, #8]
 800c9a2:	e7f4      	b.n	800c98e <__swsetup_r+0x8e>
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	e7f7      	b.n	800c998 <__swsetup_r+0x98>
 800c9a8:	2000007c 	.word	0x2000007c

0800c9ac <memset>:
 800c9ac:	4402      	add	r2, r0
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d100      	bne.n	800c9b6 <memset+0xa>
 800c9b4:	4770      	bx	lr
 800c9b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c9ba:	e7f9      	b.n	800c9b0 <memset+0x4>

0800c9bc <_localeconv_r>:
 800c9bc:	4800      	ldr	r0, [pc, #0]	@ (800c9c0 <_localeconv_r+0x4>)
 800c9be:	4770      	bx	lr
 800c9c0:	200001bc 	.word	0x200001bc

0800c9c4 <_close_r>:
 800c9c4:	b538      	push	{r3, r4, r5, lr}
 800c9c6:	4d06      	ldr	r5, [pc, #24]	@ (800c9e0 <_close_r+0x1c>)
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	4604      	mov	r4, r0
 800c9cc:	4608      	mov	r0, r1
 800c9ce:	602b      	str	r3, [r5, #0]
 800c9d0:	f7f6 fcc0 	bl	8003354 <_close>
 800c9d4:	1c43      	adds	r3, r0, #1
 800c9d6:	d102      	bne.n	800c9de <_close_r+0x1a>
 800c9d8:	682b      	ldr	r3, [r5, #0]
 800c9da:	b103      	cbz	r3, 800c9de <_close_r+0x1a>
 800c9dc:	6023      	str	r3, [r4, #0]
 800c9de:	bd38      	pop	{r3, r4, r5, pc}
 800c9e0:	20003024 	.word	0x20003024

0800c9e4 <_lseek_r>:
 800c9e4:	b538      	push	{r3, r4, r5, lr}
 800c9e6:	4d07      	ldr	r5, [pc, #28]	@ (800ca04 <_lseek_r+0x20>)
 800c9e8:	4604      	mov	r4, r0
 800c9ea:	4608      	mov	r0, r1
 800c9ec:	4611      	mov	r1, r2
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	602a      	str	r2, [r5, #0]
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	f7f6 fcd5 	bl	80033a2 <_lseek>
 800c9f8:	1c43      	adds	r3, r0, #1
 800c9fa:	d102      	bne.n	800ca02 <_lseek_r+0x1e>
 800c9fc:	682b      	ldr	r3, [r5, #0]
 800c9fe:	b103      	cbz	r3, 800ca02 <_lseek_r+0x1e>
 800ca00:	6023      	str	r3, [r4, #0]
 800ca02:	bd38      	pop	{r3, r4, r5, pc}
 800ca04:	20003024 	.word	0x20003024

0800ca08 <_read_r>:
 800ca08:	b538      	push	{r3, r4, r5, lr}
 800ca0a:	4d07      	ldr	r5, [pc, #28]	@ (800ca28 <_read_r+0x20>)
 800ca0c:	4604      	mov	r4, r0
 800ca0e:	4608      	mov	r0, r1
 800ca10:	4611      	mov	r1, r2
 800ca12:	2200      	movs	r2, #0
 800ca14:	602a      	str	r2, [r5, #0]
 800ca16:	461a      	mov	r2, r3
 800ca18:	f7f6 fc63 	bl	80032e2 <_read>
 800ca1c:	1c43      	adds	r3, r0, #1
 800ca1e:	d102      	bne.n	800ca26 <_read_r+0x1e>
 800ca20:	682b      	ldr	r3, [r5, #0]
 800ca22:	b103      	cbz	r3, 800ca26 <_read_r+0x1e>
 800ca24:	6023      	str	r3, [r4, #0]
 800ca26:	bd38      	pop	{r3, r4, r5, pc}
 800ca28:	20003024 	.word	0x20003024

0800ca2c <_write_r>:
 800ca2c:	b538      	push	{r3, r4, r5, lr}
 800ca2e:	4d07      	ldr	r5, [pc, #28]	@ (800ca4c <_write_r+0x20>)
 800ca30:	4604      	mov	r4, r0
 800ca32:	4608      	mov	r0, r1
 800ca34:	4611      	mov	r1, r2
 800ca36:	2200      	movs	r2, #0
 800ca38:	602a      	str	r2, [r5, #0]
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	f7f6 fc6e 	bl	800331c <_write>
 800ca40:	1c43      	adds	r3, r0, #1
 800ca42:	d102      	bne.n	800ca4a <_write_r+0x1e>
 800ca44:	682b      	ldr	r3, [r5, #0]
 800ca46:	b103      	cbz	r3, 800ca4a <_write_r+0x1e>
 800ca48:	6023      	str	r3, [r4, #0]
 800ca4a:	bd38      	pop	{r3, r4, r5, pc}
 800ca4c:	20003024 	.word	0x20003024

0800ca50 <__errno>:
 800ca50:	4b01      	ldr	r3, [pc, #4]	@ (800ca58 <__errno+0x8>)
 800ca52:	6818      	ldr	r0, [r3, #0]
 800ca54:	4770      	bx	lr
 800ca56:	bf00      	nop
 800ca58:	2000007c 	.word	0x2000007c

0800ca5c <__libc_init_array>:
 800ca5c:	b570      	push	{r4, r5, r6, lr}
 800ca5e:	4d0d      	ldr	r5, [pc, #52]	@ (800ca94 <__libc_init_array+0x38>)
 800ca60:	4c0d      	ldr	r4, [pc, #52]	@ (800ca98 <__libc_init_array+0x3c>)
 800ca62:	1b64      	subs	r4, r4, r5
 800ca64:	10a4      	asrs	r4, r4, #2
 800ca66:	2600      	movs	r6, #0
 800ca68:	42a6      	cmp	r6, r4
 800ca6a:	d109      	bne.n	800ca80 <__libc_init_array+0x24>
 800ca6c:	4d0b      	ldr	r5, [pc, #44]	@ (800ca9c <__libc_init_array+0x40>)
 800ca6e:	4c0c      	ldr	r4, [pc, #48]	@ (800caa0 <__libc_init_array+0x44>)
 800ca70:	f001 fe2e 	bl	800e6d0 <_init>
 800ca74:	1b64      	subs	r4, r4, r5
 800ca76:	10a4      	asrs	r4, r4, #2
 800ca78:	2600      	movs	r6, #0
 800ca7a:	42a6      	cmp	r6, r4
 800ca7c:	d105      	bne.n	800ca8a <__libc_init_array+0x2e>
 800ca7e:	bd70      	pop	{r4, r5, r6, pc}
 800ca80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca84:	4798      	blx	r3
 800ca86:	3601      	adds	r6, #1
 800ca88:	e7ee      	b.n	800ca68 <__libc_init_array+0xc>
 800ca8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca8e:	4798      	blx	r3
 800ca90:	3601      	adds	r6, #1
 800ca92:	e7f2      	b.n	800ca7a <__libc_init_array+0x1e>
 800ca94:	0800ec0c 	.word	0x0800ec0c
 800ca98:	0800ec0c 	.word	0x0800ec0c
 800ca9c:	0800ec0c 	.word	0x0800ec0c
 800caa0:	0800ec10 	.word	0x0800ec10

0800caa4 <__retarget_lock_init_recursive>:
 800caa4:	4770      	bx	lr

0800caa6 <__retarget_lock_acquire_recursive>:
 800caa6:	4770      	bx	lr

0800caa8 <__retarget_lock_release_recursive>:
 800caa8:	4770      	bx	lr

0800caaa <memcpy>:
 800caaa:	440a      	add	r2, r1
 800caac:	4291      	cmp	r1, r2
 800caae:	f100 33ff 	add.w	r3, r0, #4294967295
 800cab2:	d100      	bne.n	800cab6 <memcpy+0xc>
 800cab4:	4770      	bx	lr
 800cab6:	b510      	push	{r4, lr}
 800cab8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cabc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cac0:	4291      	cmp	r1, r2
 800cac2:	d1f9      	bne.n	800cab8 <memcpy+0xe>
 800cac4:	bd10      	pop	{r4, pc}
	...

0800cac8 <__assert_func>:
 800cac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800caca:	4614      	mov	r4, r2
 800cacc:	461a      	mov	r2, r3
 800cace:	4b09      	ldr	r3, [pc, #36]	@ (800caf4 <__assert_func+0x2c>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4605      	mov	r5, r0
 800cad4:	68d8      	ldr	r0, [r3, #12]
 800cad6:	b14c      	cbz	r4, 800caec <__assert_func+0x24>
 800cad8:	4b07      	ldr	r3, [pc, #28]	@ (800caf8 <__assert_func+0x30>)
 800cada:	9100      	str	r1, [sp, #0]
 800cadc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cae0:	4906      	ldr	r1, [pc, #24]	@ (800cafc <__assert_func+0x34>)
 800cae2:	462b      	mov	r3, r5
 800cae4:	f001 fcd0 	bl	800e488 <fiprintf>
 800cae8:	f001 fd74 	bl	800e5d4 <abort>
 800caec:	4b04      	ldr	r3, [pc, #16]	@ (800cb00 <__assert_func+0x38>)
 800caee:	461c      	mov	r4, r3
 800caf0:	e7f3      	b.n	800cada <__assert_func+0x12>
 800caf2:	bf00      	nop
 800caf4:	2000007c 	.word	0x2000007c
 800caf8:	0800e8db 	.word	0x0800e8db
 800cafc:	0800e8e8 	.word	0x0800e8e8
 800cb00:	0800e916 	.word	0x0800e916

0800cb04 <quorem>:
 800cb04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb08:	6903      	ldr	r3, [r0, #16]
 800cb0a:	690c      	ldr	r4, [r1, #16]
 800cb0c:	42a3      	cmp	r3, r4
 800cb0e:	4607      	mov	r7, r0
 800cb10:	db7e      	blt.n	800cc10 <quorem+0x10c>
 800cb12:	3c01      	subs	r4, #1
 800cb14:	f101 0814 	add.w	r8, r1, #20
 800cb18:	00a3      	lsls	r3, r4, #2
 800cb1a:	f100 0514 	add.w	r5, r0, #20
 800cb1e:	9300      	str	r3, [sp, #0]
 800cb20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb24:	9301      	str	r3, [sp, #4]
 800cb26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cb2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb2e:	3301      	adds	r3, #1
 800cb30:	429a      	cmp	r2, r3
 800cb32:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb36:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb3a:	d32e      	bcc.n	800cb9a <quorem+0x96>
 800cb3c:	f04f 0a00 	mov.w	sl, #0
 800cb40:	46c4      	mov	ip, r8
 800cb42:	46ae      	mov	lr, r5
 800cb44:	46d3      	mov	fp, sl
 800cb46:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cb4a:	b298      	uxth	r0, r3
 800cb4c:	fb06 a000 	mla	r0, r6, r0, sl
 800cb50:	0c02      	lsrs	r2, r0, #16
 800cb52:	0c1b      	lsrs	r3, r3, #16
 800cb54:	fb06 2303 	mla	r3, r6, r3, r2
 800cb58:	f8de 2000 	ldr.w	r2, [lr]
 800cb5c:	b280      	uxth	r0, r0
 800cb5e:	b292      	uxth	r2, r2
 800cb60:	1a12      	subs	r2, r2, r0
 800cb62:	445a      	add	r2, fp
 800cb64:	f8de 0000 	ldr.w	r0, [lr]
 800cb68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cb72:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cb76:	b292      	uxth	r2, r2
 800cb78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cb7c:	45e1      	cmp	r9, ip
 800cb7e:	f84e 2b04 	str.w	r2, [lr], #4
 800cb82:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cb86:	d2de      	bcs.n	800cb46 <quorem+0x42>
 800cb88:	9b00      	ldr	r3, [sp, #0]
 800cb8a:	58eb      	ldr	r3, [r5, r3]
 800cb8c:	b92b      	cbnz	r3, 800cb9a <quorem+0x96>
 800cb8e:	9b01      	ldr	r3, [sp, #4]
 800cb90:	3b04      	subs	r3, #4
 800cb92:	429d      	cmp	r5, r3
 800cb94:	461a      	mov	r2, r3
 800cb96:	d32f      	bcc.n	800cbf8 <quorem+0xf4>
 800cb98:	613c      	str	r4, [r7, #16]
 800cb9a:	4638      	mov	r0, r7
 800cb9c:	f001 f97e 	bl	800de9c <__mcmp>
 800cba0:	2800      	cmp	r0, #0
 800cba2:	db25      	blt.n	800cbf0 <quorem+0xec>
 800cba4:	4629      	mov	r1, r5
 800cba6:	2000      	movs	r0, #0
 800cba8:	f858 2b04 	ldr.w	r2, [r8], #4
 800cbac:	f8d1 c000 	ldr.w	ip, [r1]
 800cbb0:	fa1f fe82 	uxth.w	lr, r2
 800cbb4:	fa1f f38c 	uxth.w	r3, ip
 800cbb8:	eba3 030e 	sub.w	r3, r3, lr
 800cbbc:	4403      	add	r3, r0
 800cbbe:	0c12      	lsrs	r2, r2, #16
 800cbc0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cbc4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbce:	45c1      	cmp	r9, r8
 800cbd0:	f841 3b04 	str.w	r3, [r1], #4
 800cbd4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cbd8:	d2e6      	bcs.n	800cba8 <quorem+0xa4>
 800cbda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cbe2:	b922      	cbnz	r2, 800cbee <quorem+0xea>
 800cbe4:	3b04      	subs	r3, #4
 800cbe6:	429d      	cmp	r5, r3
 800cbe8:	461a      	mov	r2, r3
 800cbea:	d30b      	bcc.n	800cc04 <quorem+0x100>
 800cbec:	613c      	str	r4, [r7, #16]
 800cbee:	3601      	adds	r6, #1
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	b003      	add	sp, #12
 800cbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbf8:	6812      	ldr	r2, [r2, #0]
 800cbfa:	3b04      	subs	r3, #4
 800cbfc:	2a00      	cmp	r2, #0
 800cbfe:	d1cb      	bne.n	800cb98 <quorem+0x94>
 800cc00:	3c01      	subs	r4, #1
 800cc02:	e7c6      	b.n	800cb92 <quorem+0x8e>
 800cc04:	6812      	ldr	r2, [r2, #0]
 800cc06:	3b04      	subs	r3, #4
 800cc08:	2a00      	cmp	r2, #0
 800cc0a:	d1ef      	bne.n	800cbec <quorem+0xe8>
 800cc0c:	3c01      	subs	r4, #1
 800cc0e:	e7ea      	b.n	800cbe6 <quorem+0xe2>
 800cc10:	2000      	movs	r0, #0
 800cc12:	e7ee      	b.n	800cbf2 <quorem+0xee>
 800cc14:	0000      	movs	r0, r0
	...

0800cc18 <_dtoa_r>:
 800cc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc1c:	69c7      	ldr	r7, [r0, #28]
 800cc1e:	b097      	sub	sp, #92	@ 0x5c
 800cc20:	ed8d 0b04 	vstr	d0, [sp, #16]
 800cc24:	ec55 4b10 	vmov	r4, r5, d0
 800cc28:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800cc2a:	9107      	str	r1, [sp, #28]
 800cc2c:	4681      	mov	r9, r0
 800cc2e:	920c      	str	r2, [sp, #48]	@ 0x30
 800cc30:	9311      	str	r3, [sp, #68]	@ 0x44
 800cc32:	b97f      	cbnz	r7, 800cc54 <_dtoa_r+0x3c>
 800cc34:	2010      	movs	r0, #16
 800cc36:	f000 fe09 	bl	800d84c <malloc>
 800cc3a:	4602      	mov	r2, r0
 800cc3c:	f8c9 001c 	str.w	r0, [r9, #28]
 800cc40:	b920      	cbnz	r0, 800cc4c <_dtoa_r+0x34>
 800cc42:	4ba9      	ldr	r3, [pc, #676]	@ (800cee8 <_dtoa_r+0x2d0>)
 800cc44:	21ef      	movs	r1, #239	@ 0xef
 800cc46:	48a9      	ldr	r0, [pc, #676]	@ (800ceec <_dtoa_r+0x2d4>)
 800cc48:	f7ff ff3e 	bl	800cac8 <__assert_func>
 800cc4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cc50:	6007      	str	r7, [r0, #0]
 800cc52:	60c7      	str	r7, [r0, #12]
 800cc54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cc58:	6819      	ldr	r1, [r3, #0]
 800cc5a:	b159      	cbz	r1, 800cc74 <_dtoa_r+0x5c>
 800cc5c:	685a      	ldr	r2, [r3, #4]
 800cc5e:	604a      	str	r2, [r1, #4]
 800cc60:	2301      	movs	r3, #1
 800cc62:	4093      	lsls	r3, r2
 800cc64:	608b      	str	r3, [r1, #8]
 800cc66:	4648      	mov	r0, r9
 800cc68:	f000 fee6 	bl	800da38 <_Bfree>
 800cc6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cc70:	2200      	movs	r2, #0
 800cc72:	601a      	str	r2, [r3, #0]
 800cc74:	1e2b      	subs	r3, r5, #0
 800cc76:	bfb9      	ittee	lt
 800cc78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cc7c:	9305      	strlt	r3, [sp, #20]
 800cc7e:	2300      	movge	r3, #0
 800cc80:	6033      	strge	r3, [r6, #0]
 800cc82:	9f05      	ldr	r7, [sp, #20]
 800cc84:	4b9a      	ldr	r3, [pc, #616]	@ (800cef0 <_dtoa_r+0x2d8>)
 800cc86:	bfbc      	itt	lt
 800cc88:	2201      	movlt	r2, #1
 800cc8a:	6032      	strlt	r2, [r6, #0]
 800cc8c:	43bb      	bics	r3, r7
 800cc8e:	d112      	bne.n	800ccb6 <_dtoa_r+0x9e>
 800cc90:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cc92:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cc96:	6013      	str	r3, [r2, #0]
 800cc98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cc9c:	4323      	orrs	r3, r4
 800cc9e:	f000 855a 	beq.w	800d756 <_dtoa_r+0xb3e>
 800cca2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cca4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800cf04 <_dtoa_r+0x2ec>
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	f000 855c 	beq.w	800d766 <_dtoa_r+0xb4e>
 800ccae:	f10a 0303 	add.w	r3, sl, #3
 800ccb2:	f000 bd56 	b.w	800d762 <_dtoa_r+0xb4a>
 800ccb6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	ec51 0b17 	vmov	r0, r1, d7
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ccc6:	f7f3 feff 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccca:	4680      	mov	r8, r0
 800cccc:	b158      	cbz	r0, 800cce6 <_dtoa_r+0xce>
 800ccce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	6013      	str	r3, [r2, #0]
 800ccd4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ccd6:	b113      	cbz	r3, 800ccde <_dtoa_r+0xc6>
 800ccd8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ccda:	4b86      	ldr	r3, [pc, #536]	@ (800cef4 <_dtoa_r+0x2dc>)
 800ccdc:	6013      	str	r3, [r2, #0]
 800ccde:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800cf08 <_dtoa_r+0x2f0>
 800cce2:	f000 bd40 	b.w	800d766 <_dtoa_r+0xb4e>
 800cce6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ccea:	aa14      	add	r2, sp, #80	@ 0x50
 800ccec:	a915      	add	r1, sp, #84	@ 0x54
 800ccee:	4648      	mov	r0, r9
 800ccf0:	f001 f984 	bl	800dffc <__d2b>
 800ccf4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ccf8:	9002      	str	r0, [sp, #8]
 800ccfa:	2e00      	cmp	r6, #0
 800ccfc:	d078      	beq.n	800cdf0 <_dtoa_r+0x1d8>
 800ccfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd00:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800cd04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cd0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cd10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cd14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cd18:	4619      	mov	r1, r3
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	4b76      	ldr	r3, [pc, #472]	@ (800cef8 <_dtoa_r+0x2e0>)
 800cd1e:	f7f3 fab3 	bl	8000288 <__aeabi_dsub>
 800cd22:	a36b      	add	r3, pc, #428	@ (adr r3, 800ced0 <_dtoa_r+0x2b8>)
 800cd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd28:	f7f3 fc66 	bl	80005f8 <__aeabi_dmul>
 800cd2c:	a36a      	add	r3, pc, #424	@ (adr r3, 800ced8 <_dtoa_r+0x2c0>)
 800cd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd32:	f7f3 faab 	bl	800028c <__adddf3>
 800cd36:	4604      	mov	r4, r0
 800cd38:	4630      	mov	r0, r6
 800cd3a:	460d      	mov	r5, r1
 800cd3c:	f7f3 fbf2 	bl	8000524 <__aeabi_i2d>
 800cd40:	a367      	add	r3, pc, #412	@ (adr r3, 800cee0 <_dtoa_r+0x2c8>)
 800cd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd46:	f7f3 fc57 	bl	80005f8 <__aeabi_dmul>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	4620      	mov	r0, r4
 800cd50:	4629      	mov	r1, r5
 800cd52:	f7f3 fa9b 	bl	800028c <__adddf3>
 800cd56:	4604      	mov	r4, r0
 800cd58:	460d      	mov	r5, r1
 800cd5a:	f7f3 fefd 	bl	8000b58 <__aeabi_d2iz>
 800cd5e:	2200      	movs	r2, #0
 800cd60:	4607      	mov	r7, r0
 800cd62:	2300      	movs	r3, #0
 800cd64:	4620      	mov	r0, r4
 800cd66:	4629      	mov	r1, r5
 800cd68:	f7f3 feb8 	bl	8000adc <__aeabi_dcmplt>
 800cd6c:	b140      	cbz	r0, 800cd80 <_dtoa_r+0x168>
 800cd6e:	4638      	mov	r0, r7
 800cd70:	f7f3 fbd8 	bl	8000524 <__aeabi_i2d>
 800cd74:	4622      	mov	r2, r4
 800cd76:	462b      	mov	r3, r5
 800cd78:	f7f3 fea6 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd7c:	b900      	cbnz	r0, 800cd80 <_dtoa_r+0x168>
 800cd7e:	3f01      	subs	r7, #1
 800cd80:	2f16      	cmp	r7, #22
 800cd82:	d852      	bhi.n	800ce2a <_dtoa_r+0x212>
 800cd84:	4b5d      	ldr	r3, [pc, #372]	@ (800cefc <_dtoa_r+0x2e4>)
 800cd86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cd92:	f7f3 fea3 	bl	8000adc <__aeabi_dcmplt>
 800cd96:	2800      	cmp	r0, #0
 800cd98:	d049      	beq.n	800ce2e <_dtoa_r+0x216>
 800cd9a:	3f01      	subs	r7, #1
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	9310      	str	r3, [sp, #64]	@ 0x40
 800cda0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cda2:	1b9b      	subs	r3, r3, r6
 800cda4:	1e5a      	subs	r2, r3, #1
 800cda6:	bf45      	ittet	mi
 800cda8:	f1c3 0301 	rsbmi	r3, r3, #1
 800cdac:	9300      	strmi	r3, [sp, #0]
 800cdae:	2300      	movpl	r3, #0
 800cdb0:	2300      	movmi	r3, #0
 800cdb2:	9206      	str	r2, [sp, #24]
 800cdb4:	bf54      	ite	pl
 800cdb6:	9300      	strpl	r3, [sp, #0]
 800cdb8:	9306      	strmi	r3, [sp, #24]
 800cdba:	2f00      	cmp	r7, #0
 800cdbc:	db39      	blt.n	800ce32 <_dtoa_r+0x21a>
 800cdbe:	9b06      	ldr	r3, [sp, #24]
 800cdc0:	970d      	str	r7, [sp, #52]	@ 0x34
 800cdc2:	443b      	add	r3, r7
 800cdc4:	9306      	str	r3, [sp, #24]
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	9308      	str	r3, [sp, #32]
 800cdca:	9b07      	ldr	r3, [sp, #28]
 800cdcc:	2b09      	cmp	r3, #9
 800cdce:	d863      	bhi.n	800ce98 <_dtoa_r+0x280>
 800cdd0:	2b05      	cmp	r3, #5
 800cdd2:	bfc4      	itt	gt
 800cdd4:	3b04      	subgt	r3, #4
 800cdd6:	9307      	strgt	r3, [sp, #28]
 800cdd8:	9b07      	ldr	r3, [sp, #28]
 800cdda:	f1a3 0302 	sub.w	r3, r3, #2
 800cdde:	bfcc      	ite	gt
 800cde0:	2400      	movgt	r4, #0
 800cde2:	2401      	movle	r4, #1
 800cde4:	2b03      	cmp	r3, #3
 800cde6:	d863      	bhi.n	800ceb0 <_dtoa_r+0x298>
 800cde8:	e8df f003 	tbb	[pc, r3]
 800cdec:	2b375452 	.word	0x2b375452
 800cdf0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800cdf4:	441e      	add	r6, r3
 800cdf6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cdfa:	2b20      	cmp	r3, #32
 800cdfc:	bfc1      	itttt	gt
 800cdfe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ce02:	409f      	lslgt	r7, r3
 800ce04:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ce08:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ce0c:	bfd6      	itet	le
 800ce0e:	f1c3 0320 	rsble	r3, r3, #32
 800ce12:	ea47 0003 	orrgt.w	r0, r7, r3
 800ce16:	fa04 f003 	lslle.w	r0, r4, r3
 800ce1a:	f7f3 fb73 	bl	8000504 <__aeabi_ui2d>
 800ce1e:	2201      	movs	r2, #1
 800ce20:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ce24:	3e01      	subs	r6, #1
 800ce26:	9212      	str	r2, [sp, #72]	@ 0x48
 800ce28:	e776      	b.n	800cd18 <_dtoa_r+0x100>
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	e7b7      	b.n	800cd9e <_dtoa_r+0x186>
 800ce2e:	9010      	str	r0, [sp, #64]	@ 0x40
 800ce30:	e7b6      	b.n	800cda0 <_dtoa_r+0x188>
 800ce32:	9b00      	ldr	r3, [sp, #0]
 800ce34:	1bdb      	subs	r3, r3, r7
 800ce36:	9300      	str	r3, [sp, #0]
 800ce38:	427b      	negs	r3, r7
 800ce3a:	9308      	str	r3, [sp, #32]
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	930d      	str	r3, [sp, #52]	@ 0x34
 800ce40:	e7c3      	b.n	800cdca <_dtoa_r+0x1b2>
 800ce42:	2301      	movs	r3, #1
 800ce44:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce48:	eb07 0b03 	add.w	fp, r7, r3
 800ce4c:	f10b 0301 	add.w	r3, fp, #1
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	9303      	str	r3, [sp, #12]
 800ce54:	bfb8      	it	lt
 800ce56:	2301      	movlt	r3, #1
 800ce58:	e006      	b.n	800ce68 <_dtoa_r+0x250>
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	dd28      	ble.n	800ceb6 <_dtoa_r+0x29e>
 800ce64:	469b      	mov	fp, r3
 800ce66:	9303      	str	r3, [sp, #12]
 800ce68:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ce6c:	2100      	movs	r1, #0
 800ce6e:	2204      	movs	r2, #4
 800ce70:	f102 0514 	add.w	r5, r2, #20
 800ce74:	429d      	cmp	r5, r3
 800ce76:	d926      	bls.n	800cec6 <_dtoa_r+0x2ae>
 800ce78:	6041      	str	r1, [r0, #4]
 800ce7a:	4648      	mov	r0, r9
 800ce7c:	f000 fd9c 	bl	800d9b8 <_Balloc>
 800ce80:	4682      	mov	sl, r0
 800ce82:	2800      	cmp	r0, #0
 800ce84:	d142      	bne.n	800cf0c <_dtoa_r+0x2f4>
 800ce86:	4b1e      	ldr	r3, [pc, #120]	@ (800cf00 <_dtoa_r+0x2e8>)
 800ce88:	4602      	mov	r2, r0
 800ce8a:	f240 11af 	movw	r1, #431	@ 0x1af
 800ce8e:	e6da      	b.n	800cc46 <_dtoa_r+0x2e>
 800ce90:	2300      	movs	r3, #0
 800ce92:	e7e3      	b.n	800ce5c <_dtoa_r+0x244>
 800ce94:	2300      	movs	r3, #0
 800ce96:	e7d5      	b.n	800ce44 <_dtoa_r+0x22c>
 800ce98:	2401      	movs	r4, #1
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	9307      	str	r3, [sp, #28]
 800ce9e:	9409      	str	r4, [sp, #36]	@ 0x24
 800cea0:	f04f 3bff 	mov.w	fp, #4294967295
 800cea4:	2200      	movs	r2, #0
 800cea6:	f8cd b00c 	str.w	fp, [sp, #12]
 800ceaa:	2312      	movs	r3, #18
 800ceac:	920c      	str	r2, [sp, #48]	@ 0x30
 800ceae:	e7db      	b.n	800ce68 <_dtoa_r+0x250>
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ceb4:	e7f4      	b.n	800cea0 <_dtoa_r+0x288>
 800ceb6:	f04f 0b01 	mov.w	fp, #1
 800ceba:	f8cd b00c 	str.w	fp, [sp, #12]
 800cebe:	465b      	mov	r3, fp
 800cec0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800cec4:	e7d0      	b.n	800ce68 <_dtoa_r+0x250>
 800cec6:	3101      	adds	r1, #1
 800cec8:	0052      	lsls	r2, r2, #1
 800ceca:	e7d1      	b.n	800ce70 <_dtoa_r+0x258>
 800cecc:	f3af 8000 	nop.w
 800ced0:	636f4361 	.word	0x636f4361
 800ced4:	3fd287a7 	.word	0x3fd287a7
 800ced8:	8b60c8b3 	.word	0x8b60c8b3
 800cedc:	3fc68a28 	.word	0x3fc68a28
 800cee0:	509f79fb 	.word	0x509f79fb
 800cee4:	3fd34413 	.word	0x3fd34413
 800cee8:	0800e838 	.word	0x0800e838
 800ceec:	0800e924 	.word	0x0800e924
 800cef0:	7ff00000 	.word	0x7ff00000
 800cef4:	0800e8b8 	.word	0x0800e8b8
 800cef8:	3ff80000 	.word	0x3ff80000
 800cefc:	0800ea38 	.word	0x0800ea38
 800cf00:	0800e97c 	.word	0x0800e97c
 800cf04:	0800e920 	.word	0x0800e920
 800cf08:	0800e8b7 	.word	0x0800e8b7
 800cf0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cf10:	6018      	str	r0, [r3, #0]
 800cf12:	9b03      	ldr	r3, [sp, #12]
 800cf14:	2b0e      	cmp	r3, #14
 800cf16:	f200 80a1 	bhi.w	800d05c <_dtoa_r+0x444>
 800cf1a:	2c00      	cmp	r4, #0
 800cf1c:	f000 809e 	beq.w	800d05c <_dtoa_r+0x444>
 800cf20:	2f00      	cmp	r7, #0
 800cf22:	dd33      	ble.n	800cf8c <_dtoa_r+0x374>
 800cf24:	4b9c      	ldr	r3, [pc, #624]	@ (800d198 <_dtoa_r+0x580>)
 800cf26:	f007 020f 	and.w	r2, r7, #15
 800cf2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf2e:	ed93 7b00 	vldr	d7, [r3]
 800cf32:	05f8      	lsls	r0, r7, #23
 800cf34:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800cf38:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cf3c:	d516      	bpl.n	800cf6c <_dtoa_r+0x354>
 800cf3e:	4b97      	ldr	r3, [pc, #604]	@ (800d19c <_dtoa_r+0x584>)
 800cf40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cf44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf48:	f7f3 fc80 	bl	800084c <__aeabi_ddiv>
 800cf4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf50:	f004 040f 	and.w	r4, r4, #15
 800cf54:	2603      	movs	r6, #3
 800cf56:	4d91      	ldr	r5, [pc, #580]	@ (800d19c <_dtoa_r+0x584>)
 800cf58:	b954      	cbnz	r4, 800cf70 <_dtoa_r+0x358>
 800cf5a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cf5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf62:	f7f3 fc73 	bl	800084c <__aeabi_ddiv>
 800cf66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf6a:	e028      	b.n	800cfbe <_dtoa_r+0x3a6>
 800cf6c:	2602      	movs	r6, #2
 800cf6e:	e7f2      	b.n	800cf56 <_dtoa_r+0x33e>
 800cf70:	07e1      	lsls	r1, r4, #31
 800cf72:	d508      	bpl.n	800cf86 <_dtoa_r+0x36e>
 800cf74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cf78:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cf7c:	f7f3 fb3c 	bl	80005f8 <__aeabi_dmul>
 800cf80:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cf84:	3601      	adds	r6, #1
 800cf86:	1064      	asrs	r4, r4, #1
 800cf88:	3508      	adds	r5, #8
 800cf8a:	e7e5      	b.n	800cf58 <_dtoa_r+0x340>
 800cf8c:	f000 80af 	beq.w	800d0ee <_dtoa_r+0x4d6>
 800cf90:	427c      	negs	r4, r7
 800cf92:	4b81      	ldr	r3, [pc, #516]	@ (800d198 <_dtoa_r+0x580>)
 800cf94:	4d81      	ldr	r5, [pc, #516]	@ (800d19c <_dtoa_r+0x584>)
 800cf96:	f004 020f 	and.w	r2, r4, #15
 800cf9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cfa6:	f7f3 fb27 	bl	80005f8 <__aeabi_dmul>
 800cfaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cfae:	1124      	asrs	r4, r4, #4
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	2602      	movs	r6, #2
 800cfb4:	2c00      	cmp	r4, #0
 800cfb6:	f040 808f 	bne.w	800d0d8 <_dtoa_r+0x4c0>
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d1d3      	bne.n	800cf66 <_dtoa_r+0x34e>
 800cfbe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cfc0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	f000 8094 	beq.w	800d0f2 <_dtoa_r+0x4da>
 800cfca:	4b75      	ldr	r3, [pc, #468]	@ (800d1a0 <_dtoa_r+0x588>)
 800cfcc:	2200      	movs	r2, #0
 800cfce:	4620      	mov	r0, r4
 800cfd0:	4629      	mov	r1, r5
 800cfd2:	f7f3 fd83 	bl	8000adc <__aeabi_dcmplt>
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	f000 808b 	beq.w	800d0f2 <_dtoa_r+0x4da>
 800cfdc:	9b03      	ldr	r3, [sp, #12]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	f000 8087 	beq.w	800d0f2 <_dtoa_r+0x4da>
 800cfe4:	f1bb 0f00 	cmp.w	fp, #0
 800cfe8:	dd34      	ble.n	800d054 <_dtoa_r+0x43c>
 800cfea:	4620      	mov	r0, r4
 800cfec:	4b6d      	ldr	r3, [pc, #436]	@ (800d1a4 <_dtoa_r+0x58c>)
 800cfee:	2200      	movs	r2, #0
 800cff0:	4629      	mov	r1, r5
 800cff2:	f7f3 fb01 	bl	80005f8 <__aeabi_dmul>
 800cff6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cffa:	f107 38ff 	add.w	r8, r7, #4294967295
 800cffe:	3601      	adds	r6, #1
 800d000:	465c      	mov	r4, fp
 800d002:	4630      	mov	r0, r6
 800d004:	f7f3 fa8e 	bl	8000524 <__aeabi_i2d>
 800d008:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d00c:	f7f3 faf4 	bl	80005f8 <__aeabi_dmul>
 800d010:	4b65      	ldr	r3, [pc, #404]	@ (800d1a8 <_dtoa_r+0x590>)
 800d012:	2200      	movs	r2, #0
 800d014:	f7f3 f93a 	bl	800028c <__adddf3>
 800d018:	4605      	mov	r5, r0
 800d01a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d01e:	2c00      	cmp	r4, #0
 800d020:	d16a      	bne.n	800d0f8 <_dtoa_r+0x4e0>
 800d022:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d026:	4b61      	ldr	r3, [pc, #388]	@ (800d1ac <_dtoa_r+0x594>)
 800d028:	2200      	movs	r2, #0
 800d02a:	f7f3 f92d 	bl	8000288 <__aeabi_dsub>
 800d02e:	4602      	mov	r2, r0
 800d030:	460b      	mov	r3, r1
 800d032:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d036:	462a      	mov	r2, r5
 800d038:	4633      	mov	r3, r6
 800d03a:	f7f3 fd6d 	bl	8000b18 <__aeabi_dcmpgt>
 800d03e:	2800      	cmp	r0, #0
 800d040:	f040 8298 	bne.w	800d574 <_dtoa_r+0x95c>
 800d044:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d048:	462a      	mov	r2, r5
 800d04a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d04e:	f7f3 fd45 	bl	8000adc <__aeabi_dcmplt>
 800d052:	bb38      	cbnz	r0, 800d0a4 <_dtoa_r+0x48c>
 800d054:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d058:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d05c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d05e:	2b00      	cmp	r3, #0
 800d060:	f2c0 8157 	blt.w	800d312 <_dtoa_r+0x6fa>
 800d064:	2f0e      	cmp	r7, #14
 800d066:	f300 8154 	bgt.w	800d312 <_dtoa_r+0x6fa>
 800d06a:	4b4b      	ldr	r3, [pc, #300]	@ (800d198 <_dtoa_r+0x580>)
 800d06c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d070:	ed93 7b00 	vldr	d7, [r3]
 800d074:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d076:	2b00      	cmp	r3, #0
 800d078:	ed8d 7b00 	vstr	d7, [sp]
 800d07c:	f280 80e5 	bge.w	800d24a <_dtoa_r+0x632>
 800d080:	9b03      	ldr	r3, [sp, #12]
 800d082:	2b00      	cmp	r3, #0
 800d084:	f300 80e1 	bgt.w	800d24a <_dtoa_r+0x632>
 800d088:	d10c      	bne.n	800d0a4 <_dtoa_r+0x48c>
 800d08a:	4b48      	ldr	r3, [pc, #288]	@ (800d1ac <_dtoa_r+0x594>)
 800d08c:	2200      	movs	r2, #0
 800d08e:	ec51 0b17 	vmov	r0, r1, d7
 800d092:	f7f3 fab1 	bl	80005f8 <__aeabi_dmul>
 800d096:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d09a:	f7f3 fd33 	bl	8000b04 <__aeabi_dcmpge>
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	f000 8266 	beq.w	800d570 <_dtoa_r+0x958>
 800d0a4:	2400      	movs	r4, #0
 800d0a6:	4625      	mov	r5, r4
 800d0a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d0aa:	4656      	mov	r6, sl
 800d0ac:	ea6f 0803 	mvn.w	r8, r3
 800d0b0:	2700      	movs	r7, #0
 800d0b2:	4621      	mov	r1, r4
 800d0b4:	4648      	mov	r0, r9
 800d0b6:	f000 fcbf 	bl	800da38 <_Bfree>
 800d0ba:	2d00      	cmp	r5, #0
 800d0bc:	f000 80bd 	beq.w	800d23a <_dtoa_r+0x622>
 800d0c0:	b12f      	cbz	r7, 800d0ce <_dtoa_r+0x4b6>
 800d0c2:	42af      	cmp	r7, r5
 800d0c4:	d003      	beq.n	800d0ce <_dtoa_r+0x4b6>
 800d0c6:	4639      	mov	r1, r7
 800d0c8:	4648      	mov	r0, r9
 800d0ca:	f000 fcb5 	bl	800da38 <_Bfree>
 800d0ce:	4629      	mov	r1, r5
 800d0d0:	4648      	mov	r0, r9
 800d0d2:	f000 fcb1 	bl	800da38 <_Bfree>
 800d0d6:	e0b0      	b.n	800d23a <_dtoa_r+0x622>
 800d0d8:	07e2      	lsls	r2, r4, #31
 800d0da:	d505      	bpl.n	800d0e8 <_dtoa_r+0x4d0>
 800d0dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d0e0:	f7f3 fa8a 	bl	80005f8 <__aeabi_dmul>
 800d0e4:	3601      	adds	r6, #1
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	1064      	asrs	r4, r4, #1
 800d0ea:	3508      	adds	r5, #8
 800d0ec:	e762      	b.n	800cfb4 <_dtoa_r+0x39c>
 800d0ee:	2602      	movs	r6, #2
 800d0f0:	e765      	b.n	800cfbe <_dtoa_r+0x3a6>
 800d0f2:	9c03      	ldr	r4, [sp, #12]
 800d0f4:	46b8      	mov	r8, r7
 800d0f6:	e784      	b.n	800d002 <_dtoa_r+0x3ea>
 800d0f8:	4b27      	ldr	r3, [pc, #156]	@ (800d198 <_dtoa_r+0x580>)
 800d0fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d0fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d100:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d104:	4454      	add	r4, sl
 800d106:	2900      	cmp	r1, #0
 800d108:	d054      	beq.n	800d1b4 <_dtoa_r+0x59c>
 800d10a:	4929      	ldr	r1, [pc, #164]	@ (800d1b0 <_dtoa_r+0x598>)
 800d10c:	2000      	movs	r0, #0
 800d10e:	f7f3 fb9d 	bl	800084c <__aeabi_ddiv>
 800d112:	4633      	mov	r3, r6
 800d114:	462a      	mov	r2, r5
 800d116:	f7f3 f8b7 	bl	8000288 <__aeabi_dsub>
 800d11a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d11e:	4656      	mov	r6, sl
 800d120:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d124:	f7f3 fd18 	bl	8000b58 <__aeabi_d2iz>
 800d128:	4605      	mov	r5, r0
 800d12a:	f7f3 f9fb 	bl	8000524 <__aeabi_i2d>
 800d12e:	4602      	mov	r2, r0
 800d130:	460b      	mov	r3, r1
 800d132:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d136:	f7f3 f8a7 	bl	8000288 <__aeabi_dsub>
 800d13a:	3530      	adds	r5, #48	@ 0x30
 800d13c:	4602      	mov	r2, r0
 800d13e:	460b      	mov	r3, r1
 800d140:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d144:	f806 5b01 	strb.w	r5, [r6], #1
 800d148:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d14c:	f7f3 fcc6 	bl	8000adc <__aeabi_dcmplt>
 800d150:	2800      	cmp	r0, #0
 800d152:	d172      	bne.n	800d23a <_dtoa_r+0x622>
 800d154:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d158:	4911      	ldr	r1, [pc, #68]	@ (800d1a0 <_dtoa_r+0x588>)
 800d15a:	2000      	movs	r0, #0
 800d15c:	f7f3 f894 	bl	8000288 <__aeabi_dsub>
 800d160:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d164:	f7f3 fcba 	bl	8000adc <__aeabi_dcmplt>
 800d168:	2800      	cmp	r0, #0
 800d16a:	f040 80b4 	bne.w	800d2d6 <_dtoa_r+0x6be>
 800d16e:	42a6      	cmp	r6, r4
 800d170:	f43f af70 	beq.w	800d054 <_dtoa_r+0x43c>
 800d174:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d178:	4b0a      	ldr	r3, [pc, #40]	@ (800d1a4 <_dtoa_r+0x58c>)
 800d17a:	2200      	movs	r2, #0
 800d17c:	f7f3 fa3c 	bl	80005f8 <__aeabi_dmul>
 800d180:	4b08      	ldr	r3, [pc, #32]	@ (800d1a4 <_dtoa_r+0x58c>)
 800d182:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d186:	2200      	movs	r2, #0
 800d188:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d18c:	f7f3 fa34 	bl	80005f8 <__aeabi_dmul>
 800d190:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d194:	e7c4      	b.n	800d120 <_dtoa_r+0x508>
 800d196:	bf00      	nop
 800d198:	0800ea38 	.word	0x0800ea38
 800d19c:	0800ea10 	.word	0x0800ea10
 800d1a0:	3ff00000 	.word	0x3ff00000
 800d1a4:	40240000 	.word	0x40240000
 800d1a8:	401c0000 	.word	0x401c0000
 800d1ac:	40140000 	.word	0x40140000
 800d1b0:	3fe00000 	.word	0x3fe00000
 800d1b4:	4631      	mov	r1, r6
 800d1b6:	4628      	mov	r0, r5
 800d1b8:	f7f3 fa1e 	bl	80005f8 <__aeabi_dmul>
 800d1bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d1c0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d1c2:	4656      	mov	r6, sl
 800d1c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d1c8:	f7f3 fcc6 	bl	8000b58 <__aeabi_d2iz>
 800d1cc:	4605      	mov	r5, r0
 800d1ce:	f7f3 f9a9 	bl	8000524 <__aeabi_i2d>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d1da:	f7f3 f855 	bl	8000288 <__aeabi_dsub>
 800d1de:	3530      	adds	r5, #48	@ 0x30
 800d1e0:	f806 5b01 	strb.w	r5, [r6], #1
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	42a6      	cmp	r6, r4
 800d1ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d1ee:	f04f 0200 	mov.w	r2, #0
 800d1f2:	d124      	bne.n	800d23e <_dtoa_r+0x626>
 800d1f4:	4baf      	ldr	r3, [pc, #700]	@ (800d4b4 <_dtoa_r+0x89c>)
 800d1f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d1fa:	f7f3 f847 	bl	800028c <__adddf3>
 800d1fe:	4602      	mov	r2, r0
 800d200:	460b      	mov	r3, r1
 800d202:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d206:	f7f3 fc87 	bl	8000b18 <__aeabi_dcmpgt>
 800d20a:	2800      	cmp	r0, #0
 800d20c:	d163      	bne.n	800d2d6 <_dtoa_r+0x6be>
 800d20e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d212:	49a8      	ldr	r1, [pc, #672]	@ (800d4b4 <_dtoa_r+0x89c>)
 800d214:	2000      	movs	r0, #0
 800d216:	f7f3 f837 	bl	8000288 <__aeabi_dsub>
 800d21a:	4602      	mov	r2, r0
 800d21c:	460b      	mov	r3, r1
 800d21e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d222:	f7f3 fc5b 	bl	8000adc <__aeabi_dcmplt>
 800d226:	2800      	cmp	r0, #0
 800d228:	f43f af14 	beq.w	800d054 <_dtoa_r+0x43c>
 800d22c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d22e:	1e73      	subs	r3, r6, #1
 800d230:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d232:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d236:	2b30      	cmp	r3, #48	@ 0x30
 800d238:	d0f8      	beq.n	800d22c <_dtoa_r+0x614>
 800d23a:	4647      	mov	r7, r8
 800d23c:	e03b      	b.n	800d2b6 <_dtoa_r+0x69e>
 800d23e:	4b9e      	ldr	r3, [pc, #632]	@ (800d4b8 <_dtoa_r+0x8a0>)
 800d240:	f7f3 f9da 	bl	80005f8 <__aeabi_dmul>
 800d244:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d248:	e7bc      	b.n	800d1c4 <_dtoa_r+0x5ac>
 800d24a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d24e:	4656      	mov	r6, sl
 800d250:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d254:	4620      	mov	r0, r4
 800d256:	4629      	mov	r1, r5
 800d258:	f7f3 faf8 	bl	800084c <__aeabi_ddiv>
 800d25c:	f7f3 fc7c 	bl	8000b58 <__aeabi_d2iz>
 800d260:	4680      	mov	r8, r0
 800d262:	f7f3 f95f 	bl	8000524 <__aeabi_i2d>
 800d266:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d26a:	f7f3 f9c5 	bl	80005f8 <__aeabi_dmul>
 800d26e:	4602      	mov	r2, r0
 800d270:	460b      	mov	r3, r1
 800d272:	4620      	mov	r0, r4
 800d274:	4629      	mov	r1, r5
 800d276:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d27a:	f7f3 f805 	bl	8000288 <__aeabi_dsub>
 800d27e:	f806 4b01 	strb.w	r4, [r6], #1
 800d282:	9d03      	ldr	r5, [sp, #12]
 800d284:	eba6 040a 	sub.w	r4, r6, sl
 800d288:	42a5      	cmp	r5, r4
 800d28a:	4602      	mov	r2, r0
 800d28c:	460b      	mov	r3, r1
 800d28e:	d133      	bne.n	800d2f8 <_dtoa_r+0x6e0>
 800d290:	f7f2 fffc 	bl	800028c <__adddf3>
 800d294:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d298:	4604      	mov	r4, r0
 800d29a:	460d      	mov	r5, r1
 800d29c:	f7f3 fc3c 	bl	8000b18 <__aeabi_dcmpgt>
 800d2a0:	b9c0      	cbnz	r0, 800d2d4 <_dtoa_r+0x6bc>
 800d2a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	4629      	mov	r1, r5
 800d2aa:	f7f3 fc0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2ae:	b110      	cbz	r0, 800d2b6 <_dtoa_r+0x69e>
 800d2b0:	f018 0f01 	tst.w	r8, #1
 800d2b4:	d10e      	bne.n	800d2d4 <_dtoa_r+0x6bc>
 800d2b6:	9902      	ldr	r1, [sp, #8]
 800d2b8:	4648      	mov	r0, r9
 800d2ba:	f000 fbbd 	bl	800da38 <_Bfree>
 800d2be:	2300      	movs	r3, #0
 800d2c0:	7033      	strb	r3, [r6, #0]
 800d2c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d2c4:	3701      	adds	r7, #1
 800d2c6:	601f      	str	r7, [r3, #0]
 800d2c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	f000 824b 	beq.w	800d766 <_dtoa_r+0xb4e>
 800d2d0:	601e      	str	r6, [r3, #0]
 800d2d2:	e248      	b.n	800d766 <_dtoa_r+0xb4e>
 800d2d4:	46b8      	mov	r8, r7
 800d2d6:	4633      	mov	r3, r6
 800d2d8:	461e      	mov	r6, r3
 800d2da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2de:	2a39      	cmp	r2, #57	@ 0x39
 800d2e0:	d106      	bne.n	800d2f0 <_dtoa_r+0x6d8>
 800d2e2:	459a      	cmp	sl, r3
 800d2e4:	d1f8      	bne.n	800d2d8 <_dtoa_r+0x6c0>
 800d2e6:	2230      	movs	r2, #48	@ 0x30
 800d2e8:	f108 0801 	add.w	r8, r8, #1
 800d2ec:	f88a 2000 	strb.w	r2, [sl]
 800d2f0:	781a      	ldrb	r2, [r3, #0]
 800d2f2:	3201      	adds	r2, #1
 800d2f4:	701a      	strb	r2, [r3, #0]
 800d2f6:	e7a0      	b.n	800d23a <_dtoa_r+0x622>
 800d2f8:	4b6f      	ldr	r3, [pc, #444]	@ (800d4b8 <_dtoa_r+0x8a0>)
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f7f3 f97c 	bl	80005f8 <__aeabi_dmul>
 800d300:	2200      	movs	r2, #0
 800d302:	2300      	movs	r3, #0
 800d304:	4604      	mov	r4, r0
 800d306:	460d      	mov	r5, r1
 800d308:	f7f3 fbde 	bl	8000ac8 <__aeabi_dcmpeq>
 800d30c:	2800      	cmp	r0, #0
 800d30e:	d09f      	beq.n	800d250 <_dtoa_r+0x638>
 800d310:	e7d1      	b.n	800d2b6 <_dtoa_r+0x69e>
 800d312:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d314:	2a00      	cmp	r2, #0
 800d316:	f000 80ea 	beq.w	800d4ee <_dtoa_r+0x8d6>
 800d31a:	9a07      	ldr	r2, [sp, #28]
 800d31c:	2a01      	cmp	r2, #1
 800d31e:	f300 80cd 	bgt.w	800d4bc <_dtoa_r+0x8a4>
 800d322:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d324:	2a00      	cmp	r2, #0
 800d326:	f000 80c1 	beq.w	800d4ac <_dtoa_r+0x894>
 800d32a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d32e:	9c08      	ldr	r4, [sp, #32]
 800d330:	9e00      	ldr	r6, [sp, #0]
 800d332:	9a00      	ldr	r2, [sp, #0]
 800d334:	441a      	add	r2, r3
 800d336:	9200      	str	r2, [sp, #0]
 800d338:	9a06      	ldr	r2, [sp, #24]
 800d33a:	2101      	movs	r1, #1
 800d33c:	441a      	add	r2, r3
 800d33e:	4648      	mov	r0, r9
 800d340:	9206      	str	r2, [sp, #24]
 800d342:	f000 fc2d 	bl	800dba0 <__i2b>
 800d346:	4605      	mov	r5, r0
 800d348:	b166      	cbz	r6, 800d364 <_dtoa_r+0x74c>
 800d34a:	9b06      	ldr	r3, [sp, #24]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	dd09      	ble.n	800d364 <_dtoa_r+0x74c>
 800d350:	42b3      	cmp	r3, r6
 800d352:	9a00      	ldr	r2, [sp, #0]
 800d354:	bfa8      	it	ge
 800d356:	4633      	movge	r3, r6
 800d358:	1ad2      	subs	r2, r2, r3
 800d35a:	9200      	str	r2, [sp, #0]
 800d35c:	9a06      	ldr	r2, [sp, #24]
 800d35e:	1af6      	subs	r6, r6, r3
 800d360:	1ad3      	subs	r3, r2, r3
 800d362:	9306      	str	r3, [sp, #24]
 800d364:	9b08      	ldr	r3, [sp, #32]
 800d366:	b30b      	cbz	r3, 800d3ac <_dtoa_r+0x794>
 800d368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	f000 80c6 	beq.w	800d4fc <_dtoa_r+0x8e4>
 800d370:	2c00      	cmp	r4, #0
 800d372:	f000 80c0 	beq.w	800d4f6 <_dtoa_r+0x8de>
 800d376:	4629      	mov	r1, r5
 800d378:	4622      	mov	r2, r4
 800d37a:	4648      	mov	r0, r9
 800d37c:	f000 fcc8 	bl	800dd10 <__pow5mult>
 800d380:	9a02      	ldr	r2, [sp, #8]
 800d382:	4601      	mov	r1, r0
 800d384:	4605      	mov	r5, r0
 800d386:	4648      	mov	r0, r9
 800d388:	f000 fc20 	bl	800dbcc <__multiply>
 800d38c:	9902      	ldr	r1, [sp, #8]
 800d38e:	4680      	mov	r8, r0
 800d390:	4648      	mov	r0, r9
 800d392:	f000 fb51 	bl	800da38 <_Bfree>
 800d396:	9b08      	ldr	r3, [sp, #32]
 800d398:	1b1b      	subs	r3, r3, r4
 800d39a:	9308      	str	r3, [sp, #32]
 800d39c:	f000 80b1 	beq.w	800d502 <_dtoa_r+0x8ea>
 800d3a0:	9a08      	ldr	r2, [sp, #32]
 800d3a2:	4641      	mov	r1, r8
 800d3a4:	4648      	mov	r0, r9
 800d3a6:	f000 fcb3 	bl	800dd10 <__pow5mult>
 800d3aa:	9002      	str	r0, [sp, #8]
 800d3ac:	2101      	movs	r1, #1
 800d3ae:	4648      	mov	r0, r9
 800d3b0:	f000 fbf6 	bl	800dba0 <__i2b>
 800d3b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d3b6:	4604      	mov	r4, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f000 81d8 	beq.w	800d76e <_dtoa_r+0xb56>
 800d3be:	461a      	mov	r2, r3
 800d3c0:	4601      	mov	r1, r0
 800d3c2:	4648      	mov	r0, r9
 800d3c4:	f000 fca4 	bl	800dd10 <__pow5mult>
 800d3c8:	9b07      	ldr	r3, [sp, #28]
 800d3ca:	2b01      	cmp	r3, #1
 800d3cc:	4604      	mov	r4, r0
 800d3ce:	f300 809f 	bgt.w	800d510 <_dtoa_r+0x8f8>
 800d3d2:	9b04      	ldr	r3, [sp, #16]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	f040 8097 	bne.w	800d508 <_dtoa_r+0x8f0>
 800d3da:	9b05      	ldr	r3, [sp, #20]
 800d3dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	f040 8093 	bne.w	800d50c <_dtoa_r+0x8f4>
 800d3e6:	9b05      	ldr	r3, [sp, #20]
 800d3e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d3ec:	0d1b      	lsrs	r3, r3, #20
 800d3ee:	051b      	lsls	r3, r3, #20
 800d3f0:	b133      	cbz	r3, 800d400 <_dtoa_r+0x7e8>
 800d3f2:	9b00      	ldr	r3, [sp, #0]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	9300      	str	r3, [sp, #0]
 800d3f8:	9b06      	ldr	r3, [sp, #24]
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	9306      	str	r3, [sp, #24]
 800d3fe:	2301      	movs	r3, #1
 800d400:	9308      	str	r3, [sp, #32]
 800d402:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d404:	2b00      	cmp	r3, #0
 800d406:	f000 81b8 	beq.w	800d77a <_dtoa_r+0xb62>
 800d40a:	6923      	ldr	r3, [r4, #16]
 800d40c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d410:	6918      	ldr	r0, [r3, #16]
 800d412:	f000 fb79 	bl	800db08 <__hi0bits>
 800d416:	f1c0 0020 	rsb	r0, r0, #32
 800d41a:	9b06      	ldr	r3, [sp, #24]
 800d41c:	4418      	add	r0, r3
 800d41e:	f010 001f 	ands.w	r0, r0, #31
 800d422:	f000 8082 	beq.w	800d52a <_dtoa_r+0x912>
 800d426:	f1c0 0320 	rsb	r3, r0, #32
 800d42a:	2b04      	cmp	r3, #4
 800d42c:	dd73      	ble.n	800d516 <_dtoa_r+0x8fe>
 800d42e:	9b00      	ldr	r3, [sp, #0]
 800d430:	f1c0 001c 	rsb	r0, r0, #28
 800d434:	4403      	add	r3, r0
 800d436:	9300      	str	r3, [sp, #0]
 800d438:	9b06      	ldr	r3, [sp, #24]
 800d43a:	4403      	add	r3, r0
 800d43c:	4406      	add	r6, r0
 800d43e:	9306      	str	r3, [sp, #24]
 800d440:	9b00      	ldr	r3, [sp, #0]
 800d442:	2b00      	cmp	r3, #0
 800d444:	dd05      	ble.n	800d452 <_dtoa_r+0x83a>
 800d446:	9902      	ldr	r1, [sp, #8]
 800d448:	461a      	mov	r2, r3
 800d44a:	4648      	mov	r0, r9
 800d44c:	f000 fcba 	bl	800ddc4 <__lshift>
 800d450:	9002      	str	r0, [sp, #8]
 800d452:	9b06      	ldr	r3, [sp, #24]
 800d454:	2b00      	cmp	r3, #0
 800d456:	dd05      	ble.n	800d464 <_dtoa_r+0x84c>
 800d458:	4621      	mov	r1, r4
 800d45a:	461a      	mov	r2, r3
 800d45c:	4648      	mov	r0, r9
 800d45e:	f000 fcb1 	bl	800ddc4 <__lshift>
 800d462:	4604      	mov	r4, r0
 800d464:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d466:	2b00      	cmp	r3, #0
 800d468:	d061      	beq.n	800d52e <_dtoa_r+0x916>
 800d46a:	9802      	ldr	r0, [sp, #8]
 800d46c:	4621      	mov	r1, r4
 800d46e:	f000 fd15 	bl	800de9c <__mcmp>
 800d472:	2800      	cmp	r0, #0
 800d474:	da5b      	bge.n	800d52e <_dtoa_r+0x916>
 800d476:	2300      	movs	r3, #0
 800d478:	9902      	ldr	r1, [sp, #8]
 800d47a:	220a      	movs	r2, #10
 800d47c:	4648      	mov	r0, r9
 800d47e:	f000 fafd 	bl	800da7c <__multadd>
 800d482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d484:	9002      	str	r0, [sp, #8]
 800d486:	f107 38ff 	add.w	r8, r7, #4294967295
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	f000 8177 	beq.w	800d77e <_dtoa_r+0xb66>
 800d490:	4629      	mov	r1, r5
 800d492:	2300      	movs	r3, #0
 800d494:	220a      	movs	r2, #10
 800d496:	4648      	mov	r0, r9
 800d498:	f000 faf0 	bl	800da7c <__multadd>
 800d49c:	f1bb 0f00 	cmp.w	fp, #0
 800d4a0:	4605      	mov	r5, r0
 800d4a2:	dc6f      	bgt.n	800d584 <_dtoa_r+0x96c>
 800d4a4:	9b07      	ldr	r3, [sp, #28]
 800d4a6:	2b02      	cmp	r3, #2
 800d4a8:	dc49      	bgt.n	800d53e <_dtoa_r+0x926>
 800d4aa:	e06b      	b.n	800d584 <_dtoa_r+0x96c>
 800d4ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d4ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d4b2:	e73c      	b.n	800d32e <_dtoa_r+0x716>
 800d4b4:	3fe00000 	.word	0x3fe00000
 800d4b8:	40240000 	.word	0x40240000
 800d4bc:	9b03      	ldr	r3, [sp, #12]
 800d4be:	1e5c      	subs	r4, r3, #1
 800d4c0:	9b08      	ldr	r3, [sp, #32]
 800d4c2:	42a3      	cmp	r3, r4
 800d4c4:	db09      	blt.n	800d4da <_dtoa_r+0x8c2>
 800d4c6:	1b1c      	subs	r4, r3, r4
 800d4c8:	9b03      	ldr	r3, [sp, #12]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	f6bf af30 	bge.w	800d330 <_dtoa_r+0x718>
 800d4d0:	9b00      	ldr	r3, [sp, #0]
 800d4d2:	9a03      	ldr	r2, [sp, #12]
 800d4d4:	1a9e      	subs	r6, r3, r2
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	e72b      	b.n	800d332 <_dtoa_r+0x71a>
 800d4da:	9b08      	ldr	r3, [sp, #32]
 800d4dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d4de:	9408      	str	r4, [sp, #32]
 800d4e0:	1ae3      	subs	r3, r4, r3
 800d4e2:	441a      	add	r2, r3
 800d4e4:	9e00      	ldr	r6, [sp, #0]
 800d4e6:	9b03      	ldr	r3, [sp, #12]
 800d4e8:	920d      	str	r2, [sp, #52]	@ 0x34
 800d4ea:	2400      	movs	r4, #0
 800d4ec:	e721      	b.n	800d332 <_dtoa_r+0x71a>
 800d4ee:	9c08      	ldr	r4, [sp, #32]
 800d4f0:	9e00      	ldr	r6, [sp, #0]
 800d4f2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d4f4:	e728      	b.n	800d348 <_dtoa_r+0x730>
 800d4f6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d4fa:	e751      	b.n	800d3a0 <_dtoa_r+0x788>
 800d4fc:	9a08      	ldr	r2, [sp, #32]
 800d4fe:	9902      	ldr	r1, [sp, #8]
 800d500:	e750      	b.n	800d3a4 <_dtoa_r+0x78c>
 800d502:	f8cd 8008 	str.w	r8, [sp, #8]
 800d506:	e751      	b.n	800d3ac <_dtoa_r+0x794>
 800d508:	2300      	movs	r3, #0
 800d50a:	e779      	b.n	800d400 <_dtoa_r+0x7e8>
 800d50c:	9b04      	ldr	r3, [sp, #16]
 800d50e:	e777      	b.n	800d400 <_dtoa_r+0x7e8>
 800d510:	2300      	movs	r3, #0
 800d512:	9308      	str	r3, [sp, #32]
 800d514:	e779      	b.n	800d40a <_dtoa_r+0x7f2>
 800d516:	d093      	beq.n	800d440 <_dtoa_r+0x828>
 800d518:	9a00      	ldr	r2, [sp, #0]
 800d51a:	331c      	adds	r3, #28
 800d51c:	441a      	add	r2, r3
 800d51e:	9200      	str	r2, [sp, #0]
 800d520:	9a06      	ldr	r2, [sp, #24]
 800d522:	441a      	add	r2, r3
 800d524:	441e      	add	r6, r3
 800d526:	9206      	str	r2, [sp, #24]
 800d528:	e78a      	b.n	800d440 <_dtoa_r+0x828>
 800d52a:	4603      	mov	r3, r0
 800d52c:	e7f4      	b.n	800d518 <_dtoa_r+0x900>
 800d52e:	9b03      	ldr	r3, [sp, #12]
 800d530:	2b00      	cmp	r3, #0
 800d532:	46b8      	mov	r8, r7
 800d534:	dc20      	bgt.n	800d578 <_dtoa_r+0x960>
 800d536:	469b      	mov	fp, r3
 800d538:	9b07      	ldr	r3, [sp, #28]
 800d53a:	2b02      	cmp	r3, #2
 800d53c:	dd1e      	ble.n	800d57c <_dtoa_r+0x964>
 800d53e:	f1bb 0f00 	cmp.w	fp, #0
 800d542:	f47f adb1 	bne.w	800d0a8 <_dtoa_r+0x490>
 800d546:	4621      	mov	r1, r4
 800d548:	465b      	mov	r3, fp
 800d54a:	2205      	movs	r2, #5
 800d54c:	4648      	mov	r0, r9
 800d54e:	f000 fa95 	bl	800da7c <__multadd>
 800d552:	4601      	mov	r1, r0
 800d554:	4604      	mov	r4, r0
 800d556:	9802      	ldr	r0, [sp, #8]
 800d558:	f000 fca0 	bl	800de9c <__mcmp>
 800d55c:	2800      	cmp	r0, #0
 800d55e:	f77f ada3 	ble.w	800d0a8 <_dtoa_r+0x490>
 800d562:	4656      	mov	r6, sl
 800d564:	2331      	movs	r3, #49	@ 0x31
 800d566:	f806 3b01 	strb.w	r3, [r6], #1
 800d56a:	f108 0801 	add.w	r8, r8, #1
 800d56e:	e59f      	b.n	800d0b0 <_dtoa_r+0x498>
 800d570:	9c03      	ldr	r4, [sp, #12]
 800d572:	46b8      	mov	r8, r7
 800d574:	4625      	mov	r5, r4
 800d576:	e7f4      	b.n	800d562 <_dtoa_r+0x94a>
 800d578:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d57c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d57e:	2b00      	cmp	r3, #0
 800d580:	f000 8101 	beq.w	800d786 <_dtoa_r+0xb6e>
 800d584:	2e00      	cmp	r6, #0
 800d586:	dd05      	ble.n	800d594 <_dtoa_r+0x97c>
 800d588:	4629      	mov	r1, r5
 800d58a:	4632      	mov	r2, r6
 800d58c:	4648      	mov	r0, r9
 800d58e:	f000 fc19 	bl	800ddc4 <__lshift>
 800d592:	4605      	mov	r5, r0
 800d594:	9b08      	ldr	r3, [sp, #32]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d05c      	beq.n	800d654 <_dtoa_r+0xa3c>
 800d59a:	6869      	ldr	r1, [r5, #4]
 800d59c:	4648      	mov	r0, r9
 800d59e:	f000 fa0b 	bl	800d9b8 <_Balloc>
 800d5a2:	4606      	mov	r6, r0
 800d5a4:	b928      	cbnz	r0, 800d5b2 <_dtoa_r+0x99a>
 800d5a6:	4b82      	ldr	r3, [pc, #520]	@ (800d7b0 <_dtoa_r+0xb98>)
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d5ae:	f7ff bb4a 	b.w	800cc46 <_dtoa_r+0x2e>
 800d5b2:	692a      	ldr	r2, [r5, #16]
 800d5b4:	3202      	adds	r2, #2
 800d5b6:	0092      	lsls	r2, r2, #2
 800d5b8:	f105 010c 	add.w	r1, r5, #12
 800d5bc:	300c      	adds	r0, #12
 800d5be:	f7ff fa74 	bl	800caaa <memcpy>
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	4631      	mov	r1, r6
 800d5c6:	4648      	mov	r0, r9
 800d5c8:	f000 fbfc 	bl	800ddc4 <__lshift>
 800d5cc:	f10a 0301 	add.w	r3, sl, #1
 800d5d0:	9300      	str	r3, [sp, #0]
 800d5d2:	eb0a 030b 	add.w	r3, sl, fp
 800d5d6:	9308      	str	r3, [sp, #32]
 800d5d8:	9b04      	ldr	r3, [sp, #16]
 800d5da:	f003 0301 	and.w	r3, r3, #1
 800d5de:	462f      	mov	r7, r5
 800d5e0:	9306      	str	r3, [sp, #24]
 800d5e2:	4605      	mov	r5, r0
 800d5e4:	9b00      	ldr	r3, [sp, #0]
 800d5e6:	9802      	ldr	r0, [sp, #8]
 800d5e8:	4621      	mov	r1, r4
 800d5ea:	f103 3bff 	add.w	fp, r3, #4294967295
 800d5ee:	f7ff fa89 	bl	800cb04 <quorem>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	3330      	adds	r3, #48	@ 0x30
 800d5f6:	9003      	str	r0, [sp, #12]
 800d5f8:	4639      	mov	r1, r7
 800d5fa:	9802      	ldr	r0, [sp, #8]
 800d5fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5fe:	f000 fc4d 	bl	800de9c <__mcmp>
 800d602:	462a      	mov	r2, r5
 800d604:	9004      	str	r0, [sp, #16]
 800d606:	4621      	mov	r1, r4
 800d608:	4648      	mov	r0, r9
 800d60a:	f000 fc63 	bl	800ded4 <__mdiff>
 800d60e:	68c2      	ldr	r2, [r0, #12]
 800d610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d612:	4606      	mov	r6, r0
 800d614:	bb02      	cbnz	r2, 800d658 <_dtoa_r+0xa40>
 800d616:	4601      	mov	r1, r0
 800d618:	9802      	ldr	r0, [sp, #8]
 800d61a:	f000 fc3f 	bl	800de9c <__mcmp>
 800d61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d620:	4602      	mov	r2, r0
 800d622:	4631      	mov	r1, r6
 800d624:	4648      	mov	r0, r9
 800d626:	920c      	str	r2, [sp, #48]	@ 0x30
 800d628:	9309      	str	r3, [sp, #36]	@ 0x24
 800d62a:	f000 fa05 	bl	800da38 <_Bfree>
 800d62e:	9b07      	ldr	r3, [sp, #28]
 800d630:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d632:	9e00      	ldr	r6, [sp, #0]
 800d634:	ea42 0103 	orr.w	r1, r2, r3
 800d638:	9b06      	ldr	r3, [sp, #24]
 800d63a:	4319      	orrs	r1, r3
 800d63c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d63e:	d10d      	bne.n	800d65c <_dtoa_r+0xa44>
 800d640:	2b39      	cmp	r3, #57	@ 0x39
 800d642:	d027      	beq.n	800d694 <_dtoa_r+0xa7c>
 800d644:	9a04      	ldr	r2, [sp, #16]
 800d646:	2a00      	cmp	r2, #0
 800d648:	dd01      	ble.n	800d64e <_dtoa_r+0xa36>
 800d64a:	9b03      	ldr	r3, [sp, #12]
 800d64c:	3331      	adds	r3, #49	@ 0x31
 800d64e:	f88b 3000 	strb.w	r3, [fp]
 800d652:	e52e      	b.n	800d0b2 <_dtoa_r+0x49a>
 800d654:	4628      	mov	r0, r5
 800d656:	e7b9      	b.n	800d5cc <_dtoa_r+0x9b4>
 800d658:	2201      	movs	r2, #1
 800d65a:	e7e2      	b.n	800d622 <_dtoa_r+0xa0a>
 800d65c:	9904      	ldr	r1, [sp, #16]
 800d65e:	2900      	cmp	r1, #0
 800d660:	db04      	blt.n	800d66c <_dtoa_r+0xa54>
 800d662:	9807      	ldr	r0, [sp, #28]
 800d664:	4301      	orrs	r1, r0
 800d666:	9806      	ldr	r0, [sp, #24]
 800d668:	4301      	orrs	r1, r0
 800d66a:	d120      	bne.n	800d6ae <_dtoa_r+0xa96>
 800d66c:	2a00      	cmp	r2, #0
 800d66e:	ddee      	ble.n	800d64e <_dtoa_r+0xa36>
 800d670:	9902      	ldr	r1, [sp, #8]
 800d672:	9300      	str	r3, [sp, #0]
 800d674:	2201      	movs	r2, #1
 800d676:	4648      	mov	r0, r9
 800d678:	f000 fba4 	bl	800ddc4 <__lshift>
 800d67c:	4621      	mov	r1, r4
 800d67e:	9002      	str	r0, [sp, #8]
 800d680:	f000 fc0c 	bl	800de9c <__mcmp>
 800d684:	2800      	cmp	r0, #0
 800d686:	9b00      	ldr	r3, [sp, #0]
 800d688:	dc02      	bgt.n	800d690 <_dtoa_r+0xa78>
 800d68a:	d1e0      	bne.n	800d64e <_dtoa_r+0xa36>
 800d68c:	07da      	lsls	r2, r3, #31
 800d68e:	d5de      	bpl.n	800d64e <_dtoa_r+0xa36>
 800d690:	2b39      	cmp	r3, #57	@ 0x39
 800d692:	d1da      	bne.n	800d64a <_dtoa_r+0xa32>
 800d694:	2339      	movs	r3, #57	@ 0x39
 800d696:	f88b 3000 	strb.w	r3, [fp]
 800d69a:	4633      	mov	r3, r6
 800d69c:	461e      	mov	r6, r3
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d6a4:	2a39      	cmp	r2, #57	@ 0x39
 800d6a6:	d04e      	beq.n	800d746 <_dtoa_r+0xb2e>
 800d6a8:	3201      	adds	r2, #1
 800d6aa:	701a      	strb	r2, [r3, #0]
 800d6ac:	e501      	b.n	800d0b2 <_dtoa_r+0x49a>
 800d6ae:	2a00      	cmp	r2, #0
 800d6b0:	dd03      	ble.n	800d6ba <_dtoa_r+0xaa2>
 800d6b2:	2b39      	cmp	r3, #57	@ 0x39
 800d6b4:	d0ee      	beq.n	800d694 <_dtoa_r+0xa7c>
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	e7c9      	b.n	800d64e <_dtoa_r+0xa36>
 800d6ba:	9a00      	ldr	r2, [sp, #0]
 800d6bc:	9908      	ldr	r1, [sp, #32]
 800d6be:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d6c2:	428a      	cmp	r2, r1
 800d6c4:	d028      	beq.n	800d718 <_dtoa_r+0xb00>
 800d6c6:	9902      	ldr	r1, [sp, #8]
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	220a      	movs	r2, #10
 800d6cc:	4648      	mov	r0, r9
 800d6ce:	f000 f9d5 	bl	800da7c <__multadd>
 800d6d2:	42af      	cmp	r7, r5
 800d6d4:	9002      	str	r0, [sp, #8]
 800d6d6:	f04f 0300 	mov.w	r3, #0
 800d6da:	f04f 020a 	mov.w	r2, #10
 800d6de:	4639      	mov	r1, r7
 800d6e0:	4648      	mov	r0, r9
 800d6e2:	d107      	bne.n	800d6f4 <_dtoa_r+0xadc>
 800d6e4:	f000 f9ca 	bl	800da7c <__multadd>
 800d6e8:	4607      	mov	r7, r0
 800d6ea:	4605      	mov	r5, r0
 800d6ec:	9b00      	ldr	r3, [sp, #0]
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	9300      	str	r3, [sp, #0]
 800d6f2:	e777      	b.n	800d5e4 <_dtoa_r+0x9cc>
 800d6f4:	f000 f9c2 	bl	800da7c <__multadd>
 800d6f8:	4629      	mov	r1, r5
 800d6fa:	4607      	mov	r7, r0
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	220a      	movs	r2, #10
 800d700:	4648      	mov	r0, r9
 800d702:	f000 f9bb 	bl	800da7c <__multadd>
 800d706:	4605      	mov	r5, r0
 800d708:	e7f0      	b.n	800d6ec <_dtoa_r+0xad4>
 800d70a:	f1bb 0f00 	cmp.w	fp, #0
 800d70e:	bfcc      	ite	gt
 800d710:	465e      	movgt	r6, fp
 800d712:	2601      	movle	r6, #1
 800d714:	4456      	add	r6, sl
 800d716:	2700      	movs	r7, #0
 800d718:	9902      	ldr	r1, [sp, #8]
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	2201      	movs	r2, #1
 800d71e:	4648      	mov	r0, r9
 800d720:	f000 fb50 	bl	800ddc4 <__lshift>
 800d724:	4621      	mov	r1, r4
 800d726:	9002      	str	r0, [sp, #8]
 800d728:	f000 fbb8 	bl	800de9c <__mcmp>
 800d72c:	2800      	cmp	r0, #0
 800d72e:	dcb4      	bgt.n	800d69a <_dtoa_r+0xa82>
 800d730:	d102      	bne.n	800d738 <_dtoa_r+0xb20>
 800d732:	9b00      	ldr	r3, [sp, #0]
 800d734:	07db      	lsls	r3, r3, #31
 800d736:	d4b0      	bmi.n	800d69a <_dtoa_r+0xa82>
 800d738:	4633      	mov	r3, r6
 800d73a:	461e      	mov	r6, r3
 800d73c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d740:	2a30      	cmp	r2, #48	@ 0x30
 800d742:	d0fa      	beq.n	800d73a <_dtoa_r+0xb22>
 800d744:	e4b5      	b.n	800d0b2 <_dtoa_r+0x49a>
 800d746:	459a      	cmp	sl, r3
 800d748:	d1a8      	bne.n	800d69c <_dtoa_r+0xa84>
 800d74a:	2331      	movs	r3, #49	@ 0x31
 800d74c:	f108 0801 	add.w	r8, r8, #1
 800d750:	f88a 3000 	strb.w	r3, [sl]
 800d754:	e4ad      	b.n	800d0b2 <_dtoa_r+0x49a>
 800d756:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d758:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d7b4 <_dtoa_r+0xb9c>
 800d75c:	b11b      	cbz	r3, 800d766 <_dtoa_r+0xb4e>
 800d75e:	f10a 0308 	add.w	r3, sl, #8
 800d762:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d764:	6013      	str	r3, [r2, #0]
 800d766:	4650      	mov	r0, sl
 800d768:	b017      	add	sp, #92	@ 0x5c
 800d76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d76e:	9b07      	ldr	r3, [sp, #28]
 800d770:	2b01      	cmp	r3, #1
 800d772:	f77f ae2e 	ble.w	800d3d2 <_dtoa_r+0x7ba>
 800d776:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d778:	9308      	str	r3, [sp, #32]
 800d77a:	2001      	movs	r0, #1
 800d77c:	e64d      	b.n	800d41a <_dtoa_r+0x802>
 800d77e:	f1bb 0f00 	cmp.w	fp, #0
 800d782:	f77f aed9 	ble.w	800d538 <_dtoa_r+0x920>
 800d786:	4656      	mov	r6, sl
 800d788:	9802      	ldr	r0, [sp, #8]
 800d78a:	4621      	mov	r1, r4
 800d78c:	f7ff f9ba 	bl	800cb04 <quorem>
 800d790:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d794:	f806 3b01 	strb.w	r3, [r6], #1
 800d798:	eba6 020a 	sub.w	r2, r6, sl
 800d79c:	4593      	cmp	fp, r2
 800d79e:	ddb4      	ble.n	800d70a <_dtoa_r+0xaf2>
 800d7a0:	9902      	ldr	r1, [sp, #8]
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	220a      	movs	r2, #10
 800d7a6:	4648      	mov	r0, r9
 800d7a8:	f000 f968 	bl	800da7c <__multadd>
 800d7ac:	9002      	str	r0, [sp, #8]
 800d7ae:	e7eb      	b.n	800d788 <_dtoa_r+0xb70>
 800d7b0:	0800e97c 	.word	0x0800e97c
 800d7b4:	0800e917 	.word	0x0800e917

0800d7b8 <_free_r>:
 800d7b8:	b538      	push	{r3, r4, r5, lr}
 800d7ba:	4605      	mov	r5, r0
 800d7bc:	2900      	cmp	r1, #0
 800d7be:	d041      	beq.n	800d844 <_free_r+0x8c>
 800d7c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7c4:	1f0c      	subs	r4, r1, #4
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	bfb8      	it	lt
 800d7ca:	18e4      	addlt	r4, r4, r3
 800d7cc:	f000 f8e8 	bl	800d9a0 <__malloc_lock>
 800d7d0:	4a1d      	ldr	r2, [pc, #116]	@ (800d848 <_free_r+0x90>)
 800d7d2:	6813      	ldr	r3, [r2, #0]
 800d7d4:	b933      	cbnz	r3, 800d7e4 <_free_r+0x2c>
 800d7d6:	6063      	str	r3, [r4, #4]
 800d7d8:	6014      	str	r4, [r2, #0]
 800d7da:	4628      	mov	r0, r5
 800d7dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7e0:	f000 b8e4 	b.w	800d9ac <__malloc_unlock>
 800d7e4:	42a3      	cmp	r3, r4
 800d7e6:	d908      	bls.n	800d7fa <_free_r+0x42>
 800d7e8:	6820      	ldr	r0, [r4, #0]
 800d7ea:	1821      	adds	r1, r4, r0
 800d7ec:	428b      	cmp	r3, r1
 800d7ee:	bf01      	itttt	eq
 800d7f0:	6819      	ldreq	r1, [r3, #0]
 800d7f2:	685b      	ldreq	r3, [r3, #4]
 800d7f4:	1809      	addeq	r1, r1, r0
 800d7f6:	6021      	streq	r1, [r4, #0]
 800d7f8:	e7ed      	b.n	800d7d6 <_free_r+0x1e>
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	b10b      	cbz	r3, 800d804 <_free_r+0x4c>
 800d800:	42a3      	cmp	r3, r4
 800d802:	d9fa      	bls.n	800d7fa <_free_r+0x42>
 800d804:	6811      	ldr	r1, [r2, #0]
 800d806:	1850      	adds	r0, r2, r1
 800d808:	42a0      	cmp	r0, r4
 800d80a:	d10b      	bne.n	800d824 <_free_r+0x6c>
 800d80c:	6820      	ldr	r0, [r4, #0]
 800d80e:	4401      	add	r1, r0
 800d810:	1850      	adds	r0, r2, r1
 800d812:	4283      	cmp	r3, r0
 800d814:	6011      	str	r1, [r2, #0]
 800d816:	d1e0      	bne.n	800d7da <_free_r+0x22>
 800d818:	6818      	ldr	r0, [r3, #0]
 800d81a:	685b      	ldr	r3, [r3, #4]
 800d81c:	6053      	str	r3, [r2, #4]
 800d81e:	4408      	add	r0, r1
 800d820:	6010      	str	r0, [r2, #0]
 800d822:	e7da      	b.n	800d7da <_free_r+0x22>
 800d824:	d902      	bls.n	800d82c <_free_r+0x74>
 800d826:	230c      	movs	r3, #12
 800d828:	602b      	str	r3, [r5, #0]
 800d82a:	e7d6      	b.n	800d7da <_free_r+0x22>
 800d82c:	6820      	ldr	r0, [r4, #0]
 800d82e:	1821      	adds	r1, r4, r0
 800d830:	428b      	cmp	r3, r1
 800d832:	bf04      	itt	eq
 800d834:	6819      	ldreq	r1, [r3, #0]
 800d836:	685b      	ldreq	r3, [r3, #4]
 800d838:	6063      	str	r3, [r4, #4]
 800d83a:	bf04      	itt	eq
 800d83c:	1809      	addeq	r1, r1, r0
 800d83e:	6021      	streq	r1, [r4, #0]
 800d840:	6054      	str	r4, [r2, #4]
 800d842:	e7ca      	b.n	800d7da <_free_r+0x22>
 800d844:	bd38      	pop	{r3, r4, r5, pc}
 800d846:	bf00      	nop
 800d848:	20003030 	.word	0x20003030

0800d84c <malloc>:
 800d84c:	4b02      	ldr	r3, [pc, #8]	@ (800d858 <malloc+0xc>)
 800d84e:	4601      	mov	r1, r0
 800d850:	6818      	ldr	r0, [r3, #0]
 800d852:	f000 b825 	b.w	800d8a0 <_malloc_r>
 800d856:	bf00      	nop
 800d858:	2000007c 	.word	0x2000007c

0800d85c <sbrk_aligned>:
 800d85c:	b570      	push	{r4, r5, r6, lr}
 800d85e:	4e0f      	ldr	r6, [pc, #60]	@ (800d89c <sbrk_aligned+0x40>)
 800d860:	460c      	mov	r4, r1
 800d862:	6831      	ldr	r1, [r6, #0]
 800d864:	4605      	mov	r5, r0
 800d866:	b911      	cbnz	r1, 800d86e <sbrk_aligned+0x12>
 800d868:	f000 fea4 	bl	800e5b4 <_sbrk_r>
 800d86c:	6030      	str	r0, [r6, #0]
 800d86e:	4621      	mov	r1, r4
 800d870:	4628      	mov	r0, r5
 800d872:	f000 fe9f 	bl	800e5b4 <_sbrk_r>
 800d876:	1c43      	adds	r3, r0, #1
 800d878:	d103      	bne.n	800d882 <sbrk_aligned+0x26>
 800d87a:	f04f 34ff 	mov.w	r4, #4294967295
 800d87e:	4620      	mov	r0, r4
 800d880:	bd70      	pop	{r4, r5, r6, pc}
 800d882:	1cc4      	adds	r4, r0, #3
 800d884:	f024 0403 	bic.w	r4, r4, #3
 800d888:	42a0      	cmp	r0, r4
 800d88a:	d0f8      	beq.n	800d87e <sbrk_aligned+0x22>
 800d88c:	1a21      	subs	r1, r4, r0
 800d88e:	4628      	mov	r0, r5
 800d890:	f000 fe90 	bl	800e5b4 <_sbrk_r>
 800d894:	3001      	adds	r0, #1
 800d896:	d1f2      	bne.n	800d87e <sbrk_aligned+0x22>
 800d898:	e7ef      	b.n	800d87a <sbrk_aligned+0x1e>
 800d89a:	bf00      	nop
 800d89c:	2000302c 	.word	0x2000302c

0800d8a0 <_malloc_r>:
 800d8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8a4:	1ccd      	adds	r5, r1, #3
 800d8a6:	f025 0503 	bic.w	r5, r5, #3
 800d8aa:	3508      	adds	r5, #8
 800d8ac:	2d0c      	cmp	r5, #12
 800d8ae:	bf38      	it	cc
 800d8b0:	250c      	movcc	r5, #12
 800d8b2:	2d00      	cmp	r5, #0
 800d8b4:	4606      	mov	r6, r0
 800d8b6:	db01      	blt.n	800d8bc <_malloc_r+0x1c>
 800d8b8:	42a9      	cmp	r1, r5
 800d8ba:	d904      	bls.n	800d8c6 <_malloc_r+0x26>
 800d8bc:	230c      	movs	r3, #12
 800d8be:	6033      	str	r3, [r6, #0]
 800d8c0:	2000      	movs	r0, #0
 800d8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d99c <_malloc_r+0xfc>
 800d8ca:	f000 f869 	bl	800d9a0 <__malloc_lock>
 800d8ce:	f8d8 3000 	ldr.w	r3, [r8]
 800d8d2:	461c      	mov	r4, r3
 800d8d4:	bb44      	cbnz	r4, 800d928 <_malloc_r+0x88>
 800d8d6:	4629      	mov	r1, r5
 800d8d8:	4630      	mov	r0, r6
 800d8da:	f7ff ffbf 	bl	800d85c <sbrk_aligned>
 800d8de:	1c43      	adds	r3, r0, #1
 800d8e0:	4604      	mov	r4, r0
 800d8e2:	d158      	bne.n	800d996 <_malloc_r+0xf6>
 800d8e4:	f8d8 4000 	ldr.w	r4, [r8]
 800d8e8:	4627      	mov	r7, r4
 800d8ea:	2f00      	cmp	r7, #0
 800d8ec:	d143      	bne.n	800d976 <_malloc_r+0xd6>
 800d8ee:	2c00      	cmp	r4, #0
 800d8f0:	d04b      	beq.n	800d98a <_malloc_r+0xea>
 800d8f2:	6823      	ldr	r3, [r4, #0]
 800d8f4:	4639      	mov	r1, r7
 800d8f6:	4630      	mov	r0, r6
 800d8f8:	eb04 0903 	add.w	r9, r4, r3
 800d8fc:	f000 fe5a 	bl	800e5b4 <_sbrk_r>
 800d900:	4581      	cmp	r9, r0
 800d902:	d142      	bne.n	800d98a <_malloc_r+0xea>
 800d904:	6821      	ldr	r1, [r4, #0]
 800d906:	1a6d      	subs	r5, r5, r1
 800d908:	4629      	mov	r1, r5
 800d90a:	4630      	mov	r0, r6
 800d90c:	f7ff ffa6 	bl	800d85c <sbrk_aligned>
 800d910:	3001      	adds	r0, #1
 800d912:	d03a      	beq.n	800d98a <_malloc_r+0xea>
 800d914:	6823      	ldr	r3, [r4, #0]
 800d916:	442b      	add	r3, r5
 800d918:	6023      	str	r3, [r4, #0]
 800d91a:	f8d8 3000 	ldr.w	r3, [r8]
 800d91e:	685a      	ldr	r2, [r3, #4]
 800d920:	bb62      	cbnz	r2, 800d97c <_malloc_r+0xdc>
 800d922:	f8c8 7000 	str.w	r7, [r8]
 800d926:	e00f      	b.n	800d948 <_malloc_r+0xa8>
 800d928:	6822      	ldr	r2, [r4, #0]
 800d92a:	1b52      	subs	r2, r2, r5
 800d92c:	d420      	bmi.n	800d970 <_malloc_r+0xd0>
 800d92e:	2a0b      	cmp	r2, #11
 800d930:	d917      	bls.n	800d962 <_malloc_r+0xc2>
 800d932:	1961      	adds	r1, r4, r5
 800d934:	42a3      	cmp	r3, r4
 800d936:	6025      	str	r5, [r4, #0]
 800d938:	bf18      	it	ne
 800d93a:	6059      	strne	r1, [r3, #4]
 800d93c:	6863      	ldr	r3, [r4, #4]
 800d93e:	bf08      	it	eq
 800d940:	f8c8 1000 	streq.w	r1, [r8]
 800d944:	5162      	str	r2, [r4, r5]
 800d946:	604b      	str	r3, [r1, #4]
 800d948:	4630      	mov	r0, r6
 800d94a:	f000 f82f 	bl	800d9ac <__malloc_unlock>
 800d94e:	f104 000b 	add.w	r0, r4, #11
 800d952:	1d23      	adds	r3, r4, #4
 800d954:	f020 0007 	bic.w	r0, r0, #7
 800d958:	1ac2      	subs	r2, r0, r3
 800d95a:	bf1c      	itt	ne
 800d95c:	1a1b      	subne	r3, r3, r0
 800d95e:	50a3      	strne	r3, [r4, r2]
 800d960:	e7af      	b.n	800d8c2 <_malloc_r+0x22>
 800d962:	6862      	ldr	r2, [r4, #4]
 800d964:	42a3      	cmp	r3, r4
 800d966:	bf0c      	ite	eq
 800d968:	f8c8 2000 	streq.w	r2, [r8]
 800d96c:	605a      	strne	r2, [r3, #4]
 800d96e:	e7eb      	b.n	800d948 <_malloc_r+0xa8>
 800d970:	4623      	mov	r3, r4
 800d972:	6864      	ldr	r4, [r4, #4]
 800d974:	e7ae      	b.n	800d8d4 <_malloc_r+0x34>
 800d976:	463c      	mov	r4, r7
 800d978:	687f      	ldr	r7, [r7, #4]
 800d97a:	e7b6      	b.n	800d8ea <_malloc_r+0x4a>
 800d97c:	461a      	mov	r2, r3
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	42a3      	cmp	r3, r4
 800d982:	d1fb      	bne.n	800d97c <_malloc_r+0xdc>
 800d984:	2300      	movs	r3, #0
 800d986:	6053      	str	r3, [r2, #4]
 800d988:	e7de      	b.n	800d948 <_malloc_r+0xa8>
 800d98a:	230c      	movs	r3, #12
 800d98c:	6033      	str	r3, [r6, #0]
 800d98e:	4630      	mov	r0, r6
 800d990:	f000 f80c 	bl	800d9ac <__malloc_unlock>
 800d994:	e794      	b.n	800d8c0 <_malloc_r+0x20>
 800d996:	6005      	str	r5, [r0, #0]
 800d998:	e7d6      	b.n	800d948 <_malloc_r+0xa8>
 800d99a:	bf00      	nop
 800d99c:	20003030 	.word	0x20003030

0800d9a0 <__malloc_lock>:
 800d9a0:	4801      	ldr	r0, [pc, #4]	@ (800d9a8 <__malloc_lock+0x8>)
 800d9a2:	f7ff b880 	b.w	800caa6 <__retarget_lock_acquire_recursive>
 800d9a6:	bf00      	nop
 800d9a8:	20003028 	.word	0x20003028

0800d9ac <__malloc_unlock>:
 800d9ac:	4801      	ldr	r0, [pc, #4]	@ (800d9b4 <__malloc_unlock+0x8>)
 800d9ae:	f7ff b87b 	b.w	800caa8 <__retarget_lock_release_recursive>
 800d9b2:	bf00      	nop
 800d9b4:	20003028 	.word	0x20003028

0800d9b8 <_Balloc>:
 800d9b8:	b570      	push	{r4, r5, r6, lr}
 800d9ba:	69c6      	ldr	r6, [r0, #28]
 800d9bc:	4604      	mov	r4, r0
 800d9be:	460d      	mov	r5, r1
 800d9c0:	b976      	cbnz	r6, 800d9e0 <_Balloc+0x28>
 800d9c2:	2010      	movs	r0, #16
 800d9c4:	f7ff ff42 	bl	800d84c <malloc>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	61e0      	str	r0, [r4, #28]
 800d9cc:	b920      	cbnz	r0, 800d9d8 <_Balloc+0x20>
 800d9ce:	4b18      	ldr	r3, [pc, #96]	@ (800da30 <_Balloc+0x78>)
 800d9d0:	4818      	ldr	r0, [pc, #96]	@ (800da34 <_Balloc+0x7c>)
 800d9d2:	216b      	movs	r1, #107	@ 0x6b
 800d9d4:	f7ff f878 	bl	800cac8 <__assert_func>
 800d9d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9dc:	6006      	str	r6, [r0, #0]
 800d9de:	60c6      	str	r6, [r0, #12]
 800d9e0:	69e6      	ldr	r6, [r4, #28]
 800d9e2:	68f3      	ldr	r3, [r6, #12]
 800d9e4:	b183      	cbz	r3, 800da08 <_Balloc+0x50>
 800d9e6:	69e3      	ldr	r3, [r4, #28]
 800d9e8:	68db      	ldr	r3, [r3, #12]
 800d9ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d9ee:	b9b8      	cbnz	r0, 800da20 <_Balloc+0x68>
 800d9f0:	2101      	movs	r1, #1
 800d9f2:	fa01 f605 	lsl.w	r6, r1, r5
 800d9f6:	1d72      	adds	r2, r6, #5
 800d9f8:	0092      	lsls	r2, r2, #2
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	f000 fdf1 	bl	800e5e2 <_calloc_r>
 800da00:	b160      	cbz	r0, 800da1c <_Balloc+0x64>
 800da02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da06:	e00e      	b.n	800da26 <_Balloc+0x6e>
 800da08:	2221      	movs	r2, #33	@ 0x21
 800da0a:	2104      	movs	r1, #4
 800da0c:	4620      	mov	r0, r4
 800da0e:	f000 fde8 	bl	800e5e2 <_calloc_r>
 800da12:	69e3      	ldr	r3, [r4, #28]
 800da14:	60f0      	str	r0, [r6, #12]
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d1e4      	bne.n	800d9e6 <_Balloc+0x2e>
 800da1c:	2000      	movs	r0, #0
 800da1e:	bd70      	pop	{r4, r5, r6, pc}
 800da20:	6802      	ldr	r2, [r0, #0]
 800da22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800da26:	2300      	movs	r3, #0
 800da28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da2c:	e7f7      	b.n	800da1e <_Balloc+0x66>
 800da2e:	bf00      	nop
 800da30:	0800e838 	.word	0x0800e838
 800da34:	0800e98d 	.word	0x0800e98d

0800da38 <_Bfree>:
 800da38:	b570      	push	{r4, r5, r6, lr}
 800da3a:	69c6      	ldr	r6, [r0, #28]
 800da3c:	4605      	mov	r5, r0
 800da3e:	460c      	mov	r4, r1
 800da40:	b976      	cbnz	r6, 800da60 <_Bfree+0x28>
 800da42:	2010      	movs	r0, #16
 800da44:	f7ff ff02 	bl	800d84c <malloc>
 800da48:	4602      	mov	r2, r0
 800da4a:	61e8      	str	r0, [r5, #28]
 800da4c:	b920      	cbnz	r0, 800da58 <_Bfree+0x20>
 800da4e:	4b09      	ldr	r3, [pc, #36]	@ (800da74 <_Bfree+0x3c>)
 800da50:	4809      	ldr	r0, [pc, #36]	@ (800da78 <_Bfree+0x40>)
 800da52:	218f      	movs	r1, #143	@ 0x8f
 800da54:	f7ff f838 	bl	800cac8 <__assert_func>
 800da58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da5c:	6006      	str	r6, [r0, #0]
 800da5e:	60c6      	str	r6, [r0, #12]
 800da60:	b13c      	cbz	r4, 800da72 <_Bfree+0x3a>
 800da62:	69eb      	ldr	r3, [r5, #28]
 800da64:	6862      	ldr	r2, [r4, #4]
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da6c:	6021      	str	r1, [r4, #0]
 800da6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da72:	bd70      	pop	{r4, r5, r6, pc}
 800da74:	0800e838 	.word	0x0800e838
 800da78:	0800e98d 	.word	0x0800e98d

0800da7c <__multadd>:
 800da7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da80:	690d      	ldr	r5, [r1, #16]
 800da82:	4607      	mov	r7, r0
 800da84:	460c      	mov	r4, r1
 800da86:	461e      	mov	r6, r3
 800da88:	f101 0c14 	add.w	ip, r1, #20
 800da8c:	2000      	movs	r0, #0
 800da8e:	f8dc 3000 	ldr.w	r3, [ip]
 800da92:	b299      	uxth	r1, r3
 800da94:	fb02 6101 	mla	r1, r2, r1, r6
 800da98:	0c1e      	lsrs	r6, r3, #16
 800da9a:	0c0b      	lsrs	r3, r1, #16
 800da9c:	fb02 3306 	mla	r3, r2, r6, r3
 800daa0:	b289      	uxth	r1, r1
 800daa2:	3001      	adds	r0, #1
 800daa4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800daa8:	4285      	cmp	r5, r0
 800daaa:	f84c 1b04 	str.w	r1, [ip], #4
 800daae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dab2:	dcec      	bgt.n	800da8e <__multadd+0x12>
 800dab4:	b30e      	cbz	r6, 800dafa <__multadd+0x7e>
 800dab6:	68a3      	ldr	r3, [r4, #8]
 800dab8:	42ab      	cmp	r3, r5
 800daba:	dc19      	bgt.n	800daf0 <__multadd+0x74>
 800dabc:	6861      	ldr	r1, [r4, #4]
 800dabe:	4638      	mov	r0, r7
 800dac0:	3101      	adds	r1, #1
 800dac2:	f7ff ff79 	bl	800d9b8 <_Balloc>
 800dac6:	4680      	mov	r8, r0
 800dac8:	b928      	cbnz	r0, 800dad6 <__multadd+0x5a>
 800daca:	4602      	mov	r2, r0
 800dacc:	4b0c      	ldr	r3, [pc, #48]	@ (800db00 <__multadd+0x84>)
 800dace:	480d      	ldr	r0, [pc, #52]	@ (800db04 <__multadd+0x88>)
 800dad0:	21ba      	movs	r1, #186	@ 0xba
 800dad2:	f7fe fff9 	bl	800cac8 <__assert_func>
 800dad6:	6922      	ldr	r2, [r4, #16]
 800dad8:	3202      	adds	r2, #2
 800dada:	f104 010c 	add.w	r1, r4, #12
 800dade:	0092      	lsls	r2, r2, #2
 800dae0:	300c      	adds	r0, #12
 800dae2:	f7fe ffe2 	bl	800caaa <memcpy>
 800dae6:	4621      	mov	r1, r4
 800dae8:	4638      	mov	r0, r7
 800daea:	f7ff ffa5 	bl	800da38 <_Bfree>
 800daee:	4644      	mov	r4, r8
 800daf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800daf4:	3501      	adds	r5, #1
 800daf6:	615e      	str	r6, [r3, #20]
 800daf8:	6125      	str	r5, [r4, #16]
 800dafa:	4620      	mov	r0, r4
 800dafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db00:	0800e97c 	.word	0x0800e97c
 800db04:	0800e98d 	.word	0x0800e98d

0800db08 <__hi0bits>:
 800db08:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800db0c:	4603      	mov	r3, r0
 800db0e:	bf36      	itet	cc
 800db10:	0403      	lslcc	r3, r0, #16
 800db12:	2000      	movcs	r0, #0
 800db14:	2010      	movcc	r0, #16
 800db16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800db1a:	bf3c      	itt	cc
 800db1c:	021b      	lslcc	r3, r3, #8
 800db1e:	3008      	addcc	r0, #8
 800db20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db24:	bf3c      	itt	cc
 800db26:	011b      	lslcc	r3, r3, #4
 800db28:	3004      	addcc	r0, #4
 800db2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db2e:	bf3c      	itt	cc
 800db30:	009b      	lslcc	r3, r3, #2
 800db32:	3002      	addcc	r0, #2
 800db34:	2b00      	cmp	r3, #0
 800db36:	db05      	blt.n	800db44 <__hi0bits+0x3c>
 800db38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800db3c:	f100 0001 	add.w	r0, r0, #1
 800db40:	bf08      	it	eq
 800db42:	2020      	moveq	r0, #32
 800db44:	4770      	bx	lr

0800db46 <__lo0bits>:
 800db46:	6803      	ldr	r3, [r0, #0]
 800db48:	4602      	mov	r2, r0
 800db4a:	f013 0007 	ands.w	r0, r3, #7
 800db4e:	d00b      	beq.n	800db68 <__lo0bits+0x22>
 800db50:	07d9      	lsls	r1, r3, #31
 800db52:	d421      	bmi.n	800db98 <__lo0bits+0x52>
 800db54:	0798      	lsls	r0, r3, #30
 800db56:	bf49      	itett	mi
 800db58:	085b      	lsrmi	r3, r3, #1
 800db5a:	089b      	lsrpl	r3, r3, #2
 800db5c:	2001      	movmi	r0, #1
 800db5e:	6013      	strmi	r3, [r2, #0]
 800db60:	bf5c      	itt	pl
 800db62:	6013      	strpl	r3, [r2, #0]
 800db64:	2002      	movpl	r0, #2
 800db66:	4770      	bx	lr
 800db68:	b299      	uxth	r1, r3
 800db6a:	b909      	cbnz	r1, 800db70 <__lo0bits+0x2a>
 800db6c:	0c1b      	lsrs	r3, r3, #16
 800db6e:	2010      	movs	r0, #16
 800db70:	b2d9      	uxtb	r1, r3
 800db72:	b909      	cbnz	r1, 800db78 <__lo0bits+0x32>
 800db74:	3008      	adds	r0, #8
 800db76:	0a1b      	lsrs	r3, r3, #8
 800db78:	0719      	lsls	r1, r3, #28
 800db7a:	bf04      	itt	eq
 800db7c:	091b      	lsreq	r3, r3, #4
 800db7e:	3004      	addeq	r0, #4
 800db80:	0799      	lsls	r1, r3, #30
 800db82:	bf04      	itt	eq
 800db84:	089b      	lsreq	r3, r3, #2
 800db86:	3002      	addeq	r0, #2
 800db88:	07d9      	lsls	r1, r3, #31
 800db8a:	d403      	bmi.n	800db94 <__lo0bits+0x4e>
 800db8c:	085b      	lsrs	r3, r3, #1
 800db8e:	f100 0001 	add.w	r0, r0, #1
 800db92:	d003      	beq.n	800db9c <__lo0bits+0x56>
 800db94:	6013      	str	r3, [r2, #0]
 800db96:	4770      	bx	lr
 800db98:	2000      	movs	r0, #0
 800db9a:	4770      	bx	lr
 800db9c:	2020      	movs	r0, #32
 800db9e:	4770      	bx	lr

0800dba0 <__i2b>:
 800dba0:	b510      	push	{r4, lr}
 800dba2:	460c      	mov	r4, r1
 800dba4:	2101      	movs	r1, #1
 800dba6:	f7ff ff07 	bl	800d9b8 <_Balloc>
 800dbaa:	4602      	mov	r2, r0
 800dbac:	b928      	cbnz	r0, 800dbba <__i2b+0x1a>
 800dbae:	4b05      	ldr	r3, [pc, #20]	@ (800dbc4 <__i2b+0x24>)
 800dbb0:	4805      	ldr	r0, [pc, #20]	@ (800dbc8 <__i2b+0x28>)
 800dbb2:	f240 1145 	movw	r1, #325	@ 0x145
 800dbb6:	f7fe ff87 	bl	800cac8 <__assert_func>
 800dbba:	2301      	movs	r3, #1
 800dbbc:	6144      	str	r4, [r0, #20]
 800dbbe:	6103      	str	r3, [r0, #16]
 800dbc0:	bd10      	pop	{r4, pc}
 800dbc2:	bf00      	nop
 800dbc4:	0800e97c 	.word	0x0800e97c
 800dbc8:	0800e98d 	.word	0x0800e98d

0800dbcc <__multiply>:
 800dbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd0:	4617      	mov	r7, r2
 800dbd2:	690a      	ldr	r2, [r1, #16]
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	bfa8      	it	ge
 800dbda:	463b      	movge	r3, r7
 800dbdc:	4689      	mov	r9, r1
 800dbde:	bfa4      	itt	ge
 800dbe0:	460f      	movge	r7, r1
 800dbe2:	4699      	movge	r9, r3
 800dbe4:	693d      	ldr	r5, [r7, #16]
 800dbe6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	6879      	ldr	r1, [r7, #4]
 800dbee:	eb05 060a 	add.w	r6, r5, sl
 800dbf2:	42b3      	cmp	r3, r6
 800dbf4:	b085      	sub	sp, #20
 800dbf6:	bfb8      	it	lt
 800dbf8:	3101      	addlt	r1, #1
 800dbfa:	f7ff fedd 	bl	800d9b8 <_Balloc>
 800dbfe:	b930      	cbnz	r0, 800dc0e <__multiply+0x42>
 800dc00:	4602      	mov	r2, r0
 800dc02:	4b41      	ldr	r3, [pc, #260]	@ (800dd08 <__multiply+0x13c>)
 800dc04:	4841      	ldr	r0, [pc, #260]	@ (800dd0c <__multiply+0x140>)
 800dc06:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dc0a:	f7fe ff5d 	bl	800cac8 <__assert_func>
 800dc0e:	f100 0414 	add.w	r4, r0, #20
 800dc12:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800dc16:	4623      	mov	r3, r4
 800dc18:	2200      	movs	r2, #0
 800dc1a:	4573      	cmp	r3, lr
 800dc1c:	d320      	bcc.n	800dc60 <__multiply+0x94>
 800dc1e:	f107 0814 	add.w	r8, r7, #20
 800dc22:	f109 0114 	add.w	r1, r9, #20
 800dc26:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800dc2a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800dc2e:	9302      	str	r3, [sp, #8]
 800dc30:	1beb      	subs	r3, r5, r7
 800dc32:	3b15      	subs	r3, #21
 800dc34:	f023 0303 	bic.w	r3, r3, #3
 800dc38:	3304      	adds	r3, #4
 800dc3a:	3715      	adds	r7, #21
 800dc3c:	42bd      	cmp	r5, r7
 800dc3e:	bf38      	it	cc
 800dc40:	2304      	movcc	r3, #4
 800dc42:	9301      	str	r3, [sp, #4]
 800dc44:	9b02      	ldr	r3, [sp, #8]
 800dc46:	9103      	str	r1, [sp, #12]
 800dc48:	428b      	cmp	r3, r1
 800dc4a:	d80c      	bhi.n	800dc66 <__multiply+0x9a>
 800dc4c:	2e00      	cmp	r6, #0
 800dc4e:	dd03      	ble.n	800dc58 <__multiply+0x8c>
 800dc50:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d055      	beq.n	800dd04 <__multiply+0x138>
 800dc58:	6106      	str	r6, [r0, #16]
 800dc5a:	b005      	add	sp, #20
 800dc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc60:	f843 2b04 	str.w	r2, [r3], #4
 800dc64:	e7d9      	b.n	800dc1a <__multiply+0x4e>
 800dc66:	f8b1 a000 	ldrh.w	sl, [r1]
 800dc6a:	f1ba 0f00 	cmp.w	sl, #0
 800dc6e:	d01f      	beq.n	800dcb0 <__multiply+0xe4>
 800dc70:	46c4      	mov	ip, r8
 800dc72:	46a1      	mov	r9, r4
 800dc74:	2700      	movs	r7, #0
 800dc76:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dc7a:	f8d9 3000 	ldr.w	r3, [r9]
 800dc7e:	fa1f fb82 	uxth.w	fp, r2
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	fb0a 330b 	mla	r3, sl, fp, r3
 800dc88:	443b      	add	r3, r7
 800dc8a:	f8d9 7000 	ldr.w	r7, [r9]
 800dc8e:	0c12      	lsrs	r2, r2, #16
 800dc90:	0c3f      	lsrs	r7, r7, #16
 800dc92:	fb0a 7202 	mla	r2, sl, r2, r7
 800dc96:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dca0:	4565      	cmp	r5, ip
 800dca2:	f849 3b04 	str.w	r3, [r9], #4
 800dca6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800dcaa:	d8e4      	bhi.n	800dc76 <__multiply+0xaa>
 800dcac:	9b01      	ldr	r3, [sp, #4]
 800dcae:	50e7      	str	r7, [r4, r3]
 800dcb0:	9b03      	ldr	r3, [sp, #12]
 800dcb2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dcb6:	3104      	adds	r1, #4
 800dcb8:	f1b9 0f00 	cmp.w	r9, #0
 800dcbc:	d020      	beq.n	800dd00 <__multiply+0x134>
 800dcbe:	6823      	ldr	r3, [r4, #0]
 800dcc0:	4647      	mov	r7, r8
 800dcc2:	46a4      	mov	ip, r4
 800dcc4:	f04f 0a00 	mov.w	sl, #0
 800dcc8:	f8b7 b000 	ldrh.w	fp, [r7]
 800dccc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800dcd0:	fb09 220b 	mla	r2, r9, fp, r2
 800dcd4:	4452      	add	r2, sl
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dcdc:	f84c 3b04 	str.w	r3, [ip], #4
 800dce0:	f857 3b04 	ldr.w	r3, [r7], #4
 800dce4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dce8:	f8bc 3000 	ldrh.w	r3, [ip]
 800dcec:	fb09 330a 	mla	r3, r9, sl, r3
 800dcf0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800dcf4:	42bd      	cmp	r5, r7
 800dcf6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dcfa:	d8e5      	bhi.n	800dcc8 <__multiply+0xfc>
 800dcfc:	9a01      	ldr	r2, [sp, #4]
 800dcfe:	50a3      	str	r3, [r4, r2]
 800dd00:	3404      	adds	r4, #4
 800dd02:	e79f      	b.n	800dc44 <__multiply+0x78>
 800dd04:	3e01      	subs	r6, #1
 800dd06:	e7a1      	b.n	800dc4c <__multiply+0x80>
 800dd08:	0800e97c 	.word	0x0800e97c
 800dd0c:	0800e98d 	.word	0x0800e98d

0800dd10 <__pow5mult>:
 800dd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd14:	4615      	mov	r5, r2
 800dd16:	f012 0203 	ands.w	r2, r2, #3
 800dd1a:	4607      	mov	r7, r0
 800dd1c:	460e      	mov	r6, r1
 800dd1e:	d007      	beq.n	800dd30 <__pow5mult+0x20>
 800dd20:	4c25      	ldr	r4, [pc, #148]	@ (800ddb8 <__pow5mult+0xa8>)
 800dd22:	3a01      	subs	r2, #1
 800dd24:	2300      	movs	r3, #0
 800dd26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd2a:	f7ff fea7 	bl	800da7c <__multadd>
 800dd2e:	4606      	mov	r6, r0
 800dd30:	10ad      	asrs	r5, r5, #2
 800dd32:	d03d      	beq.n	800ddb0 <__pow5mult+0xa0>
 800dd34:	69fc      	ldr	r4, [r7, #28]
 800dd36:	b97c      	cbnz	r4, 800dd58 <__pow5mult+0x48>
 800dd38:	2010      	movs	r0, #16
 800dd3a:	f7ff fd87 	bl	800d84c <malloc>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	61f8      	str	r0, [r7, #28]
 800dd42:	b928      	cbnz	r0, 800dd50 <__pow5mult+0x40>
 800dd44:	4b1d      	ldr	r3, [pc, #116]	@ (800ddbc <__pow5mult+0xac>)
 800dd46:	481e      	ldr	r0, [pc, #120]	@ (800ddc0 <__pow5mult+0xb0>)
 800dd48:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dd4c:	f7fe febc 	bl	800cac8 <__assert_func>
 800dd50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd54:	6004      	str	r4, [r0, #0]
 800dd56:	60c4      	str	r4, [r0, #12]
 800dd58:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dd5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd60:	b94c      	cbnz	r4, 800dd76 <__pow5mult+0x66>
 800dd62:	f240 2171 	movw	r1, #625	@ 0x271
 800dd66:	4638      	mov	r0, r7
 800dd68:	f7ff ff1a 	bl	800dba0 <__i2b>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800dd72:	4604      	mov	r4, r0
 800dd74:	6003      	str	r3, [r0, #0]
 800dd76:	f04f 0900 	mov.w	r9, #0
 800dd7a:	07eb      	lsls	r3, r5, #31
 800dd7c:	d50a      	bpl.n	800dd94 <__pow5mult+0x84>
 800dd7e:	4631      	mov	r1, r6
 800dd80:	4622      	mov	r2, r4
 800dd82:	4638      	mov	r0, r7
 800dd84:	f7ff ff22 	bl	800dbcc <__multiply>
 800dd88:	4631      	mov	r1, r6
 800dd8a:	4680      	mov	r8, r0
 800dd8c:	4638      	mov	r0, r7
 800dd8e:	f7ff fe53 	bl	800da38 <_Bfree>
 800dd92:	4646      	mov	r6, r8
 800dd94:	106d      	asrs	r5, r5, #1
 800dd96:	d00b      	beq.n	800ddb0 <__pow5mult+0xa0>
 800dd98:	6820      	ldr	r0, [r4, #0]
 800dd9a:	b938      	cbnz	r0, 800ddac <__pow5mult+0x9c>
 800dd9c:	4622      	mov	r2, r4
 800dd9e:	4621      	mov	r1, r4
 800dda0:	4638      	mov	r0, r7
 800dda2:	f7ff ff13 	bl	800dbcc <__multiply>
 800dda6:	6020      	str	r0, [r4, #0]
 800dda8:	f8c0 9000 	str.w	r9, [r0]
 800ddac:	4604      	mov	r4, r0
 800ddae:	e7e4      	b.n	800dd7a <__pow5mult+0x6a>
 800ddb0:	4630      	mov	r0, r6
 800ddb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddb6:	bf00      	nop
 800ddb8:	0800ea04 	.word	0x0800ea04
 800ddbc:	0800e838 	.word	0x0800e838
 800ddc0:	0800e98d 	.word	0x0800e98d

0800ddc4 <__lshift>:
 800ddc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddc8:	460c      	mov	r4, r1
 800ddca:	6849      	ldr	r1, [r1, #4]
 800ddcc:	6923      	ldr	r3, [r4, #16]
 800ddce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ddd2:	68a3      	ldr	r3, [r4, #8]
 800ddd4:	4607      	mov	r7, r0
 800ddd6:	4691      	mov	r9, r2
 800ddd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dddc:	f108 0601 	add.w	r6, r8, #1
 800dde0:	42b3      	cmp	r3, r6
 800dde2:	db0b      	blt.n	800ddfc <__lshift+0x38>
 800dde4:	4638      	mov	r0, r7
 800dde6:	f7ff fde7 	bl	800d9b8 <_Balloc>
 800ddea:	4605      	mov	r5, r0
 800ddec:	b948      	cbnz	r0, 800de02 <__lshift+0x3e>
 800ddee:	4602      	mov	r2, r0
 800ddf0:	4b28      	ldr	r3, [pc, #160]	@ (800de94 <__lshift+0xd0>)
 800ddf2:	4829      	ldr	r0, [pc, #164]	@ (800de98 <__lshift+0xd4>)
 800ddf4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ddf8:	f7fe fe66 	bl	800cac8 <__assert_func>
 800ddfc:	3101      	adds	r1, #1
 800ddfe:	005b      	lsls	r3, r3, #1
 800de00:	e7ee      	b.n	800dde0 <__lshift+0x1c>
 800de02:	2300      	movs	r3, #0
 800de04:	f100 0114 	add.w	r1, r0, #20
 800de08:	f100 0210 	add.w	r2, r0, #16
 800de0c:	4618      	mov	r0, r3
 800de0e:	4553      	cmp	r3, sl
 800de10:	db33      	blt.n	800de7a <__lshift+0xb6>
 800de12:	6920      	ldr	r0, [r4, #16]
 800de14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de18:	f104 0314 	add.w	r3, r4, #20
 800de1c:	f019 091f 	ands.w	r9, r9, #31
 800de20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de28:	d02b      	beq.n	800de82 <__lshift+0xbe>
 800de2a:	f1c9 0e20 	rsb	lr, r9, #32
 800de2e:	468a      	mov	sl, r1
 800de30:	2200      	movs	r2, #0
 800de32:	6818      	ldr	r0, [r3, #0]
 800de34:	fa00 f009 	lsl.w	r0, r0, r9
 800de38:	4310      	orrs	r0, r2
 800de3a:	f84a 0b04 	str.w	r0, [sl], #4
 800de3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800de42:	459c      	cmp	ip, r3
 800de44:	fa22 f20e 	lsr.w	r2, r2, lr
 800de48:	d8f3      	bhi.n	800de32 <__lshift+0x6e>
 800de4a:	ebac 0304 	sub.w	r3, ip, r4
 800de4e:	3b15      	subs	r3, #21
 800de50:	f023 0303 	bic.w	r3, r3, #3
 800de54:	3304      	adds	r3, #4
 800de56:	f104 0015 	add.w	r0, r4, #21
 800de5a:	4560      	cmp	r0, ip
 800de5c:	bf88      	it	hi
 800de5e:	2304      	movhi	r3, #4
 800de60:	50ca      	str	r2, [r1, r3]
 800de62:	b10a      	cbz	r2, 800de68 <__lshift+0xa4>
 800de64:	f108 0602 	add.w	r6, r8, #2
 800de68:	3e01      	subs	r6, #1
 800de6a:	4638      	mov	r0, r7
 800de6c:	612e      	str	r6, [r5, #16]
 800de6e:	4621      	mov	r1, r4
 800de70:	f7ff fde2 	bl	800da38 <_Bfree>
 800de74:	4628      	mov	r0, r5
 800de76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de7a:	f842 0f04 	str.w	r0, [r2, #4]!
 800de7e:	3301      	adds	r3, #1
 800de80:	e7c5      	b.n	800de0e <__lshift+0x4a>
 800de82:	3904      	subs	r1, #4
 800de84:	f853 2b04 	ldr.w	r2, [r3], #4
 800de88:	f841 2f04 	str.w	r2, [r1, #4]!
 800de8c:	459c      	cmp	ip, r3
 800de8e:	d8f9      	bhi.n	800de84 <__lshift+0xc0>
 800de90:	e7ea      	b.n	800de68 <__lshift+0xa4>
 800de92:	bf00      	nop
 800de94:	0800e97c 	.word	0x0800e97c
 800de98:	0800e98d 	.word	0x0800e98d

0800de9c <__mcmp>:
 800de9c:	690a      	ldr	r2, [r1, #16]
 800de9e:	4603      	mov	r3, r0
 800dea0:	6900      	ldr	r0, [r0, #16]
 800dea2:	1a80      	subs	r0, r0, r2
 800dea4:	b530      	push	{r4, r5, lr}
 800dea6:	d10e      	bne.n	800dec6 <__mcmp+0x2a>
 800dea8:	3314      	adds	r3, #20
 800deaa:	3114      	adds	r1, #20
 800deac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800deb0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800deb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800deb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800debc:	4295      	cmp	r5, r2
 800debe:	d003      	beq.n	800dec8 <__mcmp+0x2c>
 800dec0:	d205      	bcs.n	800dece <__mcmp+0x32>
 800dec2:	f04f 30ff 	mov.w	r0, #4294967295
 800dec6:	bd30      	pop	{r4, r5, pc}
 800dec8:	42a3      	cmp	r3, r4
 800deca:	d3f3      	bcc.n	800deb4 <__mcmp+0x18>
 800decc:	e7fb      	b.n	800dec6 <__mcmp+0x2a>
 800dece:	2001      	movs	r0, #1
 800ded0:	e7f9      	b.n	800dec6 <__mcmp+0x2a>
	...

0800ded4 <__mdiff>:
 800ded4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded8:	4689      	mov	r9, r1
 800deda:	4606      	mov	r6, r0
 800dedc:	4611      	mov	r1, r2
 800dede:	4648      	mov	r0, r9
 800dee0:	4614      	mov	r4, r2
 800dee2:	f7ff ffdb 	bl	800de9c <__mcmp>
 800dee6:	1e05      	subs	r5, r0, #0
 800dee8:	d112      	bne.n	800df10 <__mdiff+0x3c>
 800deea:	4629      	mov	r1, r5
 800deec:	4630      	mov	r0, r6
 800deee:	f7ff fd63 	bl	800d9b8 <_Balloc>
 800def2:	4602      	mov	r2, r0
 800def4:	b928      	cbnz	r0, 800df02 <__mdiff+0x2e>
 800def6:	4b3f      	ldr	r3, [pc, #252]	@ (800dff4 <__mdiff+0x120>)
 800def8:	f240 2137 	movw	r1, #567	@ 0x237
 800defc:	483e      	ldr	r0, [pc, #248]	@ (800dff8 <__mdiff+0x124>)
 800defe:	f7fe fde3 	bl	800cac8 <__assert_func>
 800df02:	2301      	movs	r3, #1
 800df04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df08:	4610      	mov	r0, r2
 800df0a:	b003      	add	sp, #12
 800df0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df10:	bfbc      	itt	lt
 800df12:	464b      	movlt	r3, r9
 800df14:	46a1      	movlt	r9, r4
 800df16:	4630      	mov	r0, r6
 800df18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800df1c:	bfba      	itte	lt
 800df1e:	461c      	movlt	r4, r3
 800df20:	2501      	movlt	r5, #1
 800df22:	2500      	movge	r5, #0
 800df24:	f7ff fd48 	bl	800d9b8 <_Balloc>
 800df28:	4602      	mov	r2, r0
 800df2a:	b918      	cbnz	r0, 800df34 <__mdiff+0x60>
 800df2c:	4b31      	ldr	r3, [pc, #196]	@ (800dff4 <__mdiff+0x120>)
 800df2e:	f240 2145 	movw	r1, #581	@ 0x245
 800df32:	e7e3      	b.n	800defc <__mdiff+0x28>
 800df34:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800df38:	6926      	ldr	r6, [r4, #16]
 800df3a:	60c5      	str	r5, [r0, #12]
 800df3c:	f109 0310 	add.w	r3, r9, #16
 800df40:	f109 0514 	add.w	r5, r9, #20
 800df44:	f104 0e14 	add.w	lr, r4, #20
 800df48:	f100 0b14 	add.w	fp, r0, #20
 800df4c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800df50:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800df54:	9301      	str	r3, [sp, #4]
 800df56:	46d9      	mov	r9, fp
 800df58:	f04f 0c00 	mov.w	ip, #0
 800df5c:	9b01      	ldr	r3, [sp, #4]
 800df5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800df62:	f853 af04 	ldr.w	sl, [r3, #4]!
 800df66:	9301      	str	r3, [sp, #4]
 800df68:	fa1f f38a 	uxth.w	r3, sl
 800df6c:	4619      	mov	r1, r3
 800df6e:	b283      	uxth	r3, r0
 800df70:	1acb      	subs	r3, r1, r3
 800df72:	0c00      	lsrs	r0, r0, #16
 800df74:	4463      	add	r3, ip
 800df76:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800df7a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800df7e:	b29b      	uxth	r3, r3
 800df80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800df84:	4576      	cmp	r6, lr
 800df86:	f849 3b04 	str.w	r3, [r9], #4
 800df8a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800df8e:	d8e5      	bhi.n	800df5c <__mdiff+0x88>
 800df90:	1b33      	subs	r3, r6, r4
 800df92:	3b15      	subs	r3, #21
 800df94:	f023 0303 	bic.w	r3, r3, #3
 800df98:	3415      	adds	r4, #21
 800df9a:	3304      	adds	r3, #4
 800df9c:	42a6      	cmp	r6, r4
 800df9e:	bf38      	it	cc
 800dfa0:	2304      	movcc	r3, #4
 800dfa2:	441d      	add	r5, r3
 800dfa4:	445b      	add	r3, fp
 800dfa6:	461e      	mov	r6, r3
 800dfa8:	462c      	mov	r4, r5
 800dfaa:	4544      	cmp	r4, r8
 800dfac:	d30e      	bcc.n	800dfcc <__mdiff+0xf8>
 800dfae:	f108 0103 	add.w	r1, r8, #3
 800dfb2:	1b49      	subs	r1, r1, r5
 800dfb4:	f021 0103 	bic.w	r1, r1, #3
 800dfb8:	3d03      	subs	r5, #3
 800dfba:	45a8      	cmp	r8, r5
 800dfbc:	bf38      	it	cc
 800dfbe:	2100      	movcc	r1, #0
 800dfc0:	440b      	add	r3, r1
 800dfc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dfc6:	b191      	cbz	r1, 800dfee <__mdiff+0x11a>
 800dfc8:	6117      	str	r7, [r2, #16]
 800dfca:	e79d      	b.n	800df08 <__mdiff+0x34>
 800dfcc:	f854 1b04 	ldr.w	r1, [r4], #4
 800dfd0:	46e6      	mov	lr, ip
 800dfd2:	0c08      	lsrs	r0, r1, #16
 800dfd4:	fa1c fc81 	uxtah	ip, ip, r1
 800dfd8:	4471      	add	r1, lr
 800dfda:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dfde:	b289      	uxth	r1, r1
 800dfe0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dfe4:	f846 1b04 	str.w	r1, [r6], #4
 800dfe8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dfec:	e7dd      	b.n	800dfaa <__mdiff+0xd6>
 800dfee:	3f01      	subs	r7, #1
 800dff0:	e7e7      	b.n	800dfc2 <__mdiff+0xee>
 800dff2:	bf00      	nop
 800dff4:	0800e97c 	.word	0x0800e97c
 800dff8:	0800e98d 	.word	0x0800e98d

0800dffc <__d2b>:
 800dffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e000:	460f      	mov	r7, r1
 800e002:	2101      	movs	r1, #1
 800e004:	ec59 8b10 	vmov	r8, r9, d0
 800e008:	4616      	mov	r6, r2
 800e00a:	f7ff fcd5 	bl	800d9b8 <_Balloc>
 800e00e:	4604      	mov	r4, r0
 800e010:	b930      	cbnz	r0, 800e020 <__d2b+0x24>
 800e012:	4602      	mov	r2, r0
 800e014:	4b23      	ldr	r3, [pc, #140]	@ (800e0a4 <__d2b+0xa8>)
 800e016:	4824      	ldr	r0, [pc, #144]	@ (800e0a8 <__d2b+0xac>)
 800e018:	f240 310f 	movw	r1, #783	@ 0x30f
 800e01c:	f7fe fd54 	bl	800cac8 <__assert_func>
 800e020:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e024:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e028:	b10d      	cbz	r5, 800e02e <__d2b+0x32>
 800e02a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e02e:	9301      	str	r3, [sp, #4]
 800e030:	f1b8 0300 	subs.w	r3, r8, #0
 800e034:	d023      	beq.n	800e07e <__d2b+0x82>
 800e036:	4668      	mov	r0, sp
 800e038:	9300      	str	r3, [sp, #0]
 800e03a:	f7ff fd84 	bl	800db46 <__lo0bits>
 800e03e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e042:	b1d0      	cbz	r0, 800e07a <__d2b+0x7e>
 800e044:	f1c0 0320 	rsb	r3, r0, #32
 800e048:	fa02 f303 	lsl.w	r3, r2, r3
 800e04c:	430b      	orrs	r3, r1
 800e04e:	40c2      	lsrs	r2, r0
 800e050:	6163      	str	r3, [r4, #20]
 800e052:	9201      	str	r2, [sp, #4]
 800e054:	9b01      	ldr	r3, [sp, #4]
 800e056:	61a3      	str	r3, [r4, #24]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	bf0c      	ite	eq
 800e05c:	2201      	moveq	r2, #1
 800e05e:	2202      	movne	r2, #2
 800e060:	6122      	str	r2, [r4, #16]
 800e062:	b1a5      	cbz	r5, 800e08e <__d2b+0x92>
 800e064:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e068:	4405      	add	r5, r0
 800e06a:	603d      	str	r5, [r7, #0]
 800e06c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e070:	6030      	str	r0, [r6, #0]
 800e072:	4620      	mov	r0, r4
 800e074:	b003      	add	sp, #12
 800e076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e07a:	6161      	str	r1, [r4, #20]
 800e07c:	e7ea      	b.n	800e054 <__d2b+0x58>
 800e07e:	a801      	add	r0, sp, #4
 800e080:	f7ff fd61 	bl	800db46 <__lo0bits>
 800e084:	9b01      	ldr	r3, [sp, #4]
 800e086:	6163      	str	r3, [r4, #20]
 800e088:	3020      	adds	r0, #32
 800e08a:	2201      	movs	r2, #1
 800e08c:	e7e8      	b.n	800e060 <__d2b+0x64>
 800e08e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e092:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e096:	6038      	str	r0, [r7, #0]
 800e098:	6918      	ldr	r0, [r3, #16]
 800e09a:	f7ff fd35 	bl	800db08 <__hi0bits>
 800e09e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e0a2:	e7e5      	b.n	800e070 <__d2b+0x74>
 800e0a4:	0800e97c 	.word	0x0800e97c
 800e0a8:	0800e98d 	.word	0x0800e98d

0800e0ac <__sfputc_r>:
 800e0ac:	6893      	ldr	r3, [r2, #8]
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	b410      	push	{r4}
 800e0b4:	6093      	str	r3, [r2, #8]
 800e0b6:	da08      	bge.n	800e0ca <__sfputc_r+0x1e>
 800e0b8:	6994      	ldr	r4, [r2, #24]
 800e0ba:	42a3      	cmp	r3, r4
 800e0bc:	db01      	blt.n	800e0c2 <__sfputc_r+0x16>
 800e0be:	290a      	cmp	r1, #10
 800e0c0:	d103      	bne.n	800e0ca <__sfputc_r+0x1e>
 800e0c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0c6:	f7fe bbdc 	b.w	800c882 <__swbuf_r>
 800e0ca:	6813      	ldr	r3, [r2, #0]
 800e0cc:	1c58      	adds	r0, r3, #1
 800e0ce:	6010      	str	r0, [r2, #0]
 800e0d0:	7019      	strb	r1, [r3, #0]
 800e0d2:	4608      	mov	r0, r1
 800e0d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0d8:	4770      	bx	lr

0800e0da <__sfputs_r>:
 800e0da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0dc:	4606      	mov	r6, r0
 800e0de:	460f      	mov	r7, r1
 800e0e0:	4614      	mov	r4, r2
 800e0e2:	18d5      	adds	r5, r2, r3
 800e0e4:	42ac      	cmp	r4, r5
 800e0e6:	d101      	bne.n	800e0ec <__sfputs_r+0x12>
 800e0e8:	2000      	movs	r0, #0
 800e0ea:	e007      	b.n	800e0fc <__sfputs_r+0x22>
 800e0ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0f0:	463a      	mov	r2, r7
 800e0f2:	4630      	mov	r0, r6
 800e0f4:	f7ff ffda 	bl	800e0ac <__sfputc_r>
 800e0f8:	1c43      	adds	r3, r0, #1
 800e0fa:	d1f3      	bne.n	800e0e4 <__sfputs_r+0xa>
 800e0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e100 <_vfiprintf_r>:
 800e100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e104:	460d      	mov	r5, r1
 800e106:	b09d      	sub	sp, #116	@ 0x74
 800e108:	4614      	mov	r4, r2
 800e10a:	4698      	mov	r8, r3
 800e10c:	4606      	mov	r6, r0
 800e10e:	b118      	cbz	r0, 800e118 <_vfiprintf_r+0x18>
 800e110:	6a03      	ldr	r3, [r0, #32]
 800e112:	b90b      	cbnz	r3, 800e118 <_vfiprintf_r+0x18>
 800e114:	f7fe facc 	bl	800c6b0 <__sinit>
 800e118:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e11a:	07d9      	lsls	r1, r3, #31
 800e11c:	d405      	bmi.n	800e12a <_vfiprintf_r+0x2a>
 800e11e:	89ab      	ldrh	r3, [r5, #12]
 800e120:	059a      	lsls	r2, r3, #22
 800e122:	d402      	bmi.n	800e12a <_vfiprintf_r+0x2a>
 800e124:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e126:	f7fe fcbe 	bl	800caa6 <__retarget_lock_acquire_recursive>
 800e12a:	89ab      	ldrh	r3, [r5, #12]
 800e12c:	071b      	lsls	r3, r3, #28
 800e12e:	d501      	bpl.n	800e134 <_vfiprintf_r+0x34>
 800e130:	692b      	ldr	r3, [r5, #16]
 800e132:	b99b      	cbnz	r3, 800e15c <_vfiprintf_r+0x5c>
 800e134:	4629      	mov	r1, r5
 800e136:	4630      	mov	r0, r6
 800e138:	f7fe fbe2 	bl	800c900 <__swsetup_r>
 800e13c:	b170      	cbz	r0, 800e15c <_vfiprintf_r+0x5c>
 800e13e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e140:	07dc      	lsls	r4, r3, #31
 800e142:	d504      	bpl.n	800e14e <_vfiprintf_r+0x4e>
 800e144:	f04f 30ff 	mov.w	r0, #4294967295
 800e148:	b01d      	add	sp, #116	@ 0x74
 800e14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e14e:	89ab      	ldrh	r3, [r5, #12]
 800e150:	0598      	lsls	r0, r3, #22
 800e152:	d4f7      	bmi.n	800e144 <_vfiprintf_r+0x44>
 800e154:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e156:	f7fe fca7 	bl	800caa8 <__retarget_lock_release_recursive>
 800e15a:	e7f3      	b.n	800e144 <_vfiprintf_r+0x44>
 800e15c:	2300      	movs	r3, #0
 800e15e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e160:	2320      	movs	r3, #32
 800e162:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e166:	f8cd 800c 	str.w	r8, [sp, #12]
 800e16a:	2330      	movs	r3, #48	@ 0x30
 800e16c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e31c <_vfiprintf_r+0x21c>
 800e170:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e174:	f04f 0901 	mov.w	r9, #1
 800e178:	4623      	mov	r3, r4
 800e17a:	469a      	mov	sl, r3
 800e17c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e180:	b10a      	cbz	r2, 800e186 <_vfiprintf_r+0x86>
 800e182:	2a25      	cmp	r2, #37	@ 0x25
 800e184:	d1f9      	bne.n	800e17a <_vfiprintf_r+0x7a>
 800e186:	ebba 0b04 	subs.w	fp, sl, r4
 800e18a:	d00b      	beq.n	800e1a4 <_vfiprintf_r+0xa4>
 800e18c:	465b      	mov	r3, fp
 800e18e:	4622      	mov	r2, r4
 800e190:	4629      	mov	r1, r5
 800e192:	4630      	mov	r0, r6
 800e194:	f7ff ffa1 	bl	800e0da <__sfputs_r>
 800e198:	3001      	adds	r0, #1
 800e19a:	f000 80a7 	beq.w	800e2ec <_vfiprintf_r+0x1ec>
 800e19e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1a0:	445a      	add	r2, fp
 800e1a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e1a4:	f89a 3000 	ldrb.w	r3, [sl]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	f000 809f 	beq.w	800e2ec <_vfiprintf_r+0x1ec>
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e1b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1b8:	f10a 0a01 	add.w	sl, sl, #1
 800e1bc:	9304      	str	r3, [sp, #16]
 800e1be:	9307      	str	r3, [sp, #28]
 800e1c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e1c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e1c6:	4654      	mov	r4, sl
 800e1c8:	2205      	movs	r2, #5
 800e1ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1ce:	4853      	ldr	r0, [pc, #332]	@ (800e31c <_vfiprintf_r+0x21c>)
 800e1d0:	f7f1 fffe 	bl	80001d0 <memchr>
 800e1d4:	9a04      	ldr	r2, [sp, #16]
 800e1d6:	b9d8      	cbnz	r0, 800e210 <_vfiprintf_r+0x110>
 800e1d8:	06d1      	lsls	r1, r2, #27
 800e1da:	bf44      	itt	mi
 800e1dc:	2320      	movmi	r3, #32
 800e1de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1e2:	0713      	lsls	r3, r2, #28
 800e1e4:	bf44      	itt	mi
 800e1e6:	232b      	movmi	r3, #43	@ 0x2b
 800e1e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1ec:	f89a 3000 	ldrb.w	r3, [sl]
 800e1f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1f2:	d015      	beq.n	800e220 <_vfiprintf_r+0x120>
 800e1f4:	9a07      	ldr	r2, [sp, #28]
 800e1f6:	4654      	mov	r4, sl
 800e1f8:	2000      	movs	r0, #0
 800e1fa:	f04f 0c0a 	mov.w	ip, #10
 800e1fe:	4621      	mov	r1, r4
 800e200:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e204:	3b30      	subs	r3, #48	@ 0x30
 800e206:	2b09      	cmp	r3, #9
 800e208:	d94b      	bls.n	800e2a2 <_vfiprintf_r+0x1a2>
 800e20a:	b1b0      	cbz	r0, 800e23a <_vfiprintf_r+0x13a>
 800e20c:	9207      	str	r2, [sp, #28]
 800e20e:	e014      	b.n	800e23a <_vfiprintf_r+0x13a>
 800e210:	eba0 0308 	sub.w	r3, r0, r8
 800e214:	fa09 f303 	lsl.w	r3, r9, r3
 800e218:	4313      	orrs	r3, r2
 800e21a:	9304      	str	r3, [sp, #16]
 800e21c:	46a2      	mov	sl, r4
 800e21e:	e7d2      	b.n	800e1c6 <_vfiprintf_r+0xc6>
 800e220:	9b03      	ldr	r3, [sp, #12]
 800e222:	1d19      	adds	r1, r3, #4
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	9103      	str	r1, [sp, #12]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	bfbb      	ittet	lt
 800e22c:	425b      	neglt	r3, r3
 800e22e:	f042 0202 	orrlt.w	r2, r2, #2
 800e232:	9307      	strge	r3, [sp, #28]
 800e234:	9307      	strlt	r3, [sp, #28]
 800e236:	bfb8      	it	lt
 800e238:	9204      	strlt	r2, [sp, #16]
 800e23a:	7823      	ldrb	r3, [r4, #0]
 800e23c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e23e:	d10a      	bne.n	800e256 <_vfiprintf_r+0x156>
 800e240:	7863      	ldrb	r3, [r4, #1]
 800e242:	2b2a      	cmp	r3, #42	@ 0x2a
 800e244:	d132      	bne.n	800e2ac <_vfiprintf_r+0x1ac>
 800e246:	9b03      	ldr	r3, [sp, #12]
 800e248:	1d1a      	adds	r2, r3, #4
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	9203      	str	r2, [sp, #12]
 800e24e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e252:	3402      	adds	r4, #2
 800e254:	9305      	str	r3, [sp, #20]
 800e256:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e32c <_vfiprintf_r+0x22c>
 800e25a:	7821      	ldrb	r1, [r4, #0]
 800e25c:	2203      	movs	r2, #3
 800e25e:	4650      	mov	r0, sl
 800e260:	f7f1 ffb6 	bl	80001d0 <memchr>
 800e264:	b138      	cbz	r0, 800e276 <_vfiprintf_r+0x176>
 800e266:	9b04      	ldr	r3, [sp, #16]
 800e268:	eba0 000a 	sub.w	r0, r0, sl
 800e26c:	2240      	movs	r2, #64	@ 0x40
 800e26e:	4082      	lsls	r2, r0
 800e270:	4313      	orrs	r3, r2
 800e272:	3401      	adds	r4, #1
 800e274:	9304      	str	r3, [sp, #16]
 800e276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e27a:	4829      	ldr	r0, [pc, #164]	@ (800e320 <_vfiprintf_r+0x220>)
 800e27c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e280:	2206      	movs	r2, #6
 800e282:	f7f1 ffa5 	bl	80001d0 <memchr>
 800e286:	2800      	cmp	r0, #0
 800e288:	d03f      	beq.n	800e30a <_vfiprintf_r+0x20a>
 800e28a:	4b26      	ldr	r3, [pc, #152]	@ (800e324 <_vfiprintf_r+0x224>)
 800e28c:	bb1b      	cbnz	r3, 800e2d6 <_vfiprintf_r+0x1d6>
 800e28e:	9b03      	ldr	r3, [sp, #12]
 800e290:	3307      	adds	r3, #7
 800e292:	f023 0307 	bic.w	r3, r3, #7
 800e296:	3308      	adds	r3, #8
 800e298:	9303      	str	r3, [sp, #12]
 800e29a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e29c:	443b      	add	r3, r7
 800e29e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2a0:	e76a      	b.n	800e178 <_vfiprintf_r+0x78>
 800e2a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2a6:	460c      	mov	r4, r1
 800e2a8:	2001      	movs	r0, #1
 800e2aa:	e7a8      	b.n	800e1fe <_vfiprintf_r+0xfe>
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	3401      	adds	r4, #1
 800e2b0:	9305      	str	r3, [sp, #20]
 800e2b2:	4619      	mov	r1, r3
 800e2b4:	f04f 0c0a 	mov.w	ip, #10
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2be:	3a30      	subs	r2, #48	@ 0x30
 800e2c0:	2a09      	cmp	r2, #9
 800e2c2:	d903      	bls.n	800e2cc <_vfiprintf_r+0x1cc>
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d0c6      	beq.n	800e256 <_vfiprintf_r+0x156>
 800e2c8:	9105      	str	r1, [sp, #20]
 800e2ca:	e7c4      	b.n	800e256 <_vfiprintf_r+0x156>
 800e2cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2d0:	4604      	mov	r4, r0
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	e7f0      	b.n	800e2b8 <_vfiprintf_r+0x1b8>
 800e2d6:	ab03      	add	r3, sp, #12
 800e2d8:	9300      	str	r3, [sp, #0]
 800e2da:	462a      	mov	r2, r5
 800e2dc:	4b12      	ldr	r3, [pc, #72]	@ (800e328 <_vfiprintf_r+0x228>)
 800e2de:	a904      	add	r1, sp, #16
 800e2e0:	4630      	mov	r0, r6
 800e2e2:	f7fd fda3 	bl	800be2c <_printf_float>
 800e2e6:	4607      	mov	r7, r0
 800e2e8:	1c78      	adds	r0, r7, #1
 800e2ea:	d1d6      	bne.n	800e29a <_vfiprintf_r+0x19a>
 800e2ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2ee:	07d9      	lsls	r1, r3, #31
 800e2f0:	d405      	bmi.n	800e2fe <_vfiprintf_r+0x1fe>
 800e2f2:	89ab      	ldrh	r3, [r5, #12]
 800e2f4:	059a      	lsls	r2, r3, #22
 800e2f6:	d402      	bmi.n	800e2fe <_vfiprintf_r+0x1fe>
 800e2f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2fa:	f7fe fbd5 	bl	800caa8 <__retarget_lock_release_recursive>
 800e2fe:	89ab      	ldrh	r3, [r5, #12]
 800e300:	065b      	lsls	r3, r3, #25
 800e302:	f53f af1f 	bmi.w	800e144 <_vfiprintf_r+0x44>
 800e306:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e308:	e71e      	b.n	800e148 <_vfiprintf_r+0x48>
 800e30a:	ab03      	add	r3, sp, #12
 800e30c:	9300      	str	r3, [sp, #0]
 800e30e:	462a      	mov	r2, r5
 800e310:	4b05      	ldr	r3, [pc, #20]	@ (800e328 <_vfiprintf_r+0x228>)
 800e312:	a904      	add	r1, sp, #16
 800e314:	4630      	mov	r0, r6
 800e316:	f7fe f821 	bl	800c35c <_printf_i>
 800e31a:	e7e4      	b.n	800e2e6 <_vfiprintf_r+0x1e6>
 800e31c:	0800e9e6 	.word	0x0800e9e6
 800e320:	0800e9f0 	.word	0x0800e9f0
 800e324:	0800be2d 	.word	0x0800be2d
 800e328:	0800e0db 	.word	0x0800e0db
 800e32c:	0800e9ec 	.word	0x0800e9ec

0800e330 <__sflush_r>:
 800e330:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e338:	0716      	lsls	r6, r2, #28
 800e33a:	4605      	mov	r5, r0
 800e33c:	460c      	mov	r4, r1
 800e33e:	d454      	bmi.n	800e3ea <__sflush_r+0xba>
 800e340:	684b      	ldr	r3, [r1, #4]
 800e342:	2b00      	cmp	r3, #0
 800e344:	dc02      	bgt.n	800e34c <__sflush_r+0x1c>
 800e346:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e348:	2b00      	cmp	r3, #0
 800e34a:	dd48      	ble.n	800e3de <__sflush_r+0xae>
 800e34c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e34e:	2e00      	cmp	r6, #0
 800e350:	d045      	beq.n	800e3de <__sflush_r+0xae>
 800e352:	2300      	movs	r3, #0
 800e354:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e358:	682f      	ldr	r7, [r5, #0]
 800e35a:	6a21      	ldr	r1, [r4, #32]
 800e35c:	602b      	str	r3, [r5, #0]
 800e35e:	d030      	beq.n	800e3c2 <__sflush_r+0x92>
 800e360:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e362:	89a3      	ldrh	r3, [r4, #12]
 800e364:	0759      	lsls	r1, r3, #29
 800e366:	d505      	bpl.n	800e374 <__sflush_r+0x44>
 800e368:	6863      	ldr	r3, [r4, #4]
 800e36a:	1ad2      	subs	r2, r2, r3
 800e36c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e36e:	b10b      	cbz	r3, 800e374 <__sflush_r+0x44>
 800e370:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e372:	1ad2      	subs	r2, r2, r3
 800e374:	2300      	movs	r3, #0
 800e376:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e378:	6a21      	ldr	r1, [r4, #32]
 800e37a:	4628      	mov	r0, r5
 800e37c:	47b0      	blx	r6
 800e37e:	1c43      	adds	r3, r0, #1
 800e380:	89a3      	ldrh	r3, [r4, #12]
 800e382:	d106      	bne.n	800e392 <__sflush_r+0x62>
 800e384:	6829      	ldr	r1, [r5, #0]
 800e386:	291d      	cmp	r1, #29
 800e388:	d82b      	bhi.n	800e3e2 <__sflush_r+0xb2>
 800e38a:	4a2a      	ldr	r2, [pc, #168]	@ (800e434 <__sflush_r+0x104>)
 800e38c:	40ca      	lsrs	r2, r1
 800e38e:	07d6      	lsls	r6, r2, #31
 800e390:	d527      	bpl.n	800e3e2 <__sflush_r+0xb2>
 800e392:	2200      	movs	r2, #0
 800e394:	6062      	str	r2, [r4, #4]
 800e396:	04d9      	lsls	r1, r3, #19
 800e398:	6922      	ldr	r2, [r4, #16]
 800e39a:	6022      	str	r2, [r4, #0]
 800e39c:	d504      	bpl.n	800e3a8 <__sflush_r+0x78>
 800e39e:	1c42      	adds	r2, r0, #1
 800e3a0:	d101      	bne.n	800e3a6 <__sflush_r+0x76>
 800e3a2:	682b      	ldr	r3, [r5, #0]
 800e3a4:	b903      	cbnz	r3, 800e3a8 <__sflush_r+0x78>
 800e3a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800e3a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e3aa:	602f      	str	r7, [r5, #0]
 800e3ac:	b1b9      	cbz	r1, 800e3de <__sflush_r+0xae>
 800e3ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e3b2:	4299      	cmp	r1, r3
 800e3b4:	d002      	beq.n	800e3bc <__sflush_r+0x8c>
 800e3b6:	4628      	mov	r0, r5
 800e3b8:	f7ff f9fe 	bl	800d7b8 <_free_r>
 800e3bc:	2300      	movs	r3, #0
 800e3be:	6363      	str	r3, [r4, #52]	@ 0x34
 800e3c0:	e00d      	b.n	800e3de <__sflush_r+0xae>
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	4628      	mov	r0, r5
 800e3c6:	47b0      	blx	r6
 800e3c8:	4602      	mov	r2, r0
 800e3ca:	1c50      	adds	r0, r2, #1
 800e3cc:	d1c9      	bne.n	800e362 <__sflush_r+0x32>
 800e3ce:	682b      	ldr	r3, [r5, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d0c6      	beq.n	800e362 <__sflush_r+0x32>
 800e3d4:	2b1d      	cmp	r3, #29
 800e3d6:	d001      	beq.n	800e3dc <__sflush_r+0xac>
 800e3d8:	2b16      	cmp	r3, #22
 800e3da:	d11e      	bne.n	800e41a <__sflush_r+0xea>
 800e3dc:	602f      	str	r7, [r5, #0]
 800e3de:	2000      	movs	r0, #0
 800e3e0:	e022      	b.n	800e428 <__sflush_r+0xf8>
 800e3e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3e6:	b21b      	sxth	r3, r3
 800e3e8:	e01b      	b.n	800e422 <__sflush_r+0xf2>
 800e3ea:	690f      	ldr	r7, [r1, #16]
 800e3ec:	2f00      	cmp	r7, #0
 800e3ee:	d0f6      	beq.n	800e3de <__sflush_r+0xae>
 800e3f0:	0793      	lsls	r3, r2, #30
 800e3f2:	680e      	ldr	r6, [r1, #0]
 800e3f4:	bf08      	it	eq
 800e3f6:	694b      	ldreq	r3, [r1, #20]
 800e3f8:	600f      	str	r7, [r1, #0]
 800e3fa:	bf18      	it	ne
 800e3fc:	2300      	movne	r3, #0
 800e3fe:	eba6 0807 	sub.w	r8, r6, r7
 800e402:	608b      	str	r3, [r1, #8]
 800e404:	f1b8 0f00 	cmp.w	r8, #0
 800e408:	dde9      	ble.n	800e3de <__sflush_r+0xae>
 800e40a:	6a21      	ldr	r1, [r4, #32]
 800e40c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e40e:	4643      	mov	r3, r8
 800e410:	463a      	mov	r2, r7
 800e412:	4628      	mov	r0, r5
 800e414:	47b0      	blx	r6
 800e416:	2800      	cmp	r0, #0
 800e418:	dc08      	bgt.n	800e42c <__sflush_r+0xfc>
 800e41a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e41e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e422:	81a3      	strh	r3, [r4, #12]
 800e424:	f04f 30ff 	mov.w	r0, #4294967295
 800e428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e42c:	4407      	add	r7, r0
 800e42e:	eba8 0800 	sub.w	r8, r8, r0
 800e432:	e7e7      	b.n	800e404 <__sflush_r+0xd4>
 800e434:	20400001 	.word	0x20400001

0800e438 <_fflush_r>:
 800e438:	b538      	push	{r3, r4, r5, lr}
 800e43a:	690b      	ldr	r3, [r1, #16]
 800e43c:	4605      	mov	r5, r0
 800e43e:	460c      	mov	r4, r1
 800e440:	b913      	cbnz	r3, 800e448 <_fflush_r+0x10>
 800e442:	2500      	movs	r5, #0
 800e444:	4628      	mov	r0, r5
 800e446:	bd38      	pop	{r3, r4, r5, pc}
 800e448:	b118      	cbz	r0, 800e452 <_fflush_r+0x1a>
 800e44a:	6a03      	ldr	r3, [r0, #32]
 800e44c:	b90b      	cbnz	r3, 800e452 <_fflush_r+0x1a>
 800e44e:	f7fe f92f 	bl	800c6b0 <__sinit>
 800e452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d0f3      	beq.n	800e442 <_fflush_r+0xa>
 800e45a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e45c:	07d0      	lsls	r0, r2, #31
 800e45e:	d404      	bmi.n	800e46a <_fflush_r+0x32>
 800e460:	0599      	lsls	r1, r3, #22
 800e462:	d402      	bmi.n	800e46a <_fflush_r+0x32>
 800e464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e466:	f7fe fb1e 	bl	800caa6 <__retarget_lock_acquire_recursive>
 800e46a:	4628      	mov	r0, r5
 800e46c:	4621      	mov	r1, r4
 800e46e:	f7ff ff5f 	bl	800e330 <__sflush_r>
 800e472:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e474:	07da      	lsls	r2, r3, #31
 800e476:	4605      	mov	r5, r0
 800e478:	d4e4      	bmi.n	800e444 <_fflush_r+0xc>
 800e47a:	89a3      	ldrh	r3, [r4, #12]
 800e47c:	059b      	lsls	r3, r3, #22
 800e47e:	d4e1      	bmi.n	800e444 <_fflush_r+0xc>
 800e480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e482:	f7fe fb11 	bl	800caa8 <__retarget_lock_release_recursive>
 800e486:	e7dd      	b.n	800e444 <_fflush_r+0xc>

0800e488 <fiprintf>:
 800e488:	b40e      	push	{r1, r2, r3}
 800e48a:	b503      	push	{r0, r1, lr}
 800e48c:	4601      	mov	r1, r0
 800e48e:	ab03      	add	r3, sp, #12
 800e490:	4805      	ldr	r0, [pc, #20]	@ (800e4a8 <fiprintf+0x20>)
 800e492:	f853 2b04 	ldr.w	r2, [r3], #4
 800e496:	6800      	ldr	r0, [r0, #0]
 800e498:	9301      	str	r3, [sp, #4]
 800e49a:	f7ff fe31 	bl	800e100 <_vfiprintf_r>
 800e49e:	b002      	add	sp, #8
 800e4a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4a4:	b003      	add	sp, #12
 800e4a6:	4770      	bx	lr
 800e4a8:	2000007c 	.word	0x2000007c

0800e4ac <__swhatbuf_r>:
 800e4ac:	b570      	push	{r4, r5, r6, lr}
 800e4ae:	460c      	mov	r4, r1
 800e4b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4b4:	2900      	cmp	r1, #0
 800e4b6:	b096      	sub	sp, #88	@ 0x58
 800e4b8:	4615      	mov	r5, r2
 800e4ba:	461e      	mov	r6, r3
 800e4bc:	da0d      	bge.n	800e4da <__swhatbuf_r+0x2e>
 800e4be:	89a3      	ldrh	r3, [r4, #12]
 800e4c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e4c4:	f04f 0100 	mov.w	r1, #0
 800e4c8:	bf14      	ite	ne
 800e4ca:	2340      	movne	r3, #64	@ 0x40
 800e4cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e4d0:	2000      	movs	r0, #0
 800e4d2:	6031      	str	r1, [r6, #0]
 800e4d4:	602b      	str	r3, [r5, #0]
 800e4d6:	b016      	add	sp, #88	@ 0x58
 800e4d8:	bd70      	pop	{r4, r5, r6, pc}
 800e4da:	466a      	mov	r2, sp
 800e4dc:	f000 f848 	bl	800e570 <_fstat_r>
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	dbec      	blt.n	800e4be <__swhatbuf_r+0x12>
 800e4e4:	9901      	ldr	r1, [sp, #4]
 800e4e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e4ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e4ee:	4259      	negs	r1, r3
 800e4f0:	4159      	adcs	r1, r3
 800e4f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e4f6:	e7eb      	b.n	800e4d0 <__swhatbuf_r+0x24>

0800e4f8 <__smakebuf_r>:
 800e4f8:	898b      	ldrh	r3, [r1, #12]
 800e4fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4fc:	079d      	lsls	r5, r3, #30
 800e4fe:	4606      	mov	r6, r0
 800e500:	460c      	mov	r4, r1
 800e502:	d507      	bpl.n	800e514 <__smakebuf_r+0x1c>
 800e504:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e508:	6023      	str	r3, [r4, #0]
 800e50a:	6123      	str	r3, [r4, #16]
 800e50c:	2301      	movs	r3, #1
 800e50e:	6163      	str	r3, [r4, #20]
 800e510:	b003      	add	sp, #12
 800e512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e514:	ab01      	add	r3, sp, #4
 800e516:	466a      	mov	r2, sp
 800e518:	f7ff ffc8 	bl	800e4ac <__swhatbuf_r>
 800e51c:	9f00      	ldr	r7, [sp, #0]
 800e51e:	4605      	mov	r5, r0
 800e520:	4639      	mov	r1, r7
 800e522:	4630      	mov	r0, r6
 800e524:	f7ff f9bc 	bl	800d8a0 <_malloc_r>
 800e528:	b948      	cbnz	r0, 800e53e <__smakebuf_r+0x46>
 800e52a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e52e:	059a      	lsls	r2, r3, #22
 800e530:	d4ee      	bmi.n	800e510 <__smakebuf_r+0x18>
 800e532:	f023 0303 	bic.w	r3, r3, #3
 800e536:	f043 0302 	orr.w	r3, r3, #2
 800e53a:	81a3      	strh	r3, [r4, #12]
 800e53c:	e7e2      	b.n	800e504 <__smakebuf_r+0xc>
 800e53e:	89a3      	ldrh	r3, [r4, #12]
 800e540:	6020      	str	r0, [r4, #0]
 800e542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e546:	81a3      	strh	r3, [r4, #12]
 800e548:	9b01      	ldr	r3, [sp, #4]
 800e54a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e54e:	b15b      	cbz	r3, 800e568 <__smakebuf_r+0x70>
 800e550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e554:	4630      	mov	r0, r6
 800e556:	f000 f81d 	bl	800e594 <_isatty_r>
 800e55a:	b128      	cbz	r0, 800e568 <__smakebuf_r+0x70>
 800e55c:	89a3      	ldrh	r3, [r4, #12]
 800e55e:	f023 0303 	bic.w	r3, r3, #3
 800e562:	f043 0301 	orr.w	r3, r3, #1
 800e566:	81a3      	strh	r3, [r4, #12]
 800e568:	89a3      	ldrh	r3, [r4, #12]
 800e56a:	431d      	orrs	r5, r3
 800e56c:	81a5      	strh	r5, [r4, #12]
 800e56e:	e7cf      	b.n	800e510 <__smakebuf_r+0x18>

0800e570 <_fstat_r>:
 800e570:	b538      	push	{r3, r4, r5, lr}
 800e572:	4d07      	ldr	r5, [pc, #28]	@ (800e590 <_fstat_r+0x20>)
 800e574:	2300      	movs	r3, #0
 800e576:	4604      	mov	r4, r0
 800e578:	4608      	mov	r0, r1
 800e57a:	4611      	mov	r1, r2
 800e57c:	602b      	str	r3, [r5, #0]
 800e57e:	f7f4 fef5 	bl	800336c <_fstat>
 800e582:	1c43      	adds	r3, r0, #1
 800e584:	d102      	bne.n	800e58c <_fstat_r+0x1c>
 800e586:	682b      	ldr	r3, [r5, #0]
 800e588:	b103      	cbz	r3, 800e58c <_fstat_r+0x1c>
 800e58a:	6023      	str	r3, [r4, #0]
 800e58c:	bd38      	pop	{r3, r4, r5, pc}
 800e58e:	bf00      	nop
 800e590:	20003024 	.word	0x20003024

0800e594 <_isatty_r>:
 800e594:	b538      	push	{r3, r4, r5, lr}
 800e596:	4d06      	ldr	r5, [pc, #24]	@ (800e5b0 <_isatty_r+0x1c>)
 800e598:	2300      	movs	r3, #0
 800e59a:	4604      	mov	r4, r0
 800e59c:	4608      	mov	r0, r1
 800e59e:	602b      	str	r3, [r5, #0]
 800e5a0:	f7f4 fef4 	bl	800338c <_isatty>
 800e5a4:	1c43      	adds	r3, r0, #1
 800e5a6:	d102      	bne.n	800e5ae <_isatty_r+0x1a>
 800e5a8:	682b      	ldr	r3, [r5, #0]
 800e5aa:	b103      	cbz	r3, 800e5ae <_isatty_r+0x1a>
 800e5ac:	6023      	str	r3, [r4, #0]
 800e5ae:	bd38      	pop	{r3, r4, r5, pc}
 800e5b0:	20003024 	.word	0x20003024

0800e5b4 <_sbrk_r>:
 800e5b4:	b538      	push	{r3, r4, r5, lr}
 800e5b6:	4d06      	ldr	r5, [pc, #24]	@ (800e5d0 <_sbrk_r+0x1c>)
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	4604      	mov	r4, r0
 800e5bc:	4608      	mov	r0, r1
 800e5be:	602b      	str	r3, [r5, #0]
 800e5c0:	f7f4 fefc 	bl	80033bc <_sbrk>
 800e5c4:	1c43      	adds	r3, r0, #1
 800e5c6:	d102      	bne.n	800e5ce <_sbrk_r+0x1a>
 800e5c8:	682b      	ldr	r3, [r5, #0]
 800e5ca:	b103      	cbz	r3, 800e5ce <_sbrk_r+0x1a>
 800e5cc:	6023      	str	r3, [r4, #0]
 800e5ce:	bd38      	pop	{r3, r4, r5, pc}
 800e5d0:	20003024 	.word	0x20003024

0800e5d4 <abort>:
 800e5d4:	b508      	push	{r3, lr}
 800e5d6:	2006      	movs	r0, #6
 800e5d8:	f000 f85e 	bl	800e698 <raise>
 800e5dc:	2001      	movs	r0, #1
 800e5de:	f7f4 fe75 	bl	80032cc <_exit>

0800e5e2 <_calloc_r>:
 800e5e2:	b570      	push	{r4, r5, r6, lr}
 800e5e4:	fba1 5402 	umull	r5, r4, r1, r2
 800e5e8:	b934      	cbnz	r4, 800e5f8 <_calloc_r+0x16>
 800e5ea:	4629      	mov	r1, r5
 800e5ec:	f7ff f958 	bl	800d8a0 <_malloc_r>
 800e5f0:	4606      	mov	r6, r0
 800e5f2:	b928      	cbnz	r0, 800e600 <_calloc_r+0x1e>
 800e5f4:	4630      	mov	r0, r6
 800e5f6:	bd70      	pop	{r4, r5, r6, pc}
 800e5f8:	220c      	movs	r2, #12
 800e5fa:	6002      	str	r2, [r0, #0]
 800e5fc:	2600      	movs	r6, #0
 800e5fe:	e7f9      	b.n	800e5f4 <_calloc_r+0x12>
 800e600:	462a      	mov	r2, r5
 800e602:	4621      	mov	r1, r4
 800e604:	f7fe f9d2 	bl	800c9ac <memset>
 800e608:	e7f4      	b.n	800e5f4 <_calloc_r+0x12>

0800e60a <__ascii_mbtowc>:
 800e60a:	b082      	sub	sp, #8
 800e60c:	b901      	cbnz	r1, 800e610 <__ascii_mbtowc+0x6>
 800e60e:	a901      	add	r1, sp, #4
 800e610:	b142      	cbz	r2, 800e624 <__ascii_mbtowc+0x1a>
 800e612:	b14b      	cbz	r3, 800e628 <__ascii_mbtowc+0x1e>
 800e614:	7813      	ldrb	r3, [r2, #0]
 800e616:	600b      	str	r3, [r1, #0]
 800e618:	7812      	ldrb	r2, [r2, #0]
 800e61a:	1e10      	subs	r0, r2, #0
 800e61c:	bf18      	it	ne
 800e61e:	2001      	movne	r0, #1
 800e620:	b002      	add	sp, #8
 800e622:	4770      	bx	lr
 800e624:	4610      	mov	r0, r2
 800e626:	e7fb      	b.n	800e620 <__ascii_mbtowc+0x16>
 800e628:	f06f 0001 	mvn.w	r0, #1
 800e62c:	e7f8      	b.n	800e620 <__ascii_mbtowc+0x16>

0800e62e <__ascii_wctomb>:
 800e62e:	4603      	mov	r3, r0
 800e630:	4608      	mov	r0, r1
 800e632:	b141      	cbz	r1, 800e646 <__ascii_wctomb+0x18>
 800e634:	2aff      	cmp	r2, #255	@ 0xff
 800e636:	d904      	bls.n	800e642 <__ascii_wctomb+0x14>
 800e638:	228a      	movs	r2, #138	@ 0x8a
 800e63a:	601a      	str	r2, [r3, #0]
 800e63c:	f04f 30ff 	mov.w	r0, #4294967295
 800e640:	4770      	bx	lr
 800e642:	700a      	strb	r2, [r1, #0]
 800e644:	2001      	movs	r0, #1
 800e646:	4770      	bx	lr

0800e648 <_raise_r>:
 800e648:	291f      	cmp	r1, #31
 800e64a:	b538      	push	{r3, r4, r5, lr}
 800e64c:	4605      	mov	r5, r0
 800e64e:	460c      	mov	r4, r1
 800e650:	d904      	bls.n	800e65c <_raise_r+0x14>
 800e652:	2316      	movs	r3, #22
 800e654:	6003      	str	r3, [r0, #0]
 800e656:	f04f 30ff 	mov.w	r0, #4294967295
 800e65a:	bd38      	pop	{r3, r4, r5, pc}
 800e65c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e65e:	b112      	cbz	r2, 800e666 <_raise_r+0x1e>
 800e660:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e664:	b94b      	cbnz	r3, 800e67a <_raise_r+0x32>
 800e666:	4628      	mov	r0, r5
 800e668:	f000 f830 	bl	800e6cc <_getpid_r>
 800e66c:	4622      	mov	r2, r4
 800e66e:	4601      	mov	r1, r0
 800e670:	4628      	mov	r0, r5
 800e672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e676:	f000 b817 	b.w	800e6a8 <_kill_r>
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	d00a      	beq.n	800e694 <_raise_r+0x4c>
 800e67e:	1c59      	adds	r1, r3, #1
 800e680:	d103      	bne.n	800e68a <_raise_r+0x42>
 800e682:	2316      	movs	r3, #22
 800e684:	6003      	str	r3, [r0, #0]
 800e686:	2001      	movs	r0, #1
 800e688:	e7e7      	b.n	800e65a <_raise_r+0x12>
 800e68a:	2100      	movs	r1, #0
 800e68c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e690:	4620      	mov	r0, r4
 800e692:	4798      	blx	r3
 800e694:	2000      	movs	r0, #0
 800e696:	e7e0      	b.n	800e65a <_raise_r+0x12>

0800e698 <raise>:
 800e698:	4b02      	ldr	r3, [pc, #8]	@ (800e6a4 <raise+0xc>)
 800e69a:	4601      	mov	r1, r0
 800e69c:	6818      	ldr	r0, [r3, #0]
 800e69e:	f7ff bfd3 	b.w	800e648 <_raise_r>
 800e6a2:	bf00      	nop
 800e6a4:	2000007c 	.word	0x2000007c

0800e6a8 <_kill_r>:
 800e6a8:	b538      	push	{r3, r4, r5, lr}
 800e6aa:	4d07      	ldr	r5, [pc, #28]	@ (800e6c8 <_kill_r+0x20>)
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	4608      	mov	r0, r1
 800e6b2:	4611      	mov	r1, r2
 800e6b4:	602b      	str	r3, [r5, #0]
 800e6b6:	f7f4 fdf9 	bl	80032ac <_kill>
 800e6ba:	1c43      	adds	r3, r0, #1
 800e6bc:	d102      	bne.n	800e6c4 <_kill_r+0x1c>
 800e6be:	682b      	ldr	r3, [r5, #0]
 800e6c0:	b103      	cbz	r3, 800e6c4 <_kill_r+0x1c>
 800e6c2:	6023      	str	r3, [r4, #0]
 800e6c4:	bd38      	pop	{r3, r4, r5, pc}
 800e6c6:	bf00      	nop
 800e6c8:	20003024 	.word	0x20003024

0800e6cc <_getpid_r>:
 800e6cc:	f7f4 bde6 	b.w	800329c <_getpid>

0800e6d0 <_init>:
 800e6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6d2:	bf00      	nop
 800e6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6d6:	bc08      	pop	{r3}
 800e6d8:	469e      	mov	lr, r3
 800e6da:	4770      	bx	lr

0800e6dc <_fini>:
 800e6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6de:	bf00      	nop
 800e6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6e2:	bc08      	pop	{r3}
 800e6e4:	469e      	mov	lr, r3
 800e6e6:	4770      	bx	lr
