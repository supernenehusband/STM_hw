
hw4_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008704  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08008894  08008894  00009894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089fc  080089fc  0000a0a8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080089fc  080089fc  000099fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a04  08008a04  0000a0a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a04  08008a04  00009a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a08  08008a08  00009a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  08008a0c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028cc  200000a8  08008ab4  0000a0a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002974  08008ab4  0000a974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002379c  00000000  00000000  0000a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ede  00000000  00000000  0002d874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002130  00000000  00000000  00032758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019b2  00000000  00000000  00034888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000069d0  00000000  00000000  0003623a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026a95  00000000  00000000  0003cc0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d04f  00000000  00000000  0006369f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001706ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009438  00000000  00000000  00170734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00179b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800887c 	.word	0x0800887c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800887c 	.word	0x0800887c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4a06      	ldr	r2, [pc, #24]	@ (80005cc <vApplicationGetIdleTaskMemory+0x30>)
 80005b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2280      	movs	r2, #128	@ 0x80
 80005b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	200000cc 	.word	0x200000cc
 80005cc:	20000120 	.word	0x20000120

080005d0 <Send_Action>:
    aci_gatt_update_char_value(AccServiceHandle, AccCharHandle, 0, 6, notification);
}



void Send_Action(char action[], uint8_t len){
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]
	return;
 80005dc:	bf00      	nop
	aci_gatt_update_char_value(AccServiceHandle, AccCharHandle, 0, len, action);
}
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80005f0:	1d39      	adds	r1, r7, #4
 80005f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005f6:	2201      	movs	r2, #1
 80005f8:	4803      	ldr	r0, [pc, #12]	@ (8000608 <__io_putchar+0x20>)
 80005fa:	f004 ff39 	bl	8005470 <HAL_UART_Transmit>
	return ch;
 80005fe:	687b      	ldr	r3, [r7, #4]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	2000039c 	.word	0x2000039c

0800060c <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b08e      	sub	sp, #56	@ 0x38
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f001 fb4f 	bl	8001cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f83f 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f98b 	bl	8000934 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800061e:	f000 f89d 	bl	800075c <MX_DFSDM1_Init>
  //MX_I2C2_Init();
  MX_QUADSPI_Init();
 8000622:	f000 f8d3 	bl	80007cc <MX_QUADSPI_Init>
  MX_USART1_UART_Init();
 8000626:	f000 f8f7 	bl	8000818 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800062a:	f000 f925 	bl	8000878 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800062e:	f000 f953 	bl	80008d8 <MX_USB_OTG_FS_PCD_Init>
//  MX_BlueNRG_MS_Init();
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8000632:	f001 fae7 	bl	8001c04 <BSP_ACCELERO_Init>
  /* definition and creation of defaultTask */
  /*osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);*/

  /* definition and creation of myTaskBLE */
  osThreadStaticDef(myTaskBLE, StartTaskBLE, osPriorityNormal, 0, 512, myTaskBLEBuffer, &myTaskBLEControlBlock);
 8000636:	4b14      	ldr	r3, [pc, #80]	@ (8000688 <main+0x7c>)
 8000638:	f107 041c 	add.w	r4, r7, #28
 800063c:	461d      	mov	r5, r3
 800063e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000642:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTaskBLEHandle = osThreadCreate(osThread(myTaskBLE), NULL);
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f005 ff35 	bl	80064c0 <osThreadCreate>
 8000656:	4603      	mov	r3, r0
 8000658:	4a0c      	ldr	r2, [pc, #48]	@ (800068c <main+0x80>)
 800065a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTaskACC */
  osThreadStaticDef(myTaskACC, StartTaskACC, osPriorityNormal, 0, 512, myTaskACCBuffer, &myTaskACCControlBlock);
 800065c:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <main+0x84>)
 800065e:	463c      	mov	r4, r7
 8000660:	461d      	mov	r5, r3
 8000662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTaskACCHandle = osThreadCreate(osThread(myTaskACC), NULL);
 800066e:	463b      	mov	r3, r7
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f005 ff24 	bl	80064c0 <osThreadCreate>
 8000678:	4603      	mov	r3, r0
 800067a:	4a06      	ldr	r2, [pc, #24]	@ (8000694 <main+0x88>)
 800067c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800067e:	f005 ff18 	bl	80064b2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000682:	bf00      	nop
 8000684:	e7fd      	b.n	8000682 <main+0x76>
 8000686:	bf00      	nop
 8000688:	080088d4 	.word	0x080088d4
 800068c:	20000990 	.word	0x20000990
 8000690:	080088fc 	.word	0x080088fc
 8000694:	200011e8 	.word	0x200011e8

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b096      	sub	sp, #88	@ 0x58
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	2244      	movs	r2, #68	@ 0x44
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f007 fb66 	bl	8007d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	463b      	mov	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006be:	f002 ffa3 	bl	8003608 <HAL_PWREx_ControlVoltageScaling>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c8:	f000 fbf0 	bl	8000eac <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006cc:	f002 ff7e 	bl	80035cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006d0:	4b21      	ldr	r3, [pc, #132]	@ (8000758 <SystemClock_Config+0xc0>)
 80006d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006d6:	4a20      	ldr	r2, [pc, #128]	@ (8000758 <SystemClock_Config+0xc0>)
 80006d8:	f023 0318 	bic.w	r3, r3, #24
 80006dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006e0:	2314      	movs	r3, #20
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006f0:	2360      	movs	r3, #96	@ 0x60
 80006f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f4:	2302      	movs	r3, #2
 80006f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006f8:	2301      	movs	r3, #1
 80006fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000700:	2328      	movs	r3, #40	@ 0x28
 8000702:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000704:	2307      	movs	r3, #7
 8000706:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	4618      	mov	r0, r3
 8000716:	f003 f899 	bl	800384c <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000720:	f000 fbc4 	bl	8000eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000728:	2303      	movs	r3, #3
 800072a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000738:	463b      	mov	r3, r7
 800073a:	2104      	movs	r1, #4
 800073c:	4618      	mov	r0, r3
 800073e:	f003 fc61 	bl	8004004 <HAL_RCC_ClockConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000748:	f000 fbb0 	bl	8000eac <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800074c:	f004 f99a 	bl	8004a84 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000750:	bf00      	nop
 8000752:	3758      	adds	r7, #88	@ 0x58
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000

0800075c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000760:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 8000762:	4a19      	ldr	r2, [pc, #100]	@ (80007c8 <MX_DFSDM1_Init+0x6c>)
 8000764:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000766:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 8000768:	2201      	movs	r2, #1
 800076a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800076c:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000772:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 8000774:	2202      	movs	r2, #2
 8000776:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 8000786:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800078a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800078c:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000792:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 8000794:	2204      	movs	r2, #4
 8000796:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000798:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80007a4:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <MX_DFSDM1_Init+0x68>)
 80007b2:	f001 fbbd 	bl	8001f30 <HAL_DFSDM_ChannelInit>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80007bc:	f000 fb76 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000320 	.word	0x20000320
 80007c8:	40016020 	.word	0x40016020

080007cc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_QUADSPI_Init+0x44>)
 80007d2:	4a10      	ldr	r2, [pc, #64]	@ (8000814 <MX_QUADSPI_Init+0x48>)
 80007d4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_QUADSPI_Init+0x44>)
 80007d8:	2202      	movs	r2, #2
 80007da:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_QUADSPI_Init+0x44>)
 80007de:	2204      	movs	r2, #4
 80007e0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <MX_QUADSPI_Init+0x44>)
 80007e4:	2210      	movs	r2, #16
 80007e6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80007e8:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_QUADSPI_Init+0x44>)
 80007ea:	2217      	movs	r2, #23
 80007ec:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <MX_QUADSPI_Init+0x44>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_QUADSPI_Init+0x44>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_QUADSPI_Init+0x44>)
 80007fc:	f002 ff6a 	bl	80036d4 <HAL_QSPI_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000806:	f000 fb51 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000358 	.word	0x20000358
 8000814:	a0001000 	.word	0xa0001000

08000818 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800081c:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_USART1_UART_Init+0x58>)
 800081e:	4a15      	ldr	r2, [pc, #84]	@ (8000874 <MX_USART1_UART_Init+0x5c>)
 8000820:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000822:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <MX_USART1_UART_Init+0x58>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_USART1_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_USART1_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_USART1_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <MX_USART1_UART_Init+0x58>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <MX_USART1_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <MX_USART1_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084e:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <MX_USART1_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <MX_USART1_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_USART1_UART_Init+0x58>)
 800085c:	f004 fdba 	bl	80053d4 <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000866:	f000 fb21 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000039c 	.word	0x2000039c
 8000874:	40013800 	.word	0x40013800

08000878 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800087c:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <MX_USART3_UART_Init+0x58>)
 800087e:	4a15      	ldr	r2, [pc, #84]	@ (80008d4 <MX_USART3_UART_Init+0x5c>)
 8000880:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000882:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <MX_USART3_UART_Init+0x58>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <MX_USART3_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <MX_USART3_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <MX_USART3_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <MX_USART3_UART_Init+0x58>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <MX_USART3_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <MX_USART3_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <MX_USART3_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <MX_USART3_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <MX_USART3_UART_Init+0x58>)
 80008bc:	f004 fd8a 	bl	80053d4 <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008c6:	f000 faf1 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000424 	.word	0x20000424
 80008d4:	40004800 	.word	0x40004800

080008d8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008e4:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e6:	2206      	movs	r2, #6
 80008e8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f2:	2202      	movs	r2, #2
 80008f4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000908:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091c:	f002 fd23 	bl	8003366 <HAL_PCD_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000926:	f000 fac1 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200004ac 	.word	0x200004ac

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	@ 0x28
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800094a:	4bbd      	ldr	r3, [pc, #756]	@ (8000c40 <MX_GPIO_Init+0x30c>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094e:	4abc      	ldr	r2, [pc, #752]	@ (8000c40 <MX_GPIO_Init+0x30c>)
 8000950:	f043 0310 	orr.w	r3, r3, #16
 8000954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000956:	4bba      	ldr	r3, [pc, #744]	@ (8000c40 <MX_GPIO_Init+0x30c>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095a:	f003 0310 	and.w	r3, r3, #16
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	4bb7      	ldr	r3, [pc, #732]	@ (8000c40 <MX_GPIO_Init+0x30c>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000966:	4ab6      	ldr	r2, [pc, #728]	@ (8000c40 <MX_GPIO_Init+0x30c>)
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096e:	4bb4      	ldr	r3, [pc, #720]	@ (8000c40 <MX_GPIO_Init+0x30c>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000972:	f003 0304 	and.w	r3, r3, #4
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4bb1      	ldr	r3, [pc, #708]	@ (8000c40 <MX_GPIO_Init+0x30c>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097e:	4ab0      	ldr	r2, [pc, #704]	@ (8000c40 <MX_GPIO_Init+0x30c>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000986:	4bae      	ldr	r3, [pc, #696]	@ (8000c40 <MX_GPIO_Init+0x30c>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4bab      	ldr	r3, [pc, #684]	@ (8000c40 <MX_GPIO_Init+0x30c>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000996:	4aaa      	ldr	r2, [pc, #680]	@ (8000c40 <MX_GPIO_Init+0x30c>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800099e:	4ba8      	ldr	r3, [pc, #672]	@ (8000c40 <MX_GPIO_Init+0x30c>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009aa:	4ba5      	ldr	r3, [pc, #660]	@ (8000c40 <MX_GPIO_Init+0x30c>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	4aa4      	ldr	r2, [pc, #656]	@ (8000c40 <MX_GPIO_Init+0x30c>)
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b6:	4ba2      	ldr	r3, [pc, #648]	@ (8000c40 <MX_GPIO_Init+0x30c>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80009c8:	489e      	ldr	r0, [pc, #632]	@ (8000c44 <MX_GPIO_Init+0x310>)
 80009ca:	f001 fe8b 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f248 1104 	movw	r1, #33028	@ 0x8104
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d8:	f001 fe84 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 80009dc:	2200      	movs	r2, #0
 80009de:	f24b 0114 	movw	r1, #45076	@ 0xb014
 80009e2:	4899      	ldr	r0, [pc, #612]	@ (8000c48 <MX_GPIO_Init+0x314>)
 80009e4:	f001 fe7e 	bl	80026e4 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f241 0181 	movw	r1, #4225	@ 0x1081
 80009ee:	4897      	ldr	r0, [pc, #604]	@ (8000c4c <MX_GPIO_Init+0x318>)
 80009f0:	f001 fe78 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009fa:	4894      	ldr	r0, [pc, #592]	@ (8000c4c <MX_GPIO_Init+0x318>)
 80009fc:	f001 fe72 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000a06:	4892      	ldr	r0, [pc, #584]	@ (8000c50 <MX_GPIO_Init+0x31c>)
 8000a08:	f001 fe6c 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2120      	movs	r1, #32
 8000a10:	488d      	ldr	r0, [pc, #564]	@ (8000c48 <MX_GPIO_Init+0x314>)
 8000a12:	f001 fe67 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	2101      	movs	r1, #1
 8000a1a:	488a      	ldr	r0, [pc, #552]	@ (8000c44 <MX_GPIO_Init+0x310>)
 8000a1c:	f001 fe62 	bl	80026e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a20:	f240 1315 	movw	r3, #277	@ 0x115
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	4882      	ldr	r0, [pc, #520]	@ (8000c44 <MX_GPIO_Init+0x310>)
 8000a3a:	f001 fbb5 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a3e:	236a      	movs	r3, #106	@ 0x6a
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	487c      	ldr	r0, [pc, #496]	@ (8000c44 <MX_GPIO_Init+0x310>)
 8000a54:	f001 fba8 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a58:	233f      	movs	r3, #63	@ 0x3f
 8000a5a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a5c:	230b      	movs	r3, #11
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4879      	ldr	r0, [pc, #484]	@ (8000c50 <MX_GPIO_Init+0x31c>)
 8000a6c:	f001 fb9c 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a70:	2303      	movs	r3, #3
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a80:	2308      	movs	r3, #8
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8e:	f001 fb8b 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a92:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aae:	f001 fb7b 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad0:	f001 fb6a 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ad8:	230b      	movs	r3, #11
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aea:	f001 fb5d 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000aee:	23e0      	movs	r3, #224	@ 0xe0
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000afe:	2305      	movs	r3, #5
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b0c:	f001 fb4c 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b10:	2301      	movs	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b14:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	4848      	ldr	r0, [pc, #288]	@ (8000c48 <MX_GPIO_Init+0x314>)
 8000b26:	f001 fb3f 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b2e:	230b      	movs	r3, #11
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4842      	ldr	r0, [pc, #264]	@ (8000c48 <MX_GPIO_Init+0x314>)
 8000b3e:	f001 fb33 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8000b42:	f24b 0334 	movw	r3, #45108	@ 0xb034
 8000b46:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	483b      	ldr	r0, [pc, #236]	@ (8000c48 <MX_GPIO_Init+0x314>)
 8000b5c:	f001 fb24 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b60:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000b64:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b66:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4835      	ldr	r0, [pc, #212]	@ (8000c4c <MX_GPIO_Init+0x318>)
 8000b78:	f001 fb16 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b7c:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	482d      	ldr	r0, [pc, #180]	@ (8000c4c <MX_GPIO_Init+0x318>)
 8000b96:	f001 fb07 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b9a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4827      	ldr	r0, [pc, #156]	@ (8000c50 <MX_GPIO_Init+0x31c>)
 8000bb4:	f001 faf8 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000bb8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bbe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4820      	ldr	r0, [pc, #128]	@ (8000c50 <MX_GPIO_Init+0x31c>)
 8000bd0:	f001 faea 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be4:	2305      	movs	r3, #5
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	4817      	ldr	r0, [pc, #92]	@ (8000c4c <MX_GPIO_Init+0x318>)
 8000bf0:	f001 fada 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000bf4:	2378      	movs	r3, #120	@ 0x78
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c04:	2307      	movs	r3, #7
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480f      	ldr	r0, [pc, #60]	@ (8000c4c <MX_GPIO_Init+0x318>)
 8000c10:	f001 faca 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c14:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c1a:	2312      	movs	r3, #18
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c26:	2304      	movs	r3, #4
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_GPIO_Init+0x314>)
 8000c32:	f001 fab9 	bl	80021a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2105      	movs	r1, #5
 8000c3a:	2017      	movs	r0, #23
 8000c3c:	e00a      	b.n	8000c54 <MX_GPIO_Init+0x320>
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000
 8000c44:	48001000 	.word	0x48001000
 8000c48:	48000400 	.word	0x48000400
 8000c4c:	48000c00 	.word	0x48000c00
 8000c50:	48000800 	.word	0x48000800
 8000c54:	f001 f942 	bl	8001edc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c58:	2017      	movs	r0, #23
 8000c5a:	f001 f95b 	bl	8001f14 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2105      	movs	r1, #5
 8000c62:	2028      	movs	r0, #40	@ 0x28
 8000c64:	f001 f93a 	bl	8001edc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c68:	2028      	movs	r0, #40	@ 0x28
 8000c6a:	f001 f953 	bl	8001f14 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	@ 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop

08000c78 <StartTaskBLE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBLE */
void StartTaskBLE(void const * argument)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBLE */
  /* Infinite loop */
	for(;;)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <StartTaskBLE+0x8>

08000c84 <StartTaskACC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskACC */
void StartTaskACC(void const * argument)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	@ 0x30
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskACC */
	 const TickType_t ten_seconds = pdMS_TO_TICKS(10000);
 8000c8c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000c90:	623b      	str	r3, [r7, #32]
	 const TickType_t three_seconds = pdMS_TO_TICKS(3000);
 8000c92:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000c96:	61fb      	str	r3, [r7, #28]
	  uint32_t shake_count = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28

	  for(;;)
	  {

		 if (state == 1){
 8000c9c:	4b6e      	ldr	r3, [pc, #440]	@ (8000e58 <StartTaskACC+0x1d4>)
 8000c9e:	f993 3000 	ldrsb.w	r3, [r3]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d16e      	bne.n	8000d84 <StartTaskACC+0x100>
			 printf("startshake\n");
 8000ca6:	486d      	ldr	r0, [pc, #436]	@ (8000e5c <StartTaskACC+0x1d8>)
 8000ca8:	f006 ff86 	bl	8007bb8 <puts>
			 //keep doing something for 10 seconds
			 // Record start time
		   TickType_t start_tick = xTaskGetTickCount();
 8000cac:	f005 fff8 	bl	8006ca0 <xTaskGetTickCount>
 8000cb0:	6138      	str	r0, [r7, #16]
		   shake_count= 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
//		   last_button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
		   BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8000cb6:	486a      	ldr	r0, [pc, #424]	@ (8000e60 <StartTaskACC+0x1dc>)
 8000cb8:	f000 ffe4 	bl	8001c84 <BSP_ACCELERO_AccGetXYZ>
		   int16_t prev_x = pDataXYZ[0];
 8000cbc:	4b68      	ldr	r3, [pc, #416]	@ (8000e60 <StartTaskACC+0x1dc>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		   int16_t prev_y = pDataXYZ[1];
 8000cc2:	4b67      	ldr	r3, [pc, #412]	@ (8000e60 <StartTaskACC+0x1dc>)
 8000cc4:	885b      	ldrh	r3, [r3, #2]
 8000cc6:	84fb      	strh	r3, [r7, #38]	@ 0x26
		   int16_t prev_z = pDataXYZ[2];
 8000cc8:	4b65      	ldr	r3, [pc, #404]	@ (8000e60 <StartTaskACC+0x1dc>)
 8000cca:	889b      	ldrh	r3, [r3, #4]
 8000ccc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		   int16_t x = pDataXYZ[0];
 8000cce:	4b64      	ldr	r3, [pc, #400]	@ (8000e60 <StartTaskACC+0x1dc>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	81fb      	strh	r3, [r7, #14]
		   int16_t y = pDataXYZ[1];
 8000cd4:	4b62      	ldr	r3, [pc, #392]	@ (8000e60 <StartTaskACC+0x1dc>)
 8000cd6:	885b      	ldrh	r3, [r3, #2]
 8000cd8:	81bb      	strh	r3, [r7, #12]
		   int16_t z = pDataXYZ[2];
 8000cda:	4b61      	ldr	r3, [pc, #388]	@ (8000e60 <StartTaskACC+0x1dc>)
 8000cdc:	889b      	ldrh	r3, [r3, #4]
 8000cde:	817b      	strh	r3, [r7, #10]
		   while ((xTaskGetTickCount() - start_tick) < ten_seconds){
 8000ce0:	e040      	b.n	8000d64 <StartTaskACC+0xe0>
//			 last_button_state = current_button_state;
//
//			 // Small delay to avoid bouncing (basic debouncing)
////			 vTaskDelay(pdMS_TO_TICKS(50));
//			 continue;
			   osDelay(10);
 8000ce2:	200a      	movs	r0, #10
 8000ce4:	f005 fc38 	bl	8006558 <osDelay>
			   BSP_ACCELERO_AccGetXYZ(pDataXYZ); // Read accelerometer
 8000ce8:	485d      	ldr	r0, [pc, #372]	@ (8000e60 <StartTaskACC+0x1dc>)
 8000cea:	f000 ffcb 	bl	8001c84 <BSP_ACCELERO_AccGetXYZ>
			  //	    printf("I'm here\n");

//			   BSP_ACCELERO_AccGetXYZ(pDataXYZ);
			  	   x = pDataXYZ[0];
 8000cee:	4b5c      	ldr	r3, [pc, #368]	@ (8000e60 <StartTaskACC+0x1dc>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	81fb      	strh	r3, [r7, #14]
			  	   y = pDataXYZ[1];
 8000cf4:	4b5a      	ldr	r3, [pc, #360]	@ (8000e60 <StartTaskACC+0x1dc>)
 8000cf6:	885b      	ldrh	r3, [r3, #2]
 8000cf8:	81bb      	strh	r3, [r7, #12]
			  	   z = pDataXYZ[2];
 8000cfa:	4b59      	ldr	r3, [pc, #356]	@ (8000e60 <StartTaskACC+0x1dc>)
 8000cfc:	889b      	ldrh	r3, [r3, #4]
 8000cfe:	817b      	strh	r3, [r7, #10]
			  	   if ((x - prev_x)*(x-prev_x) + (y - prev_y)*(y-prev_y) + (z - prev_z)*(z-prev_z) > 500*500){
 8000d00:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000d04:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000d0e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 8000d12:	1a8a      	subs	r2, r1, r2
 8000d14:	fb03 f202 	mul.w	r2, r3, r2
 8000d18:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000d1c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000d20:	1acb      	subs	r3, r1, r3
 8000d22:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8000d26:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	@ 0x26
 8000d2a:	1a41      	subs	r1, r0, r1
 8000d2c:	fb01 f303 	mul.w	r3, r1, r3
 8000d30:	441a      	add	r2, r3
 8000d32:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000d36:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000d3a:	1acb      	subs	r3, r1, r3
 8000d3c:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8000d40:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	@ 0x24
 8000d44:	1a41      	subs	r1, r0, r1
 8000d46:	fb01 f303 	mul.w	r3, r1, r3
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a45      	ldr	r2, [pc, #276]	@ (8000e64 <StartTaskACC+0x1e0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	dd02      	ble.n	8000d58 <StartTaskACC+0xd4>
			  		   shake_count++;
 8000d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d54:	3301      	adds	r3, #1
 8000d56:	62bb      	str	r3, [r7, #40]	@ 0x28
			  	   }
			  	   prev_x = x;
 8000d58:	89fb      	ldrh	r3, [r7, #14]
 8000d5a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			  	   prev_y = y;
 8000d5c:	89bb      	ldrh	r3, [r7, #12]
 8000d5e:	84fb      	strh	r3, [r7, #38]	@ 0x26
			  	   prev_z = z;
 8000d60:	897b      	ldrh	r3, [r7, #10]
 8000d62:	84bb      	strh	r3, [r7, #36]	@ 0x24
		   while ((xTaskGetTickCount() - start_tick) < ten_seconds){
 8000d64:	f005 ff9c 	bl	8006ca0 <xTaskGetTickCount>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	6a3a      	ldr	r2, [r7, #32]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d8b6      	bhi.n	8000ce2 <StartTaskACC+0x5e>

		   }

		         // Task done
		   printf("shakes:%d\n", shake_count);
 8000d74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000d76:	483c      	ldr	r0, [pc, #240]	@ (8000e68 <StartTaskACC+0x1e4>)
 8000d78:	f006 feb6 	bl	8007ae8 <iprintf>
		         state = 1;
 8000d7c:	4b36      	ldr	r3, [pc, #216]	@ (8000e58 <StartTaskACC+0x1d4>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	701a      	strb	r2, [r3, #0]
		         continue;
 8000d82:	e067      	b.n	8000e54 <StartTaskACC+0x1d0>


		 }

//		printf("current sampling rate:%d\n", g_sample_rate);
	    BSP_ACCELERO_AccGetXYZ(pDataXYZ); // Read accelerometer
 8000d84:	4836      	ldr	r0, [pc, #216]	@ (8000e60 <StartTaskACC+0x1dc>)
 8000d86:	f000 ff7d 	bl	8001c84 <BSP_ACCELERO_AccGetXYZ>
//	    printf("I'm here\n");

	    int16_t x = pDataXYZ[0];
 8000d8a:	4b35      	ldr	r3, [pc, #212]	@ (8000e60 <StartTaskACC+0x1dc>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	837b      	strh	r3, [r7, #26]
	   int16_t y = pDataXYZ[1];
 8000d90:	4b33      	ldr	r3, [pc, #204]	@ (8000e60 <StartTaskACC+0x1dc>)
 8000d92:	885b      	ldrh	r3, [r3, #2]
 8000d94:	833b      	strh	r3, [r7, #24]
	   int16_t z = pDataXYZ[2];
 8000d96:	4b32      	ldr	r3, [pc, #200]	@ (8000e60 <StartTaskACC+0x1dc>)
 8000d98:	889b      	ldrh	r3, [r3, #4]
 8000d9a:	82fb      	strh	r3, [r7, #22]

	           if (x > x_threshold){
 8000d9c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000da0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8000da4:	4293      	cmp	r3, r2
 8000da6:	dd11      	ble.n	8000dcc <StartTaskACC+0x148>
	        	   printf("x = %d \n", x);
 8000da8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000dac:	4619      	mov	r1, r3
 8000dae:	482f      	ldr	r0, [pc, #188]	@ (8000e6c <StartTaskACC+0x1e8>)
 8000db0:	f006 fe9a 	bl	8007ae8 <iprintf>
	        	   printf("right\n");
 8000db4:	482e      	ldr	r0, [pc, #184]	@ (8000e70 <StartTaskACC+0x1ec>)
 8000db6:	f006 feff 	bl	8007bb8 <puts>
	        	   Send_Action("right", 5);
 8000dba:	2105      	movs	r1, #5
 8000dbc:	482c      	ldr	r0, [pc, #176]	@ (8000e70 <StartTaskACC+0x1ec>)
 8000dbe:	f7ff fc07 	bl	80005d0 <Send_Action>
	        	   osDelay(350);
 8000dc2:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8000dc6:	f005 fbc7 	bl	8006558 <osDelay>
 8000dca:	e015      	b.n	8000df8 <StartTaskACC+0x174>
	           }else if (x < -x_threshold){
 8000dcc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000dd0:	4a28      	ldr	r2, [pc, #160]	@ (8000e74 <StartTaskACC+0x1f0>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	da10      	bge.n	8000df8 <StartTaskACC+0x174>
	        	   printf("x = %d \n", x);
 8000dd6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4823      	ldr	r0, [pc, #140]	@ (8000e6c <StartTaskACC+0x1e8>)
 8000dde:	f006 fe83 	bl	8007ae8 <iprintf>
	               	   printf("left\n");
 8000de2:	4825      	ldr	r0, [pc, #148]	@ (8000e78 <StartTaskACC+0x1f4>)
 8000de4:	f006 fee8 	bl	8007bb8 <puts>
	               	Send_Action("left", 5);
 8000de8:	2105      	movs	r1, #5
 8000dea:	4823      	ldr	r0, [pc, #140]	@ (8000e78 <StartTaskACC+0x1f4>)
 8000dec:	f7ff fbf0 	bl	80005d0 <Send_Action>
	               	osDelay(350);
 8000df0:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8000df4:	f005 fbb0 	bl	8006558 <osDelay>
	                 }
	           if (z-g > z_threshold){
 8000df8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000dfc:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8000e00:	4293      	cmp	r3, r2
 8000e02:	dd11      	ble.n	8000e28 <StartTaskACC+0x1a4>
	              	printf("z = %d\n", z);
 8000e04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	481c      	ldr	r0, [pc, #112]	@ (8000e7c <StartTaskACC+0x1f8>)
 8000e0c:	f006 fe6c 	bl	8007ae8 <iprintf>

	              	   printf("up\n");
 8000e10:	481b      	ldr	r0, [pc, #108]	@ (8000e80 <StartTaskACC+0x1fc>)
 8000e12:	f006 fed1 	bl	8007bb8 <puts>
	              	 Send_Action("up", 2);
 8000e16:	2102      	movs	r1, #2
 8000e18:	4819      	ldr	r0, [pc, #100]	@ (8000e80 <StartTaskACC+0x1fc>)
 8000e1a:	f7ff fbd9 	bl	80005d0 <Send_Action>
	              	   osDelay(350);
 8000e1e:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8000e22:	f005 fb99 	bl	8006558 <osDelay>
	                     	   printf("down\n");
	                     	  Send_Action("down", 4);
	                     	osDelay(350);
	                       }

	    continue;
 8000e26:	e014      	b.n	8000e52 <StartTaskACC+0x1ce>
	                 }else if (z-g < -z_threshold){
 8000e28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e2c:	2bf9      	cmp	r3, #249	@ 0xf9
 8000e2e:	dc10      	bgt.n	8000e52 <StartTaskACC+0x1ce>
	                    	printf("z = %d\n", z);
 8000e30:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e34:	4619      	mov	r1, r3
 8000e36:	4811      	ldr	r0, [pc, #68]	@ (8000e7c <StartTaskACC+0x1f8>)
 8000e38:	f006 fe56 	bl	8007ae8 <iprintf>
	                     	   printf("down\n");
 8000e3c:	4811      	ldr	r0, [pc, #68]	@ (8000e84 <StartTaskACC+0x200>)
 8000e3e:	f006 febb 	bl	8007bb8 <puts>
	                     	  Send_Action("down", 4);
 8000e42:	2104      	movs	r1, #4
 8000e44:	480f      	ldr	r0, [pc, #60]	@ (8000e84 <StartTaskACC+0x200>)
 8000e46:	f7ff fbc3 	bl	80005d0 <Send_Action>
	                     	osDelay(350);
 8000e4a:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8000e4e:	f005 fb83 	bl	8006558 <osDelay>
	    continue;
 8000e52:	bf00      	nop
	  {
 8000e54:	e722      	b.n	8000c9c <StartTaskACC+0x18>
 8000e56:	bf00      	nop
 8000e58:	20001a46 	.word	0x20001a46
 8000e5c:	08008930 	.word	0x08008930
 8000e60:	20001a40 	.word	0x20001a40
 8000e64:	0003d090 	.word	0x0003d090
 8000e68:	0800893c 	.word	0x0800893c
 8000e6c:	08008948 	.word	0x08008948
 8000e70:	08008954 	.word	0x08008954
 8000e74:	fffffd12 	.word	0xfffffd12
 8000e78:	0800895c 	.word	0x0800895c
 8000e7c:	08008964 	.word	0x08008964
 8000e80:	0800896c 	.word	0x0800896c
 8000e84:	08008970 	.word	0x08008970

08000e88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d101      	bne.n	8000e9e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000e9a:	f000 ff23 	bl	8001ce4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40001000 	.word	0x40001000

08000eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb0:	b672      	cpsid	i
}
 8000eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <Error_Handler+0x8>

08000eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <HAL_MspInit+0x4c>)
 8000ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec2:	4a10      	ldr	r2, [pc, #64]	@ (8000f04 <HAL_MspInit+0x4c>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eca:	4b0e      	ldr	r3, [pc, #56]	@ (8000f04 <HAL_MspInit+0x4c>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <HAL_MspInit+0x4c>)
 8000ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eda:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <HAL_MspInit+0x4c>)
 8000edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ee2:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <HAL_MspInit+0x4c>)
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	210f      	movs	r1, #15
 8000ef2:	f06f 0001 	mvn.w	r0, #1
 8000ef6:	f000 fff1 	bl	8001edc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000

08000f08 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0ac      	sub	sp, #176	@ 0xb0
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2288      	movs	r2, #136	@ 0x88
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f006 ff25 	bl	8007d78 <memset>
  if(DFSDM1_Init == 0)
 8000f2e:	4b25      	ldr	r3, [pc, #148]	@ (8000fc4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d142      	bne.n	8000fbc <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000f36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fab2 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000f52:	f7ff ffab 	bl	8000eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f56:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f60:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f62:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6e:	4b16      	ldr	r3, [pc, #88]	@ (8000fc8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f72:	4a15      	ldr	r2, [pc, #84]	@ (8000fc8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f74:	f043 0310 	orr.w	r3, r3, #16
 8000f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7a:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7e:	f003 0310 	and.w	r3, r3, #16
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000f86:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000f8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000fa0:	2306      	movs	r3, #6
 8000fa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000faa:	4619      	mov	r1, r3
 8000fac:	4807      	ldr	r0, [pc, #28]	@ (8000fcc <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000fae:	f001 f8fb 	bl	80021a8 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000fb2:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	4a02      	ldr	r2, [pc, #8]	@ (8000fc4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fba:	6013      	str	r3, [r2, #0]
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	37b0      	adds	r7, #176	@ 0xb0
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20001a48 	.word	0x20001a48
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	48001000 	.word	0x48001000

08000fd0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0ac      	sub	sp, #176	@ 0xb0
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2288      	movs	r2, #136	@ 0x88
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f006 fec1 	bl	8007d78 <memset>
  if(hi2c->Instance==I2C2)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a21      	ldr	r2, [pc, #132]	@ (8001080 <HAL_I2C_MspInit+0xb0>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d13b      	bne.n	8001078 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001000:	2380      	movs	r3, #128	@ 0x80
 8001002:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001004:	2300      	movs	r3, #0
 8001006:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	4618      	mov	r0, r3
 800100e:	f003 fa4f 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001018:	f7ff ff48 	bl	8000eac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <HAL_I2C_MspInit+0xb4>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001020:	4a18      	ldr	r2, [pc, #96]	@ (8001084 <HAL_I2C_MspInit+0xb4>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001028:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <HAL_I2C_MspInit+0xb4>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001034:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001038:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103c:	2312      	movs	r3, #18
 800103e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001042:	2301      	movs	r3, #1
 8001044:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800104e:	2304      	movs	r3, #4
 8001050:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001054:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001058:	4619      	mov	r1, r3
 800105a:	480b      	ldr	r0, [pc, #44]	@ (8001088 <HAL_I2C_MspInit+0xb8>)
 800105c:	f001 f8a4 	bl	80021a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001060:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <HAL_I2C_MspInit+0xb4>)
 8001062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001064:	4a07      	ldr	r2, [pc, #28]	@ (8001084 <HAL_I2C_MspInit+0xb4>)
 8001066:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800106a:	6593      	str	r3, [r2, #88]	@ 0x58
 800106c:	4b05      	ldr	r3, [pc, #20]	@ (8001084 <HAL_I2C_MspInit+0xb4>)
 800106e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001070:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001078:	bf00      	nop
 800107a:	37b0      	adds	r7, #176	@ 0xb0
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40005800 	.word	0x40005800
 8001084:	40021000 	.word	0x40021000
 8001088:	48000400 	.word	0x48000400

0800108c <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0b      	ldr	r2, [pc, #44]	@ (80010c8 <HAL_I2C_MspDeInit+0x3c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d10f      	bne.n	80010be <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C2_MspDeInit 0 */

    /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800109e:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <HAL_I2C_MspDeInit+0x40>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a2:	4a0a      	ldr	r2, [pc, #40]	@ (80010cc <HAL_I2C_MspDeInit+0x40>)
 80010a4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80010a8:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80010aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010ae:	4808      	ldr	r0, [pc, #32]	@ (80010d0 <HAL_I2C_MspDeInit+0x44>)
 80010b0:	f001 fa24 	bl	80024fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80010b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010b8:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <HAL_I2C_MspDeInit+0x44>)
 80010ba:	f001 fa1f 	bl	80024fc <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C2_MspDeInit 1 */

    /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40005800 	.word	0x40005800
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48000400 	.word	0x48000400

080010d4 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	@ 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a17      	ldr	r2, [pc, #92]	@ (8001150 <HAL_QSPI_MspInit+0x7c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d128      	bne.n	8001148 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010f6:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <HAL_QSPI_MspInit+0x80>)
 80010f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010fa:	4a16      	ldr	r2, [pc, #88]	@ (8001154 <HAL_QSPI_MspInit+0x80>)
 80010fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001100:	6513      	str	r3, [r2, #80]	@ 0x50
 8001102:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <HAL_QSPI_MspInit+0x80>)
 8001104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <HAL_QSPI_MspInit+0x80>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001112:	4a10      	ldr	r2, [pc, #64]	@ (8001154 <HAL_QSPI_MspInit+0x80>)
 8001114:	f043 0310 	orr.w	r3, r3, #16
 8001118:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <HAL_QSPI_MspInit+0x80>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001126:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800112a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001138:	230a      	movs	r3, #10
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	4805      	ldr	r0, [pc, #20]	@ (8001158 <HAL_QSPI_MspInit+0x84>)
 8001144:	f001 f830 	bl	80021a8 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	@ 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	a0001000 	.word	0xa0001000
 8001154:	40021000 	.word	0x40021000
 8001158:	48001000 	.word	0x48001000

0800115c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0ae      	sub	sp, #184	@ 0xb8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	2288      	movs	r2, #136	@ 0x88
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f006 fdfb 	bl	8007d78 <memset>
  if(huart->Instance==USART1)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a42      	ldr	r2, [pc, #264]	@ (8001290 <HAL_UART_MspInit+0x134>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d13b      	bne.n	8001204 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800118c:	2301      	movs	r3, #1
 800118e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001190:	2300      	movs	r3, #0
 8001192:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4618      	mov	r0, r3
 800119a:	f003 f989 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011a4:	f7ff fe82 	bl	8000eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001294 <HAL_UART_MspInit+0x138>)
 80011aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ac:	4a39      	ldr	r2, [pc, #228]	@ (8001294 <HAL_UART_MspInit+0x138>)
 80011ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80011b4:	4b37      	ldr	r3, [pc, #220]	@ (8001294 <HAL_UART_MspInit+0x138>)
 80011b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011bc:	61bb      	str	r3, [r7, #24]
 80011be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b34      	ldr	r3, [pc, #208]	@ (8001294 <HAL_UART_MspInit+0x138>)
 80011c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c4:	4a33      	ldr	r2, [pc, #204]	@ (8001294 <HAL_UART_MspInit+0x138>)
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011cc:	4b31      	ldr	r3, [pc, #196]	@ (8001294 <HAL_UART_MspInit+0x138>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80011d8:	23c0      	movs	r3, #192	@ 0xc0
 80011da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011f0:	2307      	movs	r3, #7
 80011f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011fa:	4619      	mov	r1, r3
 80011fc:	4826      	ldr	r0, [pc, #152]	@ (8001298 <HAL_UART_MspInit+0x13c>)
 80011fe:	f000 ffd3 	bl	80021a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001202:	e040      	b.n	8001286 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a24      	ldr	r2, [pc, #144]	@ (800129c <HAL_UART_MspInit+0x140>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d13b      	bne.n	8001286 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800120e:	2304      	movs	r3, #4
 8001210:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001212:	2300      	movs	r3, #0
 8001214:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4618      	mov	r0, r3
 800121c:	f003 f948 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001226:	f7ff fe41 	bl	8000eac <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800122a:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <HAL_UART_MspInit+0x138>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122e:	4a19      	ldr	r2, [pc, #100]	@ (8001294 <HAL_UART_MspInit+0x138>)
 8001230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001234:	6593      	str	r3, [r2, #88]	@ 0x58
 8001236:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <HAL_UART_MspInit+0x138>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001242:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <HAL_UART_MspInit+0x138>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	4a13      	ldr	r2, [pc, #76]	@ (8001294 <HAL_UART_MspInit+0x138>)
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124e:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <HAL_UART_MspInit+0x138>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800125a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800125e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001274:	2307      	movs	r3, #7
 8001276:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800127e:	4619      	mov	r1, r3
 8001280:	4807      	ldr	r0, [pc, #28]	@ (80012a0 <HAL_UART_MspInit+0x144>)
 8001282:	f000 ff91 	bl	80021a8 <HAL_GPIO_Init>
}
 8001286:	bf00      	nop
 8001288:	37b8      	adds	r7, #184	@ 0xb8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40013800 	.word	0x40013800
 8001294:	40021000 	.word	0x40021000
 8001298:	48000400 	.word	0x48000400
 800129c:	40004800 	.word	0x40004800
 80012a0:	48000c00 	.word	0x48000c00

080012a4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b0ac      	sub	sp, #176	@ 0xb0
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2288      	movs	r2, #136	@ 0x88
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f006 fd57 	bl	8007d78 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012d2:	d17c      	bne.n	80013ce <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012d8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80012da:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80012de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80012e2:	2301      	movs	r3, #1
 80012e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80012ea:	2318      	movs	r3, #24
 80012ec:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80012ee:	2307      	movs	r3, #7
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80012f2:	2302      	movs	r3, #2
 80012f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80012f6:	2302      	movs	r3, #2
 80012f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80012fa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80012fe:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4618      	mov	r0, r3
 8001306:	f003 f8d3 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001310:	f7ff fdcc 	bl	8000eac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b30      	ldr	r3, [pc, #192]	@ (80013d8 <HAL_PCD_MspInit+0x134>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001318:	4a2f      	ldr	r2, [pc, #188]	@ (80013d8 <HAL_PCD_MspInit+0x134>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001320:	4b2d      	ldr	r3, [pc, #180]	@ (80013d8 <HAL_PCD_MspInit+0x134>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800132c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001330:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001334:	2300      	movs	r3, #0
 8001336:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001344:	4619      	mov	r1, r3
 8001346:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800134a:	f000 ff2d 	bl	80021a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800134e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001352:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001368:	230a      	movs	r3, #10
 800136a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001372:	4619      	mov	r1, r3
 8001374:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001378:	f000 ff16 	bl	80021a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800137c:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <HAL_PCD_MspInit+0x134>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001380:	4a15      	ldr	r2, [pc, #84]	@ (80013d8 <HAL_PCD_MspInit+0x134>)
 8001382:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001386:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001388:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <HAL_PCD_MspInit+0x134>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001394:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <HAL_PCD_MspInit+0x134>)
 8001396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d114      	bne.n	80013ca <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013a0:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <HAL_PCD_MspInit+0x134>)
 80013a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a4:	4a0c      	ldr	r2, [pc, #48]	@ (80013d8 <HAL_PCD_MspInit+0x134>)
 80013a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ac:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <HAL_PCD_MspInit+0x134>)
 80013ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80013b8:	f002 f97c 	bl	80036b4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <HAL_PCD_MspInit+0x134>)
 80013be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c0:	4a05      	ldr	r2, [pc, #20]	@ (80013d8 <HAL_PCD_MspInit+0x134>)
 80013c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013c6:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80013c8:	e001      	b.n	80013ce <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80013ca:	f002 f973 	bl	80036b4 <HAL_PWREx_EnableVddUSB>
}
 80013ce:	bf00      	nop
 80013d0:	37b0      	adds	r7, #176	@ 0xb0
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000

080013dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	@ 0x38
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013ea:	4b34      	ldr	r3, [pc, #208]	@ (80014bc <HAL_InitTick+0xe0>)
 80013ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ee:	4a33      	ldr	r2, [pc, #204]	@ (80014bc <HAL_InitTick+0xe0>)
 80013f0:	f043 0310 	orr.w	r3, r3, #16
 80013f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80013f6:	4b31      	ldr	r3, [pc, #196]	@ (80014bc <HAL_InitTick+0xe0>)
 80013f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001402:	f107 0210 	add.w	r2, r7, #16
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f002 ffbd 	bl	800438c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001418:	2b00      	cmp	r3, #0
 800141a:	d103      	bne.n	8001424 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800141c:	f002 ff8a 	bl	8004334 <HAL_RCC_GetPCLK1Freq>
 8001420:	6378      	str	r0, [r7, #52]	@ 0x34
 8001422:	e004      	b.n	800142e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001424:	f002 ff86 	bl	8004334 <HAL_RCC_GetPCLK1Freq>
 8001428:	4603      	mov	r3, r0
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800142e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001430:	4a23      	ldr	r2, [pc, #140]	@ (80014c0 <HAL_InitTick+0xe4>)
 8001432:	fba2 2303 	umull	r2, r3, r2, r3
 8001436:	0c9b      	lsrs	r3, r3, #18
 8001438:	3b01      	subs	r3, #1
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800143c:	4b21      	ldr	r3, [pc, #132]	@ (80014c4 <HAL_InitTick+0xe8>)
 800143e:	4a22      	ldr	r2, [pc, #136]	@ (80014c8 <HAL_InitTick+0xec>)
 8001440:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001442:	4b20      	ldr	r3, [pc, #128]	@ (80014c4 <HAL_InitTick+0xe8>)
 8001444:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001448:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800144a:	4a1e      	ldr	r2, [pc, #120]	@ (80014c4 <HAL_InitTick+0xe8>)
 800144c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800144e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001450:	4b1c      	ldr	r3, [pc, #112]	@ (80014c4 <HAL_InitTick+0xe8>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001456:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <HAL_InitTick+0xe8>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145c:	4b19      	ldr	r3, [pc, #100]	@ (80014c4 <HAL_InitTick+0xe8>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001462:	4818      	ldr	r0, [pc, #96]	@ (80014c4 <HAL_InitTick+0xe8>)
 8001464:	f003 fcf0 	bl	8004e48 <HAL_TIM_Base_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800146e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001472:	2b00      	cmp	r3, #0
 8001474:	d11b      	bne.n	80014ae <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001476:	4813      	ldr	r0, [pc, #76]	@ (80014c4 <HAL_InitTick+0xe8>)
 8001478:	f003 fd48 	bl	8004f0c <HAL_TIM_Base_Start_IT>
 800147c:	4603      	mov	r3, r0
 800147e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001482:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001486:	2b00      	cmp	r3, #0
 8001488:	d111      	bne.n	80014ae <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800148a:	2036      	movs	r0, #54	@ 0x36
 800148c:	f000 fd42 	bl	8001f14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b0f      	cmp	r3, #15
 8001494:	d808      	bhi.n	80014a8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001496:	2200      	movs	r2, #0
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	2036      	movs	r0, #54	@ 0x36
 800149c:	f000 fd1e 	bl	8001edc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014a0:	4a0a      	ldr	r2, [pc, #40]	@ (80014cc <HAL_InitTick+0xf0>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e002      	b.n	80014ae <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3738      	adds	r7, #56	@ 0x38
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000
 80014c0:	431bde83 	.word	0x431bde83
 80014c4:	20001a4c 	.word	0x20001a4c
 80014c8:	40001000 	.word	0x40001000
 80014cc:	20000040 	.word	0x20000040

080014d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <NMI_Handler+0x4>

080014d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <HardFault_Handler+0x4>

080014e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <MemManage_Handler+0x4>

080014e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800150c:	2020      	movs	r0, #32
 800150e:	f001 f901 	bl	8002714 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8001512:	4806      	ldr	r0, [pc, #24]	@ (800152c <EXTI9_5_IRQHandler+0x24>)
 8001514:	f000 fe18 	bl	8002148 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001518:	2080      	movs	r0, #128	@ 0x80
 800151a:	f001 f8fb 	bl	8002714 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800151e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001522:	f001 f8f7 	bl	8002714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200000c4 	.word	0x200000c4

08001530 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001534:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001538:	f001 f8ec 	bl	8002714 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800153c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001540:	f001 f8e8 	bl	8002714 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001544:	4806      	ldr	r0, [pc, #24]	@ (8001560 <EXTI15_10_IRQHandler+0x30>)
 8001546:	f000 fdff 	bl	8002148 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800154a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800154e:	f001 f8e1 	bl	8002714 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001552:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001556:	f001 f8dd 	bl	8002714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000004 	.word	0x20000004

08001564 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <TIM6_DAC_IRQHandler+0x10>)
 800156a:	f003 fd3f 	bl	8004fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20001a4c 	.word	0x20001a4c

08001578 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	e00a      	b.n	80015a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800158a:	f3af 8000 	nop.w
 800158e:	4601      	mov	r1, r0
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	60ba      	str	r2, [r7, #8]
 8001596:	b2ca      	uxtb	r2, r1
 8001598:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dbf0      	blt.n	800158a <_read+0x12>
  }

  return len;
 80015a8:	687b      	ldr	r3, [r7, #4]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	e009      	b.n	80015d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	60ba      	str	r2, [r7, #8]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff f80b 	bl	80005e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	dbf1      	blt.n	80015c4 <_write+0x12>
  }
  return len;
 80015e0:	687b      	ldr	r3, [r7, #4]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <_close>:

int _close(int file)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001612:	605a      	str	r2, [r3, #4]
  return 0;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <_isatty>:

int _isatty(int file)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800165c:	4a14      	ldr	r2, [pc, #80]	@ (80016b0 <_sbrk+0x5c>)
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <_sbrk+0x60>)
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001668:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <_sbrk+0x64>)
 8001672:	4a12      	ldr	r2, [pc, #72]	@ (80016bc <_sbrk+0x68>)
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	429a      	cmp	r2, r3
 8001682:	d207      	bcs.n	8001694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001684:	f006 fbc6 	bl	8007e14 <__errno>
 8001688:	4603      	mov	r3, r0
 800168a:	220c      	movs	r2, #12
 800168c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	e009      	b.n	80016a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001694:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169a:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a05      	ldr	r2, [pc, #20]	@ (80016b8 <_sbrk+0x64>)
 80016a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20018000 	.word	0x20018000
 80016b4:	00000400 	.word	0x00000400
 80016b8:	20001a98 	.word	0x20001a98
 80016bc:	20002978 	.word	0x20002978

080016c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <SystemInit+0x20>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ca:	4a05      	ldr	r2, [pc, #20]	@ (80016e0 <SystemInit+0x20>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800171c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016e8:	f7ff ffea 	bl	80016c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016ec:	480c      	ldr	r0, [pc, #48]	@ (8001720 <LoopForever+0x6>)
  ldr r1, =_edata
 80016ee:	490d      	ldr	r1, [pc, #52]	@ (8001724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001728 <LoopForever+0xe>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001704:	4c0a      	ldr	r4, [pc, #40]	@ (8001730 <LoopForever+0x16>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001712:	f006 fb85 	bl	8007e20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001716:	f7fe ff79 	bl	800060c <main>

0800171a <LoopForever>:

LoopForever:
    b LoopForever
 800171a:	e7fe      	b.n	800171a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800171c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001724:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001728:	08008a0c 	.word	0x08008a0c
  ldr r2, =_sbss
 800172c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001730:	20002974 	.word	0x20002974

08001734 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC1_2_IRQHandler>
	...

08001738 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <SENSOR_IO_Init+0x10>)
 800173e:	f000 f85b 	bl	80017f8 <I2Cx_Init>
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20001a9c 	.word	0x20001a9c

0800174c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af02      	add	r7, sp, #8
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
 8001756:	460b      	mov	r3, r1
 8001758:	71bb      	strb	r3, [r7, #6]
 800175a:	4613      	mov	r3, r2
 800175c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800175e:	79bb      	ldrb	r3, [r7, #6]
 8001760:	b29a      	uxth	r2, r3
 8001762:	79f9      	ldrb	r1, [r7, #7]
 8001764:	2301      	movs	r3, #1
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	1d7b      	adds	r3, r7, #5
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2301      	movs	r3, #1
 800176e:	4803      	ldr	r0, [pc, #12]	@ (800177c <SENSOR_IO_Write+0x30>)
 8001770:	f000 f8f5 	bl	800195e <I2Cx_WriteMultiple>
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20001a9c 	.word	0x20001a9c

08001780 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af02      	add	r7, sp, #8
 8001786:	4603      	mov	r3, r0
 8001788:	460a      	mov	r2, r1
 800178a:	71fb      	strb	r3, [r7, #7]
 800178c:	4613      	mov	r3, r2
 800178e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001794:	79bb      	ldrb	r3, [r7, #6]
 8001796:	b29a      	uxth	r2, r3
 8001798:	79f9      	ldrb	r1, [r7, #7]
 800179a:	2301      	movs	r3, #1
 800179c:	9301      	str	r3, [sp, #4]
 800179e:	f107 030f 	add.w	r3, r7, #15
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	2301      	movs	r3, #1
 80017a6:	4804      	ldr	r0, [pc, #16]	@ (80017b8 <SENSOR_IO_Read+0x38>)
 80017a8:	f000 f8ac 	bl	8001904 <I2Cx_ReadMultiple>

  return read_value;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20001a9c 	.word	0x20001a9c

080017bc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	603a      	str	r2, [r7, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
 80017ca:	460b      	mov	r3, r1
 80017cc:	71bb      	strb	r3, [r7, #6]
 80017ce:	4613      	mov	r3, r2
 80017d0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80017d2:	79bb      	ldrb	r3, [r7, #6]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	79f9      	ldrb	r1, [r7, #7]
 80017d8:	88bb      	ldrh	r3, [r7, #4]
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	2301      	movs	r3, #1
 80017e2:	4804      	ldr	r0, [pc, #16]	@ (80017f4 <SENSOR_IO_ReadMultiple+0x38>)
 80017e4:	f000 f88e 	bl	8001904 <I2Cx_ReadMultiple>
 80017e8:	4603      	mov	r3, r0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20001a9c 	.word	0x20001a9c

080017f8 <I2Cx_Init>:
 * @brief  Initializes I2C HAL.
 * @param  i2c_handler  I2C handler
 * @retval None
 */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance = DISCOVERY_I2Cx;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a12      	ldr	r2, [pc, #72]	@ (800184c <I2Cx_Init+0x54>)
 8001804:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing = DISCOVERY_I2Cx_TIMING;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a11      	ldr	r2, [pc, #68]	@ (8001850 <I2Cx_Init+0x58>)
 800180a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1 = 0;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2 = 0;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f80f 	bl	8001854 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 ff8f 	bl	800275a <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 800183c:	2100      	movs	r1, #0
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f001 fd46 	bl	80032d0 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40005800 	.word	0x40005800
 8001850:	00702681 	.word	0x00702681

08001854 <I2Cx_MspInit>:



static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	@ 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800185c:	4b27      	ldr	r3, [pc, #156]	@ (80018fc <I2Cx_MspInit+0xa8>)
 800185e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001860:	4a26      	ldr	r2, [pc, #152]	@ (80018fc <I2Cx_MspInit+0xa8>)
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001868:	4b24      	ldr	r3, [pc, #144]	@ (80018fc <I2Cx_MspInit+0xa8>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001874:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001878:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800187a:	2312      	movs	r3, #18
 800187c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800187e:	2301      	movs	r3, #1
 8001880:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001886:	2304      	movs	r3, #4
 8001888:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	481b      	ldr	r0, [pc, #108]	@ (8001900 <I2Cx_MspInit+0xac>)
 8001892:	f000 fc89 	bl	80021a8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	4818      	ldr	r0, [pc, #96]	@ (8001900 <I2Cx_MspInit+0xac>)
 800189e:	f000 fc83 	bl	80021a8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80018a2:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <I2Cx_MspInit+0xa8>)
 80018a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a6:	4a15      	ldr	r2, [pc, #84]	@ (80018fc <I2Cx_MspInit+0xa8>)
 80018a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ae:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <I2Cx_MspInit+0xa8>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80018ba:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <I2Cx_MspInit+0xa8>)
 80018bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018be:	4a0f      	ldr	r2, [pc, #60]	@ (80018fc <I2Cx_MspInit+0xa8>)
 80018c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018c4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80018c6:	4b0d      	ldr	r3, [pc, #52]	@ (80018fc <I2Cx_MspInit+0xa8>)
 80018c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ca:	4a0c      	ldr	r2, [pc, #48]	@ (80018fc <I2Cx_MspInit+0xa8>)
 80018cc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80018d0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	210f      	movs	r1, #15
 80018d6:	2021      	movs	r0, #33	@ 0x21
 80018d8:	f000 fb00 	bl	8001edc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80018dc:	2021      	movs	r0, #33	@ 0x21
 80018de:	f000 fb19 	bl	8001f14 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	210f      	movs	r1, #15
 80018e6:	2022      	movs	r0, #34	@ 0x22
 80018e8:	f000 faf8 	bl	8001edc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80018ec:	2022      	movs	r0, #34	@ 0x22
 80018ee:	f000 fb11 	bl	8001f14 <HAL_NVIC_EnableIRQ>
}
 80018f2:	bf00      	nop
 80018f4:	3728      	adds	r7, #40	@ 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	48000400 	.word	0x48000400

08001904 <I2Cx_ReadMultiple>:
 * @param  Buffer  Pointer to data buffer
 * @param  Length  Length of the data
 * @retval HAL status
 */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	@ 0x28
 8001908:	af04      	add	r7, sp, #16
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	4608      	mov	r0, r1
 800190e:	4611      	mov	r1, r2
 8001910:	461a      	mov	r2, r3
 8001912:	4603      	mov	r3, r0
 8001914:	72fb      	strb	r3, [r7, #11]
 8001916:	460b      	mov	r3, r1
 8001918:	813b      	strh	r3, [r7, #8]
 800191a:	4613      	mov	r3, r2
 800191c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001922:	7afb      	ldrb	r3, [r7, #11]
 8001924:	b299      	uxth	r1, r3
 8001926:	88f8      	ldrh	r0, [r7, #6]
 8001928:	893a      	ldrh	r2, [r7, #8]
 800192a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800192e:	9302      	str	r3, [sp, #8]
 8001930:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	4603      	mov	r3, r0
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f001 f8ec 	bl	8002b18 <HAL_I2C_Mem_Read>
 8001940:	4603      	mov	r3, r0
 8001942:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8001944:	7dfb      	ldrb	r3, [r7, #23]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800194a:	7afb      	ldrb	r3, [r7, #11]
 800194c:	4619      	mov	r1, r3
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 f832 	bl	80019b8 <I2Cx_Error>
  }
  return status;
 8001954:	7dfb      	ldrb	r3, [r7, #23]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <I2Cx_WriteMultiple>:
 * @param  Buffer  The target register value to be written
 * @param  Length  buffer size to be written
 * @retval HAL status
 */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b08a      	sub	sp, #40	@ 0x28
 8001962:	af04      	add	r7, sp, #16
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	4608      	mov	r0, r1
 8001968:	4611      	mov	r1, r2
 800196a:	461a      	mov	r2, r3
 800196c:	4603      	mov	r3, r0
 800196e:	72fb      	strb	r3, [r7, #11]
 8001970:	460b      	mov	r3, r1
 8001972:	813b      	strh	r3, [r7, #8]
 8001974:	4613      	mov	r3, r2
 8001976:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800197c:	7afb      	ldrb	r3, [r7, #11]
 800197e:	b299      	uxth	r1, r3
 8001980:	88f8      	ldrh	r0, [r7, #6]
 8001982:	893a      	ldrh	r2, [r7, #8]
 8001984:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001988:	9302      	str	r3, [sp, #8]
 800198a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	4603      	mov	r3, r0
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 ffab 	bl	80028f0 <HAL_I2C_Mem_Write>
 800199a:	4603      	mov	r3, r0
 800199c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 800199e:	7dfb      	ldrb	r3, [r7, #23]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d004      	beq.n	80019ae <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80019a4:	7afb      	ldrb	r3, [r7, #11]
 80019a6:	4619      	mov	r1, r3
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 f805 	bl	80019b8 <I2Cx_Error>
  }
  return status;
 80019ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <I2Cx_Error>:
 * @param  i2c_handler  I2C handler
 * @param  Addr  I2C Address
 * @retval None
 */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 ff63 	bl	8002890 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ff14 	bl	80017f8 <I2Cx_Init>
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80019e2:	2300      	movs	r3, #0
 80019e4:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80019e6:	2110      	movs	r1, #16
 80019e8:	20d4      	movs	r0, #212	@ 0xd4
 80019ea:	f7ff fec9 	bl	8001780 <SENSOR_IO_Read>
 80019ee:	4603      	mov	r3, r0
 80019f0:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80019f6:	7bbb      	ldrb	r3, [r7, #14]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80019fe:	7bba      	ldrb	r2, [r7, #14]
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001a06:	7bbb      	ldrb	r3, [r7, #14]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2110      	movs	r1, #16
 8001a0c:	20d4      	movs	r0, #212	@ 0xd4
 8001a0e:	f7ff fe9d 	bl	800174c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001a12:	2112      	movs	r1, #18
 8001a14:	20d4      	movs	r0, #212	@ 0xd4
 8001a16:	f7ff feb3 	bl	8001780 <SENSOR_IO_Read>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001a26:	7bbb      	ldrb	r3, [r7, #14]
 8001a28:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8001a2c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001a2e:	7bba      	ldrb	r2, [r7, #14]
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001a36:	7bbb      	ldrb	r3, [r7, #14]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	2112      	movs	r1, #18
 8001a3c:	20d4      	movs	r0, #212	@ 0xd4
 8001a3e:	f7ff fe85 	bl	800174c <SENSOR_IO_Write>
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001a50:	2300      	movs	r3, #0
 8001a52:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001a54:	2110      	movs	r1, #16
 8001a56:	20d4      	movs	r0, #212	@ 0xd4
 8001a58:	f7ff fe92 	bl	8001780 <SENSOR_IO_Read>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	2110      	movs	r1, #16
 8001a6e:	20d4      	movs	r0, #212	@ 0xd4
 8001a70:	f7ff fe6c 	bl	800174c <SENSOR_IO_Write>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001a80:	f7ff fe5a 	bl	8001738 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001a84:	210f      	movs	r1, #15
 8001a86:	20d4      	movs	r0, #212	@ 0xd4
 8001a88:	f7ff fe7a 	bl	8001780 <SENSOR_IO_Read>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001aa0:	2115      	movs	r1, #21
 8001aa2:	20d4      	movs	r0, #212	@ 0xd4
 8001aa4:	f7ff fe6c 	bl	8001780 <SENSOR_IO_Read>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	f023 0310 	bic.w	r3, r3, #16
 8001ab2:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	f043 0310 	orr.w	r3, r3, #16
 8001ac0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	2115      	movs	r1, #21
 8001ac8:	20d4      	movs	r0, #212	@ 0xd4
 8001aca:	f7ff fe3f 	bl	800174c <SENSOR_IO_Write>
}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001aee:	2110      	movs	r1, #16
 8001af0:	20d4      	movs	r0, #212	@ 0xd4
 8001af2:	f7ff fe45 	bl	8001780 <SENSOR_IO_Read>
 8001af6:	4603      	mov	r3, r0
 8001af8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001afa:	f107 0208 	add.w	r2, r7, #8
 8001afe:	2306      	movs	r3, #6
 8001b00:	2128      	movs	r1, #40	@ 0x28
 8001b02:	20d4      	movs	r0, #212	@ 0xd4
 8001b04:	f7ff fe5a 	bl	80017bc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	77fb      	strb	r3, [r7, #31]
 8001b0c:	e01a      	b.n	8001b44 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001b0e:	7ffb      	ldrb	r3, [r7, #31]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	3301      	adds	r3, #1
 8001b14:	3320      	adds	r3, #32
 8001b16:	443b      	add	r3, r7
 8001b18:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	7ffa      	ldrb	r2, [r7, #31]
 8001b22:	0052      	lsls	r2, r2, #1
 8001b24:	3220      	adds	r2, #32
 8001b26:	443a      	add	r2, r7
 8001b28:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	7ffb      	ldrb	r3, [r7, #31]
 8001b32:	b212      	sxth	r2, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	3320      	adds	r3, #32
 8001b38:	443b      	add	r3, r7
 8001b3a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001b3e:	7ffb      	ldrb	r3, [r7, #31]
 8001b40:	3301      	adds	r3, #1
 8001b42:	77fb      	strb	r3, [r7, #31]
 8001b44:	7ffb      	ldrb	r3, [r7, #31]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d9e1      	bls.n	8001b0e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b0c      	cmp	r3, #12
 8001b52:	d829      	bhi.n	8001ba8 <LSM6DSL_AccReadXYZ+0xd0>
 8001b54:	a201      	add	r2, pc, #4	@ (adr r2, 8001b5c <LSM6DSL_AccReadXYZ+0x84>)
 8001b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5a:	bf00      	nop
 8001b5c:	08001b91 	.word	0x08001b91
 8001b60:	08001ba9 	.word	0x08001ba9
 8001b64:	08001ba9 	.word	0x08001ba9
 8001b68:	08001ba9 	.word	0x08001ba9
 8001b6c:	08001ba3 	.word	0x08001ba3
 8001b70:	08001ba9 	.word	0x08001ba9
 8001b74:	08001ba9 	.word	0x08001ba9
 8001b78:	08001ba9 	.word	0x08001ba9
 8001b7c:	08001b97 	.word	0x08001b97
 8001b80:	08001ba9 	.word	0x08001ba9
 8001b84:	08001ba9 	.word	0x08001ba9
 8001b88:	08001ba9 	.word	0x08001ba9
 8001b8c:	08001b9d 	.word	0x08001b9d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001b90:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <LSM6DSL_AccReadXYZ+0x11c>)
 8001b92:	61bb      	str	r3, [r7, #24]
    break;
 8001b94:	e008      	b.n	8001ba8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001b96:	4b18      	ldr	r3, [pc, #96]	@ (8001bf8 <LSM6DSL_AccReadXYZ+0x120>)
 8001b98:	61bb      	str	r3, [r7, #24]
    break;
 8001b9a:	e005      	b.n	8001ba8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001b9c:	4b17      	ldr	r3, [pc, #92]	@ (8001bfc <LSM6DSL_AccReadXYZ+0x124>)
 8001b9e:	61bb      	str	r3, [r7, #24]
    break;
 8001ba0:	e002      	b.n	8001ba8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8001ba2:	4b17      	ldr	r3, [pc, #92]	@ (8001c00 <LSM6DSL_AccReadXYZ+0x128>)
 8001ba4:	61bb      	str	r3, [r7, #24]
    break;    
 8001ba6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	77fb      	strb	r3, [r7, #31]
 8001bac:	e01a      	b.n	8001be4 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001bae:	7ffb      	ldrb	r3, [r7, #31]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	3320      	adds	r3, #32
 8001bb4:	443b      	add	r3, r7
 8001bb6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001bba:	ee07 3a90 	vmov	s15, r3
 8001bbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bc2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bca:	7ffb      	ldrb	r3, [r7, #31]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bd6:	ee17 2a90 	vmov	r2, s15
 8001bda:	b212      	sxth	r2, r2
 8001bdc:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001bde:	7ffb      	ldrb	r3, [r7, #31]
 8001be0:	3301      	adds	r3, #1
 8001be2:	77fb      	strb	r3, [r7, #31]
 8001be4:	7ffb      	ldrb	r3, [r7, #31]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d9e1      	bls.n	8001bae <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8001bea:	bf00      	nop
 8001bec:	bf00      	nop
 8001bee:	3720      	adds	r7, #32
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	3d79db23 	.word	0x3d79db23
 8001bf8:	3df9db23 	.word	0x3df9db23
 8001bfc:	3e79db23 	.word	0x3e79db23
 8001c00:	3ef9db23 	.word	0x3ef9db23

08001c04 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001c12:	4b1a      	ldr	r3, [pc, #104]	@ (8001c7c <BSP_ACCELERO_Init+0x78>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	4798      	blx	r3
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b6a      	cmp	r3, #106	@ 0x6a
 8001c1c:	d002      	beq.n	8001c24 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	73fb      	strb	r3, [r7, #15]
 8001c22:	e025      	b.n	8001c70 <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001c24:	4b16      	ldr	r3, [pc, #88]	@ (8001c80 <BSP_ACCELERO_Init+0x7c>)
 8001c26:	4a15      	ldr	r2, [pc, #84]	@ (8001c7c <BSP_ACCELERO_Init+0x78>)
 8001c28:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001c2a:	2330      	movs	r3, #48	@ 0x30
 8001c2c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001c32:	2300      	movs	r3, #0
 8001c34:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001c36:	2340      	movs	r3, #64	@ 0x40
 8001c38:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	72fb      	strb	r3, [r7, #11]

    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001c42:	797a      	ldrb	r2, [r7, #5]
 8001c44:	7abb      	ldrb	r3, [r7, #10]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001c4c:	7a3b      	ldrb	r3, [r7, #8]
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	b21a      	sxth	r2, r3
 8001c5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <BSP_ACCELERO_Init+0x7c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	89ba      	ldrh	r2, [r7, #12]
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4798      	blx	r3
  }

  return ret;
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2000000c 	.word	0x2000000c
 8001c80:	20001af0 	.word	0x20001af0

08001c84 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001c8c:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d009      	beq.n	8001ca8 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d004      	beq.n	8001ca8 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001c9e:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	4798      	blx	r3
    }
  }
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20001af0 	.word	0x20001af0

08001cb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cbe:	2003      	movs	r0, #3
 8001cc0:	f000 f901 	bl	8001ec6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cc4:	200f      	movs	r0, #15
 8001cc6:	f7ff fb89 	bl	80013dc <HAL_InitTick>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d002      	beq.n	8001cd6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	71fb      	strb	r3, [r7, #7]
 8001cd4:	e001      	b.n	8001cda <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cd6:	f7ff f8ef 	bl	8000eb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cda:	79fb      	ldrb	r3, [r7, #7]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <HAL_IncTick+0x20>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <HAL_IncTick+0x24>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	4a04      	ldr	r2, [pc, #16]	@ (8001d08 <HAL_IncTick+0x24>)
 8001cf6:	6013      	str	r3, [r2, #0]
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000044 	.word	0x20000044
 8001d08:	20001af4 	.word	0x20001af4

08001d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d10:	4b03      	ldr	r3, [pc, #12]	@ (8001d20 <HAL_GetTick+0x14>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	20001af4 	.word	0x20001af4

08001d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d2c:	f7ff ffee 	bl	8001d0c <HAL_GetTick>
 8001d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3c:	d005      	beq.n	8001d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <HAL_Delay+0x44>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4413      	add	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d4a:	bf00      	nop
 8001d4c:	f7ff ffde 	bl	8001d0c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d8f7      	bhi.n	8001d4c <HAL_Delay+0x28>
  {
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000044 	.word	0x20000044

08001d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9e:	4a04      	ldr	r2, [pc, #16]	@ (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	60d3      	str	r3, [r2, #12]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db8:	4b04      	ldr	r3, [pc, #16]	@ (8001dcc <__NVIC_GetPriorityGrouping+0x18>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	f003 0307 	and.w	r3, r3, #7
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	db0b      	blt.n	8001dfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	f003 021f 	and.w	r2, r3, #31
 8001de8:	4907      	ldr	r1, [pc, #28]	@ (8001e08 <__NVIC_EnableIRQ+0x38>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	2001      	movs	r0, #1
 8001df2:	fa00 f202 	lsl.w	r2, r0, r2
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e100 	.word	0xe000e100

08001e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	db0a      	blt.n	8001e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	490c      	ldr	r1, [pc, #48]	@ (8001e58 <__NVIC_SetPriority+0x4c>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e34:	e00a      	b.n	8001e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4908      	ldr	r1, [pc, #32]	@ (8001e5c <__NVIC_SetPriority+0x50>)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3b04      	subs	r3, #4
 8001e44:	0112      	lsls	r2, r2, #4
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	440b      	add	r3, r1
 8001e4a:	761a      	strb	r2, [r3, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	@ 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f1c3 0307 	rsb	r3, r3, #7
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	bf28      	it	cs
 8001e7e:	2304      	movcs	r3, #4
 8001e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d902      	bls.n	8001e90 <NVIC_EncodePriority+0x30>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3b03      	subs	r3, #3
 8001e8e:	e000      	b.n	8001e92 <NVIC_EncodePriority+0x32>
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43d9      	mvns	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	4313      	orrs	r3, r2
         );
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3724      	adds	r7, #36	@ 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff ff4c 	bl	8001d6c <__NVIC_SetPriorityGrouping>
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eee:	f7ff ff61 	bl	8001db4 <__NVIC_GetPriorityGrouping>
 8001ef2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	68b9      	ldr	r1, [r7, #8]
 8001ef8:	6978      	ldr	r0, [r7, #20]
 8001efa:	f7ff ffb1 	bl	8001e60 <NVIC_EncodePriority>
 8001efe:	4602      	mov	r2, r0
 8001f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f04:	4611      	mov	r1, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff80 	bl	8001e0c <__NVIC_SetPriority>
}
 8001f0c:	bf00      	nop
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ff54 	bl	8001dd0 <__NVIC_EnableIRQ>
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e0ac      	b.n	800209c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f8b2 	bl	80020b0 <DFSDM_GetChannelFromInstance>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4a55      	ldr	r2, [pc, #340]	@ (80020a4 <HAL_DFSDM_ChannelInit+0x174>)
 8001f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e09f      	b.n	800209c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7fe ffd3 	bl	8000f08 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001f62:	4b51      	ldr	r3, [pc, #324]	@ (80020a8 <HAL_DFSDM_ChannelInit+0x178>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	3301      	adds	r3, #1
 8001f68:	4a4f      	ldr	r2, [pc, #316]	@ (80020a8 <HAL_DFSDM_ChannelInit+0x178>)
 8001f6a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001f6c:	4b4e      	ldr	r3, [pc, #312]	@ (80020a8 <HAL_DFSDM_ChannelInit+0x178>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d125      	bne.n	8001fc0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001f74:	4b4d      	ldr	r3, [pc, #308]	@ (80020ac <HAL_DFSDM_ChannelInit+0x17c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a4c      	ldr	r2, [pc, #304]	@ (80020ac <HAL_DFSDM_ChannelInit+0x17c>)
 8001f7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001f7e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001f80:	4b4a      	ldr	r3, [pc, #296]	@ (80020ac <HAL_DFSDM_ChannelInit+0x17c>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	4948      	ldr	r1, [pc, #288]	@ (80020ac <HAL_DFSDM_ChannelInit+0x17c>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001f8e:	4b47      	ldr	r3, [pc, #284]	@ (80020ac <HAL_DFSDM_ChannelInit+0x17c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a46      	ldr	r2, [pc, #280]	@ (80020ac <HAL_DFSDM_ChannelInit+0x17c>)
 8001f94:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001f98:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	791b      	ldrb	r3, [r3, #4]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d108      	bne.n	8001fb4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001fa2:	4b42      	ldr	r3, [pc, #264]	@ (80020ac <HAL_DFSDM_ChannelInit+0x17c>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	041b      	lsls	r3, r3, #16
 8001fae:	493f      	ldr	r1, [pc, #252]	@ (80020ac <HAL_DFSDM_ChannelInit+0x17c>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001fb4:	4b3d      	ldr	r3, [pc, #244]	@ (80020ac <HAL_DFSDM_ChannelInit+0x17c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a3c      	ldr	r2, [pc, #240]	@ (80020ac <HAL_DFSDM_ChannelInit+0x17c>)
 8001fba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001fbe:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001fce:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6819      	ldr	r1, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001fde:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001fe4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 020f 	bic.w	r2, r2, #15
 8001ffc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6819      	ldr	r1, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8002024:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6899      	ldr	r1, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002034:	3b01      	subs	r3, #1
 8002036:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f002 0207 	and.w	r2, r2, #7
 8002050:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800207c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f810 	bl	80020b0 <DFSDM_GetChannelFromInstance>
 8002090:	4602      	mov	r2, r0
 8002092:	4904      	ldr	r1, [pc, #16]	@ (80020a4 <HAL_DFSDM_ChannelInit+0x174>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20001afc 	.word	0x20001afc
 80020a8:	20001af8 	.word	0x20001af8
 80020ac:	40016000 	.word	0x40016000

080020b0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a1c      	ldr	r2, [pc, #112]	@ (800212c <DFSDM_GetChannelFromInstance+0x7c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d102      	bne.n	80020c6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	e02b      	b.n	800211e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a19      	ldr	r2, [pc, #100]	@ (8002130 <DFSDM_GetChannelFromInstance+0x80>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d102      	bne.n	80020d4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80020ce:	2301      	movs	r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	e024      	b.n	800211e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a17      	ldr	r2, [pc, #92]	@ (8002134 <DFSDM_GetChannelFromInstance+0x84>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d102      	bne.n	80020e2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80020dc:	2302      	movs	r3, #2
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	e01d      	b.n	800211e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a14      	ldr	r2, [pc, #80]	@ (8002138 <DFSDM_GetChannelFromInstance+0x88>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d102      	bne.n	80020f0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80020ea:	2304      	movs	r3, #4
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	e016      	b.n	800211e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a12      	ldr	r2, [pc, #72]	@ (800213c <DFSDM_GetChannelFromInstance+0x8c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d102      	bne.n	80020fe <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80020f8:	2305      	movs	r3, #5
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	e00f      	b.n	800211e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a0f      	ldr	r2, [pc, #60]	@ (8002140 <DFSDM_GetChannelFromInstance+0x90>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d102      	bne.n	800210c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002106:	2306      	movs	r3, #6
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	e008      	b.n	800211e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a0d      	ldr	r2, [pc, #52]	@ (8002144 <DFSDM_GetChannelFromInstance+0x94>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d102      	bne.n	800211a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002114:	2307      	movs	r3, #7
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	e001      	b.n	800211e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800211a:	2303      	movs	r3, #3
 800211c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800211e:	68fb      	ldr	r3, [r7, #12]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	40016000 	.word	0x40016000
 8002130:	40016020 	.word	0x40016020
 8002134:	40016040 	.word	0x40016040
 8002138:	40016080 	.word	0x40016080
 800213c:	400160a0 	.word	0x400160a0
 8002140:	400160c0 	.word	0x400160c0
 8002144:	400160e0 	.word	0x400160e0

08002148 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0c1b      	lsrs	r3, r3, #16
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	2201      	movs	r2, #1
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	015a      	lsls	r2, r3, #5
 8002170:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <HAL_EXTI_IRQHandler+0x5c>)
 8002172:	4413      	add	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4798      	blx	r3
    }
  }
}
 800219a:	bf00      	nop
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40010414 	.word	0x40010414

080021a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b6:	e17f      	b.n	80024b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	2101      	movs	r1, #1
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	4013      	ands	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 8171 	beq.w	80024b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d005      	beq.n	80021e8 <HAL_GPIO_Init+0x40>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d130      	bne.n	800224a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800221e:	2201      	movs	r2, #1
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4013      	ands	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	f003 0201 	and.w	r2, r3, #1
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b03      	cmp	r3, #3
 8002254:	d118      	bne.n	8002288 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800225c:	2201      	movs	r2, #1
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	08db      	lsrs	r3, r3, #3
 8002272:	f003 0201 	and.w	r2, r3, #1
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b03      	cmp	r3, #3
 8002292:	d017      	beq.n	80022c4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d123      	bne.n	8002318 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	08da      	lsrs	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3208      	adds	r2, #8
 80022d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	08da      	lsrs	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3208      	adds	r2, #8
 8002312:	6939      	ldr	r1, [r7, #16]
 8002314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0203 	and.w	r2, r3, #3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80ac 	beq.w	80024b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	4b5f      	ldr	r3, [pc, #380]	@ (80024d8 <HAL_GPIO_Init+0x330>)
 800235c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800235e:	4a5e      	ldr	r2, [pc, #376]	@ (80024d8 <HAL_GPIO_Init+0x330>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6613      	str	r3, [r2, #96]	@ 0x60
 8002366:	4b5c      	ldr	r3, [pc, #368]	@ (80024d8 <HAL_GPIO_Init+0x330>)
 8002368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002372:	4a5a      	ldr	r2, [pc, #360]	@ (80024dc <HAL_GPIO_Init+0x334>)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3302      	adds	r3, #2
 800237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800239c:	d025      	beq.n	80023ea <HAL_GPIO_Init+0x242>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4f      	ldr	r2, [pc, #316]	@ (80024e0 <HAL_GPIO_Init+0x338>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d01f      	beq.n	80023e6 <HAL_GPIO_Init+0x23e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4e      	ldr	r2, [pc, #312]	@ (80024e4 <HAL_GPIO_Init+0x33c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d019      	beq.n	80023e2 <HAL_GPIO_Init+0x23a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4d      	ldr	r2, [pc, #308]	@ (80024e8 <HAL_GPIO_Init+0x340>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <HAL_GPIO_Init+0x236>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4c      	ldr	r2, [pc, #304]	@ (80024ec <HAL_GPIO_Init+0x344>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d00d      	beq.n	80023da <HAL_GPIO_Init+0x232>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4b      	ldr	r2, [pc, #300]	@ (80024f0 <HAL_GPIO_Init+0x348>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d007      	beq.n	80023d6 <HAL_GPIO_Init+0x22e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4a      	ldr	r2, [pc, #296]	@ (80024f4 <HAL_GPIO_Init+0x34c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d101      	bne.n	80023d2 <HAL_GPIO_Init+0x22a>
 80023ce:	2306      	movs	r3, #6
 80023d0:	e00c      	b.n	80023ec <HAL_GPIO_Init+0x244>
 80023d2:	2307      	movs	r3, #7
 80023d4:	e00a      	b.n	80023ec <HAL_GPIO_Init+0x244>
 80023d6:	2305      	movs	r3, #5
 80023d8:	e008      	b.n	80023ec <HAL_GPIO_Init+0x244>
 80023da:	2304      	movs	r3, #4
 80023dc:	e006      	b.n	80023ec <HAL_GPIO_Init+0x244>
 80023de:	2303      	movs	r3, #3
 80023e0:	e004      	b.n	80023ec <HAL_GPIO_Init+0x244>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e002      	b.n	80023ec <HAL_GPIO_Init+0x244>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <HAL_GPIO_Init+0x244>
 80023ea:	2300      	movs	r3, #0
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	f002 0203 	and.w	r2, r2, #3
 80023f2:	0092      	lsls	r2, r2, #2
 80023f4:	4093      	lsls	r3, r2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023fc:	4937      	ldr	r1, [pc, #220]	@ (80024dc <HAL_GPIO_Init+0x334>)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	089b      	lsrs	r3, r3, #2
 8002402:	3302      	adds	r3, #2
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800240a:	4b3b      	ldr	r3, [pc, #236]	@ (80024f8 <HAL_GPIO_Init+0x350>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	43db      	mvns	r3, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800242e:	4a32      	ldr	r2, [pc, #200]	@ (80024f8 <HAL_GPIO_Init+0x350>)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002434:	4b30      	ldr	r3, [pc, #192]	@ (80024f8 <HAL_GPIO_Init+0x350>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43db      	mvns	r3, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002458:	4a27      	ldr	r2, [pc, #156]	@ (80024f8 <HAL_GPIO_Init+0x350>)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800245e:	4b26      	ldr	r3, [pc, #152]	@ (80024f8 <HAL_GPIO_Init+0x350>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	43db      	mvns	r3, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002482:	4a1d      	ldr	r2, [pc, #116]	@ (80024f8 <HAL_GPIO_Init+0x350>)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002488:	4b1b      	ldr	r3, [pc, #108]	@ (80024f8 <HAL_GPIO_Init+0x350>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	43db      	mvns	r3, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024ac:	4a12      	ldr	r2, [pc, #72]	@ (80024f8 <HAL_GPIO_Init+0x350>)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	3301      	adds	r3, #1
 80024b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fa22 f303 	lsr.w	r3, r2, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f47f ae78 	bne.w	80021b8 <HAL_GPIO_Init+0x10>
  }
}
 80024c8:	bf00      	nop
 80024ca:	bf00      	nop
 80024cc:	371c      	adds	r7, #28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40010000 	.word	0x40010000
 80024e0:	48000400 	.word	0x48000400
 80024e4:	48000800 	.word	0x48000800
 80024e8:	48000c00 	.word	0x48000c00
 80024ec:	48001000 	.word	0x48001000
 80024f0:	48001400 	.word	0x48001400
 80024f4:	48001800 	.word	0x48001800
 80024f8:	40010400 	.word	0x40010400

080024fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800250a:	e0cd      	b.n	80026a8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800250c:	2201      	movs	r2, #1
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80c0 	beq.w	80026a2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002522:	4a68      	ldr	r2, [pc, #416]	@ (80026c4 <HAL_GPIO_DeInit+0x1c8>)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	3302      	adds	r3, #2
 800252a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	220f      	movs	r2, #15
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4013      	ands	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800254a:	d025      	beq.n	8002598 <HAL_GPIO_DeInit+0x9c>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a5e      	ldr	r2, [pc, #376]	@ (80026c8 <HAL_GPIO_DeInit+0x1cc>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d01f      	beq.n	8002594 <HAL_GPIO_DeInit+0x98>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a5d      	ldr	r2, [pc, #372]	@ (80026cc <HAL_GPIO_DeInit+0x1d0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d019      	beq.n	8002590 <HAL_GPIO_DeInit+0x94>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a5c      	ldr	r2, [pc, #368]	@ (80026d0 <HAL_GPIO_DeInit+0x1d4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d013      	beq.n	800258c <HAL_GPIO_DeInit+0x90>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a5b      	ldr	r2, [pc, #364]	@ (80026d4 <HAL_GPIO_DeInit+0x1d8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00d      	beq.n	8002588 <HAL_GPIO_DeInit+0x8c>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a5a      	ldr	r2, [pc, #360]	@ (80026d8 <HAL_GPIO_DeInit+0x1dc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d007      	beq.n	8002584 <HAL_GPIO_DeInit+0x88>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a59      	ldr	r2, [pc, #356]	@ (80026dc <HAL_GPIO_DeInit+0x1e0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d101      	bne.n	8002580 <HAL_GPIO_DeInit+0x84>
 800257c:	2306      	movs	r3, #6
 800257e:	e00c      	b.n	800259a <HAL_GPIO_DeInit+0x9e>
 8002580:	2307      	movs	r3, #7
 8002582:	e00a      	b.n	800259a <HAL_GPIO_DeInit+0x9e>
 8002584:	2305      	movs	r3, #5
 8002586:	e008      	b.n	800259a <HAL_GPIO_DeInit+0x9e>
 8002588:	2304      	movs	r3, #4
 800258a:	e006      	b.n	800259a <HAL_GPIO_DeInit+0x9e>
 800258c:	2303      	movs	r3, #3
 800258e:	e004      	b.n	800259a <HAL_GPIO_DeInit+0x9e>
 8002590:	2302      	movs	r3, #2
 8002592:	e002      	b.n	800259a <HAL_GPIO_DeInit+0x9e>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <HAL_GPIO_DeInit+0x9e>
 8002598:	2300      	movs	r3, #0
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	f002 0203 	and.w	r2, r2, #3
 80025a0:	0092      	lsls	r2, r2, #2
 80025a2:	4093      	lsls	r3, r2
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d132      	bne.n	8002610 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80025aa:	4b4d      	ldr	r3, [pc, #308]	@ (80026e0 <HAL_GPIO_DeInit+0x1e4>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	494b      	ldr	r1, [pc, #300]	@ (80026e0 <HAL_GPIO_DeInit+0x1e4>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80025b8:	4b49      	ldr	r3, [pc, #292]	@ (80026e0 <HAL_GPIO_DeInit+0x1e4>)
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	43db      	mvns	r3, r3
 80025c0:	4947      	ldr	r1, [pc, #284]	@ (80026e0 <HAL_GPIO_DeInit+0x1e4>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80025c6:	4b46      	ldr	r3, [pc, #280]	@ (80026e0 <HAL_GPIO_DeInit+0x1e4>)
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	4944      	ldr	r1, [pc, #272]	@ (80026e0 <HAL_GPIO_DeInit+0x1e4>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80025d4:	4b42      	ldr	r3, [pc, #264]	@ (80026e0 <HAL_GPIO_DeInit+0x1e4>)
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	43db      	mvns	r3, r3
 80025dc:	4940      	ldr	r1, [pc, #256]	@ (80026e0 <HAL_GPIO_DeInit+0x1e4>)
 80025de:	4013      	ands	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	220f      	movs	r2, #15
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80025f2:	4a34      	ldr	r2, [pc, #208]	@ (80026c4 <HAL_GPIO_DeInit+0x1c8>)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	3302      	adds	r3, #2
 80025fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	43da      	mvns	r2, r3
 8002602:	4830      	ldr	r0, [pc, #192]	@ (80026c4 <HAL_GPIO_DeInit+0x1c8>)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	089b      	lsrs	r3, r3, #2
 8002608:	400a      	ands	r2, r1
 800260a:	3302      	adds	r3, #2
 800260c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	2103      	movs	r1, #3
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	08da      	lsrs	r2, r3, #3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3208      	adds	r2, #8
 800262c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	220f      	movs	r2, #15
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	08d2      	lsrs	r2, r2, #3
 8002644:	4019      	ands	r1, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3208      	adds	r2, #8
 800264a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2103      	movs	r1, #3
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	401a      	ands	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	2101      	movs	r1, #1
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	fa01 f303 	lsl.w	r3, r1, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	401a      	ands	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	2103      	movs	r1, #3
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	401a      	ands	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002692:	2101      	movs	r1, #1
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	401a      	ands	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3301      	adds	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f47f af2b 	bne.w	800250c <HAL_GPIO_DeInit+0x10>
  }
}
 80026b6:	bf00      	nop
 80026b8:	bf00      	nop
 80026ba:	371c      	adds	r7, #28
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	40010000 	.word	0x40010000
 80026c8:	48000400 	.word	0x48000400
 80026cc:	48000800 	.word	0x48000800
 80026d0:	48000c00 	.word	0x48000c00
 80026d4:	48001000 	.word	0x48001000
 80026d8:	48001400 	.word	0x48001400
 80026dc:	48001800 	.word	0x48001800
 80026e0:	40010400 	.word	0x40010400

080026e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
 80026f0:	4613      	mov	r3, r2
 80026f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f4:	787b      	ldrb	r3, [r7, #1]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026fa:	887a      	ldrh	r2, [r7, #2]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002700:	e002      	b.n	8002708 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002702:	887a      	ldrh	r2, [r7, #2]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800271e:	4b08      	ldr	r3, [pc, #32]	@ (8002740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d006      	beq.n	8002738 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800272a:	4a05      	ldr	r2, [pc, #20]	@ (8002740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f806 	bl	8002744 <HAL_GPIO_EXTI_Callback>
  }
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40010400 	.word	0x40010400

08002744 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e08d      	b.n	8002888 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d106      	bne.n	8002786 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7fe fc25 	bl	8000fd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2224      	movs	r2, #36	@ 0x24
 800278a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0201 	bic.w	r2, r2, #1
 800279c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d107      	bne.n	80027d4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	e006      	b.n	80027e2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80027e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d108      	bne.n	80027fc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	e007      	b.n	800280c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800280a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800281a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800281e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800282e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69d9      	ldr	r1, [r3, #28]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1a      	ldr	r2, [r3, #32]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 0201 	orr.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e021      	b.n	80028e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2224      	movs	r2, #36	@ 0x24
 80028a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0201 	bic.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fe fbe6 	bl	800108c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	4608      	mov	r0, r1
 80028fa:	4611      	mov	r1, r2
 80028fc:	461a      	mov	r2, r3
 80028fe:	4603      	mov	r3, r0
 8002900:	817b      	strh	r3, [r7, #10]
 8002902:	460b      	mov	r3, r1
 8002904:	813b      	strh	r3, [r7, #8]
 8002906:	4613      	mov	r3, r2
 8002908:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b20      	cmp	r3, #32
 8002914:	f040 80f9 	bne.w	8002b0a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <HAL_I2C_Mem_Write+0x34>
 800291e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002920:	2b00      	cmp	r3, #0
 8002922:	d105      	bne.n	8002930 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800292a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0ed      	b.n	8002b0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_I2C_Mem_Write+0x4e>
 800293a:	2302      	movs	r3, #2
 800293c:	e0e6      	b.n	8002b0c <HAL_I2C_Mem_Write+0x21c>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002946:	f7ff f9e1 	bl	8001d0c <HAL_GetTick>
 800294a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2319      	movs	r3, #25
 8002952:	2201      	movs	r2, #1
 8002954:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 fac3 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0d1      	b.n	8002b0c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2221      	movs	r2, #33	@ 0x21
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2240      	movs	r2, #64	@ 0x40
 8002974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a3a      	ldr	r2, [r7, #32]
 8002982:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002988:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002990:	88f8      	ldrh	r0, [r7, #6]
 8002992:	893a      	ldrh	r2, [r7, #8]
 8002994:	8979      	ldrh	r1, [r7, #10]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	4603      	mov	r3, r0
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f9d3 	bl	8002d4c <I2C_RequestMemoryWrite>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0a9      	b.n	8002b0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2bff      	cmp	r3, #255	@ 0xff
 80029c0:	d90e      	bls.n	80029e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	22ff      	movs	r2, #255	@ 0xff
 80029c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	8979      	ldrh	r1, [r7, #10]
 80029d0:	2300      	movs	r3, #0
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 fc47 	bl	800326c <I2C_TransferConfig>
 80029de:	e00f      	b.n	8002a00 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	8979      	ldrh	r1, [r7, #10]
 80029f2:	2300      	movs	r3, #0
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 fc36 	bl	800326c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 fac6 	bl	8002f96 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e07b      	b.n	8002b0c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	781a      	ldrb	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d034      	beq.n	8002ab8 <HAL_I2C_Mem_Write+0x1c8>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d130      	bne.n	8002ab8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2180      	movs	r1, #128	@ 0x80
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 fa3f 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e04d      	b.n	8002b0c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2bff      	cmp	r3, #255	@ 0xff
 8002a78:	d90e      	bls.n	8002a98 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	22ff      	movs	r2, #255	@ 0xff
 8002a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	8979      	ldrh	r1, [r7, #10]
 8002a88:	2300      	movs	r3, #0
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fbeb 	bl	800326c <I2C_TransferConfig>
 8002a96:	e00f      	b.n	8002ab8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	8979      	ldrh	r1, [r7, #10]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fbda 	bl	800326c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d19e      	bne.n	8002a00 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 faac 	bl	8003024 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e01a      	b.n	8002b0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2220      	movs	r2, #32
 8002adc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6859      	ldr	r1, [r3, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <HAL_I2C_Mem_Write+0x224>)
 8002aea:	400b      	ands	r3, r1
 8002aec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e000      	b.n	8002b0c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002b0a:	2302      	movs	r3, #2
  }
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	fe00e800 	.word	0xfe00e800

08002b18 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	4608      	mov	r0, r1
 8002b22:	4611      	mov	r1, r2
 8002b24:	461a      	mov	r2, r3
 8002b26:	4603      	mov	r3, r0
 8002b28:	817b      	strh	r3, [r7, #10]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	813b      	strh	r3, [r7, #8]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	f040 80fd 	bne.w	8002d3a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <HAL_I2C_Mem_Read+0x34>
 8002b46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d105      	bne.n	8002b58 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b52:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0f1      	b.n	8002d3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_I2C_Mem_Read+0x4e>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e0ea      	b.n	8002d3c <HAL_I2C_Mem_Read+0x224>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b6e:	f7ff f8cd 	bl	8001d0c <HAL_GetTick>
 8002b72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	2319      	movs	r3, #25
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 f9af 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0d5      	b.n	8002d3c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2222      	movs	r2, #34	@ 0x22
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2240      	movs	r2, #64	@ 0x40
 8002b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a3a      	ldr	r2, [r7, #32]
 8002baa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bb8:	88f8      	ldrh	r0, [r7, #6]
 8002bba:	893a      	ldrh	r2, [r7, #8]
 8002bbc:	8979      	ldrh	r1, [r7, #10]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	9301      	str	r3, [sp, #4]
 8002bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 f913 	bl	8002df4 <I2C_RequestMemoryRead>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0ad      	b.n	8002d3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2bff      	cmp	r3, #255	@ 0xff
 8002be8:	d90e      	bls.n	8002c08 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	8979      	ldrh	r1, [r7, #10]
 8002bf8:	4b52      	ldr	r3, [pc, #328]	@ (8002d44 <HAL_I2C_Mem_Read+0x22c>)
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 fb33 	bl	800326c <I2C_TransferConfig>
 8002c06:	e00f      	b.n	8002c28 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	8979      	ldrh	r1, [r7, #10]
 8002c1a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d44 <HAL_I2C_Mem_Read+0x22c>)
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 fb22 	bl	800326c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2104      	movs	r1, #4
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f956 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e07c      	b.n	8002d3c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d034      	beq.n	8002ce8 <HAL_I2C_Mem_Read+0x1d0>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d130      	bne.n	8002ce8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2180      	movs	r1, #128	@ 0x80
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f927 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e04d      	b.n	8002d3c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2bff      	cmp	r3, #255	@ 0xff
 8002ca8:	d90e      	bls.n	8002cc8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2201      	movs	r2, #1
 8002cae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	8979      	ldrh	r1, [r7, #10]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fad3 	bl	800326c <I2C_TransferConfig>
 8002cc6:	e00f      	b.n	8002ce8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	8979      	ldrh	r1, [r7, #10]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fac2 	bl	800326c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d19a      	bne.n	8002c28 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f994 	bl	8003024 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e01a      	b.n	8002d3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b0b      	ldr	r3, [pc, #44]	@ (8002d48 <HAL_I2C_Mem_Read+0x230>)
 8002d1a:	400b      	ands	r3, r1
 8002d1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e000      	b.n	8002d3c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d3a:	2302      	movs	r3, #2
  }
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	80002400 	.word	0x80002400
 8002d48:	fe00e800 	.word	0xfe00e800

08002d4c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	4608      	mov	r0, r1
 8002d56:	4611      	mov	r1, r2
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	817b      	strh	r3, [r7, #10]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	813b      	strh	r3, [r7, #8]
 8002d62:	4613      	mov	r3, r2
 8002d64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	8979      	ldrh	r1, [r7, #10]
 8002d6c:	4b20      	ldr	r3, [pc, #128]	@ (8002df0 <I2C_RequestMemoryWrite+0xa4>)
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 fa79 	bl	800326c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	69b9      	ldr	r1, [r7, #24]
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f909 	bl	8002f96 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e02c      	b.n	8002de8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d105      	bne.n	8002da0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d94:	893b      	ldrh	r3, [r7, #8]
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d9e:	e015      	b.n	8002dcc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002da0:	893b      	ldrh	r3, [r7, #8]
 8002da2:	0a1b      	lsrs	r3, r3, #8
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	69b9      	ldr	r1, [r7, #24]
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f8ef 	bl	8002f96 <I2C_WaitOnTXISFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e012      	b.n	8002de8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dc2:	893b      	ldrh	r3, [r7, #8]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2180      	movs	r1, #128	@ 0x80
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f884 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	80002000 	.word	0x80002000

08002df4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	4608      	mov	r0, r1
 8002dfe:	4611      	mov	r1, r2
 8002e00:	461a      	mov	r2, r3
 8002e02:	4603      	mov	r3, r0
 8002e04:	817b      	strh	r3, [r7, #10]
 8002e06:	460b      	mov	r3, r1
 8002e08:	813b      	strh	r3, [r7, #8]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e0e:	88fb      	ldrh	r3, [r7, #6]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	8979      	ldrh	r1, [r7, #10]
 8002e14:	4b20      	ldr	r3, [pc, #128]	@ (8002e98 <I2C_RequestMemoryRead+0xa4>)
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 fa26 	bl	800326c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	69b9      	ldr	r1, [r7, #24]
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f8b6 	bl	8002f96 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e02c      	b.n	8002e8e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d105      	bne.n	8002e46 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e3a:	893b      	ldrh	r3, [r7, #8]
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e44:	e015      	b.n	8002e72 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e46:	893b      	ldrh	r3, [r7, #8]
 8002e48:	0a1b      	lsrs	r3, r3, #8
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e54:	69fa      	ldr	r2, [r7, #28]
 8002e56:	69b9      	ldr	r1, [r7, #24]
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 f89c 	bl	8002f96 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e012      	b.n	8002e8e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e68:	893b      	ldrh	r3, [r7, #8]
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2140      	movs	r1, #64	@ 0x40
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f831 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	80002000 	.word	0x80002000

08002e9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d103      	bne.n	8002eba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d007      	beq.n	8002ed8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699a      	ldr	r2, [r3, #24]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	619a      	str	r2, [r3, #24]
  }
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef4:	e03b      	b.n	8002f6e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	6839      	ldr	r1, [r7, #0]
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 f8d6 	bl	80030ac <I2C_IsErrorOccurred>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e041      	b.n	8002f8e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d02d      	beq.n	8002f6e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f12:	f7fe fefb 	bl	8001d0c <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d302      	bcc.n	8002f28 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d122      	bne.n	8002f6e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	4013      	ands	r3, r2
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	bf0c      	ite	eq
 8002f38:	2301      	moveq	r3, #1
 8002f3a:	2300      	movne	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d113      	bne.n	8002f6e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4a:	f043 0220 	orr.w	r2, r3, #32
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e00f      	b.n	8002f8e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699a      	ldr	r2, [r3, #24]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4013      	ands	r3, r2
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	bf0c      	ite	eq
 8002f7e:	2301      	moveq	r3, #1
 8002f80:	2300      	movne	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d0b4      	beq.n	8002ef6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fa2:	e033      	b.n	800300c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f87f 	bl	80030ac <I2C_IsErrorOccurred>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e031      	b.n	800301c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbe:	d025      	beq.n	800300c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc0:	f7fe fea4 	bl	8001d0c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d302      	bcc.n	8002fd6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d11a      	bne.n	800300c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d013      	beq.n	800300c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe8:	f043 0220 	orr.w	r2, r3, #32
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e007      	b.n	800301c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b02      	cmp	r3, #2
 8003018:	d1c4      	bne.n	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003030:	e02f      	b.n	8003092 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f838 	bl	80030ac <I2C_IsErrorOccurred>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e02d      	b.n	80030a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003046:	f7fe fe61 	bl	8001d0c <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	429a      	cmp	r2, r3
 8003054:	d302      	bcc.n	800305c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d11a      	bne.n	8003092 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b20      	cmp	r3, #32
 8003068:	d013      	beq.n	8003092 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306e:	f043 0220 	orr.w	r2, r3, #32
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e007      	b.n	80030a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	2b20      	cmp	r3, #32
 800309e:	d1c8      	bne.n	8003032 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	@ 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030c6:	2300      	movs	r3, #0
 80030c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d068      	beq.n	80031aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2210      	movs	r2, #16
 80030de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030e0:	e049      	b.n	8003176 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d045      	beq.n	8003176 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030ea:	f7fe fe0f 	bl	8001d0c <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d302      	bcc.n	8003100 <I2C_IsErrorOccurred+0x54>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d13a      	bne.n	8003176 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800310a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003112:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800311e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003122:	d121      	bne.n	8003168 <I2C_IsErrorOccurred+0xbc>
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800312a:	d01d      	beq.n	8003168 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800312c:	7cfb      	ldrb	r3, [r7, #19]
 800312e:	2b20      	cmp	r3, #32
 8003130:	d01a      	beq.n	8003168 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003140:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003142:	f7fe fde3 	bl	8001d0c <HAL_GetTick>
 8003146:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003148:	e00e      	b.n	8003168 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800314a:	f7fe fddf 	bl	8001d0c <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b19      	cmp	r3, #25
 8003156:	d907      	bls.n	8003168 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	f043 0320 	orr.w	r3, r3, #32
 800315e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003166:	e006      	b.n	8003176 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b20      	cmp	r3, #32
 8003174:	d1e9      	bne.n	800314a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	2b20      	cmp	r3, #32
 8003182:	d003      	beq.n	800318c <I2C_IsErrorOccurred+0xe0>
 8003184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0aa      	beq.n	80030e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800318c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003190:	2b00      	cmp	r3, #0
 8003192:	d103      	bne.n	800319c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2220      	movs	r2, #32
 800319a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	f043 0304 	orr.w	r3, r3, #4
 80031a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00b      	beq.n	80031d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00b      	beq.n	80031f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	f043 0308 	orr.w	r3, r3, #8
 80031e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00b      	beq.n	8003218 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	f043 0302 	orr.w	r3, r3, #2
 8003206:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003210:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003218:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01c      	beq.n	800325a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f7ff fe3b 	bl	8002e9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6859      	ldr	r1, [r3, #4]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	4b0d      	ldr	r3, [pc, #52]	@ (8003268 <I2C_IsErrorOccurred+0x1bc>)
 8003232:	400b      	ands	r3, r1
 8003234:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	431a      	orrs	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800325a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800325e:	4618      	mov	r0, r3
 8003260:	3728      	adds	r7, #40	@ 0x28
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	fe00e800 	.word	0xfe00e800

0800326c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	607b      	str	r3, [r7, #4]
 8003276:	460b      	mov	r3, r1
 8003278:	817b      	strh	r3, [r7, #10]
 800327a:	4613      	mov	r3, r2
 800327c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800327e:	897b      	ldrh	r3, [r7, #10]
 8003280:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003284:	7a7b      	ldrb	r3, [r7, #9]
 8003286:	041b      	lsls	r3, r3, #16
 8003288:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800328c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	4313      	orrs	r3, r2
 8003296:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800329a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	0d5b      	lsrs	r3, r3, #21
 80032a6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80032aa:	4b08      	ldr	r3, [pc, #32]	@ (80032cc <I2C_TransferConfig+0x60>)
 80032ac:	430b      	orrs	r3, r1
 80032ae:	43db      	mvns	r3, r3
 80032b0:	ea02 0103 	and.w	r1, r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	03ff63ff 	.word	0x03ff63ff

080032d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	d138      	bne.n	8003358 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e032      	b.n	800335a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2224      	movs	r2, #36	@ 0x24
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0201 	bic.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003322:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6819      	ldr	r1, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	e000      	b.n	800335a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003358:	2302      	movs	r3, #2
  }
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b086      	sub	sp, #24
 800336a:	af02      	add	r7, sp, #8
 800336c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e101      	b.n	800357c <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d106      	bne.n	8003392 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7fd ff89 	bl	80012a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2203      	movs	r2, #3
 8003396:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f002 fded 	bl	8005f84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	7c1a      	ldrb	r2, [r3, #16]
 80033b2:	f88d 2000 	strb.w	r2, [sp]
 80033b6:	3304      	adds	r3, #4
 80033b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ba:	f002 fdb6 	bl	8005f2a <USB_CoreInit>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0d5      	b.n	800357c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2100      	movs	r1, #0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f002 fde5 	bl	8005fa6 <USB_SetCurrentMode>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2202      	movs	r2, #2
 80033e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e0c6      	b.n	800357c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
 80033f2:	e04a      	b.n	800348a <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033f4:	7bfa      	ldrb	r2, [r7, #15]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	3315      	adds	r3, #21
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003408:	7bfa      	ldrb	r2, [r7, #15]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	3314      	adds	r3, #20
 8003418:	7bfa      	ldrb	r2, [r7, #15]
 800341a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800341c:	7bfa      	ldrb	r2, [r7, #15]
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	b298      	uxth	r0, r3
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	332e      	adds	r3, #46	@ 0x2e
 8003430:	4602      	mov	r2, r0
 8003432:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003434:	7bfa      	ldrb	r2, [r7, #15]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	3318      	adds	r3, #24
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003448:	7bfa      	ldrb	r2, [r7, #15]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	331c      	adds	r3, #28
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800345c:	7bfa      	ldrb	r2, [r7, #15]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	3320      	adds	r3, #32
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003470:	7bfa      	ldrb	r2, [r7, #15]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	3324      	adds	r3, #36	@ 0x24
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	3301      	adds	r3, #1
 8003488:	73fb      	strb	r3, [r7, #15]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	791b      	ldrb	r3, [r3, #4]
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	429a      	cmp	r2, r3
 8003492:	d3af      	bcc.n	80033f4 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003494:	2300      	movs	r3, #0
 8003496:	73fb      	strb	r3, [r7, #15]
 8003498:	e044      	b.n	8003524 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800349a:	7bfa      	ldrb	r2, [r7, #15]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034b0:	7bfa      	ldrb	r2, [r7, #15]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80034c2:	7bfa      	ldrb	r2, [r7, #15]
 80034c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034c6:	7bfa      	ldrb	r2, [r7, #15]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80034d8:	2200      	movs	r2, #0
 80034da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034f2:	7bfa      	ldrb	r2, [r7, #15]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003508:	7bfa      	ldrb	r2, [r7, #15]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	3301      	adds	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	791b      	ldrb	r3, [r3, #4]
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	429a      	cmp	r2, r3
 800352c:	d3b5      	bcc.n	800349a <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	7c1a      	ldrb	r2, [r3, #16]
 8003536:	f88d 2000 	strb.w	r2, [sp]
 800353a:	3304      	adds	r3, #4
 800353c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800353e:	f002 fd7f 	bl	8006040 <USB_DevInit>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e013      	b.n	800357c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	7b1b      	ldrb	r3, [r3, #12]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d102      	bne.n	8003570 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f80a 	bl	8003584 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f002 ff24 	bl	80063c2 <USB_DevDisconnect>

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035b6:	f043 0303 	orr.w	r3, r3, #3
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035d0:	4b05      	ldr	r3, [pc, #20]	@ (80035e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a04      	ldr	r2, [pc, #16]	@ (80035e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035da:	6013      	str	r3, [r2, #0]
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40007000 	.word	0x40007000

080035ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80035f0:	4b04      	ldr	r3, [pc, #16]	@ (8003604 <HAL_PWREx_GetVoltageRange+0x18>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40007000 	.word	0x40007000

08003608 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003616:	d130      	bne.n	800367a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003618:	4b23      	ldr	r3, [pc, #140]	@ (80036a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003624:	d038      	beq.n	8003698 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003626:	4b20      	ldr	r3, [pc, #128]	@ (80036a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800362e:	4a1e      	ldr	r2, [pc, #120]	@ (80036a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003630:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003634:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003636:	4b1d      	ldr	r3, [pc, #116]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2232      	movs	r2, #50	@ 0x32
 800363c:	fb02 f303 	mul.w	r3, r2, r3
 8003640:	4a1b      	ldr	r2, [pc, #108]	@ (80036b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003642:	fba2 2303 	umull	r2, r3, r2, r3
 8003646:	0c9b      	lsrs	r3, r3, #18
 8003648:	3301      	adds	r3, #1
 800364a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800364c:	e002      	b.n	8003654 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	3b01      	subs	r3, #1
 8003652:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003654:	4b14      	ldr	r3, [pc, #80]	@ (80036a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800365c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003660:	d102      	bne.n	8003668 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f2      	bne.n	800364e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003668:	4b0f      	ldr	r3, [pc, #60]	@ (80036a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003674:	d110      	bne.n	8003698 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e00f      	b.n	800369a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800367a:	4b0b      	ldr	r3, [pc, #44]	@ (80036a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003686:	d007      	beq.n	8003698 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003688:	4b07      	ldr	r3, [pc, #28]	@ (80036a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003690:	4a05      	ldr	r2, [pc, #20]	@ (80036a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003692:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003696:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40007000 	.word	0x40007000
 80036ac:	20000000 	.word	0x20000000
 80036b0:	431bde83 	.word	0x431bde83

080036b4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80036b8:	4b05      	ldr	r3, [pc, #20]	@ (80036d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	4a04      	ldr	r2, [pc, #16]	@ (80036d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80036be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036c2:	6053      	str	r3, [r2, #4]
}
 80036c4:	bf00      	nop
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40007000 	.word	0x40007000

080036d4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af02      	add	r7, sp, #8
 80036da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80036dc:	f7fe fb16 	bl	8001d0c <HAL_GetTick>
 80036e0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e063      	b.n	80037b4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7fd fce7 	bl	80010d4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003706:	f241 3188 	movw	r1, #5000	@ 0x1388
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f858 	bl	80037c0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	3b01      	subs	r3, #1
 8003720:	021a      	lsls	r2, r3, #8
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	2120      	movs	r1, #32
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f850 	bl	80037dc <QSPI_WaitFlagStateUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003740:	7afb      	ldrb	r3, [r7, #11]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d131      	bne.n	80037aa <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003750:	f023 0310 	bic.w	r3, r3, #16
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6852      	ldr	r2, [r2, #4]
 8003758:	0611      	lsls	r1, r2, #24
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	68d2      	ldr	r2, [r2, #12]
 800375e:	4311      	orrs	r1, r2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	430b      	orrs	r3, r1
 8003766:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	4b13      	ldr	r3, [pc, #76]	@ (80037bc <HAL_QSPI_Init+0xe8>)
 8003770:	4013      	ands	r3, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6912      	ldr	r2, [r2, #16]
 8003776:	0411      	lsls	r1, r2, #16
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6952      	ldr	r2, [r2, #20]
 800377c:	4311      	orrs	r1, r2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6992      	ldr	r2, [r2, #24]
 8003782:	4311      	orrs	r1, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	430b      	orrs	r3, r1
 800378a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80037b2:	7afb      	ldrb	r3, [r7, #11]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	ffe0f8fe 	.word	0xffe0f8fe

080037c0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	4613      	mov	r3, r2
 80037ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80037ec:	e01a      	b.n	8003824 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f4:	d016      	beq.n	8003824 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f6:	f7fe fa89 	bl	8001d0c <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	429a      	cmp	r2, r3
 8003804:	d302      	bcc.n	800380c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10b      	bne.n	8003824 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2204      	movs	r2, #4
 8003810:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003818:	f043 0201 	orr.w	r2, r3, #1
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e00e      	b.n	8003842 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	bf14      	ite	ne
 8003832:	2301      	movne	r3, #1
 8003834:	2300      	moveq	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	461a      	mov	r2, r3
 800383a:	79fb      	ldrb	r3, [r7, #7]
 800383c:	429a      	cmp	r2, r3
 800383e:	d1d6      	bne.n	80037ee <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e3ca      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800385e:	4b97      	ldr	r3, [pc, #604]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003868:	4b94      	ldr	r3, [pc, #592]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80e4 	beq.w	8003a48 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d007      	beq.n	8003896 <HAL_RCC_OscConfig+0x4a>
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	2b0c      	cmp	r3, #12
 800388a:	f040 808b 	bne.w	80039a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2b01      	cmp	r3, #1
 8003892:	f040 8087 	bne.w	80039a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003896:	4b89      	ldr	r3, [pc, #548]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <HAL_RCC_OscConfig+0x62>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e3a2      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1a      	ldr	r2, [r3, #32]
 80038b2:	4b82      	ldr	r3, [pc, #520]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d004      	beq.n	80038c8 <HAL_RCC_OscConfig+0x7c>
 80038be:	4b7f      	ldr	r3, [pc, #508]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038c6:	e005      	b.n	80038d4 <HAL_RCC_OscConfig+0x88>
 80038c8:	4b7c      	ldr	r3, [pc, #496]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 80038ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038ce:	091b      	lsrs	r3, r3, #4
 80038d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d223      	bcs.n	8003920 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 fd87 	bl	80043f0 <RCC_SetFlashLatencyFromMSIRange>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e383      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038ec:	4b73      	ldr	r3, [pc, #460]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a72      	ldr	r2, [pc, #456]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 80038f2:	f043 0308 	orr.w	r3, r3, #8
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	4b70      	ldr	r3, [pc, #448]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	496d      	ldr	r1, [pc, #436]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800390a:	4b6c      	ldr	r3, [pc, #432]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	4968      	ldr	r1, [pc, #416]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
 800391e:	e025      	b.n	800396c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003920:	4b66      	ldr	r3, [pc, #408]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a65      	ldr	r2, [pc, #404]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 8003926:	f043 0308 	orr.w	r3, r3, #8
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	4b63      	ldr	r3, [pc, #396]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	4960      	ldr	r1, [pc, #384]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800393e:	4b5f      	ldr	r3, [pc, #380]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	021b      	lsls	r3, r3, #8
 800394c:	495b      	ldr	r1, [pc, #364]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 800394e:	4313      	orrs	r3, r2
 8003950:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d109      	bne.n	800396c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fd47 	bl	80043f0 <RCC_SetFlashLatencyFromMSIRange>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e343      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800396c:	f000 fc4a 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b52      	ldr	r3, [pc, #328]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	4950      	ldr	r1, [pc, #320]	@ (8003ac0 <HAL_RCC_OscConfig+0x274>)
 800397e:	5ccb      	ldrb	r3, [r1, r3]
 8003980:	f003 031f 	and.w	r3, r3, #31
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
 8003988:	4a4e      	ldr	r2, [pc, #312]	@ (8003ac4 <HAL_RCC_OscConfig+0x278>)
 800398a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800398c:	4b4e      	ldr	r3, [pc, #312]	@ (8003ac8 <HAL_RCC_OscConfig+0x27c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7fd fd23 	bl	80013dc <HAL_InitTick>
 8003996:	4603      	mov	r3, r0
 8003998:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d052      	beq.n	8003a46 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	e327      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d032      	beq.n	8003a12 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039ac:	4b43      	ldr	r3, [pc, #268]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a42      	ldr	r2, [pc, #264]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039b8:	f7fe f9a8 	bl	8001d0c <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039c0:	f7fe f9a4 	bl	8001d0c <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e310      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039d2:	4b3a      	ldr	r3, [pc, #232]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039de:	4b37      	ldr	r3, [pc, #220]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a36      	ldr	r2, [pc, #216]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 80039e4:	f043 0308 	orr.w	r3, r3, #8
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	4b34      	ldr	r3, [pc, #208]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	4931      	ldr	r1, [pc, #196]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039fc:	4b2f      	ldr	r3, [pc, #188]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	021b      	lsls	r3, r3, #8
 8003a0a:	492c      	ldr	r1, [pc, #176]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	604b      	str	r3, [r1, #4]
 8003a10:	e01a      	b.n	8003a48 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a12:	4b2a      	ldr	r3, [pc, #168]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a29      	ldr	r2, [pc, #164]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a1e:	f7fe f975 	bl	8001d0c <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a26:	f7fe f971 	bl	8001d0c <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e2dd      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a38:	4b20      	ldr	r3, [pc, #128]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1f0      	bne.n	8003a26 <HAL_RCC_OscConfig+0x1da>
 8003a44:	e000      	b.n	8003a48 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a46:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d074      	beq.n	8003b3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d005      	beq.n	8003a66 <HAL_RCC_OscConfig+0x21a>
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	2b0c      	cmp	r3, #12
 8003a5e:	d10e      	bne.n	8003a7e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	d10b      	bne.n	8003a7e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a66:	4b15      	ldr	r3, [pc, #84]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d064      	beq.n	8003b3c <HAL_RCC_OscConfig+0x2f0>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d160      	bne.n	8003b3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e2ba      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a86:	d106      	bne.n	8003a96 <HAL_RCC_OscConfig+0x24a>
 8003a88:	4b0c      	ldr	r3, [pc, #48]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 8003a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	e026      	b.n	8003ae4 <HAL_RCC_OscConfig+0x298>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a9e:	d115      	bne.n	8003acc <HAL_RCC_OscConfig+0x280>
 8003aa0:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a05      	ldr	r2, [pc, #20]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 8003aa6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4b03      	ldr	r3, [pc, #12]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a02      	ldr	r2, [pc, #8]	@ (8003abc <HAL_RCC_OscConfig+0x270>)
 8003ab2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	e014      	b.n	8003ae4 <HAL_RCC_OscConfig+0x298>
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	08008980 	.word	0x08008980
 8003ac4:	20000000 	.word	0x20000000
 8003ac8:	20000040 	.word	0x20000040
 8003acc:	4ba0      	ldr	r3, [pc, #640]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a9f      	ldr	r2, [pc, #636]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	4b9d      	ldr	r3, [pc, #628]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a9c      	ldr	r2, [pc, #624]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d013      	beq.n	8003b14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aec:	f7fe f90e 	bl	8001d0c <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af4:	f7fe f90a 	bl	8001d0c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	@ 0x64
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e276      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b06:	4b92      	ldr	r3, [pc, #584]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x2a8>
 8003b12:	e014      	b.n	8003b3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7fe f8fa 	bl	8001d0c <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b1c:	f7fe f8f6 	bl	8001d0c <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b64      	cmp	r3, #100	@ 0x64
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e262      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b2e:	4b88      	ldr	r3, [pc, #544]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x2d0>
 8003b3a:	e000      	b.n	8003b3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d060      	beq.n	8003c0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d005      	beq.n	8003b5c <HAL_RCC_OscConfig+0x310>
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d119      	bne.n	8003b8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d116      	bne.n	8003b8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b5c:	4b7c      	ldr	r3, [pc, #496]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <HAL_RCC_OscConfig+0x328>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e23f      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b74:	4b76      	ldr	r3, [pc, #472]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	061b      	lsls	r3, r3, #24
 8003b82:	4973      	ldr	r1, [pc, #460]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b88:	e040      	b.n	8003c0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d023      	beq.n	8003bda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b92:	4b6f      	ldr	r3, [pc, #444]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a6e      	ldr	r2, [pc, #440]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003b98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9e:	f7fe f8b5 	bl	8001d0c <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba6:	f7fe f8b1 	bl	8001d0c <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e21d      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bb8:	4b65      	ldr	r3, [pc, #404]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc4:	4b62      	ldr	r3, [pc, #392]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	061b      	lsls	r3, r3, #24
 8003bd2:	495f      	ldr	r1, [pc, #380]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
 8003bd8:	e018      	b.n	8003c0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bda:	4b5d      	ldr	r3, [pc, #372]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a5c      	ldr	r2, [pc, #368]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003be0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be6:	f7fe f891 	bl	8001d0c <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bee:	f7fe f88d 	bl	8001d0c <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e1f9      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c00:	4b53      	ldr	r3, [pc, #332]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1f0      	bne.n	8003bee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d03c      	beq.n	8003c92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01c      	beq.n	8003c5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c20:	4b4b      	ldr	r3, [pc, #300]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c26:	4a4a      	ldr	r2, [pc, #296]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c30:	f7fe f86c 	bl	8001d0c <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c38:	f7fe f868 	bl	8001d0c <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e1d4      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c4a:	4b41      	ldr	r3, [pc, #260]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0ef      	beq.n	8003c38 <HAL_RCC_OscConfig+0x3ec>
 8003c58:	e01b      	b.n	8003c92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c5a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c60:	4a3b      	ldr	r2, [pc, #236]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003c62:	f023 0301 	bic.w	r3, r3, #1
 8003c66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6a:	f7fe f84f 	bl	8001d0c <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c72:	f7fe f84b 	bl	8001d0c <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e1b7      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c84:	4b32      	ldr	r3, [pc, #200]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1ef      	bne.n	8003c72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 80a6 	beq.w	8003dec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10d      	bne.n	8003ccc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb0:	4b27      	ldr	r3, [pc, #156]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb4:	4a26      	ldr	r2, [pc, #152]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cbc:	4b24      	ldr	r3, [pc, #144]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ccc:	4b21      	ldr	r3, [pc, #132]	@ (8003d54 <HAL_RCC_OscConfig+0x508>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d118      	bne.n	8003d0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8003d54 <HAL_RCC_OscConfig+0x508>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8003d54 <HAL_RCC_OscConfig+0x508>)
 8003cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ce4:	f7fe f812 	bl	8001d0c <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cec:	f7fe f80e 	bl	8001d0c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e17a      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cfe:	4b15      	ldr	r3, [pc, #84]	@ (8003d54 <HAL_RCC_OscConfig+0x508>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d108      	bne.n	8003d24 <HAL_RCC_OscConfig+0x4d8>
 8003d12:	4b0f      	ldr	r3, [pc, #60]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d18:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d22:	e029      	b.n	8003d78 <HAL_RCC_OscConfig+0x52c>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2b05      	cmp	r3, #5
 8003d2a:	d115      	bne.n	8003d58 <HAL_RCC_OscConfig+0x50c>
 8003d2c:	4b08      	ldr	r3, [pc, #32]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d32:	4a07      	ldr	r2, [pc, #28]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003d34:	f043 0304 	orr.w	r3, r3, #4
 8003d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d3c:	4b04      	ldr	r3, [pc, #16]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d42:	4a03      	ldr	r2, [pc, #12]	@ (8003d50 <HAL_RCC_OscConfig+0x504>)
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d4c:	e014      	b.n	8003d78 <HAL_RCC_OscConfig+0x52c>
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000
 8003d54:	40007000 	.word	0x40007000
 8003d58:	4b9c      	ldr	r3, [pc, #624]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5e:	4a9b      	ldr	r2, [pc, #620]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d68:	4b98      	ldr	r3, [pc, #608]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d6e:	4a97      	ldr	r2, [pc, #604]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003d70:	f023 0304 	bic.w	r3, r3, #4
 8003d74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d016      	beq.n	8003dae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d80:	f7fd ffc4 	bl	8001d0c <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d86:	e00a      	b.n	8003d9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d88:	f7fd ffc0 	bl	8001d0c <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e12a      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d9e:	4b8b      	ldr	r3, [pc, #556]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0ed      	beq.n	8003d88 <HAL_RCC_OscConfig+0x53c>
 8003dac:	e015      	b.n	8003dda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dae:	f7fd ffad 	bl	8001d0c <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003db4:	e00a      	b.n	8003dcc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db6:	f7fd ffa9 	bl	8001d0c <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e113      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dcc:	4b7f      	ldr	r3, [pc, #508]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1ed      	bne.n	8003db6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dda:	7ffb      	ldrb	r3, [r7, #31]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d105      	bne.n	8003dec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003de0:	4b7a      	ldr	r3, [pc, #488]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de4:	4a79      	ldr	r2, [pc, #484]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003de6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dea:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 80fe 	beq.w	8003ff2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	f040 80d0 	bne.w	8003fa0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e00:	4b72      	ldr	r3, [pc, #456]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f003 0203 	and.w	r2, r3, #3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d130      	bne.n	8003e76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d127      	bne.n	8003e76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e30:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d11f      	bne.n	8003e76 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e40:	2a07      	cmp	r2, #7
 8003e42:	bf14      	ite	ne
 8003e44:	2201      	movne	r2, #1
 8003e46:	2200      	moveq	r2, #0
 8003e48:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d113      	bne.n	8003e76 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e58:	085b      	lsrs	r3, r3, #1
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d109      	bne.n	8003e76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d06e      	beq.n	8003f54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2b0c      	cmp	r3, #12
 8003e7a:	d069      	beq.n	8003f50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e7c:	4b53      	ldr	r3, [pc, #332]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d105      	bne.n	8003e94 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e88:	4b50      	ldr	r3, [pc, #320]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0ad      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e98:	4b4c      	ldr	r3, [pc, #304]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a4b      	ldr	r2, [pc, #300]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003e9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ea2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ea4:	f7fd ff32 	bl	8001d0c <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eac:	f7fd ff2e 	bl	8001d0c <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e09a      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ebe:	4b43      	ldr	r3, [pc, #268]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eca:	4b40      	ldr	r3, [pc, #256]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	4b40      	ldr	r3, [pc, #256]	@ (8003fd0 <HAL_RCC_OscConfig+0x784>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003eda:	3a01      	subs	r2, #1
 8003edc:	0112      	lsls	r2, r2, #4
 8003ede:	4311      	orrs	r1, r2
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ee4:	0212      	lsls	r2, r2, #8
 8003ee6:	4311      	orrs	r1, r2
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003eec:	0852      	lsrs	r2, r2, #1
 8003eee:	3a01      	subs	r2, #1
 8003ef0:	0552      	lsls	r2, r2, #21
 8003ef2:	4311      	orrs	r1, r2
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ef8:	0852      	lsrs	r2, r2, #1
 8003efa:	3a01      	subs	r2, #1
 8003efc:	0652      	lsls	r2, r2, #25
 8003efe:	4311      	orrs	r1, r2
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f04:	0912      	lsrs	r2, r2, #4
 8003f06:	0452      	lsls	r2, r2, #17
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	4930      	ldr	r1, [pc, #192]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f10:	4b2e      	ldr	r3, [pc, #184]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a2d      	ldr	r2, [pc, #180]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003f16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	4a2a      	ldr	r2, [pc, #168]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f28:	f7fd fef0 	bl	8001d0c <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f30:	f7fd feec 	bl	8001d0c <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e058      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f42:	4b22      	ldr	r3, [pc, #136]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f4e:	e050      	b.n	8003ff2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e04f      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f54:	4b1d      	ldr	r3, [pc, #116]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d148      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f60:	4b1a      	ldr	r3, [pc, #104]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a19      	ldr	r2, [pc, #100]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003f66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f6c:	4b17      	ldr	r3, [pc, #92]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4a16      	ldr	r2, [pc, #88]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003f72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f78:	f7fd fec8 	bl	8001d0c <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f80:	f7fd fec4 	bl	8001d0c <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e030      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f92:	4b0e      	ldr	r3, [pc, #56]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0f0      	beq.n	8003f80 <HAL_RCC_OscConfig+0x734>
 8003f9e:	e028      	b.n	8003ff2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2b0c      	cmp	r3, #12
 8003fa4:	d023      	beq.n	8003fee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa6:	4b09      	ldr	r3, [pc, #36]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a08      	ldr	r2, [pc, #32]	@ (8003fcc <HAL_RCC_OscConfig+0x780>)
 8003fac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb2:	f7fd feab 	bl	8001d0c <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb8:	e00c      	b.n	8003fd4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fba:	f7fd fea7 	bl	8001d0c <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d905      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e013      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fd4:	4b09      	ldr	r3, [pc, #36]	@ (8003ffc <HAL_RCC_OscConfig+0x7b0>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1ec      	bne.n	8003fba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003fe0:	4b06      	ldr	r3, [pc, #24]	@ (8003ffc <HAL_RCC_OscConfig+0x7b0>)
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	4905      	ldr	r1, [pc, #20]	@ (8003ffc <HAL_RCC_OscConfig+0x7b0>)
 8003fe6:	4b06      	ldr	r3, [pc, #24]	@ (8004000 <HAL_RCC_OscConfig+0x7b4>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	60cb      	str	r3, [r1, #12]
 8003fec:	e001      	b.n	8003ff2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3720      	adds	r7, #32
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40021000 	.word	0x40021000
 8004000:	feeefffc 	.word	0xfeeefffc

08004004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0e7      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004018:	4b75      	ldr	r3, [pc, #468]	@ (80041f0 <HAL_RCC_ClockConfig+0x1ec>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d910      	bls.n	8004048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004026:	4b72      	ldr	r3, [pc, #456]	@ (80041f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f023 0207 	bic.w	r2, r3, #7
 800402e:	4970      	ldr	r1, [pc, #448]	@ (80041f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004036:	4b6e      	ldr	r3, [pc, #440]	@ (80041f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0cf      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d010      	beq.n	8004076 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	4b66      	ldr	r3, [pc, #408]	@ (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004060:	429a      	cmp	r2, r3
 8004062:	d908      	bls.n	8004076 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004064:	4b63      	ldr	r3, [pc, #396]	@ (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4960      	ldr	r1, [pc, #384]	@ (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d04c      	beq.n	800411c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b03      	cmp	r3, #3
 8004088:	d107      	bne.n	800409a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800408a:	4b5a      	ldr	r3, [pc, #360]	@ (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d121      	bne.n	80040da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e0a6      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d107      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040a2:	4b54      	ldr	r3, [pc, #336]	@ (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d115      	bne.n	80040da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e09a      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d107      	bne.n	80040ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040ba:	4b4e      	ldr	r3, [pc, #312]	@ (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e08e      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ca:	4b4a      	ldr	r3, [pc, #296]	@ (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e086      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040da:	4b46      	ldr	r3, [pc, #280]	@ (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f023 0203 	bic.w	r2, r3, #3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	4943      	ldr	r1, [pc, #268]	@ (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ec:	f7fd fe0e 	bl	8001d0c <HAL_GetTick>
 80040f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f2:	e00a      	b.n	800410a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f4:	f7fd fe0a 	bl	8001d0c <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e06e      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410a:	4b3a      	ldr	r3, [pc, #232]	@ (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 020c 	and.w	r2, r3, #12
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	429a      	cmp	r2, r3
 800411a:	d1eb      	bne.n	80040f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d010      	beq.n	800414a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	4b31      	ldr	r3, [pc, #196]	@ (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004134:	429a      	cmp	r2, r3
 8004136:	d208      	bcs.n	800414a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004138:	4b2e      	ldr	r3, [pc, #184]	@ (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	492b      	ldr	r1, [pc, #172]	@ (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004146:	4313      	orrs	r3, r2
 8004148:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800414a:	4b29      	ldr	r3, [pc, #164]	@ (80041f0 <HAL_RCC_ClockConfig+0x1ec>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d210      	bcs.n	800417a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004158:	4b25      	ldr	r3, [pc, #148]	@ (80041f0 <HAL_RCC_ClockConfig+0x1ec>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f023 0207 	bic.w	r2, r3, #7
 8004160:	4923      	ldr	r1, [pc, #140]	@ (80041f0 <HAL_RCC_ClockConfig+0x1ec>)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	4313      	orrs	r3, r2
 8004166:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004168:	4b21      	ldr	r3, [pc, #132]	@ (80041f0 <HAL_RCC_ClockConfig+0x1ec>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	429a      	cmp	r2, r3
 8004174:	d001      	beq.n	800417a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e036      	b.n	80041e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004186:	4b1b      	ldr	r3, [pc, #108]	@ (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	4918      	ldr	r1, [pc, #96]	@ (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 8004194:	4313      	orrs	r3, r2
 8004196:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d009      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041a4:	4b13      	ldr	r3, [pc, #76]	@ (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	4910      	ldr	r1, [pc, #64]	@ (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041b8:	f000 f824 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 80041bc:	4602      	mov	r2, r0
 80041be:	4b0d      	ldr	r3, [pc, #52]	@ (80041f4 <HAL_RCC_ClockConfig+0x1f0>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	091b      	lsrs	r3, r3, #4
 80041c4:	f003 030f 	and.w	r3, r3, #15
 80041c8:	490b      	ldr	r1, [pc, #44]	@ (80041f8 <HAL_RCC_ClockConfig+0x1f4>)
 80041ca:	5ccb      	ldrb	r3, [r1, r3]
 80041cc:	f003 031f 	and.w	r3, r3, #31
 80041d0:	fa22 f303 	lsr.w	r3, r2, r3
 80041d4:	4a09      	ldr	r2, [pc, #36]	@ (80041fc <HAL_RCC_ClockConfig+0x1f8>)
 80041d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041d8:	4b09      	ldr	r3, [pc, #36]	@ (8004200 <HAL_RCC_ClockConfig+0x1fc>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fd f8fd 	bl	80013dc <HAL_InitTick>
 80041e2:	4603      	mov	r3, r0
 80041e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80041e6:	7afb      	ldrb	r3, [r7, #11]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40022000 	.word	0x40022000
 80041f4:	40021000 	.word	0x40021000
 80041f8:	08008980 	.word	0x08008980
 80041fc:	20000000 	.word	0x20000000
 8004200:	20000040 	.word	0x20000040

08004204 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004204:	b480      	push	{r7}
 8004206:	b089      	sub	sp, #36	@ 0x24
 8004208:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	2300      	movs	r3, #0
 8004210:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004212:	4b3e      	ldr	r3, [pc, #248]	@ (800430c <HAL_RCC_GetSysClockFreq+0x108>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 030c 	and.w	r3, r3, #12
 800421a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800421c:	4b3b      	ldr	r3, [pc, #236]	@ (800430c <HAL_RCC_GetSysClockFreq+0x108>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0303 	and.w	r3, r3, #3
 8004224:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_RCC_GetSysClockFreq+0x34>
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b0c      	cmp	r3, #12
 8004230:	d121      	bne.n	8004276 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d11e      	bne.n	8004276 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004238:	4b34      	ldr	r3, [pc, #208]	@ (800430c <HAL_RCC_GetSysClockFreq+0x108>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d107      	bne.n	8004254 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004244:	4b31      	ldr	r3, [pc, #196]	@ (800430c <HAL_RCC_GetSysClockFreq+0x108>)
 8004246:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800424a:	0a1b      	lsrs	r3, r3, #8
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	e005      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004254:	4b2d      	ldr	r3, [pc, #180]	@ (800430c <HAL_RCC_GetSysClockFreq+0x108>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	091b      	lsrs	r3, r3, #4
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004260:	4a2b      	ldr	r2, [pc, #172]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004268:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10d      	bne.n	800428c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004274:	e00a      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b04      	cmp	r3, #4
 800427a:	d102      	bne.n	8004282 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800427c:	4b25      	ldr	r3, [pc, #148]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x110>)
 800427e:	61bb      	str	r3, [r7, #24]
 8004280:	e004      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b08      	cmp	r3, #8
 8004286:	d101      	bne.n	800428c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004288:	4b23      	ldr	r3, [pc, #140]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x114>)
 800428a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	2b0c      	cmp	r3, #12
 8004290:	d134      	bne.n	80042fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004292:	4b1e      	ldr	r3, [pc, #120]	@ (800430c <HAL_RCC_GetSysClockFreq+0x108>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d003      	beq.n	80042aa <HAL_RCC_GetSysClockFreq+0xa6>
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d003      	beq.n	80042b0 <HAL_RCC_GetSysClockFreq+0xac>
 80042a8:	e005      	b.n	80042b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x110>)
 80042ac:	617b      	str	r3, [r7, #20]
      break;
 80042ae:	e005      	b.n	80042bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042b0:	4b19      	ldr	r3, [pc, #100]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x114>)
 80042b2:	617b      	str	r3, [r7, #20]
      break;
 80042b4:	e002      	b.n	80042bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	617b      	str	r3, [r7, #20]
      break;
 80042ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042bc:	4b13      	ldr	r3, [pc, #76]	@ (800430c <HAL_RCC_GetSysClockFreq+0x108>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	3301      	adds	r3, #1
 80042c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042ca:	4b10      	ldr	r3, [pc, #64]	@ (800430c <HAL_RCC_GetSysClockFreq+0x108>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	fb03 f202 	mul.w	r2, r3, r2
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042e2:	4b0a      	ldr	r3, [pc, #40]	@ (800430c <HAL_RCC_GetSysClockFreq+0x108>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	0e5b      	lsrs	r3, r3, #25
 80042e8:	f003 0303 	and.w	r3, r3, #3
 80042ec:	3301      	adds	r3, #1
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042fc:	69bb      	ldr	r3, [r7, #24]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3724      	adds	r7, #36	@ 0x24
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40021000 	.word	0x40021000
 8004310:	08008998 	.word	0x08008998
 8004314:	00f42400 	.word	0x00f42400
 8004318:	007a1200 	.word	0x007a1200

0800431c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004320:	4b03      	ldr	r3, [pc, #12]	@ (8004330 <HAL_RCC_GetHCLKFreq+0x14>)
 8004322:	681b      	ldr	r3, [r3, #0]
}
 8004324:	4618      	mov	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	20000000 	.word	0x20000000

08004334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004338:	f7ff fff0 	bl	800431c <HAL_RCC_GetHCLKFreq>
 800433c:	4602      	mov	r2, r0
 800433e:	4b06      	ldr	r3, [pc, #24]	@ (8004358 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	0a1b      	lsrs	r3, r3, #8
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	4904      	ldr	r1, [pc, #16]	@ (800435c <HAL_RCC_GetPCLK1Freq+0x28>)
 800434a:	5ccb      	ldrb	r3, [r1, r3]
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004354:	4618      	mov	r0, r3
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40021000 	.word	0x40021000
 800435c:	08008990 	.word	0x08008990

08004360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004364:	f7ff ffda 	bl	800431c <HAL_RCC_GetHCLKFreq>
 8004368:	4602      	mov	r2, r0
 800436a:	4b06      	ldr	r3, [pc, #24]	@ (8004384 <HAL_RCC_GetPCLK2Freq+0x24>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	0adb      	lsrs	r3, r3, #11
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	4904      	ldr	r1, [pc, #16]	@ (8004388 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004376:	5ccb      	ldrb	r3, [r1, r3]
 8004378:	f003 031f 	and.w	r3, r3, #31
 800437c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004380:	4618      	mov	r0, r3
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40021000 	.word	0x40021000
 8004388:	08008990 	.word	0x08008990

0800438c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	220f      	movs	r2, #15
 800439a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800439c:	4b12      	ldr	r3, [pc, #72]	@ (80043e8 <HAL_RCC_GetClockConfig+0x5c>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 0203 	and.w	r2, r3, #3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80043a8:	4b0f      	ldr	r3, [pc, #60]	@ (80043e8 <HAL_RCC_GetClockConfig+0x5c>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80043b4:	4b0c      	ldr	r3, [pc, #48]	@ (80043e8 <HAL_RCC_GetClockConfig+0x5c>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80043c0:	4b09      	ldr	r3, [pc, #36]	@ (80043e8 <HAL_RCC_GetClockConfig+0x5c>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	08db      	lsrs	r3, r3, #3
 80043c6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80043ce:	4b07      	ldr	r3, [pc, #28]	@ (80043ec <HAL_RCC_GetClockConfig+0x60>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0207 	and.w	r2, r3, #7
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	601a      	str	r2, [r3, #0]
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40021000 	.word	0x40021000
 80043ec:	40022000 	.word	0x40022000

080043f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043f8:	2300      	movs	r3, #0
 80043fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043fc:	4b2a      	ldr	r3, [pc, #168]	@ (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004408:	f7ff f8f0 	bl	80035ec <HAL_PWREx_GetVoltageRange>
 800440c:	6178      	str	r0, [r7, #20]
 800440e:	e014      	b.n	800443a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004410:	4b25      	ldr	r3, [pc, #148]	@ (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004414:	4a24      	ldr	r2, [pc, #144]	@ (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800441a:	6593      	str	r3, [r2, #88]	@ 0x58
 800441c:	4b22      	ldr	r3, [pc, #136]	@ (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800441e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004428:	f7ff f8e0 	bl	80035ec <HAL_PWREx_GetVoltageRange>
 800442c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800442e:	4b1e      	ldr	r3, [pc, #120]	@ (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004432:	4a1d      	ldr	r2, [pc, #116]	@ (80044a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004434:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004438:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004440:	d10b      	bne.n	800445a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b80      	cmp	r3, #128	@ 0x80
 8004446:	d919      	bls.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2ba0      	cmp	r3, #160	@ 0xa0
 800444c:	d902      	bls.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800444e:	2302      	movs	r3, #2
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	e013      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004454:	2301      	movs	r3, #1
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	e010      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b80      	cmp	r3, #128	@ 0x80
 800445e:	d902      	bls.n	8004466 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004460:	2303      	movs	r3, #3
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	e00a      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b80      	cmp	r3, #128	@ 0x80
 800446a:	d102      	bne.n	8004472 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800446c:	2302      	movs	r3, #2
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	e004      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b70      	cmp	r3, #112	@ 0x70
 8004476:	d101      	bne.n	800447c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004478:	2301      	movs	r3, #1
 800447a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800447c:	4b0b      	ldr	r3, [pc, #44]	@ (80044ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f023 0207 	bic.w	r2, r3, #7
 8004484:	4909      	ldr	r1, [pc, #36]	@ (80044ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800448c:	4b07      	ldr	r3, [pc, #28]	@ (80044ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	429a      	cmp	r2, r3
 8004498:	d001      	beq.n	800449e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40021000 	.word	0x40021000
 80044ac:	40022000 	.word	0x40022000

080044b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044b8:	2300      	movs	r3, #0
 80044ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044bc:	2300      	movs	r3, #0
 80044be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d041      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044d4:	d02a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044d6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044da:	d824      	bhi.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044e0:	d008      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044e6:	d81e      	bhi.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044f0:	d010      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044f2:	e018      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044f4:	4b86      	ldr	r3, [pc, #536]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4a85      	ldr	r2, [pc, #532]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004500:	e015      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3304      	adds	r3, #4
 8004506:	2100      	movs	r1, #0
 8004508:	4618      	mov	r0, r3
 800450a:	f000 facb 	bl	8004aa4 <RCCEx_PLLSAI1_Config>
 800450e:	4603      	mov	r3, r0
 8004510:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004512:	e00c      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3320      	adds	r3, #32
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fbb6 	bl	8004c8c <RCCEx_PLLSAI2_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004524:	e003      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	74fb      	strb	r3, [r7, #19]
      break;
 800452a:	e000      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800452c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800452e:	7cfb      	ldrb	r3, [r7, #19]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10b      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004534:	4b76      	ldr	r3, [pc, #472]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800453a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004542:	4973      	ldr	r1, [pc, #460]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800454a:	e001      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454c:	7cfb      	ldrb	r3, [r7, #19]
 800454e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d041      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004560:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004564:	d02a      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004566:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800456a:	d824      	bhi.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800456c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004570:	d008      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004572:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004576:	d81e      	bhi.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800457c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004580:	d010      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004582:	e018      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004584:	4b62      	ldr	r3, [pc, #392]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	4a61      	ldr	r2, [pc, #388]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800458a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800458e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004590:	e015      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3304      	adds	r3, #4
 8004596:	2100      	movs	r1, #0
 8004598:	4618      	mov	r0, r3
 800459a:	f000 fa83 	bl	8004aa4 <RCCEx_PLLSAI1_Config>
 800459e:	4603      	mov	r3, r0
 80045a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045a2:	e00c      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3320      	adds	r3, #32
 80045a8:	2100      	movs	r1, #0
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fb6e 	bl	8004c8c <RCCEx_PLLSAI2_Config>
 80045b0:	4603      	mov	r3, r0
 80045b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80045b4:	e003      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	74fb      	strb	r3, [r7, #19]
      break;
 80045ba:	e000      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80045bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045be:	7cfb      	ldrb	r3, [r7, #19]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10b      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045c4:	4b52      	ldr	r3, [pc, #328]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045d2:	494f      	ldr	r1, [pc, #316]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80045da:	e001      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045dc:	7cfb      	ldrb	r3, [r7, #19]
 80045de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80a0 	beq.w	800472e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ee:	2300      	movs	r3, #0
 80045f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045f2:	4b47      	ldr	r3, [pc, #284]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004602:	2300      	movs	r3, #0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00d      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004608:	4b41      	ldr	r3, [pc, #260]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800460c:	4a40      	ldr	r2, [pc, #256]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004612:	6593      	str	r3, [r2, #88]	@ 0x58
 8004614:	4b3e      	ldr	r3, [pc, #248]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004620:	2301      	movs	r3, #1
 8004622:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004624:	4b3b      	ldr	r3, [pc, #236]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a3a      	ldr	r2, [pc, #232]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800462a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800462e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004630:	f7fd fb6c 	bl	8001d0c <HAL_GetTick>
 8004634:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004636:	e009      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004638:	f7fd fb68 	bl	8001d0c <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d902      	bls.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	74fb      	strb	r3, [r7, #19]
        break;
 800464a:	e005      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800464c:	4b31      	ldr	r3, [pc, #196]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0ef      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004658:	7cfb      	ldrb	r3, [r7, #19]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d15c      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800465e:	4b2c      	ldr	r3, [pc, #176]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004664:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004668:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01f      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	429a      	cmp	r2, r3
 800467a:	d019      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800467c:	4b24      	ldr	r3, [pc, #144]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004686:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004688:	4b21      	ldr	r3, [pc, #132]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800468e:	4a20      	ldr	r2, [pc, #128]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004698:	4b1d      	ldr	r3, [pc, #116]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800469e:	4a1c      	ldr	r2, [pc, #112]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046a8:	4a19      	ldr	r2, [pc, #100]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d016      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ba:	f7fd fb27 	bl	8001d0c <HAL_GetTick>
 80046be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c0:	e00b      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c2:	f7fd fb23 	bl	8001d0c <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d902      	bls.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	74fb      	strb	r3, [r7, #19]
            break;
 80046d8:	e006      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046da:	4b0d      	ldr	r3, [pc, #52]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0ec      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80046e8:	7cfb      	ldrb	r3, [r7, #19]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10c      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ee:	4b08      	ldr	r3, [pc, #32]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046fe:	4904      	ldr	r1, [pc, #16]	@ (8004710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004706:	e009      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004708:	7cfb      	ldrb	r3, [r7, #19]
 800470a:	74bb      	strb	r3, [r7, #18]
 800470c:	e006      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800470e:	bf00      	nop
 8004710:	40021000 	.word	0x40021000
 8004714:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004718:	7cfb      	ldrb	r3, [r7, #19]
 800471a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800471c:	7c7b      	ldrb	r3, [r7, #17]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d105      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004722:	4b9e      	ldr	r3, [pc, #632]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004726:	4a9d      	ldr	r2, [pc, #628]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004728:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800472c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800473a:	4b98      	ldr	r3, [pc, #608]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004740:	f023 0203 	bic.w	r2, r3, #3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004748:	4994      	ldr	r1, [pc, #592]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800475c:	4b8f      	ldr	r3, [pc, #572]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004762:	f023 020c 	bic.w	r2, r3, #12
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800476a:	498c      	ldr	r1, [pc, #560]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800477e:	4b87      	ldr	r3, [pc, #540]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004784:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478c:	4983      	ldr	r1, [pc, #524]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047a0:	4b7e      	ldr	r3, [pc, #504]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ae:	497b      	ldr	r1, [pc, #492]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0310 	and.w	r3, r3, #16
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047c2:	4b76      	ldr	r3, [pc, #472]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047d0:	4972      	ldr	r1, [pc, #456]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047e4:	4b6d      	ldr	r3, [pc, #436]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047f2:	496a      	ldr	r1, [pc, #424]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004806:	4b65      	ldr	r3, [pc, #404]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004814:	4961      	ldr	r1, [pc, #388]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004828:	4b5c      	ldr	r3, [pc, #368]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004836:	4959      	ldr	r1, [pc, #356]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800484a:	4b54      	ldr	r3, [pc, #336]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004850:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004858:	4950      	ldr	r1, [pc, #320]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800486c:	4b4b      	ldr	r3, [pc, #300]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004872:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800487a:	4948      	ldr	r1, [pc, #288]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800488e:	4b43      	ldr	r3, [pc, #268]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004894:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489c:	493f      	ldr	r1, [pc, #252]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d028      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048b0:	4b3a      	ldr	r3, [pc, #232]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048be:	4937      	ldr	r1, [pc, #220]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048ce:	d106      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048d0:	4b32      	ldr	r3, [pc, #200]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4a31      	ldr	r2, [pc, #196]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048da:	60d3      	str	r3, [r2, #12]
 80048dc:	e011      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048e6:	d10c      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3304      	adds	r3, #4
 80048ec:	2101      	movs	r1, #1
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 f8d8 	bl	8004aa4 <RCCEx_PLLSAI1_Config>
 80048f4:	4603      	mov	r3, r0
 80048f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048f8:	7cfb      	ldrb	r3, [r7, #19]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80048fe:	7cfb      	ldrb	r3, [r7, #19]
 8004900:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d028      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800490e:	4b23      	ldr	r3, [pc, #140]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004914:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491c:	491f      	ldr	r1, [pc, #124]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004928:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800492c:	d106      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800492e:	4b1b      	ldr	r3, [pc, #108]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	4a1a      	ldr	r2, [pc, #104]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004934:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004938:	60d3      	str	r3, [r2, #12]
 800493a:	e011      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004940:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004944:	d10c      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3304      	adds	r3, #4
 800494a:	2101      	movs	r1, #1
 800494c:	4618      	mov	r0, r3
 800494e:	f000 f8a9 	bl	8004aa4 <RCCEx_PLLSAI1_Config>
 8004952:	4603      	mov	r3, r0
 8004954:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004956:	7cfb      	ldrb	r3, [r7, #19]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800495c:	7cfb      	ldrb	r3, [r7, #19]
 800495e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d02b      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800496c:	4b0b      	ldr	r3, [pc, #44]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004972:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800497a:	4908      	ldr	r1, [pc, #32]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004986:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800498a:	d109      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800498c:	4b03      	ldr	r3, [pc, #12]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	4a02      	ldr	r2, [pc, #8]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004992:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004996:	60d3      	str	r3, [r2, #12]
 8004998:	e014      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800499a:	bf00      	nop
 800499c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3304      	adds	r3, #4
 80049ae:	2101      	movs	r1, #1
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 f877 	bl	8004aa4 <RCCEx_PLLSAI1_Config>
 80049b6:	4603      	mov	r3, r0
 80049b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049ba:	7cfb      	ldrb	r3, [r7, #19]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80049c0:	7cfb      	ldrb	r3, [r7, #19]
 80049c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d02f      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049de:	4928      	ldr	r1, [pc, #160]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049ee:	d10d      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3304      	adds	r3, #4
 80049f4:	2102      	movs	r1, #2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 f854 	bl	8004aa4 <RCCEx_PLLSAI1_Config>
 80049fc:	4603      	mov	r3, r0
 80049fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a00:	7cfb      	ldrb	r3, [r7, #19]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d014      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a06:	7cfb      	ldrb	r3, [r7, #19]
 8004a08:	74bb      	strb	r3, [r7, #18]
 8004a0a:	e011      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a14:	d10c      	bne.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3320      	adds	r3, #32
 8004a1a:	2102      	movs	r1, #2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 f935 	bl	8004c8c <RCCEx_PLLSAI2_Config>
 8004a22:	4603      	mov	r3, r0
 8004a24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a26:	7cfb      	ldrb	r3, [r7, #19]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a2c:	7cfb      	ldrb	r3, [r7, #19]
 8004a2e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a3c:	4b10      	ldr	r3, [pc, #64]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a42:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a4a:	490d      	ldr	r1, [pc, #52]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a5e:	4b08      	ldr	r3, [pc, #32]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a6e:	4904      	ldr	r1, [pc, #16]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a76:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40021000 	.word	0x40021000

08004a84 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004a88:	4b05      	ldr	r3, [pc, #20]	@ (8004aa0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a04      	ldr	r2, [pc, #16]	@ (8004aa0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a8e:	f043 0304 	orr.w	r3, r3, #4
 8004a92:	6013      	str	r3, [r2, #0]
}
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40021000 	.word	0x40021000

08004aa4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ab2:	4b75      	ldr	r3, [pc, #468]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d018      	beq.n	8004af0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004abe:	4b72      	ldr	r3, [pc, #456]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f003 0203 	and.w	r2, r3, #3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d10d      	bne.n	8004aea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
       ||
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ad6:	4b6c      	ldr	r3, [pc, #432]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	091b      	lsrs	r3, r3, #4
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
       ||
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d047      	beq.n	8004b7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	73fb      	strb	r3, [r7, #15]
 8004aee:	e044      	b.n	8004b7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d018      	beq.n	8004b2a <RCCEx_PLLSAI1_Config+0x86>
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d825      	bhi.n	8004b48 <RCCEx_PLLSAI1_Config+0xa4>
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d002      	beq.n	8004b06 <RCCEx_PLLSAI1_Config+0x62>
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d009      	beq.n	8004b18 <RCCEx_PLLSAI1_Config+0x74>
 8004b04:	e020      	b.n	8004b48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b06:	4b60      	ldr	r3, [pc, #384]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d11d      	bne.n	8004b4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b16:	e01a      	b.n	8004b4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b18:	4b5b      	ldr	r3, [pc, #364]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d116      	bne.n	8004b52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b28:	e013      	b.n	8004b52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b2a:	4b57      	ldr	r3, [pc, #348]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10f      	bne.n	8004b56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b36:	4b54      	ldr	r3, [pc, #336]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d109      	bne.n	8004b56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b46:	e006      	b.n	8004b56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b4c:	e004      	b.n	8004b58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b4e:	bf00      	nop
 8004b50:	e002      	b.n	8004b58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b52:	bf00      	nop
 8004b54:	e000      	b.n	8004b58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b56:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10d      	bne.n	8004b7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6819      	ldr	r1, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	430b      	orrs	r3, r1
 8004b74:	4944      	ldr	r1, [pc, #272]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d17d      	bne.n	8004c7c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b80:	4b41      	ldr	r3, [pc, #260]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a40      	ldr	r2, [pc, #256]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b8c:	f7fd f8be 	bl	8001d0c <HAL_GetTick>
 8004b90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b92:	e009      	b.n	8004ba8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b94:	f7fd f8ba 	bl	8001d0c <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d902      	bls.n	8004ba8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ba6:	e005      	b.n	8004bb4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ba8:	4b37      	ldr	r3, [pc, #220]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1ef      	bne.n	8004b94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d160      	bne.n	8004c7c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d111      	bne.n	8004be4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bc0:	4b31      	ldr	r3, [pc, #196]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6892      	ldr	r2, [r2, #8]
 8004bd0:	0211      	lsls	r1, r2, #8
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	68d2      	ldr	r2, [r2, #12]
 8004bd6:	0912      	lsrs	r2, r2, #4
 8004bd8:	0452      	lsls	r2, r2, #17
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	492a      	ldr	r1, [pc, #168]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	610b      	str	r3, [r1, #16]
 8004be2:	e027      	b.n	8004c34 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d112      	bne.n	8004c10 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bea:	4b27      	ldr	r3, [pc, #156]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004bf2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6892      	ldr	r2, [r2, #8]
 8004bfa:	0211      	lsls	r1, r2, #8
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6912      	ldr	r2, [r2, #16]
 8004c00:	0852      	lsrs	r2, r2, #1
 8004c02:	3a01      	subs	r2, #1
 8004c04:	0552      	lsls	r2, r2, #21
 8004c06:	430a      	orrs	r2, r1
 8004c08:	491f      	ldr	r1, [pc, #124]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	610b      	str	r3, [r1, #16]
 8004c0e:	e011      	b.n	8004c34 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c10:	4b1d      	ldr	r3, [pc, #116]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c18:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6892      	ldr	r2, [r2, #8]
 8004c20:	0211      	lsls	r1, r2, #8
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6952      	ldr	r2, [r2, #20]
 8004c26:	0852      	lsrs	r2, r2, #1
 8004c28:	3a01      	subs	r2, #1
 8004c2a:	0652      	lsls	r2, r2, #25
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	4916      	ldr	r1, [pc, #88]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c34:	4b14      	ldr	r3, [pc, #80]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a13      	ldr	r2, [pc, #76]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c40:	f7fd f864 	bl	8001d0c <HAL_GetTick>
 8004c44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c46:	e009      	b.n	8004c5c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c48:	f7fd f860 	bl	8001d0c <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d902      	bls.n	8004c5c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	73fb      	strb	r3, [r7, #15]
          break;
 8004c5a:	e005      	b.n	8004c68 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0ef      	beq.n	8004c48 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c6e:	4b06      	ldr	r3, [pc, #24]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	4904      	ldr	r1, [pc, #16]	@ (8004c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40021000 	.word	0x40021000

08004c8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c9a:	4b6a      	ldr	r3, [pc, #424]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d018      	beq.n	8004cd8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ca6:	4b67      	ldr	r3, [pc, #412]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f003 0203 	and.w	r2, r3, #3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d10d      	bne.n	8004cd2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
       ||
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d009      	beq.n	8004cd2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004cbe:	4b61      	ldr	r3, [pc, #388]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	091b      	lsrs	r3, r3, #4
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
       ||
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d047      	beq.n	8004d62 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	73fb      	strb	r3, [r7, #15]
 8004cd6:	e044      	b.n	8004d62 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d018      	beq.n	8004d12 <RCCEx_PLLSAI2_Config+0x86>
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d825      	bhi.n	8004d30 <RCCEx_PLLSAI2_Config+0xa4>
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d002      	beq.n	8004cee <RCCEx_PLLSAI2_Config+0x62>
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d009      	beq.n	8004d00 <RCCEx_PLLSAI2_Config+0x74>
 8004cec:	e020      	b.n	8004d30 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cee:	4b55      	ldr	r3, [pc, #340]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d11d      	bne.n	8004d36 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cfe:	e01a      	b.n	8004d36 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d00:	4b50      	ldr	r3, [pc, #320]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d116      	bne.n	8004d3a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d10:	e013      	b.n	8004d3a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d12:	4b4c      	ldr	r3, [pc, #304]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10f      	bne.n	8004d3e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d1e:	4b49      	ldr	r3, [pc, #292]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d2e:	e006      	b.n	8004d3e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	73fb      	strb	r3, [r7, #15]
      break;
 8004d34:	e004      	b.n	8004d40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d36:	bf00      	nop
 8004d38:	e002      	b.n	8004d40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d3a:	bf00      	nop
 8004d3c:	e000      	b.n	8004d40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10d      	bne.n	8004d62 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d46:	4b3f      	ldr	r3, [pc, #252]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6819      	ldr	r1, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	4939      	ldr	r1, [pc, #228]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d167      	bne.n	8004e38 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d68:	4b36      	ldr	r3, [pc, #216]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a35      	ldr	r2, [pc, #212]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d74:	f7fc ffca 	bl	8001d0c <HAL_GetTick>
 8004d78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d7a:	e009      	b.n	8004d90 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d7c:	f7fc ffc6 	bl	8001d0c <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d902      	bls.n	8004d90 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	73fb      	strb	r3, [r7, #15]
        break;
 8004d8e:	e005      	b.n	8004d9c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d90:	4b2c      	ldr	r3, [pc, #176]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1ef      	bne.n	8004d7c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d14a      	bne.n	8004e38 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d111      	bne.n	8004dcc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004da8:	4b26      	ldr	r3, [pc, #152]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004db0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6892      	ldr	r2, [r2, #8]
 8004db8:	0211      	lsls	r1, r2, #8
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	68d2      	ldr	r2, [r2, #12]
 8004dbe:	0912      	lsrs	r2, r2, #4
 8004dc0:	0452      	lsls	r2, r2, #17
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	491f      	ldr	r1, [pc, #124]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	614b      	str	r3, [r1, #20]
 8004dca:	e011      	b.n	8004df0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004dd4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6892      	ldr	r2, [r2, #8]
 8004ddc:	0211      	lsls	r1, r2, #8
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6912      	ldr	r2, [r2, #16]
 8004de2:	0852      	lsrs	r2, r2, #1
 8004de4:	3a01      	subs	r2, #1
 8004de6:	0652      	lsls	r2, r2, #25
 8004de8:	430a      	orrs	r2, r1
 8004dea:	4916      	ldr	r1, [pc, #88]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004df0:	4b14      	ldr	r3, [pc, #80]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a13      	ldr	r2, [pc, #76]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dfa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfc:	f7fc ff86 	bl	8001d0c <HAL_GetTick>
 8004e00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e02:	e009      	b.n	8004e18 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e04:	f7fc ff82 	bl	8001d0c <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d902      	bls.n	8004e18 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	73fb      	strb	r3, [r7, #15]
          break;
 8004e16:	e005      	b.n	8004e24 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e18:	4b0a      	ldr	r3, [pc, #40]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0ef      	beq.n	8004e04 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e2a:	4b06      	ldr	r3, [pc, #24]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2c:	695a      	ldr	r2, [r3, #20]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	4904      	ldr	r1, [pc, #16]	@ (8004e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40021000 	.word	0x40021000

08004e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e049      	b.n	8004eee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f841 	bl	8004ef6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3304      	adds	r3, #4
 8004e84:	4619      	mov	r1, r3
 8004e86:	4610      	mov	r0, r2
 8004e88:	f000 f9e0 	bl	800524c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
	...

08004f0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d001      	beq.n	8004f24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e04f      	b.n	8004fc4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a23      	ldr	r2, [pc, #140]	@ (8004fd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d01d      	beq.n	8004f82 <HAL_TIM_Base_Start_IT+0x76>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f4e:	d018      	beq.n	8004f82 <HAL_TIM_Base_Start_IT+0x76>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a1f      	ldr	r2, [pc, #124]	@ (8004fd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <HAL_TIM_Base_Start_IT+0x76>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004fd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00e      	beq.n	8004f82 <HAL_TIM_Base_Start_IT+0x76>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1c      	ldr	r2, [pc, #112]	@ (8004fdc <HAL_TIM_Base_Start_IT+0xd0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d009      	beq.n	8004f82 <HAL_TIM_Base_Start_IT+0x76>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d004      	beq.n	8004f82 <HAL_TIM_Base_Start_IT+0x76>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a19      	ldr	r2, [pc, #100]	@ (8004fe4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d115      	bne.n	8004fae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	4b17      	ldr	r3, [pc, #92]	@ (8004fe8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2b06      	cmp	r3, #6
 8004f92:	d015      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0xb4>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f9a:	d011      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0201 	orr.w	r2, r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fac:	e008      	b.n	8004fc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0201 	orr.w	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	e000      	b.n	8004fc2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	40012c00 	.word	0x40012c00
 8004fd4:	40000400 	.word	0x40000400
 8004fd8:	40000800 	.word	0x40000800
 8004fdc:	40000c00 	.word	0x40000c00
 8004fe0:	40013400 	.word	0x40013400
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	00010007 	.word	0x00010007

08004fec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d020      	beq.n	8005050 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01b      	beq.n	8005050 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0202 	mvn.w	r2, #2
 8005020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f8e9 	bl	800520e <HAL_TIM_IC_CaptureCallback>
 800503c:	e005      	b.n	800504a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f8db 	bl	80051fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f8ec 	bl	8005222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b00      	cmp	r3, #0
 8005058:	d020      	beq.n	800509c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01b      	beq.n	800509c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0204 	mvn.w	r2, #4
 800506c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2202      	movs	r2, #2
 8005072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f8c3 	bl	800520e <HAL_TIM_IC_CaptureCallback>
 8005088:	e005      	b.n	8005096 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f8b5 	bl	80051fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f8c6 	bl	8005222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d020      	beq.n	80050e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f003 0308 	and.w	r3, r3, #8
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01b      	beq.n	80050e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f06f 0208 	mvn.w	r2, #8
 80050b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2204      	movs	r2, #4
 80050be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f89d 	bl	800520e <HAL_TIM_IC_CaptureCallback>
 80050d4:	e005      	b.n	80050e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f88f 	bl	80051fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f8a0 	bl	8005222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d020      	beq.n	8005134 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f003 0310 	and.w	r3, r3, #16
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01b      	beq.n	8005134 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0210 	mvn.w	r2, #16
 8005104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2208      	movs	r2, #8
 800510a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f877 	bl	800520e <HAL_TIM_IC_CaptureCallback>
 8005120:	e005      	b.n	800512e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f869 	bl	80051fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f87a 	bl	8005222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00c      	beq.n	8005158 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d007      	beq.n	8005158 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0201 	mvn.w	r2, #1
 8005150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7fb fe98 	bl	8000e88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515e:	2b00      	cmp	r3, #0
 8005160:	d104      	bne.n	800516c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00c      	beq.n	8005186 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005172:	2b00      	cmp	r3, #0
 8005174:	d007      	beq.n	8005186 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800517e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f913 	bl	80053ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00c      	beq.n	80051aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80051a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f90b 	bl	80053c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00c      	beq.n	80051ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f834 	bl	8005236 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00c      	beq.n	80051f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d007      	beq.n	80051f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f06f 0220 	mvn.w	r2, #32
 80051ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f8d3 	bl	8005398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051f2:	bf00      	nop
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
	...

0800524c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a46      	ldr	r2, [pc, #280]	@ (8005378 <TIM_Base_SetConfig+0x12c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d013      	beq.n	800528c <TIM_Base_SetConfig+0x40>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800526a:	d00f      	beq.n	800528c <TIM_Base_SetConfig+0x40>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a43      	ldr	r2, [pc, #268]	@ (800537c <TIM_Base_SetConfig+0x130>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00b      	beq.n	800528c <TIM_Base_SetConfig+0x40>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a42      	ldr	r2, [pc, #264]	@ (8005380 <TIM_Base_SetConfig+0x134>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d007      	beq.n	800528c <TIM_Base_SetConfig+0x40>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a41      	ldr	r2, [pc, #260]	@ (8005384 <TIM_Base_SetConfig+0x138>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d003      	beq.n	800528c <TIM_Base_SetConfig+0x40>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a40      	ldr	r2, [pc, #256]	@ (8005388 <TIM_Base_SetConfig+0x13c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d108      	bne.n	800529e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a35      	ldr	r2, [pc, #212]	@ (8005378 <TIM_Base_SetConfig+0x12c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d01f      	beq.n	80052e6 <TIM_Base_SetConfig+0x9a>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ac:	d01b      	beq.n	80052e6 <TIM_Base_SetConfig+0x9a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a32      	ldr	r2, [pc, #200]	@ (800537c <TIM_Base_SetConfig+0x130>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d017      	beq.n	80052e6 <TIM_Base_SetConfig+0x9a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a31      	ldr	r2, [pc, #196]	@ (8005380 <TIM_Base_SetConfig+0x134>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d013      	beq.n	80052e6 <TIM_Base_SetConfig+0x9a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a30      	ldr	r2, [pc, #192]	@ (8005384 <TIM_Base_SetConfig+0x138>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00f      	beq.n	80052e6 <TIM_Base_SetConfig+0x9a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a2f      	ldr	r2, [pc, #188]	@ (8005388 <TIM_Base_SetConfig+0x13c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d00b      	beq.n	80052e6 <TIM_Base_SetConfig+0x9a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a2e      	ldr	r2, [pc, #184]	@ (800538c <TIM_Base_SetConfig+0x140>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d007      	beq.n	80052e6 <TIM_Base_SetConfig+0x9a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a2d      	ldr	r2, [pc, #180]	@ (8005390 <TIM_Base_SetConfig+0x144>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d003      	beq.n	80052e6 <TIM_Base_SetConfig+0x9a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a2c      	ldr	r2, [pc, #176]	@ (8005394 <TIM_Base_SetConfig+0x148>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d108      	bne.n	80052f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a16      	ldr	r2, [pc, #88]	@ (8005378 <TIM_Base_SetConfig+0x12c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00f      	beq.n	8005344 <TIM_Base_SetConfig+0xf8>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a18      	ldr	r2, [pc, #96]	@ (8005388 <TIM_Base_SetConfig+0x13c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00b      	beq.n	8005344 <TIM_Base_SetConfig+0xf8>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a17      	ldr	r2, [pc, #92]	@ (800538c <TIM_Base_SetConfig+0x140>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d007      	beq.n	8005344 <TIM_Base_SetConfig+0xf8>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a16      	ldr	r2, [pc, #88]	@ (8005390 <TIM_Base_SetConfig+0x144>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d003      	beq.n	8005344 <TIM_Base_SetConfig+0xf8>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a15      	ldr	r2, [pc, #84]	@ (8005394 <TIM_Base_SetConfig+0x148>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d103      	bne.n	800534c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b01      	cmp	r3, #1
 800535c:	d105      	bne.n	800536a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f023 0201 	bic.w	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	611a      	str	r2, [r3, #16]
  }
}
 800536a:	bf00      	nop
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40012c00 	.word	0x40012c00
 800537c:	40000400 	.word	0x40000400
 8005380:	40000800 	.word	0x40000800
 8005384:	40000c00 	.word	0x40000c00
 8005388:	40013400 	.word	0x40013400
 800538c:	40014000 	.word	0x40014000
 8005390:	40014400 	.word	0x40014400
 8005394:	40014800 	.word	0x40014800

08005398 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e040      	b.n	8005468 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fb feb0 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2224      	movs	r2, #36	@ 0x24
 8005400:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fb6a 	bl	8005af4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f8af 	bl	8005584 <UART_SetConfig>
 8005426:	4603      	mov	r3, r0
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e01b      	b.n	8005468 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800543e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800544e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0201 	orr.w	r2, r2, #1
 800545e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fbe9 	bl	8005c38 <UART_CheckIdleState>
 8005466:	4603      	mov	r3, r0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08a      	sub	sp, #40	@ 0x28
 8005474:	af02      	add	r7, sp, #8
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	603b      	str	r3, [r7, #0]
 800547c:	4613      	mov	r3, r2
 800547e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005484:	2b20      	cmp	r3, #32
 8005486:	d177      	bne.n	8005578 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <HAL_UART_Transmit+0x24>
 800548e:	88fb      	ldrh	r3, [r7, #6]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e070      	b.n	800557a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2221      	movs	r2, #33	@ 0x21
 80054a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054a6:	f7fc fc31 	bl	8001d0c <HAL_GetTick>
 80054aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	88fa      	ldrh	r2, [r7, #6]
 80054b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	88fa      	ldrh	r2, [r7, #6]
 80054b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054c4:	d108      	bne.n	80054d8 <HAL_UART_Transmit+0x68>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d104      	bne.n	80054d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	61bb      	str	r3, [r7, #24]
 80054d6:	e003      	b.n	80054e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054dc:	2300      	movs	r3, #0
 80054de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054e0:	e02f      	b.n	8005542 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2200      	movs	r2, #0
 80054ea:	2180      	movs	r1, #128	@ 0x80
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 fc4b 	bl	8005d88 <UART_WaitOnFlagUntilTimeout>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d004      	beq.n	8005502 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2220      	movs	r2, #32
 80054fc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e03b      	b.n	800557a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10b      	bne.n	8005520 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	881a      	ldrh	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005514:	b292      	uxth	r2, r2
 8005516:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	3302      	adds	r3, #2
 800551c:	61bb      	str	r3, [r7, #24]
 800551e:	e007      	b.n	8005530 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	781a      	ldrb	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	3301      	adds	r3, #1
 800552e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005536:	b29b      	uxth	r3, r3
 8005538:	3b01      	subs	r3, #1
 800553a:	b29a      	uxth	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005548:	b29b      	uxth	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1c9      	bne.n	80054e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2200      	movs	r2, #0
 8005556:	2140      	movs	r1, #64	@ 0x40
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 fc15 	bl	8005d88 <UART_WaitOnFlagUntilTimeout>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d004      	beq.n	800556e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e005      	b.n	800557a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2220      	movs	r2, #32
 8005572:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	e000      	b.n	800557a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005578:	2302      	movs	r3, #2
  }
}
 800557a:	4618      	mov	r0, r3
 800557c:	3720      	adds	r7, #32
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
	...

08005584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005588:	b08a      	sub	sp, #40	@ 0x28
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	431a      	orrs	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	4ba4      	ldr	r3, [pc, #656]	@ (8005844 <UART_SetConfig+0x2c0>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055bc:	430b      	orrs	r3, r1
 80055be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a99      	ldr	r2, [pc, #612]	@ (8005848 <UART_SetConfig+0x2c4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d004      	beq.n	80055f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ec:	4313      	orrs	r3, r2
 80055ee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005600:	430a      	orrs	r2, r1
 8005602:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a90      	ldr	r2, [pc, #576]	@ (800584c <UART_SetConfig+0x2c8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d126      	bne.n	800565c <UART_SetConfig+0xd8>
 800560e:	4b90      	ldr	r3, [pc, #576]	@ (8005850 <UART_SetConfig+0x2cc>)
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005614:	f003 0303 	and.w	r3, r3, #3
 8005618:	2b03      	cmp	r3, #3
 800561a:	d81b      	bhi.n	8005654 <UART_SetConfig+0xd0>
 800561c:	a201      	add	r2, pc, #4	@ (adr r2, 8005624 <UART_SetConfig+0xa0>)
 800561e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005622:	bf00      	nop
 8005624:	08005635 	.word	0x08005635
 8005628:	08005645 	.word	0x08005645
 800562c:	0800563d 	.word	0x0800563d
 8005630:	0800564d 	.word	0x0800564d
 8005634:	2301      	movs	r3, #1
 8005636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800563a:	e116      	b.n	800586a <UART_SetConfig+0x2e6>
 800563c:	2302      	movs	r3, #2
 800563e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005642:	e112      	b.n	800586a <UART_SetConfig+0x2e6>
 8005644:	2304      	movs	r3, #4
 8005646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800564a:	e10e      	b.n	800586a <UART_SetConfig+0x2e6>
 800564c:	2308      	movs	r3, #8
 800564e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005652:	e10a      	b.n	800586a <UART_SetConfig+0x2e6>
 8005654:	2310      	movs	r3, #16
 8005656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800565a:	e106      	b.n	800586a <UART_SetConfig+0x2e6>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a7c      	ldr	r2, [pc, #496]	@ (8005854 <UART_SetConfig+0x2d0>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d138      	bne.n	80056d8 <UART_SetConfig+0x154>
 8005666:	4b7a      	ldr	r3, [pc, #488]	@ (8005850 <UART_SetConfig+0x2cc>)
 8005668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800566c:	f003 030c 	and.w	r3, r3, #12
 8005670:	2b0c      	cmp	r3, #12
 8005672:	d82d      	bhi.n	80056d0 <UART_SetConfig+0x14c>
 8005674:	a201      	add	r2, pc, #4	@ (adr r2, 800567c <UART_SetConfig+0xf8>)
 8005676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567a:	bf00      	nop
 800567c:	080056b1 	.word	0x080056b1
 8005680:	080056d1 	.word	0x080056d1
 8005684:	080056d1 	.word	0x080056d1
 8005688:	080056d1 	.word	0x080056d1
 800568c:	080056c1 	.word	0x080056c1
 8005690:	080056d1 	.word	0x080056d1
 8005694:	080056d1 	.word	0x080056d1
 8005698:	080056d1 	.word	0x080056d1
 800569c:	080056b9 	.word	0x080056b9
 80056a0:	080056d1 	.word	0x080056d1
 80056a4:	080056d1 	.word	0x080056d1
 80056a8:	080056d1 	.word	0x080056d1
 80056ac:	080056c9 	.word	0x080056c9
 80056b0:	2300      	movs	r3, #0
 80056b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056b6:	e0d8      	b.n	800586a <UART_SetConfig+0x2e6>
 80056b8:	2302      	movs	r3, #2
 80056ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056be:	e0d4      	b.n	800586a <UART_SetConfig+0x2e6>
 80056c0:	2304      	movs	r3, #4
 80056c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056c6:	e0d0      	b.n	800586a <UART_SetConfig+0x2e6>
 80056c8:	2308      	movs	r3, #8
 80056ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ce:	e0cc      	b.n	800586a <UART_SetConfig+0x2e6>
 80056d0:	2310      	movs	r3, #16
 80056d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056d6:	e0c8      	b.n	800586a <UART_SetConfig+0x2e6>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a5e      	ldr	r2, [pc, #376]	@ (8005858 <UART_SetConfig+0x2d4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d125      	bne.n	800572e <UART_SetConfig+0x1aa>
 80056e2:	4b5b      	ldr	r3, [pc, #364]	@ (8005850 <UART_SetConfig+0x2cc>)
 80056e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80056ec:	2b30      	cmp	r3, #48	@ 0x30
 80056ee:	d016      	beq.n	800571e <UART_SetConfig+0x19a>
 80056f0:	2b30      	cmp	r3, #48	@ 0x30
 80056f2:	d818      	bhi.n	8005726 <UART_SetConfig+0x1a2>
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	d00a      	beq.n	800570e <UART_SetConfig+0x18a>
 80056f8:	2b20      	cmp	r3, #32
 80056fa:	d814      	bhi.n	8005726 <UART_SetConfig+0x1a2>
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <UART_SetConfig+0x182>
 8005700:	2b10      	cmp	r3, #16
 8005702:	d008      	beq.n	8005716 <UART_SetConfig+0x192>
 8005704:	e00f      	b.n	8005726 <UART_SetConfig+0x1a2>
 8005706:	2300      	movs	r3, #0
 8005708:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800570c:	e0ad      	b.n	800586a <UART_SetConfig+0x2e6>
 800570e:	2302      	movs	r3, #2
 8005710:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005714:	e0a9      	b.n	800586a <UART_SetConfig+0x2e6>
 8005716:	2304      	movs	r3, #4
 8005718:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800571c:	e0a5      	b.n	800586a <UART_SetConfig+0x2e6>
 800571e:	2308      	movs	r3, #8
 8005720:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005724:	e0a1      	b.n	800586a <UART_SetConfig+0x2e6>
 8005726:	2310      	movs	r3, #16
 8005728:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800572c:	e09d      	b.n	800586a <UART_SetConfig+0x2e6>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a4a      	ldr	r2, [pc, #296]	@ (800585c <UART_SetConfig+0x2d8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d125      	bne.n	8005784 <UART_SetConfig+0x200>
 8005738:	4b45      	ldr	r3, [pc, #276]	@ (8005850 <UART_SetConfig+0x2cc>)
 800573a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800573e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005742:	2bc0      	cmp	r3, #192	@ 0xc0
 8005744:	d016      	beq.n	8005774 <UART_SetConfig+0x1f0>
 8005746:	2bc0      	cmp	r3, #192	@ 0xc0
 8005748:	d818      	bhi.n	800577c <UART_SetConfig+0x1f8>
 800574a:	2b80      	cmp	r3, #128	@ 0x80
 800574c:	d00a      	beq.n	8005764 <UART_SetConfig+0x1e0>
 800574e:	2b80      	cmp	r3, #128	@ 0x80
 8005750:	d814      	bhi.n	800577c <UART_SetConfig+0x1f8>
 8005752:	2b00      	cmp	r3, #0
 8005754:	d002      	beq.n	800575c <UART_SetConfig+0x1d8>
 8005756:	2b40      	cmp	r3, #64	@ 0x40
 8005758:	d008      	beq.n	800576c <UART_SetConfig+0x1e8>
 800575a:	e00f      	b.n	800577c <UART_SetConfig+0x1f8>
 800575c:	2300      	movs	r3, #0
 800575e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005762:	e082      	b.n	800586a <UART_SetConfig+0x2e6>
 8005764:	2302      	movs	r3, #2
 8005766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800576a:	e07e      	b.n	800586a <UART_SetConfig+0x2e6>
 800576c:	2304      	movs	r3, #4
 800576e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005772:	e07a      	b.n	800586a <UART_SetConfig+0x2e6>
 8005774:	2308      	movs	r3, #8
 8005776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800577a:	e076      	b.n	800586a <UART_SetConfig+0x2e6>
 800577c:	2310      	movs	r3, #16
 800577e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005782:	e072      	b.n	800586a <UART_SetConfig+0x2e6>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a35      	ldr	r2, [pc, #212]	@ (8005860 <UART_SetConfig+0x2dc>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d12a      	bne.n	80057e4 <UART_SetConfig+0x260>
 800578e:	4b30      	ldr	r3, [pc, #192]	@ (8005850 <UART_SetConfig+0x2cc>)
 8005790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005794:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005798:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800579c:	d01a      	beq.n	80057d4 <UART_SetConfig+0x250>
 800579e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057a2:	d81b      	bhi.n	80057dc <UART_SetConfig+0x258>
 80057a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057a8:	d00c      	beq.n	80057c4 <UART_SetConfig+0x240>
 80057aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057ae:	d815      	bhi.n	80057dc <UART_SetConfig+0x258>
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <UART_SetConfig+0x238>
 80057b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057b8:	d008      	beq.n	80057cc <UART_SetConfig+0x248>
 80057ba:	e00f      	b.n	80057dc <UART_SetConfig+0x258>
 80057bc:	2300      	movs	r3, #0
 80057be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057c2:	e052      	b.n	800586a <UART_SetConfig+0x2e6>
 80057c4:	2302      	movs	r3, #2
 80057c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ca:	e04e      	b.n	800586a <UART_SetConfig+0x2e6>
 80057cc:	2304      	movs	r3, #4
 80057ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057d2:	e04a      	b.n	800586a <UART_SetConfig+0x2e6>
 80057d4:	2308      	movs	r3, #8
 80057d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057da:	e046      	b.n	800586a <UART_SetConfig+0x2e6>
 80057dc:	2310      	movs	r3, #16
 80057de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057e2:	e042      	b.n	800586a <UART_SetConfig+0x2e6>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a17      	ldr	r2, [pc, #92]	@ (8005848 <UART_SetConfig+0x2c4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d13a      	bne.n	8005864 <UART_SetConfig+0x2e0>
 80057ee:	4b18      	ldr	r3, [pc, #96]	@ (8005850 <UART_SetConfig+0x2cc>)
 80057f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80057f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80057fc:	d01a      	beq.n	8005834 <UART_SetConfig+0x2b0>
 80057fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005802:	d81b      	bhi.n	800583c <UART_SetConfig+0x2b8>
 8005804:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005808:	d00c      	beq.n	8005824 <UART_SetConfig+0x2a0>
 800580a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800580e:	d815      	bhi.n	800583c <UART_SetConfig+0x2b8>
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <UART_SetConfig+0x298>
 8005814:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005818:	d008      	beq.n	800582c <UART_SetConfig+0x2a8>
 800581a:	e00f      	b.n	800583c <UART_SetConfig+0x2b8>
 800581c:	2300      	movs	r3, #0
 800581e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005822:	e022      	b.n	800586a <UART_SetConfig+0x2e6>
 8005824:	2302      	movs	r3, #2
 8005826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800582a:	e01e      	b.n	800586a <UART_SetConfig+0x2e6>
 800582c:	2304      	movs	r3, #4
 800582e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005832:	e01a      	b.n	800586a <UART_SetConfig+0x2e6>
 8005834:	2308      	movs	r3, #8
 8005836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800583a:	e016      	b.n	800586a <UART_SetConfig+0x2e6>
 800583c:	2310      	movs	r3, #16
 800583e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005842:	e012      	b.n	800586a <UART_SetConfig+0x2e6>
 8005844:	efff69f3 	.word	0xefff69f3
 8005848:	40008000 	.word	0x40008000
 800584c:	40013800 	.word	0x40013800
 8005850:	40021000 	.word	0x40021000
 8005854:	40004400 	.word	0x40004400
 8005858:	40004800 	.word	0x40004800
 800585c:	40004c00 	.word	0x40004c00
 8005860:	40005000 	.word	0x40005000
 8005864:	2310      	movs	r3, #16
 8005866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a9f      	ldr	r2, [pc, #636]	@ (8005aec <UART_SetConfig+0x568>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d17a      	bne.n	800596a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005874:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005878:	2b08      	cmp	r3, #8
 800587a:	d824      	bhi.n	80058c6 <UART_SetConfig+0x342>
 800587c:	a201      	add	r2, pc, #4	@ (adr r2, 8005884 <UART_SetConfig+0x300>)
 800587e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005882:	bf00      	nop
 8005884:	080058a9 	.word	0x080058a9
 8005888:	080058c7 	.word	0x080058c7
 800588c:	080058b1 	.word	0x080058b1
 8005890:	080058c7 	.word	0x080058c7
 8005894:	080058b7 	.word	0x080058b7
 8005898:	080058c7 	.word	0x080058c7
 800589c:	080058c7 	.word	0x080058c7
 80058a0:	080058c7 	.word	0x080058c7
 80058a4:	080058bf 	.word	0x080058bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a8:	f7fe fd44 	bl	8004334 <HAL_RCC_GetPCLK1Freq>
 80058ac:	61f8      	str	r0, [r7, #28]
        break;
 80058ae:	e010      	b.n	80058d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058b0:	4b8f      	ldr	r3, [pc, #572]	@ (8005af0 <UART_SetConfig+0x56c>)
 80058b2:	61fb      	str	r3, [r7, #28]
        break;
 80058b4:	e00d      	b.n	80058d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058b6:	f7fe fca5 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 80058ba:	61f8      	str	r0, [r7, #28]
        break;
 80058bc:	e009      	b.n	80058d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058c2:	61fb      	str	r3, [r7, #28]
        break;
 80058c4:	e005      	b.n	80058d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80058d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 80fb 	beq.w	8005ad0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	4613      	mov	r3, r2
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	4413      	add	r3, r2
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d305      	bcc.n	80058f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058f0:	69fa      	ldr	r2, [r7, #28]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d903      	bls.n	80058fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80058fc:	e0e8      	b.n	8005ad0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	2200      	movs	r2, #0
 8005902:	461c      	mov	r4, r3
 8005904:	4615      	mov	r5, r2
 8005906:	f04f 0200 	mov.w	r2, #0
 800590a:	f04f 0300 	mov.w	r3, #0
 800590e:	022b      	lsls	r3, r5, #8
 8005910:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005914:	0222      	lsls	r2, r4, #8
 8005916:	68f9      	ldr	r1, [r7, #12]
 8005918:	6849      	ldr	r1, [r1, #4]
 800591a:	0849      	lsrs	r1, r1, #1
 800591c:	2000      	movs	r0, #0
 800591e:	4688      	mov	r8, r1
 8005920:	4681      	mov	r9, r0
 8005922:	eb12 0a08 	adds.w	sl, r2, r8
 8005926:	eb43 0b09 	adc.w	fp, r3, r9
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	603b      	str	r3, [r7, #0]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005938:	4650      	mov	r0, sl
 800593a:	4659      	mov	r1, fp
 800593c:	f7fa fc98 	bl	8000270 <__aeabi_uldivmod>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4613      	mov	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800594e:	d308      	bcc.n	8005962 <UART_SetConfig+0x3de>
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005956:	d204      	bcs.n	8005962 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	60da      	str	r2, [r3, #12]
 8005960:	e0b6      	b.n	8005ad0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005968:	e0b2      	b.n	8005ad0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005972:	d15e      	bne.n	8005a32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005974:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005978:	2b08      	cmp	r3, #8
 800597a:	d828      	bhi.n	80059ce <UART_SetConfig+0x44a>
 800597c:	a201      	add	r2, pc, #4	@ (adr r2, 8005984 <UART_SetConfig+0x400>)
 800597e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005982:	bf00      	nop
 8005984:	080059a9 	.word	0x080059a9
 8005988:	080059b1 	.word	0x080059b1
 800598c:	080059b9 	.word	0x080059b9
 8005990:	080059cf 	.word	0x080059cf
 8005994:	080059bf 	.word	0x080059bf
 8005998:	080059cf 	.word	0x080059cf
 800599c:	080059cf 	.word	0x080059cf
 80059a0:	080059cf 	.word	0x080059cf
 80059a4:	080059c7 	.word	0x080059c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059a8:	f7fe fcc4 	bl	8004334 <HAL_RCC_GetPCLK1Freq>
 80059ac:	61f8      	str	r0, [r7, #28]
        break;
 80059ae:	e014      	b.n	80059da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059b0:	f7fe fcd6 	bl	8004360 <HAL_RCC_GetPCLK2Freq>
 80059b4:	61f8      	str	r0, [r7, #28]
        break;
 80059b6:	e010      	b.n	80059da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059b8:	4b4d      	ldr	r3, [pc, #308]	@ (8005af0 <UART_SetConfig+0x56c>)
 80059ba:	61fb      	str	r3, [r7, #28]
        break;
 80059bc:	e00d      	b.n	80059da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059be:	f7fe fc21 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 80059c2:	61f8      	str	r0, [r7, #28]
        break;
 80059c4:	e009      	b.n	80059da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059ca:	61fb      	str	r3, [r7, #28]
        break;
 80059cc:	e005      	b.n	80059da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80059d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d077      	beq.n	8005ad0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	005a      	lsls	r2, r3, #1
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	441a      	add	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	2b0f      	cmp	r3, #15
 80059fa:	d916      	bls.n	8005a2a <UART_SetConfig+0x4a6>
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a02:	d212      	bcs.n	8005a2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f023 030f 	bic.w	r3, r3, #15
 8005a0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	085b      	lsrs	r3, r3, #1
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	8afb      	ldrh	r3, [r7, #22]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	8afa      	ldrh	r2, [r7, #22]
 8005a26:	60da      	str	r2, [r3, #12]
 8005a28:	e052      	b.n	8005ad0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a30:	e04e      	b.n	8005ad0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d827      	bhi.n	8005a8a <UART_SetConfig+0x506>
 8005a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a40 <UART_SetConfig+0x4bc>)
 8005a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a40:	08005a65 	.word	0x08005a65
 8005a44:	08005a6d 	.word	0x08005a6d
 8005a48:	08005a75 	.word	0x08005a75
 8005a4c:	08005a8b 	.word	0x08005a8b
 8005a50:	08005a7b 	.word	0x08005a7b
 8005a54:	08005a8b 	.word	0x08005a8b
 8005a58:	08005a8b 	.word	0x08005a8b
 8005a5c:	08005a8b 	.word	0x08005a8b
 8005a60:	08005a83 	.word	0x08005a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a64:	f7fe fc66 	bl	8004334 <HAL_RCC_GetPCLK1Freq>
 8005a68:	61f8      	str	r0, [r7, #28]
        break;
 8005a6a:	e014      	b.n	8005a96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a6c:	f7fe fc78 	bl	8004360 <HAL_RCC_GetPCLK2Freq>
 8005a70:	61f8      	str	r0, [r7, #28]
        break;
 8005a72:	e010      	b.n	8005a96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a74:	4b1e      	ldr	r3, [pc, #120]	@ (8005af0 <UART_SetConfig+0x56c>)
 8005a76:	61fb      	str	r3, [r7, #28]
        break;
 8005a78:	e00d      	b.n	8005a96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a7a:	f7fe fbc3 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 8005a7e:	61f8      	str	r0, [r7, #28]
        break;
 8005a80:	e009      	b.n	8005a96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a86:	61fb      	str	r3, [r7, #28]
        break;
 8005a88:	e005      	b.n	8005a96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a94:	bf00      	nop
    }

    if (pclk != 0U)
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d019      	beq.n	8005ad0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	085a      	lsrs	r2, r3, #1
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	441a      	add	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	2b0f      	cmp	r3, #15
 8005ab4:	d909      	bls.n	8005aca <UART_SetConfig+0x546>
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005abc:	d205      	bcs.n	8005aca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60da      	str	r2, [r3, #12]
 8005ac8:	e002      	b.n	8005ad0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005adc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3728      	adds	r7, #40	@ 0x28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aea:	bf00      	nop
 8005aec:	40008000 	.word	0x40008000
 8005af0:	00f42400 	.word	0x00f42400

08005af4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00a      	beq.n	8005b62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b88:	f003 0310 	and.w	r3, r3, #16
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00a      	beq.n	8005ba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00a      	beq.n	8005bc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d01a      	beq.n	8005c0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bf2:	d10a      	bne.n	8005c0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	605a      	str	r2, [r3, #4]
  }
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b098      	sub	sp, #96	@ 0x60
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c48:	f7fc f860 	bl	8001d0c <HAL_GetTick>
 8005c4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d12e      	bne.n	8005cba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c64:	2200      	movs	r2, #0
 8005c66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f88c 	bl	8005d88 <UART_WaitOnFlagUntilTimeout>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d021      	beq.n	8005cba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c7e:	e853 3f00 	ldrex	r3, [r3]
 8005c82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	461a      	mov	r2, r3
 8005c92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c96:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c9c:	e841 2300 	strex	r3, r2, [r1]
 8005ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e6      	bne.n	8005c76 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2220      	movs	r2, #32
 8005cac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e062      	b.n	8005d80 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d149      	bne.n	8005d5c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f856 	bl	8005d88 <UART_WaitOnFlagUntilTimeout>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d03c      	beq.n	8005d5c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cea:	e853 3f00 	ldrex	r3, [r3]
 8005cee:	623b      	str	r3, [r7, #32]
   return(result);
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d00:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d02:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d08:	e841 2300 	strex	r3, r2, [r1]
 8005d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e6      	bne.n	8005ce2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3308      	adds	r3, #8
 8005d1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0301 	bic.w	r3, r3, #1
 8005d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3308      	adds	r3, #8
 8005d32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d34:	61fa      	str	r2, [r7, #28]
 8005d36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	69b9      	ldr	r1, [r7, #24]
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	617b      	str	r3, [r7, #20]
   return(result);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e5      	bne.n	8005d14 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e011      	b.n	8005d80 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3758      	adds	r7, #88	@ 0x58
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	603b      	str	r3, [r7, #0]
 8005d94:	4613      	mov	r3, r2
 8005d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d98:	e04f      	b.n	8005e3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da0:	d04b      	beq.n	8005e3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da2:	f7fb ffb3 	bl	8001d0c <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d302      	bcc.n	8005db8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e04e      	b.n	8005e5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0304 	and.w	r3, r3, #4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d037      	beq.n	8005e3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2b80      	cmp	r3, #128	@ 0x80
 8005dce:	d034      	beq.n	8005e3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2b40      	cmp	r3, #64	@ 0x40
 8005dd4:	d031      	beq.n	8005e3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	f003 0308 	and.w	r3, r3, #8
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d110      	bne.n	8005e06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2208      	movs	r2, #8
 8005dea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 f838 	bl	8005e62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2208      	movs	r2, #8
 8005df6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e029      	b.n	8005e5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e14:	d111      	bne.n	8005e3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 f81e 	bl	8005e62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e00f      	b.n	8005e5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69da      	ldr	r2, [r3, #28]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	4013      	ands	r3, r2
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	bf0c      	ite	eq
 8005e4a:	2301      	moveq	r3, #1
 8005e4c:	2300      	movne	r3, #0
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	461a      	mov	r2, r3
 8005e52:	79fb      	ldrb	r3, [r7, #7]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d0a0      	beq.n	8005d9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b095      	sub	sp, #84	@ 0x54
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e72:	e853 3f00 	ldrex	r3, [r3]
 8005e76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	461a      	mov	r2, r3
 8005e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e88:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e90:	e841 2300 	strex	r3, r2, [r1]
 8005e94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e6      	bne.n	8005e6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f023 0301 	bic.w	r3, r3, #1
 8005eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3308      	adds	r3, #8
 8005eba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ebc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ec4:	e841 2300 	strex	r3, r2, [r1]
 8005ec8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e5      	bne.n	8005e9c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d118      	bne.n	8005f0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	e853 3f00 	ldrex	r3, [r3]
 8005ee4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f023 0310 	bic.w	r3, r3, #16
 8005eec:	647b      	str	r3, [r7, #68]	@ 0x44
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ef6:	61bb      	str	r3, [r7, #24]
 8005ef8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efa:	6979      	ldr	r1, [r7, #20]
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	e841 2300 	strex	r3, r2, [r1]
 8005f02:	613b      	str	r3, [r7, #16]
   return(result);
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1e6      	bne.n	8005ed8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005f1e:	bf00      	nop
 8005f20:	3754      	adds	r7, #84	@ 0x54
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	f107 001c 	add.w	r0, r7, #28
 8005f38:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fa69 	bl	8006420 <USB_CoreReset>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005f52:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d106      	bne.n	8005f68 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f66:	e005      	b.n	8005f74 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f80:	b004      	add	sp, #16
 8005f82:	4770      	bx	lr

08005f84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f023 0201 	bic.w	r2, r3, #1
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	460b      	mov	r3, r1
 8005fb0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fc2:	78fb      	ldrb	r3, [r7, #3]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d115      	bne.n	8005ff4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005fd4:	200a      	movs	r0, #10
 8005fd6:	f7fb fea5 	bl	8001d24 <HAL_Delay>
      ms += 10U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	330a      	adds	r3, #10
 8005fde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fa0f 	bl	8006404 <USB_GetMode>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d01e      	beq.n	800602a <USB_SetCurrentMode+0x84>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ff0:	d9f0      	bls.n	8005fd4 <USB_SetCurrentMode+0x2e>
 8005ff2:	e01a      	b.n	800602a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ff4:	78fb      	ldrb	r3, [r7, #3]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d115      	bne.n	8006026 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006006:	200a      	movs	r0, #10
 8006008:	f7fb fe8c 	bl	8001d24 <HAL_Delay>
      ms += 10U;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	330a      	adds	r3, #10
 8006010:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f9f6 	bl	8006404 <USB_GetMode>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d005      	beq.n	800602a <USB_SetCurrentMode+0x84>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2bc7      	cmp	r3, #199	@ 0xc7
 8006022:	d9f0      	bls.n	8006006 <USB_SetCurrentMode+0x60>
 8006024:	e001      	b.n	800602a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e005      	b.n	8006036 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2bc8      	cmp	r3, #200	@ 0xc8
 800602e:	d101      	bne.n	8006034 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e000      	b.n	8006036 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
	...

08006040 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006040:	b084      	sub	sp, #16
 8006042:	b580      	push	{r7, lr}
 8006044:	b086      	sub	sp, #24
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800604e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800605a:	2300      	movs	r3, #0
 800605c:	613b      	str	r3, [r7, #16]
 800605e:	e009      	b.n	8006074 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	3340      	adds	r3, #64	@ 0x40
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	2200      	movs	r2, #0
 800606c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	3301      	adds	r3, #1
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	2b0e      	cmp	r3, #14
 8006078:	d9f2      	bls.n	8006060 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800607a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800607e:	2b00      	cmp	r3, #0
 8006080:	d11c      	bne.n	80060bc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006090:	f043 0302 	orr.w	r3, r3, #2
 8006094:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	e005      	b.n	80060c8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060ce:	461a      	mov	r2, r3
 80060d0:	2300      	movs	r3, #0
 80060d2:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060d4:	2103      	movs	r1, #3
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f95a 	bl	8006390 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060dc:	2110      	movs	r1, #16
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f8f6 	bl	80062d0 <USB_FlushTxFifo>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f920 	bl	8006334 <USB_FlushRxFifo>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006104:	461a      	mov	r2, r3
 8006106:	2300      	movs	r3, #0
 8006108:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006110:	461a      	mov	r2, r3
 8006112:	2300      	movs	r3, #0
 8006114:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800611c:	461a      	mov	r2, r3
 800611e:	2300      	movs	r3, #0
 8006120:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006122:	2300      	movs	r3, #0
 8006124:	613b      	str	r3, [r7, #16]
 8006126:	e043      	b.n	80061b0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800613a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800613e:	d118      	bne.n	8006172 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10a      	bne.n	800615c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006152:	461a      	mov	r2, r3
 8006154:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	e013      	b.n	8006184 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006168:	461a      	mov	r2, r3
 800616a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	e008      	b.n	8006184 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800617e:	461a      	mov	r2, r3
 8006180:	2300      	movs	r3, #0
 8006182:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006190:	461a      	mov	r2, r3
 8006192:	2300      	movs	r3, #0
 8006194:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a2:	461a      	mov	r2, r3
 80061a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80061a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	3301      	adds	r3, #1
 80061ae:	613b      	str	r3, [r7, #16]
 80061b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80061b4:	461a      	mov	r2, r3
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d3b5      	bcc.n	8006128 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061bc:	2300      	movs	r3, #0
 80061be:	613b      	str	r3, [r7, #16]
 80061c0:	e043      	b.n	800624a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061d8:	d118      	bne.n	800620c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ec:	461a      	mov	r2, r3
 80061ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80061f2:	6013      	str	r3, [r2, #0]
 80061f4:	e013      	b.n	800621e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006202:	461a      	mov	r2, r3
 8006204:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	e008      	b.n	800621e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006218:	461a      	mov	r2, r3
 800621a:	2300      	movs	r3, #0
 800621c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800622a:	461a      	mov	r2, r3
 800622c:	2300      	movs	r3, #0
 800622e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800623c:	461a      	mov	r2, r3
 800623e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006242:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	3301      	adds	r3, #1
 8006248:	613b      	str	r3, [r7, #16]
 800624a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800624e:	461a      	mov	r2, r3
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	4293      	cmp	r3, r2
 8006254:	d3b5      	bcc.n	80061c2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006268:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006276:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	f043 0210 	orr.w	r2, r3, #16
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	699a      	ldr	r2, [r3, #24]
 8006288:	4b10      	ldr	r3, [pc, #64]	@ (80062cc <USB_DevInit+0x28c>)
 800628a:	4313      	orrs	r3, r2
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006290:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006294:	2b00      	cmp	r3, #0
 8006296:	d005      	beq.n	80062a4 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	f043 0208 	orr.w	r2, r3, #8
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d107      	bne.n	80062bc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062b4:	f043 0304 	orr.w	r3, r3, #4
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062c8:	b004      	add	sp, #16
 80062ca:	4770      	bx	lr
 80062cc:	803c3800 	.word	0x803c3800

080062d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3301      	adds	r3, #1
 80062e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062ea:	d901      	bls.n	80062f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e01b      	b.n	8006328 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	daf2      	bge.n	80062de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	019b      	lsls	r3, r3, #6
 8006300:	f043 0220 	orr.w	r2, r3, #32
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	3301      	adds	r3, #1
 800630c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006314:	d901      	bls.n	800631a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e006      	b.n	8006328 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b20      	cmp	r3, #32
 8006324:	d0f0      	beq.n	8006308 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	3301      	adds	r3, #1
 8006344:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800634c:	d901      	bls.n	8006352 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e018      	b.n	8006384 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	daf2      	bge.n	8006340 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2210      	movs	r2, #16
 8006362:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3301      	adds	r3, #1
 8006368:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006370:	d901      	bls.n	8006376 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e006      	b.n	8006384 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f003 0310 	and.w	r3, r3, #16
 800637e:	2b10      	cmp	r3, #16
 8006380:	d0f0      	beq.n	8006364 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	68f9      	ldr	r1, [r7, #12]
 80063ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063b0:	4313      	orrs	r3, r2
 80063b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b085      	sub	sp, #20
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80063dc:	f023 0303 	bic.w	r3, r3, #3
 80063e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063f0:	f043 0302 	orr.w	r3, r3, #2
 80063f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	f003 0301 	and.w	r3, r3, #1
}
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	3301      	adds	r3, #1
 8006430:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006438:	d901      	bls.n	800643e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e01b      	b.n	8006476 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	daf2      	bge.n	800642c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f043 0201 	orr.w	r2, r3, #1
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	3301      	adds	r3, #1
 800645a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006462:	d901      	bls.n	8006468 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e006      	b.n	8006476 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b01      	cmp	r3, #1
 8006472:	d0f0      	beq.n	8006456 <USB_CoreReset+0x36>

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006482:	b480      	push	{r7}
 8006484:	b085      	sub	sp, #20
 8006486:	af00      	add	r7, sp, #0
 8006488:	4603      	mov	r3, r0
 800648a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006494:	2b84      	cmp	r3, #132	@ 0x84
 8006496:	d005      	beq.n	80064a4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006498:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	3303      	adds	r3, #3
 80064a2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80064a4:	68fb      	ldr	r3, [r7, #12]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80064b6:	f000 fae5 	bl	8006a84 <vTaskStartScheduler>
  
  return osOK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	bd80      	pop	{r7, pc}

080064c0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80064c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064c2:	b089      	sub	sp, #36	@ 0x24
 80064c4:	af04      	add	r7, sp, #16
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d020      	beq.n	8006514 <osThreadCreate+0x54>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d01c      	beq.n	8006514 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685c      	ldr	r4, [r3, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691e      	ldr	r6, [r3, #16]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7ff ffc8 	bl	8006482 <makeFreeRtosPriority>
 80064f2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064fc:	9202      	str	r2, [sp, #8]
 80064fe:	9301      	str	r3, [sp, #4]
 8006500:	9100      	str	r1, [sp, #0]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	4632      	mov	r2, r6
 8006506:	4629      	mov	r1, r5
 8006508:	4620      	mov	r0, r4
 800650a:	f000 f8ed 	bl	80066e8 <xTaskCreateStatic>
 800650e:	4603      	mov	r3, r0
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	e01c      	b.n	800654e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685c      	ldr	r4, [r3, #4]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006520:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff ffaa 	bl	8006482 <makeFreeRtosPriority>
 800652e:	4602      	mov	r2, r0
 8006530:	f107 030c 	add.w	r3, r7, #12
 8006534:	9301      	str	r3, [sp, #4]
 8006536:	9200      	str	r2, [sp, #0]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	4632      	mov	r2, r6
 800653c:	4629      	mov	r1, r5
 800653e:	4620      	mov	r0, r4
 8006540:	f000 f932 	bl	80067a8 <xTaskCreate>
 8006544:	4603      	mov	r3, r0
 8006546:	2b01      	cmp	r3, #1
 8006548:	d001      	beq.n	800654e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	e000      	b.n	8006550 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800654e:	68fb      	ldr	r3, [r7, #12]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006558 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <osDelay+0x16>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	e000      	b.n	8006570 <osDelay+0x18>
 800656e:	2301      	movs	r3, #1
 8006570:	4618      	mov	r0, r3
 8006572:	f000 fa51 	bl	8006a18 <vTaskDelay>
  
  return osOK;
 8006576:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f103 0208 	add.w	r2, r3, #8
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f04f 32ff 	mov.w	r2, #4294967295
 8006598:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f103 0208 	add.w	r2, r3, #8
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f103 0208 	add.w	r2, r3, #8
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065ce:	bf00      	nop
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065da:	b480      	push	{r7}
 80065dc:	b085      	sub	sp, #20
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	1c5a      	adds	r2, r3, #1
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	601a      	str	r2, [r3, #0]
}
 8006616:	bf00      	nop
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006622:	b480      	push	{r7}
 8006624:	b085      	sub	sp, #20
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006638:	d103      	bne.n	8006642 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	e00c      	b.n	800665c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	3308      	adds	r3, #8
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	e002      	b.n	8006650 <vListInsert+0x2e>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	429a      	cmp	r2, r3
 800665a:	d2f6      	bcs.n	800664a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	601a      	str	r2, [r3, #0]
}
 8006688:	bf00      	nop
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6892      	ldr	r2, [r2, #8]
 80066aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6852      	ldr	r2, [r2, #4]
 80066b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d103      	bne.n	80066c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	1e5a      	subs	r2, r3, #1
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08e      	sub	sp, #56	@ 0x38
 80066ec:	af04      	add	r7, sp, #16
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80066f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10b      	bne.n	8006714 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800670e:	bf00      	nop
 8006710:	bf00      	nop
 8006712:	e7fd      	b.n	8006710 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10b      	bne.n	8006732 <xTaskCreateStatic+0x4a>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	61fb      	str	r3, [r7, #28]
}
 800672c:	bf00      	nop
 800672e:	bf00      	nop
 8006730:	e7fd      	b.n	800672e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006732:	2354      	movs	r3, #84	@ 0x54
 8006734:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	2b54      	cmp	r3, #84	@ 0x54
 800673a:	d00b      	beq.n	8006754 <xTaskCreateStatic+0x6c>
	__asm volatile
 800673c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	61bb      	str	r3, [r7, #24]
}
 800674e:	bf00      	nop
 8006750:	bf00      	nop
 8006752:	e7fd      	b.n	8006750 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006754:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01e      	beq.n	800679a <xTaskCreateStatic+0xb2>
 800675c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800675e:	2b00      	cmp	r3, #0
 8006760:	d01b      	beq.n	800679a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006764:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006768:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800676a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800676c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676e:	2202      	movs	r2, #2
 8006770:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006774:	2300      	movs	r3, #0
 8006776:	9303      	str	r3, [sp, #12]
 8006778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677a:	9302      	str	r3, [sp, #8]
 800677c:	f107 0314 	add.w	r3, r7, #20
 8006780:	9301      	str	r3, [sp, #4]
 8006782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	68b9      	ldr	r1, [r7, #8]
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 f850 	bl	8006832 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006792:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006794:	f000 f8d6 	bl	8006944 <prvAddNewTaskToReadyList>
 8006798:	e001      	b.n	800679e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800679a:	2300      	movs	r3, #0
 800679c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800679e:	697b      	ldr	r3, [r7, #20]
	}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3728      	adds	r7, #40	@ 0x28
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08c      	sub	sp, #48	@ 0x30
 80067ac:	af04      	add	r7, sp, #16
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	4613      	mov	r3, r2
 80067b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80067b8:	88fb      	ldrh	r3, [r7, #6]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 fee3 	bl	8007588 <pvPortMalloc>
 80067c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00e      	beq.n	80067e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80067ca:	2054      	movs	r0, #84	@ 0x54
 80067cc:	f000 fedc 	bl	8007588 <pvPortMalloc>
 80067d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80067de:	e005      	b.n	80067ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067e0:	6978      	ldr	r0, [r7, #20]
 80067e2:	f000 ff9f 	bl	8007724 <vPortFree>
 80067e6:	e001      	b.n	80067ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067e8:	2300      	movs	r3, #0
 80067ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d017      	beq.n	8006822 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067fa:	88fa      	ldrh	r2, [r7, #6]
 80067fc:	2300      	movs	r3, #0
 80067fe:	9303      	str	r3, [sp, #12]
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	9302      	str	r3, [sp, #8]
 8006804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 f80e 	bl	8006832 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006816:	69f8      	ldr	r0, [r7, #28]
 8006818:	f000 f894 	bl	8006944 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800681c:	2301      	movs	r3, #1
 800681e:	61bb      	str	r3, [r7, #24]
 8006820:	e002      	b.n	8006828 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006822:	f04f 33ff 	mov.w	r3, #4294967295
 8006826:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006828:	69bb      	ldr	r3, [r7, #24]
	}
 800682a:	4618      	mov	r0, r3
 800682c:	3720      	adds	r7, #32
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b088      	sub	sp, #32
 8006836:	af00      	add	r7, sp, #0
 8006838:	60f8      	str	r0, [r7, #12]
 800683a:	60b9      	str	r1, [r7, #8]
 800683c:	607a      	str	r2, [r7, #4]
 800683e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006842:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800684a:	3b01      	subs	r3, #1
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	f023 0307 	bic.w	r3, r3, #7
 8006858:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	f003 0307 	and.w	r3, r3, #7
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00b      	beq.n	800687c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	617b      	str	r3, [r7, #20]
}
 8006876:	bf00      	nop
 8006878:	bf00      	nop
 800687a:	e7fd      	b.n	8006878 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d01f      	beq.n	80068c2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006882:	2300      	movs	r3, #0
 8006884:	61fb      	str	r3, [r7, #28]
 8006886:	e012      	b.n	80068ae <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	4413      	add	r3, r2
 800688e:	7819      	ldrb	r1, [r3, #0]
 8006890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	4413      	add	r3, r2
 8006896:	3334      	adds	r3, #52	@ 0x34
 8006898:	460a      	mov	r2, r1
 800689a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	4413      	add	r3, r2
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d006      	beq.n	80068b6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	3301      	adds	r3, #1
 80068ac:	61fb      	str	r3, [r7, #28]
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	2b0f      	cmp	r3, #15
 80068b2:	d9e9      	bls.n	8006888 <prvInitialiseNewTask+0x56>
 80068b4:	e000      	b.n	80068b8 <prvInitialiseNewTask+0x86>
			{
				break;
 80068b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068c0:	e003      	b.n	80068ca <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068cc:	2b06      	cmp	r3, #6
 80068ce:	d901      	bls.n	80068d4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068d0:	2306      	movs	r3, #6
 80068d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068d8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068de:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80068e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e2:	2200      	movs	r2, #0
 80068e4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e8:	3304      	adds	r3, #4
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff fe68 	bl	80065c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f2:	3318      	adds	r3, #24
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff fe63 	bl	80065c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006902:	f1c3 0207 	rsb	r2, r3, #7
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800690a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800690e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006912:	2200      	movs	r2, #0
 8006914:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006918:	2200      	movs	r2, #0
 800691a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	68f9      	ldr	r1, [r7, #12]
 8006922:	69b8      	ldr	r0, [r7, #24]
 8006924:	f000 fc1e 	bl	8007164 <pxPortInitialiseStack>
 8006928:	4602      	mov	r2, r0
 800692a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800692e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006938:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800693a:	bf00      	nop
 800693c:	3720      	adds	r7, #32
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
	...

08006944 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800694c:	f000 fd3c 	bl	80073c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006950:	4b2a      	ldr	r3, [pc, #168]	@ (80069fc <prvAddNewTaskToReadyList+0xb8>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3301      	adds	r3, #1
 8006956:	4a29      	ldr	r2, [pc, #164]	@ (80069fc <prvAddNewTaskToReadyList+0xb8>)
 8006958:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800695a:	4b29      	ldr	r3, [pc, #164]	@ (8006a00 <prvAddNewTaskToReadyList+0xbc>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006962:	4a27      	ldr	r2, [pc, #156]	@ (8006a00 <prvAddNewTaskToReadyList+0xbc>)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006968:	4b24      	ldr	r3, [pc, #144]	@ (80069fc <prvAddNewTaskToReadyList+0xb8>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d110      	bne.n	8006992 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006970:	f000 fad4 	bl	8006f1c <prvInitialiseTaskLists>
 8006974:	e00d      	b.n	8006992 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006976:	4b23      	ldr	r3, [pc, #140]	@ (8006a04 <prvAddNewTaskToReadyList+0xc0>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d109      	bne.n	8006992 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800697e:	4b20      	ldr	r3, [pc, #128]	@ (8006a00 <prvAddNewTaskToReadyList+0xbc>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006988:	429a      	cmp	r2, r3
 800698a:	d802      	bhi.n	8006992 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800698c:	4a1c      	ldr	r2, [pc, #112]	@ (8006a00 <prvAddNewTaskToReadyList+0xbc>)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006992:	4b1d      	ldr	r3, [pc, #116]	@ (8006a08 <prvAddNewTaskToReadyList+0xc4>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3301      	adds	r3, #1
 8006998:	4a1b      	ldr	r2, [pc, #108]	@ (8006a08 <prvAddNewTaskToReadyList+0xc4>)
 800699a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a0:	2201      	movs	r2, #1
 80069a2:	409a      	lsls	r2, r3
 80069a4:	4b19      	ldr	r3, [pc, #100]	@ (8006a0c <prvAddNewTaskToReadyList+0xc8>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	4a18      	ldr	r2, [pc, #96]	@ (8006a0c <prvAddNewTaskToReadyList+0xc8>)
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069b2:	4613      	mov	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4a15      	ldr	r2, [pc, #84]	@ (8006a10 <prvAddNewTaskToReadyList+0xcc>)
 80069bc:	441a      	add	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	3304      	adds	r3, #4
 80069c2:	4619      	mov	r1, r3
 80069c4:	4610      	mov	r0, r2
 80069c6:	f7ff fe08 	bl	80065da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069ca:	f000 fd2f 	bl	800742c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006a04 <prvAddNewTaskToReadyList+0xc0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00e      	beq.n	80069f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006a00 <prvAddNewTaskToReadyList+0xbc>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d207      	bcs.n	80069f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006a14 <prvAddNewTaskToReadyList+0xd0>)
 80069e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069f4:	bf00      	nop
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	20001c1c 	.word	0x20001c1c
 8006a00:	20001b1c 	.word	0x20001b1c
 8006a04:	20001c28 	.word	0x20001c28
 8006a08:	20001c38 	.word	0x20001c38
 8006a0c:	20001c24 	.word	0x20001c24
 8006a10:	20001b20 	.word	0x20001b20
 8006a14:	e000ed04 	.word	0xe000ed04

08006a18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a20:	2300      	movs	r3, #0
 8006a22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d018      	beq.n	8006a5c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a2a:	4b14      	ldr	r3, [pc, #80]	@ (8006a7c <vTaskDelay+0x64>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00b      	beq.n	8006a4a <vTaskDelay+0x32>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	60bb      	str	r3, [r7, #8]
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop
 8006a48:	e7fd      	b.n	8006a46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a4a:	f000 f87d 	bl	8006b48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a4e:	2100      	movs	r1, #0
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fb21 	bl	8007098 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a56:	f000 f885 	bl	8006b64 <xTaskResumeAll>
 8006a5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d107      	bne.n	8006a72 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006a62:	4b07      	ldr	r3, [pc, #28]	@ (8006a80 <vTaskDelay+0x68>)
 8006a64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a72:	bf00      	nop
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20001c44 	.word	0x20001c44
 8006a80:	e000ed04 	.word	0xe000ed04

08006a84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08a      	sub	sp, #40	@ 0x28
 8006a88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a92:	463a      	mov	r2, r7
 8006a94:	1d39      	adds	r1, r7, #4
 8006a96:	f107 0308 	add.w	r3, r7, #8
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7f9 fd7e 	bl	800059c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	9202      	str	r2, [sp, #8]
 8006aa8:	9301      	str	r3, [sp, #4]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	460a      	mov	r2, r1
 8006ab2:	491f      	ldr	r1, [pc, #124]	@ (8006b30 <vTaskStartScheduler+0xac>)
 8006ab4:	481f      	ldr	r0, [pc, #124]	@ (8006b34 <vTaskStartScheduler+0xb0>)
 8006ab6:	f7ff fe17 	bl	80066e8 <xTaskCreateStatic>
 8006aba:	4603      	mov	r3, r0
 8006abc:	4a1e      	ldr	r2, [pc, #120]	@ (8006b38 <vTaskStartScheduler+0xb4>)
 8006abe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b38 <vTaskStartScheduler+0xb4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	e001      	b.n	8006ad2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d116      	bne.n	8006b06 <vTaskStartScheduler+0x82>
	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	613b      	str	r3, [r7, #16]
}
 8006aea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006aec:	4b13      	ldr	r3, [pc, #76]	@ (8006b3c <vTaskStartScheduler+0xb8>)
 8006aee:	f04f 32ff 	mov.w	r2, #4294967295
 8006af2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006af4:	4b12      	ldr	r3, [pc, #72]	@ (8006b40 <vTaskStartScheduler+0xbc>)
 8006af6:	2201      	movs	r2, #1
 8006af8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006afa:	4b12      	ldr	r3, [pc, #72]	@ (8006b44 <vTaskStartScheduler+0xc0>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b00:	f000 fbbe 	bl	8007280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b04:	e00f      	b.n	8006b26 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0c:	d10b      	bne.n	8006b26 <vTaskStartScheduler+0xa2>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	60fb      	str	r3, [r7, #12]
}
 8006b20:	bf00      	nop
 8006b22:	bf00      	nop
 8006b24:	e7fd      	b.n	8006b22 <vTaskStartScheduler+0x9e>
}
 8006b26:	bf00      	nop
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	08008978 	.word	0x08008978
 8006b34:	08006eed 	.word	0x08006eed
 8006b38:	20001c40 	.word	0x20001c40
 8006b3c:	20001c3c 	.word	0x20001c3c
 8006b40:	20001c28 	.word	0x20001c28
 8006b44:	20001c20 	.word	0x20001c20

08006b48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b4c:	4b04      	ldr	r3, [pc, #16]	@ (8006b60 <vTaskSuspendAll+0x18>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	3301      	adds	r3, #1
 8006b52:	4a03      	ldr	r2, [pc, #12]	@ (8006b60 <vTaskSuspendAll+0x18>)
 8006b54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b56:	bf00      	nop
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	20001c44 	.word	0x20001c44

08006b64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b72:	4b42      	ldr	r3, [pc, #264]	@ (8006c7c <xTaskResumeAll+0x118>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10b      	bne.n	8006b92 <xTaskResumeAll+0x2e>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	603b      	str	r3, [r7, #0]
}
 8006b8c:	bf00      	nop
 8006b8e:	bf00      	nop
 8006b90:	e7fd      	b.n	8006b8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b92:	f000 fc19 	bl	80073c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b96:	4b39      	ldr	r3, [pc, #228]	@ (8006c7c <xTaskResumeAll+0x118>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	4a37      	ldr	r2, [pc, #220]	@ (8006c7c <xTaskResumeAll+0x118>)
 8006b9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ba0:	4b36      	ldr	r3, [pc, #216]	@ (8006c7c <xTaskResumeAll+0x118>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d161      	bne.n	8006c6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ba8:	4b35      	ldr	r3, [pc, #212]	@ (8006c80 <xTaskResumeAll+0x11c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d05d      	beq.n	8006c6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bb0:	e02e      	b.n	8006c10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bb2:	4b34      	ldr	r3, [pc, #208]	@ (8006c84 <xTaskResumeAll+0x120>)
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3318      	adds	r3, #24
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7ff fd68 	bl	8006694 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff fd63 	bl	8006694 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	409a      	lsls	r2, r3
 8006bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8006c88 <xTaskResumeAll+0x124>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	4a2a      	ldr	r2, [pc, #168]	@ (8006c88 <xTaskResumeAll+0x124>)
 8006bde:	6013      	str	r3, [r2, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006be4:	4613      	mov	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4a27      	ldr	r2, [pc, #156]	@ (8006c8c <xTaskResumeAll+0x128>)
 8006bee:	441a      	add	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	4610      	mov	r0, r2
 8006bf8:	f7ff fcef 	bl	80065da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c00:	4b23      	ldr	r3, [pc, #140]	@ (8006c90 <xTaskResumeAll+0x12c>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d302      	bcc.n	8006c10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006c0a:	4b22      	ldr	r3, [pc, #136]	@ (8006c94 <xTaskResumeAll+0x130>)
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c10:	4b1c      	ldr	r3, [pc, #112]	@ (8006c84 <xTaskResumeAll+0x120>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1cc      	bne.n	8006bb2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c1e:	f000 fa1b 	bl	8007058 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c22:	4b1d      	ldr	r3, [pc, #116]	@ (8006c98 <xTaskResumeAll+0x134>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d010      	beq.n	8006c50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c2e:	f000 f847 	bl	8006cc0 <xTaskIncrementTick>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d002      	beq.n	8006c3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006c38:	4b16      	ldr	r3, [pc, #88]	@ (8006c94 <xTaskResumeAll+0x130>)
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1f1      	bne.n	8006c2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006c4a:	4b13      	ldr	r3, [pc, #76]	@ (8006c98 <xTaskResumeAll+0x134>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c50:	4b10      	ldr	r3, [pc, #64]	@ (8006c94 <xTaskResumeAll+0x130>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d009      	beq.n	8006c6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8006c9c <xTaskResumeAll+0x138>)
 8006c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c6c:	f000 fbde 	bl	800742c <vPortExitCritical>

	return xAlreadyYielded;
 8006c70:	68bb      	ldr	r3, [r7, #8]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20001c44 	.word	0x20001c44
 8006c80:	20001c1c 	.word	0x20001c1c
 8006c84:	20001bdc 	.word	0x20001bdc
 8006c88:	20001c24 	.word	0x20001c24
 8006c8c:	20001b20 	.word	0x20001b20
 8006c90:	20001b1c 	.word	0x20001b1c
 8006c94:	20001c30 	.word	0x20001c30
 8006c98:	20001c2c 	.word	0x20001c2c
 8006c9c:	e000ed04 	.word	0xe000ed04

08006ca0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ca6:	4b05      	ldr	r3, [pc, #20]	@ (8006cbc <xTaskGetTickCount+0x1c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006cac:	687b      	ldr	r3, [r7, #4]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	20001c20 	.word	0x20001c20

08006cc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cca:	4b4f      	ldr	r3, [pc, #316]	@ (8006e08 <xTaskIncrementTick+0x148>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f040 808f 	bne.w	8006df2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006cd4:	4b4d      	ldr	r3, [pc, #308]	@ (8006e0c <xTaskIncrementTick+0x14c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006cdc:	4a4b      	ldr	r2, [pc, #300]	@ (8006e0c <xTaskIncrementTick+0x14c>)
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d121      	bne.n	8006d2c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ce8:	4b49      	ldr	r3, [pc, #292]	@ (8006e10 <xTaskIncrementTick+0x150>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00b      	beq.n	8006d0a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	603b      	str	r3, [r7, #0]
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop
 8006d08:	e7fd      	b.n	8006d06 <xTaskIncrementTick+0x46>
 8006d0a:	4b41      	ldr	r3, [pc, #260]	@ (8006e10 <xTaskIncrementTick+0x150>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	4b40      	ldr	r3, [pc, #256]	@ (8006e14 <xTaskIncrementTick+0x154>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a3e      	ldr	r2, [pc, #248]	@ (8006e10 <xTaskIncrementTick+0x150>)
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	4a3e      	ldr	r2, [pc, #248]	@ (8006e14 <xTaskIncrementTick+0x154>)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6013      	str	r3, [r2, #0]
 8006d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8006e18 <xTaskIncrementTick+0x158>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3301      	adds	r3, #1
 8006d24:	4a3c      	ldr	r2, [pc, #240]	@ (8006e18 <xTaskIncrementTick+0x158>)
 8006d26:	6013      	str	r3, [r2, #0]
 8006d28:	f000 f996 	bl	8007058 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8006e1c <xTaskIncrementTick+0x15c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d348      	bcc.n	8006dc8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d36:	4b36      	ldr	r3, [pc, #216]	@ (8006e10 <xTaskIncrementTick+0x150>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d104      	bne.n	8006d4a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d40:	4b36      	ldr	r3, [pc, #216]	@ (8006e1c <xTaskIncrementTick+0x15c>)
 8006d42:	f04f 32ff 	mov.w	r2, #4294967295
 8006d46:	601a      	str	r2, [r3, #0]
					break;
 8006d48:	e03e      	b.n	8006dc8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d4a:	4b31      	ldr	r3, [pc, #196]	@ (8006e10 <xTaskIncrementTick+0x150>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d203      	bcs.n	8006d6a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d62:	4a2e      	ldr	r2, [pc, #184]	@ (8006e1c <xTaskIncrementTick+0x15c>)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d68:	e02e      	b.n	8006dc8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7ff fc90 	bl	8006694 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d004      	beq.n	8006d86 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	3318      	adds	r3, #24
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7ff fc87 	bl	8006694 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	409a      	lsls	r2, r3
 8006d8e:	4b24      	ldr	r3, [pc, #144]	@ (8006e20 <xTaskIncrementTick+0x160>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	4a22      	ldr	r2, [pc, #136]	@ (8006e20 <xTaskIncrementTick+0x160>)
 8006d96:	6013      	str	r3, [r2, #0]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4a1f      	ldr	r2, [pc, #124]	@ (8006e24 <xTaskIncrementTick+0x164>)
 8006da6:	441a      	add	r2, r3
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	3304      	adds	r3, #4
 8006dac:	4619      	mov	r1, r3
 8006dae:	4610      	mov	r0, r2
 8006db0:	f7ff fc13 	bl	80065da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006db8:	4b1b      	ldr	r3, [pc, #108]	@ (8006e28 <xTaskIncrementTick+0x168>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d3b9      	bcc.n	8006d36 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dc6:	e7b6      	b.n	8006d36 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006dc8:	4b17      	ldr	r3, [pc, #92]	@ (8006e28 <xTaskIncrementTick+0x168>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dce:	4915      	ldr	r1, [pc, #84]	@ (8006e24 <xTaskIncrementTick+0x164>)
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	440b      	add	r3, r1
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d901      	bls.n	8006de4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006de0:	2301      	movs	r3, #1
 8006de2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006de4:	4b11      	ldr	r3, [pc, #68]	@ (8006e2c <xTaskIncrementTick+0x16c>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d007      	beq.n	8006dfc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006dec:	2301      	movs	r3, #1
 8006dee:	617b      	str	r3, [r7, #20]
 8006df0:	e004      	b.n	8006dfc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006df2:	4b0f      	ldr	r3, [pc, #60]	@ (8006e30 <xTaskIncrementTick+0x170>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3301      	adds	r3, #1
 8006df8:	4a0d      	ldr	r2, [pc, #52]	@ (8006e30 <xTaskIncrementTick+0x170>)
 8006dfa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006dfc:	697b      	ldr	r3, [r7, #20]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3718      	adds	r7, #24
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	20001c44 	.word	0x20001c44
 8006e0c:	20001c20 	.word	0x20001c20
 8006e10:	20001bd4 	.word	0x20001bd4
 8006e14:	20001bd8 	.word	0x20001bd8
 8006e18:	20001c34 	.word	0x20001c34
 8006e1c:	20001c3c 	.word	0x20001c3c
 8006e20:	20001c24 	.word	0x20001c24
 8006e24:	20001b20 	.word	0x20001b20
 8006e28:	20001b1c 	.word	0x20001b1c
 8006e2c:	20001c30 	.word	0x20001c30
 8006e30:	20001c2c 	.word	0x20001c2c

08006e34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e3a:	4b27      	ldr	r3, [pc, #156]	@ (8006ed8 <vTaskSwitchContext+0xa4>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e42:	4b26      	ldr	r3, [pc, #152]	@ (8006edc <vTaskSwitchContext+0xa8>)
 8006e44:	2201      	movs	r2, #1
 8006e46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e48:	e040      	b.n	8006ecc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006e4a:	4b24      	ldr	r3, [pc, #144]	@ (8006edc <vTaskSwitchContext+0xa8>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e50:	4b23      	ldr	r3, [pc, #140]	@ (8006ee0 <vTaskSwitchContext+0xac>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	fab3 f383 	clz	r3, r3
 8006e5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006e5e:	7afb      	ldrb	r3, [r7, #11]
 8006e60:	f1c3 031f 	rsb	r3, r3, #31
 8006e64:	617b      	str	r3, [r7, #20]
 8006e66:	491f      	ldr	r1, [pc, #124]	@ (8006ee4 <vTaskSwitchContext+0xb0>)
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4413      	add	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	440b      	add	r3, r1
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10b      	bne.n	8006e92 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	607b      	str	r3, [r7, #4]
}
 8006e8c:	bf00      	nop
 8006e8e:	bf00      	nop
 8006e90:	e7fd      	b.n	8006e8e <vTaskSwitchContext+0x5a>
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	4613      	mov	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4a11      	ldr	r2, [pc, #68]	@ (8006ee4 <vTaskSwitchContext+0xb0>)
 8006e9e:	4413      	add	r3, r2
 8006ea0:	613b      	str	r3, [r7, #16]
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	605a      	str	r2, [r3, #4]
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	3308      	adds	r3, #8
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d104      	bne.n	8006ec2 <vTaskSwitchContext+0x8e>
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	605a      	str	r2, [r3, #4]
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	4a07      	ldr	r2, [pc, #28]	@ (8006ee8 <vTaskSwitchContext+0xb4>)
 8006eca:	6013      	str	r3, [r2, #0]
}
 8006ecc:	bf00      	nop
 8006ece:	371c      	adds	r7, #28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	20001c44 	.word	0x20001c44
 8006edc:	20001c30 	.word	0x20001c30
 8006ee0:	20001c24 	.word	0x20001c24
 8006ee4:	20001b20 	.word	0x20001b20
 8006ee8:	20001b1c 	.word	0x20001b1c

08006eec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ef4:	f000 f852 	bl	8006f9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ef8:	4b06      	ldr	r3, [pc, #24]	@ (8006f14 <prvIdleTask+0x28>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d9f9      	bls.n	8006ef4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f00:	4b05      	ldr	r3, [pc, #20]	@ (8006f18 <prvIdleTask+0x2c>)
 8006f02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f06:	601a      	str	r2, [r3, #0]
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f10:	e7f0      	b.n	8006ef4 <prvIdleTask+0x8>
 8006f12:	bf00      	nop
 8006f14:	20001b20 	.word	0x20001b20
 8006f18:	e000ed04 	.word	0xe000ed04

08006f1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f22:	2300      	movs	r3, #0
 8006f24:	607b      	str	r3, [r7, #4]
 8006f26:	e00c      	b.n	8006f42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4a12      	ldr	r2, [pc, #72]	@ (8006f7c <prvInitialiseTaskLists+0x60>)
 8006f34:	4413      	add	r3, r2
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7ff fb22 	bl	8006580 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	607b      	str	r3, [r7, #4]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b06      	cmp	r3, #6
 8006f46:	d9ef      	bls.n	8006f28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f48:	480d      	ldr	r0, [pc, #52]	@ (8006f80 <prvInitialiseTaskLists+0x64>)
 8006f4a:	f7ff fb19 	bl	8006580 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f4e:	480d      	ldr	r0, [pc, #52]	@ (8006f84 <prvInitialiseTaskLists+0x68>)
 8006f50:	f7ff fb16 	bl	8006580 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f54:	480c      	ldr	r0, [pc, #48]	@ (8006f88 <prvInitialiseTaskLists+0x6c>)
 8006f56:	f7ff fb13 	bl	8006580 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f5a:	480c      	ldr	r0, [pc, #48]	@ (8006f8c <prvInitialiseTaskLists+0x70>)
 8006f5c:	f7ff fb10 	bl	8006580 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f60:	480b      	ldr	r0, [pc, #44]	@ (8006f90 <prvInitialiseTaskLists+0x74>)
 8006f62:	f7ff fb0d 	bl	8006580 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f66:	4b0b      	ldr	r3, [pc, #44]	@ (8006f94 <prvInitialiseTaskLists+0x78>)
 8006f68:	4a05      	ldr	r2, [pc, #20]	@ (8006f80 <prvInitialiseTaskLists+0x64>)
 8006f6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f98 <prvInitialiseTaskLists+0x7c>)
 8006f6e:	4a05      	ldr	r2, [pc, #20]	@ (8006f84 <prvInitialiseTaskLists+0x68>)
 8006f70:	601a      	str	r2, [r3, #0]
}
 8006f72:	bf00      	nop
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20001b20 	.word	0x20001b20
 8006f80:	20001bac 	.word	0x20001bac
 8006f84:	20001bc0 	.word	0x20001bc0
 8006f88:	20001bdc 	.word	0x20001bdc
 8006f8c:	20001bf0 	.word	0x20001bf0
 8006f90:	20001c08 	.word	0x20001c08
 8006f94:	20001bd4 	.word	0x20001bd4
 8006f98:	20001bd8 	.word	0x20001bd8

08006f9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fa2:	e019      	b.n	8006fd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006fa4:	f000 fa10 	bl	80073c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fa8:	4b10      	ldr	r3, [pc, #64]	@ (8006fec <prvCheckTasksWaitingTermination+0x50>)
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7ff fb6d 	bl	8006694 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006fba:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff0 <prvCheckTasksWaitingTermination+0x54>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8006ff0 <prvCheckTasksWaitingTermination+0x54>)
 8006fc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff4 <prvCheckTasksWaitingTermination+0x58>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	4a0a      	ldr	r2, [pc, #40]	@ (8006ff4 <prvCheckTasksWaitingTermination+0x58>)
 8006fcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006fce:	f000 fa2d 	bl	800742c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f810 	bl	8006ff8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fd8:	4b06      	ldr	r3, [pc, #24]	@ (8006ff4 <prvCheckTasksWaitingTermination+0x58>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e1      	bne.n	8006fa4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fe0:	bf00      	nop
 8006fe2:	bf00      	nop
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20001bf0 	.word	0x20001bf0
 8006ff0:	20001c1c 	.word	0x20001c1c
 8006ff4:	20001c04 	.word	0x20001c04

08006ff8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007006:	2b00      	cmp	r3, #0
 8007008:	d108      	bne.n	800701c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800700e:	4618      	mov	r0, r3
 8007010:	f000 fb88 	bl	8007724 <vPortFree>
				vPortFree( pxTCB );
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fb85 	bl	8007724 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800701a:	e019      	b.n	8007050 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007022:	2b01      	cmp	r3, #1
 8007024:	d103      	bne.n	800702e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fb7c 	bl	8007724 <vPortFree>
	}
 800702c:	e010      	b.n	8007050 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007034:	2b02      	cmp	r3, #2
 8007036:	d00b      	beq.n	8007050 <prvDeleteTCB+0x58>
	__asm volatile
 8007038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	60fb      	str	r3, [r7, #12]
}
 800704a:	bf00      	nop
 800704c:	bf00      	nop
 800704e:	e7fd      	b.n	800704c <prvDeleteTCB+0x54>
	}
 8007050:	bf00      	nop
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800705e:	4b0c      	ldr	r3, [pc, #48]	@ (8007090 <prvResetNextTaskUnblockTime+0x38>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d104      	bne.n	8007072 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007068:	4b0a      	ldr	r3, [pc, #40]	@ (8007094 <prvResetNextTaskUnblockTime+0x3c>)
 800706a:	f04f 32ff 	mov.w	r2, #4294967295
 800706e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007070:	e008      	b.n	8007084 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007072:	4b07      	ldr	r3, [pc, #28]	@ (8007090 <prvResetNextTaskUnblockTime+0x38>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	4a04      	ldr	r2, [pc, #16]	@ (8007094 <prvResetNextTaskUnblockTime+0x3c>)
 8007082:	6013      	str	r3, [r2, #0]
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	20001bd4 	.word	0x20001bd4
 8007094:	20001c3c 	.word	0x20001c3c

08007098 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070a2:	4b29      	ldr	r3, [pc, #164]	@ (8007148 <prvAddCurrentTaskToDelayedList+0xb0>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070a8:	4b28      	ldr	r3, [pc, #160]	@ (800714c <prvAddCurrentTaskToDelayedList+0xb4>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3304      	adds	r3, #4
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7ff faf0 	bl	8006694 <uxListRemove>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10b      	bne.n	80070d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80070ba:	4b24      	ldr	r3, [pc, #144]	@ (800714c <prvAddCurrentTaskToDelayedList+0xb4>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c0:	2201      	movs	r2, #1
 80070c2:	fa02 f303 	lsl.w	r3, r2, r3
 80070c6:	43da      	mvns	r2, r3
 80070c8:	4b21      	ldr	r3, [pc, #132]	@ (8007150 <prvAddCurrentTaskToDelayedList+0xb8>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4013      	ands	r3, r2
 80070ce:	4a20      	ldr	r2, [pc, #128]	@ (8007150 <prvAddCurrentTaskToDelayedList+0xb8>)
 80070d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d8:	d10a      	bne.n	80070f0 <prvAddCurrentTaskToDelayedList+0x58>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d007      	beq.n	80070f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070e0:	4b1a      	ldr	r3, [pc, #104]	@ (800714c <prvAddCurrentTaskToDelayedList+0xb4>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3304      	adds	r3, #4
 80070e6:	4619      	mov	r1, r3
 80070e8:	481a      	ldr	r0, [pc, #104]	@ (8007154 <prvAddCurrentTaskToDelayedList+0xbc>)
 80070ea:	f7ff fa76 	bl	80065da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070ee:	e026      	b.n	800713e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4413      	add	r3, r2
 80070f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070f8:	4b14      	ldr	r3, [pc, #80]	@ (800714c <prvAddCurrentTaskToDelayedList+0xb4>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	429a      	cmp	r2, r3
 8007106:	d209      	bcs.n	800711c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007108:	4b13      	ldr	r3, [pc, #76]	@ (8007158 <prvAddCurrentTaskToDelayedList+0xc0>)
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	4b0f      	ldr	r3, [pc, #60]	@ (800714c <prvAddCurrentTaskToDelayedList+0xb4>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3304      	adds	r3, #4
 8007112:	4619      	mov	r1, r3
 8007114:	4610      	mov	r0, r2
 8007116:	f7ff fa84 	bl	8006622 <vListInsert>
}
 800711a:	e010      	b.n	800713e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800711c:	4b0f      	ldr	r3, [pc, #60]	@ (800715c <prvAddCurrentTaskToDelayedList+0xc4>)
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	4b0a      	ldr	r3, [pc, #40]	@ (800714c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3304      	adds	r3, #4
 8007126:	4619      	mov	r1, r3
 8007128:	4610      	mov	r0, r2
 800712a:	f7ff fa7a 	bl	8006622 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800712e:	4b0c      	ldr	r3, [pc, #48]	@ (8007160 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	429a      	cmp	r2, r3
 8007136:	d202      	bcs.n	800713e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007138:	4a09      	ldr	r2, [pc, #36]	@ (8007160 <prvAddCurrentTaskToDelayedList+0xc8>)
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	6013      	str	r3, [r2, #0]
}
 800713e:	bf00      	nop
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	20001c20 	.word	0x20001c20
 800714c:	20001b1c 	.word	0x20001b1c
 8007150:	20001c24 	.word	0x20001c24
 8007154:	20001c08 	.word	0x20001c08
 8007158:	20001bd8 	.word	0x20001bd8
 800715c:	20001bd4 	.word	0x20001bd4
 8007160:	20001c3c 	.word	0x20001c3c

08007164 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3b04      	subs	r3, #4
 8007174:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800717c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3b04      	subs	r3, #4
 8007182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f023 0201 	bic.w	r2, r3, #1
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3b04      	subs	r3, #4
 8007192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007194:	4a0c      	ldr	r2, [pc, #48]	@ (80071c8 <pxPortInitialiseStack+0x64>)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	3b14      	subs	r3, #20
 800719e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3b04      	subs	r3, #4
 80071aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f06f 0202 	mvn.w	r2, #2
 80071b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	3b20      	subs	r3, #32
 80071b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071ba:	68fb      	ldr	r3, [r7, #12]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	080071cd 	.word	0x080071cd

080071cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071d6:	4b13      	ldr	r3, [pc, #76]	@ (8007224 <prvTaskExitError+0x58>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071de:	d00b      	beq.n	80071f8 <prvTaskExitError+0x2c>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	60fb      	str	r3, [r7, #12]
}
 80071f2:	bf00      	nop
 80071f4:	bf00      	nop
 80071f6:	e7fd      	b.n	80071f4 <prvTaskExitError+0x28>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	60bb      	str	r3, [r7, #8]
}
 800720a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800720c:	bf00      	nop
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d0fc      	beq.n	800720e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20000048 	.word	0x20000048
	...

08007230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007230:	4b07      	ldr	r3, [pc, #28]	@ (8007250 <pxCurrentTCBConst2>)
 8007232:	6819      	ldr	r1, [r3, #0]
 8007234:	6808      	ldr	r0, [r1, #0]
 8007236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723a:	f380 8809 	msr	PSP, r0
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f04f 0000 	mov.w	r0, #0
 8007246:	f380 8811 	msr	BASEPRI, r0
 800724a:	4770      	bx	lr
 800724c:	f3af 8000 	nop.w

08007250 <pxCurrentTCBConst2>:
 8007250:	20001b1c 	.word	0x20001b1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop

08007258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007258:	4808      	ldr	r0, [pc, #32]	@ (800727c <prvPortStartFirstTask+0x24>)
 800725a:	6800      	ldr	r0, [r0, #0]
 800725c:	6800      	ldr	r0, [r0, #0]
 800725e:	f380 8808 	msr	MSP, r0
 8007262:	f04f 0000 	mov.w	r0, #0
 8007266:	f380 8814 	msr	CONTROL, r0
 800726a:	b662      	cpsie	i
 800726c:	b661      	cpsie	f
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	df00      	svc	0
 8007278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800727a:	bf00      	nop
 800727c:	e000ed08 	.word	0xe000ed08

08007280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007286:	4b47      	ldr	r3, [pc, #284]	@ (80073a4 <xPortStartScheduler+0x124>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a47      	ldr	r2, [pc, #284]	@ (80073a8 <xPortStartScheduler+0x128>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d10b      	bne.n	80072a8 <xPortStartScheduler+0x28>
	__asm volatile
 8007290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	60fb      	str	r3, [r7, #12]
}
 80072a2:	bf00      	nop
 80072a4:	bf00      	nop
 80072a6:	e7fd      	b.n	80072a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072a8:	4b3e      	ldr	r3, [pc, #248]	@ (80073a4 <xPortStartScheduler+0x124>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a3f      	ldr	r2, [pc, #252]	@ (80073ac <xPortStartScheduler+0x12c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d10b      	bne.n	80072ca <xPortStartScheduler+0x4a>
	__asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	613b      	str	r3, [r7, #16]
}
 80072c4:	bf00      	nop
 80072c6:	bf00      	nop
 80072c8:	e7fd      	b.n	80072c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80072ca:	4b39      	ldr	r3, [pc, #228]	@ (80073b0 <xPortStartScheduler+0x130>)
 80072cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	22ff      	movs	r2, #255	@ 0xff
 80072da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072e4:	78fb      	ldrb	r3, [r7, #3]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	4b31      	ldr	r3, [pc, #196]	@ (80073b4 <xPortStartScheduler+0x134>)
 80072f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072f2:	4b31      	ldr	r3, [pc, #196]	@ (80073b8 <xPortStartScheduler+0x138>)
 80072f4:	2207      	movs	r2, #7
 80072f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072f8:	e009      	b.n	800730e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80072fa:	4b2f      	ldr	r3, [pc, #188]	@ (80073b8 <xPortStartScheduler+0x138>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3b01      	subs	r3, #1
 8007300:	4a2d      	ldr	r2, [pc, #180]	@ (80073b8 <xPortStartScheduler+0x138>)
 8007302:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007304:	78fb      	ldrb	r3, [r7, #3]
 8007306:	b2db      	uxtb	r3, r3
 8007308:	005b      	lsls	r3, r3, #1
 800730a:	b2db      	uxtb	r3, r3
 800730c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800730e:	78fb      	ldrb	r3, [r7, #3]
 8007310:	b2db      	uxtb	r3, r3
 8007312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007316:	2b80      	cmp	r3, #128	@ 0x80
 8007318:	d0ef      	beq.n	80072fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800731a:	4b27      	ldr	r3, [pc, #156]	@ (80073b8 <xPortStartScheduler+0x138>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f1c3 0307 	rsb	r3, r3, #7
 8007322:	2b04      	cmp	r3, #4
 8007324:	d00b      	beq.n	800733e <xPortStartScheduler+0xbe>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	60bb      	str	r3, [r7, #8]
}
 8007338:	bf00      	nop
 800733a:	bf00      	nop
 800733c:	e7fd      	b.n	800733a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800733e:	4b1e      	ldr	r3, [pc, #120]	@ (80073b8 <xPortStartScheduler+0x138>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	021b      	lsls	r3, r3, #8
 8007344:	4a1c      	ldr	r2, [pc, #112]	@ (80073b8 <xPortStartScheduler+0x138>)
 8007346:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007348:	4b1b      	ldr	r3, [pc, #108]	@ (80073b8 <xPortStartScheduler+0x138>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007350:	4a19      	ldr	r2, [pc, #100]	@ (80073b8 <xPortStartScheduler+0x138>)
 8007352:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	b2da      	uxtb	r2, r3
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800735c:	4b17      	ldr	r3, [pc, #92]	@ (80073bc <xPortStartScheduler+0x13c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a16      	ldr	r2, [pc, #88]	@ (80073bc <xPortStartScheduler+0x13c>)
 8007362:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007366:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007368:	4b14      	ldr	r3, [pc, #80]	@ (80073bc <xPortStartScheduler+0x13c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a13      	ldr	r2, [pc, #76]	@ (80073bc <xPortStartScheduler+0x13c>)
 800736e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007372:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007374:	f000 f8da 	bl	800752c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007378:	4b11      	ldr	r3, [pc, #68]	@ (80073c0 <xPortStartScheduler+0x140>)
 800737a:	2200      	movs	r2, #0
 800737c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800737e:	f000 f8f9 	bl	8007574 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007382:	4b10      	ldr	r3, [pc, #64]	@ (80073c4 <xPortStartScheduler+0x144>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a0f      	ldr	r2, [pc, #60]	@ (80073c4 <xPortStartScheduler+0x144>)
 8007388:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800738c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800738e:	f7ff ff63 	bl	8007258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007392:	f7ff fd4f 	bl	8006e34 <vTaskSwitchContext>
	prvTaskExitError();
 8007396:	f7ff ff19 	bl	80071cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	e000ed00 	.word	0xe000ed00
 80073a8:	410fc271 	.word	0x410fc271
 80073ac:	410fc270 	.word	0x410fc270
 80073b0:	e000e400 	.word	0xe000e400
 80073b4:	20001c48 	.word	0x20001c48
 80073b8:	20001c4c 	.word	0x20001c4c
 80073bc:	e000ed20 	.word	0xe000ed20
 80073c0:	20000048 	.word	0x20000048
 80073c4:	e000ef34 	.word	0xe000ef34

080073c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	607b      	str	r3, [r7, #4]
}
 80073e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80073e2:	4b10      	ldr	r3, [pc, #64]	@ (8007424 <vPortEnterCritical+0x5c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3301      	adds	r3, #1
 80073e8:	4a0e      	ldr	r2, [pc, #56]	@ (8007424 <vPortEnterCritical+0x5c>)
 80073ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80073ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007424 <vPortEnterCritical+0x5c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d110      	bne.n	8007416 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007428 <vPortEnterCritical+0x60>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00b      	beq.n	8007416 <vPortEnterCritical+0x4e>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	603b      	str	r3, [r7, #0]
}
 8007410:	bf00      	nop
 8007412:	bf00      	nop
 8007414:	e7fd      	b.n	8007412 <vPortEnterCritical+0x4a>
	}
}
 8007416:	bf00      	nop
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	20000048 	.word	0x20000048
 8007428:	e000ed04 	.word	0xe000ed04

0800742c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007432:	4b12      	ldr	r3, [pc, #72]	@ (800747c <vPortExitCritical+0x50>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10b      	bne.n	8007452 <vPortExitCritical+0x26>
	__asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	607b      	str	r3, [r7, #4]
}
 800744c:	bf00      	nop
 800744e:	bf00      	nop
 8007450:	e7fd      	b.n	800744e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007452:	4b0a      	ldr	r3, [pc, #40]	@ (800747c <vPortExitCritical+0x50>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3b01      	subs	r3, #1
 8007458:	4a08      	ldr	r2, [pc, #32]	@ (800747c <vPortExitCritical+0x50>)
 800745a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800745c:	4b07      	ldr	r3, [pc, #28]	@ (800747c <vPortExitCritical+0x50>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d105      	bne.n	8007470 <vPortExitCritical+0x44>
 8007464:	2300      	movs	r3, #0
 8007466:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800746e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	20000048 	.word	0x20000048

08007480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007480:	f3ef 8009 	mrs	r0, PSP
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	4b15      	ldr	r3, [pc, #84]	@ (80074e0 <pxCurrentTCBConst>)
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	f01e 0f10 	tst.w	lr, #16
 8007490:	bf08      	it	eq
 8007492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749a:	6010      	str	r0, [r2, #0]
 800749c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80074a4:	f380 8811 	msr	BASEPRI, r0
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f7ff fcc0 	bl	8006e34 <vTaskSwitchContext>
 80074b4:	f04f 0000 	mov.w	r0, #0
 80074b8:	f380 8811 	msr	BASEPRI, r0
 80074bc:	bc09      	pop	{r0, r3}
 80074be:	6819      	ldr	r1, [r3, #0]
 80074c0:	6808      	ldr	r0, [r1, #0]
 80074c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c6:	f01e 0f10 	tst.w	lr, #16
 80074ca:	bf08      	it	eq
 80074cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074d0:	f380 8809 	msr	PSP, r0
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	f3af 8000 	nop.w

080074e0 <pxCurrentTCBConst>:
 80074e0:	20001b1c 	.word	0x20001b1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop

080074e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	607b      	str	r3, [r7, #4]
}
 8007500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007502:	f7ff fbdd 	bl	8006cc0 <xTaskIncrementTick>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d003      	beq.n	8007514 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800750c:	4b06      	ldr	r3, [pc, #24]	@ (8007528 <SysTick_Handler+0x40>)
 800750e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	2300      	movs	r3, #0
 8007516:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	f383 8811 	msr	BASEPRI, r3
}
 800751e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007520:	bf00      	nop
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	e000ed04 	.word	0xe000ed04

0800752c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007530:	4b0b      	ldr	r3, [pc, #44]	@ (8007560 <vPortSetupTimerInterrupt+0x34>)
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007536:	4b0b      	ldr	r3, [pc, #44]	@ (8007564 <vPortSetupTimerInterrupt+0x38>)
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800753c:	4b0a      	ldr	r3, [pc, #40]	@ (8007568 <vPortSetupTimerInterrupt+0x3c>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a0a      	ldr	r2, [pc, #40]	@ (800756c <vPortSetupTimerInterrupt+0x40>)
 8007542:	fba2 2303 	umull	r2, r3, r2, r3
 8007546:	099b      	lsrs	r3, r3, #6
 8007548:	4a09      	ldr	r2, [pc, #36]	@ (8007570 <vPortSetupTimerInterrupt+0x44>)
 800754a:	3b01      	subs	r3, #1
 800754c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800754e:	4b04      	ldr	r3, [pc, #16]	@ (8007560 <vPortSetupTimerInterrupt+0x34>)
 8007550:	2207      	movs	r2, #7
 8007552:	601a      	str	r2, [r3, #0]
}
 8007554:	bf00      	nop
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	e000e010 	.word	0xe000e010
 8007564:	e000e018 	.word	0xe000e018
 8007568:	20000000 	.word	0x20000000
 800756c:	10624dd3 	.word	0x10624dd3
 8007570:	e000e014 	.word	0xe000e014

08007574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007574:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007584 <vPortEnableVFP+0x10>
 8007578:	6801      	ldr	r1, [r0, #0]
 800757a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800757e:	6001      	str	r1, [r0, #0]
 8007580:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007582:	bf00      	nop
 8007584:	e000ed88 	.word	0xe000ed88

08007588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08a      	sub	sp, #40	@ 0x28
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007590:	2300      	movs	r3, #0
 8007592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007594:	f7ff fad8 	bl	8006b48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007598:	4b5c      	ldr	r3, [pc, #368]	@ (800770c <pvPortMalloc+0x184>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075a0:	f000 f924 	bl	80077ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075a4:	4b5a      	ldr	r3, [pc, #360]	@ (8007710 <pvPortMalloc+0x188>)
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4013      	ands	r3, r2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f040 8095 	bne.w	80076dc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d01e      	beq.n	80075f6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80075b8:	2208      	movs	r2, #8
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4413      	add	r3, r2
 80075be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f003 0307 	and.w	r3, r3, #7
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d015      	beq.n	80075f6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f023 0307 	bic.w	r3, r3, #7
 80075d0:	3308      	adds	r3, #8
 80075d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f003 0307 	and.w	r3, r3, #7
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00b      	beq.n	80075f6 <pvPortMalloc+0x6e>
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	617b      	str	r3, [r7, #20]
}
 80075f0:	bf00      	nop
 80075f2:	bf00      	nop
 80075f4:	e7fd      	b.n	80075f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d06f      	beq.n	80076dc <pvPortMalloc+0x154>
 80075fc:	4b45      	ldr	r3, [pc, #276]	@ (8007714 <pvPortMalloc+0x18c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	429a      	cmp	r2, r3
 8007604:	d86a      	bhi.n	80076dc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007606:	4b44      	ldr	r3, [pc, #272]	@ (8007718 <pvPortMalloc+0x190>)
 8007608:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800760a:	4b43      	ldr	r3, [pc, #268]	@ (8007718 <pvPortMalloc+0x190>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007610:	e004      	b.n	800761c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007614:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800761c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	429a      	cmp	r2, r3
 8007624:	d903      	bls.n	800762e <pvPortMalloc+0xa6>
 8007626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1f1      	bne.n	8007612 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800762e:	4b37      	ldr	r3, [pc, #220]	@ (800770c <pvPortMalloc+0x184>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007634:	429a      	cmp	r2, r3
 8007636:	d051      	beq.n	80076dc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2208      	movs	r2, #8
 800763e:	4413      	add	r3, r2
 8007640:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800764a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	1ad2      	subs	r2, r2, r3
 8007652:	2308      	movs	r3, #8
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	429a      	cmp	r2, r3
 8007658:	d920      	bls.n	800769c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800765a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4413      	add	r3, r2
 8007660:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	f003 0307 	and.w	r3, r3, #7
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <pvPortMalloc+0xfc>
	__asm volatile
 800766c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007670:	f383 8811 	msr	BASEPRI, r3
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	613b      	str	r3, [r7, #16]
}
 800767e:	bf00      	nop
 8007680:	bf00      	nop
 8007682:	e7fd      	b.n	8007680 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	1ad2      	subs	r2, r2, r3
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007696:	69b8      	ldr	r0, [r7, #24]
 8007698:	f000 f90a 	bl	80078b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800769c:	4b1d      	ldr	r3, [pc, #116]	@ (8007714 <pvPortMalloc+0x18c>)
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	4a1b      	ldr	r2, [pc, #108]	@ (8007714 <pvPortMalloc+0x18c>)
 80076a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076aa:	4b1a      	ldr	r3, [pc, #104]	@ (8007714 <pvPortMalloc+0x18c>)
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	4b1b      	ldr	r3, [pc, #108]	@ (800771c <pvPortMalloc+0x194>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d203      	bcs.n	80076be <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076b6:	4b17      	ldr	r3, [pc, #92]	@ (8007714 <pvPortMalloc+0x18c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a18      	ldr	r2, [pc, #96]	@ (800771c <pvPortMalloc+0x194>)
 80076bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	4b13      	ldr	r3, [pc, #76]	@ (8007710 <pvPortMalloc+0x188>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	431a      	orrs	r2, r3
 80076c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ce:	2200      	movs	r2, #0
 80076d0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80076d2:	4b13      	ldr	r3, [pc, #76]	@ (8007720 <pvPortMalloc+0x198>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3301      	adds	r3, #1
 80076d8:	4a11      	ldr	r2, [pc, #68]	@ (8007720 <pvPortMalloc+0x198>)
 80076da:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076dc:	f7ff fa42 	bl	8006b64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	f003 0307 	and.w	r3, r3, #7
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00b      	beq.n	8007702 <pvPortMalloc+0x17a>
	__asm volatile
 80076ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	60fb      	str	r3, [r7, #12]
}
 80076fc:	bf00      	nop
 80076fe:	bf00      	nop
 8007700:	e7fd      	b.n	80076fe <pvPortMalloc+0x176>
	return pvReturn;
 8007702:	69fb      	ldr	r3, [r7, #28]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3728      	adds	r7, #40	@ 0x28
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	20002810 	.word	0x20002810
 8007710:	20002824 	.word	0x20002824
 8007714:	20002814 	.word	0x20002814
 8007718:	20002808 	.word	0x20002808
 800771c:	20002818 	.word	0x20002818
 8007720:	2000281c 	.word	0x2000281c

08007724 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d04f      	beq.n	80077d6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007736:	2308      	movs	r3, #8
 8007738:	425b      	negs	r3, r3
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	4413      	add	r3, r2
 800773e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	4b25      	ldr	r3, [pc, #148]	@ (80077e0 <vPortFree+0xbc>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4013      	ands	r3, r2
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10b      	bne.n	800776a <vPortFree+0x46>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	60fb      	str	r3, [r7, #12]
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop
 8007768:	e7fd      	b.n	8007766 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00b      	beq.n	800778a <vPortFree+0x66>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	60bb      	str	r3, [r7, #8]
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop
 8007788:	e7fd      	b.n	8007786 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	4b14      	ldr	r3, [pc, #80]	@ (80077e0 <vPortFree+0xbc>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4013      	ands	r3, r2
 8007794:	2b00      	cmp	r3, #0
 8007796:	d01e      	beq.n	80077d6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d11a      	bne.n	80077d6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	4b0e      	ldr	r3, [pc, #56]	@ (80077e0 <vPortFree+0xbc>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	43db      	mvns	r3, r3
 80077aa:	401a      	ands	r2, r3
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077b0:	f7ff f9ca 	bl	8006b48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	4b0a      	ldr	r3, [pc, #40]	@ (80077e4 <vPortFree+0xc0>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4413      	add	r3, r2
 80077be:	4a09      	ldr	r2, [pc, #36]	@ (80077e4 <vPortFree+0xc0>)
 80077c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077c2:	6938      	ldr	r0, [r7, #16]
 80077c4:	f000 f874 	bl	80078b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80077c8:	4b07      	ldr	r3, [pc, #28]	@ (80077e8 <vPortFree+0xc4>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3301      	adds	r3, #1
 80077ce:	4a06      	ldr	r2, [pc, #24]	@ (80077e8 <vPortFree+0xc4>)
 80077d0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80077d2:	f7ff f9c7 	bl	8006b64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077d6:	bf00      	nop
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20002824 	.word	0x20002824
 80077e4:	20002814 	.word	0x20002814
 80077e8:	20002820 	.word	0x20002820

080077ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077f2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80077f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077f8:	4b27      	ldr	r3, [pc, #156]	@ (8007898 <prvHeapInit+0xac>)
 80077fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f003 0307 	and.w	r3, r3, #7
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00c      	beq.n	8007820 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3307      	adds	r3, #7
 800780a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f023 0307 	bic.w	r3, r3, #7
 8007812:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	4a1f      	ldr	r2, [pc, #124]	@ (8007898 <prvHeapInit+0xac>)
 800781c:	4413      	add	r3, r2
 800781e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007824:	4a1d      	ldr	r2, [pc, #116]	@ (800789c <prvHeapInit+0xb0>)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800782a:	4b1c      	ldr	r3, [pc, #112]	@ (800789c <prvHeapInit+0xb0>)
 800782c:	2200      	movs	r2, #0
 800782e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	4413      	add	r3, r2
 8007836:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007838:	2208      	movs	r2, #8
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	1a9b      	subs	r3, r3, r2
 800783e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f023 0307 	bic.w	r3, r3, #7
 8007846:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	4a15      	ldr	r2, [pc, #84]	@ (80078a0 <prvHeapInit+0xb4>)
 800784c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800784e:	4b14      	ldr	r3, [pc, #80]	@ (80078a0 <prvHeapInit+0xb4>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2200      	movs	r2, #0
 8007854:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007856:	4b12      	ldr	r3, [pc, #72]	@ (80078a0 <prvHeapInit+0xb4>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2200      	movs	r2, #0
 800785c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	1ad2      	subs	r2, r2, r3
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800786c:	4b0c      	ldr	r3, [pc, #48]	@ (80078a0 <prvHeapInit+0xb4>)
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	4a0a      	ldr	r2, [pc, #40]	@ (80078a4 <prvHeapInit+0xb8>)
 800787a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	4a09      	ldr	r2, [pc, #36]	@ (80078a8 <prvHeapInit+0xbc>)
 8007882:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007884:	4b09      	ldr	r3, [pc, #36]	@ (80078ac <prvHeapInit+0xc0>)
 8007886:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800788a:	601a      	str	r2, [r3, #0]
}
 800788c:	bf00      	nop
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	20001c50 	.word	0x20001c50
 800789c:	20002808 	.word	0x20002808
 80078a0:	20002810 	.word	0x20002810
 80078a4:	20002818 	.word	0x20002818
 80078a8:	20002814 	.word	0x20002814
 80078ac:	20002824 	.word	0x20002824

080078b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078b8:	4b28      	ldr	r3, [pc, #160]	@ (800795c <prvInsertBlockIntoFreeList+0xac>)
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	e002      	b.n	80078c4 <prvInsertBlockIntoFreeList+0x14>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d8f7      	bhi.n	80078be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	4413      	add	r3, r2
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d108      	bne.n	80078f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	685a      	ldr	r2, [r3, #4]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	441a      	add	r2, r3
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	441a      	add	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	429a      	cmp	r2, r3
 8007904:	d118      	bne.n	8007938 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	4b15      	ldr	r3, [pc, #84]	@ (8007960 <prvInsertBlockIntoFreeList+0xb0>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	429a      	cmp	r2, r3
 8007910:	d00d      	beq.n	800792e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	441a      	add	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	601a      	str	r2, [r3, #0]
 800792c:	e008      	b.n	8007940 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800792e:	4b0c      	ldr	r3, [pc, #48]	@ (8007960 <prvInsertBlockIntoFreeList+0xb0>)
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	e003      	b.n	8007940 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	429a      	cmp	r2, r3
 8007946:	d002      	beq.n	800794e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800794e:	bf00      	nop
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	20002808 	.word	0x20002808
 8007960:	20002810 	.word	0x20002810

08007964 <std>:
 8007964:	2300      	movs	r3, #0
 8007966:	b510      	push	{r4, lr}
 8007968:	4604      	mov	r4, r0
 800796a:	e9c0 3300 	strd	r3, r3, [r0]
 800796e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007972:	6083      	str	r3, [r0, #8]
 8007974:	8181      	strh	r1, [r0, #12]
 8007976:	6643      	str	r3, [r0, #100]	@ 0x64
 8007978:	81c2      	strh	r2, [r0, #14]
 800797a:	6183      	str	r3, [r0, #24]
 800797c:	4619      	mov	r1, r3
 800797e:	2208      	movs	r2, #8
 8007980:	305c      	adds	r0, #92	@ 0x5c
 8007982:	f000 f9f9 	bl	8007d78 <memset>
 8007986:	4b0d      	ldr	r3, [pc, #52]	@ (80079bc <std+0x58>)
 8007988:	6263      	str	r3, [r4, #36]	@ 0x24
 800798a:	4b0d      	ldr	r3, [pc, #52]	@ (80079c0 <std+0x5c>)
 800798c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800798e:	4b0d      	ldr	r3, [pc, #52]	@ (80079c4 <std+0x60>)
 8007990:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007992:	4b0d      	ldr	r3, [pc, #52]	@ (80079c8 <std+0x64>)
 8007994:	6323      	str	r3, [r4, #48]	@ 0x30
 8007996:	4b0d      	ldr	r3, [pc, #52]	@ (80079cc <std+0x68>)
 8007998:	6224      	str	r4, [r4, #32]
 800799a:	429c      	cmp	r4, r3
 800799c:	d006      	beq.n	80079ac <std+0x48>
 800799e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80079a2:	4294      	cmp	r4, r2
 80079a4:	d002      	beq.n	80079ac <std+0x48>
 80079a6:	33d0      	adds	r3, #208	@ 0xd0
 80079a8:	429c      	cmp	r4, r3
 80079aa:	d105      	bne.n	80079b8 <std+0x54>
 80079ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80079b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079b4:	f000 ba58 	b.w	8007e68 <__retarget_lock_init_recursive>
 80079b8:	bd10      	pop	{r4, pc}
 80079ba:	bf00      	nop
 80079bc:	08007bc9 	.word	0x08007bc9
 80079c0:	08007beb 	.word	0x08007beb
 80079c4:	08007c23 	.word	0x08007c23
 80079c8:	08007c47 	.word	0x08007c47
 80079cc:	20002828 	.word	0x20002828

080079d0 <stdio_exit_handler>:
 80079d0:	4a02      	ldr	r2, [pc, #8]	@ (80079dc <stdio_exit_handler+0xc>)
 80079d2:	4903      	ldr	r1, [pc, #12]	@ (80079e0 <stdio_exit_handler+0x10>)
 80079d4:	4803      	ldr	r0, [pc, #12]	@ (80079e4 <stdio_exit_handler+0x14>)
 80079d6:	f000 b869 	b.w	8007aac <_fwalk_sglue>
 80079da:	bf00      	nop
 80079dc:	2000004c 	.word	0x2000004c
 80079e0:	08008705 	.word	0x08008705
 80079e4:	2000005c 	.word	0x2000005c

080079e8 <cleanup_stdio>:
 80079e8:	6841      	ldr	r1, [r0, #4]
 80079ea:	4b0c      	ldr	r3, [pc, #48]	@ (8007a1c <cleanup_stdio+0x34>)
 80079ec:	4299      	cmp	r1, r3
 80079ee:	b510      	push	{r4, lr}
 80079f0:	4604      	mov	r4, r0
 80079f2:	d001      	beq.n	80079f8 <cleanup_stdio+0x10>
 80079f4:	f000 fe86 	bl	8008704 <_fflush_r>
 80079f8:	68a1      	ldr	r1, [r4, #8]
 80079fa:	4b09      	ldr	r3, [pc, #36]	@ (8007a20 <cleanup_stdio+0x38>)
 80079fc:	4299      	cmp	r1, r3
 80079fe:	d002      	beq.n	8007a06 <cleanup_stdio+0x1e>
 8007a00:	4620      	mov	r0, r4
 8007a02:	f000 fe7f 	bl	8008704 <_fflush_r>
 8007a06:	68e1      	ldr	r1, [r4, #12]
 8007a08:	4b06      	ldr	r3, [pc, #24]	@ (8007a24 <cleanup_stdio+0x3c>)
 8007a0a:	4299      	cmp	r1, r3
 8007a0c:	d004      	beq.n	8007a18 <cleanup_stdio+0x30>
 8007a0e:	4620      	mov	r0, r4
 8007a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a14:	f000 be76 	b.w	8008704 <_fflush_r>
 8007a18:	bd10      	pop	{r4, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20002828 	.word	0x20002828
 8007a20:	20002890 	.word	0x20002890
 8007a24:	200028f8 	.word	0x200028f8

08007a28 <global_stdio_init.part.0>:
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8007a58 <global_stdio_init.part.0+0x30>)
 8007a2c:	4c0b      	ldr	r4, [pc, #44]	@ (8007a5c <global_stdio_init.part.0+0x34>)
 8007a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8007a60 <global_stdio_init.part.0+0x38>)
 8007a30:	601a      	str	r2, [r3, #0]
 8007a32:	4620      	mov	r0, r4
 8007a34:	2200      	movs	r2, #0
 8007a36:	2104      	movs	r1, #4
 8007a38:	f7ff ff94 	bl	8007964 <std>
 8007a3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a40:	2201      	movs	r2, #1
 8007a42:	2109      	movs	r1, #9
 8007a44:	f7ff ff8e 	bl	8007964 <std>
 8007a48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a52:	2112      	movs	r1, #18
 8007a54:	f7ff bf86 	b.w	8007964 <std>
 8007a58:	20002960 	.word	0x20002960
 8007a5c:	20002828 	.word	0x20002828
 8007a60:	080079d1 	.word	0x080079d1

08007a64 <__sfp_lock_acquire>:
 8007a64:	4801      	ldr	r0, [pc, #4]	@ (8007a6c <__sfp_lock_acquire+0x8>)
 8007a66:	f000 ba00 	b.w	8007e6a <__retarget_lock_acquire_recursive>
 8007a6a:	bf00      	nop
 8007a6c:	20002969 	.word	0x20002969

08007a70 <__sfp_lock_release>:
 8007a70:	4801      	ldr	r0, [pc, #4]	@ (8007a78 <__sfp_lock_release+0x8>)
 8007a72:	f000 b9fb 	b.w	8007e6c <__retarget_lock_release_recursive>
 8007a76:	bf00      	nop
 8007a78:	20002969 	.word	0x20002969

08007a7c <__sinit>:
 8007a7c:	b510      	push	{r4, lr}
 8007a7e:	4604      	mov	r4, r0
 8007a80:	f7ff fff0 	bl	8007a64 <__sfp_lock_acquire>
 8007a84:	6a23      	ldr	r3, [r4, #32]
 8007a86:	b11b      	cbz	r3, 8007a90 <__sinit+0x14>
 8007a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a8c:	f7ff bff0 	b.w	8007a70 <__sfp_lock_release>
 8007a90:	4b04      	ldr	r3, [pc, #16]	@ (8007aa4 <__sinit+0x28>)
 8007a92:	6223      	str	r3, [r4, #32]
 8007a94:	4b04      	ldr	r3, [pc, #16]	@ (8007aa8 <__sinit+0x2c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1f5      	bne.n	8007a88 <__sinit+0xc>
 8007a9c:	f7ff ffc4 	bl	8007a28 <global_stdio_init.part.0>
 8007aa0:	e7f2      	b.n	8007a88 <__sinit+0xc>
 8007aa2:	bf00      	nop
 8007aa4:	080079e9 	.word	0x080079e9
 8007aa8:	20002960 	.word	0x20002960

08007aac <_fwalk_sglue>:
 8007aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ab0:	4607      	mov	r7, r0
 8007ab2:	4688      	mov	r8, r1
 8007ab4:	4614      	mov	r4, r2
 8007ab6:	2600      	movs	r6, #0
 8007ab8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007abc:	f1b9 0901 	subs.w	r9, r9, #1
 8007ac0:	d505      	bpl.n	8007ace <_fwalk_sglue+0x22>
 8007ac2:	6824      	ldr	r4, [r4, #0]
 8007ac4:	2c00      	cmp	r4, #0
 8007ac6:	d1f7      	bne.n	8007ab8 <_fwalk_sglue+0xc>
 8007ac8:	4630      	mov	r0, r6
 8007aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ace:	89ab      	ldrh	r3, [r5, #12]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d907      	bls.n	8007ae4 <_fwalk_sglue+0x38>
 8007ad4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	d003      	beq.n	8007ae4 <_fwalk_sglue+0x38>
 8007adc:	4629      	mov	r1, r5
 8007ade:	4638      	mov	r0, r7
 8007ae0:	47c0      	blx	r8
 8007ae2:	4306      	orrs	r6, r0
 8007ae4:	3568      	adds	r5, #104	@ 0x68
 8007ae6:	e7e9      	b.n	8007abc <_fwalk_sglue+0x10>

08007ae8 <iprintf>:
 8007ae8:	b40f      	push	{r0, r1, r2, r3}
 8007aea:	b507      	push	{r0, r1, r2, lr}
 8007aec:	4906      	ldr	r1, [pc, #24]	@ (8007b08 <iprintf+0x20>)
 8007aee:	ab04      	add	r3, sp, #16
 8007af0:	6808      	ldr	r0, [r1, #0]
 8007af2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007af6:	6881      	ldr	r1, [r0, #8]
 8007af8:	9301      	str	r3, [sp, #4]
 8007afa:	f000 fadb 	bl	80080b4 <_vfiprintf_r>
 8007afe:	b003      	add	sp, #12
 8007b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b04:	b004      	add	sp, #16
 8007b06:	4770      	bx	lr
 8007b08:	20000058 	.word	0x20000058

08007b0c <_puts_r>:
 8007b0c:	6a03      	ldr	r3, [r0, #32]
 8007b0e:	b570      	push	{r4, r5, r6, lr}
 8007b10:	6884      	ldr	r4, [r0, #8]
 8007b12:	4605      	mov	r5, r0
 8007b14:	460e      	mov	r6, r1
 8007b16:	b90b      	cbnz	r3, 8007b1c <_puts_r+0x10>
 8007b18:	f7ff ffb0 	bl	8007a7c <__sinit>
 8007b1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b1e:	07db      	lsls	r3, r3, #31
 8007b20:	d405      	bmi.n	8007b2e <_puts_r+0x22>
 8007b22:	89a3      	ldrh	r3, [r4, #12]
 8007b24:	0598      	lsls	r0, r3, #22
 8007b26:	d402      	bmi.n	8007b2e <_puts_r+0x22>
 8007b28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b2a:	f000 f99e 	bl	8007e6a <__retarget_lock_acquire_recursive>
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	0719      	lsls	r1, r3, #28
 8007b32:	d502      	bpl.n	8007b3a <_puts_r+0x2e>
 8007b34:	6923      	ldr	r3, [r4, #16]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d135      	bne.n	8007ba6 <_puts_r+0x9a>
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f000 f8c5 	bl	8007ccc <__swsetup_r>
 8007b42:	b380      	cbz	r0, 8007ba6 <_puts_r+0x9a>
 8007b44:	f04f 35ff 	mov.w	r5, #4294967295
 8007b48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b4a:	07da      	lsls	r2, r3, #31
 8007b4c:	d405      	bmi.n	8007b5a <_puts_r+0x4e>
 8007b4e:	89a3      	ldrh	r3, [r4, #12]
 8007b50:	059b      	lsls	r3, r3, #22
 8007b52:	d402      	bmi.n	8007b5a <_puts_r+0x4e>
 8007b54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b56:	f000 f989 	bl	8007e6c <__retarget_lock_release_recursive>
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	bd70      	pop	{r4, r5, r6, pc}
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	da04      	bge.n	8007b6c <_puts_r+0x60>
 8007b62:	69a2      	ldr	r2, [r4, #24]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	dc17      	bgt.n	8007b98 <_puts_r+0x8c>
 8007b68:	290a      	cmp	r1, #10
 8007b6a:	d015      	beq.n	8007b98 <_puts_r+0x8c>
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	1c5a      	adds	r2, r3, #1
 8007b70:	6022      	str	r2, [r4, #0]
 8007b72:	7019      	strb	r1, [r3, #0]
 8007b74:	68a3      	ldr	r3, [r4, #8]
 8007b76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	60a3      	str	r3, [r4, #8]
 8007b7e:	2900      	cmp	r1, #0
 8007b80:	d1ed      	bne.n	8007b5e <_puts_r+0x52>
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	da11      	bge.n	8007baa <_puts_r+0x9e>
 8007b86:	4622      	mov	r2, r4
 8007b88:	210a      	movs	r1, #10
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	f000 f85f 	bl	8007c4e <__swbuf_r>
 8007b90:	3001      	adds	r0, #1
 8007b92:	d0d7      	beq.n	8007b44 <_puts_r+0x38>
 8007b94:	250a      	movs	r5, #10
 8007b96:	e7d7      	b.n	8007b48 <_puts_r+0x3c>
 8007b98:	4622      	mov	r2, r4
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	f000 f857 	bl	8007c4e <__swbuf_r>
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	d1e7      	bne.n	8007b74 <_puts_r+0x68>
 8007ba4:	e7ce      	b.n	8007b44 <_puts_r+0x38>
 8007ba6:	3e01      	subs	r6, #1
 8007ba8:	e7e4      	b.n	8007b74 <_puts_r+0x68>
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	1c5a      	adds	r2, r3, #1
 8007bae:	6022      	str	r2, [r4, #0]
 8007bb0:	220a      	movs	r2, #10
 8007bb2:	701a      	strb	r2, [r3, #0]
 8007bb4:	e7ee      	b.n	8007b94 <_puts_r+0x88>
	...

08007bb8 <puts>:
 8007bb8:	4b02      	ldr	r3, [pc, #8]	@ (8007bc4 <puts+0xc>)
 8007bba:	4601      	mov	r1, r0
 8007bbc:	6818      	ldr	r0, [r3, #0]
 8007bbe:	f7ff bfa5 	b.w	8007b0c <_puts_r>
 8007bc2:	bf00      	nop
 8007bc4:	20000058 	.word	0x20000058

08007bc8 <__sread>:
 8007bc8:	b510      	push	{r4, lr}
 8007bca:	460c      	mov	r4, r1
 8007bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd0:	f000 f8fc 	bl	8007dcc <_read_r>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	bfab      	itete	ge
 8007bd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007bda:	89a3      	ldrhlt	r3, [r4, #12]
 8007bdc:	181b      	addge	r3, r3, r0
 8007bde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007be2:	bfac      	ite	ge
 8007be4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007be6:	81a3      	strhlt	r3, [r4, #12]
 8007be8:	bd10      	pop	{r4, pc}

08007bea <__swrite>:
 8007bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bee:	461f      	mov	r7, r3
 8007bf0:	898b      	ldrh	r3, [r1, #12]
 8007bf2:	05db      	lsls	r3, r3, #23
 8007bf4:	4605      	mov	r5, r0
 8007bf6:	460c      	mov	r4, r1
 8007bf8:	4616      	mov	r6, r2
 8007bfa:	d505      	bpl.n	8007c08 <__swrite+0x1e>
 8007bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c00:	2302      	movs	r3, #2
 8007c02:	2200      	movs	r2, #0
 8007c04:	f000 f8d0 	bl	8007da8 <_lseek_r>
 8007c08:	89a3      	ldrh	r3, [r4, #12]
 8007c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c12:	81a3      	strh	r3, [r4, #12]
 8007c14:	4632      	mov	r2, r6
 8007c16:	463b      	mov	r3, r7
 8007c18:	4628      	mov	r0, r5
 8007c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c1e:	f000 b8e7 	b.w	8007df0 <_write_r>

08007c22 <__sseek>:
 8007c22:	b510      	push	{r4, lr}
 8007c24:	460c      	mov	r4, r1
 8007c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c2a:	f000 f8bd 	bl	8007da8 <_lseek_r>
 8007c2e:	1c43      	adds	r3, r0, #1
 8007c30:	89a3      	ldrh	r3, [r4, #12]
 8007c32:	bf15      	itete	ne
 8007c34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c3e:	81a3      	strheq	r3, [r4, #12]
 8007c40:	bf18      	it	ne
 8007c42:	81a3      	strhne	r3, [r4, #12]
 8007c44:	bd10      	pop	{r4, pc}

08007c46 <__sclose>:
 8007c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c4a:	f000 b89d 	b.w	8007d88 <_close_r>

08007c4e <__swbuf_r>:
 8007c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c50:	460e      	mov	r6, r1
 8007c52:	4614      	mov	r4, r2
 8007c54:	4605      	mov	r5, r0
 8007c56:	b118      	cbz	r0, 8007c60 <__swbuf_r+0x12>
 8007c58:	6a03      	ldr	r3, [r0, #32]
 8007c5a:	b90b      	cbnz	r3, 8007c60 <__swbuf_r+0x12>
 8007c5c:	f7ff ff0e 	bl	8007a7c <__sinit>
 8007c60:	69a3      	ldr	r3, [r4, #24]
 8007c62:	60a3      	str	r3, [r4, #8]
 8007c64:	89a3      	ldrh	r3, [r4, #12]
 8007c66:	071a      	lsls	r2, r3, #28
 8007c68:	d501      	bpl.n	8007c6e <__swbuf_r+0x20>
 8007c6a:	6923      	ldr	r3, [r4, #16]
 8007c6c:	b943      	cbnz	r3, 8007c80 <__swbuf_r+0x32>
 8007c6e:	4621      	mov	r1, r4
 8007c70:	4628      	mov	r0, r5
 8007c72:	f000 f82b 	bl	8007ccc <__swsetup_r>
 8007c76:	b118      	cbz	r0, 8007c80 <__swbuf_r+0x32>
 8007c78:	f04f 37ff 	mov.w	r7, #4294967295
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c80:	6823      	ldr	r3, [r4, #0]
 8007c82:	6922      	ldr	r2, [r4, #16]
 8007c84:	1a98      	subs	r0, r3, r2
 8007c86:	6963      	ldr	r3, [r4, #20]
 8007c88:	b2f6      	uxtb	r6, r6
 8007c8a:	4283      	cmp	r3, r0
 8007c8c:	4637      	mov	r7, r6
 8007c8e:	dc05      	bgt.n	8007c9c <__swbuf_r+0x4e>
 8007c90:	4621      	mov	r1, r4
 8007c92:	4628      	mov	r0, r5
 8007c94:	f000 fd36 	bl	8008704 <_fflush_r>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	d1ed      	bne.n	8007c78 <__swbuf_r+0x2a>
 8007c9c:	68a3      	ldr	r3, [r4, #8]
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	60a3      	str	r3, [r4, #8]
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	1c5a      	adds	r2, r3, #1
 8007ca6:	6022      	str	r2, [r4, #0]
 8007ca8:	701e      	strb	r6, [r3, #0]
 8007caa:	6962      	ldr	r2, [r4, #20]
 8007cac:	1c43      	adds	r3, r0, #1
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d004      	beq.n	8007cbc <__swbuf_r+0x6e>
 8007cb2:	89a3      	ldrh	r3, [r4, #12]
 8007cb4:	07db      	lsls	r3, r3, #31
 8007cb6:	d5e1      	bpl.n	8007c7c <__swbuf_r+0x2e>
 8007cb8:	2e0a      	cmp	r6, #10
 8007cba:	d1df      	bne.n	8007c7c <__swbuf_r+0x2e>
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	f000 fd20 	bl	8008704 <_fflush_r>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d0d9      	beq.n	8007c7c <__swbuf_r+0x2e>
 8007cc8:	e7d6      	b.n	8007c78 <__swbuf_r+0x2a>
	...

08007ccc <__swsetup_r>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	4b29      	ldr	r3, [pc, #164]	@ (8007d74 <__swsetup_r+0xa8>)
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	6818      	ldr	r0, [r3, #0]
 8007cd4:	460c      	mov	r4, r1
 8007cd6:	b118      	cbz	r0, 8007ce0 <__swsetup_r+0x14>
 8007cd8:	6a03      	ldr	r3, [r0, #32]
 8007cda:	b90b      	cbnz	r3, 8007ce0 <__swsetup_r+0x14>
 8007cdc:	f7ff fece 	bl	8007a7c <__sinit>
 8007ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ce4:	0719      	lsls	r1, r3, #28
 8007ce6:	d422      	bmi.n	8007d2e <__swsetup_r+0x62>
 8007ce8:	06da      	lsls	r2, r3, #27
 8007cea:	d407      	bmi.n	8007cfc <__swsetup_r+0x30>
 8007cec:	2209      	movs	r2, #9
 8007cee:	602a      	str	r2, [r5, #0]
 8007cf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cf4:	81a3      	strh	r3, [r4, #12]
 8007cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfa:	e033      	b.n	8007d64 <__swsetup_r+0x98>
 8007cfc:	0758      	lsls	r0, r3, #29
 8007cfe:	d512      	bpl.n	8007d26 <__swsetup_r+0x5a>
 8007d00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d02:	b141      	cbz	r1, 8007d16 <__swsetup_r+0x4a>
 8007d04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d08:	4299      	cmp	r1, r3
 8007d0a:	d002      	beq.n	8007d12 <__swsetup_r+0x46>
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	f000 f8af 	bl	8007e70 <_free_r>
 8007d12:	2300      	movs	r3, #0
 8007d14:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d16:	89a3      	ldrh	r3, [r4, #12]
 8007d18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d1c:	81a3      	strh	r3, [r4, #12]
 8007d1e:	2300      	movs	r3, #0
 8007d20:	6063      	str	r3, [r4, #4]
 8007d22:	6923      	ldr	r3, [r4, #16]
 8007d24:	6023      	str	r3, [r4, #0]
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	f043 0308 	orr.w	r3, r3, #8
 8007d2c:	81a3      	strh	r3, [r4, #12]
 8007d2e:	6923      	ldr	r3, [r4, #16]
 8007d30:	b94b      	cbnz	r3, 8007d46 <__swsetup_r+0x7a>
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d3c:	d003      	beq.n	8007d46 <__swsetup_r+0x7a>
 8007d3e:	4621      	mov	r1, r4
 8007d40:	4628      	mov	r0, r5
 8007d42:	f000 fd2d 	bl	80087a0 <__smakebuf_r>
 8007d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d4a:	f013 0201 	ands.w	r2, r3, #1
 8007d4e:	d00a      	beq.n	8007d66 <__swsetup_r+0x9a>
 8007d50:	2200      	movs	r2, #0
 8007d52:	60a2      	str	r2, [r4, #8]
 8007d54:	6962      	ldr	r2, [r4, #20]
 8007d56:	4252      	negs	r2, r2
 8007d58:	61a2      	str	r2, [r4, #24]
 8007d5a:	6922      	ldr	r2, [r4, #16]
 8007d5c:	b942      	cbnz	r2, 8007d70 <__swsetup_r+0xa4>
 8007d5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d62:	d1c5      	bne.n	8007cf0 <__swsetup_r+0x24>
 8007d64:	bd38      	pop	{r3, r4, r5, pc}
 8007d66:	0799      	lsls	r1, r3, #30
 8007d68:	bf58      	it	pl
 8007d6a:	6962      	ldrpl	r2, [r4, #20]
 8007d6c:	60a2      	str	r2, [r4, #8]
 8007d6e:	e7f4      	b.n	8007d5a <__swsetup_r+0x8e>
 8007d70:	2000      	movs	r0, #0
 8007d72:	e7f7      	b.n	8007d64 <__swsetup_r+0x98>
 8007d74:	20000058 	.word	0x20000058

08007d78 <memset>:
 8007d78:	4402      	add	r2, r0
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d100      	bne.n	8007d82 <memset+0xa>
 8007d80:	4770      	bx	lr
 8007d82:	f803 1b01 	strb.w	r1, [r3], #1
 8007d86:	e7f9      	b.n	8007d7c <memset+0x4>

08007d88 <_close_r>:
 8007d88:	b538      	push	{r3, r4, r5, lr}
 8007d8a:	4d06      	ldr	r5, [pc, #24]	@ (8007da4 <_close_r+0x1c>)
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	4604      	mov	r4, r0
 8007d90:	4608      	mov	r0, r1
 8007d92:	602b      	str	r3, [r5, #0]
 8007d94:	f7f9 fc29 	bl	80015ea <_close>
 8007d98:	1c43      	adds	r3, r0, #1
 8007d9a:	d102      	bne.n	8007da2 <_close_r+0x1a>
 8007d9c:	682b      	ldr	r3, [r5, #0]
 8007d9e:	b103      	cbz	r3, 8007da2 <_close_r+0x1a>
 8007da0:	6023      	str	r3, [r4, #0]
 8007da2:	bd38      	pop	{r3, r4, r5, pc}
 8007da4:	20002964 	.word	0x20002964

08007da8 <_lseek_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	4d07      	ldr	r5, [pc, #28]	@ (8007dc8 <_lseek_r+0x20>)
 8007dac:	4604      	mov	r4, r0
 8007dae:	4608      	mov	r0, r1
 8007db0:	4611      	mov	r1, r2
 8007db2:	2200      	movs	r2, #0
 8007db4:	602a      	str	r2, [r5, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	f7f9 fc3e 	bl	8001638 <_lseek>
 8007dbc:	1c43      	adds	r3, r0, #1
 8007dbe:	d102      	bne.n	8007dc6 <_lseek_r+0x1e>
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	b103      	cbz	r3, 8007dc6 <_lseek_r+0x1e>
 8007dc4:	6023      	str	r3, [r4, #0]
 8007dc6:	bd38      	pop	{r3, r4, r5, pc}
 8007dc8:	20002964 	.word	0x20002964

08007dcc <_read_r>:
 8007dcc:	b538      	push	{r3, r4, r5, lr}
 8007dce:	4d07      	ldr	r5, [pc, #28]	@ (8007dec <_read_r+0x20>)
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	4608      	mov	r0, r1
 8007dd4:	4611      	mov	r1, r2
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	602a      	str	r2, [r5, #0]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	f7f9 fbcc 	bl	8001578 <_read>
 8007de0:	1c43      	adds	r3, r0, #1
 8007de2:	d102      	bne.n	8007dea <_read_r+0x1e>
 8007de4:	682b      	ldr	r3, [r5, #0]
 8007de6:	b103      	cbz	r3, 8007dea <_read_r+0x1e>
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	bd38      	pop	{r3, r4, r5, pc}
 8007dec:	20002964 	.word	0x20002964

08007df0 <_write_r>:
 8007df0:	b538      	push	{r3, r4, r5, lr}
 8007df2:	4d07      	ldr	r5, [pc, #28]	@ (8007e10 <_write_r+0x20>)
 8007df4:	4604      	mov	r4, r0
 8007df6:	4608      	mov	r0, r1
 8007df8:	4611      	mov	r1, r2
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	602a      	str	r2, [r5, #0]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	f7f9 fbd7 	bl	80015b2 <_write>
 8007e04:	1c43      	adds	r3, r0, #1
 8007e06:	d102      	bne.n	8007e0e <_write_r+0x1e>
 8007e08:	682b      	ldr	r3, [r5, #0]
 8007e0a:	b103      	cbz	r3, 8007e0e <_write_r+0x1e>
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	bd38      	pop	{r3, r4, r5, pc}
 8007e10:	20002964 	.word	0x20002964

08007e14 <__errno>:
 8007e14:	4b01      	ldr	r3, [pc, #4]	@ (8007e1c <__errno+0x8>)
 8007e16:	6818      	ldr	r0, [r3, #0]
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	20000058 	.word	0x20000058

08007e20 <__libc_init_array>:
 8007e20:	b570      	push	{r4, r5, r6, lr}
 8007e22:	4d0d      	ldr	r5, [pc, #52]	@ (8007e58 <__libc_init_array+0x38>)
 8007e24:	4c0d      	ldr	r4, [pc, #52]	@ (8007e5c <__libc_init_array+0x3c>)
 8007e26:	1b64      	subs	r4, r4, r5
 8007e28:	10a4      	asrs	r4, r4, #2
 8007e2a:	2600      	movs	r6, #0
 8007e2c:	42a6      	cmp	r6, r4
 8007e2e:	d109      	bne.n	8007e44 <__libc_init_array+0x24>
 8007e30:	4d0b      	ldr	r5, [pc, #44]	@ (8007e60 <__libc_init_array+0x40>)
 8007e32:	4c0c      	ldr	r4, [pc, #48]	@ (8007e64 <__libc_init_array+0x44>)
 8007e34:	f000 fd22 	bl	800887c <_init>
 8007e38:	1b64      	subs	r4, r4, r5
 8007e3a:	10a4      	asrs	r4, r4, #2
 8007e3c:	2600      	movs	r6, #0
 8007e3e:	42a6      	cmp	r6, r4
 8007e40:	d105      	bne.n	8007e4e <__libc_init_array+0x2e>
 8007e42:	bd70      	pop	{r4, r5, r6, pc}
 8007e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e48:	4798      	blx	r3
 8007e4a:	3601      	adds	r6, #1
 8007e4c:	e7ee      	b.n	8007e2c <__libc_init_array+0xc>
 8007e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e52:	4798      	blx	r3
 8007e54:	3601      	adds	r6, #1
 8007e56:	e7f2      	b.n	8007e3e <__libc_init_array+0x1e>
 8007e58:	08008a04 	.word	0x08008a04
 8007e5c:	08008a04 	.word	0x08008a04
 8007e60:	08008a04 	.word	0x08008a04
 8007e64:	08008a08 	.word	0x08008a08

08007e68 <__retarget_lock_init_recursive>:
 8007e68:	4770      	bx	lr

08007e6a <__retarget_lock_acquire_recursive>:
 8007e6a:	4770      	bx	lr

08007e6c <__retarget_lock_release_recursive>:
 8007e6c:	4770      	bx	lr
	...

08007e70 <_free_r>:
 8007e70:	b538      	push	{r3, r4, r5, lr}
 8007e72:	4605      	mov	r5, r0
 8007e74:	2900      	cmp	r1, #0
 8007e76:	d041      	beq.n	8007efc <_free_r+0x8c>
 8007e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e7c:	1f0c      	subs	r4, r1, #4
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	bfb8      	it	lt
 8007e82:	18e4      	addlt	r4, r4, r3
 8007e84:	f000 f8e0 	bl	8008048 <__malloc_lock>
 8007e88:	4a1d      	ldr	r2, [pc, #116]	@ (8007f00 <_free_r+0x90>)
 8007e8a:	6813      	ldr	r3, [r2, #0]
 8007e8c:	b933      	cbnz	r3, 8007e9c <_free_r+0x2c>
 8007e8e:	6063      	str	r3, [r4, #4]
 8007e90:	6014      	str	r4, [r2, #0]
 8007e92:	4628      	mov	r0, r5
 8007e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e98:	f000 b8dc 	b.w	8008054 <__malloc_unlock>
 8007e9c:	42a3      	cmp	r3, r4
 8007e9e:	d908      	bls.n	8007eb2 <_free_r+0x42>
 8007ea0:	6820      	ldr	r0, [r4, #0]
 8007ea2:	1821      	adds	r1, r4, r0
 8007ea4:	428b      	cmp	r3, r1
 8007ea6:	bf01      	itttt	eq
 8007ea8:	6819      	ldreq	r1, [r3, #0]
 8007eaa:	685b      	ldreq	r3, [r3, #4]
 8007eac:	1809      	addeq	r1, r1, r0
 8007eae:	6021      	streq	r1, [r4, #0]
 8007eb0:	e7ed      	b.n	8007e8e <_free_r+0x1e>
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	b10b      	cbz	r3, 8007ebc <_free_r+0x4c>
 8007eb8:	42a3      	cmp	r3, r4
 8007eba:	d9fa      	bls.n	8007eb2 <_free_r+0x42>
 8007ebc:	6811      	ldr	r1, [r2, #0]
 8007ebe:	1850      	adds	r0, r2, r1
 8007ec0:	42a0      	cmp	r0, r4
 8007ec2:	d10b      	bne.n	8007edc <_free_r+0x6c>
 8007ec4:	6820      	ldr	r0, [r4, #0]
 8007ec6:	4401      	add	r1, r0
 8007ec8:	1850      	adds	r0, r2, r1
 8007eca:	4283      	cmp	r3, r0
 8007ecc:	6011      	str	r1, [r2, #0]
 8007ece:	d1e0      	bne.n	8007e92 <_free_r+0x22>
 8007ed0:	6818      	ldr	r0, [r3, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	6053      	str	r3, [r2, #4]
 8007ed6:	4408      	add	r0, r1
 8007ed8:	6010      	str	r0, [r2, #0]
 8007eda:	e7da      	b.n	8007e92 <_free_r+0x22>
 8007edc:	d902      	bls.n	8007ee4 <_free_r+0x74>
 8007ede:	230c      	movs	r3, #12
 8007ee0:	602b      	str	r3, [r5, #0]
 8007ee2:	e7d6      	b.n	8007e92 <_free_r+0x22>
 8007ee4:	6820      	ldr	r0, [r4, #0]
 8007ee6:	1821      	adds	r1, r4, r0
 8007ee8:	428b      	cmp	r3, r1
 8007eea:	bf04      	itt	eq
 8007eec:	6819      	ldreq	r1, [r3, #0]
 8007eee:	685b      	ldreq	r3, [r3, #4]
 8007ef0:	6063      	str	r3, [r4, #4]
 8007ef2:	bf04      	itt	eq
 8007ef4:	1809      	addeq	r1, r1, r0
 8007ef6:	6021      	streq	r1, [r4, #0]
 8007ef8:	6054      	str	r4, [r2, #4]
 8007efa:	e7ca      	b.n	8007e92 <_free_r+0x22>
 8007efc:	bd38      	pop	{r3, r4, r5, pc}
 8007efe:	bf00      	nop
 8007f00:	20002970 	.word	0x20002970

08007f04 <sbrk_aligned>:
 8007f04:	b570      	push	{r4, r5, r6, lr}
 8007f06:	4e0f      	ldr	r6, [pc, #60]	@ (8007f44 <sbrk_aligned+0x40>)
 8007f08:	460c      	mov	r4, r1
 8007f0a:	6831      	ldr	r1, [r6, #0]
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	b911      	cbnz	r1, 8007f16 <sbrk_aligned+0x12>
 8007f10:	f000 fca4 	bl	800885c <_sbrk_r>
 8007f14:	6030      	str	r0, [r6, #0]
 8007f16:	4621      	mov	r1, r4
 8007f18:	4628      	mov	r0, r5
 8007f1a:	f000 fc9f 	bl	800885c <_sbrk_r>
 8007f1e:	1c43      	adds	r3, r0, #1
 8007f20:	d103      	bne.n	8007f2a <sbrk_aligned+0x26>
 8007f22:	f04f 34ff 	mov.w	r4, #4294967295
 8007f26:	4620      	mov	r0, r4
 8007f28:	bd70      	pop	{r4, r5, r6, pc}
 8007f2a:	1cc4      	adds	r4, r0, #3
 8007f2c:	f024 0403 	bic.w	r4, r4, #3
 8007f30:	42a0      	cmp	r0, r4
 8007f32:	d0f8      	beq.n	8007f26 <sbrk_aligned+0x22>
 8007f34:	1a21      	subs	r1, r4, r0
 8007f36:	4628      	mov	r0, r5
 8007f38:	f000 fc90 	bl	800885c <_sbrk_r>
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	d1f2      	bne.n	8007f26 <sbrk_aligned+0x22>
 8007f40:	e7ef      	b.n	8007f22 <sbrk_aligned+0x1e>
 8007f42:	bf00      	nop
 8007f44:	2000296c 	.word	0x2000296c

08007f48 <_malloc_r>:
 8007f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f4c:	1ccd      	adds	r5, r1, #3
 8007f4e:	f025 0503 	bic.w	r5, r5, #3
 8007f52:	3508      	adds	r5, #8
 8007f54:	2d0c      	cmp	r5, #12
 8007f56:	bf38      	it	cc
 8007f58:	250c      	movcc	r5, #12
 8007f5a:	2d00      	cmp	r5, #0
 8007f5c:	4606      	mov	r6, r0
 8007f5e:	db01      	blt.n	8007f64 <_malloc_r+0x1c>
 8007f60:	42a9      	cmp	r1, r5
 8007f62:	d904      	bls.n	8007f6e <_malloc_r+0x26>
 8007f64:	230c      	movs	r3, #12
 8007f66:	6033      	str	r3, [r6, #0]
 8007f68:	2000      	movs	r0, #0
 8007f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008044 <_malloc_r+0xfc>
 8007f72:	f000 f869 	bl	8008048 <__malloc_lock>
 8007f76:	f8d8 3000 	ldr.w	r3, [r8]
 8007f7a:	461c      	mov	r4, r3
 8007f7c:	bb44      	cbnz	r4, 8007fd0 <_malloc_r+0x88>
 8007f7e:	4629      	mov	r1, r5
 8007f80:	4630      	mov	r0, r6
 8007f82:	f7ff ffbf 	bl	8007f04 <sbrk_aligned>
 8007f86:	1c43      	adds	r3, r0, #1
 8007f88:	4604      	mov	r4, r0
 8007f8a:	d158      	bne.n	800803e <_malloc_r+0xf6>
 8007f8c:	f8d8 4000 	ldr.w	r4, [r8]
 8007f90:	4627      	mov	r7, r4
 8007f92:	2f00      	cmp	r7, #0
 8007f94:	d143      	bne.n	800801e <_malloc_r+0xd6>
 8007f96:	2c00      	cmp	r4, #0
 8007f98:	d04b      	beq.n	8008032 <_malloc_r+0xea>
 8007f9a:	6823      	ldr	r3, [r4, #0]
 8007f9c:	4639      	mov	r1, r7
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	eb04 0903 	add.w	r9, r4, r3
 8007fa4:	f000 fc5a 	bl	800885c <_sbrk_r>
 8007fa8:	4581      	cmp	r9, r0
 8007faa:	d142      	bne.n	8008032 <_malloc_r+0xea>
 8007fac:	6821      	ldr	r1, [r4, #0]
 8007fae:	1a6d      	subs	r5, r5, r1
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	f7ff ffa6 	bl	8007f04 <sbrk_aligned>
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d03a      	beq.n	8008032 <_malloc_r+0xea>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	442b      	add	r3, r5
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	bb62      	cbnz	r2, 8008024 <_malloc_r+0xdc>
 8007fca:	f8c8 7000 	str.w	r7, [r8]
 8007fce:	e00f      	b.n	8007ff0 <_malloc_r+0xa8>
 8007fd0:	6822      	ldr	r2, [r4, #0]
 8007fd2:	1b52      	subs	r2, r2, r5
 8007fd4:	d420      	bmi.n	8008018 <_malloc_r+0xd0>
 8007fd6:	2a0b      	cmp	r2, #11
 8007fd8:	d917      	bls.n	800800a <_malloc_r+0xc2>
 8007fda:	1961      	adds	r1, r4, r5
 8007fdc:	42a3      	cmp	r3, r4
 8007fde:	6025      	str	r5, [r4, #0]
 8007fe0:	bf18      	it	ne
 8007fe2:	6059      	strne	r1, [r3, #4]
 8007fe4:	6863      	ldr	r3, [r4, #4]
 8007fe6:	bf08      	it	eq
 8007fe8:	f8c8 1000 	streq.w	r1, [r8]
 8007fec:	5162      	str	r2, [r4, r5]
 8007fee:	604b      	str	r3, [r1, #4]
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	f000 f82f 	bl	8008054 <__malloc_unlock>
 8007ff6:	f104 000b 	add.w	r0, r4, #11
 8007ffa:	1d23      	adds	r3, r4, #4
 8007ffc:	f020 0007 	bic.w	r0, r0, #7
 8008000:	1ac2      	subs	r2, r0, r3
 8008002:	bf1c      	itt	ne
 8008004:	1a1b      	subne	r3, r3, r0
 8008006:	50a3      	strne	r3, [r4, r2]
 8008008:	e7af      	b.n	8007f6a <_malloc_r+0x22>
 800800a:	6862      	ldr	r2, [r4, #4]
 800800c:	42a3      	cmp	r3, r4
 800800e:	bf0c      	ite	eq
 8008010:	f8c8 2000 	streq.w	r2, [r8]
 8008014:	605a      	strne	r2, [r3, #4]
 8008016:	e7eb      	b.n	8007ff0 <_malloc_r+0xa8>
 8008018:	4623      	mov	r3, r4
 800801a:	6864      	ldr	r4, [r4, #4]
 800801c:	e7ae      	b.n	8007f7c <_malloc_r+0x34>
 800801e:	463c      	mov	r4, r7
 8008020:	687f      	ldr	r7, [r7, #4]
 8008022:	e7b6      	b.n	8007f92 <_malloc_r+0x4a>
 8008024:	461a      	mov	r2, r3
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	42a3      	cmp	r3, r4
 800802a:	d1fb      	bne.n	8008024 <_malloc_r+0xdc>
 800802c:	2300      	movs	r3, #0
 800802e:	6053      	str	r3, [r2, #4]
 8008030:	e7de      	b.n	8007ff0 <_malloc_r+0xa8>
 8008032:	230c      	movs	r3, #12
 8008034:	6033      	str	r3, [r6, #0]
 8008036:	4630      	mov	r0, r6
 8008038:	f000 f80c 	bl	8008054 <__malloc_unlock>
 800803c:	e794      	b.n	8007f68 <_malloc_r+0x20>
 800803e:	6005      	str	r5, [r0, #0]
 8008040:	e7d6      	b.n	8007ff0 <_malloc_r+0xa8>
 8008042:	bf00      	nop
 8008044:	20002970 	.word	0x20002970

08008048 <__malloc_lock>:
 8008048:	4801      	ldr	r0, [pc, #4]	@ (8008050 <__malloc_lock+0x8>)
 800804a:	f7ff bf0e 	b.w	8007e6a <__retarget_lock_acquire_recursive>
 800804e:	bf00      	nop
 8008050:	20002968 	.word	0x20002968

08008054 <__malloc_unlock>:
 8008054:	4801      	ldr	r0, [pc, #4]	@ (800805c <__malloc_unlock+0x8>)
 8008056:	f7ff bf09 	b.w	8007e6c <__retarget_lock_release_recursive>
 800805a:	bf00      	nop
 800805c:	20002968 	.word	0x20002968

08008060 <__sfputc_r>:
 8008060:	6893      	ldr	r3, [r2, #8]
 8008062:	3b01      	subs	r3, #1
 8008064:	2b00      	cmp	r3, #0
 8008066:	b410      	push	{r4}
 8008068:	6093      	str	r3, [r2, #8]
 800806a:	da08      	bge.n	800807e <__sfputc_r+0x1e>
 800806c:	6994      	ldr	r4, [r2, #24]
 800806e:	42a3      	cmp	r3, r4
 8008070:	db01      	blt.n	8008076 <__sfputc_r+0x16>
 8008072:	290a      	cmp	r1, #10
 8008074:	d103      	bne.n	800807e <__sfputc_r+0x1e>
 8008076:	f85d 4b04 	ldr.w	r4, [sp], #4
 800807a:	f7ff bde8 	b.w	8007c4e <__swbuf_r>
 800807e:	6813      	ldr	r3, [r2, #0]
 8008080:	1c58      	adds	r0, r3, #1
 8008082:	6010      	str	r0, [r2, #0]
 8008084:	7019      	strb	r1, [r3, #0]
 8008086:	4608      	mov	r0, r1
 8008088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800808c:	4770      	bx	lr

0800808e <__sfputs_r>:
 800808e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008090:	4606      	mov	r6, r0
 8008092:	460f      	mov	r7, r1
 8008094:	4614      	mov	r4, r2
 8008096:	18d5      	adds	r5, r2, r3
 8008098:	42ac      	cmp	r4, r5
 800809a:	d101      	bne.n	80080a0 <__sfputs_r+0x12>
 800809c:	2000      	movs	r0, #0
 800809e:	e007      	b.n	80080b0 <__sfputs_r+0x22>
 80080a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a4:	463a      	mov	r2, r7
 80080a6:	4630      	mov	r0, r6
 80080a8:	f7ff ffda 	bl	8008060 <__sfputc_r>
 80080ac:	1c43      	adds	r3, r0, #1
 80080ae:	d1f3      	bne.n	8008098 <__sfputs_r+0xa>
 80080b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080b4 <_vfiprintf_r>:
 80080b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b8:	460d      	mov	r5, r1
 80080ba:	b09d      	sub	sp, #116	@ 0x74
 80080bc:	4614      	mov	r4, r2
 80080be:	4698      	mov	r8, r3
 80080c0:	4606      	mov	r6, r0
 80080c2:	b118      	cbz	r0, 80080cc <_vfiprintf_r+0x18>
 80080c4:	6a03      	ldr	r3, [r0, #32]
 80080c6:	b90b      	cbnz	r3, 80080cc <_vfiprintf_r+0x18>
 80080c8:	f7ff fcd8 	bl	8007a7c <__sinit>
 80080cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080ce:	07d9      	lsls	r1, r3, #31
 80080d0:	d405      	bmi.n	80080de <_vfiprintf_r+0x2a>
 80080d2:	89ab      	ldrh	r3, [r5, #12]
 80080d4:	059a      	lsls	r2, r3, #22
 80080d6:	d402      	bmi.n	80080de <_vfiprintf_r+0x2a>
 80080d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080da:	f7ff fec6 	bl	8007e6a <__retarget_lock_acquire_recursive>
 80080de:	89ab      	ldrh	r3, [r5, #12]
 80080e0:	071b      	lsls	r3, r3, #28
 80080e2:	d501      	bpl.n	80080e8 <_vfiprintf_r+0x34>
 80080e4:	692b      	ldr	r3, [r5, #16]
 80080e6:	b99b      	cbnz	r3, 8008110 <_vfiprintf_r+0x5c>
 80080e8:	4629      	mov	r1, r5
 80080ea:	4630      	mov	r0, r6
 80080ec:	f7ff fdee 	bl	8007ccc <__swsetup_r>
 80080f0:	b170      	cbz	r0, 8008110 <_vfiprintf_r+0x5c>
 80080f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080f4:	07dc      	lsls	r4, r3, #31
 80080f6:	d504      	bpl.n	8008102 <_vfiprintf_r+0x4e>
 80080f8:	f04f 30ff 	mov.w	r0, #4294967295
 80080fc:	b01d      	add	sp, #116	@ 0x74
 80080fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008102:	89ab      	ldrh	r3, [r5, #12]
 8008104:	0598      	lsls	r0, r3, #22
 8008106:	d4f7      	bmi.n	80080f8 <_vfiprintf_r+0x44>
 8008108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800810a:	f7ff feaf 	bl	8007e6c <__retarget_lock_release_recursive>
 800810e:	e7f3      	b.n	80080f8 <_vfiprintf_r+0x44>
 8008110:	2300      	movs	r3, #0
 8008112:	9309      	str	r3, [sp, #36]	@ 0x24
 8008114:	2320      	movs	r3, #32
 8008116:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800811a:	f8cd 800c 	str.w	r8, [sp, #12]
 800811e:	2330      	movs	r3, #48	@ 0x30
 8008120:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80082d0 <_vfiprintf_r+0x21c>
 8008124:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008128:	f04f 0901 	mov.w	r9, #1
 800812c:	4623      	mov	r3, r4
 800812e:	469a      	mov	sl, r3
 8008130:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008134:	b10a      	cbz	r2, 800813a <_vfiprintf_r+0x86>
 8008136:	2a25      	cmp	r2, #37	@ 0x25
 8008138:	d1f9      	bne.n	800812e <_vfiprintf_r+0x7a>
 800813a:	ebba 0b04 	subs.w	fp, sl, r4
 800813e:	d00b      	beq.n	8008158 <_vfiprintf_r+0xa4>
 8008140:	465b      	mov	r3, fp
 8008142:	4622      	mov	r2, r4
 8008144:	4629      	mov	r1, r5
 8008146:	4630      	mov	r0, r6
 8008148:	f7ff ffa1 	bl	800808e <__sfputs_r>
 800814c:	3001      	adds	r0, #1
 800814e:	f000 80a7 	beq.w	80082a0 <_vfiprintf_r+0x1ec>
 8008152:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008154:	445a      	add	r2, fp
 8008156:	9209      	str	r2, [sp, #36]	@ 0x24
 8008158:	f89a 3000 	ldrb.w	r3, [sl]
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 809f 	beq.w	80082a0 <_vfiprintf_r+0x1ec>
 8008162:	2300      	movs	r3, #0
 8008164:	f04f 32ff 	mov.w	r2, #4294967295
 8008168:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800816c:	f10a 0a01 	add.w	sl, sl, #1
 8008170:	9304      	str	r3, [sp, #16]
 8008172:	9307      	str	r3, [sp, #28]
 8008174:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008178:	931a      	str	r3, [sp, #104]	@ 0x68
 800817a:	4654      	mov	r4, sl
 800817c:	2205      	movs	r2, #5
 800817e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008182:	4853      	ldr	r0, [pc, #332]	@ (80082d0 <_vfiprintf_r+0x21c>)
 8008184:	f7f8 f824 	bl	80001d0 <memchr>
 8008188:	9a04      	ldr	r2, [sp, #16]
 800818a:	b9d8      	cbnz	r0, 80081c4 <_vfiprintf_r+0x110>
 800818c:	06d1      	lsls	r1, r2, #27
 800818e:	bf44      	itt	mi
 8008190:	2320      	movmi	r3, #32
 8008192:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008196:	0713      	lsls	r3, r2, #28
 8008198:	bf44      	itt	mi
 800819a:	232b      	movmi	r3, #43	@ 0x2b
 800819c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081a0:	f89a 3000 	ldrb.w	r3, [sl]
 80081a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80081a6:	d015      	beq.n	80081d4 <_vfiprintf_r+0x120>
 80081a8:	9a07      	ldr	r2, [sp, #28]
 80081aa:	4654      	mov	r4, sl
 80081ac:	2000      	movs	r0, #0
 80081ae:	f04f 0c0a 	mov.w	ip, #10
 80081b2:	4621      	mov	r1, r4
 80081b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081b8:	3b30      	subs	r3, #48	@ 0x30
 80081ba:	2b09      	cmp	r3, #9
 80081bc:	d94b      	bls.n	8008256 <_vfiprintf_r+0x1a2>
 80081be:	b1b0      	cbz	r0, 80081ee <_vfiprintf_r+0x13a>
 80081c0:	9207      	str	r2, [sp, #28]
 80081c2:	e014      	b.n	80081ee <_vfiprintf_r+0x13a>
 80081c4:	eba0 0308 	sub.w	r3, r0, r8
 80081c8:	fa09 f303 	lsl.w	r3, r9, r3
 80081cc:	4313      	orrs	r3, r2
 80081ce:	9304      	str	r3, [sp, #16]
 80081d0:	46a2      	mov	sl, r4
 80081d2:	e7d2      	b.n	800817a <_vfiprintf_r+0xc6>
 80081d4:	9b03      	ldr	r3, [sp, #12]
 80081d6:	1d19      	adds	r1, r3, #4
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	9103      	str	r1, [sp, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	bfbb      	ittet	lt
 80081e0:	425b      	neglt	r3, r3
 80081e2:	f042 0202 	orrlt.w	r2, r2, #2
 80081e6:	9307      	strge	r3, [sp, #28]
 80081e8:	9307      	strlt	r3, [sp, #28]
 80081ea:	bfb8      	it	lt
 80081ec:	9204      	strlt	r2, [sp, #16]
 80081ee:	7823      	ldrb	r3, [r4, #0]
 80081f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80081f2:	d10a      	bne.n	800820a <_vfiprintf_r+0x156>
 80081f4:	7863      	ldrb	r3, [r4, #1]
 80081f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80081f8:	d132      	bne.n	8008260 <_vfiprintf_r+0x1ac>
 80081fa:	9b03      	ldr	r3, [sp, #12]
 80081fc:	1d1a      	adds	r2, r3, #4
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	9203      	str	r2, [sp, #12]
 8008202:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008206:	3402      	adds	r4, #2
 8008208:	9305      	str	r3, [sp, #20]
 800820a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80082e0 <_vfiprintf_r+0x22c>
 800820e:	7821      	ldrb	r1, [r4, #0]
 8008210:	2203      	movs	r2, #3
 8008212:	4650      	mov	r0, sl
 8008214:	f7f7 ffdc 	bl	80001d0 <memchr>
 8008218:	b138      	cbz	r0, 800822a <_vfiprintf_r+0x176>
 800821a:	9b04      	ldr	r3, [sp, #16]
 800821c:	eba0 000a 	sub.w	r0, r0, sl
 8008220:	2240      	movs	r2, #64	@ 0x40
 8008222:	4082      	lsls	r2, r0
 8008224:	4313      	orrs	r3, r2
 8008226:	3401      	adds	r4, #1
 8008228:	9304      	str	r3, [sp, #16]
 800822a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800822e:	4829      	ldr	r0, [pc, #164]	@ (80082d4 <_vfiprintf_r+0x220>)
 8008230:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008234:	2206      	movs	r2, #6
 8008236:	f7f7 ffcb 	bl	80001d0 <memchr>
 800823a:	2800      	cmp	r0, #0
 800823c:	d03f      	beq.n	80082be <_vfiprintf_r+0x20a>
 800823e:	4b26      	ldr	r3, [pc, #152]	@ (80082d8 <_vfiprintf_r+0x224>)
 8008240:	bb1b      	cbnz	r3, 800828a <_vfiprintf_r+0x1d6>
 8008242:	9b03      	ldr	r3, [sp, #12]
 8008244:	3307      	adds	r3, #7
 8008246:	f023 0307 	bic.w	r3, r3, #7
 800824a:	3308      	adds	r3, #8
 800824c:	9303      	str	r3, [sp, #12]
 800824e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008250:	443b      	add	r3, r7
 8008252:	9309      	str	r3, [sp, #36]	@ 0x24
 8008254:	e76a      	b.n	800812c <_vfiprintf_r+0x78>
 8008256:	fb0c 3202 	mla	r2, ip, r2, r3
 800825a:	460c      	mov	r4, r1
 800825c:	2001      	movs	r0, #1
 800825e:	e7a8      	b.n	80081b2 <_vfiprintf_r+0xfe>
 8008260:	2300      	movs	r3, #0
 8008262:	3401      	adds	r4, #1
 8008264:	9305      	str	r3, [sp, #20]
 8008266:	4619      	mov	r1, r3
 8008268:	f04f 0c0a 	mov.w	ip, #10
 800826c:	4620      	mov	r0, r4
 800826e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008272:	3a30      	subs	r2, #48	@ 0x30
 8008274:	2a09      	cmp	r2, #9
 8008276:	d903      	bls.n	8008280 <_vfiprintf_r+0x1cc>
 8008278:	2b00      	cmp	r3, #0
 800827a:	d0c6      	beq.n	800820a <_vfiprintf_r+0x156>
 800827c:	9105      	str	r1, [sp, #20]
 800827e:	e7c4      	b.n	800820a <_vfiprintf_r+0x156>
 8008280:	fb0c 2101 	mla	r1, ip, r1, r2
 8008284:	4604      	mov	r4, r0
 8008286:	2301      	movs	r3, #1
 8008288:	e7f0      	b.n	800826c <_vfiprintf_r+0x1b8>
 800828a:	ab03      	add	r3, sp, #12
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	462a      	mov	r2, r5
 8008290:	4b12      	ldr	r3, [pc, #72]	@ (80082dc <_vfiprintf_r+0x228>)
 8008292:	a904      	add	r1, sp, #16
 8008294:	4630      	mov	r0, r6
 8008296:	f3af 8000 	nop.w
 800829a:	4607      	mov	r7, r0
 800829c:	1c78      	adds	r0, r7, #1
 800829e:	d1d6      	bne.n	800824e <_vfiprintf_r+0x19a>
 80082a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082a2:	07d9      	lsls	r1, r3, #31
 80082a4:	d405      	bmi.n	80082b2 <_vfiprintf_r+0x1fe>
 80082a6:	89ab      	ldrh	r3, [r5, #12]
 80082a8:	059a      	lsls	r2, r3, #22
 80082aa:	d402      	bmi.n	80082b2 <_vfiprintf_r+0x1fe>
 80082ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082ae:	f7ff fddd 	bl	8007e6c <__retarget_lock_release_recursive>
 80082b2:	89ab      	ldrh	r3, [r5, #12]
 80082b4:	065b      	lsls	r3, r3, #25
 80082b6:	f53f af1f 	bmi.w	80080f8 <_vfiprintf_r+0x44>
 80082ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082bc:	e71e      	b.n	80080fc <_vfiprintf_r+0x48>
 80082be:	ab03      	add	r3, sp, #12
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	462a      	mov	r2, r5
 80082c4:	4b05      	ldr	r3, [pc, #20]	@ (80082dc <_vfiprintf_r+0x228>)
 80082c6:	a904      	add	r1, sp, #16
 80082c8:	4630      	mov	r0, r6
 80082ca:	f000 f879 	bl	80083c0 <_printf_i>
 80082ce:	e7e4      	b.n	800829a <_vfiprintf_r+0x1e6>
 80082d0:	080089c8 	.word	0x080089c8
 80082d4:	080089d2 	.word	0x080089d2
 80082d8:	00000000 	.word	0x00000000
 80082dc:	0800808f 	.word	0x0800808f
 80082e0:	080089ce 	.word	0x080089ce

080082e4 <_printf_common>:
 80082e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e8:	4616      	mov	r6, r2
 80082ea:	4698      	mov	r8, r3
 80082ec:	688a      	ldr	r2, [r1, #8]
 80082ee:	690b      	ldr	r3, [r1, #16]
 80082f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082f4:	4293      	cmp	r3, r2
 80082f6:	bfb8      	it	lt
 80082f8:	4613      	movlt	r3, r2
 80082fa:	6033      	str	r3, [r6, #0]
 80082fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008300:	4607      	mov	r7, r0
 8008302:	460c      	mov	r4, r1
 8008304:	b10a      	cbz	r2, 800830a <_printf_common+0x26>
 8008306:	3301      	adds	r3, #1
 8008308:	6033      	str	r3, [r6, #0]
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	0699      	lsls	r1, r3, #26
 800830e:	bf42      	ittt	mi
 8008310:	6833      	ldrmi	r3, [r6, #0]
 8008312:	3302      	addmi	r3, #2
 8008314:	6033      	strmi	r3, [r6, #0]
 8008316:	6825      	ldr	r5, [r4, #0]
 8008318:	f015 0506 	ands.w	r5, r5, #6
 800831c:	d106      	bne.n	800832c <_printf_common+0x48>
 800831e:	f104 0a19 	add.w	sl, r4, #25
 8008322:	68e3      	ldr	r3, [r4, #12]
 8008324:	6832      	ldr	r2, [r6, #0]
 8008326:	1a9b      	subs	r3, r3, r2
 8008328:	42ab      	cmp	r3, r5
 800832a:	dc26      	bgt.n	800837a <_printf_common+0x96>
 800832c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008330:	6822      	ldr	r2, [r4, #0]
 8008332:	3b00      	subs	r3, #0
 8008334:	bf18      	it	ne
 8008336:	2301      	movne	r3, #1
 8008338:	0692      	lsls	r2, r2, #26
 800833a:	d42b      	bmi.n	8008394 <_printf_common+0xb0>
 800833c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008340:	4641      	mov	r1, r8
 8008342:	4638      	mov	r0, r7
 8008344:	47c8      	blx	r9
 8008346:	3001      	adds	r0, #1
 8008348:	d01e      	beq.n	8008388 <_printf_common+0xa4>
 800834a:	6823      	ldr	r3, [r4, #0]
 800834c:	6922      	ldr	r2, [r4, #16]
 800834e:	f003 0306 	and.w	r3, r3, #6
 8008352:	2b04      	cmp	r3, #4
 8008354:	bf02      	ittt	eq
 8008356:	68e5      	ldreq	r5, [r4, #12]
 8008358:	6833      	ldreq	r3, [r6, #0]
 800835a:	1aed      	subeq	r5, r5, r3
 800835c:	68a3      	ldr	r3, [r4, #8]
 800835e:	bf0c      	ite	eq
 8008360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008364:	2500      	movne	r5, #0
 8008366:	4293      	cmp	r3, r2
 8008368:	bfc4      	itt	gt
 800836a:	1a9b      	subgt	r3, r3, r2
 800836c:	18ed      	addgt	r5, r5, r3
 800836e:	2600      	movs	r6, #0
 8008370:	341a      	adds	r4, #26
 8008372:	42b5      	cmp	r5, r6
 8008374:	d11a      	bne.n	80083ac <_printf_common+0xc8>
 8008376:	2000      	movs	r0, #0
 8008378:	e008      	b.n	800838c <_printf_common+0xa8>
 800837a:	2301      	movs	r3, #1
 800837c:	4652      	mov	r2, sl
 800837e:	4641      	mov	r1, r8
 8008380:	4638      	mov	r0, r7
 8008382:	47c8      	blx	r9
 8008384:	3001      	adds	r0, #1
 8008386:	d103      	bne.n	8008390 <_printf_common+0xac>
 8008388:	f04f 30ff 	mov.w	r0, #4294967295
 800838c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008390:	3501      	adds	r5, #1
 8008392:	e7c6      	b.n	8008322 <_printf_common+0x3e>
 8008394:	18e1      	adds	r1, r4, r3
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	2030      	movs	r0, #48	@ 0x30
 800839a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800839e:	4422      	add	r2, r4
 80083a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083a8:	3302      	adds	r3, #2
 80083aa:	e7c7      	b.n	800833c <_printf_common+0x58>
 80083ac:	2301      	movs	r3, #1
 80083ae:	4622      	mov	r2, r4
 80083b0:	4641      	mov	r1, r8
 80083b2:	4638      	mov	r0, r7
 80083b4:	47c8      	blx	r9
 80083b6:	3001      	adds	r0, #1
 80083b8:	d0e6      	beq.n	8008388 <_printf_common+0xa4>
 80083ba:	3601      	adds	r6, #1
 80083bc:	e7d9      	b.n	8008372 <_printf_common+0x8e>
	...

080083c0 <_printf_i>:
 80083c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083c4:	7e0f      	ldrb	r7, [r1, #24]
 80083c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083c8:	2f78      	cmp	r7, #120	@ 0x78
 80083ca:	4691      	mov	r9, r2
 80083cc:	4680      	mov	r8, r0
 80083ce:	460c      	mov	r4, r1
 80083d0:	469a      	mov	sl, r3
 80083d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083d6:	d807      	bhi.n	80083e8 <_printf_i+0x28>
 80083d8:	2f62      	cmp	r7, #98	@ 0x62
 80083da:	d80a      	bhi.n	80083f2 <_printf_i+0x32>
 80083dc:	2f00      	cmp	r7, #0
 80083de:	f000 80d1 	beq.w	8008584 <_printf_i+0x1c4>
 80083e2:	2f58      	cmp	r7, #88	@ 0x58
 80083e4:	f000 80b8 	beq.w	8008558 <_printf_i+0x198>
 80083e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083f0:	e03a      	b.n	8008468 <_printf_i+0xa8>
 80083f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083f6:	2b15      	cmp	r3, #21
 80083f8:	d8f6      	bhi.n	80083e8 <_printf_i+0x28>
 80083fa:	a101      	add	r1, pc, #4	@ (adr r1, 8008400 <_printf_i+0x40>)
 80083fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008400:	08008459 	.word	0x08008459
 8008404:	0800846d 	.word	0x0800846d
 8008408:	080083e9 	.word	0x080083e9
 800840c:	080083e9 	.word	0x080083e9
 8008410:	080083e9 	.word	0x080083e9
 8008414:	080083e9 	.word	0x080083e9
 8008418:	0800846d 	.word	0x0800846d
 800841c:	080083e9 	.word	0x080083e9
 8008420:	080083e9 	.word	0x080083e9
 8008424:	080083e9 	.word	0x080083e9
 8008428:	080083e9 	.word	0x080083e9
 800842c:	0800856b 	.word	0x0800856b
 8008430:	08008497 	.word	0x08008497
 8008434:	08008525 	.word	0x08008525
 8008438:	080083e9 	.word	0x080083e9
 800843c:	080083e9 	.word	0x080083e9
 8008440:	0800858d 	.word	0x0800858d
 8008444:	080083e9 	.word	0x080083e9
 8008448:	08008497 	.word	0x08008497
 800844c:	080083e9 	.word	0x080083e9
 8008450:	080083e9 	.word	0x080083e9
 8008454:	0800852d 	.word	0x0800852d
 8008458:	6833      	ldr	r3, [r6, #0]
 800845a:	1d1a      	adds	r2, r3, #4
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6032      	str	r2, [r6, #0]
 8008460:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008464:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008468:	2301      	movs	r3, #1
 800846a:	e09c      	b.n	80085a6 <_printf_i+0x1e6>
 800846c:	6833      	ldr	r3, [r6, #0]
 800846e:	6820      	ldr	r0, [r4, #0]
 8008470:	1d19      	adds	r1, r3, #4
 8008472:	6031      	str	r1, [r6, #0]
 8008474:	0606      	lsls	r6, r0, #24
 8008476:	d501      	bpl.n	800847c <_printf_i+0xbc>
 8008478:	681d      	ldr	r5, [r3, #0]
 800847a:	e003      	b.n	8008484 <_printf_i+0xc4>
 800847c:	0645      	lsls	r5, r0, #25
 800847e:	d5fb      	bpl.n	8008478 <_printf_i+0xb8>
 8008480:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008484:	2d00      	cmp	r5, #0
 8008486:	da03      	bge.n	8008490 <_printf_i+0xd0>
 8008488:	232d      	movs	r3, #45	@ 0x2d
 800848a:	426d      	negs	r5, r5
 800848c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008490:	4858      	ldr	r0, [pc, #352]	@ (80085f4 <_printf_i+0x234>)
 8008492:	230a      	movs	r3, #10
 8008494:	e011      	b.n	80084ba <_printf_i+0xfa>
 8008496:	6821      	ldr	r1, [r4, #0]
 8008498:	6833      	ldr	r3, [r6, #0]
 800849a:	0608      	lsls	r0, r1, #24
 800849c:	f853 5b04 	ldr.w	r5, [r3], #4
 80084a0:	d402      	bmi.n	80084a8 <_printf_i+0xe8>
 80084a2:	0649      	lsls	r1, r1, #25
 80084a4:	bf48      	it	mi
 80084a6:	b2ad      	uxthmi	r5, r5
 80084a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80084aa:	4852      	ldr	r0, [pc, #328]	@ (80085f4 <_printf_i+0x234>)
 80084ac:	6033      	str	r3, [r6, #0]
 80084ae:	bf14      	ite	ne
 80084b0:	230a      	movne	r3, #10
 80084b2:	2308      	moveq	r3, #8
 80084b4:	2100      	movs	r1, #0
 80084b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084ba:	6866      	ldr	r6, [r4, #4]
 80084bc:	60a6      	str	r6, [r4, #8]
 80084be:	2e00      	cmp	r6, #0
 80084c0:	db05      	blt.n	80084ce <_printf_i+0x10e>
 80084c2:	6821      	ldr	r1, [r4, #0]
 80084c4:	432e      	orrs	r6, r5
 80084c6:	f021 0104 	bic.w	r1, r1, #4
 80084ca:	6021      	str	r1, [r4, #0]
 80084cc:	d04b      	beq.n	8008566 <_printf_i+0x1a6>
 80084ce:	4616      	mov	r6, r2
 80084d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80084d4:	fb03 5711 	mls	r7, r3, r1, r5
 80084d8:	5dc7      	ldrb	r7, [r0, r7]
 80084da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084de:	462f      	mov	r7, r5
 80084e0:	42bb      	cmp	r3, r7
 80084e2:	460d      	mov	r5, r1
 80084e4:	d9f4      	bls.n	80084d0 <_printf_i+0x110>
 80084e6:	2b08      	cmp	r3, #8
 80084e8:	d10b      	bne.n	8008502 <_printf_i+0x142>
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	07df      	lsls	r7, r3, #31
 80084ee:	d508      	bpl.n	8008502 <_printf_i+0x142>
 80084f0:	6923      	ldr	r3, [r4, #16]
 80084f2:	6861      	ldr	r1, [r4, #4]
 80084f4:	4299      	cmp	r1, r3
 80084f6:	bfde      	ittt	le
 80084f8:	2330      	movle	r3, #48	@ 0x30
 80084fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008502:	1b92      	subs	r2, r2, r6
 8008504:	6122      	str	r2, [r4, #16]
 8008506:	f8cd a000 	str.w	sl, [sp]
 800850a:	464b      	mov	r3, r9
 800850c:	aa03      	add	r2, sp, #12
 800850e:	4621      	mov	r1, r4
 8008510:	4640      	mov	r0, r8
 8008512:	f7ff fee7 	bl	80082e4 <_printf_common>
 8008516:	3001      	adds	r0, #1
 8008518:	d14a      	bne.n	80085b0 <_printf_i+0x1f0>
 800851a:	f04f 30ff 	mov.w	r0, #4294967295
 800851e:	b004      	add	sp, #16
 8008520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008524:	6823      	ldr	r3, [r4, #0]
 8008526:	f043 0320 	orr.w	r3, r3, #32
 800852a:	6023      	str	r3, [r4, #0]
 800852c:	4832      	ldr	r0, [pc, #200]	@ (80085f8 <_printf_i+0x238>)
 800852e:	2778      	movs	r7, #120	@ 0x78
 8008530:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008534:	6823      	ldr	r3, [r4, #0]
 8008536:	6831      	ldr	r1, [r6, #0]
 8008538:	061f      	lsls	r7, r3, #24
 800853a:	f851 5b04 	ldr.w	r5, [r1], #4
 800853e:	d402      	bmi.n	8008546 <_printf_i+0x186>
 8008540:	065f      	lsls	r7, r3, #25
 8008542:	bf48      	it	mi
 8008544:	b2ad      	uxthmi	r5, r5
 8008546:	6031      	str	r1, [r6, #0]
 8008548:	07d9      	lsls	r1, r3, #31
 800854a:	bf44      	itt	mi
 800854c:	f043 0320 	orrmi.w	r3, r3, #32
 8008550:	6023      	strmi	r3, [r4, #0]
 8008552:	b11d      	cbz	r5, 800855c <_printf_i+0x19c>
 8008554:	2310      	movs	r3, #16
 8008556:	e7ad      	b.n	80084b4 <_printf_i+0xf4>
 8008558:	4826      	ldr	r0, [pc, #152]	@ (80085f4 <_printf_i+0x234>)
 800855a:	e7e9      	b.n	8008530 <_printf_i+0x170>
 800855c:	6823      	ldr	r3, [r4, #0]
 800855e:	f023 0320 	bic.w	r3, r3, #32
 8008562:	6023      	str	r3, [r4, #0]
 8008564:	e7f6      	b.n	8008554 <_printf_i+0x194>
 8008566:	4616      	mov	r6, r2
 8008568:	e7bd      	b.n	80084e6 <_printf_i+0x126>
 800856a:	6833      	ldr	r3, [r6, #0]
 800856c:	6825      	ldr	r5, [r4, #0]
 800856e:	6961      	ldr	r1, [r4, #20]
 8008570:	1d18      	adds	r0, r3, #4
 8008572:	6030      	str	r0, [r6, #0]
 8008574:	062e      	lsls	r6, r5, #24
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	d501      	bpl.n	800857e <_printf_i+0x1be>
 800857a:	6019      	str	r1, [r3, #0]
 800857c:	e002      	b.n	8008584 <_printf_i+0x1c4>
 800857e:	0668      	lsls	r0, r5, #25
 8008580:	d5fb      	bpl.n	800857a <_printf_i+0x1ba>
 8008582:	8019      	strh	r1, [r3, #0]
 8008584:	2300      	movs	r3, #0
 8008586:	6123      	str	r3, [r4, #16]
 8008588:	4616      	mov	r6, r2
 800858a:	e7bc      	b.n	8008506 <_printf_i+0x146>
 800858c:	6833      	ldr	r3, [r6, #0]
 800858e:	1d1a      	adds	r2, r3, #4
 8008590:	6032      	str	r2, [r6, #0]
 8008592:	681e      	ldr	r6, [r3, #0]
 8008594:	6862      	ldr	r2, [r4, #4]
 8008596:	2100      	movs	r1, #0
 8008598:	4630      	mov	r0, r6
 800859a:	f7f7 fe19 	bl	80001d0 <memchr>
 800859e:	b108      	cbz	r0, 80085a4 <_printf_i+0x1e4>
 80085a0:	1b80      	subs	r0, r0, r6
 80085a2:	6060      	str	r0, [r4, #4]
 80085a4:	6863      	ldr	r3, [r4, #4]
 80085a6:	6123      	str	r3, [r4, #16]
 80085a8:	2300      	movs	r3, #0
 80085aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085ae:	e7aa      	b.n	8008506 <_printf_i+0x146>
 80085b0:	6923      	ldr	r3, [r4, #16]
 80085b2:	4632      	mov	r2, r6
 80085b4:	4649      	mov	r1, r9
 80085b6:	4640      	mov	r0, r8
 80085b8:	47d0      	blx	sl
 80085ba:	3001      	adds	r0, #1
 80085bc:	d0ad      	beq.n	800851a <_printf_i+0x15a>
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	079b      	lsls	r3, r3, #30
 80085c2:	d413      	bmi.n	80085ec <_printf_i+0x22c>
 80085c4:	68e0      	ldr	r0, [r4, #12]
 80085c6:	9b03      	ldr	r3, [sp, #12]
 80085c8:	4298      	cmp	r0, r3
 80085ca:	bfb8      	it	lt
 80085cc:	4618      	movlt	r0, r3
 80085ce:	e7a6      	b.n	800851e <_printf_i+0x15e>
 80085d0:	2301      	movs	r3, #1
 80085d2:	4632      	mov	r2, r6
 80085d4:	4649      	mov	r1, r9
 80085d6:	4640      	mov	r0, r8
 80085d8:	47d0      	blx	sl
 80085da:	3001      	adds	r0, #1
 80085dc:	d09d      	beq.n	800851a <_printf_i+0x15a>
 80085de:	3501      	adds	r5, #1
 80085e0:	68e3      	ldr	r3, [r4, #12]
 80085e2:	9903      	ldr	r1, [sp, #12]
 80085e4:	1a5b      	subs	r3, r3, r1
 80085e6:	42ab      	cmp	r3, r5
 80085e8:	dcf2      	bgt.n	80085d0 <_printf_i+0x210>
 80085ea:	e7eb      	b.n	80085c4 <_printf_i+0x204>
 80085ec:	2500      	movs	r5, #0
 80085ee:	f104 0619 	add.w	r6, r4, #25
 80085f2:	e7f5      	b.n	80085e0 <_printf_i+0x220>
 80085f4:	080089d9 	.word	0x080089d9
 80085f8:	080089ea 	.word	0x080089ea

080085fc <__sflush_r>:
 80085fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008604:	0716      	lsls	r6, r2, #28
 8008606:	4605      	mov	r5, r0
 8008608:	460c      	mov	r4, r1
 800860a:	d454      	bmi.n	80086b6 <__sflush_r+0xba>
 800860c:	684b      	ldr	r3, [r1, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	dc02      	bgt.n	8008618 <__sflush_r+0x1c>
 8008612:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008614:	2b00      	cmp	r3, #0
 8008616:	dd48      	ble.n	80086aa <__sflush_r+0xae>
 8008618:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800861a:	2e00      	cmp	r6, #0
 800861c:	d045      	beq.n	80086aa <__sflush_r+0xae>
 800861e:	2300      	movs	r3, #0
 8008620:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008624:	682f      	ldr	r7, [r5, #0]
 8008626:	6a21      	ldr	r1, [r4, #32]
 8008628:	602b      	str	r3, [r5, #0]
 800862a:	d030      	beq.n	800868e <__sflush_r+0x92>
 800862c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	0759      	lsls	r1, r3, #29
 8008632:	d505      	bpl.n	8008640 <__sflush_r+0x44>
 8008634:	6863      	ldr	r3, [r4, #4]
 8008636:	1ad2      	subs	r2, r2, r3
 8008638:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800863a:	b10b      	cbz	r3, 8008640 <__sflush_r+0x44>
 800863c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800863e:	1ad2      	subs	r2, r2, r3
 8008640:	2300      	movs	r3, #0
 8008642:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008644:	6a21      	ldr	r1, [r4, #32]
 8008646:	4628      	mov	r0, r5
 8008648:	47b0      	blx	r6
 800864a:	1c43      	adds	r3, r0, #1
 800864c:	89a3      	ldrh	r3, [r4, #12]
 800864e:	d106      	bne.n	800865e <__sflush_r+0x62>
 8008650:	6829      	ldr	r1, [r5, #0]
 8008652:	291d      	cmp	r1, #29
 8008654:	d82b      	bhi.n	80086ae <__sflush_r+0xb2>
 8008656:	4a2a      	ldr	r2, [pc, #168]	@ (8008700 <__sflush_r+0x104>)
 8008658:	40ca      	lsrs	r2, r1
 800865a:	07d6      	lsls	r6, r2, #31
 800865c:	d527      	bpl.n	80086ae <__sflush_r+0xb2>
 800865e:	2200      	movs	r2, #0
 8008660:	6062      	str	r2, [r4, #4]
 8008662:	04d9      	lsls	r1, r3, #19
 8008664:	6922      	ldr	r2, [r4, #16]
 8008666:	6022      	str	r2, [r4, #0]
 8008668:	d504      	bpl.n	8008674 <__sflush_r+0x78>
 800866a:	1c42      	adds	r2, r0, #1
 800866c:	d101      	bne.n	8008672 <__sflush_r+0x76>
 800866e:	682b      	ldr	r3, [r5, #0]
 8008670:	b903      	cbnz	r3, 8008674 <__sflush_r+0x78>
 8008672:	6560      	str	r0, [r4, #84]	@ 0x54
 8008674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008676:	602f      	str	r7, [r5, #0]
 8008678:	b1b9      	cbz	r1, 80086aa <__sflush_r+0xae>
 800867a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800867e:	4299      	cmp	r1, r3
 8008680:	d002      	beq.n	8008688 <__sflush_r+0x8c>
 8008682:	4628      	mov	r0, r5
 8008684:	f7ff fbf4 	bl	8007e70 <_free_r>
 8008688:	2300      	movs	r3, #0
 800868a:	6363      	str	r3, [r4, #52]	@ 0x34
 800868c:	e00d      	b.n	80086aa <__sflush_r+0xae>
 800868e:	2301      	movs	r3, #1
 8008690:	4628      	mov	r0, r5
 8008692:	47b0      	blx	r6
 8008694:	4602      	mov	r2, r0
 8008696:	1c50      	adds	r0, r2, #1
 8008698:	d1c9      	bne.n	800862e <__sflush_r+0x32>
 800869a:	682b      	ldr	r3, [r5, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d0c6      	beq.n	800862e <__sflush_r+0x32>
 80086a0:	2b1d      	cmp	r3, #29
 80086a2:	d001      	beq.n	80086a8 <__sflush_r+0xac>
 80086a4:	2b16      	cmp	r3, #22
 80086a6:	d11e      	bne.n	80086e6 <__sflush_r+0xea>
 80086a8:	602f      	str	r7, [r5, #0]
 80086aa:	2000      	movs	r0, #0
 80086ac:	e022      	b.n	80086f4 <__sflush_r+0xf8>
 80086ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086b2:	b21b      	sxth	r3, r3
 80086b4:	e01b      	b.n	80086ee <__sflush_r+0xf2>
 80086b6:	690f      	ldr	r7, [r1, #16]
 80086b8:	2f00      	cmp	r7, #0
 80086ba:	d0f6      	beq.n	80086aa <__sflush_r+0xae>
 80086bc:	0793      	lsls	r3, r2, #30
 80086be:	680e      	ldr	r6, [r1, #0]
 80086c0:	bf08      	it	eq
 80086c2:	694b      	ldreq	r3, [r1, #20]
 80086c4:	600f      	str	r7, [r1, #0]
 80086c6:	bf18      	it	ne
 80086c8:	2300      	movne	r3, #0
 80086ca:	eba6 0807 	sub.w	r8, r6, r7
 80086ce:	608b      	str	r3, [r1, #8]
 80086d0:	f1b8 0f00 	cmp.w	r8, #0
 80086d4:	dde9      	ble.n	80086aa <__sflush_r+0xae>
 80086d6:	6a21      	ldr	r1, [r4, #32]
 80086d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80086da:	4643      	mov	r3, r8
 80086dc:	463a      	mov	r2, r7
 80086de:	4628      	mov	r0, r5
 80086e0:	47b0      	blx	r6
 80086e2:	2800      	cmp	r0, #0
 80086e4:	dc08      	bgt.n	80086f8 <__sflush_r+0xfc>
 80086e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086ee:	81a3      	strh	r3, [r4, #12]
 80086f0:	f04f 30ff 	mov.w	r0, #4294967295
 80086f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f8:	4407      	add	r7, r0
 80086fa:	eba8 0800 	sub.w	r8, r8, r0
 80086fe:	e7e7      	b.n	80086d0 <__sflush_r+0xd4>
 8008700:	20400001 	.word	0x20400001

08008704 <_fflush_r>:
 8008704:	b538      	push	{r3, r4, r5, lr}
 8008706:	690b      	ldr	r3, [r1, #16]
 8008708:	4605      	mov	r5, r0
 800870a:	460c      	mov	r4, r1
 800870c:	b913      	cbnz	r3, 8008714 <_fflush_r+0x10>
 800870e:	2500      	movs	r5, #0
 8008710:	4628      	mov	r0, r5
 8008712:	bd38      	pop	{r3, r4, r5, pc}
 8008714:	b118      	cbz	r0, 800871e <_fflush_r+0x1a>
 8008716:	6a03      	ldr	r3, [r0, #32]
 8008718:	b90b      	cbnz	r3, 800871e <_fflush_r+0x1a>
 800871a:	f7ff f9af 	bl	8007a7c <__sinit>
 800871e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d0f3      	beq.n	800870e <_fflush_r+0xa>
 8008726:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008728:	07d0      	lsls	r0, r2, #31
 800872a:	d404      	bmi.n	8008736 <_fflush_r+0x32>
 800872c:	0599      	lsls	r1, r3, #22
 800872e:	d402      	bmi.n	8008736 <_fflush_r+0x32>
 8008730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008732:	f7ff fb9a 	bl	8007e6a <__retarget_lock_acquire_recursive>
 8008736:	4628      	mov	r0, r5
 8008738:	4621      	mov	r1, r4
 800873a:	f7ff ff5f 	bl	80085fc <__sflush_r>
 800873e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008740:	07da      	lsls	r2, r3, #31
 8008742:	4605      	mov	r5, r0
 8008744:	d4e4      	bmi.n	8008710 <_fflush_r+0xc>
 8008746:	89a3      	ldrh	r3, [r4, #12]
 8008748:	059b      	lsls	r3, r3, #22
 800874a:	d4e1      	bmi.n	8008710 <_fflush_r+0xc>
 800874c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800874e:	f7ff fb8d 	bl	8007e6c <__retarget_lock_release_recursive>
 8008752:	e7dd      	b.n	8008710 <_fflush_r+0xc>

08008754 <__swhatbuf_r>:
 8008754:	b570      	push	{r4, r5, r6, lr}
 8008756:	460c      	mov	r4, r1
 8008758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800875c:	2900      	cmp	r1, #0
 800875e:	b096      	sub	sp, #88	@ 0x58
 8008760:	4615      	mov	r5, r2
 8008762:	461e      	mov	r6, r3
 8008764:	da0d      	bge.n	8008782 <__swhatbuf_r+0x2e>
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800876c:	f04f 0100 	mov.w	r1, #0
 8008770:	bf14      	ite	ne
 8008772:	2340      	movne	r3, #64	@ 0x40
 8008774:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008778:	2000      	movs	r0, #0
 800877a:	6031      	str	r1, [r6, #0]
 800877c:	602b      	str	r3, [r5, #0]
 800877e:	b016      	add	sp, #88	@ 0x58
 8008780:	bd70      	pop	{r4, r5, r6, pc}
 8008782:	466a      	mov	r2, sp
 8008784:	f000 f848 	bl	8008818 <_fstat_r>
 8008788:	2800      	cmp	r0, #0
 800878a:	dbec      	blt.n	8008766 <__swhatbuf_r+0x12>
 800878c:	9901      	ldr	r1, [sp, #4]
 800878e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008792:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008796:	4259      	negs	r1, r3
 8008798:	4159      	adcs	r1, r3
 800879a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800879e:	e7eb      	b.n	8008778 <__swhatbuf_r+0x24>

080087a0 <__smakebuf_r>:
 80087a0:	898b      	ldrh	r3, [r1, #12]
 80087a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087a4:	079d      	lsls	r5, r3, #30
 80087a6:	4606      	mov	r6, r0
 80087a8:	460c      	mov	r4, r1
 80087aa:	d507      	bpl.n	80087bc <__smakebuf_r+0x1c>
 80087ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	6123      	str	r3, [r4, #16]
 80087b4:	2301      	movs	r3, #1
 80087b6:	6163      	str	r3, [r4, #20]
 80087b8:	b003      	add	sp, #12
 80087ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087bc:	ab01      	add	r3, sp, #4
 80087be:	466a      	mov	r2, sp
 80087c0:	f7ff ffc8 	bl	8008754 <__swhatbuf_r>
 80087c4:	9f00      	ldr	r7, [sp, #0]
 80087c6:	4605      	mov	r5, r0
 80087c8:	4639      	mov	r1, r7
 80087ca:	4630      	mov	r0, r6
 80087cc:	f7ff fbbc 	bl	8007f48 <_malloc_r>
 80087d0:	b948      	cbnz	r0, 80087e6 <__smakebuf_r+0x46>
 80087d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087d6:	059a      	lsls	r2, r3, #22
 80087d8:	d4ee      	bmi.n	80087b8 <__smakebuf_r+0x18>
 80087da:	f023 0303 	bic.w	r3, r3, #3
 80087de:	f043 0302 	orr.w	r3, r3, #2
 80087e2:	81a3      	strh	r3, [r4, #12]
 80087e4:	e7e2      	b.n	80087ac <__smakebuf_r+0xc>
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	6020      	str	r0, [r4, #0]
 80087ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087ee:	81a3      	strh	r3, [r4, #12]
 80087f0:	9b01      	ldr	r3, [sp, #4]
 80087f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80087f6:	b15b      	cbz	r3, 8008810 <__smakebuf_r+0x70>
 80087f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087fc:	4630      	mov	r0, r6
 80087fe:	f000 f81d 	bl	800883c <_isatty_r>
 8008802:	b128      	cbz	r0, 8008810 <__smakebuf_r+0x70>
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	f023 0303 	bic.w	r3, r3, #3
 800880a:	f043 0301 	orr.w	r3, r3, #1
 800880e:	81a3      	strh	r3, [r4, #12]
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	431d      	orrs	r5, r3
 8008814:	81a5      	strh	r5, [r4, #12]
 8008816:	e7cf      	b.n	80087b8 <__smakebuf_r+0x18>

08008818 <_fstat_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	4d07      	ldr	r5, [pc, #28]	@ (8008838 <_fstat_r+0x20>)
 800881c:	2300      	movs	r3, #0
 800881e:	4604      	mov	r4, r0
 8008820:	4608      	mov	r0, r1
 8008822:	4611      	mov	r1, r2
 8008824:	602b      	str	r3, [r5, #0]
 8008826:	f7f8 feec 	bl	8001602 <_fstat>
 800882a:	1c43      	adds	r3, r0, #1
 800882c:	d102      	bne.n	8008834 <_fstat_r+0x1c>
 800882e:	682b      	ldr	r3, [r5, #0]
 8008830:	b103      	cbz	r3, 8008834 <_fstat_r+0x1c>
 8008832:	6023      	str	r3, [r4, #0]
 8008834:	bd38      	pop	{r3, r4, r5, pc}
 8008836:	bf00      	nop
 8008838:	20002964 	.word	0x20002964

0800883c <_isatty_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	4d06      	ldr	r5, [pc, #24]	@ (8008858 <_isatty_r+0x1c>)
 8008840:	2300      	movs	r3, #0
 8008842:	4604      	mov	r4, r0
 8008844:	4608      	mov	r0, r1
 8008846:	602b      	str	r3, [r5, #0]
 8008848:	f7f8 feeb 	bl	8001622 <_isatty>
 800884c:	1c43      	adds	r3, r0, #1
 800884e:	d102      	bne.n	8008856 <_isatty_r+0x1a>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	b103      	cbz	r3, 8008856 <_isatty_r+0x1a>
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	bd38      	pop	{r3, r4, r5, pc}
 8008858:	20002964 	.word	0x20002964

0800885c <_sbrk_r>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	4d06      	ldr	r5, [pc, #24]	@ (8008878 <_sbrk_r+0x1c>)
 8008860:	2300      	movs	r3, #0
 8008862:	4604      	mov	r4, r0
 8008864:	4608      	mov	r0, r1
 8008866:	602b      	str	r3, [r5, #0]
 8008868:	f7f8 fef4 	bl	8001654 <_sbrk>
 800886c:	1c43      	adds	r3, r0, #1
 800886e:	d102      	bne.n	8008876 <_sbrk_r+0x1a>
 8008870:	682b      	ldr	r3, [r5, #0]
 8008872:	b103      	cbz	r3, 8008876 <_sbrk_r+0x1a>
 8008874:	6023      	str	r3, [r4, #0]
 8008876:	bd38      	pop	{r3, r4, r5, pc}
 8008878:	20002964 	.word	0x20002964

0800887c <_init>:
 800887c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887e:	bf00      	nop
 8008880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008882:	bc08      	pop	{r3}
 8008884:	469e      	mov	lr, r3
 8008886:	4770      	bx	lr

08008888 <_fini>:
 8008888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888a:	bf00      	nop
 800888c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800888e:	bc08      	pop	{r3}
 8008890:	469e      	mov	lr, r3
 8008892:	4770      	bx	lr
