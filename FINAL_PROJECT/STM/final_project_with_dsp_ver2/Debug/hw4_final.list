
hw4_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f808  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800f998  0800f998  00010998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fefc  0800fefc  00011238  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fefc  0800fefc  00010efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff04  0800ff04  00011238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff04  0800ff04  00010f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ff08  0800ff08  00010f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000238  20000000  0800ff0c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e08  20000238  08010144  00011238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003040  08010144  00012040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011238  2**0
                  CONTENTS, READONLY
 12 .debug_info   000321ce  00000000  00000000  00011268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000070a4  00000000  00000000  00043436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b00  00000000  00000000  0004a4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002107  00000000  00000000  0004cfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003228a  00000000  00000000  0004f0e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003629c  00000000  00000000  00081371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001177f9  00000000  00000000  000b760d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  001cee06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c73c  00000000  00000000  001ceec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001db5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000dd7  00000000  00000000  001db660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000030  00000000  00000000  001dc437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f980 	.word	0x0800f980

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0800f980 	.word	0x0800f980

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000f74:	b5b0      	push	{r4, r5, r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 8000f7a:	4b4e      	ldr	r3, [pc, #312]	@ (80010b4 <MX_BlueNRG_MS_Init+0x140>)
 8000f7c:	617b      	str	r3, [r7, #20]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 8000f7e:	f000 f8ad 	bl	80010dc <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f002 fd7a 	bl	8003a7c <BSP_PB_GetState>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b4a      	ldr	r3, [pc, #296]	@ (80010b8 <MX_BlueNRG_MS_Init+0x144>)
 8000f8e:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 8000f90:	2100      	movs	r1, #0
 8000f92:	484a      	ldr	r0, [pc, #296]	@ (80010bc <MX_BlueNRG_MS_Init+0x148>)
 8000f94:	f009 f876 	bl	800a084 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000f98:	1dba      	adds	r2, r7, #6
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f008 fee4 	bl	8009d6e <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 8000fa6:	f008 ff24 	bl	8009df2 <hci_reset>
  HAL_Delay(100);
 8000faa:	2064      	movs	r0, #100	@ 0x64
 8000fac:	f003 f9ac 	bl	8004308 <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000fb0:	7a3b      	ldrb	r3, [r7, #8]
 8000fb2:	2b30      	cmp	r3, #48	@ 0x30
 8000fb4:	d902      	bls.n	8000fbc <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 8000fb6:	4b42      	ldr	r3, [pc, #264]	@ (80010c0 <MX_BlueNRG_MS_Init+0x14c>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8000fbc:	f107 0209 	add.w	r2, r7, #9
 8000fc0:	4b40      	ldr	r3, [pc, #256]	@ (80010c4 <MX_BlueNRG_MS_Init+0x150>)
 8000fc2:	2106      	movs	r1, #6
 8000fc4:	2080      	movs	r0, #128	@ 0x80
 8000fc6:	f008 fe4c 	bl	8009c62 <aci_hal_read_config_data>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	613b      	str	r3, [r7, #16]

  if (ret) {
    PRINTF("Read Static Random address failed.\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8000fce:	4b3d      	ldr	r3, [pc, #244]	@ (80010c4 <MX_BlueNRG_MS_Init+0x150>)
 8000fd0:	795b      	ldrb	r3, [r3, #5]
 8000fd2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000fd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8000fd8:	d001      	beq.n	8000fde <MX_BlueNRG_MS_Init+0x6a>
    PRINTF("Static Random address not well formed.\n");
    while(1);
 8000fda:	bf00      	nop
 8000fdc:	e7fd      	b.n	8000fda <MX_BlueNRG_MS_Init+0x66>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8000fde:	f008 fc0c 	bl	80097fa <aci_gatt_init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	613b      	str	r3, [r7, #16]
  if(ret){
    PRINTF("GATT_Init failed.\n");
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8000fe6:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <MX_BlueNRG_MS_Init+0x14c>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d110      	bne.n	8001010 <MX_BlueNRG_MS_Init+0x9c>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000fee:	f107 020e 	add.w	r2, r7, #14
 8000ff2:	f107 030a 	add.w	r3, r7, #10
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	4613      	mov	r3, r2
 8001000:	2207      	movs	r2, #7
 8001002:	2100      	movs	r1, #0
 8001004:	2001      	movs	r0, #1
 8001006:	f008 f9cc 	bl	80093a2 <aci_gap_init_IDB05A1>
 800100a:	4603      	mov	r3, r0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	e00a      	b.n	8001026 <MX_BlueNRG_MS_Init+0xb2>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8001010:	f107 030a 	add.w	r3, r7, #10
 8001014:	f107 020c 	add.w	r2, r7, #12
 8001018:	f107 010e 	add.w	r1, r7, #14
 800101c:	2001      	movs	r0, #1
 800101e:	f008 fa10 	bl	8009442 <aci_gap_init_IDB04A1>
 8001022:	4603      	mov	r3, r0
 8001024:	613b      	str	r3, [r7, #16]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("GAP_Init failed.\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8001026:	89fc      	ldrh	r4, [r7, #14]
 8001028:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 800102a:	6978      	ldr	r0, [r7, #20]
 800102c:	f7ff f920 	bl	8000270 <strlen>
 8001030:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8001032:	b2da      	uxtb	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	4613      	mov	r3, r2
 800103a:	2200      	movs	r2, #0
 800103c:	4629      	mov	r1, r5
 800103e:	4620      	mov	r0, r4
 8001040:	f008 fd52 	bl	8009ae8 <aci_gatt_update_char_value>
 8001044:	4603      	mov	r3, r0
 8001046:	613b      	str	r3, [r7, #16]
  if (ret) {
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_BlueNRG_MS_Init+0xde>
    PRINTF("aci_gatt_update_char_value failed.\n");
    while(1);
 800104e:	bf00      	nop
 8001050:	e7fd      	b.n	800104e <MX_BlueNRG_MS_Init+0xda>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8001052:	2301      	movs	r3, #1
 8001054:	9303      	str	r3, [sp, #12]
 8001056:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <MX_BlueNRG_MS_Init+0x154>)
 8001058:	9302      	str	r3, [sp, #8]
 800105a:	2300      	movs	r3, #0
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	2310      	movs	r3, #16
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2307      	movs	r3, #7
 8001064:	2200      	movs	r2, #0
 8001066:	2100      	movs	r1, #0
 8001068:	2001      	movs	r0, #1
 800106a:	f008 fb1e 	bl	80096aa <aci_gap_set_auth_requirement>
 800106e:	4603      	mov	r3, r0
 8001070:	613b      	str	r3, [r7, #16]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_BlueNRG_MS_Init+0x108>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
    while(1);
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <MX_BlueNRG_MS_Init+0x104>
  }

  PRINTF("BLE Stack Initialized\n");

  ret = Add_HWServW2ST_Service();
 800107c:	f000 fa30 	bl	80014e0 <Add_HWServW2ST_Service>
 8001080:	4603      	mov	r3, r0
 8001082:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_BlueNRG_MS_Init+0x11a>
    PRINTF("BlueMS HW service added successfully.\n");
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
 800108a:	bf00      	nop
 800108c:	e7fd      	b.n	800108a <MX_BlueNRG_MS_Init+0x116>
  }

  ret = Add_SWServW2ST_Service();
 800108e:	f000 faf9 	bl	8001684 <Add_SWServW2ST_Service>
 8001092:	4603      	mov	r3, r0
 8001094:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_BlueNRG_MS_Init+0x12c>
     PRINTF("BlueMS SW service added successfully.\n");
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
     while(1);
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <MX_BlueNRG_MS_Init+0x128>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 80010a0:	2104      	movs	r1, #4
 80010a2:	2001      	movs	r0, #1
 80010a4:	f008 fe32 	bl	8009d0c <aci_hal_set_tx_power_level>
 80010a8:	4603      	mov	r3, r0
 80010aa:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 80010ac:	bf00      	nop
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bdb0      	pop	{r4, r5, r7, pc}
 80010b4:	0800f998 	.word	0x0800f998
 80010b8:	20000000 	.word	0x20000000
 80010bc:	08001c49 	.word	0x08001c49
 80010c0:	20000254 	.word	0x20000254
 80010c4:	20000258 	.word	0x20000258
 80010c8:	0001e240 	.word	0x0001e240

080010cc <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 80010d0:	f000 f810 	bl	80010f4 <User_Process>
  hci_user_evt_proc();
 80010d4:	f009 f950 	bl	800a378 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80010e0:	2101      	movs	r1, #1
 80010e2:	2000      	movs	r0, #0
 80010e4:	f002 fc76 	bl	80039d4 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f002 fc0b 	bl	8003904 <BSP_LED_Init>

//  BSP_COM_Init(COM1);
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 80010fa:	4b34      	ldr	r3, [pc, #208]	@ (80011cc <User_Process+0xd8>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 8001104:	f000 fd2c 	bl	8001b60 <Set_DeviceConnectable>
    set_connectable = FALSE;
 8001108:	4b30      	ldr	r3, [pc, #192]	@ (80011cc <User_Process+0xd8>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 800110e:	2000      	movs	r0, #0
 8001110:	f002 fc0a 	bl	8003928 <BSP_LED_Toggle>

    if (connected)
 8001114:	4b2e      	ldr	r3, [pc, #184]	@ (80011d0 <User_Process+0xdc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d052      	beq.n	80011c2 <User_Process+0xce>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 800111c:	f003 f8e8 	bl	80042f0 <HAL_GetTick>
 8001120:	4603      	mov	r3, r0
 8001122:	4618      	mov	r0, r3
 8001124:	f00b fd04 	bl	800cb30 <srand>

      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 8001128:	f107 0208 	add.w	r2, r7, #8
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f85a 	bl	80011ec <Set_Random_Environmental_Values>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8001138:	edd7 7a02 	vldr	s15, [r7, #8]
 800113c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80011d4 <User_Process+0xe0>
 8001140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001144:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001148:	edd7 7a03 	vldr	s15, [r7, #12]
 800114c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001150:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001158:	ee17 3a90 	vmov	r3, s15
 800115c:	b21b      	sxth	r3, r3
 800115e:	4619      	mov	r1, r3
 8001160:	ee16 0a90 	vmov	r0, s13
 8001164:	f000 fcb6 	bl	8001ad4 <BlueMS_Environmental_Update>

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
//      Set_Random_Motion_Values(counter);
      int16_t acc_data[3];
      BSP_ACCELERO_AccGetXYZ(acc_data);
 8001168:	463b      	mov	r3, r7
 800116a:	4618      	mov	r0, r3
 800116c:	f003 f87c 	bl	8004268 <BSP_ACCELERO_AccGetXYZ>

      x_axes.AXIS_X = acc_data[0];
 8001170:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001174:	461a      	mov	r2, r3
 8001176:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <User_Process+0xe4>)
 8001178:	601a      	str	r2, [r3, #0]
      x_axes.AXIS_Y = acc_data[1];
 800117a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800117e:	461a      	mov	r2, r3
 8001180:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <User_Process+0xe4>)
 8001182:	605a      	str	r2, [r3, #4]
      x_axes.AXIS_Z = acc_data[2];
 8001184:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001188:	461a      	mov	r2, r3
 800118a:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <User_Process+0xe4>)
 800118c:	609a      	str	r2, [r3, #8]

      Acc_Update(&x_axes, &g_axes, &m_axes);
 800118e:	4a13      	ldr	r2, [pc, #76]	@ (80011dc <User_Process+0xe8>)
 8001190:	4913      	ldr	r1, [pc, #76]	@ (80011e0 <User_Process+0xec>)
 8001192:	4811      	ldr	r0, [pc, #68]	@ (80011d8 <User_Process+0xe4>)
 8001194:	f000 fb06 	bl	80017a4 <Acc_Update>

      Quat_Update(&q_axes);
 8001198:	4812      	ldr	r0, [pc, #72]	@ (80011e4 <User_Process+0xf0>)
 800119a:	f000 fb8d 	bl	80018b8 <Quat_Update>

      counter ++;
 800119e:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <User_Process+0xf4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	4a10      	ldr	r2, [pc, #64]	@ (80011e8 <User_Process+0xf4>)
 80011a6:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 80011a8:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <User_Process+0xf4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b28      	cmp	r3, #40	@ 0x28
 80011ae:	d104      	bne.n	80011ba <User_Process+0xc6>
        counter = 0;
 80011b0:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <User_Process+0xf4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 80011b6:	f000 f899 	bl	80012ec <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 80011ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011be:	f003 f8a3 	bl	8004308 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000001 	.word	0x20000001
 80011d0:	20000294 	.word	0x20000294
 80011d4:	42c80000 	.word	0x42c80000
 80011d8:	20000298 	.word	0x20000298
 80011dc:	200002b0 	.word	0x200002b0
 80011e0:	200002a4 	.word	0x200002a4
 80011e4:	200002bc 	.word	0x200002bc
 80011e8:	20000260 	.word	0x20000260

080011ec <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 80011ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 80011f8:	f00b fcc8 	bl	800cb8c <rand>
 80011fc:	4603      	mov	r3, r0
 80011fe:	17da      	asrs	r2, r3, #31
 8001200:	469a      	mov	sl, r3
 8001202:	4693      	mov	fp, r2
 8001204:	4652      	mov	r2, sl
 8001206:	465b      	mov	r3, fp
 8001208:	f04f 0000 	mov.w	r0, #0
 800120c:	f04f 0100 	mov.w	r1, #0
 8001210:	0099      	lsls	r1, r3, #2
 8001212:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001216:	0090      	lsls	r0, r2, #2
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	eb12 010a 	adds.w	r1, r2, sl
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	eb43 030b 	adc.w	r3, r3, fp
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001234:	f7ff fd08 	bl	8000c48 <__aeabi_uldivmod>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff f9a4 	bl	800058c <__aeabi_ul2d>
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	4b26      	ldr	r3, [pc, #152]	@ (80012e4 <Set_Random_Environmental_Values+0xf8>)
 800124a:	f7ff f81f 	bl	800028c <__adddf3>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fca7 	bl	8000ba8 <__aeabi_d2f>
 800125a:	4602      	mov	r2, r0
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8001260:	f00b fc94 	bl	800cb8c <rand>
 8001264:	4603      	mov	r3, r0
 8001266:	17da      	asrs	r2, r3, #31
 8001268:	4698      	mov	r8, r3
 800126a:	4691      	mov	r9, r2
 800126c:	4642      	mov	r2, r8
 800126e:	464b      	mov	r3, r9
 8001270:	f04f 0000 	mov.w	r0, #0
 8001274:	f04f 0100 	mov.w	r1, #0
 8001278:	0099      	lsls	r1, r3, #2
 800127a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800127e:	0090      	lsls	r0, r2, #2
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	eb12 0408 	adds.w	r4, r2, r8
 8001288:	eb43 0509 	adc.w	r5, r3, r9
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	012b      	lsls	r3, r5, #4
 8001296:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800129a:	0122      	lsls	r2, r4, #4
 800129c:	4614      	mov	r4, r2
 800129e:	461d      	mov	r5, r3
 80012a0:	4620      	mov	r0, r4
 80012a2:	4629      	mov	r1, r5
 80012a4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80012a8:	f04f 0300 	mov.w	r3, #0
 80012ac:	f7ff fccc 	bl	8000c48 <__aeabi_uldivmod>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff f968 	bl	800058c <__aeabi_ul2d>
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <Set_Random_Environmental_Values+0xfc>)
 80012c2:	f7fe ffe3 	bl	800028c <__adddf3>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fc6b 	bl	8000ba8 <__aeabi_d2f>
 80012d2:	4602      	mov	r2, r0
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	601a      	str	r2, [r3, #0]
}
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012e2:	bf00      	nop
 80012e4:	403b0000 	.word	0x403b0000
 80012e8:	408f4000 	.word	0x408f4000

080012ec <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 80012f0:	4b6e      	ldr	r3, [pc, #440]	@ (80014ac <Reset_Motion_Values+0x1c0>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b6e      	ldr	r3, [pc, #440]	@ (80014b0 <Reset_Motion_Values+0x1c4>)
 80012f6:	fb83 1302 	smull	r1, r3, r3, r2
 80012fa:	11d9      	asrs	r1, r3, #7
 80012fc:	17d3      	asrs	r3, r2, #31
 80012fe:	1acb      	subs	r3, r1, r3
 8001300:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001304:	fb01 f303 	mul.w	r3, r1, r3
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d103      	bne.n	8001316 <Reset_Motion_Values+0x2a>
 800130e:	4b67      	ldr	r3, [pc, #412]	@ (80014ac <Reset_Motion_Values+0x1c0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	425b      	negs	r3, r3
 8001314:	e000      	b.n	8001318 <Reset_Motion_Values+0x2c>
 8001316:	230a      	movs	r3, #10
 8001318:	4a64      	ldr	r2, [pc, #400]	@ (80014ac <Reset_Motion_Values+0x1c0>)
 800131a:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 800131c:	4b63      	ldr	r3, [pc, #396]	@ (80014ac <Reset_Motion_Values+0x1c0>)
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	4b63      	ldr	r3, [pc, #396]	@ (80014b0 <Reset_Motion_Values+0x1c4>)
 8001322:	fb83 1302 	smull	r1, r3, r3, r2
 8001326:	11d9      	asrs	r1, r3, #7
 8001328:	17d3      	asrs	r3, r2, #31
 800132a:	1acb      	subs	r3, r1, r3
 800132c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001330:	fb01 f303 	mul.w	r3, r1, r3
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d103      	bne.n	8001342 <Reset_Motion_Values+0x56>
 800133a:	4b5c      	ldr	r3, [pc, #368]	@ (80014ac <Reset_Motion_Values+0x1c0>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	425b      	negs	r3, r3
 8001340:	e001      	b.n	8001346 <Reset_Motion_Values+0x5a>
 8001342:	f06f 0309 	mvn.w	r3, #9
 8001346:	4a59      	ldr	r2, [pc, #356]	@ (80014ac <Reset_Motion_Values+0x1c0>)
 8001348:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 800134a:	4b58      	ldr	r3, [pc, #352]	@ (80014ac <Reset_Motion_Values+0x1c0>)
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	4b58      	ldr	r3, [pc, #352]	@ (80014b0 <Reset_Motion_Values+0x1c4>)
 8001350:	fb83 1302 	smull	r1, r3, r3, r2
 8001354:	11d9      	asrs	r1, r3, #7
 8001356:	17d3      	asrs	r3, r2, #31
 8001358:	1acb      	subs	r3, r1, r3
 800135a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800135e:	fb01 f303 	mul.w	r3, r1, r3
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d103      	bne.n	8001370 <Reset_Motion_Values+0x84>
 8001368:	4b50      	ldr	r3, [pc, #320]	@ (80014ac <Reset_Motion_Values+0x1c0>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	425b      	negs	r3, r3
 800136e:	e000      	b.n	8001372 <Reset_Motion_Values+0x86>
 8001370:	230a      	movs	r3, #10
 8001372:	4a4e      	ldr	r2, [pc, #312]	@ (80014ac <Reset_Motion_Values+0x1c0>)
 8001374:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8001376:	4b4f      	ldr	r3, [pc, #316]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b4d      	ldr	r3, [pc, #308]	@ (80014b0 <Reset_Motion_Values+0x1c4>)
 800137c:	fb83 1302 	smull	r1, r3, r3, r2
 8001380:	11d9      	asrs	r1, r3, #7
 8001382:	17d3      	asrs	r3, r2, #31
 8001384:	1acb      	subs	r3, r1, r3
 8001386:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800138a:	fb01 f303 	mul.w	r3, r1, r3
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d103      	bne.n	800139c <Reset_Motion_Values+0xb0>
 8001394:	4b47      	ldr	r3, [pc, #284]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	425b      	negs	r3, r3
 800139a:	e000      	b.n	800139e <Reset_Motion_Values+0xb2>
 800139c:	2364      	movs	r3, #100	@ 0x64
 800139e:	4a45      	ldr	r2, [pc, #276]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 80013a0:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 80013a2:	4b44      	ldr	r3, [pc, #272]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	4b42      	ldr	r3, [pc, #264]	@ (80014b0 <Reset_Motion_Values+0x1c4>)
 80013a8:	fb83 1302 	smull	r1, r3, r3, r2
 80013ac:	11d9      	asrs	r1, r3, #7
 80013ae:	17d3      	asrs	r3, r2, #31
 80013b0:	1acb      	subs	r3, r1, r3
 80013b2:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80013b6:	fb01 f303 	mul.w	r3, r1, r3
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d103      	bne.n	80013c8 <Reset_Motion_Values+0xdc>
 80013c0:	4b3c      	ldr	r3, [pc, #240]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	425b      	negs	r3, r3
 80013c6:	e001      	b.n	80013cc <Reset_Motion_Values+0xe0>
 80013c8:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80013cc:	4a39      	ldr	r2, [pc, #228]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 80013ce:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 80013d0:	4b38      	ldr	r3, [pc, #224]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	4b36      	ldr	r3, [pc, #216]	@ (80014b0 <Reset_Motion_Values+0x1c4>)
 80013d6:	fb83 1302 	smull	r1, r3, r3, r2
 80013da:	11d9      	asrs	r1, r3, #7
 80013dc:	17d3      	asrs	r3, r2, #31
 80013de:	1acb      	subs	r3, r1, r3
 80013e0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80013e4:	fb01 f303 	mul.w	r3, r1, r3
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d103      	bne.n	80013f6 <Reset_Motion_Values+0x10a>
 80013ee:	4b31      	ldr	r3, [pc, #196]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	425b      	negs	r3, r3
 80013f4:	e000      	b.n	80013f8 <Reset_Motion_Values+0x10c>
 80013f6:	2364      	movs	r3, #100	@ 0x64
 80013f8:	4a2e      	ldr	r2, [pc, #184]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 80013fa:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 80013fc:	4b2d      	ldr	r3, [pc, #180]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b2b      	ldr	r3, [pc, #172]	@ (80014b0 <Reset_Motion_Values+0x1c4>)
 8001402:	fb83 1302 	smull	r1, r3, r3, r2
 8001406:	11d9      	asrs	r1, r3, #7
 8001408:	17d3      	asrs	r3, r2, #31
 800140a:	1acb      	subs	r3, r1, r3
 800140c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001410:	fb01 f303 	mul.w	r3, r1, r3
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d103      	bne.n	8001422 <Reset_Motion_Values+0x136>
 800141a:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <Reset_Motion_Values+0x1cc>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	425b      	negs	r3, r3
 8001420:	e000      	b.n	8001424 <Reset_Motion_Values+0x138>
 8001422:	2303      	movs	r3, #3
 8001424:	4a24      	ldr	r2, [pc, #144]	@ (80014b8 <Reset_Motion_Values+0x1cc>)
 8001426:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8001428:	4b22      	ldr	r3, [pc, #136]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <Reset_Motion_Values+0x1c4>)
 800142e:	fb83 1302 	smull	r1, r3, r3, r2
 8001432:	11d9      	asrs	r1, r3, #7
 8001434:	17d3      	asrs	r3, r2, #31
 8001436:	1acb      	subs	r3, r1, r3
 8001438:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800143c:	fb01 f303 	mul.w	r3, r1, r3
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d103      	bne.n	800144e <Reset_Motion_Values+0x162>
 8001446:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <Reset_Motion_Values+0x1cc>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	425b      	negs	r3, r3
 800144c:	e001      	b.n	8001452 <Reset_Motion_Values+0x166>
 800144e:	f06f 0302 	mvn.w	r3, #2
 8001452:	4a19      	ldr	r2, [pc, #100]	@ (80014b8 <Reset_Motion_Values+0x1cc>)
 8001454:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8001456:	4b17      	ldr	r3, [pc, #92]	@ (80014b4 <Reset_Motion_Values+0x1c8>)
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <Reset_Motion_Values+0x1c4>)
 800145c:	fb83 1302 	smull	r1, r3, r3, r2
 8001460:	11d9      	asrs	r1, r3, #7
 8001462:	17d3      	asrs	r3, r2, #31
 8001464:	1acb      	subs	r3, r1, r3
 8001466:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800146a:	fb01 f303 	mul.w	r3, r1, r3
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d103      	bne.n	800147c <Reset_Motion_Values+0x190>
 8001474:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <Reset_Motion_Values+0x1cc>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	425b      	negs	r3, r3
 800147a:	e000      	b.n	800147e <Reset_Motion_Values+0x192>
 800147c:	2303      	movs	r3, #3
 800147e:	4a0e      	ldr	r2, [pc, #56]	@ (80014b8 <Reset_Motion_Values+0x1cc>)
 8001480:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <Reset_Motion_Values+0x1d0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	425b      	negs	r3, r3
 8001488:	4a0c      	ldr	r2, [pc, #48]	@ (80014bc <Reset_Motion_Values+0x1d0>)
 800148a:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 800148c:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <Reset_Motion_Values+0x1d0>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	425b      	negs	r3, r3
 8001492:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <Reset_Motion_Values+0x1d0>)
 8001494:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <Reset_Motion_Values+0x1d0>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	425b      	negs	r3, r3
 800149c:	4a07      	ldr	r2, [pc, #28]	@ (80014bc <Reset_Motion_Values+0x1d0>)
 800149e:	6093      	str	r3, [r2, #8]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000298 	.word	0x20000298
 80014b0:	10624dd3 	.word	0x10624dd3
 80014b4:	200002a4 	.word	0x200002a4
 80014b8:	200002b0 	.word	0x200002b0
 80014bc:	200002bc 	.word	0x200002bc

080014c0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 80014ca:	4b04      	ldr	r3, [pc, #16]	@ (80014dc <BSP_PB_Callback+0x1c>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	2000025e 	.word	0x2000025e

080014e0 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void) //TODO: modify from this
{
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b08d      	sub	sp, #52	@ 0x34
 80014e4:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 80014e6:	231b      	movs	r3, #27
 80014e8:	713b      	strb	r3, [r7, #4]
 80014ea:	23c5      	movs	r3, #197	@ 0xc5
 80014ec:	717b      	strb	r3, [r7, #5]
 80014ee:	23d5      	movs	r3, #213	@ 0xd5
 80014f0:	71bb      	strb	r3, [r7, #6]
 80014f2:	23a5      	movs	r3, #165	@ 0xa5
 80014f4:	71fb      	strb	r3, [r7, #7]
 80014f6:	2302      	movs	r3, #2
 80014f8:	723b      	strb	r3, [r7, #8]
 80014fa:	2300      	movs	r3, #0
 80014fc:	727b      	strb	r3, [r7, #9]
 80014fe:	23b4      	movs	r3, #180	@ 0xb4
 8001500:	72bb      	strb	r3, [r7, #10]
 8001502:	239a      	movs	r3, #154	@ 0x9a
 8001504:	72fb      	strb	r3, [r7, #11]
 8001506:	23e1      	movs	r3, #225	@ 0xe1
 8001508:	733b      	strb	r3, [r7, #12]
 800150a:	2311      	movs	r3, #17
 800150c:	737b      	strb	r3, [r7, #13]
 800150e:	2301      	movs	r3, #1
 8001510:	73bb      	strb	r3, [r7, #14]
 8001512:	2300      	movs	r3, #0
 8001514:	73fb      	strb	r3, [r7, #15]
 8001516:	2300      	movs	r3, #0
 8001518:	743b      	strb	r3, [r7, #16]
 800151a:	2300      	movs	r3, #0
 800151c:	747b      	strb	r3, [r7, #17]
 800151e:	2300      	movs	r3, #0
 8001520:	74bb      	strb	r3, [r7, #18]
 8001522:	2300      	movs	r3, #0
 8001524:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8001526:	4b52      	ldr	r3, [pc, #328]	@ (8001670 <Add_HWServW2ST_Service+0x190>)
 8001528:	461c      	mov	r4, r3
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800152e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8001532:	4b50      	ldr	r3, [pc, #320]	@ (8001674 <Add_HWServW2ST_Service+0x194>)
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2310      	movs	r3, #16
 8001538:	2201      	movs	r2, #1
 800153a:	494d      	ldr	r1, [pc, #308]	@ (8001670 <Add_HWServW2ST_Service+0x190>)
 800153c:	2002      	movs	r0, #2
 800153e:	f008 f97f 	bl	8009840 <aci_gatt_add_serv>
 8001542:	4603      	mov	r3, r0
 8001544:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8001546:	7dfb      	ldrb	r3, [r7, #23]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 800154c:	2347      	movs	r3, #71	@ 0x47
 800154e:	e08a      	b.n	8001666 <Add_HWServW2ST_Service+0x186>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8001550:	231b      	movs	r3, #27
 8001552:	713b      	strb	r3, [r7, #4]
 8001554:	23c5      	movs	r3, #197	@ 0xc5
 8001556:	717b      	strb	r3, [r7, #5]
 8001558:	23d5      	movs	r3, #213	@ 0xd5
 800155a:	71bb      	strb	r3, [r7, #6]
 800155c:	23a5      	movs	r3, #165	@ 0xa5
 800155e:	71fb      	strb	r3, [r7, #7]
 8001560:	2302      	movs	r3, #2
 8001562:	723b      	strb	r3, [r7, #8]
 8001564:	2300      	movs	r3, #0
 8001566:	727b      	strb	r3, [r7, #9]
 8001568:	2336      	movs	r3, #54	@ 0x36
 800156a:	72bb      	strb	r3, [r7, #10]
 800156c:	23ac      	movs	r3, #172	@ 0xac
 800156e:	72fb      	strb	r3, [r7, #11]
 8001570:	23e1      	movs	r3, #225	@ 0xe1
 8001572:	733b      	strb	r3, [r7, #12]
 8001574:	2311      	movs	r3, #17
 8001576:	737b      	strb	r3, [r7, #13]
 8001578:	2301      	movs	r3, #1
 800157a:	73bb      	strb	r3, [r7, #14]
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	2300      	movs	r3, #0
 8001582:	743b      	strb	r3, [r7, #16]
 8001584:	2300      	movs	r3, #0
 8001586:	747b      	strb	r3, [r7, #17]
 8001588:	2300      	movs	r3, #0
 800158a:	74bb      	strb	r3, [r7, #18]
 800158c:	2300      	movs	r3, #0
 800158e:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 8001590:	7cbb      	ldrb	r3, [r7, #18]
 8001592:	f043 0304 	orr.w	r3, r3, #4
 8001596:	b2db      	uxtb	r3, r3
 8001598:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 800159a:	7cbb      	ldrb	r3, [r7, #18]
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80015a4:	4b34      	ldr	r3, [pc, #208]	@ (8001678 <Add_HWServW2ST_Service+0x198>)
 80015a6:	461c      	mov	r4, r3
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 80015b0:	4b30      	ldr	r3, [pc, #192]	@ (8001674 <Add_HWServW2ST_Service+0x194>)
 80015b2:	8818      	ldrh	r0, [r3, #0]
 80015b4:	4b31      	ldr	r3, [pc, #196]	@ (800167c <Add_HWServW2ST_Service+0x19c>)
 80015b6:	9305      	str	r3, [sp, #20]
 80015b8:	2300      	movs	r3, #0
 80015ba:	9304      	str	r3, [sp, #16]
 80015bc:	2310      	movs	r3, #16
 80015be:	9303      	str	r3, [sp, #12]
 80015c0:	2304      	movs	r3, #4
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	2300      	movs	r3, #0
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	2312      	movs	r3, #18
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2308      	movs	r3, #8
 80015ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001678 <Add_HWServW2ST_Service+0x198>)
 80015d0:	2102      	movs	r1, #2
 80015d2:	f008 f9be 	bl	8009952 <aci_gatt_add_char>
 80015d6:	4603      	mov	r3, r0
 80015d8:	75fb      	strb	r3, [r7, #23]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80015da:	7dfb      	ldrb	r3, [r7, #23]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <Add_HWServW2ST_Service+0x104>
    return BLE_STATUS_ERROR;
 80015e0:	2347      	movs	r3, #71	@ 0x47
 80015e2:	e040      	b.n	8001666 <Add_HWServW2ST_Service+0x186>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 80015e4:	231b      	movs	r3, #27
 80015e6:	713b      	strb	r3, [r7, #4]
 80015e8:	23c5      	movs	r3, #197	@ 0xc5
 80015ea:	717b      	strb	r3, [r7, #5]
 80015ec:	23d5      	movs	r3, #213	@ 0xd5
 80015ee:	71bb      	strb	r3, [r7, #6]
 80015f0:	23a5      	movs	r3, #165	@ 0xa5
 80015f2:	71fb      	strb	r3, [r7, #7]
 80015f4:	2302      	movs	r3, #2
 80015f6:	723b      	strb	r3, [r7, #8]
 80015f8:	2300      	movs	r3, #0
 80015fa:	727b      	strb	r3, [r7, #9]
 80015fc:	2336      	movs	r3, #54	@ 0x36
 80015fe:	72bb      	strb	r3, [r7, #10]
 8001600:	23ac      	movs	r3, #172	@ 0xac
 8001602:	72fb      	strb	r3, [r7, #11]
 8001604:	23e1      	movs	r3, #225	@ 0xe1
 8001606:	733b      	strb	r3, [r7, #12]
 8001608:	2311      	movs	r3, #17
 800160a:	737b      	strb	r3, [r7, #13]
 800160c:	2301      	movs	r3, #1
 800160e:	73bb      	strb	r3, [r7, #14]
 8001610:	2300      	movs	r3, #0
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	2300      	movs	r3, #0
 8001616:	743b      	strb	r3, [r7, #16]
 8001618:	2300      	movs	r3, #0
 800161a:	747b      	strb	r3, [r7, #17]
 800161c:	23e0      	movs	r3, #224	@ 0xe0
 800161e:	74bb      	strb	r3, [r7, #18]
 8001620:	2300      	movs	r3, #0
 8001622:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001624:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <Add_HWServW2ST_Service+0x198>)
 8001626:	461c      	mov	r4, r3
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800162c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001630:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <Add_HWServW2ST_Service+0x194>)
 8001632:	8818      	ldrh	r0, [r3, #0]
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <Add_HWServW2ST_Service+0x1a0>)
 8001636:	9305      	str	r3, [sp, #20]
 8001638:	2300      	movs	r3, #0
 800163a:	9304      	str	r3, [sp, #16]
 800163c:	2310      	movs	r3, #16
 800163e:	9303      	str	r3, [sp, #12]
 8001640:	2304      	movs	r3, #4
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	2300      	movs	r3, #0
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	2310      	movs	r3, #16
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	2314      	movs	r3, #20
 800164e:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <Add_HWServW2ST_Service+0x198>)
 8001650:	2102      	movs	r1, #2
 8001652:	f008 f97e 	bl	8009952 <aci_gatt_add_char>
 8001656:	4603      	mov	r3, r0
 8001658:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800165a:	7dfb      	ldrb	r3, [r7, #23]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <Add_HWServW2ST_Service+0x184>
    return BLE_STATUS_ERROR;
 8001660:	2347      	movs	r3, #71	@ 0x47
 8001662:	e000      	b.n	8001666 <Add_HWServW2ST_Service+0x186>

  return BLE_STATUS_SUCCESS;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	371c      	adds	r7, #28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd90      	pop	{r4, r7, pc}
 800166e:	bf00      	nop
 8001670:	20000270 	.word	0x20000270
 8001674:	20000264 	.word	0x20000264
 8001678:	20000280 	.word	0x20000280
 800167c:	20000266 	.word	0x20000266
 8001680:	20000268 	.word	0x20000268

08001684 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b08d      	sub	sp, #52	@ 0x34
 8001688:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 800168a:	2301      	movs	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 800168e:	231b      	movs	r3, #27
 8001690:	703b      	strb	r3, [r7, #0]
 8001692:	23c5      	movs	r3, #197	@ 0xc5
 8001694:	707b      	strb	r3, [r7, #1]
 8001696:	23d5      	movs	r3, #213	@ 0xd5
 8001698:	70bb      	strb	r3, [r7, #2]
 800169a:	23a5      	movs	r3, #165	@ 0xa5
 800169c:	70fb      	strb	r3, [r7, #3]
 800169e:	2302      	movs	r3, #2
 80016a0:	713b      	strb	r3, [r7, #4]
 80016a2:	2300      	movs	r3, #0
 80016a4:	717b      	strb	r3, [r7, #5]
 80016a6:	23b4      	movs	r3, #180	@ 0xb4
 80016a8:	71bb      	strb	r3, [r7, #6]
 80016aa:	239a      	movs	r3, #154	@ 0x9a
 80016ac:	71fb      	strb	r3, [r7, #7]
 80016ae:	23e1      	movs	r3, #225	@ 0xe1
 80016b0:	723b      	strb	r3, [r7, #8]
 80016b2:	2311      	movs	r3, #17
 80016b4:	727b      	strb	r3, [r7, #9]
 80016b6:	2302      	movs	r3, #2
 80016b8:	72bb      	strb	r3, [r7, #10]
 80016ba:	2300      	movs	r3, #0
 80016bc:	72fb      	strb	r3, [r7, #11]
 80016be:	2300      	movs	r3, #0
 80016c0:	733b      	strb	r3, [r7, #12]
 80016c2:	2300      	movs	r3, #0
 80016c4:	737b      	strb	r3, [r7, #13]
 80016c6:	2300      	movs	r3, #0
 80016c8:	73bb      	strb	r3, [r7, #14]
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80016ce:	4b31      	ldr	r3, [pc, #196]	@ (8001794 <Add_SWServW2ST_Service+0x110>)
 80016d0:	461c      	mov	r4, r3
 80016d2:	463b      	mov	r3, r7
 80016d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	461a      	mov	r2, r3
 80016e0:	0052      	lsls	r2, r2, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	3301      	adds	r3, #1
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	4a2b      	ldr	r2, [pc, #172]	@ (8001798 <Add_SWServW2ST_Service+0x114>)
 80016ec:	9200      	str	r2, [sp, #0]
 80016ee:	2201      	movs	r2, #1
 80016f0:	4928      	ldr	r1, [pc, #160]	@ (8001794 <Add_SWServW2ST_Service+0x110>)
 80016f2:	2002      	movs	r0, #2
 80016f4:	f008 f8a4 	bl	8009840 <aci_gatt_add_serv>
 80016f8:	4603      	mov	r3, r0
 80016fa:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80016fc:	7cfb      	ldrb	r3, [r7, #19]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d13f      	bne.n	8001782 <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8001702:	231b      	movs	r3, #27
 8001704:	703b      	strb	r3, [r7, #0]
 8001706:	23c5      	movs	r3, #197	@ 0xc5
 8001708:	707b      	strb	r3, [r7, #1]
 800170a:	23d5      	movs	r3, #213	@ 0xd5
 800170c:	70bb      	strb	r3, [r7, #2]
 800170e:	23a5      	movs	r3, #165	@ 0xa5
 8001710:	70fb      	strb	r3, [r7, #3]
 8001712:	2302      	movs	r3, #2
 8001714:	713b      	strb	r3, [r7, #4]
 8001716:	2300      	movs	r3, #0
 8001718:	717b      	strb	r3, [r7, #5]
 800171a:	2336      	movs	r3, #54	@ 0x36
 800171c:	71bb      	strb	r3, [r7, #6]
 800171e:	23ac      	movs	r3, #172	@ 0xac
 8001720:	71fb      	strb	r3, [r7, #7]
 8001722:	23e1      	movs	r3, #225	@ 0xe1
 8001724:	723b      	strb	r3, [r7, #8]
 8001726:	2311      	movs	r3, #17
 8001728:	727b      	strb	r3, [r7, #9]
 800172a:	2301      	movs	r3, #1
 800172c:	72bb      	strb	r3, [r7, #10]
 800172e:	2300      	movs	r3, #0
 8001730:	72fb      	strb	r3, [r7, #11]
 8001732:	2300      	movs	r3, #0
 8001734:	733b      	strb	r3, [r7, #12]
 8001736:	2301      	movs	r3, #1
 8001738:	737b      	strb	r3, [r7, #13]
 800173a:	2300      	movs	r3, #0
 800173c:	73bb      	strb	r3, [r7, #14]
 800173e:	2300      	movs	r3, #0
 8001740:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001742:	4b16      	ldr	r3, [pc, #88]	@ (800179c <Add_SWServW2ST_Service+0x118>)
 8001744:	461c      	mov	r4, r3
 8001746:	463b      	mov	r3, r7
 8001748:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800174a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 800174e:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <Add_SWServW2ST_Service+0x114>)
 8001750:	8818      	ldrh	r0, [r3, #0]
 8001752:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <Add_SWServW2ST_Service+0x11c>)
 8001754:	9305      	str	r3, [sp, #20]
 8001756:	2300      	movs	r3, #0
 8001758:	9304      	str	r3, [sp, #16]
 800175a:	2310      	movs	r3, #16
 800175c:	9303      	str	r3, [sp, #12]
 800175e:	2304      	movs	r3, #4
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	2300      	movs	r3, #0
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	2310      	movs	r3, #16
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2308      	movs	r3, #8
 800176c:	4a0b      	ldr	r2, [pc, #44]	@ (800179c <Add_SWServW2ST_Service+0x118>)
 800176e:	2102      	movs	r1, #2
 8001770:	f008 f8ef 	bl	8009952 <aci_gatt_add_char>
 8001774:	4603      	mov	r3, r0
 8001776:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8001778:	7cfb      	ldrb	r3, [r7, #19]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d103      	bne.n	8001786 <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 800177e:	2300      	movs	r3, #0
 8001780:	e003      	b.n	800178a <Add_SWServW2ST_Service+0x106>
    goto fail;
 8001782:	bf00      	nop
 8001784:	e000      	b.n	8001788 <Add_SWServW2ST_Service+0x104>
    goto fail;
 8001786:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 8001788:	2347      	movs	r3, #71	@ 0x47
}
 800178a:	4618      	mov	r0, r3
 800178c:	371c      	adds	r7, #28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd90      	pop	{r4, r7, pc}
 8001792:	bf00      	nop
 8001794:	20000270 	.word	0x20000270
 8001798:	2000026a 	.word	0x2000026a
 800179c:	20000280 	.word	0x20000280
 80017a0:	2000026c 	.word	0x2000026c

080017a4 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	@ 0x30
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 80017b0:	f002 fd9e 	bl	80042f0 <HAL_GetTick>
 80017b4:	4603      	mov	r3, r0
 80017b6:	08db      	lsrs	r3, r3, #3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	743b      	strb	r3, [r7, #16]
 80017bc:	f002 fd98 	bl	80042f0 <HAL_GetTick>
 80017c0:	4603      	mov	r3, r0
 80017c2:	0adb      	lsrs	r3, r3, #11
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	425b      	negs	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	74bb      	strb	r3, [r7, #18]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	425b      	negs	r3, r3
 80017da:	121b      	asrs	r3, r3, #8
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	753b      	strb	r3, [r7, #20]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	121b      	asrs	r3, r3, #8
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	425b      	negs	r3, r3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	75bb      	strb	r3, [r7, #22]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	425b      	negs	r3, r3
 8001804:	121b      	asrs	r3, r3, #8
 8001806:	b2db      	uxtb	r3, r3
 8001808:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	763b      	strb	r3, [r7, #24]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	121b      	asrs	r3, r3, #8
 8001818:	b2db      	uxtb	r3, r3
 800181a:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	76bb      	strb	r3, [r7, #26]
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	121b      	asrs	r3, r3, #8
 800182a:	b2db      	uxtb	r3, r3
 800182c:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	773b      	strb	r3, [r7, #28]
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	121b      	asrs	r3, r3, #8
 800183c:	b2db      	uxtb	r3, r3
 800183e:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	77bb      	strb	r3, [r7, #30]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	121b      	asrs	r3, r3, #8
 800184e:	b2db      	uxtb	r3, r3
 8001850:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	f887 3020 	strb.w	r3, [r7, #32]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	121b      	asrs	r3, r3, #8
 8001862:	b2db      	uxtb	r3, r3
 8001864:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	121b      	asrs	r3, r3, #8
 8001878:	b2db      	uxtb	r3, r3
 800187a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 800187e:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <Acc_Update+0x10c>)
 8001880:	8818      	ldrh	r0, [r3, #0]
 8001882:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <Acc_Update+0x110>)
 8001884:	8819      	ldrh	r1, [r3, #0]
 8001886:	f107 0310 	add.w	r3, r7, #16
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2314      	movs	r3, #20
 800188e:	2200      	movs	r2, #0
 8001890:	f008 f92a 	bl	8009ae8 <aci_gatt_update_char_value>
 8001894:	4603      	mov	r3, r0
 8001896:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 800189a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <Acc_Update+0x102>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 80018a2:	2347      	movs	r3, #71	@ 0x47
 80018a4:	e000      	b.n	80018a8 <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3728      	adds	r7, #40	@ 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000264 	.word	0x20000264
 80018b4:	20000268 	.word	0x20000268

080018b8 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af02      	add	r7, sp, #8
 80018be:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 80018c0:	f002 fd16 	bl	80042f0 <HAL_GetTick>
 80018c4:	4603      	mov	r3, r0
 80018c6:	08db      	lsrs	r3, r3, #3
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	733b      	strb	r3, [r7, #12]
 80018cc:	f002 fd10 	bl	80042f0 <HAL_GetTick>
 80018d0:	4603      	mov	r3, r0
 80018d2:	0adb      	lsrs	r3, r3, #11
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	73bb      	strb	r3, [r7, #14]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	121b      	asrs	r3, r3, #8
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	743b      	strb	r3, [r7, #16]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	121b      	asrs	r3, r3, #8
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	74bb      	strb	r3, [r7, #18]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	121b      	asrs	r3, r3, #8
 800190a:	b2db      	uxtb	r3, r3
 800190c:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 800190e:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <Quat_Update+0x84>)
 8001910:	8818      	ldrh	r0, [r3, #0]
 8001912:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <Quat_Update+0x88>)
 8001914:	8819      	ldrh	r1, [r3, #0]
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2308      	movs	r3, #8
 800191e:	2200      	movs	r2, #0
 8001920:	f008 f8e2 	bl	8009ae8 <aci_gatt_update_char_value>
 8001924:	4603      	mov	r3, r0
 8001926:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8001928:	7dfb      	ldrb	r3, [r7, #23]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <Quat_Update+0x7a>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 800192e:	2347      	movs	r3, #71	@ 0x47
 8001930:	e000      	b.n	8001934 <Quat_Update+0x7c>
  }

  return BLE_STATUS_SUCCESS;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2000026a 	.word	0x2000026a
 8001940:	2000026c 	.word	0x2000026c

08001944 <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 8001944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001948:	b08e      	sub	sp, #56	@ 0x38
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8001950:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001952:	4b57      	ldr	r3, [pc, #348]	@ (8001ab0 <Read_Request_CB+0x16c>)
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	3301      	adds	r3, #1
 8001958:	429a      	cmp	r2, r3
 800195a:	d105      	bne.n	8001968 <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 800195c:	4a55      	ldr	r2, [pc, #340]	@ (8001ab4 <Read_Request_CB+0x170>)
 800195e:	4956      	ldr	r1, [pc, #344]	@ (8001ab8 <Read_Request_CB+0x174>)
 8001960:	4856      	ldr	r0, [pc, #344]	@ (8001abc <Read_Request_CB+0x178>)
 8001962:	f7ff ff1f 	bl	80017a4 <Acc_Update>
 8001966:	e091      	b.n	8001a8c <Read_Request_CB+0x148>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8001968:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800196a:	4b55      	ldr	r3, [pc, #340]	@ (8001ac0 <Read_Request_CB+0x17c>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	3301      	adds	r3, #1
 8001970:	429a      	cmp	r2, r3
 8001972:	f040 808b 	bne.w	8001a8c <Read_Request_CB+0x148>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 8001976:	f00b f909 	bl	800cb8c <rand>
 800197a:	4603      	mov	r3, r0
 800197c:	17da      	asrs	r2, r3, #31
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	61fa      	str	r2, [r7, #28]
 8001982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	0099      	lsls	r1, r3, #2
 8001990:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001994:	0090      	lsls	r0, r2, #2
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	69b9      	ldr	r1, [r7, #24]
 800199c:	1851      	adds	r1, r2, r1
 800199e:	6139      	str	r1, [r7, #16]
 80019a0:	69f9      	ldr	r1, [r7, #28]
 80019a2:	eb43 0101 	adc.w	r1, r3, r1
 80019a6:	6179      	str	r1, [r7, #20]
 80019a8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019b4:	f7ff f948 	bl	8000c48 <__aeabi_uldivmod>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f7fe fde4 	bl	800058c <__aeabi_ul2d>
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac4 <Read_Request_CB+0x180>)
 80019ca:	f7fe fc5f 	bl	800028c <__adddf3>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	f7ff f8e7 	bl	8000ba8 <__aeabi_d2f>
 80019da:	4603      	mov	r3, r0
 80019dc:	637b      	str	r3, [r7, #52]	@ 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 80019de:	f00b f8d5 	bl	800cb8c <rand>
 80019e2:	4603      	mov	r3, r0
 80019e4:	17da      	asrs	r2, r3, #31
 80019e6:	4698      	mov	r8, r3
 80019e8:	4691      	mov	r9, r2
 80019ea:	4642      	mov	r2, r8
 80019ec:	464b      	mov	r3, r9
 80019ee:	1891      	adds	r1, r2, r2
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	415b      	adcs	r3, r3
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019fa:	eb12 0408 	adds.w	r4, r2, r8
 80019fe:	eb43 0509 	adc.w	r5, r3, r9
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	016b      	lsls	r3, r5, #5
 8001a0c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001a10:	0162      	lsls	r2, r4, #5
 8001a12:	eb14 0a02 	adds.w	sl, r4, r2
 8001a16:	eb45 0b03 	adc.w	fp, r5, r3
 8001a1a:	eb1a 0308 	adds.w	r3, sl, r8
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	eb4b 0309 	adc.w	r3, fp, r9
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a32:	f7ff f909 	bl	8000c48 <__aeabi_uldivmod>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7fe fda5 	bl	800058c <__aeabi_ul2d>
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <Read_Request_CB+0x184>)
 8001a48:	f7fe fc20 	bl	800028c <__adddf3>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	f7ff f8a8 	bl	8000ba8 <__aeabi_d2f>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	633b      	str	r3, [r7, #48]	@ 0x30
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8001a5c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a60:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001acc <Read_Request_CB+0x188>
 8001a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a68:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001a6c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a70:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7c:	ee17 3a90 	vmov	r3, s15
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	4619      	mov	r1, r3
 8001a84:	ee16 0a90 	vmov	r0, s13
 8001a88:	f000 f824 	bl	8001ad4 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 8001a8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <Read_Request_CB+0x18c>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d007      	beq.n	8001aa4 <Read_Request_CB+0x160>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8001a94:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <Read_Request_CB+0x18c>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f008 f8b5 	bl	8009c08 <aci_gatt_allow_read>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	3738      	adds	r7, #56	@ 0x38
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000268 	.word	0x20000268
 8001ab4:	200002b0 	.word	0x200002b0
 8001ab8:	200002a4 	.word	0x200002a4
 8001abc:	20000298 	.word	0x20000298
 8001ac0:	20000266 	.word	0x20000266
 8001ac4:	403b0000 	.word	0x403b0000
 8001ac8:	408f4000 	.word	0x408f4000
 8001acc:	42c80000 	.word	0x42c80000
 8001ad0:	20000290 	.word	0x20000290

08001ad4 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8001ae0:	f002 fc06 	bl	80042f0 <HAL_GetTick>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	08db      	lsrs	r3, r3, #3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	733b      	strb	r3, [r7, #12]
 8001aec:	f002 fc00 	bl	80042f0 <HAL_GetTick>
 8001af0:	4603      	mov	r3, r0
 8001af2:	0adb      	lsrs	r3, r3, #11
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	73bb      	strb	r3, [r7, #14]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	121b      	asrs	r3, r3, #8
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	73fb      	strb	r3, [r7, #15]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	141b      	asrs	r3, r3, #16
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	743b      	strb	r3, [r7, #16]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	161b      	asrs	r3, r3, #24
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 8001b16:	887b      	ldrh	r3, [r7, #2]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	74bb      	strb	r3, [r7, #18]
 8001b1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b20:	121b      	asrs	r3, r3, #8
 8001b22:	b21b      	sxth	r3, r3
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <BlueMS_Environmental_Update+0x84>)
 8001b2a:	8818      	ldrh	r0, [r3, #0]
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <BlueMS_Environmental_Update+0x88>)
 8001b2e:	8819      	ldrh	r1, [r3, #0]
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2308      	movs	r3, #8
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f007 ffd5 	bl	8009ae8 <aci_gatt_update_char_value>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8001b42:	7dfb      	ldrb	r3, [r7, #23]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <BlueMS_Environmental_Update+0x78>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8001b48:	2347      	movs	r3, #71	@ 0x47
 8001b4a:	e000      	b.n	8001b4e <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000264 	.word	0x20000264
 8001b5c:	20000266 	.word	0x20000266

08001b60 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b092      	sub	sp, #72	@ 0x48
 8001b64:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 8001b66:	4a36      	ldr	r2, [pc, #216]	@ (8001c40 <Set_DeviceConnectable+0xe0>)
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b70:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8001b74:	2302      	movs	r3, #2
 8001b76:	703b      	strb	r3, [r7, #0]
 8001b78:	230a      	movs	r3, #10
 8001b7a:	707b      	strb	r3, [r7, #1]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	70bb      	strb	r3, [r7, #2]
 8001b80:	2308      	movs	r3, #8
 8001b82:	70fb      	strb	r3, [r7, #3]
 8001b84:	2309      	movs	r3, #9
 8001b86:	713b      	strb	r3, [r7, #4]
 8001b88:	2342      	movs	r3, #66	@ 0x42
 8001b8a:	717b      	strb	r3, [r7, #5]
 8001b8c:	236c      	movs	r3, #108	@ 0x6c
 8001b8e:	71bb      	strb	r3, [r7, #6]
 8001b90:	2375      	movs	r3, #117	@ 0x75
 8001b92:	71fb      	strb	r3, [r7, #7]
 8001b94:	2365      	movs	r3, #101	@ 0x65
 8001b96:	723b      	strb	r3, [r7, #8]
 8001b98:	234e      	movs	r3, #78	@ 0x4e
 8001b9a:	727b      	strb	r3, [r7, #9]
 8001b9c:	2352      	movs	r3, #82	@ 0x52
 8001b9e:	72bb      	strb	r3, [r7, #10]
 8001ba0:	2347      	movs	r3, #71	@ 0x47
 8001ba2:	72fb      	strb	r3, [r7, #11]
 8001ba4:	230d      	movs	r3, #13
 8001ba6:	733b      	strb	r3, [r7, #12]
 8001ba8:	23ff      	movs	r3, #255	@ 0xff
 8001baa:	737b      	strb	r3, [r7, #13]
 8001bac:	2301      	movs	r3, #1
 8001bae:	73bb      	strb	r3, [r7, #14]
 8001bb0:	2380      	movs	r3, #128	@ 0x80
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	743b      	strb	r3, [r7, #16]
 8001bb8:	23f4      	movs	r3, #244	@ 0xf4
 8001bba:	747b      	strb	r3, [r7, #17]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	74bb      	strb	r3, [r7, #18]
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c44 <Set_DeviceConnectable+0xe4>)
 8001bc6:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8001bc8:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8001bca:	4b1e      	ldr	r3, [pc, #120]	@ (8001c44 <Set_DeviceConnectable+0xe4>)
 8001bcc:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8001bce:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c44 <Set_DeviceConnectable+0xe4>)
 8001bd2:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8001bd4:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c44 <Set_DeviceConnectable+0xe4>)
 8001bd8:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8001bda:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8001bdc:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <Set_DeviceConnectable+0xe4>)
 8001bde:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8001be0:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 8001be2:	4b18      	ldr	r3, [pc, #96]	@ (8001c44 <Set_DeviceConnectable+0xe4>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 8001be6:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8001be8:	7cbb      	ldrb	r3, [r7, #18]
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f008 f968 	bl	8009eca <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	9306      	str	r3, [sp, #24]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	9305      	str	r3, [sp, #20]
 8001c02:	2300      	movs	r3, #0
 8001c04:	9304      	str	r3, [sp, #16]
 8001c06:	2300      	movs	r3, #0
 8001c08:	9303      	str	r3, [sp, #12]
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	9302      	str	r3, [sp, #8]
 8001c10:	2308      	movs	r3, #8
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	2300      	movs	r3, #0
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 8001c1e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8001c22:	2000      	movs	r0, #0
 8001c24:	f007 fc57 	bl	80094d6 <aci_gap_set_discoverable>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8001c2e:	463b      	mov	r3, r7
 8001c30:	4619      	mov	r1, r3
 8001c32:	201a      	movs	r0, #26
 8001c34:	f007 fd90 	bl	8009758 <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8001c38:	bf00      	nop
 8001c3a:	3728      	adds	r7, #40	@ 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	0800f9a0 	.word	0x0800f9a0
 8001c44:	20000258 	.word	0x20000258

08001c48 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	@ 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	627b      	str	r3, [r7, #36]	@ 0x24
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c56:	3301      	adds	r3, #1
 8001c58:	623b      	str	r3, [r7, #32]

  if(hci_pckt->type != HCI_EVENT_PKT)
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d14a      	bne.n	8001cf8 <user_notify+0xb0>
    return;

  switch(event_pckt->evt){
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2bff      	cmp	r3, #255	@ 0xff
 8001c68:	d01f      	beq.n	8001caa <user_notify+0x62>
 8001c6a:	2bff      	cmp	r3, #255	@ 0xff
 8001c6c:	dc49      	bgt.n	8001d02 <user_notify+0xba>
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d002      	beq.n	8001c78 <user_notify+0x30>
 8001c72:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c74:	d003      	beq.n	8001c7e <user_notify+0x36>
 8001c76:	e044      	b.n	8001d02 <user_notify+0xba>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8001c78:	f000 f846 	bl	8001d08 <GAP_DisconnectionComplete_CB>
    }
    break;
 8001c7c:	e041      	b.n	8001d02 <user_notify+0xba>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	3302      	adds	r3, #2
 8001c82:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d137      	bne.n	8001cfc <user_notify+0xb4>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1d5a      	adds	r2, r3, #5
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	f000 f847 	bl	8001d34 <GAP_ConnectionComplete_CB>
        }
        break;
 8001ca6:	bf00      	nop
      }
    }
    break;
 8001ca8:	e028      	b.n	8001cfc <user_notify+0xb4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	3302      	adds	r3, #2
 8001cae:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode){
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	f640 4213 	movw	r2, #3091	@ 0xc13
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00d      	beq.n	8001cda <user_notify+0x92>
 8001cbe:	f640 4214 	movw	r2, #3092	@ 0xc14
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d11c      	bne.n	8001d00 <user_notify+0xb8>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3302      	adds	r3, #2
 8001cca:	61bb      	str	r3, [r7, #24]
          Read_Request_CB(pr->attr_handle);
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	885b      	ldrh	r3, [r3, #2]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fe36 	bl	8001944 <Read_Request_CB>
        }
        break;
 8001cd8:	e00d      	b.n	8001cf6 <user_notify+0xae>
      case EVT_BLUE_GATT_WRITE_PERMIT_REQ:
      	  {
      		evt_gatt_write_permit_req *pr = (void*)blue_evt->data;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3302      	adds	r3, #2
 8001cde:	617b      	str	r3, [r7, #20]
      		Attribute_Modified_CB(pr->attr_handle, pr->data_length, pr->data);
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	885b      	ldrh	r3, [r3, #2]
 8001ce4:	b298      	uxth	r0, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	7919      	ldrb	r1, [r3, #4]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	3305      	adds	r3, #5
 8001cee:	461a      	mov	r2, r3
 8001cf0:	f000 fa4a 	bl	8002188 <Attribute_Modified_CB>

      	  }
      	  break;
 8001cf4:	bf00      	nop
      }



    }
    break;
 8001cf6:	e003      	b.n	8001d00 <user_notify+0xb8>
    return;
 8001cf8:	bf00      	nop
 8001cfa:	e002      	b.n	8001d02 <user_notify+0xba>
    break;
 8001cfc:	bf00      	nop
 8001cfe:	e000      	b.n	8001d02 <user_notify+0xba>
    break;
 8001d00:	bf00      	nop
  }
}
 8001d02:	3728      	adds	r7, #40	@ 0x28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  connected = FALSE;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <GAP_DisconnectionComplete_CB+0x20>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <GAP_DisconnectionComplete_CB+0x24>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8001d18:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <GAP_DisconnectionComplete_CB+0x28>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	20000294 	.word	0x20000294
 8001d2c:	20000001 	.word	0x20000001
 8001d30:	20000292 	.word	0x20000292

08001d34 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8001d40:	4b0a      	ldr	r3, [pc, #40]	@ (8001d6c <GAP_ConnectionComplete_CB+0x38>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8001d46:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <GAP_ConnectionComplete_CB+0x3c>)
 8001d48:	887b      	ldrh	r3, [r7, #2]
 8001d4a:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 8001d4c:	2305      	movs	r3, #5
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	e002      	b.n	8001d58 <GAP_ConnectionComplete_CB+0x24>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f9      	bne.n	8001d52 <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	20000294 	.word	0x20000294
 8001d70:	20000290 	.word	0x20000290

08001d74 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <HCI_TL_SPI_Init+0x88>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d80:	4a1e      	ldr	r2, [pc, #120]	@ (8001dfc <HCI_TL_SPI_Init+0x88>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d88:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <HCI_TL_SPI_Init+0x88>)
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001d94:	2340      	movs	r3, #64	@ 0x40
 8001d96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d98:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001da2:	f107 030c 	add.w	r3, r7, #12
 8001da6:	4619      	mov	r1, r3
 8001da8:	4815      	ldr	r0, [pc, #84]	@ (8001e00 <HCI_TL_SPI_Init+0x8c>)
 8001daa:	f002 fd1d 	bl	80047e8 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001dae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db4:	2301      	movs	r3, #1
 8001db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dca:	f002 fd0d 	bl	80047e8 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001dce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001de0:	f107 030c 	add.w	r3, r7, #12
 8001de4:	4619      	mov	r1, r3
 8001de6:	4807      	ldr	r0, [pc, #28]	@ (8001e04 <HCI_TL_SPI_Init+0x90>)
 8001de8:	f002 fcfe 	bl	80047e8 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 8001dec:	f001 fff4 	bl	8003dd8 <BSP_SPI3_Init>
 8001df0:	4603      	mov	r3, r0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3720      	adds	r7, #32
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	48001000 	.word	0x48001000
 8001e04:	48000c00 	.word	0x48000c00

08001e08 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001e0c:	2140      	movs	r1, #64	@ 0x40
 8001e0e:	4808      	ldr	r0, [pc, #32]	@ (8001e30 <HCI_TL_SPI_DeInit+0x28>)
 8001e10:	f002 fe94 	bl	8004b3c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001e14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e18:	4806      	ldr	r0, [pc, #24]	@ (8001e34 <HCI_TL_SPI_DeInit+0x2c>)
 8001e1a:	f002 fe8f 	bl	8004b3c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8001e1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e26:	f002 fe89 	bl	8004b3c <HAL_GPIO_DeInit>
  return 0;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	48001000 	.word	0x48001000
 8001e34:	48000c00 	.word	0x48000c00

08001e38 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e42:	480d      	ldr	r0, [pc, #52]	@ (8001e78 <HCI_TL_SPI_Reset+0x40>)
 8001e44:	f002 ff86 	bl	8004d54 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e52:	f002 ff7f 	bl	8004d54 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001e56:	2005      	movs	r0, #5
 8001e58:	f002 fa56 	bl	8004308 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e66:	f002 ff75 	bl	8004d54 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001e6a:	2005      	movs	r0, #5
 8001e6c:	f002 fa4c 	bl	8004308 <HAL_Delay>
  return 0;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	48000c00 	.word	0x48000c00

08001e7c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8001e8c:	23ff      	movs	r3, #255	@ 0xff
 8001e8e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001e90:	230b      	movs	r3, #11
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	2300      	movs	r3, #0
 8001e96:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e9e:	4822      	ldr	r0, [pc, #136]	@ (8001f28 <HCI_TL_SPI_Receive+0xac>)
 8001ea0:	f002 ff58 	bl	8004d54 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001ea4:	f107 010c 	add.w	r1, r7, #12
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2205      	movs	r2, #5
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f001 ffc2 	bl	8003e38 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8001eb4:	7b3b      	ldrb	r3, [r7, #12]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d12a      	bne.n	8001f10 <HCI_TL_SPI_Receive+0x94>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8001eba:	7c3b      	ldrb	r3, [r7, #16]
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	b21a      	sxth	r2, r3
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	b21b      	sxth	r3, r3
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	b21b      	sxth	r3, r3
 8001eca:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8001ecc:	8bfb      	ldrh	r3, [r7, #30]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d01e      	beq.n	8001f10 <HCI_TL_SPI_Receive+0x94>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8001ed2:	8bfa      	ldrh	r2, [r7, #30]
 8001ed4:	887b      	ldrh	r3, [r7, #2]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d901      	bls.n	8001ede <HCI_TL_SPI_Receive+0x62>
        byte_count = size;
 8001eda:	887b      	ldrh	r3, [r7, #2]
 8001edc:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	777b      	strb	r3, [r7, #29]
 8001ee2:	e010      	b.n	8001f06 <HCI_TL_SPI_Receive+0x8a>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8001ee4:	f107 011b 	add.w	r1, r7, #27
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	2201      	movs	r2, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 ffa2 	bl	8003e38 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8001ef4:	7f7b      	ldrb	r3, [r7, #29]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	7efa      	ldrb	r2, [r7, #27]
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8001f00:	7f7b      	ldrb	r3, [r7, #29]
 8001f02:	3301      	adds	r3, #1
 8001f04:	777b      	strb	r3, [r7, #29]
 8001f06:	7f7b      	ldrb	r3, [r7, #29]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	8bfa      	ldrh	r2, [r7, #30]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d8e9      	bhi.n	8001ee4 <HCI_TL_SPI_Receive+0x68>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001f10:	2201      	movs	r2, #1
 8001f12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f16:	4804      	ldr	r0, [pc, #16]	@ (8001f28 <HCI_TL_SPI_Receive+0xac>)
 8001f18:	f002 ff1c 	bl	8004d54 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8001f1c:	7f7b      	ldrb	r3, [r7, #29]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3720      	adds	r7, #32
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	48000c00 	.word	0x48000c00

08001f2c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001f38:	230a      	movs	r3, #10
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f002 f9d6 	bl	80042f0 <HAL_GetTick>
 8001f44:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f50:	481c      	ldr	r0, [pc, #112]	@ (8001fc4 <HCI_TL_SPI_Send+0x98>)
 8001f52:	f002 feff 	bl	8004d54 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001f56:	f107 0108 	add.w	r1, r7, #8
 8001f5a:	f107 0310 	add.w	r3, r7, #16
 8001f5e:	2205      	movs	r2, #5
 8001f60:	4618      	mov	r0, r3
 8001f62:	f001 ff69 	bl	8003e38 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8001f66:	7a3b      	ldrb	r3, [r7, #8]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d10f      	bne.n	8001f8c <HCI_TL_SPI_Send+0x60>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8001f6c:	7a7b      	ldrb	r3, [r7, #9]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	887b      	ldrh	r3, [r7, #2]
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d806      	bhi.n	8001f84 <HCI_TL_SPI_Send+0x58>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8001f76:	887b      	ldrh	r3, [r7, #2]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4913      	ldr	r1, [pc, #76]	@ (8001fc8 <HCI_TL_SPI_Send+0x9c>)
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f001 ff5b 	bl	8003e38 <BSP_SPI3_SendRecv>
 8001f82:	e006      	b.n	8001f92 <HCI_TL_SPI_Send+0x66>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8001f84:	f06f 0301 	mvn.w	r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	e002      	b.n	8001f92 <HCI_TL_SPI_Send+0x66>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f90:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f98:	480a      	ldr	r0, [pc, #40]	@ (8001fc4 <HCI_TL_SPI_Send+0x98>)
 8001f9a:	f002 fedb 	bl	8004d54 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001f9e:	f002 f9a7 	bl	80042f0 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b0f      	cmp	r3, #15
 8001faa:	d903      	bls.n	8001fb4 <HCI_TL_SPI_Send+0x88>
    {
      result = -3;
 8001fac:	f06f 0302 	mvn.w	r3, #2
 8001fb0:	61fb      	str	r3, [r7, #28]
      break;
 8001fb2:	e002      	b.n	8001fba <HCI_TL_SPI_Send+0x8e>
    }
  } while(result < 0);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	dbc5      	blt.n	8001f46 <HCI_TL_SPI_Send+0x1a>

  return result;
 8001fba:	69fb      	ldr	r3, [r7, #28]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	48000c00 	.word	0x48000c00
 8001fc8:	200002d0 	.word	0x200002d0

08001fcc <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001fd0:	2140      	movs	r1, #64	@ 0x40
 8001fd2:	4805      	ldr	r0, [pc, #20]	@ (8001fe8 <IsDataAvailable+0x1c>)
 8001fd4:	f002 fea6 	bl	8004d24 <HAL_GPIO_ReadPin>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	bf0c      	ite	eq
 8001fde:	2301      	moveq	r3, #1
 8001fe0:	2300      	movne	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	48001000 	.word	0x48001000

08001fec <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001ff2:	4b12      	ldr	r3, [pc, #72]	@ (800203c <hci_tl_lowlevel_init+0x50>)
 8001ff4:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001ff6:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <hci_tl_lowlevel_init+0x54>)
 8001ff8:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001ffa:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <hci_tl_lowlevel_init+0x58>)
 8001ffc:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001ffe:	4b12      	ldr	r3, [pc, #72]	@ (8002048 <hci_tl_lowlevel_init+0x5c>)
 8002000:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8002002:	4b12      	ldr	r3, [pc, #72]	@ (800204c <hci_tl_lowlevel_init+0x60>)
 8002004:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8002006:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <hci_tl_lowlevel_init+0x64>)
 8002008:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	4618      	mov	r0, r3
 800200e:	f008 f87b 	bl	800a108 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8002012:	4910      	ldr	r1, [pc, #64]	@ (8002054 <hci_tl_lowlevel_init+0x68>)
 8002014:	4810      	ldr	r0, [pc, #64]	@ (8002058 <hci_tl_lowlevel_init+0x6c>)
 8002016:	f002 fba3 	bl	8004760 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 800201a:	4a10      	ldr	r2, [pc, #64]	@ (800205c <hci_tl_lowlevel_init+0x70>)
 800201c:	2100      	movs	r1, #0
 800201e:	480e      	ldr	r0, [pc, #56]	@ (8002058 <hci_tl_lowlevel_init+0x6c>)
 8002020:	f002 fb84 	bl	800472c <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002024:	2200      	movs	r2, #0
 8002026:	2100      	movs	r1, #0
 8002028:	2017      	movs	r0, #23
 800202a:	f002 fa49 	bl	80044c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800202e:	2017      	movs	r0, #23
 8002030:	f002 fa62 	bl	80044f8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8002034:	bf00      	nop
 8002036:	3720      	adds	r7, #32
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	08001d75 	.word	0x08001d75
 8002040:	08001e09 	.word	0x08001e09
 8002044:	08001f2d 	.word	0x08001f2d
 8002048:	08001e7d 	.word	0x08001e7d
 800204c:	08001e39 	.word	0x08001e39
 8002050:	08003e79 	.word	0x08003e79
 8002054:	16000006 	.word	0x16000006
 8002058:	200002c8 	.word	0x200002c8
 800205c:	08002061 	.word	0x08002061

08002060 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8002064:	e005      	b.n	8002072 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8002066:	2000      	movs	r0, #0
 8002068:	f008 f9b2 	bl	800a3d0 <hci_notify_asynch_evt>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d105      	bne.n	800207e <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8002072:	f7ff ffab 	bl	8001fcc <IsDataAvailable>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f4      	bne.n	8002066 <hci_tl_lowlevel_isr+0x6>
 800207c:	e000      	b.n	8002080 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 800207e:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4a07      	ldr	r2, [pc, #28]	@ (80020b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002094:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	4a06      	ldr	r2, [pc, #24]	@ (80020b4 <vApplicationGetIdleTaskMemory+0x30>)
 800209a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2280      	movs	r2, #128	@ 0x80
 80020a0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	200003d0 	.word	0x200003d0
 80020b4:	20000424 	.word	0x20000424

080020b8 <Add_Acc_Service>:
//                       GATT_NOTIFY_ATTRIBUTE_WRITE,
//                       16, 1,
//                       &SampleFreqCharHandle);
// }
void Add_Acc_Service(void)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b08b      	sub	sp, #44	@ 0x2c
 80020bc:	af06      	add	r7, sp, #24
//	tBleStatus ret;
  uint8_t uuid128_base[16] = {
 80020be:	4b21      	ldr	r3, [pc, #132]	@ (8002144 <Add_Acc_Service+0x8c>)
 80020c0:	463c      	mov	r4, r7
 80020c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      0xd5, 0xa5, 0x02, 0x00, 0x36, 0xac, 0xe1, 0x11,
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

  // UUID for service: 0000AA00-0000-0001-11e1-ac360002a5d5
  uuid128_base[12] = 0x00;
 80020c8:	2300      	movs	r3, #0
 80020ca:	733b      	strb	r3, [r7, #12]
  uuid128_base[13] = 0xAA;
 80020cc:	23aa      	movs	r3, #170	@ 0xaa
 80020ce:	737b      	strb	r3, [r7, #13]
  aci_gatt_add_serv(UUID_TYPE_128, uuid128_base, PRIMARY_SERVICE, 7, &AccServiceHandle);\
 80020d0:	4639      	mov	r1, r7
 80020d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002148 <Add_Acc_Service+0x90>)
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2307      	movs	r3, #7
 80020d8:	2201      	movs	r2, #1
 80020da:	2002      	movs	r0, #2
 80020dc:	f007 fbb0 	bl	8009840 <aci_gatt_add_serv>
//  if (ret != BLE_STATUS_SUCCESS) goto fail;

  // UUID for ACC characteristic: 00000100-0000-0001-11e1-ac360002a5d5
  uuid128_base[12] = 0x00;
 80020e0:	2300      	movs	r3, #0
 80020e2:	733b      	strb	r3, [r7, #12]
  uuid128_base[13] = 0x01;
 80020e4:	2301      	movs	r3, #1
 80020e6:	737b      	strb	r3, [r7, #13]
  aci_gatt_add_char(
 80020e8:	4b17      	ldr	r3, [pc, #92]	@ (8002148 <Add_Acc_Service+0x90>)
 80020ea:	8818      	ldrh	r0, [r3, #0]
 80020ec:	463a      	mov	r2, r7
 80020ee:	4b17      	ldr	r3, [pc, #92]	@ (800214c <Add_Acc_Service+0x94>)
 80020f0:	9305      	str	r3, [sp, #20]
 80020f2:	2301      	movs	r3, #1
 80020f4:	9304      	str	r3, [sp, #16]
 80020f6:	2310      	movs	r3, #16
 80020f8:	9303      	str	r3, [sp, #12]
 80020fa:	2301      	movs	r3, #1
 80020fc:	9302      	str	r3, [sp, #8]
 80020fe:	2300      	movs	r3, #0
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	2312      	movs	r3, #18
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2306      	movs	r3, #6
 8002108:	2102      	movs	r1, #2
 800210a:	f007 fc22 	bl	8009952 <aci_gatt_add_char>
  //        CHAR_PROP_WRITE | CHAR_PROP_WRITE_WITHOUT_RESP,
  //        ATTR_PERMISSION_NONE,
  //        GATT_NOTIFY_ATTRIBUTE_WRITE,
  //        16, 1,
  //        &SampleFreqCharHandle);
  uuid128_base[12] = 0x01;
 800210e:	2301      	movs	r3, #1
 8002110:	733b      	strb	r3, [r7, #12]
  uuid128_base[13] = 0x01;
 8002112:	2301      	movs	r3, #1
 8002114:	737b      	strb	r3, [r7, #13]
  aci_gatt_add_char(
 8002116:	4b0c      	ldr	r3, [pc, #48]	@ (8002148 <Add_Acc_Service+0x90>)
 8002118:	8818      	ldrh	r0, [r3, #0]
 800211a:	463a      	mov	r2, r7
 800211c:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <Add_Acc_Service+0x98>)
 800211e:	9305      	str	r3, [sp, #20]
 8002120:	2301      	movs	r3, #1
 8002122:	9304      	str	r3, [sp, #16]
 8002124:	2310      	movs	r3, #16
 8002126:	9303      	str	r3, [sp, #12]
 8002128:	2302      	movs	r3, #2
 800212a:	9302      	str	r3, [sp, #8]
 800212c:	2300      	movs	r3, #0
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	230c      	movs	r3, #12
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2304      	movs	r3, #4
 8002136:	2102      	movs	r1, #2
 8002138:	f007 fc0b 	bl	8009952 <aci_gatt_add_char>
//  return BLE_STATUS_SUCCESS;
//// fail:
//   printf("Error while adding LED service.\n");
//   return BLE_STATUS_ERROR ;

}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bd90      	pop	{r4, r7, pc}
 8002144:	0800f9a8 	.word	0x0800f9a8
 8002148:	20001d44 	.word	0x20001d44
 800214c:	20001d46 	.word	0x20001d46
 8002150:	20001d48 	.word	0x20001d48

08002154 <Send_Action>:

  aci_gatt_update_char_value(AccServiceHandle, AccCharHandle, 0, 6, notification);
}

void Send_Action(char action[], uint8_t len)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af02      	add	r7, sp, #8
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
  //	return;
  aci_gatt_update_char_value(AccServiceHandle, AccCharHandle, 0, len, action);
 8002160:	4b07      	ldr	r3, [pc, #28]	@ (8002180 <Send_Action+0x2c>)
 8002162:	8818      	ldrh	r0, [r3, #0]
 8002164:	4b07      	ldr	r3, [pc, #28]	@ (8002184 <Send_Action+0x30>)
 8002166:	8819      	ldrh	r1, [r3, #0]
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	4613      	mov	r3, r2
 8002170:	2200      	movs	r2, #0
 8002172:	f007 fcb9 	bl	8009ae8 <aci_gatt_update_char_value>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20001d44 	.word	0x20001d44
 8002184:	20001d46 	.word	0x20001d46

08002188 <Attribute_Modified_CB>:

void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	603a      	str	r2, [r7, #0]
 8002192:	80fb      	strh	r3, [r7, #6]
 8002194:	460b      	mov	r3, r1
 8002196:	717b      	strb	r3, [r7, #5]
  if (handle == SampleFreqCharHandle + 1) // +1 to reach the value handle
 8002198:	88fa      	ldrh	r2, [r7, #6]
 800219a:	4b15      	ldr	r3, [pc, #84]	@ (80021f0 <Attribute_Modified_CB+0x68>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	3301      	adds	r3, #1
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d121      	bne.n	80021e8 <Attribute_Modified_CB+0x60>
  {
    g_sample_rate = (uint32_t)(att_data[0] | (att_data[1] << 8) | (att_data[2] << 16) | (att_data[3] << 24));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	3301      	adds	r3, #1
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	431a      	orrs	r2, r3
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	3302      	adds	r3, #2
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	041b      	lsls	r3, r3, #16
 80021bc:	431a      	orrs	r2, r3
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	3303      	adds	r3, #3
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	061b      	lsls	r3, r3, #24
 80021c6:	4313      	orrs	r3, r2
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <Attribute_Modified_CB+0x6c>)
 80021cc:	601a      	str	r2, [r3, #0]

    if (g_sample_rate == 0)
 80021ce:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <Attribute_Modified_CB+0x6c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d102      	bne.n	80021dc <Attribute_Modified_CB+0x54>
      g_sample_rate = 1; // avoid divide-by-zero later
 80021d6:	4b07      	ldr	r3, [pc, #28]	@ (80021f4 <Attribute_Modified_CB+0x6c>)
 80021d8:	2201      	movs	r2, #1
 80021da:	601a      	str	r2, [r3, #0]
    printf("[BLE] Sample rate updated to: %lu\n", g_sample_rate);
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <Attribute_Modified_CB+0x6c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4619      	mov	r1, r3
 80021e2:	4805      	ldr	r0, [pc, #20]	@ (80021f8 <Attribute_Modified_CB+0x70>)
 80021e4:	f00b fa28 	bl	800d638 <iprintf>
  }
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20001d48 	.word	0x20001d48
 80021f4:	20000004 	.word	0x20000004
 80021f8:	0800f9b8 	.word	0x0800f9b8

080021fc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002204:	1d39      	adds	r1, r7, #4
 8002206:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800220a:	2201      	movs	r2, #1
 800220c:	4803      	ldr	r0, [pc, #12]	@ (800221c <__io_putchar+0x20>)
 800220e:	f006 f8bf 	bl	8008390 <HAL_UART_Transmit>
  return ch;
 8002212:	687b      	ldr	r3, [r7, #4]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	200006a0 	.word	0x200006a0

08002220 <main>:
 * @brief  The application entry point.
 * @retval int
 */

int main(void)
{
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b08e      	sub	sp, #56	@ 0x38
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002226:	f002 f837 	bl	8004298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800222a:	f000 f84d 	bl	80022c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800222e:	f000 f999 	bl	8002564 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8002232:	f000 f8ab 	bl	800238c <MX_DFSDM1_Init>
  // MX_I2C2_Init();
  MX_QUADSPI_Init();
 8002236:	f000 f8e1 	bl	80023fc <MX_QUADSPI_Init>
  MX_USART1_UART_Init();
 800223a:	f000 f905 	bl	8002448 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800223e:	f000 f933 	bl	80024a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002242:	f000 f961 	bl	8002508 <MX_USB_OTG_FS_PCD_Init>
  MX_BlueNRG_MS_Init();
 8002246:	f7fe fe95 	bl	8000f74 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 800224a:	f001 ffcd 	bl	80041e8 <BSP_ACCELERO_Init>
  Add_Acc_Service();
 800224e:	f7ff ff33 	bl	80020b8 <Add_Acc_Service>
  /* definition and creation of defaultTask */
  /*osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);*/

  /* definition and creation of myTaskBLE */
  osThreadStaticDef(myTaskBLE, StartTaskBLE, osPriorityNormal, 0, 512, myTaskBLEBuffer, &myTaskBLEControlBlock);
 8002252:	4b17      	ldr	r3, [pc, #92]	@ (80022b0 <main+0x90>)
 8002254:	f107 041c 	add.w	r4, r7, #28
 8002258:	461d      	mov	r5, r3
 800225a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800225c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800225e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002262:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTaskBLEHandle = osThreadCreate(osThread(myTaskBLE), NULL);
 8002266:	f107 031c 	add.w	r3, r7, #28
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f008 fa43 	bl	800a6f8 <osThreadCreate>
 8002272:	4603      	mov	r3, r0
 8002274:	4a0f      	ldr	r2, [pc, #60]	@ (80022b4 <main+0x94>)
 8002276:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTaskACC */
  osThreadStaticDef(myTaskACC, StartTaskACC, osPriorityNormal, 0, 512, myTaskACCBuffer, &myTaskACCControlBlock);
 8002278:	4b0f      	ldr	r3, [pc, #60]	@ (80022b8 <main+0x98>)
 800227a:	463c      	mov	r4, r7
 800227c:	461d      	mov	r5, r3
 800227e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002282:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002286:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTaskACCHandle = osThreadCreate(osThread(myTaskACC), NULL);
 800228a:	463b      	mov	r3, r7
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f008 fa32 	bl	800a6f8 <osThreadCreate>
 8002294:	4603      	mov	r3, r0
 8002296:	4a09      	ldr	r2, [pc, #36]	@ (80022bc <main+0x9c>)
 8002298:	6013      	str	r3, [r2, #0]


  CommandQueueHandle = osMessageCreate(osMessageQ(CommandQueue), NULL);
 800229a:	2100      	movs	r1, #0
 800229c:	4808      	ldr	r0, [pc, #32]	@ (80022c0 <main+0xa0>)
 800229e:	f008 fa8b 	bl	800a7b8 <osMessageCreate>
 80022a2:	4603      	mov	r3, r0
 80022a4:	4a07      	ldr	r2, [pc, #28]	@ (80022c4 <main+0xa4>)
 80022a6:	6013      	str	r3, [r2, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80022a8:	f008 fa1f 	bl	800a6ea <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <main+0x8c>
 80022b0:	0800f9e8 	.word	0x0800f9e8
 80022b4:	20000c94 	.word	0x20000c94
 80022b8:	0800fa10 	.word	0x0800fa10
 80022bc:	200014ec 	.word	0x200014ec
 80022c0:	0800fac4 	.word	0x0800fac4
 80022c4:	20001d54 	.word	0x20001d54

080022c8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b096      	sub	sp, #88	@ 0x58
 80022cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ce:	f107 0314 	add.w	r3, r7, #20
 80022d2:	2244      	movs	r2, #68	@ 0x44
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f00b fb18 	bl	800d90c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022dc:	463b      	mov	r3, r7
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	609a      	str	r2, [r3, #8]
 80022e6:	60da      	str	r2, [r3, #12]
 80022e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80022ee:	f003 fcdd 	bl	8005cac <HAL_PWREx_ControlVoltageScaling>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80022f8:	f000 fe9c 	bl	8003034 <Error_Handler>
  }

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 80022fc:	f003 fcb8 	bl	8005c70 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002300:	4b21      	ldr	r3, [pc, #132]	@ (8002388 <SystemClock_Config+0xc0>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002306:	4a20      	ldr	r2, [pc, #128]	@ (8002388 <SystemClock_Config+0xc0>)
 8002308:	f023 0318 	bic.w	r3, r3, #24
 800230c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 8002310:	2314      	movs	r3, #20
 8002312:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002314:	2301      	movs	r3, #1
 8002316:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002318:	2301      	movs	r3, #1
 800231a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002320:	2360      	movs	r3, #96	@ 0x60
 8002322:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002324:	2302      	movs	r3, #2
 8002326:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002328:	2301      	movs	r3, #1
 800232a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800232c:	2301      	movs	r3, #1
 800232e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002330:	2328      	movs	r3, #40	@ 0x28
 8002332:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002334:	2307      	movs	r3, #7
 8002336:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002338:	2302      	movs	r3, #2
 800233a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800233c:	2302      	movs	r3, #2
 800233e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	4618      	mov	r0, r3
 8002346:	f003 fdd3 	bl	8005ef0 <HAL_RCC_OscConfig>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002350:	f000 fe70 	bl	8003034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002354:	230f      	movs	r3, #15
 8002356:	603b      	str	r3, [r7, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002358:	2303      	movs	r3, #3
 800235a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002364:	2300      	movs	r3, #0
 8002366:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002368:	463b      	mov	r3, r7
 800236a:	2104      	movs	r1, #4
 800236c:	4618      	mov	r0, r3
 800236e:	f004 f99b 	bl	80066a8 <HAL_RCC_ClockConfig>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002378:	f000 fe5c 	bl	8003034 <Error_Handler>
  }

  /** Enable MSI Auto calibration
   */
  HAL_RCCEx_EnableMSIPLLMode();
 800237c:	f004 fed4 	bl	8007128 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002380:	bf00      	nop
 8002382:	3758      	adds	r7, #88	@ 0x58
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000

0800238c <MX_DFSDM1_Init>:
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8002390:	4b18      	ldr	r3, [pc, #96]	@ (80023f4 <MX_DFSDM1_Init+0x68>)
 8002392:	4a19      	ldr	r2, [pc, #100]	@ (80023f8 <MX_DFSDM1_Init+0x6c>)
 8002394:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8002396:	4b17      	ldr	r3, [pc, #92]	@ (80023f4 <MX_DFSDM1_Init+0x68>)
 8002398:	2201      	movs	r2, #1
 800239a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800239c:	4b15      	ldr	r3, [pc, #84]	@ (80023f4 <MX_DFSDM1_Init+0x68>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80023a2:	4b14      	ldr	r3, [pc, #80]	@ (80023f4 <MX_DFSDM1_Init+0x68>)
 80023a4:	2202      	movs	r2, #2
 80023a6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80023a8:	4b12      	ldr	r3, [pc, #72]	@ (80023f4 <MX_DFSDM1_Init+0x68>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80023ae:	4b11      	ldr	r3, [pc, #68]	@ (80023f4 <MX_DFSDM1_Init+0x68>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80023b4:	4b0f      	ldr	r3, [pc, #60]	@ (80023f4 <MX_DFSDM1_Init+0x68>)
 80023b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023ba:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80023bc:	4b0d      	ldr	r3, [pc, #52]	@ (80023f4 <MX_DFSDM1_Init+0x68>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80023c2:	4b0c      	ldr	r3, [pc, #48]	@ (80023f4 <MX_DFSDM1_Init+0x68>)
 80023c4:	2204      	movs	r2, #4
 80023c6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80023c8:	4b0a      	ldr	r3, [pc, #40]	@ (80023f4 <MX_DFSDM1_Init+0x68>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80023ce:	4b09      	ldr	r3, [pc, #36]	@ (80023f4 <MX_DFSDM1_Init+0x68>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80023d4:	4b07      	ldr	r3, [pc, #28]	@ (80023f4 <MX_DFSDM1_Init+0x68>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80023da:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <MX_DFSDM1_Init+0x68>)
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80023e0:	4804      	ldr	r0, [pc, #16]	@ (80023f4 <MX_DFSDM1_Init+0x68>)
 80023e2:	f002 f897 	bl	8004514 <HAL_DFSDM_ChannelInit>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80023ec:	f000 fe22 	bl	8003034 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000624 	.word	0x20000624
 80023f8:	40016020 	.word	0x40016020

080023fc <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002400:	4b0f      	ldr	r3, [pc, #60]	@ (8002440 <MX_QUADSPI_Init+0x44>)
 8002402:	4a10      	ldr	r2, [pc, #64]	@ (8002444 <MX_QUADSPI_Init+0x48>)
 8002404:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8002406:	4b0e      	ldr	r3, [pc, #56]	@ (8002440 <MX_QUADSPI_Init+0x44>)
 8002408:	2202      	movs	r2, #2
 800240a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800240c:	4b0c      	ldr	r3, [pc, #48]	@ (8002440 <MX_QUADSPI_Init+0x44>)
 800240e:	2204      	movs	r2, #4
 8002410:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002412:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <MX_QUADSPI_Init+0x44>)
 8002414:	2210      	movs	r2, #16
 8002416:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002418:	4b09      	ldr	r3, [pc, #36]	@ (8002440 <MX_QUADSPI_Init+0x44>)
 800241a:	2217      	movs	r2, #23
 800241c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800241e:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <MX_QUADSPI_Init+0x44>)
 8002420:	2200      	movs	r2, #0
 8002422:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002424:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <MX_QUADSPI_Init+0x44>)
 8002426:	2200      	movs	r2, #0
 8002428:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800242a:	4805      	ldr	r0, [pc, #20]	@ (8002440 <MX_QUADSPI_Init+0x44>)
 800242c:	f003 fca4 	bl	8005d78 <HAL_QSPI_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8002436:	f000 fdfd 	bl	8003034 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	2000065c 	.word	0x2000065c
 8002444:	a0001000 	.word	0xa0001000

08002448 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800244c:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <MX_USART1_UART_Init+0x58>)
 800244e:	4a15      	ldr	r2, [pc, #84]	@ (80024a4 <MX_USART1_UART_Init+0x5c>)
 8002450:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002452:	4b13      	ldr	r3, [pc, #76]	@ (80024a0 <MX_USART1_UART_Init+0x58>)
 8002454:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002458:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800245a:	4b11      	ldr	r3, [pc, #68]	@ (80024a0 <MX_USART1_UART_Init+0x58>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002460:	4b0f      	ldr	r3, [pc, #60]	@ (80024a0 <MX_USART1_UART_Init+0x58>)
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002466:	4b0e      	ldr	r3, [pc, #56]	@ (80024a0 <MX_USART1_UART_Init+0x58>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800246c:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <MX_USART1_UART_Init+0x58>)
 800246e:	220c      	movs	r2, #12
 8002470:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002472:	4b0b      	ldr	r3, [pc, #44]	@ (80024a0 <MX_USART1_UART_Init+0x58>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002478:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <MX_USART1_UART_Init+0x58>)
 800247a:	2200      	movs	r2, #0
 800247c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800247e:	4b08      	ldr	r3, [pc, #32]	@ (80024a0 <MX_USART1_UART_Init+0x58>)
 8002480:	2200      	movs	r2, #0
 8002482:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002484:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <MX_USART1_UART_Init+0x58>)
 8002486:	2200      	movs	r2, #0
 8002488:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800248a:	4805      	ldr	r0, [pc, #20]	@ (80024a0 <MX_USART1_UART_Init+0x58>)
 800248c:	f005 ff32 	bl	80082f4 <HAL_UART_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002496:	f000 fdcd 	bl	8003034 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200006a0 	.word	0x200006a0
 80024a4:	40013800 	.word	0x40013800

080024a8 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024ac:	4b14      	ldr	r3, [pc, #80]	@ (8002500 <MX_USART3_UART_Init+0x58>)
 80024ae:	4a15      	ldr	r2, [pc, #84]	@ (8002504 <MX_USART3_UART_Init+0x5c>)
 80024b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80024b2:	4b13      	ldr	r3, [pc, #76]	@ (8002500 <MX_USART3_UART_Init+0x58>)
 80024b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024ba:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <MX_USART3_UART_Init+0x58>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002500 <MX_USART3_UART_Init+0x58>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002500 <MX_USART3_UART_Init+0x58>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <MX_USART3_UART_Init+0x58>)
 80024ce:	220c      	movs	r2, #12
 80024d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <MX_USART3_UART_Init+0x58>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024d8:	4b09      	ldr	r3, [pc, #36]	@ (8002500 <MX_USART3_UART_Init+0x58>)
 80024da:	2200      	movs	r2, #0
 80024dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024de:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <MX_USART3_UART_Init+0x58>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024e4:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <MX_USART3_UART_Init+0x58>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024ea:	4805      	ldr	r0, [pc, #20]	@ (8002500 <MX_USART3_UART_Init+0x58>)
 80024ec:	f005 ff02 	bl	80082f4 <HAL_UART_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80024f6:	f000 fd9d 	bl	8003034 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000728 	.word	0x20000728
 8002504:	40004800 	.word	0x40004800

08002508 <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800250c:	4b14      	ldr	r3, [pc, #80]	@ (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800250e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002512:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002514:	4b12      	ldr	r3, [pc, #72]	@ (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002516:	2206      	movs	r2, #6
 8002518:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800251a:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800251c:	2202      	movs	r2, #2
 800251e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002520:	4b0f      	ldr	r3, [pc, #60]	@ (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002522:	2202      	movs	r2, #2
 8002524:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002526:	4b0e      	ldr	r3, [pc, #56]	@ (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002528:	2200      	movs	r2, #0
 800252a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800252c:	4b0c      	ldr	r3, [pc, #48]	@ (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800252e:	2200      	movs	r2, #0
 8002530:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002532:	4b0b      	ldr	r3, [pc, #44]	@ (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002534:	2200      	movs	r2, #0
 8002536:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8002538:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800253a:	2200      	movs	r2, #0
 800253c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800253e:	4b08      	ldr	r3, [pc, #32]	@ (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002540:	2200      	movs	r2, #0
 8002542:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002544:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002546:	2200      	movs	r2, #0
 8002548:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800254a:	4805      	ldr	r0, [pc, #20]	@ (8002560 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800254c:	f003 fa5d 	bl	8005a0a <HAL_PCD_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002556:	f000 fd6d 	bl	8003034 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	200007b0 	.word	0x200007b0

08002564 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	@ 0x28
 8002568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
 8002578:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800257a:	4bbd      	ldr	r3, [pc, #756]	@ (8002870 <MX_GPIO_Init+0x30c>)
 800257c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800257e:	4abc      	ldr	r2, [pc, #752]	@ (8002870 <MX_GPIO_Init+0x30c>)
 8002580:	f043 0310 	orr.w	r3, r3, #16
 8002584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002586:	4bba      	ldr	r3, [pc, #744]	@ (8002870 <MX_GPIO_Init+0x30c>)
 8002588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258a:	f003 0310 	and.w	r3, r3, #16
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002592:	4bb7      	ldr	r3, [pc, #732]	@ (8002870 <MX_GPIO_Init+0x30c>)
 8002594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002596:	4ab6      	ldr	r2, [pc, #728]	@ (8002870 <MX_GPIO_Init+0x30c>)
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800259e:	4bb4      	ldr	r3, [pc, #720]	@ (8002870 <MX_GPIO_Init+0x30c>)
 80025a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025aa:	4bb1      	ldr	r3, [pc, #708]	@ (8002870 <MX_GPIO_Init+0x30c>)
 80025ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ae:	4ab0      	ldr	r2, [pc, #704]	@ (8002870 <MX_GPIO_Init+0x30c>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025b6:	4bae      	ldr	r3, [pc, #696]	@ (8002870 <MX_GPIO_Init+0x30c>)
 80025b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c2:	4bab      	ldr	r3, [pc, #684]	@ (8002870 <MX_GPIO_Init+0x30c>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c6:	4aaa      	ldr	r2, [pc, #680]	@ (8002870 <MX_GPIO_Init+0x30c>)
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025ce:	4ba8      	ldr	r3, [pc, #672]	@ (8002870 <MX_GPIO_Init+0x30c>)
 80025d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025da:	4ba5      	ldr	r3, [pc, #660]	@ (8002870 <MX_GPIO_Init+0x30c>)
 80025dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025de:	4aa4      	ldr	r2, [pc, #656]	@ (8002870 <MX_GPIO_Init+0x30c>)
 80025e0:	f043 0308 	orr.w	r3, r3, #8
 80025e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025e6:	4ba2      	ldr	r3, [pc, #648]	@ (8002870 <MX_GPIO_Init+0x30c>)
 80025e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin | ISM43362_RST_Pin, GPIO_PIN_RESET);
 80025f2:	2200      	movs	r2, #0
 80025f4:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80025f8:	489e      	ldr	r0, [pc, #632]	@ (8002874 <MX_GPIO_Init+0x310>)
 80025fa:	f002 fbab 	bl	8004d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin, GPIO_PIN_RESET);
 80025fe:	2200      	movs	r2, #0
 8002600:	f248 1104 	movw	r1, #33028	@ 0x8104
 8002604:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002608:	f002 fba4 	bl	8004d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin | SPSGRF_915_SDN_Pin | ARD_D5_Pin, GPIO_PIN_RESET);
 800260c:	2200      	movs	r2, #0
 800260e:	f24b 0114 	movw	r1, #45076	@ 0xb014
 8002612:	4899      	ldr	r0, [pc, #612]	@ (8002878 <MX_GPIO_Init+0x314>)
 8002614:	f002 fb9e 	bl	8004d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin | PMOD_RESET_Pin | STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8002618:	2200      	movs	r2, #0
 800261a:	f241 0181 	movw	r1, #4225	@ 0x1081
 800261e:	4897      	ldr	r0, [pc, #604]	@ (800287c <MX_GPIO_Init+0x318>)
 8002620:	f002 fb98 	bl	8004d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002624:	2201      	movs	r2, #1
 8002626:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800262a:	4894      	ldr	r0, [pc, #592]	@ (800287c <MX_GPIO_Init+0x318>)
 800262c:	f002 fb92 	bl	8004d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002630:	2200      	movs	r2, #0
 8002632:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8002636:	4892      	ldr	r0, [pc, #584]	@ (8002880 <MX_GPIO_Init+0x31c>)
 8002638:	f002 fb8c 	bl	8004d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800263c:	2201      	movs	r2, #1
 800263e:	2120      	movs	r1, #32
 8002640:	488d      	ldr	r0, [pc, #564]	@ (8002878 <MX_GPIO_Init+0x314>)
 8002642:	f002 fb87 	bl	8004d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002646:	2201      	movs	r2, #1
 8002648:	2101      	movs	r1, #1
 800264a:	488a      	ldr	r0, [pc, #552]	@ (8002874 <MX_GPIO_Init+0x310>)
 800264c:	f002 fb82 	bl	8004d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin | ISM43362_RST_Pin | ISM43362_SPI3_CSN_Pin;
 8002650:	f240 1315 	movw	r3, #277	@ 0x115
 8002654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002656:	2301      	movs	r3, #1
 8002658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002662:	f107 0314 	add.w	r3, r7, #20
 8002666:	4619      	mov	r1, r3
 8002668:	4882      	ldr	r0, [pc, #520]	@ (8002874 <MX_GPIO_Init+0x310>)
 800266a:	f002 f8bd 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin | SPSGRF_915_GPIO3_EXTI5_Pin | SPBTLE_RF_IRQ_EXTI6_Pin | ISM43362_DRDY_EXTI1_Pin;
 800266e:	236a      	movs	r3, #106	@ 0x6a
 8002670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002672:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	4619      	mov	r1, r3
 8002682:	487c      	ldr	r0, [pc, #496]	@ (8002874 <MX_GPIO_Init+0x310>)
 8002684:	f002 f8b0 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin | ARD_A4_Pin | ARD_A3_Pin | ARD_A2_Pin | ARD_A1_Pin | ARD_A0_Pin;
 8002688:	233f      	movs	r3, #63	@ 0x3f
 800268a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800268c:	230b      	movs	r3, #11
 800268e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	4619      	mov	r1, r3
 800269a:	4879      	ldr	r0, [pc, #484]	@ (8002880 <MX_GPIO_Init+0x31c>)
 800269c:	f002 f8a4 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin | ARD_D0_Pin;
 80026a0:	2303      	movs	r3, #3
 80026a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80026b0:	2308      	movs	r3, #8
 80026b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4619      	mov	r1, r3
 80026ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026be:	f002 f893 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin;
 80026c2:	f248 1304 	movw	r3, #33028	@ 0x8104
 80026c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c8:	2301      	movs	r3, #1
 80026ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d0:	2300      	movs	r3, #0
 80026d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	4619      	mov	r1, r3
 80026da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026de:	f002 f883 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80026e2:	2308      	movs	r3, #8
 80026e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	2302      	movs	r3, #2
 80026e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ee:	2300      	movs	r3, #0
 80026f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026f2:	2301      	movs	r3, #1
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80026f6:	f107 0314 	add.w	r3, r7, #20
 80026fa:	4619      	mov	r1, r3
 80026fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002700:	f002 f872 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8002704:	2310      	movs	r3, #16
 8002706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002708:	230b      	movs	r3, #11
 800270a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	4619      	mov	r1, r3
 8002716:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800271a:	f002 f865 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin | ARD_D12_Pin | ARD_D11_Pin;
 800271e:	23e0      	movs	r3, #224	@ 0xe0
 8002720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	2302      	movs	r3, #2
 8002724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272a:	2303      	movs	r3, #3
 800272c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800272e:	2305      	movs	r3, #5
 8002730:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002732:	f107 0314 	add.w	r3, r7, #20
 8002736:	4619      	mov	r1, r3
 8002738:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800273c:	f002 f854 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002740:	2301      	movs	r3, #1
 8002742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002744:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800274e:	f107 0314 	add.w	r3, r7, #20
 8002752:	4619      	mov	r1, r3
 8002754:	4848      	ldr	r0, [pc, #288]	@ (8002878 <MX_GPIO_Init+0x314>)
 8002756:	f002 f847 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800275a:	2302      	movs	r3, #2
 800275c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800275e:	230b      	movs	r3, #11
 8002760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002766:	f107 0314 	add.w	r3, r7, #20
 800276a:	4619      	mov	r1, r3
 800276c:	4842      	ldr	r0, [pc, #264]	@ (8002878 <MX_GPIO_Init+0x314>)
 800276e:	f002 f83b 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin | SPSGRF_915_SDN_Pin | ARD_D5_Pin | SPSGRF_915_SPI3_CSN_Pin;
 8002772:	f24b 0334 	movw	r3, #45108	@ 0xb034
 8002776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002778:	2301      	movs	r3, #1
 800277a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	2300      	movs	r3, #0
 8002782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002784:	f107 0314 	add.w	r3, r7, #20
 8002788:	4619      	mov	r1, r3
 800278a:	483b      	ldr	r0, [pc, #236]	@ (8002878 <MX_GPIO_Init+0x314>)
 800278c:	f002 f82c 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin | LSM6DSL_INT1_EXTI11_Pin | ARD_D2_Pin | HTS221_DRDY_EXTI15_Pin | PMOD_IRQ_EXTI12_Pin;
 8002790:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8002794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002796:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800279a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	4619      	mov	r1, r3
 80027a6:	4835      	ldr	r0, [pc, #212]	@ (800287c <MX_GPIO_Init+0x318>)
 80027a8:	f002 f81e 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | SPBTLE_RF_SPI3_CSN_Pin | PMOD_RESET_Pin | STSAFE_A100_RESET_Pin;
 80027ac:	f243 0381 	movw	r3, #12417	@ 0x3081
 80027b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b2:	2301      	movs	r3, #1
 80027b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ba:	2300      	movs	r3, #0
 80027bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027be:	f107 0314 	add.w	r3, r7, #20
 80027c2:	4619      	mov	r1, r3
 80027c4:	482d      	ldr	r0, [pc, #180]	@ (800287c <MX_GPIO_Init+0x318>)
 80027c6:	f002 f80f 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin;
 80027ca:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80027ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d0:	2301      	movs	r3, #1
 80027d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d8:	2300      	movs	r3, #0
 80027da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	4619      	mov	r1, r3
 80027e2:	4827      	ldr	r0, [pc, #156]	@ (8002880 <MX_GPIO_Init+0x31c>)
 80027e4:	f002 f800 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin | LSM3MDL_DRDY_EXTI8_Pin;
 80027e8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80027ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	4619      	mov	r1, r3
 80027fe:	4820      	ldr	r0, [pc, #128]	@ (8002880 <MX_GPIO_Init+0x31c>)
 8002800:	f001 fff2 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8002804:	2302      	movs	r3, #2
 8002806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002810:	2303      	movs	r3, #3
 8002812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002814:	2305      	movs	r3, #5
 8002816:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	4619      	mov	r1, r3
 800281e:	4817      	ldr	r0, [pc, #92]	@ (800287c <MX_GPIO_Init+0x318>)
 8002820:	f001 ffe2 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin | PMOD_UART2_RTS_Pin | PMOD_UART2_TX_Pin | PMOD_UART2_RX_Pin;
 8002824:	2378      	movs	r3, #120	@ 0x78
 8002826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002830:	2303      	movs	r3, #3
 8002832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002834:	2307      	movs	r3, #7
 8002836:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	4619      	mov	r1, r3
 800283e:	480f      	ldr	r0, [pc, #60]	@ (800287c <MX_GPIO_Init+0x318>)
 8002840:	f001 ffd2 	bl	80047e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin | ARD_D14_Pin;
 8002844:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800284a:	2312      	movs	r3, #18
 800284c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002852:	2303      	movs	r3, #3
 8002854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002856:	2304      	movs	r3, #4
 8002858:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285a:	f107 0314 	add.w	r3, r7, #20
 800285e:	4619      	mov	r1, r3
 8002860:	4805      	ldr	r0, [pc, #20]	@ (8002878 <MX_GPIO_Init+0x314>)
 8002862:	f001 ffc1 	bl	80047e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2105      	movs	r1, #5
 800286a:	2017      	movs	r0, #23
 800286c:	e00a      	b.n	8002884 <MX_GPIO_Init+0x320>
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
 8002874:	48001000 	.word	0x48001000
 8002878:	48000400 	.word	0x48000400
 800287c:	48000c00 	.word	0x48000c00
 8002880:	48000800 	.word	0x48000800
 8002884:	f001 fe1c 	bl	80044c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002888:	2017      	movs	r0, #23
 800288a:	f001 fe35 	bl	80044f8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800288e:	2200      	movs	r2, #0
 8002890:	2105      	movs	r1, #5
 8002892:	2028      	movs	r0, #40	@ 0x28
 8002894:	f001 fe14 	bl	80044c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002898:	2028      	movs	r0, #40	@ 0x28
 800289a:	f001 fe2d 	bl	80044f8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800289e:	bf00      	nop
 80028a0:	3728      	adds	r7, #40	@ 0x28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop

080028a8 <StartTaskBLE>:
/* USER CODE END Header_StartTaskBLE */

char *command;
uint8_t command_len;
void StartTaskBLE(void const *argument)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
//	    	    printf("Failed to start advertising: 0x%02X\n", ret);
//	    	} else {
//	    	    printf("Advertising started.\n");
//	    	}
  /* Infinite loop */
	command = "";
 80028b0:	4b0f      	ldr	r3, [pc, #60]	@ (80028f0 <StartTaskBLE+0x48>)
 80028b2:	4a10      	ldr	r2, [pc, #64]	@ (80028f4 <StartTaskBLE+0x4c>)
 80028b4:	601a      	str	r2, [r3, #0]
	command_len = 0;
 80028b6:	4b10      	ldr	r3, [pc, #64]	@ (80028f8 <StartTaskBLE+0x50>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
  for (;;)
  {
    MX_BlueNRG_MS_Process();
 80028bc:	f7fe fc06 	bl	80010cc <MX_BlueNRG_MS_Process>
//    printf("BLE Task for loop \n");
//    osDelay(10); /// small delay
    osEvent evt = osMessageGet(CommandQueueHandle, 10);  // wait up to 10ms
 80028c0:	4b0e      	ldr	r3, [pc, #56]	@ (80028fc <StartTaskBLE+0x54>)
 80028c2:	6819      	ldr	r1, [r3, #0]
 80028c4:	f107 0308 	add.w	r3, r7, #8
 80028c8:	220a      	movs	r2, #10
 80028ca:	4618      	mov	r0, r3
 80028cc:	f007 ff9c 	bl	800a808 <osMessageGet>
    if (evt.status == osEventMessage) {
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b10      	cmp	r3, #16
 80028d4:	d1f2      	bne.n	80028bc <StartTaskBLE+0x14>
        const char* cmd = (const char*)evt.value.v;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	617b      	str	r3, [r7, #20]
        Send_Action(cmd, strlen(cmd));
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f7fd fcc8 	bl	8000270 <strlen>
 80028e0:	4603      	mov	r3, r0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	4619      	mov	r1, r3
 80028e6:	6978      	ldr	r0, [r7, #20]
 80028e8:	f7ff fc34 	bl	8002154 <Send_Action>
  {
 80028ec:	e7e6      	b.n	80028bc <StartTaskBLE+0x14>
 80028ee:	bf00      	nop
 80028f0:	20001db8 	.word	0x20001db8
 80028f4:	0800fa44 	.word	0x0800fa44
 80028f8:	20001dbc 	.word	0x20001dbc
 80028fc:	20001d54 	.word	0x20001d54

08002900 <StartTaskACC>:
// Format: {b0, b1, b2, a1, a2}



void StartTaskACC(void const *argument)
{
 8002900:	b5b0      	push	{r4, r5, r7, lr}
 8002902:	b0b8      	sub	sp, #224	@ 0xe0
 8002904:	af02      	add	r7, sp, #8
 8002906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskACC */
  const TickType_t ten_seconds = pdMS_TO_TICKS(10000);
 8002908:	f242 7310 	movw	r3, #10000	@ 0x2710
 800290c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  const TickType_t three_seconds = pdMS_TO_TICKS(3000);
 8002910:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002914:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t shake_count = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  uint8_t shake_state = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  uint32_t start_time, cd_start_time;
  uint8_t cooldown = false;
 8002924:	2300      	movs	r3, #0
 8002926:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

  const float32_t biquadBPF_Coeffs[5] = {
 800292a:	4bcf      	ldr	r3, [pc, #828]	@ (8002c68 <StartTaskACC+0x368>)
 800292c:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8002930:	461d      	mov	r5, r3
 8002932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002936:	682b      	ldr	r3, [r5, #0]
 8002938:	6023      	str	r3, [r4, #0]
       0.0675f,  0.0000f, -0.0675f,  -1.8407f,  0.8650f
  };
  float32_t bpfState[4]; // 4 floats per biquad stage
  arm_biquad_casd_df1_inst_f32 bpf;
  arm_biquad_cascade_df1_init_f32(&bpf, 1, biquadBPF_Coeffs, bpfState);
 800293a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800293e:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8002942:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 8002946:	2101      	movs	r1, #1
 8002948:	f00a f8e6 	bl	800cb18 <arm_biquad_cascade_df1_init_f32>



//  arm_fir_init_f32(&Sx, NUM_TAPS, firCoeffs, firStateX, BLOCK_SIZE);
  arm_fir_init_f32(&Sx, NUM_TAPS, firCoeffs, firStateX, BLOCK_SIZE);
 800294c:	2301      	movs	r3, #1
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	4bc6      	ldr	r3, [pc, #792]	@ (8002c6c <StartTaskACC+0x36c>)
 8002952:	4ac7      	ldr	r2, [pc, #796]	@ (8002c70 <StartTaskACC+0x370>)
 8002954:	2105      	movs	r1, #5
 8002956:	48c7      	ldr	r0, [pc, #796]	@ (8002c74 <StartTaskACC+0x374>)
 8002958:	f009 fe4e 	bl	800c5f8 <arm_fir_init_f32>
  arm_fir_init_f32(&Sy, NUM_TAPS, firCoeffs, firStateY, BLOCK_SIZE);
 800295c:	2301      	movs	r3, #1
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	4bc5      	ldr	r3, [pc, #788]	@ (8002c78 <StartTaskACC+0x378>)
 8002962:	4ac3      	ldr	r2, [pc, #780]	@ (8002c70 <StartTaskACC+0x370>)
 8002964:	2105      	movs	r1, #5
 8002966:	48c5      	ldr	r0, [pc, #788]	@ (8002c7c <StartTaskACC+0x37c>)
 8002968:	f009 fe46 	bl	800c5f8 <arm_fir_init_f32>
  arm_fir_init_f32(&Sz, NUM_TAPS, firCoeffs, firStateZ, BLOCK_SIZE);
 800296c:	2301      	movs	r3, #1
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	4bc3      	ldr	r3, [pc, #780]	@ (8002c80 <StartTaskACC+0x380>)
 8002972:	4abf      	ldr	r2, [pc, #764]	@ (8002c70 <StartTaskACC+0x370>)
 8002974:	2105      	movs	r1, #5
 8002976:	48c3      	ldr	r0, [pc, #780]	@ (8002c84 <StartTaskACC+0x384>)
 8002978:	f009 fe3e 	bl	800c5f8 <arm_fir_init_f32>

  float32_t noisy_input, filtered_output;
  float32_t angle = 0.0f;
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  float32_t step = 2 * PI / 50;  // ~1Hz sine wave if loop runs at 10Hz
 8002984:	4bc0      	ldr	r3, [pc, #768]	@ (8002c88 <StartTaskACC+0x388>)
 8002986:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  int counter = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  int16_t x_max = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
  int16_t x_min = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8

  int16_t z_max = 0, z_min = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
 80029a2:	2300      	movs	r3, #0
 80029a4:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4

  int8_t x_state= 0,z_state =0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
 80029ae:	2300      	movs	r3, #0
 80029b0:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2
  for (;;)
  {
	osDelay(10);
 80029b4:	200a      	movs	r0, #10
 80029b6:	f007 feeb 	bl	800a790 <osDelay>
////    osDelay(10);
//    continue;



    BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 80029ba:	48b4      	ldr	r0, [pc, #720]	@ (8002c8c <StartTaskACC+0x38c>)
 80029bc:	f001 fc54 	bl	8004268 <BSP_ACCELERO_AccGetXYZ>
//	float32_t zout;




	float32_t xin = (float32_t)pDataXYZ[0];
 80029c0:	4bb2      	ldr	r3, [pc, #712]	@ (8002c8c <StartTaskACC+0x38c>)
 80029c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ce:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	float32_t yin = (float32_t)pDataXYZ[1];
 80029d2:	4bae      	ldr	r3, [pc, #696]	@ (8002c8c <StartTaskACC+0x38c>)
 80029d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029d8:	ee07 3a90 	vmov	s15, r3
 80029dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	float32_t zin = (float32_t)pDataXYZ[2];
 80029e4:	4ba9      	ldr	r3, [pc, #676]	@ (8002c8c <StartTaskACC+0x38c>)
 80029e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029ea:	ee07 3a90 	vmov	s15, r3
 80029ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029f2:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

//	printf("pre x=%.2f y=%.2f z=%.2f\r\n", xin,yin,zin);


	arm_fir_f32(&Sx, &xin, &xout, BLOCK_SIZE);
 80029f6:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80029fa:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80029fe:	2301      	movs	r3, #1
 8002a00:	489c      	ldr	r0, [pc, #624]	@ (8002c74 <StartTaskACC+0x374>)
 8002a02:	f009 fe09 	bl	800c618 <arm_fir_f32>
	arm_fir_f32(&Sy, &yin, &yout, BLOCK_SIZE);
 8002a06:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8002a0a:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8002a0e:	2301      	movs	r3, #1
 8002a10:	489a      	ldr	r0, [pc, #616]	@ (8002c7c <StartTaskACC+0x37c>)
 8002a12:	f009 fe01 	bl	800c618 <arm_fir_f32>
	arm_fir_f32(&Sz, &zin, &zout, BLOCK_SIZE);
 8002a16:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8002a1a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8002a1e:	2301      	movs	r3, #1
 8002a20:	4898      	ldr	r0, [pc, #608]	@ (8002c84 <StartTaskACC+0x384>)
 8002a22:	f009 fdf9 	bl	800c618 <arm_fir_f32>
//	printf("Filtered x=%.2f y=%.2f z=%.2f\r\n", xout, yout, zout);
//
//
//
////	continue;
	int16_t x = (int16_t)xout;
 8002a26:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002a2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a2e:	ee17 3a90 	vmov	r3, s15
 8002a32:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
	int16_t y = (int16_t)yout;
 8002a36:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8002a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a3e:	ee17 3a90 	vmov	r3, s15
 8002a42:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
	int16_t z = (int16_t)zout;
 8002a46:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002a4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a4e:	ee17 3a90 	vmov	r3, s15
 8002a52:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
	z -= g;
 8002a56:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8002a5a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
//	}

//	printf("converted x=%d, y=%d, z=%d\n", x,y,z);
//	continue;

    switch (shake_state){
 8002a64:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d05c      	beq.n	8002b26 <StartTaskACC+0x226>
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	f300 808e 	bgt.w	8002b8e <StartTaskACC+0x28e>
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <StartTaskACC+0x17c>
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d026      	beq.n	8002ac8 <StartTaskACC+0x1c8>
 8002a7a:	e088      	b.n	8002b8e <StartTaskACC+0x28e>
    case 0:
    	shake_count = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    	if (x > 500){
 8002a82:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8002a86:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002a8a:	dd0b      	ble.n	8002aa4 <StartTaskACC+0x1a4>
    		start_time = HAL_GetTick();
 8002a8c:	f001 fc30 	bl	80042f0 <HAL_GetTick>
 8002a90:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    		shake_state = 1;
 8002a94:	2301      	movs	r3, #1
 8002a96:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    		shake_count++;
 8002a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    	}
    	if (x < -500){
 8002aa4:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8002aa8:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 8002aac:	da6a      	bge.n	8002b84 <StartTaskACC+0x284>
    		start_time = HAL_GetTick();
 8002aae:	f001 fc1f 	bl	80042f0 <HAL_GetTick>
 8002ab2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    		shake_state = 2;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    		shake_count++;
 8002abc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    	}
//    	start_time = sHAL_GetTick();
//    	printf("x=%d\n", x);
    	break;
 8002ac6:	e05d      	b.n	8002b84 <StartTaskACC+0x284>
    case 1:
    	if (x < -500){
 8002ac8:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8002acc:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 8002ad0:	da16      	bge.n	8002b00 <StartTaskACC+0x200>
//			start_time = HAL_GetTick();
			shake_state = 2;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
			shake_count++;
 8002ad8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002adc:	3301      	adds	r3, #1
 8002ade:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			if (shake_count > 10){
 8002ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ae6:	2b0a      	cmp	r3, #10
 8002ae8:	d94e      	bls.n	8002b88 <StartTaskACC+0x288>
				printf("shake!\n");
 8002aea:	4869      	ldr	r0, [pc, #420]	@ (8002c90 <StartTaskACC+0x390>)
 8002aec:	f00a fe0c 	bl	800d708 <puts>
				Send_Action("shake", 5);
 8002af0:	2105      	movs	r1, #5
 8002af2:	4868      	ldr	r0, [pc, #416]	@ (8002c94 <StartTaskACC+0x394>)
 8002af4:	f7ff fb2e 	bl	8002154 <Send_Action>
				shake_state = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
			}
		}else if (HAL_GetTick() - start_time > 3000){
			printf("no shake but = %d\n", shake_count);
			shake_state = 0;
		}
		break;
 8002afe:	e043      	b.n	8002b88 <StartTaskACC+0x288>
		}else if (HAL_GetTick() - start_time > 3000){
 8002b00:	f001 fbf6 	bl	80042f0 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d939      	bls.n	8002b88 <StartTaskACC+0x288>
			printf("no shake but = %d\n", shake_count);
 8002b14:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8002b18:	485f      	ldr	r0, [pc, #380]	@ (8002c98 <StartTaskACC+0x398>)
 8002b1a:	f00a fd8d 	bl	800d638 <iprintf>
			shake_state = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
		break;
 8002b24:	e030      	b.n	8002b88 <StartTaskACC+0x288>
    case 2:
      	if (x > 500){
 8002b26:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8002b2a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002b2e:	dd16      	ble.n	8002b5e <StartTaskACC+0x25e>
//  			start_time = HAL_GetTick();
  			shake_state = 1;
 8002b30:	2301      	movs	r3, #1
 8002b32:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  			shake_count++;
 8002b36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  			if (shake_count > 10){
 8002b40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b44:	2b0a      	cmp	r3, #10
 8002b46:	d921      	bls.n	8002b8c <StartTaskACC+0x28c>
  				printf("shake!\n");
 8002b48:	4851      	ldr	r0, [pc, #324]	@ (8002c90 <StartTaskACC+0x390>)
 8002b4a:	f00a fddd 	bl	800d708 <puts>
				Send_Action("shake", 5);
 8002b4e:	2105      	movs	r1, #5
 8002b50:	4850      	ldr	r0, [pc, #320]	@ (8002c94 <StartTaskACC+0x394>)
 8002b52:	f7ff faff 	bl	8002154 <Send_Action>
				shake_state = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
			}
  		}else if (HAL_GetTick() - start_time > 3000){
			printf("no shake but = %d\n", shake_count);
  			shake_state = 0;
  		}
  		break;
 8002b5c:	e016      	b.n	8002b8c <StartTaskACC+0x28c>
  		}else if (HAL_GetTick() - start_time > 3000){
 8002b5e:	f001 fbc7 	bl	80042f0 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d90c      	bls.n	8002b8c <StartTaskACC+0x28c>
			printf("no shake but = %d\n", shake_count);
 8002b72:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8002b76:	4848      	ldr	r0, [pc, #288]	@ (8002c98 <StartTaskACC+0x398>)
 8002b78:	f00a fd5e 	bl	800d638 <iprintf>
  			shake_state = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  		break;
 8002b82:	e003      	b.n	8002b8c <StartTaskACC+0x28c>
    	break;
 8002b84:	bf00      	nop
 8002b86:	e002      	b.n	8002b8e <StartTaskACC+0x28e>
		break;
 8002b88:	bf00      	nop
 8002b8a:	e000      	b.n	8002b8e <StartTaskACC+0x28e>
  		break;
 8002b8c:	bf00      	nop
//    	}else{
//    		continue;
//    	}
//    }
//    printf("x_state = %d\n", x_state);
    switch (x_state){
 8002b8e:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
 8002b92:	3303      	adds	r3, #3
 8002b94:	2b06      	cmp	r3, #6
 8002b96:	f200 8121 	bhi.w	8002ddc <StartTaskACC+0x4dc>
 8002b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba0 <StartTaskACC+0x2a0>)
 8002b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba0:	08002da3 	.word	0x08002da3
 8002ba4:	08002d7b 	.word	0x08002d7b
 8002ba8:	08002d37 	.word	0x08002d37
 8002bac:	08002bbd 	.word	0x08002bbd
 8002bb0:	08002ca9 	.word	0x08002ca9
 8002bb4:	08002cef 	.word	0x08002cef
 8002bb8:	08002d17 	.word	0x08002d17
    case 0: //no move
    	if (x_max > x_threshold){
 8002bbc:	f9b7 30ca 	ldrsh.w	r3, [r7, #202]	@ 0xca
 8002bc0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	dd14      	ble.n	8002bf2 <StartTaskACC+0x2f2>
    		char msgr[20];
    		sprintf(msgr, "r%d",x_max);
 8002bc8:	f9b7 20ca 	ldrsh.w	r2, [r7, #202]	@ 0xca
 8002bcc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002bd0:	4932      	ldr	r1, [pc, #200]	@ (8002c9c <StartTaskACC+0x39c>)
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f00a fda0 	bl	800d718 <siprintf>
			Send_Action(msgr,strlen(msgr));
 8002bd8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fd fb47 	bl	8000270 <strlen>
 8002be2:	4603      	mov	r3, r0
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fab1 	bl	8002154 <Send_Action>
		}
    	if (x_min < -x_threshold){
 8002bf2:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	@ 0xc8
 8002bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca0 <StartTaskACC+0x3a0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	da15      	bge.n	8002c28 <StartTaskACC+0x328>
    		char msgl[20];
			sprintf(msgl, "l%d",-x_min);
 8002bfc:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	@ 0xc8
 8002c00:	425a      	negs	r2, r3
 8002c02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c06:	4927      	ldr	r1, [pc, #156]	@ (8002ca4 <StartTaskACC+0x3a4>)
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f00a fd85 	bl	800d718 <siprintf>
			Send_Action(msgl,strlen(msgl));
 8002c0e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fd fb2c 	bl	8000270 <strlen>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fa96 	bl	8002154 <Send_Action>
//			Send_Action("left",4);
		}
    	x_max = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
    	x_min = 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
    	if (x > 300){
 8002c34:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8002c38:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002c3c:	dd06      	ble.n	8002c4c <StartTaskACC+0x34c>
    		x_max = x;
 8002c3e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8002c42:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
    		x_state = 1;
 8002c46:	2301      	movs	r3, #1
 8002c48:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
//    		printf("x state swtiched to %d \n", x_state);
    	}
    	if (x < -300){
 8002c4c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8002c50:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8002c54:	f280 80b5 	bge.w	8002dc2 <StartTaskACC+0x4c2>
    		x_min = x;
 8002c58:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8002c5c:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
    		x_state = -1;
 8002c60:	23ff      	movs	r3, #255	@ 0xff
 8002c62:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
//    		printf("x state swtiched to %d \n", x_state);
    	}
    	break;
 8002c66:	e0ac      	b.n	8002dc2 <StartTaskACC+0x4c2>
 8002c68:	0800faa8 	.word	0x0800faa8
 8002c6c:	20001d7c 	.word	0x20001d7c
 8002c70:	20000008 	.word	0x20000008
 8002c74:	20001d58 	.word	0x20001d58
 8002c78:	20001d90 	.word	0x20001d90
 8002c7c:	20001d64 	.word	0x20001d64
 8002c80:	20001da4 	.word	0x20001da4
 8002c84:	20001d70 	.word	0x20001d70
 8002c88:	3e00adfd 	.word	0x3e00adfd
 8002c8c:	20001d4c 	.word	0x20001d4c
 8002c90:	0800fa48 	.word	0x0800fa48
 8002c94:	0800fa50 	.word	0x0800fa50
 8002c98:	0800fa58 	.word	0x0800fa58
 8002c9c:	0800fa6c 	.word	0x0800fa6c
 8002ca0:	fffffd12 	.word	0xfffffd12
 8002ca4:	0800fa70 	.word	0x0800fa70
    case 1:
    	if (x > x_max){
 8002ca8:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	@ 0xa6
 8002cac:	f9b7 30ca 	ldrsh.w	r3, [r7, #202]	@ 0xca
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	dd03      	ble.n	8002cbc <StartTaskACC+0x3bc>
    		x_max = x;
 8002cb4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8002cb8:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
    	}
    	if (x < 300){
 8002cbc:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8002cc0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002cc4:	da7f      	bge.n	8002dc6 <StartTaskACC+0x4c6>
    		x_state = 2;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
//    		printf("x state swtiched to %d \n", x_state);
    		if (x_max > x_threshold){
 8002ccc:	f9b7 30ca 	ldrsh.w	r3, [r7, #202]	@ 0xca
 8002cd0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	dd05      	ble.n	8002ce4 <StartTaskACC+0x3e4>
        		printf("right: %d\n",x_max);
 8002cd8:	f9b7 30ca 	ldrsh.w	r3, [r7, #202]	@ 0xca
 8002cdc:	4619      	mov	r1, r3
 8002cde:	48c5      	ldr	r0, [pc, #788]	@ (8002ff4 <StartTaskACC+0x6f4>)
 8002ce0:	f00a fcaa 	bl	800d638 <iprintf>
////        		command_len = 5;
//        		const char* cmd = "right";
//        		osMessagePut(CommandQueueHandle, (uint32_t)cmd, 0);
    		}

    		x_min = x;
 8002ce4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8002ce8:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
    	}
    	break;
 8002cec:	e06b      	b.n	8002dc6 <StartTaskACC+0x4c6>
    case 2:
    	if (x < x_min){
 8002cee:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	@ 0xa6
 8002cf2:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	@ 0xc8
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	da04      	bge.n	8002d04 <StartTaskACC+0x404>
    		x_min = x;
 8002cfa:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8002cfe:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
    	}else if (x > -300){
    		x_state = 3;
//    		printf("x state swtiched to %d \n", x_state);
    	}
    	break;
 8002d02:	e062      	b.n	8002dca <StartTaskACC+0x4ca>
    	}else if (x > -300){
 8002d04:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8002d08:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8002d0c:	dd5d      	ble.n	8002dca <StartTaskACC+0x4ca>
    		x_state = 3;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    	break;
 8002d14:	e059      	b.n	8002dca <StartTaskACC+0x4ca>
    case 3:
    	x_min = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
    	if (x < 100 || x > -100){
 8002d1c:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8002d20:	2b63      	cmp	r3, #99	@ 0x63
 8002d22:	dd04      	ble.n	8002d2e <StartTaskACC+0x42e>
 8002d24:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8002d28:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8002d2c:	db4f      	blt.n	8002dce <StartTaskACC+0x4ce>
    		x_state = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3


//    		printf("x state swtiched to %d \n", x_state);
    	}
    	break;
 8002d34:	e04b      	b.n	8002dce <StartTaskACC+0x4ce>
   case -1:
       	if (x < x_min){
 8002d36:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	@ 0xa6
 8002d3a:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	@ 0xc8
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	da03      	bge.n	8002d4a <StartTaskACC+0x44a>
       		x_min = x;
 8002d42:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8002d46:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
       	}
       	if (x > -300){
 8002d4a:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8002d4e:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8002d52:	dd3e      	ble.n	8002dd2 <StartTaskACC+0x4d2>
       		x_state = -2;
 8002d54:	23fe      	movs	r3, #254	@ 0xfe
 8002d56:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
//       		printf("x state swtiched to %d \n", x_state);
       		if (x_min < -x_threshold){
 8002d5a:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	@ 0xc8
 8002d5e:	4aa6      	ldr	r2, [pc, #664]	@ (8002ff8 <StartTaskACC+0x6f8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	da05      	bge.n	8002d70 <StartTaskACC+0x470>
       			printf("left: %d\n",x_min);
 8002d64:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	@ 0xc8
 8002d68:	4619      	mov	r1, r3
 8002d6a:	48a4      	ldr	r0, [pc, #656]	@ (8002ffc <StartTaskACC+0x6fc>)
 8002d6c:	f00a fc64 	bl	800d638 <iprintf>
//				const char* cmd = "left";
//				osMessagePut(CommandQueueHandle, (uint32_t)cmd, 0);
			}
//
//       		Send_Action("left",4);
       		x_max = x;
 8002d70:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8002d74:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
       	}
       	break;
 8002d78:	e02b      	b.n	8002dd2 <StartTaskACC+0x4d2>
   case -2:
       	if (x > x_max){
 8002d7a:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	@ 0xa6
 8002d7e:	f9b7 30ca 	ldrsh.w	r3, [r7, #202]	@ 0xca
 8002d82:	429a      	cmp	r2, r3
 8002d84:	dd04      	ble.n	8002d90 <StartTaskACC+0x490>
       		x_max = x;
 8002d86:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8002d8a:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
       	}else if (x < 300){
       		x_state = -3;
//       		printf("x state swtiched to %d \n", x_state);
       	}
       	break;
 8002d8e:	e022      	b.n	8002dd6 <StartTaskACC+0x4d6>
       	}else if (x < 300){
 8002d90:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8002d94:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002d98:	da1d      	bge.n	8002dd6 <StartTaskACC+0x4d6>
       		x_state = -3;
 8002d9a:	23fd      	movs	r3, #253	@ 0xfd
 8002d9c:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
       	break;
 8002da0:	e019      	b.n	8002dd6 <StartTaskACC+0x4d6>
   case -3:
	   	x_max = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
       	if (x < 100 || x > -100){
 8002da8:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8002dac:	2b63      	cmp	r3, #99	@ 0x63
 8002dae:	dd04      	ble.n	8002dba <StartTaskACC+0x4ba>
 8002db0:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 8002db4:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8002db8:	db0f      	blt.n	8002dda <StartTaskACC+0x4da>
       		x_state = 0;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

//       		printf("x state swtiched to %d \n", x_state);
       	}
       	break;
 8002dc0:	e00b      	b.n	8002dda <StartTaskACC+0x4da>
    	break;
 8002dc2:	bf00      	nop
 8002dc4:	e00a      	b.n	8002ddc <StartTaskACC+0x4dc>
    	break;
 8002dc6:	bf00      	nop
 8002dc8:	e008      	b.n	8002ddc <StartTaskACC+0x4dc>
    	break;
 8002dca:	bf00      	nop
 8002dcc:	e006      	b.n	8002ddc <StartTaskACC+0x4dc>
    	break;
 8002dce:	bf00      	nop
 8002dd0:	e004      	b.n	8002ddc <StartTaskACC+0x4dc>
       	break;
 8002dd2:	bf00      	nop
 8002dd4:	e002      	b.n	8002ddc <StartTaskACC+0x4dc>
       	break;
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <StartTaskACC+0x4dc>
       	break;
 8002dda:	bf00      	nop
    }



    switch (z_state){
 8002ddc:	f997 30c2 	ldrsb.w	r3, [r7, #194]	@ 0xc2
 8002de0:	3303      	adds	r3, #3
 8002de2:	2b06      	cmp	r3, #6
 8002de4:	f200 8103 	bhi.w	8002fee <StartTaskACC+0x6ee>
 8002de8:	a201      	add	r2, pc, #4	@ (adr r2, 8002df0 <StartTaskACC+0x4f0>)
 8002dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dee:	bf00      	nop
 8002df0:	08002fb5 	.word	0x08002fb5
 8002df4:	08002f8d 	.word	0x08002f8d
 8002df8:	08002f47 	.word	0x08002f47
 8002dfc:	08002e0d 	.word	0x08002e0d
 8002e00:	08002eb7 	.word	0x08002eb7
 8002e04:	08002eff 	.word	0x08002eff
 8002e08:	08002f27 	.word	0x08002f27
        case 0:
            if (z_max > 900){
 8002e0c:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002e10:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8002e14:	dd14      	ble.n	8002e40 <StartTaskACC+0x540>
            	char msgu[20];
            	sprintf(msgu, "u%d",z_max);
 8002e16:	f9b7 20c6 	ldrsh.w	r2, [r7, #198]	@ 0xc6
 8002e1a:	f107 031c 	add.w	r3, r7, #28
 8002e1e:	4978      	ldr	r1, [pc, #480]	@ (8003000 <StartTaskACC+0x700>)
 8002e20:	4618      	mov	r0, r3
 8002e22:	f00a fc79 	bl	800d718 <siprintf>
				Send_Action(msgu,strlen(msgu));
 8002e26:	f107 031c 	add.w	r3, r7, #28
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fd fa20 	bl	8000270 <strlen>
 8002e30:	4603      	mov	r3, r0
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	f107 031c 	add.w	r3, r7, #28
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff f98a 	bl	8002154 <Send_Action>
//                Send_Action("up", 2);
            }
            if (z_min < -1200){
 8002e40:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8002e44:	f513 6f96 	cmn.w	r3, #1200	@ 0x4b0
 8002e48:	da15      	bge.n	8002e76 <StartTaskACC+0x576>
            	char msgd[20];
				sprintf(msgd, "d%d",-z_min);
 8002e4a:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8002e4e:	425a      	negs	r2, r3
 8002e50:	f107 0308 	add.w	r3, r7, #8
 8002e54:	496b      	ldr	r1, [pc, #428]	@ (8003004 <StartTaskACC+0x704>)
 8002e56:	4618      	mov	r0, r3
 8002e58:	f00a fc5e 	bl	800d718 <siprintf>
				Send_Action(msgd,strlen(msgd));
 8002e5c:	f107 0308 	add.w	r3, r7, #8
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd fa05 	bl	8000270 <strlen>
 8002e66:	4603      	mov	r3, r0
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	f107 0308 	add.w	r3, r7, #8
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff f96f 	bl	8002154 <Send_Action>
//                Send_Action("down", 4);
            }
            z_max = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
            z_min = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
            if (z > 300){
 8002e82:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8002e86:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002e8a:	dd06      	ble.n	8002e9a <StartTaskACC+0x59a>
                z_max = z;
 8002e8c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8002e90:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
                z_state = 1;
 8002e94:	2301      	movs	r3, #1
 8002e96:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2
            }
            if (z < -300){
 8002e9a:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8002e9e:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8002ea2:	f280 8097 	bge.w	8002fd4 <StartTaskACC+0x6d4>
                z_min = z;
 8002ea6:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8002eaa:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
                z_state = -1;
 8002eae:	23ff      	movs	r3, #255	@ 0xff
 8002eb0:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2
            }
            break;
 8002eb4:	e08e      	b.n	8002fd4 <StartTaskACC+0x6d4>
        case 1:
            if (z > z_max){
 8002eb6:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 8002eba:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	dd03      	ble.n	8002eca <StartTaskACC+0x5ca>
                z_max = z;
 8002ec2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8002ec6:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
            }
            if (z < 300){
 8002eca:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8002ece:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002ed2:	f280 8081 	bge.w	8002fd8 <StartTaskACC+0x6d8>
                z_state = 2;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2
                if (z_max > z_threshold){
 8002edc:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002ee0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	dd05      	ble.n	8002ef4 <StartTaskACC+0x5f4>
                    printf("up: %d\n", z_max);
 8002ee8:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002eec:	4619      	mov	r1, r3
 8002eee:	4846      	ldr	r0, [pc, #280]	@ (8003008 <StartTaskACC+0x708>)
 8002ef0:	f00a fba2 	bl	800d638 <iprintf>
                }
                z_min = z;
 8002ef4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8002ef8:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
            }
            break;
 8002efc:	e06c      	b.n	8002fd8 <StartTaskACC+0x6d8>
        case 2:
            if (z < z_min){
 8002efe:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 8002f02:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8002f06:	429a      	cmp	r2, r3
 8002f08:	da04      	bge.n	8002f14 <StartTaskACC+0x614>
                z_min = z;
 8002f0a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8002f0e:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
            } else if (z > -300){
                z_state = 3;
            }
            break;
 8002f12:	e063      	b.n	8002fdc <StartTaskACC+0x6dc>
            } else if (z > -300){
 8002f14:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8002f18:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8002f1c:	dd5e      	ble.n	8002fdc <StartTaskACC+0x6dc>
                z_state = 3;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2
            break;
 8002f24:	e05a      	b.n	8002fdc <StartTaskACC+0x6dc>
        case 3:
            z_min = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
            if (z < 100 || z > -100){
 8002f2c:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8002f30:	2b63      	cmp	r3, #99	@ 0x63
 8002f32:	dd04      	ble.n	8002f3e <StartTaskACC+0x63e>
 8002f34:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8002f38:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8002f3c:	db50      	blt.n	8002fe0 <StartTaskACC+0x6e0>
                z_state = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2
            }
            break;
 8002f44:	e04c      	b.n	8002fe0 <StartTaskACC+0x6e0>
        case -1:
            if (z < z_min){
 8002f46:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 8002f4a:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	da03      	bge.n	8002f5a <StartTaskACC+0x65a>
                z_min = z;
 8002f52:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8002f56:	f8a7 30c4 	strh.w	r3, [r7, #196]	@ 0xc4
            }
            if (z > -300){
 8002f5a:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8002f5e:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8002f62:	dd3f      	ble.n	8002fe4 <StartTaskACC+0x6e4>
                z_state = -2;
 8002f64:	23fe      	movs	r3, #254	@ 0xfe
 8002f66:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2
                if (z_min < -z_threshold){
 8002f6a:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8002f6e:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 8002f72:	4293      	cmp	r3, r2
 8002f74:	da05      	bge.n	8002f82 <StartTaskACC+0x682>
                    printf("down: %d\n", z_min);
 8002f76:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	@ 0xc4
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4823      	ldr	r0, [pc, #140]	@ (800300c <StartTaskACC+0x70c>)
 8002f7e:	f00a fb5b 	bl	800d638 <iprintf>
                }
                z_max = z;
 8002f82:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8002f86:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
            }
            break;
 8002f8a:	e02b      	b.n	8002fe4 <StartTaskACC+0x6e4>
        case -2:
            if (z > z_max){
 8002f8c:	f9b7 20a2 	ldrsh.w	r2, [r7, #162]	@ 0xa2
 8002f90:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	@ 0xc6
 8002f94:	429a      	cmp	r2, r3
 8002f96:	dd04      	ble.n	8002fa2 <StartTaskACC+0x6a2>
                z_max = z;
 8002f98:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8002f9c:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
            } else if (z < 300){
                z_state = -3;
            }
            break;
 8002fa0:	e022      	b.n	8002fe8 <StartTaskACC+0x6e8>
            } else if (z < 300){
 8002fa2:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8002fa6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002faa:	da1d      	bge.n	8002fe8 <StartTaskACC+0x6e8>
                z_state = -3;
 8002fac:	23fd      	movs	r3, #253	@ 0xfd
 8002fae:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2
            break;
 8002fb2:	e019      	b.n	8002fe8 <StartTaskACC+0x6e8>
        case -3:
            z_max = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
            if (z < 100 || z > -100){
 8002fba:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8002fbe:	2b63      	cmp	r3, #99	@ 0x63
 8002fc0:	dd04      	ble.n	8002fcc <StartTaskACC+0x6cc>
 8002fc2:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	@ 0xa2
 8002fc6:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8002fca:	db0f      	blt.n	8002fec <StartTaskACC+0x6ec>
                z_state = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2
            }
            break;
 8002fd2:	e00b      	b.n	8002fec <StartTaskACC+0x6ec>
            break;
 8002fd4:	bf00      	nop
 8002fd6:	e00a      	b.n	8002fee <StartTaskACC+0x6ee>
            break;
 8002fd8:	bf00      	nop
 8002fda:	e008      	b.n	8002fee <StartTaskACC+0x6ee>
            break;
 8002fdc:	bf00      	nop
 8002fde:	e006      	b.n	8002fee <StartTaskACC+0x6ee>
            break;
 8002fe0:	bf00      	nop
 8002fe2:	e004      	b.n	8002fee <StartTaskACC+0x6ee>
            break;
 8002fe4:	bf00      	nop
 8002fe6:	e002      	b.n	8002fee <StartTaskACC+0x6ee>
            break;
 8002fe8:	bf00      	nop
 8002fea:	e000      	b.n	8002fee <StartTaskACC+0x6ee>
            break;
 8002fec:	bf00      	nop
        }
    continue;
 8002fee:	bf00      	nop
  {
 8002ff0:	e4e0      	b.n	80029b4 <StartTaskACC+0xb4>
 8002ff2:	bf00      	nop
 8002ff4:	0800fa74 	.word	0x0800fa74
 8002ff8:	fffffd12 	.word	0xfffffd12
 8002ffc:	0800fa80 	.word	0x0800fa80
 8003000:	0800fa8c 	.word	0x0800fa8c
 8003004:	0800fa90 	.word	0x0800fa90
 8003008:	0800fa94 	.word	0x0800fa94
 800300c:	0800fa9c 	.word	0x0800fa9c

08003010 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a04      	ldr	r2, [pc, #16]	@ (8003030 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d101      	bne.n	8003026 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003022:	f001 f951 	bl	80042c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40001000 	.word	0x40001000

08003034 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003038:	b672      	cpsid	i
}
 800303a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800303c:	bf00      	nop
 800303e:	e7fd      	b.n	800303c <Error_Handler+0x8>

08003040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003046:	4b11      	ldr	r3, [pc, #68]	@ (800308c <HAL_MspInit+0x4c>)
 8003048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800304a:	4a10      	ldr	r2, [pc, #64]	@ (800308c <HAL_MspInit+0x4c>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	6613      	str	r3, [r2, #96]	@ 0x60
 8003052:	4b0e      	ldr	r3, [pc, #56]	@ (800308c <HAL_MspInit+0x4c>)
 8003054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	607b      	str	r3, [r7, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800305e:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <HAL_MspInit+0x4c>)
 8003060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003062:	4a0a      	ldr	r2, [pc, #40]	@ (800308c <HAL_MspInit+0x4c>)
 8003064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003068:	6593      	str	r3, [r2, #88]	@ 0x58
 800306a:	4b08      	ldr	r3, [pc, #32]	@ (800308c <HAL_MspInit+0x4c>)
 800306c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800306e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	210f      	movs	r1, #15
 800307a:	f06f 0001 	mvn.w	r0, #1
 800307e:	f001 fa1f 	bl	80044c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40021000 	.word	0x40021000

08003090 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b0ac      	sub	sp, #176	@ 0xb0
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030a8:	f107 0314 	add.w	r3, r7, #20
 80030ac:	2288      	movs	r2, #136	@ 0x88
 80030ae:	2100      	movs	r1, #0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f00a fc2b 	bl	800d90c <memset>
  if(DFSDM1_Init == 0)
 80030b6:	4b25      	ldr	r3, [pc, #148]	@ (800314c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d142      	bne.n	8003144 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80030be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030ca:	f107 0314 	add.w	r3, r7, #20
 80030ce:	4618      	mov	r0, r3
 80030d0:	f003 fd40 	bl	8006b54 <HAL_RCCEx_PeriphCLKConfig>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80030da:	f7ff ffab 	bl	8003034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80030de:	4b1c      	ldr	r3, [pc, #112]	@ (8003150 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80030e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003150 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80030e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80030ea:	4b19      	ldr	r3, [pc, #100]	@ (8003150 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80030ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030f6:	4b16      	ldr	r3, [pc, #88]	@ (8003150 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80030f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fa:	4a15      	ldr	r2, [pc, #84]	@ (8003150 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80030fc:	f043 0310 	orr.w	r3, r3, #16
 8003100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003102:	4b13      	ldr	r3, [pc, #76]	@ (8003150 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8003104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800310e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8003112:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003116:	2302      	movs	r3, #2
 8003118:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311c:	2300      	movs	r3, #0
 800311e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003122:	2300      	movs	r3, #0
 8003124:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003128:	2306      	movs	r3, #6
 800312a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800312e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003132:	4619      	mov	r1, r3
 8003134:	4807      	ldr	r0, [pc, #28]	@ (8003154 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8003136:	f001 fb57 	bl	80047e8 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800313a:	4b04      	ldr	r3, [pc, #16]	@ (800314c <HAL_DFSDM_ChannelMspInit+0xbc>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	3301      	adds	r3, #1
 8003140:	4a02      	ldr	r2, [pc, #8]	@ (800314c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003142:	6013      	str	r3, [r2, #0]
  }

}
 8003144:	bf00      	nop
 8003146:	37b0      	adds	r7, #176	@ 0xb0
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	20001dc0 	.word	0x20001dc0
 8003150:	40021000 	.word	0x40021000
 8003154:	48001000 	.word	0x48001000

08003158 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b0ac      	sub	sp, #176	@ 0xb0
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003160:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	2288      	movs	r2, #136	@ 0x88
 8003176:	2100      	movs	r1, #0
 8003178:	4618      	mov	r0, r3
 800317a:	f00a fbc7 	bl	800d90c <memset>
  if(hi2c->Instance==I2C2)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a21      	ldr	r2, [pc, #132]	@ (8003208 <HAL_I2C_MspInit+0xb0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d13b      	bne.n	8003200 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003188:	2380      	movs	r3, #128	@ 0x80
 800318a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800318c:	2300      	movs	r3, #0
 800318e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003190:	f107 0314 	add.w	r3, r7, #20
 8003194:	4618      	mov	r0, r3
 8003196:	f003 fcdd 	bl	8006b54 <HAL_RCCEx_PeriphCLKConfig>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80031a0:	f7ff ff48 	bl	8003034 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a4:	4b19      	ldr	r3, [pc, #100]	@ (800320c <HAL_I2C_MspInit+0xb4>)
 80031a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031a8:	4a18      	ldr	r2, [pc, #96]	@ (800320c <HAL_I2C_MspInit+0xb4>)
 80031aa:	f043 0302 	orr.w	r3, r3, #2
 80031ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031b0:	4b16      	ldr	r3, [pc, #88]	@ (800320c <HAL_I2C_MspInit+0xb4>)
 80031b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80031bc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80031c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031c4:	2312      	movs	r3, #18
 80031c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d0:	2303      	movs	r3, #3
 80031d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80031d6:	2304      	movs	r3, #4
 80031d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80031e0:	4619      	mov	r1, r3
 80031e2:	480b      	ldr	r0, [pc, #44]	@ (8003210 <HAL_I2C_MspInit+0xb8>)
 80031e4:	f001 fb00 	bl	80047e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80031e8:	4b08      	ldr	r3, [pc, #32]	@ (800320c <HAL_I2C_MspInit+0xb4>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ec:	4a07      	ldr	r2, [pc, #28]	@ (800320c <HAL_I2C_MspInit+0xb4>)
 80031ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80031f4:	4b05      	ldr	r3, [pc, #20]	@ (800320c <HAL_I2C_MspInit+0xb4>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003200:	bf00      	nop
 8003202:	37b0      	adds	r7, #176	@ 0xb0
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40005800 	.word	0x40005800
 800320c:	40021000 	.word	0x40021000
 8003210:	48000400 	.word	0x48000400

08003214 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a0b      	ldr	r2, [pc, #44]	@ (8003250 <HAL_I2C_MspDeInit+0x3c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d10f      	bne.n	8003246 <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C2_MspDeInit 0 */

    /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8003226:	4b0b      	ldr	r3, [pc, #44]	@ (8003254 <HAL_I2C_MspDeInit+0x40>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322a:	4a0a      	ldr	r2, [pc, #40]	@ (8003254 <HAL_I2C_MspDeInit+0x40>)
 800322c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003230:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8003232:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003236:	4808      	ldr	r0, [pc, #32]	@ (8003258 <HAL_I2C_MspDeInit+0x44>)
 8003238:	f001 fc80 	bl	8004b3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 800323c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003240:	4805      	ldr	r0, [pc, #20]	@ (8003258 <HAL_I2C_MspDeInit+0x44>)
 8003242:	f001 fc7b 	bl	8004b3c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C2_MspDeInit 1 */

    /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40005800 	.word	0x40005800
 8003254:	40021000 	.word	0x40021000
 8003258:	48000400 	.word	0x48000400

0800325c <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	@ 0x28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003264:	f107 0314 	add.w	r3, r7, #20
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	60da      	str	r2, [r3, #12]
 8003272:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a17      	ldr	r2, [pc, #92]	@ (80032d8 <HAL_QSPI_MspInit+0x7c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d128      	bne.n	80032d0 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800327e:	4b17      	ldr	r3, [pc, #92]	@ (80032dc <HAL_QSPI_MspInit+0x80>)
 8003280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003282:	4a16      	ldr	r2, [pc, #88]	@ (80032dc <HAL_QSPI_MspInit+0x80>)
 8003284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003288:	6513      	str	r3, [r2, #80]	@ 0x50
 800328a:	4b14      	ldr	r3, [pc, #80]	@ (80032dc <HAL_QSPI_MspInit+0x80>)
 800328c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800328e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003296:	4b11      	ldr	r3, [pc, #68]	@ (80032dc <HAL_QSPI_MspInit+0x80>)
 8003298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800329a:	4a10      	ldr	r2, [pc, #64]	@ (80032dc <HAL_QSPI_MspInit+0x80>)
 800329c:	f043 0310 	orr.w	r3, r3, #16
 80032a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032a2:	4b0e      	ldr	r3, [pc, #56]	@ (80032dc <HAL_QSPI_MspInit+0x80>)
 80032a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80032ae:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80032b2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b4:	2302      	movs	r3, #2
 80032b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032bc:	2303      	movs	r3, #3
 80032be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80032c0:	230a      	movs	r3, #10
 80032c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032c4:	f107 0314 	add.w	r3, r7, #20
 80032c8:	4619      	mov	r1, r3
 80032ca:	4805      	ldr	r0, [pc, #20]	@ (80032e0 <HAL_QSPI_MspInit+0x84>)
 80032cc:	f001 fa8c 	bl	80047e8 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80032d0:	bf00      	nop
 80032d2:	3728      	adds	r7, #40	@ 0x28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	a0001000 	.word	0xa0001000
 80032dc:	40021000 	.word	0x40021000
 80032e0:	48001000 	.word	0x48001000

080032e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b0ae      	sub	sp, #184	@ 0xb8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032fc:	f107 031c 	add.w	r3, r7, #28
 8003300:	2288      	movs	r2, #136	@ 0x88
 8003302:	2100      	movs	r1, #0
 8003304:	4618      	mov	r0, r3
 8003306:	f00a fb01 	bl	800d90c <memset>
  if(huart->Instance==USART1)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a42      	ldr	r2, [pc, #264]	@ (8003418 <HAL_UART_MspInit+0x134>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d13b      	bne.n	800338c <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003314:	2301      	movs	r3, #1
 8003316:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003318:	2300      	movs	r3, #0
 800331a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800331c:	f107 031c 	add.w	r3, r7, #28
 8003320:	4618      	mov	r0, r3
 8003322:	f003 fc17 	bl	8006b54 <HAL_RCCEx_PeriphCLKConfig>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800332c:	f7ff fe82 	bl	8003034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003330:	4b3a      	ldr	r3, [pc, #232]	@ (800341c <HAL_UART_MspInit+0x138>)
 8003332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003334:	4a39      	ldr	r2, [pc, #228]	@ (800341c <HAL_UART_MspInit+0x138>)
 8003336:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800333a:	6613      	str	r3, [r2, #96]	@ 0x60
 800333c:	4b37      	ldr	r3, [pc, #220]	@ (800341c <HAL_UART_MspInit+0x138>)
 800333e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003340:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003348:	4b34      	ldr	r3, [pc, #208]	@ (800341c <HAL_UART_MspInit+0x138>)
 800334a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800334c:	4a33      	ldr	r2, [pc, #204]	@ (800341c <HAL_UART_MspInit+0x138>)
 800334e:	f043 0302 	orr.w	r3, r3, #2
 8003352:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003354:	4b31      	ldr	r3, [pc, #196]	@ (800341c <HAL_UART_MspInit+0x138>)
 8003356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8003360:	23c0      	movs	r3, #192	@ 0xc0
 8003362:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003366:	2302      	movs	r3, #2
 8003368:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003372:	2303      	movs	r3, #3
 8003374:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003378:	2307      	movs	r3, #7
 800337a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800337e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003382:	4619      	mov	r1, r3
 8003384:	4826      	ldr	r0, [pc, #152]	@ (8003420 <HAL_UART_MspInit+0x13c>)
 8003386:	f001 fa2f 	bl	80047e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800338a:	e040      	b.n	800340e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a24      	ldr	r2, [pc, #144]	@ (8003424 <HAL_UART_MspInit+0x140>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d13b      	bne.n	800340e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003396:	2304      	movs	r3, #4
 8003398:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800339a:	2300      	movs	r3, #0
 800339c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800339e:	f107 031c 	add.w	r3, r7, #28
 80033a2:	4618      	mov	r0, r3
 80033a4:	f003 fbd6 	bl	8006b54 <HAL_RCCEx_PeriphCLKConfig>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80033ae:	f7ff fe41 	bl	8003034 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80033b2:	4b1a      	ldr	r3, [pc, #104]	@ (800341c <HAL_UART_MspInit+0x138>)
 80033b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b6:	4a19      	ldr	r2, [pc, #100]	@ (800341c <HAL_UART_MspInit+0x138>)
 80033b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80033be:	4b17      	ldr	r3, [pc, #92]	@ (800341c <HAL_UART_MspInit+0x138>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ca:	4b14      	ldr	r3, [pc, #80]	@ (800341c <HAL_UART_MspInit+0x138>)
 80033cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ce:	4a13      	ldr	r2, [pc, #76]	@ (800341c <HAL_UART_MspInit+0x138>)
 80033d0:	f043 0308 	orr.w	r3, r3, #8
 80033d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033d6:	4b11      	ldr	r3, [pc, #68]	@ (800341c <HAL_UART_MspInit+0x138>)
 80033d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80033e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80033e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ea:	2302      	movs	r3, #2
 80033ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f6:	2303      	movs	r3, #3
 80033f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033fc:	2307      	movs	r3, #7
 80033fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003402:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003406:	4619      	mov	r1, r3
 8003408:	4807      	ldr	r0, [pc, #28]	@ (8003428 <HAL_UART_MspInit+0x144>)
 800340a:	f001 f9ed 	bl	80047e8 <HAL_GPIO_Init>
}
 800340e:	bf00      	nop
 8003410:	37b8      	adds	r7, #184	@ 0xb8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40013800 	.word	0x40013800
 800341c:	40021000 	.word	0x40021000
 8003420:	48000400 	.word	0x48000400
 8003424:	40004800 	.word	0x40004800
 8003428:	48000c00 	.word	0x48000c00

0800342c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b0ac      	sub	sp, #176	@ 0xb0
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003434:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]
 8003442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003444:	f107 0314 	add.w	r3, r7, #20
 8003448:	2288      	movs	r2, #136	@ 0x88
 800344a:	2100      	movs	r1, #0
 800344c:	4618      	mov	r0, r3
 800344e:	f00a fa5d 	bl	800d90c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800345a:	d17c      	bne.n	8003556 <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800345c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003460:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003462:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003466:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800346a:	2301      	movs	r3, #1
 800346c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800346e:	2301      	movs	r3, #1
 8003470:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8003472:	2318      	movs	r3, #24
 8003474:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003476:	2307      	movs	r3, #7
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800347a:	2302      	movs	r3, #2
 800347c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800347e:	2302      	movs	r3, #2
 8003480:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003482:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003486:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003488:	f107 0314 	add.w	r3, r7, #20
 800348c:	4618      	mov	r0, r3
 800348e:	f003 fb61 	bl	8006b54 <HAL_RCCEx_PeriphCLKConfig>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8003498:	f7ff fdcc 	bl	8003034 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349c:	4b30      	ldr	r3, [pc, #192]	@ (8003560 <HAL_PCD_MspInit+0x134>)
 800349e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003560 <HAL_PCD_MspInit+0x134>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003560 <HAL_PCD_MspInit+0x134>)
 80034aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80034b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80034c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80034cc:	4619      	mov	r1, r3
 80034ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034d2:	f001 f989 	bl	80047e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80034d6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80034da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034de:	2302      	movs	r3, #2
 80034e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ea:	2303      	movs	r3, #3
 80034ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80034f0:	230a      	movs	r3, #10
 80034f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80034fa:	4619      	mov	r1, r3
 80034fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003500:	f001 f972 	bl	80047e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003504:	4b16      	ldr	r3, [pc, #88]	@ (8003560 <HAL_PCD_MspInit+0x134>)
 8003506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003508:	4a15      	ldr	r2, [pc, #84]	@ (8003560 <HAL_PCD_MspInit+0x134>)
 800350a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800350e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003510:	4b13      	ldr	r3, [pc, #76]	@ (8003560 <HAL_PCD_MspInit+0x134>)
 8003512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003514:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800351c:	4b10      	ldr	r3, [pc, #64]	@ (8003560 <HAL_PCD_MspInit+0x134>)
 800351e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d114      	bne.n	8003552 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003528:	4b0d      	ldr	r3, [pc, #52]	@ (8003560 <HAL_PCD_MspInit+0x134>)
 800352a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352c:	4a0c      	ldr	r2, [pc, #48]	@ (8003560 <HAL_PCD_MspInit+0x134>)
 800352e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003532:	6593      	str	r3, [r2, #88]	@ 0x58
 8003534:	4b0a      	ldr	r3, [pc, #40]	@ (8003560 <HAL_PCD_MspInit+0x134>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8003540:	f002 fc0a 	bl	8005d58 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003544:	4b06      	ldr	r3, [pc, #24]	@ (8003560 <HAL_PCD_MspInit+0x134>)
 8003546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003548:	4a05      	ldr	r2, [pc, #20]	@ (8003560 <HAL_PCD_MspInit+0x134>)
 800354a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800354e:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8003550:	e001      	b.n	8003556 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8003552:	f002 fc01 	bl	8005d58 <HAL_PWREx_EnableVddUSB>
}
 8003556:	bf00      	nop
 8003558:	37b0      	adds	r7, #176	@ 0xb0
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40021000 	.word	0x40021000

08003564 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08e      	sub	sp, #56	@ 0x38
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003572:	4b34      	ldr	r3, [pc, #208]	@ (8003644 <HAL_InitTick+0xe0>)
 8003574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003576:	4a33      	ldr	r2, [pc, #204]	@ (8003644 <HAL_InitTick+0xe0>)
 8003578:	f043 0310 	orr.w	r3, r3, #16
 800357c:	6593      	str	r3, [r2, #88]	@ 0x58
 800357e:	4b31      	ldr	r3, [pc, #196]	@ (8003644 <HAL_InitTick+0xe0>)
 8003580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800358a:	f107 0210 	add.w	r2, r7, #16
 800358e:	f107 0314 	add.w	r3, r7, #20
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f003 fa4b 	bl	8006a30 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800359e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d103      	bne.n	80035ac <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80035a4:	f003 fa18 	bl	80069d8 <HAL_RCC_GetPCLK1Freq>
 80035a8:	6378      	str	r0, [r7, #52]	@ 0x34
 80035aa:	e004      	b.n	80035b6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80035ac:	f003 fa14 	bl	80069d8 <HAL_RCC_GetPCLK1Freq>
 80035b0:	4603      	mov	r3, r0
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80035b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b8:	4a23      	ldr	r2, [pc, #140]	@ (8003648 <HAL_InitTick+0xe4>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	0c9b      	lsrs	r3, r3, #18
 80035c0:	3b01      	subs	r3, #1
 80035c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80035c4:	4b21      	ldr	r3, [pc, #132]	@ (800364c <HAL_InitTick+0xe8>)
 80035c6:	4a22      	ldr	r2, [pc, #136]	@ (8003650 <HAL_InitTick+0xec>)
 80035c8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80035ca:	4b20      	ldr	r3, [pc, #128]	@ (800364c <HAL_InitTick+0xe8>)
 80035cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80035d0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80035d2:	4a1e      	ldr	r2, [pc, #120]	@ (800364c <HAL_InitTick+0xe8>)
 80035d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80035d8:	4b1c      	ldr	r3, [pc, #112]	@ (800364c <HAL_InitTick+0xe8>)
 80035da:	2200      	movs	r2, #0
 80035dc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035de:	4b1b      	ldr	r3, [pc, #108]	@ (800364c <HAL_InitTick+0xe8>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035e4:	4b19      	ldr	r3, [pc, #100]	@ (800364c <HAL_InitTick+0xe8>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80035ea:	4818      	ldr	r0, [pc, #96]	@ (800364c <HAL_InitTick+0xe8>)
 80035ec:	f004 fbbc 	bl	8007d68 <HAL_TIM_Base_Init>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80035f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d11b      	bne.n	8003636 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80035fe:	4813      	ldr	r0, [pc, #76]	@ (800364c <HAL_InitTick+0xe8>)
 8003600:	f004 fc14 	bl	8007e2c <HAL_TIM_Base_Start_IT>
 8003604:	4603      	mov	r3, r0
 8003606:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800360a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800360e:	2b00      	cmp	r3, #0
 8003610:	d111      	bne.n	8003636 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003612:	2036      	movs	r0, #54	@ 0x36
 8003614:	f000 ff70 	bl	80044f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b0f      	cmp	r3, #15
 800361c:	d808      	bhi.n	8003630 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800361e:	2200      	movs	r2, #0
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	2036      	movs	r0, #54	@ 0x36
 8003624:	f000 ff4c 	bl	80044c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003628:	4a0a      	ldr	r2, [pc, #40]	@ (8003654 <HAL_InitTick+0xf0>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	e002      	b.n	8003636 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003636:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800363a:	4618      	mov	r0, r3
 800363c:	3738      	adds	r7, #56	@ 0x38
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40021000 	.word	0x40021000
 8003648:	431bde83 	.word	0x431bde83
 800364c:	20001dc4 	.word	0x20001dc4
 8003650:	40001000 	.word	0x40001000
 8003654:	20000064 	.word	0x20000064

08003658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800365c:	bf00      	nop
 800365e:	e7fd      	b.n	800365c <NMI_Handler+0x4>

08003660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003664:	bf00      	nop
 8003666:	e7fd      	b.n	8003664 <HardFault_Handler+0x4>

08003668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800366c:	bf00      	nop
 800366e:	e7fd      	b.n	800366c <MemManage_Handler+0x4>

08003670 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003674:	bf00      	nop
 8003676:	e7fd      	b.n	8003674 <BusFault_Handler+0x4>

08003678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800367c:	bf00      	nop
 800367e:	e7fd      	b.n	800367c <UsageFault_Handler+0x4>

08003680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003684:	bf00      	nop
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8003694:	2020      	movs	r0, #32
 8003696:	f001 fb8f 	bl	8004db8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 800369a:	4806      	ldr	r0, [pc, #24]	@ (80036b4 <EXTI9_5_IRQHandler+0x24>)
 800369c:	f001 f874 	bl	8004788 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80036a0:	2080      	movs	r0, #128	@ 0x80
 80036a2:	f001 fb89 	bl	8004db8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80036a6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80036aa:	f001 fb85 	bl	8004db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80036ae:	bf00      	nop
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	200002c8 	.word	0x200002c8

080036b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80036bc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80036c0:	f001 fb7a 	bl	8004db8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80036c4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80036c8:	f001 fb76 	bl	8004db8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80036cc:	4806      	ldr	r0, [pc, #24]	@ (80036e8 <EXTI15_10_IRQHandler+0x30>)
 80036ce:	f001 f85b 	bl	8004788 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80036d2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80036d6:	f001 fb6f 	bl	8004db8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80036da:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80036de:	f001 fb6b 	bl	8004db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000028 	.word	0x20000028

080036ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80036f0:	4802      	ldr	r0, [pc, #8]	@ (80036fc <TIM6_DAC_IRQHandler+0x10>)
 80036f2:	f004 fc0b 	bl	8007f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80036f6:	bf00      	nop
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20001dc4 	.word	0x20001dc4

08003700 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  return 1;
 8003704:	2301      	movs	r3, #1
}
 8003706:	4618      	mov	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <_kill>:

int _kill(int pid, int sig)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800371a:	f00a f949 	bl	800d9b0 <__errno>
 800371e:	4603      	mov	r3, r0
 8003720:	2216      	movs	r2, #22
 8003722:	601a      	str	r2, [r3, #0]
  return -1;
 8003724:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <_exit>:

void _exit (int status)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003738:	f04f 31ff 	mov.w	r1, #4294967295
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff ffe7 	bl	8003710 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003742:	bf00      	nop
 8003744:	e7fd      	b.n	8003742 <_exit+0x12>

08003746 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e00a      	b.n	800376e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003758:	f3af 8000 	nop.w
 800375c:	4601      	mov	r1, r0
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	60ba      	str	r2, [r7, #8]
 8003764:	b2ca      	uxtb	r2, r1
 8003766:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	3301      	adds	r3, #1
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	429a      	cmp	r2, r3
 8003774:	dbf0      	blt.n	8003758 <_read+0x12>
  }

  return len;
 8003776:	687b      	ldr	r3, [r7, #4]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	e009      	b.n	80037a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	60ba      	str	r2, [r7, #8]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe fd2e 	bl	80021fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	3301      	adds	r3, #1
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	dbf1      	blt.n	8003792 <_write+0x12>
  }
  return len;
 80037ae:	687b      	ldr	r3, [r7, #4]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <_close>:

int _close(int file)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037e0:	605a      	str	r2, [r3, #4]
  return 0;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <_isatty>:

int _isatty(int file)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037f8:	2301      	movs	r3, #1
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003806:	b480      	push	{r7}
 8003808:	b085      	sub	sp, #20
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003828:	4a14      	ldr	r2, [pc, #80]	@ (800387c <_sbrk+0x5c>)
 800382a:	4b15      	ldr	r3, [pc, #84]	@ (8003880 <_sbrk+0x60>)
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003834:	4b13      	ldr	r3, [pc, #76]	@ (8003884 <_sbrk+0x64>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d102      	bne.n	8003842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800383c:	4b11      	ldr	r3, [pc, #68]	@ (8003884 <_sbrk+0x64>)
 800383e:	4a12      	ldr	r2, [pc, #72]	@ (8003888 <_sbrk+0x68>)
 8003840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003842:	4b10      	ldr	r3, [pc, #64]	@ (8003884 <_sbrk+0x64>)
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4413      	add	r3, r2
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	429a      	cmp	r2, r3
 800384e:	d207      	bcs.n	8003860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003850:	f00a f8ae 	bl	800d9b0 <__errno>
 8003854:	4603      	mov	r3, r0
 8003856:	220c      	movs	r2, #12
 8003858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800385a:	f04f 33ff 	mov.w	r3, #4294967295
 800385e:	e009      	b.n	8003874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003860:	4b08      	ldr	r3, [pc, #32]	@ (8003884 <_sbrk+0x64>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003866:	4b07      	ldr	r3, [pc, #28]	@ (8003884 <_sbrk+0x64>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4413      	add	r3, r2
 800386e:	4a05      	ldr	r2, [pc, #20]	@ (8003884 <_sbrk+0x64>)
 8003870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003872:	68fb      	ldr	r3, [r7, #12]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20018000 	.word	0x20018000
 8003880:	00000400 	.word	0x00000400
 8003884:	20001e10 	.word	0x20001e10
 8003888:	20003040 	.word	0x20003040

0800388c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003890:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <SystemInit+0x20>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003896:	4a05      	ldr	r2, [pc, #20]	@ (80038ac <SystemInit+0x20>)
 8003898:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800389c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80038a0:	bf00      	nop
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80038b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80038e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80038b4:	f7ff ffea 	bl	800388c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038b8:	480c      	ldr	r0, [pc, #48]	@ (80038ec <LoopForever+0x6>)
  ldr r1, =_edata
 80038ba:	490d      	ldr	r1, [pc, #52]	@ (80038f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038bc:	4a0d      	ldr	r2, [pc, #52]	@ (80038f4 <LoopForever+0xe>)
  movs r3, #0
 80038be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038c0:	e002      	b.n	80038c8 <LoopCopyDataInit>

080038c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038c6:	3304      	adds	r3, #4

080038c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038cc:	d3f9      	bcc.n	80038c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038ce:	4a0a      	ldr	r2, [pc, #40]	@ (80038f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038d0:	4c0a      	ldr	r4, [pc, #40]	@ (80038fc <LoopForever+0x16>)
  movs r3, #0
 80038d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038d4:	e001      	b.n	80038da <LoopFillZerobss>

080038d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038d8:	3204      	adds	r2, #4

080038da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038dc:	d3fb      	bcc.n	80038d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038de:	f00a f86d 	bl	800d9bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80038e2:	f7fe fc9d 	bl	8002220 <main>

080038e6 <LoopForever>:

LoopForever:
    b LoopForever
 80038e6:	e7fe      	b.n	80038e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80038e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80038ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038f0:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 80038f4:	0800ff0c 	.word	0x0800ff0c
  ldr r2, =_sbss
 80038f8:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 80038fc:	20003040 	.word	0x20003040

08003900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003900:	e7fe      	b.n	8003900 <ADC1_2_IRQHandler>
	...

08003904 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	4a04      	ldr	r2, [pc, #16]	@ (8003924 <BSP_LED_Init+0x20>)
 8003912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003916:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	0800fb1c 	.word	0x0800fb1c

08003928 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	4a06      	ldr	r2, [pc, #24]	@ (8003950 <BSP_LED_Toggle+0x28>)
 8003936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f001 fa1f 	bl	8004d84 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	20000020 	.word	0x20000020

08003954 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800395a:	4b1c      	ldr	r3, [pc, #112]	@ (80039cc <LED_USER_GPIO_Init+0x78>)
 800395c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395e:	4a1b      	ldr	r2, [pc, #108]	@ (80039cc <LED_USER_GPIO_Init+0x78>)
 8003960:	f043 0302 	orr.w	r3, r3, #2
 8003964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003966:	4b19      	ldr	r3, [pc, #100]	@ (80039cc <LED_USER_GPIO_Init+0x78>)
 8003968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003972:	f107 030c 	add.w	r3, r7, #12
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	605a      	str	r2, [r3, #4]
 800397c:	609a      	str	r2, [r3, #8]
 800397e:	60da      	str	r2, [r3, #12]
 8003980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003982:	4b12      	ldr	r3, [pc, #72]	@ (80039cc <LED_USER_GPIO_Init+0x78>)
 8003984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003986:	4a11      	ldr	r2, [pc, #68]	@ (80039cc <LED_USER_GPIO_Init+0x78>)
 8003988:	f043 0302 	orr.w	r3, r3, #2
 800398c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800398e:	4b0f      	ldr	r3, [pc, #60]	@ (80039cc <LED_USER_GPIO_Init+0x78>)
 8003990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	607b      	str	r3, [r7, #4]
 8003998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800399a:	2200      	movs	r2, #0
 800399c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80039a0:	480b      	ldr	r0, [pc, #44]	@ (80039d0 <LED_USER_GPIO_Init+0x7c>)
 80039a2:	f001 f9d7 	bl	8004d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80039a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80039aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ac:	2301      	movs	r3, #1
 80039ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80039b8:	f107 030c 	add.w	r3, r7, #12
 80039bc:	4619      	mov	r1, r3
 80039be:	4804      	ldr	r0, [pc, #16]	@ (80039d0 <LED_USER_GPIO_Init+0x7c>)
 80039c0:	f000 ff12 	bl	80047e8 <HAL_GPIO_Init>

}
 80039c4:	bf00      	nop
 80039c6:	3720      	adds	r7, #32
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40021000 	.word	0x40021000
 80039d0:	48000400 	.word	0x48000400

080039d4 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	460a      	mov	r2, r1
 80039de:	71fb      	strb	r3, [r7, #7]
 80039e0:	4613      	mov	r3, r2
 80039e2:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003a68 <BSP_PB_Init+0x94>)
 80039ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f0:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 80039f2:	79bb      	ldrb	r3, [r7, #6]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d132      	bne.n	8003a5e <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	4a1b      	ldr	r2, [pc, #108]	@ (8003a6c <BSP_PB_Init+0x98>)
 80039fe:	441a      	add	r2, r3
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	491b      	ldr	r1, [pc, #108]	@ (8003a70 <BSP_PB_Init+0x9c>)
 8003a04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	f000 fea8 	bl	8004760 <HAL_EXTI_GetHandle>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003a16:	f06f 0303 	mvn.w	r3, #3
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	e01f      	b.n	8003a5e <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4a12      	ldr	r2, [pc, #72]	@ (8003a6c <BSP_PB_Init+0x98>)
 8003a24:	1898      	adds	r0, r3, r2
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	4a12      	ldr	r2, [pc, #72]	@ (8003a74 <BSP_PB_Init+0xa0>)
 8003a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	2100      	movs	r1, #0
 8003a32:	f000 fe7b 	bl	800472c <HAL_EXTI_RegisterCallback>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003a3c:	f06f 0303 	mvn.w	r3, #3
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	e00c      	b.n	8003a5e <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003a44:	2028      	movs	r0, #40	@ 0x28
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	4a0b      	ldr	r2, [pc, #44]	@ (8003a78 <BSP_PB_Init+0xa4>)
 8003a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	4619      	mov	r1, r3
 8003a52:	f000 fd35 	bl	80044c0 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003a56:	2328      	movs	r3, #40	@ 0x28
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fd4d 	bl	80044f8 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	0800fb20 	.word	0x0800fb20
 8003a6c:	20000028 	.word	0x20000028
 8003a70:	0800fb24 	.word	0x0800fb24
 8003a74:	0800fb28 	.word	0x0800fb28
 8003a78:	0800fb2c 	.word	0x0800fb2c

08003a7c <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	4a09      	ldr	r2, [pc, #36]	@ (8003ab0 <BSP_PB_GetState+0x34>)
 8003a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a92:	4611      	mov	r1, r2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f001 f945 	bl	8004d24 <HAL_GPIO_ReadPin>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf0c      	ite	eq
 8003aa0:	2301      	moveq	r3, #1
 8003aa2:	2300      	movne	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20000024 	.word	0x20000024

08003ab4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003ab8:	2000      	movs	r0, #0
 8003aba:	f7fd fd01 	bl	80014c0 <BSP_PB_Callback>
}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
	...

08003ac4 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aca:	4b19      	ldr	r3, [pc, #100]	@ (8003b30 <BUTTON_USER_GPIO_Init+0x6c>)
 8003acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ace:	4a18      	ldr	r2, [pc, #96]	@ (8003b30 <BUTTON_USER_GPIO_Init+0x6c>)
 8003ad0:	f043 0304 	orr.w	r3, r3, #4
 8003ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ad6:	4b16      	ldr	r3, [pc, #88]	@ (8003b30 <BUTTON_USER_GPIO_Init+0x6c>)
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	60bb      	str	r3, [r7, #8]
 8003ae0:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae2:	f107 030c 	add.w	r3, r7, #12
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	609a      	str	r2, [r3, #8]
 8003aee:	60da      	str	r2, [r3, #12]
 8003af0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003af2:	4b0f      	ldr	r3, [pc, #60]	@ (8003b30 <BUTTON_USER_GPIO_Init+0x6c>)
 8003af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af6:	4a0e      	ldr	r2, [pc, #56]	@ (8003b30 <BUTTON_USER_GPIO_Init+0x6c>)
 8003af8:	f043 0304 	orr.w	r3, r3, #4
 8003afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003afe:	4b0c      	ldr	r3, [pc, #48]	@ (8003b30 <BUTTON_USER_GPIO_Init+0x6c>)
 8003b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	607b      	str	r3, [r7, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8003b0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003b10:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003b14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8003b1a:	f107 030c 	add.w	r3, r7, #12
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4804      	ldr	r0, [pc, #16]	@ (8003b34 <BUTTON_USER_GPIO_Init+0x70>)
 8003b22:	f000 fe61 	bl	80047e8 <HAL_GPIO_Init>

}
 8003b26:	bf00      	nop
 8003b28:	3720      	adds	r7, #32
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000
 8003b34:	48000800 	.word	0x48000800

08003b38 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003b3c:	4802      	ldr	r0, [pc, #8]	@ (8003b48 <SENSOR_IO_Init+0x10>)
 8003b3e:	f000 f85b 	bl	8003bf8 <I2Cx_Init>
}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20001e14 	.word	0x20001e14

08003b4c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	4603      	mov	r3, r0
 8003b54:	71fb      	strb	r3, [r7, #7]
 8003b56:	460b      	mov	r3, r1
 8003b58:	71bb      	strb	r3, [r7, #6]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003b5e:	79bb      	ldrb	r3, [r7, #6]
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	79f9      	ldrb	r1, [r7, #7]
 8003b64:	2301      	movs	r3, #1
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	1d7b      	adds	r3, r7, #5
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	4803      	ldr	r0, [pc, #12]	@ (8003b7c <SENSOR_IO_Write+0x30>)
 8003b70:	f000 f8f5 	bl	8003d5e <I2Cx_WriteMultiple>
}
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20001e14 	.word	0x20001e14

08003b80 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	4603      	mov	r3, r0
 8003b88:	460a      	mov	r2, r1
 8003b8a:	71fb      	strb	r3, [r7, #7]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003b94:	79bb      	ldrb	r3, [r7, #6]
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	79f9      	ldrb	r1, [r7, #7]
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	9301      	str	r3, [sp, #4]
 8003b9e:	f107 030f 	add.w	r3, r7, #15
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	4804      	ldr	r0, [pc, #16]	@ (8003bb8 <SENSOR_IO_Read+0x38>)
 8003ba8:	f000 f8ac 	bl	8003d04 <I2Cx_ReadMultiple>

  return read_value;
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20001e14 	.word	0x20001e14

08003bbc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	603a      	str	r2, [r7, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	71bb      	strb	r3, [r7, #6]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003bd2:	79bb      	ldrb	r3, [r7, #6]
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	79f9      	ldrb	r1, [r7, #7]
 8003bd8:	88bb      	ldrh	r3, [r7, #4]
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	2301      	movs	r3, #1
 8003be2:	4804      	ldr	r0, [pc, #16]	@ (8003bf4 <SENSOR_IO_ReadMultiple+0x38>)
 8003be4:	f000 f88e 	bl	8003d04 <I2Cx_ReadMultiple>
 8003be8:	4603      	mov	r3, r0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20001e14 	.word	0x20001e14

08003bf8 <I2Cx_Init>:
 * @brief  Initializes I2C HAL.
 * @param  i2c_handler  I2C handler
 * @retval None
 */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance = DISCOVERY_I2Cx;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a12      	ldr	r2, [pc, #72]	@ (8003c4c <I2Cx_Init+0x54>)
 8003c04:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing = DISCOVERY_I2Cx_TIMING;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a11      	ldr	r2, [pc, #68]	@ (8003c50 <I2Cx_Init+0x58>)
 8003c0a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1 = 0;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2 = 0;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f80f 	bl	8003c54 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f001 f8e1 	bl	8004dfe <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f001 fe98 	bl	8005974 <HAL_I2CEx_ConfigAnalogFilter>
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40005800 	.word	0x40005800
 8003c50:	00702681 	.word	0x00702681

08003c54 <I2Cx_MspInit>:



static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08a      	sub	sp, #40	@ 0x28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003c5c:	4b27      	ldr	r3, [pc, #156]	@ (8003cfc <I2Cx_MspInit+0xa8>)
 8003c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c60:	4a26      	ldr	r2, [pc, #152]	@ (8003cfc <I2Cx_MspInit+0xa8>)
 8003c62:	f043 0302 	orr.w	r3, r3, #2
 8003c66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c68:	4b24      	ldr	r3, [pc, #144]	@ (8003cfc <I2Cx_MspInit+0xa8>)
 8003c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8003c74:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003c78:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003c7a:	2312      	movs	r3, #18
 8003c7c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c82:	2303      	movs	r3, #3
 8003c84:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003c86:	2304      	movs	r3, #4
 8003c88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003c8a:	f107 0314 	add.w	r3, r7, #20
 8003c8e:	4619      	mov	r1, r3
 8003c90:	481b      	ldr	r0, [pc, #108]	@ (8003d00 <I2Cx_MspInit+0xac>)
 8003c92:	f000 fda9 	bl	80047e8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003c96:	f107 0314 	add.w	r3, r7, #20
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4818      	ldr	r0, [pc, #96]	@ (8003d00 <I2Cx_MspInit+0xac>)
 8003c9e:	f000 fda3 	bl	80047e8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8003ca2:	4b16      	ldr	r3, [pc, #88]	@ (8003cfc <I2Cx_MspInit+0xa8>)
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca6:	4a15      	ldr	r2, [pc, #84]	@ (8003cfc <I2Cx_MspInit+0xa8>)
 8003ca8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003cac:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cae:	4b13      	ldr	r3, [pc, #76]	@ (8003cfc <I2Cx_MspInit+0xa8>)
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003cba:	4b10      	ldr	r3, [pc, #64]	@ (8003cfc <I2Cx_MspInit+0xa8>)
 8003cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cbe:	4a0f      	ldr	r2, [pc, #60]	@ (8003cfc <I2Cx_MspInit+0xa8>)
 8003cc0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003cc4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cfc <I2Cx_MspInit+0xa8>)
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cca:	4a0c      	ldr	r2, [pc, #48]	@ (8003cfc <I2Cx_MspInit+0xa8>)
 8003ccc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003cd0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	210f      	movs	r1, #15
 8003cd6:	2021      	movs	r0, #33	@ 0x21
 8003cd8:	f000 fbf2 	bl	80044c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003cdc:	2021      	movs	r0, #33	@ 0x21
 8003cde:	f000 fc0b 	bl	80044f8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	210f      	movs	r1, #15
 8003ce6:	2022      	movs	r0, #34	@ 0x22
 8003ce8:	f000 fbea 	bl	80044c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003cec:	2022      	movs	r0, #34	@ 0x22
 8003cee:	f000 fc03 	bl	80044f8 <HAL_NVIC_EnableIRQ>
}
 8003cf2:	bf00      	nop
 8003cf4:	3728      	adds	r7, #40	@ 0x28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	48000400 	.word	0x48000400

08003d04 <I2Cx_ReadMultiple>:
 * @param  Buffer  Pointer to data buffer
 * @param  Length  Length of the data
 * @retval HAL status
 */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	@ 0x28
 8003d08:	af04      	add	r7, sp, #16
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	4608      	mov	r0, r1
 8003d0e:	4611      	mov	r1, r2
 8003d10:	461a      	mov	r2, r3
 8003d12:	4603      	mov	r3, r0
 8003d14:	72fb      	strb	r3, [r7, #11]
 8003d16:	460b      	mov	r3, r1
 8003d18:	813b      	strh	r3, [r7, #8]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003d22:	7afb      	ldrb	r3, [r7, #11]
 8003d24:	b299      	uxth	r1, r3
 8003d26:	88f8      	ldrh	r0, [r7, #6]
 8003d28:	893a      	ldrh	r2, [r7, #8]
 8003d2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d2e:	9302      	str	r3, [sp, #8]
 8003d30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d32:	9301      	str	r3, [sp, #4]
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	4603      	mov	r3, r0
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f001 fa3e 	bl	80051bc <HAL_I2C_Mem_Read>
 8003d40:	4603      	mov	r3, r0
 8003d42:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d004      	beq.n	8003d54 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003d4a:	7afb      	ldrb	r3, [r7, #11]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f832 	bl	8003db8 <I2Cx_Error>
  }
  return status;
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <I2Cx_WriteMultiple>:
 * @param  Buffer  The target register value to be written
 * @param  Length  buffer size to be written
 * @retval HAL status
 */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b08a      	sub	sp, #40	@ 0x28
 8003d62:	af04      	add	r7, sp, #16
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	4608      	mov	r0, r1
 8003d68:	4611      	mov	r1, r2
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	72fb      	strb	r3, [r7, #11]
 8003d70:	460b      	mov	r3, r1
 8003d72:	813b      	strh	r3, [r7, #8]
 8003d74:	4613      	mov	r3, r2
 8003d76:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003d7c:	7afb      	ldrb	r3, [r7, #11]
 8003d7e:	b299      	uxth	r1, r3
 8003d80:	88f8      	ldrh	r0, [r7, #6]
 8003d82:	893a      	ldrh	r2, [r7, #8]
 8003d84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d88:	9302      	str	r3, [sp, #8]
 8003d8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	4603      	mov	r3, r0
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f001 f8fd 	bl	8004f94 <HAL_I2C_Mem_Write>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8003d9e:	7dfb      	ldrb	r3, [r7, #23]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d004      	beq.n	8003dae <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003da4:	7afb      	ldrb	r3, [r7, #11]
 8003da6:	4619      	mov	r1, r3
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f805 	bl	8003db8 <I2Cx_Error>
  }
  return status;
 8003dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <I2Cx_Error>:
 * @param  i2c_handler  I2C handler
 * @param  Addr  I2C Address
 * @retval None
 */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f001 f8b5 	bl	8004f34 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff ff14 	bl	8003bf8 <I2Cx_Init>
}
 8003dd0:	bf00      	nop
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003dde:	2300      	movs	r3, #0
 8003de0:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8003de2:	4b12      	ldr	r3, [pc, #72]	@ (8003e2c <BSP_SPI3_Init+0x54>)
 8003de4:	4a12      	ldr	r2, [pc, #72]	@ (8003e30 <BSP_SPI3_Init+0x58>)
 8003de6:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 8003de8:	4b12      	ldr	r3, [pc, #72]	@ (8003e34 <BSP_SPI3_Init+0x5c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	4911      	ldr	r1, [pc, #68]	@ (8003e34 <BSP_SPI3_Init+0x5c>)
 8003df0:	600a      	str	r2, [r1, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d114      	bne.n	8003e20 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 8003df6:	480d      	ldr	r0, [pc, #52]	@ (8003e2c <BSP_SPI3_Init+0x54>)
 8003df8:	f003 fe44 	bl	8007a84 <HAL_SPI_GetState>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10e      	bne.n	8003e20 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 8003e02:	480a      	ldr	r0, [pc, #40]	@ (8003e2c <BSP_SPI3_Init+0x54>)
 8003e04:	f000 f882 	bl	8003f0c <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d108      	bne.n	8003e20 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 8003e0e:	4807      	ldr	r0, [pc, #28]	@ (8003e2c <BSP_SPI3_Init+0x54>)
 8003e10:	f000 f83a 	bl	8003e88 <MX_SPI3_Init>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8003e1a:	f06f 0307 	mvn.w	r3, #7
 8003e1e:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8003e20:	687b      	ldr	r3, [r7, #4]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20001e68 	.word	0x20001e68
 8003e30:	40003c00 	.word	0x40003c00
 8003e34:	20001ecc 	.word	0x20001ecc

08003e38 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	4613      	mov	r3, r2
 8003e44:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 8003e4a:	88fb      	ldrh	r3, [r7, #6]
 8003e4c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e50:	9200      	str	r2, [sp, #0]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	68f9      	ldr	r1, [r7, #12]
 8003e56:	4807      	ldr	r0, [pc, #28]	@ (8003e74 <BSP_SPI3_SendRecv+0x3c>)
 8003e58:	f003 fbf5 	bl	8007646 <HAL_SPI_TransmitReceive>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003e62:	f06f 0305 	mvn.w	r3, #5
 8003e66:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003e68:	697b      	ldr	r3, [r7, #20]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20001e68 	.word	0x20001e68

08003e78 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003e7c:	f000 fa38 	bl	80042f0 <HAL_GetTick>
 8003e80:	4603      	mov	r3, r0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a1c      	ldr	r2, [pc, #112]	@ (8003f08 <MX_SPI3_Init+0x80>)
 8003e98:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ea0:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003eae:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ec2:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2207      	movs	r2, #7
 8003ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2208      	movs	r2, #8
 8003eec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f003 fafc 	bl	80074ec <HAL_SPI_Init>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40003c00 	.word	0x40003c00

08003f0c <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	@ 0x28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003f14:	4b27      	ldr	r3, [pc, #156]	@ (8003fb4 <SPI3_MspInit+0xa8>)
 8003f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f18:	4a26      	ldr	r2, [pc, #152]	@ (8003fb4 <SPI3_MspInit+0xa8>)
 8003f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f20:	4b24      	ldr	r3, [pc, #144]	@ (8003fb4 <SPI3_MspInit+0xa8>)
 8003f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f2c:	4b21      	ldr	r3, [pc, #132]	@ (8003fb4 <SPI3_MspInit+0xa8>)
 8003f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f30:	4a20      	ldr	r2, [pc, #128]	@ (8003fb4 <SPI3_MspInit+0xa8>)
 8003f32:	f043 0304 	orr.w	r3, r3, #4
 8003f36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f38:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb4 <SPI3_MspInit+0xa8>)
 8003f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8003f44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f52:	2303      	movs	r3, #3
 8003f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 8003f56:	2306      	movs	r3, #6
 8003f58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003f5a:	f107 0314 	add.w	r3, r7, #20
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4815      	ldr	r0, [pc, #84]	@ (8003fb8 <SPI3_MspInit+0xac>)
 8003f62:	f000 fc41 	bl	80047e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 8003f66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f74:	2303      	movs	r3, #3
 8003f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8003f78:	2306      	movs	r3, #6
 8003f7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003f7c:	f107 0314 	add.w	r3, r7, #20
 8003f80:	4619      	mov	r1, r3
 8003f82:	480d      	ldr	r0, [pc, #52]	@ (8003fb8 <SPI3_MspInit+0xac>)
 8003f84:	f000 fc30 	bl	80047e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8003f88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f96:	2303      	movs	r3, #3
 8003f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8003f9a:	2306      	movs	r3, #6
 8003f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003f9e:	f107 0314 	add.w	r3, r7, #20
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4804      	ldr	r0, [pc, #16]	@ (8003fb8 <SPI3_MspInit+0xac>)
 8003fa6:	f000 fc1f 	bl	80047e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8003faa:	bf00      	nop
 8003fac:	3728      	adds	r7, #40	@ 0x28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	48000800 	.word	0x48000800

08003fbc <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003fca:	2110      	movs	r1, #16
 8003fcc:	20d4      	movs	r0, #212	@ 0xd4
 8003fce:	f7ff fdd7 	bl	8003b80 <SENSOR_IO_Read>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003fda:	7bbb      	ldrb	r3, [r7, #14]
 8003fdc:	f003 0303 	and.w	r3, r3, #3
 8003fe0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003fe2:	7bba      	ldrb	r2, [r7, #14]
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8003fea:	7bbb      	ldrb	r3, [r7, #14]
 8003fec:	461a      	mov	r2, r3
 8003fee:	2110      	movs	r1, #16
 8003ff0:	20d4      	movs	r0, #212	@ 0xd4
 8003ff2:	f7ff fdab 	bl	8003b4c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003ff6:	2112      	movs	r1, #18
 8003ff8:	20d4      	movs	r0, #212	@ 0xd4
 8003ffa:	f7ff fdc1 	bl	8003b80 <SENSOR_IO_Read>
 8003ffe:	4603      	mov	r3, r0
 8004000:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	0a1b      	lsrs	r3, r3, #8
 8004006:	b29b      	uxth	r3, r3
 8004008:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800400a:	7bbb      	ldrb	r3, [r7, #14]
 800400c:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8004010:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8004012:	7bba      	ldrb	r2, [r7, #14]
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	4313      	orrs	r3, r2
 8004018:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800401a:	7bbb      	ldrb	r3, [r7, #14]
 800401c:	461a      	mov	r2, r3
 800401e:	2112      	movs	r1, #18
 8004020:	20d4      	movs	r0, #212	@ 0xd4
 8004022:	f7ff fd93 	bl	8003b4c <SENSOR_IO_Write>
}
 8004026:	bf00      	nop
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8004034:	2300      	movs	r3, #0
 8004036:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004038:	2110      	movs	r1, #16
 800403a:	20d4      	movs	r0, #212	@ 0xd4
 800403c:	f7ff fda0 	bl	8003b80 <SENSOR_IO_Read>
 8004040:	4603      	mov	r3, r0
 8004042:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8004044:	79fb      	ldrb	r3, [r7, #7]
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	461a      	mov	r2, r3
 8004050:	2110      	movs	r1, #16
 8004052:	20d4      	movs	r0, #212	@ 0xd4
 8004054:	f7ff fd7a 	bl	8003b4c <SENSOR_IO_Write>
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8004064:	f7ff fd68 	bl	8003b38 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8004068:	210f      	movs	r1, #15
 800406a:	20d4      	movs	r0, #212	@ 0xd4
 800406c:	f7ff fd88 	bl	8003b80 <SENSOR_IO_Read>
 8004070:	4603      	mov	r3, r0
}
 8004072:	4618      	mov	r0, r3
 8004074:	bd80      	pop	{r7, pc}

08004076 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	4603      	mov	r3, r0
 800407e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8004080:	2300      	movs	r3, #0
 8004082:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8004084:	2115      	movs	r1, #21
 8004086:	20d4      	movs	r0, #212	@ 0xd4
 8004088:	f7ff fd7a 	bl	8003b80 <SENSOR_IO_Read>
 800408c:	4603      	mov	r3, r0
 800408e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	f023 0310 	bic.w	r3, r3, #16
 8004096:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	f043 0310 	orr.w	r3, r3, #16
 80040a4:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
 80040a8:	461a      	mov	r2, r3
 80040aa:	2115      	movs	r1, #21
 80040ac:	20d4      	movs	r0, #212	@ 0xd4
 80040ae:	f7ff fd4d 	bl	8003b4c <SENSOR_IO_Write>
}
 80040b2:	bf00      	nop
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80040d2:	2110      	movs	r1, #16
 80040d4:	20d4      	movs	r0, #212	@ 0xd4
 80040d6:	f7ff fd53 	bl	8003b80 <SENSOR_IO_Read>
 80040da:	4603      	mov	r3, r0
 80040dc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80040de:	f107 0208 	add.w	r2, r7, #8
 80040e2:	2306      	movs	r3, #6
 80040e4:	2128      	movs	r1, #40	@ 0x28
 80040e6:	20d4      	movs	r0, #212	@ 0xd4
 80040e8:	f7ff fd68 	bl	8003bbc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80040ec:	2300      	movs	r3, #0
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	e01a      	b.n	8004128 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80040f2:	7ffb      	ldrb	r3, [r7, #31]
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	3301      	adds	r3, #1
 80040f8:	3320      	adds	r3, #32
 80040fa:	443b      	add	r3, r7
 80040fc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004100:	021b      	lsls	r3, r3, #8
 8004102:	b29b      	uxth	r3, r3
 8004104:	7ffa      	ldrb	r2, [r7, #31]
 8004106:	0052      	lsls	r2, r2, #1
 8004108:	3220      	adds	r2, #32
 800410a:	443a      	add	r2, r7
 800410c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8004110:	4413      	add	r3, r2
 8004112:	b29a      	uxth	r2, r3
 8004114:	7ffb      	ldrb	r3, [r7, #31]
 8004116:	b212      	sxth	r2, r2
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	3320      	adds	r3, #32
 800411c:	443b      	add	r3, r7
 800411e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8004122:	7ffb      	ldrb	r3, [r7, #31]
 8004124:	3301      	adds	r3, #1
 8004126:	77fb      	strb	r3, [r7, #31]
 8004128:	7ffb      	ldrb	r3, [r7, #31]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d9e1      	bls.n	80040f2 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800412e:	7dfb      	ldrb	r3, [r7, #23]
 8004130:	f003 030c 	and.w	r3, r3, #12
 8004134:	2b0c      	cmp	r3, #12
 8004136:	d829      	bhi.n	800418c <LSM6DSL_AccReadXYZ+0xd0>
 8004138:	a201      	add	r2, pc, #4	@ (adr r2, 8004140 <LSM6DSL_AccReadXYZ+0x84>)
 800413a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413e:	bf00      	nop
 8004140:	08004175 	.word	0x08004175
 8004144:	0800418d 	.word	0x0800418d
 8004148:	0800418d 	.word	0x0800418d
 800414c:	0800418d 	.word	0x0800418d
 8004150:	08004187 	.word	0x08004187
 8004154:	0800418d 	.word	0x0800418d
 8004158:	0800418d 	.word	0x0800418d
 800415c:	0800418d 	.word	0x0800418d
 8004160:	0800417b 	.word	0x0800417b
 8004164:	0800418d 	.word	0x0800418d
 8004168:	0800418d 	.word	0x0800418d
 800416c:	0800418d 	.word	0x0800418d
 8004170:	08004181 	.word	0x08004181
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8004174:	4b18      	ldr	r3, [pc, #96]	@ (80041d8 <LSM6DSL_AccReadXYZ+0x11c>)
 8004176:	61bb      	str	r3, [r7, #24]
    break;
 8004178:	e008      	b.n	800418c <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800417a:	4b18      	ldr	r3, [pc, #96]	@ (80041dc <LSM6DSL_AccReadXYZ+0x120>)
 800417c:	61bb      	str	r3, [r7, #24]
    break;
 800417e:	e005      	b.n	800418c <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8004180:	4b17      	ldr	r3, [pc, #92]	@ (80041e0 <LSM6DSL_AccReadXYZ+0x124>)
 8004182:	61bb      	str	r3, [r7, #24]
    break;
 8004184:	e002      	b.n	800418c <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8004186:	4b17      	ldr	r3, [pc, #92]	@ (80041e4 <LSM6DSL_AccReadXYZ+0x128>)
 8004188:	61bb      	str	r3, [r7, #24]
    break;    
 800418a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800418c:	2300      	movs	r3, #0
 800418e:	77fb      	strb	r3, [r7, #31]
 8004190:	e01a      	b.n	80041c8 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8004192:	7ffb      	ldrb	r3, [r7, #31]
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	3320      	adds	r3, #32
 8004198:	443b      	add	r3, r7
 800419a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800419e:	ee07 3a90 	vmov	s15, r3
 80041a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80041aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ae:	7ffb      	ldrb	r3, [r7, #31]
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	4413      	add	r3, r2
 80041b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041ba:	ee17 2a90 	vmov	r2, s15
 80041be:	b212      	sxth	r2, r2
 80041c0:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80041c2:	7ffb      	ldrb	r3, [r7, #31]
 80041c4:	3301      	adds	r3, #1
 80041c6:	77fb      	strb	r3, [r7, #31]
 80041c8:	7ffb      	ldrb	r3, [r7, #31]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d9e1      	bls.n	8004192 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 80041ce:	bf00      	nop
 80041d0:	bf00      	nop
 80041d2:	3720      	adds	r7, #32
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	3d79db23 	.word	0x3d79db23
 80041dc:	3df9db23 	.word	0x3df9db23
 80041e0:	3e79db23 	.word	0x3e79db23
 80041e4:	3ef9db23 	.word	0x3ef9db23

080041e8 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80041f2:	2300      	movs	r3, #0
 80041f4:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80041f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004260 <BSP_ACCELERO_Init+0x78>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	4798      	blx	r3
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b6a      	cmp	r3, #106	@ 0x6a
 8004200:	d002      	beq.n	8004208 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
 8004206:	e025      	b.n	8004254 <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8004208:	4b16      	ldr	r3, [pc, #88]	@ (8004264 <BSP_ACCELERO_Init+0x7c>)
 800420a:	4a15      	ldr	r2, [pc, #84]	@ (8004260 <BSP_ACCELERO_Init+0x78>)
 800420c:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800420e:	2330      	movs	r3, #48	@ 0x30
 8004210:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8004216:	2300      	movs	r3, #0
 8004218:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800421a:	2340      	movs	r3, #64	@ 0x40
 800421c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8004222:	2300      	movs	r3, #0
 8004224:	72fb      	strb	r3, [r7, #11]

    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8004226:	797a      	ldrb	r2, [r7, #5]
 8004228:	7abb      	ldrb	r3, [r7, #10]
 800422a:	4313      	orrs	r3, r2
 800422c:	b2db      	uxtb	r3, r3
 800422e:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8004230:	7a3b      	ldrb	r3, [r7, #8]
 8004232:	f043 0304 	orr.w	r3, r3, #4
 8004236:	b2db      	uxtb	r3, r3
 8004238:	b21b      	sxth	r3, r3
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	b21a      	sxth	r2, r3
 800423e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	b21b      	sxth	r3, r3
 8004246:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8004248:	4b06      	ldr	r3, [pc, #24]	@ (8004264 <BSP_ACCELERO_Init+0x7c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	89ba      	ldrh	r2, [r7, #12]
 8004250:	4610      	mov	r0, r2
 8004252:	4798      	blx	r3
  }

  return ret;
 8004254:	7bfb      	ldrb	r3, [r7, #15]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20000030 	.word	0x20000030
 8004264:	20001ed0 	.word	0x20001ed0

08004268 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8004270:	4b08      	ldr	r3, [pc, #32]	@ (8004294 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d009      	beq.n	800428c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8004278:	4b06      	ldr	r3, [pc, #24]	@ (8004294 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427e:	2b00      	cmp	r3, #0
 8004280:	d004      	beq.n	800428c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8004282:	4b04      	ldr	r3, [pc, #16]	@ (8004294 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
    }
  }
}
 800428c:	bf00      	nop
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20001ed0 	.word	0x20001ed0

08004298 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042a2:	2003      	movs	r0, #3
 80042a4:	f000 f901 	bl	80044aa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042a8:	200f      	movs	r0, #15
 80042aa:	f7ff f95b 	bl	8003564 <HAL_InitTick>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	71fb      	strb	r3, [r7, #7]
 80042b8:	e001      	b.n	80042be <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80042ba:	f7fe fec1 	bl	8003040 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80042be:	79fb      	ldrb	r3, [r7, #7]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80042cc:	4b06      	ldr	r3, [pc, #24]	@ (80042e8 <HAL_IncTick+0x20>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	4b06      	ldr	r3, [pc, #24]	@ (80042ec <HAL_IncTick+0x24>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4413      	add	r3, r2
 80042d8:	4a04      	ldr	r2, [pc, #16]	@ (80042ec <HAL_IncTick+0x24>)
 80042da:	6013      	str	r3, [r2, #0]
}
 80042dc:	bf00      	nop
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	20000068 	.word	0x20000068
 80042ec:	20001ed4 	.word	0x20001ed4

080042f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  return uwTick;
 80042f4:	4b03      	ldr	r3, [pc, #12]	@ (8004304 <HAL_GetTick+0x14>)
 80042f6:	681b      	ldr	r3, [r3, #0]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	20001ed4 	.word	0x20001ed4

08004308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004310:	f7ff ffee 	bl	80042f0 <HAL_GetTick>
 8004314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d005      	beq.n	800432e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004322:	4b0a      	ldr	r3, [pc, #40]	@ (800434c <HAL_Delay+0x44>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800432e:	bf00      	nop
 8004330:	f7ff ffde 	bl	80042f0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	429a      	cmp	r2, r3
 800433e:	d8f7      	bhi.n	8004330 <HAL_Delay+0x28>
  {
  }
}
 8004340:	bf00      	nop
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000068 	.word	0x20000068

08004350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004360:	4b0c      	ldr	r3, [pc, #48]	@ (8004394 <__NVIC_SetPriorityGrouping+0x44>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800436c:	4013      	ands	r3, r2
 800436e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004378:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800437c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004382:	4a04      	ldr	r2, [pc, #16]	@ (8004394 <__NVIC_SetPriorityGrouping+0x44>)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	60d3      	str	r3, [r2, #12]
}
 8004388:	bf00      	nop
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	e000ed00 	.word	0xe000ed00

08004398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800439c:	4b04      	ldr	r3, [pc, #16]	@ (80043b0 <__NVIC_GetPriorityGrouping+0x18>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	0a1b      	lsrs	r3, r3, #8
 80043a2:	f003 0307 	and.w	r3, r3, #7
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	e000ed00 	.word	0xe000ed00

080043b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	4603      	mov	r3, r0
 80043bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	db0b      	blt.n	80043de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	f003 021f 	and.w	r2, r3, #31
 80043cc:	4907      	ldr	r1, [pc, #28]	@ (80043ec <__NVIC_EnableIRQ+0x38>)
 80043ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	2001      	movs	r0, #1
 80043d6:	fa00 f202 	lsl.w	r2, r0, r2
 80043da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	e000e100 	.word	0xe000e100

080043f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	6039      	str	r1, [r7, #0]
 80043fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004400:	2b00      	cmp	r3, #0
 8004402:	db0a      	blt.n	800441a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	b2da      	uxtb	r2, r3
 8004408:	490c      	ldr	r1, [pc, #48]	@ (800443c <__NVIC_SetPriority+0x4c>)
 800440a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440e:	0112      	lsls	r2, r2, #4
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	440b      	add	r3, r1
 8004414:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004418:	e00a      	b.n	8004430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	b2da      	uxtb	r2, r3
 800441e:	4908      	ldr	r1, [pc, #32]	@ (8004440 <__NVIC_SetPriority+0x50>)
 8004420:	79fb      	ldrb	r3, [r7, #7]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	3b04      	subs	r3, #4
 8004428:	0112      	lsls	r2, r2, #4
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	440b      	add	r3, r1
 800442e:	761a      	strb	r2, [r3, #24]
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	e000e100 	.word	0xe000e100
 8004440:	e000ed00 	.word	0xe000ed00

08004444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004444:	b480      	push	{r7}
 8004446:	b089      	sub	sp, #36	@ 0x24
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f1c3 0307 	rsb	r3, r3, #7
 800445e:	2b04      	cmp	r3, #4
 8004460:	bf28      	it	cs
 8004462:	2304      	movcs	r3, #4
 8004464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	3304      	adds	r3, #4
 800446a:	2b06      	cmp	r3, #6
 800446c:	d902      	bls.n	8004474 <NVIC_EncodePriority+0x30>
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	3b03      	subs	r3, #3
 8004472:	e000      	b.n	8004476 <NVIC_EncodePriority+0x32>
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004478:	f04f 32ff 	mov.w	r2, #4294967295
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43da      	mvns	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	401a      	ands	r2, r3
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800448c:	f04f 31ff 	mov.w	r1, #4294967295
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	fa01 f303 	lsl.w	r3, r1, r3
 8004496:	43d9      	mvns	r1, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800449c:	4313      	orrs	r3, r2
         );
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3724      	adds	r7, #36	@ 0x24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7ff ff4c 	bl	8004350 <__NVIC_SetPriorityGrouping>
}
 80044b8:	bf00      	nop
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044d2:	f7ff ff61 	bl	8004398 <__NVIC_GetPriorityGrouping>
 80044d6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	68b9      	ldr	r1, [r7, #8]
 80044dc:	6978      	ldr	r0, [r7, #20]
 80044de:	f7ff ffb1 	bl	8004444 <NVIC_EncodePriority>
 80044e2:	4602      	mov	r2, r0
 80044e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044e8:	4611      	mov	r1, r2
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff ff80 	bl	80043f0 <__NVIC_SetPriority>
}
 80044f0:	bf00      	nop
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff ff54 	bl	80043b4 <__NVIC_EnableIRQ>
}
 800450c:	bf00      	nop
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e0ac      	b.n	8004680 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f000 f8b2 	bl	8004694 <DFSDM_GetChannelFromInstance>
 8004530:	4603      	mov	r3, r0
 8004532:	4a55      	ldr	r2, [pc, #340]	@ (8004688 <HAL_DFSDM_ChannelInit+0x174>)
 8004534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e09f      	b.n	8004680 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7fe fda5 	bl	8003090 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004546:	4b51      	ldr	r3, [pc, #324]	@ (800468c <HAL_DFSDM_ChannelInit+0x178>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3301      	adds	r3, #1
 800454c:	4a4f      	ldr	r2, [pc, #316]	@ (800468c <HAL_DFSDM_ChannelInit+0x178>)
 800454e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004550:	4b4e      	ldr	r3, [pc, #312]	@ (800468c <HAL_DFSDM_ChannelInit+0x178>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d125      	bne.n	80045a4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004558:	4b4d      	ldr	r3, [pc, #308]	@ (8004690 <HAL_DFSDM_ChannelInit+0x17c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a4c      	ldr	r2, [pc, #304]	@ (8004690 <HAL_DFSDM_ChannelInit+0x17c>)
 800455e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004562:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004564:	4b4a      	ldr	r3, [pc, #296]	@ (8004690 <HAL_DFSDM_ChannelInit+0x17c>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	4948      	ldr	r1, [pc, #288]	@ (8004690 <HAL_DFSDM_ChannelInit+0x17c>)
 800456e:	4313      	orrs	r3, r2
 8004570:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004572:	4b47      	ldr	r3, [pc, #284]	@ (8004690 <HAL_DFSDM_ChannelInit+0x17c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a46      	ldr	r2, [pc, #280]	@ (8004690 <HAL_DFSDM_ChannelInit+0x17c>)
 8004578:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800457c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	791b      	ldrb	r3, [r3, #4]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d108      	bne.n	8004598 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8004586:	4b42      	ldr	r3, [pc, #264]	@ (8004690 <HAL_DFSDM_ChannelInit+0x17c>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	3b01      	subs	r3, #1
 8004590:	041b      	lsls	r3, r3, #16
 8004592:	493f      	ldr	r1, [pc, #252]	@ (8004690 <HAL_DFSDM_ChannelInit+0x17c>)
 8004594:	4313      	orrs	r3, r2
 8004596:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004598:	4b3d      	ldr	r3, [pc, #244]	@ (8004690 <HAL_DFSDM_ChannelInit+0x17c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a3c      	ldr	r2, [pc, #240]	@ (8004690 <HAL_DFSDM_ChannelInit+0x17c>)
 800459e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80045a2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80045b2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6819      	ldr	r1, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80045c2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80045c8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 020f 	bic.w	r2, r2, #15
 80045e0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6819      	ldr	r1, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8004608:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6899      	ldr	r1, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004618:	3b01      	subs	r3, #1
 800461a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800461c:	431a      	orrs	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f002 0207 	and.w	r2, r2, #7
 8004634:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6859      	ldr	r1, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004640:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004646:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004660:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f810 	bl	8004694 <DFSDM_GetChannelFromInstance>
 8004674:	4602      	mov	r2, r0
 8004676:	4904      	ldr	r1, [pc, #16]	@ (8004688 <HAL_DFSDM_ChannelInit+0x174>)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	20001edc 	.word	0x20001edc
 800468c:	20001ed8 	.word	0x20001ed8
 8004690:	40016000 	.word	0x40016000

08004694 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a1c      	ldr	r2, [pc, #112]	@ (8004710 <DFSDM_GetChannelFromInstance+0x7c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d102      	bne.n	80046aa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e02b      	b.n	8004702 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a19      	ldr	r2, [pc, #100]	@ (8004714 <DFSDM_GetChannelFromInstance+0x80>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d102      	bne.n	80046b8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80046b2:	2301      	movs	r3, #1
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	e024      	b.n	8004702 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a17      	ldr	r2, [pc, #92]	@ (8004718 <DFSDM_GetChannelFromInstance+0x84>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d102      	bne.n	80046c6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80046c0:	2302      	movs	r3, #2
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	e01d      	b.n	8004702 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a14      	ldr	r2, [pc, #80]	@ (800471c <DFSDM_GetChannelFromInstance+0x88>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d102      	bne.n	80046d4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80046ce:	2304      	movs	r3, #4
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	e016      	b.n	8004702 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a12      	ldr	r2, [pc, #72]	@ (8004720 <DFSDM_GetChannelFromInstance+0x8c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d102      	bne.n	80046e2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80046dc:	2305      	movs	r3, #5
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	e00f      	b.n	8004702 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004724 <DFSDM_GetChannelFromInstance+0x90>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d102      	bne.n	80046f0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80046ea:	2306      	movs	r3, #6
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	e008      	b.n	8004702 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a0d      	ldr	r2, [pc, #52]	@ (8004728 <DFSDM_GetChannelFromInstance+0x94>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d102      	bne.n	80046fe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80046f8:	2307      	movs	r3, #7
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	e001      	b.n	8004702 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80046fe:	2303      	movs	r3, #3
 8004700:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004702:	68fb      	ldr	r3, [r7, #12]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	40016000 	.word	0x40016000
 8004714:	40016020 	.word	0x40016020
 8004718:	40016040 	.word	0x40016040
 800471c:	40016080 	.word	0x40016080
 8004720:	400160a0 	.word	0x400160a0
 8004724:	400160c0 	.word	0x400160c0
 8004728:	400160e0 	.word	0x400160e0

0800472c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	460b      	mov	r3, r1
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800473e:	7afb      	ldrb	r3, [r7, #11]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d103      	bne.n	800474c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	605a      	str	r2, [r3, #4]
      break;
 800474a:	e002      	b.n	8004752 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	75fb      	strb	r3, [r7, #23]
      break;
 8004750:	bf00      	nop
  }

  return status;
 8004752:	7dfb      	ldrb	r3, [r7, #23]
}
 8004754:	4618      	mov	r0, r3
 8004756:	371c      	adds	r7, #28
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e003      	b.n	800477c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800477a:	2300      	movs	r3, #0
  }
}
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	0c1b      	lsrs	r3, r3, #16
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	2201      	movs	r2, #1
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	4b0c      	ldr	r3, [pc, #48]	@ (80047e4 <HAL_EXTI_IRQHandler+0x5c>)
 80047b2:	4413      	add	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4013      	ands	r3, r2
 80047be:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	4798      	blx	r3
    }
  }
}
 80047da:	bf00      	nop
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40010414 	.word	0x40010414

080047e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047f6:	e17f      	b.n	8004af8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	2101      	movs	r1, #1
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	fa01 f303 	lsl.w	r3, r1, r3
 8004804:	4013      	ands	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8171 	beq.w	8004af2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d005      	beq.n	8004828 <HAL_GPIO_Init+0x40>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d130      	bne.n	800488a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	2203      	movs	r2, #3
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4013      	ands	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800485e:	2201      	movs	r2, #1
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4013      	ands	r3, r2
 800486c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	091b      	lsrs	r3, r3, #4
 8004874:	f003 0201 	and.w	r2, r3, #1
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b03      	cmp	r3, #3
 8004894:	d118      	bne.n	80048c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800489c:	2201      	movs	r2, #1
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	43db      	mvns	r3, r3
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4013      	ands	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	08db      	lsrs	r3, r3, #3
 80048b2:	f003 0201 	and.w	r2, r3, #1
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d017      	beq.n	8004904 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	2203      	movs	r2, #3
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	43db      	mvns	r3, r3
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4013      	ands	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d123      	bne.n	8004958 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	08da      	lsrs	r2, r3, #3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3208      	adds	r2, #8
 8004918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800491c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	220f      	movs	r2, #15
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	43db      	mvns	r3, r3
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4013      	ands	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	08da      	lsrs	r2, r3, #3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3208      	adds	r2, #8
 8004952:	6939      	ldr	r1, [r7, #16]
 8004954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	2203      	movs	r2, #3
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	43db      	mvns	r3, r3
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4013      	ands	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f003 0203 	and.w	r2, r3, #3
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 80ac 	beq.w	8004af2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800499a:	4b5f      	ldr	r3, [pc, #380]	@ (8004b18 <HAL_GPIO_Init+0x330>)
 800499c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800499e:	4a5e      	ldr	r2, [pc, #376]	@ (8004b18 <HAL_GPIO_Init+0x330>)
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80049a6:	4b5c      	ldr	r3, [pc, #368]	@ (8004b18 <HAL_GPIO_Init+0x330>)
 80049a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	60bb      	str	r3, [r7, #8]
 80049b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80049b2:	4a5a      	ldr	r2, [pc, #360]	@ (8004b1c <HAL_GPIO_Init+0x334>)
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	089b      	lsrs	r3, r3, #2
 80049b8:	3302      	adds	r3, #2
 80049ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	220f      	movs	r2, #15
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43db      	mvns	r3, r3
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4013      	ands	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80049dc:	d025      	beq.n	8004a2a <HAL_GPIO_Init+0x242>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a4f      	ldr	r2, [pc, #316]	@ (8004b20 <HAL_GPIO_Init+0x338>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d01f      	beq.n	8004a26 <HAL_GPIO_Init+0x23e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a4e      	ldr	r2, [pc, #312]	@ (8004b24 <HAL_GPIO_Init+0x33c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d019      	beq.n	8004a22 <HAL_GPIO_Init+0x23a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a4d      	ldr	r2, [pc, #308]	@ (8004b28 <HAL_GPIO_Init+0x340>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d013      	beq.n	8004a1e <HAL_GPIO_Init+0x236>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a4c      	ldr	r2, [pc, #304]	@ (8004b2c <HAL_GPIO_Init+0x344>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00d      	beq.n	8004a1a <HAL_GPIO_Init+0x232>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a4b      	ldr	r2, [pc, #300]	@ (8004b30 <HAL_GPIO_Init+0x348>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d007      	beq.n	8004a16 <HAL_GPIO_Init+0x22e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a4a      	ldr	r2, [pc, #296]	@ (8004b34 <HAL_GPIO_Init+0x34c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d101      	bne.n	8004a12 <HAL_GPIO_Init+0x22a>
 8004a0e:	2306      	movs	r3, #6
 8004a10:	e00c      	b.n	8004a2c <HAL_GPIO_Init+0x244>
 8004a12:	2307      	movs	r3, #7
 8004a14:	e00a      	b.n	8004a2c <HAL_GPIO_Init+0x244>
 8004a16:	2305      	movs	r3, #5
 8004a18:	e008      	b.n	8004a2c <HAL_GPIO_Init+0x244>
 8004a1a:	2304      	movs	r3, #4
 8004a1c:	e006      	b.n	8004a2c <HAL_GPIO_Init+0x244>
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e004      	b.n	8004a2c <HAL_GPIO_Init+0x244>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e002      	b.n	8004a2c <HAL_GPIO_Init+0x244>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <HAL_GPIO_Init+0x244>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	f002 0203 	and.w	r2, r2, #3
 8004a32:	0092      	lsls	r2, r2, #2
 8004a34:	4093      	lsls	r3, r2
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a3c:	4937      	ldr	r1, [pc, #220]	@ (8004b1c <HAL_GPIO_Init+0x334>)
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	089b      	lsrs	r3, r3, #2
 8004a42:	3302      	adds	r3, #2
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b38 <HAL_GPIO_Init+0x350>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	43db      	mvns	r3, r3
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4013      	ands	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a6e:	4a32      	ldr	r2, [pc, #200]	@ (8004b38 <HAL_GPIO_Init+0x350>)
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a74:	4b30      	ldr	r3, [pc, #192]	@ (8004b38 <HAL_GPIO_Init+0x350>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4013      	ands	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a98:	4a27      	ldr	r2, [pc, #156]	@ (8004b38 <HAL_GPIO_Init+0x350>)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004a9e:	4b26      	ldr	r3, [pc, #152]	@ (8004b38 <HAL_GPIO_Init+0x350>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8004b38 <HAL_GPIO_Init+0x350>)
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b38 <HAL_GPIO_Init+0x350>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004aec:	4a12      	ldr	r2, [pc, #72]	@ (8004b38 <HAL_GPIO_Init+0x350>)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	3301      	adds	r3, #1
 8004af6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	fa22 f303 	lsr.w	r3, r2, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f47f ae78 	bne.w	80047f8 <HAL_GPIO_Init+0x10>
  }
}
 8004b08:	bf00      	nop
 8004b0a:	bf00      	nop
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	40010000 	.word	0x40010000
 8004b20:	48000400 	.word	0x48000400
 8004b24:	48000800 	.word	0x48000800
 8004b28:	48000c00 	.word	0x48000c00
 8004b2c:	48001000 	.word	0x48001000
 8004b30:	48001400 	.word	0x48001400
 8004b34:	48001800 	.word	0x48001800
 8004b38:	40010400 	.word	0x40010400

08004b3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b46:	2300      	movs	r3, #0
 8004b48:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004b4a:	e0cd      	b.n	8004ce8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	4013      	ands	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 80c0 	beq.w	8004ce2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004b62:	4a68      	ldr	r2, [pc, #416]	@ (8004d04 <HAL_GPIO_DeInit+0x1c8>)
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	089b      	lsrs	r3, r3, #2
 8004b68:	3302      	adds	r3, #2
 8004b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b6e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	220f      	movs	r2, #15
 8004b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4013      	ands	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004b8a:	d025      	beq.n	8004bd8 <HAL_GPIO_DeInit+0x9c>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a5e      	ldr	r2, [pc, #376]	@ (8004d08 <HAL_GPIO_DeInit+0x1cc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d01f      	beq.n	8004bd4 <HAL_GPIO_DeInit+0x98>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a5d      	ldr	r2, [pc, #372]	@ (8004d0c <HAL_GPIO_DeInit+0x1d0>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d019      	beq.n	8004bd0 <HAL_GPIO_DeInit+0x94>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a5c      	ldr	r2, [pc, #368]	@ (8004d10 <HAL_GPIO_DeInit+0x1d4>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d013      	beq.n	8004bcc <HAL_GPIO_DeInit+0x90>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a5b      	ldr	r2, [pc, #364]	@ (8004d14 <HAL_GPIO_DeInit+0x1d8>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d00d      	beq.n	8004bc8 <HAL_GPIO_DeInit+0x8c>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a5a      	ldr	r2, [pc, #360]	@ (8004d18 <HAL_GPIO_DeInit+0x1dc>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d007      	beq.n	8004bc4 <HAL_GPIO_DeInit+0x88>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a59      	ldr	r2, [pc, #356]	@ (8004d1c <HAL_GPIO_DeInit+0x1e0>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d101      	bne.n	8004bc0 <HAL_GPIO_DeInit+0x84>
 8004bbc:	2306      	movs	r3, #6
 8004bbe:	e00c      	b.n	8004bda <HAL_GPIO_DeInit+0x9e>
 8004bc0:	2307      	movs	r3, #7
 8004bc2:	e00a      	b.n	8004bda <HAL_GPIO_DeInit+0x9e>
 8004bc4:	2305      	movs	r3, #5
 8004bc6:	e008      	b.n	8004bda <HAL_GPIO_DeInit+0x9e>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	e006      	b.n	8004bda <HAL_GPIO_DeInit+0x9e>
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e004      	b.n	8004bda <HAL_GPIO_DeInit+0x9e>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e002      	b.n	8004bda <HAL_GPIO_DeInit+0x9e>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e000      	b.n	8004bda <HAL_GPIO_DeInit+0x9e>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	f002 0203 	and.w	r2, r2, #3
 8004be0:	0092      	lsls	r2, r2, #2
 8004be2:	4093      	lsls	r3, r2
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d132      	bne.n	8004c50 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004bea:	4b4d      	ldr	r3, [pc, #308]	@ (8004d20 <HAL_GPIO_DeInit+0x1e4>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	494b      	ldr	r1, [pc, #300]	@ (8004d20 <HAL_GPIO_DeInit+0x1e4>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004bf8:	4b49      	ldr	r3, [pc, #292]	@ (8004d20 <HAL_GPIO_DeInit+0x1e4>)
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	4947      	ldr	r1, [pc, #284]	@ (8004d20 <HAL_GPIO_DeInit+0x1e4>)
 8004c02:	4013      	ands	r3, r2
 8004c04:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004c06:	4b46      	ldr	r3, [pc, #280]	@ (8004d20 <HAL_GPIO_DeInit+0x1e4>)
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	4944      	ldr	r1, [pc, #272]	@ (8004d20 <HAL_GPIO_DeInit+0x1e4>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004c14:	4b42      	ldr	r3, [pc, #264]	@ (8004d20 <HAL_GPIO_DeInit+0x1e4>)
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	43db      	mvns	r3, r3
 8004c1c:	4940      	ldr	r1, [pc, #256]	@ (8004d20 <HAL_GPIO_DeInit+0x1e4>)
 8004c1e:	4013      	ands	r3, r2
 8004c20:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f003 0303 	and.w	r3, r3, #3
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	220f      	movs	r2, #15
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004c32:	4a34      	ldr	r2, [pc, #208]	@ (8004d04 <HAL_GPIO_DeInit+0x1c8>)
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	089b      	lsrs	r3, r3, #2
 8004c38:	3302      	adds	r3, #2
 8004c3a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	43da      	mvns	r2, r3
 8004c42:	4830      	ldr	r0, [pc, #192]	@ (8004d04 <HAL_GPIO_DeInit+0x1c8>)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	089b      	lsrs	r3, r3, #2
 8004c48:	400a      	ands	r2, r1
 8004c4a:	3302      	adds	r3, #2
 8004c4c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	2103      	movs	r1, #3
 8004c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	08da      	lsrs	r2, r3, #3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3208      	adds	r2, #8
 8004c6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	220f      	movs	r2, #15
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	08d2      	lsrs	r2, r2, #3
 8004c84:	4019      	ands	r1, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3208      	adds	r2, #8
 8004c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	2103      	movs	r1, #3
 8004c98:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	401a      	ands	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	2101      	movs	r1, #1
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	2103      	movs	r1, #3
 8004cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	401a      	ands	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	401a      	ands	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f47f af2b 	bne.w	8004b4c <HAL_GPIO_DeInit+0x10>
  }
}
 8004cf6:	bf00      	nop
 8004cf8:	bf00      	nop
 8004cfa:	371c      	adds	r7, #28
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	40010000 	.word	0x40010000
 8004d08:	48000400 	.word	0x48000400
 8004d0c:	48000800 	.word	0x48000800
 8004d10:	48000c00 	.word	0x48000c00
 8004d14:	48001000 	.word	0x48001000
 8004d18:	48001400 	.word	0x48001400
 8004d1c:	48001800 	.word	0x48001800
 8004d20:	40010400 	.word	0x40010400

08004d24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	887b      	ldrh	r3, [r7, #2]
 8004d36:	4013      	ands	r3, r2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	73fb      	strb	r3, [r7, #15]
 8004d40:	e001      	b.n	8004d46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d42:	2300      	movs	r3, #0
 8004d44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	807b      	strh	r3, [r7, #2]
 8004d60:	4613      	mov	r3, r2
 8004d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d64:	787b      	ldrb	r3, [r7, #1]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d6a:	887a      	ldrh	r2, [r7, #2]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d70:	e002      	b.n	8004d78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d72:	887a      	ldrh	r2, [r7, #2]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d96:	887a      	ldrh	r2, [r7, #2]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	041a      	lsls	r2, r3, #16
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	43d9      	mvns	r1, r3
 8004da2:	887b      	ldrh	r3, [r7, #2]
 8004da4:	400b      	ands	r3, r1
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	619a      	str	r2, [r3, #24]
}
 8004dac:	bf00      	nop
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004dc2:	4b08      	ldr	r3, [pc, #32]	@ (8004de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dc4:	695a      	ldr	r2, [r3, #20]
 8004dc6:	88fb      	ldrh	r3, [r7, #6]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d006      	beq.n	8004ddc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dce:	4a05      	ldr	r2, [pc, #20]	@ (8004de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dd0:	88fb      	ldrh	r3, [r7, #6]
 8004dd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004dd4:	88fb      	ldrh	r3, [r7, #6]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 f806 	bl	8004de8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ddc:	bf00      	nop
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40010400 	.word	0x40010400

08004de8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e08d      	b.n	8004f2c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d106      	bne.n	8004e2a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7fe f997 	bl	8003158 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2224      	movs	r2, #36	@ 0x24
 8004e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0201 	bic.w	r2, r2, #1
 8004e40:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004e4e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e5e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d107      	bne.n	8004e78 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e74:	609a      	str	r2, [r3, #8]
 8004e76:	e006      	b.n	8004e86 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004e84:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d108      	bne.n	8004ea0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e9c:	605a      	str	r2, [r3, #4]
 8004e9e:	e007      	b.n	8004eb0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004eae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ebe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ec2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ed2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69d9      	ldr	r1, [r3, #28]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1a      	ldr	r2, [r3, #32]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0201 	orr.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e021      	b.n	8004f8a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2224      	movs	r2, #36	@ 0x24
 8004f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0201 	bic.w	r2, r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fe f958 	bl	8003214 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	4608      	mov	r0, r1
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	817b      	strh	r3, [r7, #10]
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	813b      	strh	r3, [r7, #8]
 8004faa:	4613      	mov	r3, r2
 8004fac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	f040 80f9 	bne.w	80051ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_I2C_Mem_Write+0x34>
 8004fc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d105      	bne.n	8004fd4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e0ed      	b.n	80051b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_I2C_Mem_Write+0x4e>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e0e6      	b.n	80051b0 <HAL_I2C_Mem_Write+0x21c>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004fea:	f7ff f981 	bl	80042f0 <HAL_GetTick>
 8004fee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	2319      	movs	r3, #25
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 fac3 	bl	8005588 <I2C_WaitOnFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e0d1      	b.n	80051b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2221      	movs	r2, #33	@ 0x21
 8005010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2240      	movs	r2, #64	@ 0x40
 8005018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a3a      	ldr	r2, [r7, #32]
 8005026:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800502c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005034:	88f8      	ldrh	r0, [r7, #6]
 8005036:	893a      	ldrh	r2, [r7, #8]
 8005038:	8979      	ldrh	r1, [r7, #10]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	9301      	str	r3, [sp, #4]
 800503e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	4603      	mov	r3, r0
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 f9d3 	bl	80053f0 <I2C_RequestMemoryWrite>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d005      	beq.n	800505c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e0a9      	b.n	80051b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	2bff      	cmp	r3, #255	@ 0xff
 8005064:	d90e      	bls.n	8005084 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	22ff      	movs	r2, #255	@ 0xff
 800506a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005070:	b2da      	uxtb	r2, r3
 8005072:	8979      	ldrh	r1, [r7, #10]
 8005074:	2300      	movs	r3, #0
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 fc47 	bl	8005910 <I2C_TransferConfig>
 8005082:	e00f      	b.n	80050a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005092:	b2da      	uxtb	r2, r3
 8005094:	8979      	ldrh	r1, [r7, #10]
 8005096:	2300      	movs	r3, #0
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 fc36 	bl	8005910 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 fac6 	bl	800563a <I2C_WaitOnTXISFlagUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e07b      	b.n	80051b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050bc:	781a      	ldrb	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d034      	beq.n	800515c <HAL_I2C_Mem_Write+0x1c8>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d130      	bne.n	800515c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005100:	2200      	movs	r2, #0
 8005102:	2180      	movs	r1, #128	@ 0x80
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 fa3f 	bl	8005588 <I2C_WaitOnFlagUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e04d      	b.n	80051b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005118:	b29b      	uxth	r3, r3
 800511a:	2bff      	cmp	r3, #255	@ 0xff
 800511c:	d90e      	bls.n	800513c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	22ff      	movs	r2, #255	@ 0xff
 8005122:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005128:	b2da      	uxtb	r2, r3
 800512a:	8979      	ldrh	r1, [r7, #10]
 800512c:	2300      	movs	r3, #0
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 fbeb 	bl	8005910 <I2C_TransferConfig>
 800513a:	e00f      	b.n	800515c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800514a:	b2da      	uxtb	r2, r3
 800514c:	8979      	ldrh	r1, [r7, #10]
 800514e:	2300      	movs	r3, #0
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 fbda 	bl	8005910 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d19e      	bne.n	80050a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 faac 	bl	80056c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e01a      	b.n	80051b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2220      	movs	r2, #32
 8005180:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6859      	ldr	r1, [r3, #4]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	4b0a      	ldr	r3, [pc, #40]	@ (80051b8 <HAL_I2C_Mem_Write+0x224>)
 800518e:	400b      	ands	r3, r1
 8005190:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	e000      	b.n	80051b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80051ae:	2302      	movs	r3, #2
  }
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	fe00e800 	.word	0xfe00e800

080051bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	4608      	mov	r0, r1
 80051c6:	4611      	mov	r1, r2
 80051c8:	461a      	mov	r2, r3
 80051ca:	4603      	mov	r3, r0
 80051cc:	817b      	strh	r3, [r7, #10]
 80051ce:	460b      	mov	r3, r1
 80051d0:	813b      	strh	r3, [r7, #8]
 80051d2:	4613      	mov	r3, r2
 80051d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b20      	cmp	r3, #32
 80051e0:	f040 80fd 	bne.w	80053de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <HAL_I2C_Mem_Read+0x34>
 80051ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d105      	bne.n	80051fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051f6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e0f1      	b.n	80053e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_I2C_Mem_Read+0x4e>
 8005206:	2302      	movs	r3, #2
 8005208:	e0ea      	b.n	80053e0 <HAL_I2C_Mem_Read+0x224>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005212:	f7ff f86d 	bl	80042f0 <HAL_GetTick>
 8005216:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	2319      	movs	r3, #25
 800521e:	2201      	movs	r2, #1
 8005220:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 f9af 	bl	8005588 <I2C_WaitOnFlagUntilTimeout>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e0d5      	b.n	80053e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2222      	movs	r2, #34	@ 0x22
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2240      	movs	r2, #64	@ 0x40
 8005240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a3a      	ldr	r2, [r7, #32]
 800524e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005254:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800525c:	88f8      	ldrh	r0, [r7, #6]
 800525e:	893a      	ldrh	r2, [r7, #8]
 8005260:	8979      	ldrh	r1, [r7, #10]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	9301      	str	r3, [sp, #4]
 8005266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	4603      	mov	r3, r0
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 f913 	bl	8005498 <I2C_RequestMemoryRead>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d005      	beq.n	8005284 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e0ad      	b.n	80053e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005288:	b29b      	uxth	r3, r3
 800528a:	2bff      	cmp	r3, #255	@ 0xff
 800528c:	d90e      	bls.n	80052ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005298:	b2da      	uxtb	r2, r3
 800529a:	8979      	ldrh	r1, [r7, #10]
 800529c:	4b52      	ldr	r3, [pc, #328]	@ (80053e8 <HAL_I2C_Mem_Read+0x22c>)
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 fb33 	bl	8005910 <I2C_TransferConfig>
 80052aa:	e00f      	b.n	80052cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	8979      	ldrh	r1, [r7, #10]
 80052be:	4b4a      	ldr	r3, [pc, #296]	@ (80053e8 <HAL_I2C_Mem_Read+0x22c>)
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 fb22 	bl	8005910 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d2:	2200      	movs	r2, #0
 80052d4:	2104      	movs	r1, #4
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f956 	bl	8005588 <I2C_WaitOnFlagUntilTimeout>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e07c      	b.n	80053e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800530e:	b29b      	uxth	r3, r3
 8005310:	3b01      	subs	r3, #1
 8005312:	b29a      	uxth	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800531c:	b29b      	uxth	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d034      	beq.n	800538c <HAL_I2C_Mem_Read+0x1d0>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005326:	2b00      	cmp	r3, #0
 8005328:	d130      	bne.n	800538c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005330:	2200      	movs	r2, #0
 8005332:	2180      	movs	r1, #128	@ 0x80
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f927 	bl	8005588 <I2C_WaitOnFlagUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e04d      	b.n	80053e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005348:	b29b      	uxth	r3, r3
 800534a:	2bff      	cmp	r3, #255	@ 0xff
 800534c:	d90e      	bls.n	800536c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005358:	b2da      	uxtb	r2, r3
 800535a:	8979      	ldrh	r1, [r7, #10]
 800535c:	2300      	movs	r3, #0
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 fad3 	bl	8005910 <I2C_TransferConfig>
 800536a:	e00f      	b.n	800538c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800537a:	b2da      	uxtb	r2, r3
 800537c:	8979      	ldrh	r1, [r7, #10]
 800537e:	2300      	movs	r3, #0
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 fac2 	bl	8005910 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d19a      	bne.n	80052cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 f994 	bl	80056c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e01a      	b.n	80053e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2220      	movs	r2, #32
 80053b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6859      	ldr	r1, [r3, #4]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	4b0b      	ldr	r3, [pc, #44]	@ (80053ec <HAL_I2C_Mem_Read+0x230>)
 80053be:	400b      	ands	r3, r1
 80053c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	e000      	b.n	80053e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80053de:	2302      	movs	r3, #2
  }
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	80002400 	.word	0x80002400
 80053ec:	fe00e800 	.word	0xfe00e800

080053f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	4608      	mov	r0, r1
 80053fa:	4611      	mov	r1, r2
 80053fc:	461a      	mov	r2, r3
 80053fe:	4603      	mov	r3, r0
 8005400:	817b      	strh	r3, [r7, #10]
 8005402:	460b      	mov	r3, r1
 8005404:	813b      	strh	r3, [r7, #8]
 8005406:	4613      	mov	r3, r2
 8005408:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800540a:	88fb      	ldrh	r3, [r7, #6]
 800540c:	b2da      	uxtb	r2, r3
 800540e:	8979      	ldrh	r1, [r7, #10]
 8005410:	4b20      	ldr	r3, [pc, #128]	@ (8005494 <I2C_RequestMemoryWrite+0xa4>)
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 fa79 	bl	8005910 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	69b9      	ldr	r1, [r7, #24]
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 f909 	bl	800563a <I2C_WaitOnTXISFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e02c      	b.n	800548c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005432:	88fb      	ldrh	r3, [r7, #6]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d105      	bne.n	8005444 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005438:	893b      	ldrh	r3, [r7, #8]
 800543a:	b2da      	uxtb	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	629a      	str	r2, [r3, #40]	@ 0x28
 8005442:	e015      	b.n	8005470 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005444:	893b      	ldrh	r3, [r7, #8]
 8005446:	0a1b      	lsrs	r3, r3, #8
 8005448:	b29b      	uxth	r3, r3
 800544a:	b2da      	uxtb	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	69b9      	ldr	r1, [r7, #24]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 f8ef 	bl	800563a <I2C_WaitOnTXISFlagUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e012      	b.n	800548c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005466:	893b      	ldrh	r3, [r7, #8]
 8005468:	b2da      	uxtb	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2200      	movs	r2, #0
 8005478:	2180      	movs	r1, #128	@ 0x80
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 f884 	bl	8005588 <I2C_WaitOnFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	80002000 	.word	0x80002000

08005498 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af02      	add	r7, sp, #8
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	4608      	mov	r0, r1
 80054a2:	4611      	mov	r1, r2
 80054a4:	461a      	mov	r2, r3
 80054a6:	4603      	mov	r3, r0
 80054a8:	817b      	strh	r3, [r7, #10]
 80054aa:	460b      	mov	r3, r1
 80054ac:	813b      	strh	r3, [r7, #8]
 80054ae:	4613      	mov	r3, r2
 80054b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80054b2:	88fb      	ldrh	r3, [r7, #6]
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	8979      	ldrh	r1, [r7, #10]
 80054b8:	4b20      	ldr	r3, [pc, #128]	@ (800553c <I2C_RequestMemoryRead+0xa4>)
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	2300      	movs	r3, #0
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 fa26 	bl	8005910 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	69b9      	ldr	r1, [r7, #24]
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 f8b6 	bl	800563a <I2C_WaitOnTXISFlagUntilTimeout>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e02c      	b.n	8005532 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054d8:	88fb      	ldrh	r3, [r7, #6]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d105      	bne.n	80054ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054de:	893b      	ldrh	r3, [r7, #8]
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80054e8:	e015      	b.n	8005516 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80054ea:	893b      	ldrh	r3, [r7, #8]
 80054ec:	0a1b      	lsrs	r3, r3, #8
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054f8:	69fa      	ldr	r2, [r7, #28]
 80054fa:	69b9      	ldr	r1, [r7, #24]
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 f89c 	bl	800563a <I2C_WaitOnTXISFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e012      	b.n	8005532 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800550c:	893b      	ldrh	r3, [r7, #8]
 800550e:	b2da      	uxtb	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	2200      	movs	r2, #0
 800551e:	2140      	movs	r1, #64	@ 0x40
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 f831 	bl	8005588 <I2C_WaitOnFlagUntilTimeout>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	80002000 	.word	0x80002000

08005540 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b02      	cmp	r3, #2
 8005554:	d103      	bne.n	800555e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2200      	movs	r2, #0
 800555c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b01      	cmp	r3, #1
 800556a:	d007      	beq.n	800557c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699a      	ldr	r2, [r3, #24]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f042 0201 	orr.w	r2, r2, #1
 800557a:	619a      	str	r2, [r3, #24]
  }
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	4613      	mov	r3, r2
 8005596:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005598:	e03b      	b.n	8005612 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	6839      	ldr	r1, [r7, #0]
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 f8d6 	bl	8005750 <I2C_IsErrorOccurred>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e041      	b.n	8005632 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b4:	d02d      	beq.n	8005612 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055b6:	f7fe fe9b 	bl	80042f0 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d302      	bcc.n	80055cc <I2C_WaitOnFlagUntilTimeout+0x44>
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d122      	bne.n	8005612 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699a      	ldr	r2, [r3, #24]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	4013      	ands	r3, r2
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	429a      	cmp	r2, r3
 80055da:	bf0c      	ite	eq
 80055dc:	2301      	moveq	r3, #1
 80055de:	2300      	movne	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	79fb      	ldrb	r3, [r7, #7]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d113      	bne.n	8005612 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ee:	f043 0220 	orr.w	r2, r3, #32
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e00f      	b.n	8005632 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	699a      	ldr	r2, [r3, #24]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4013      	ands	r3, r2
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	429a      	cmp	r2, r3
 8005620:	bf0c      	ite	eq
 8005622:	2301      	moveq	r3, #1
 8005624:	2300      	movne	r3, #0
 8005626:	b2db      	uxtb	r3, r3
 8005628:	461a      	mov	r2, r3
 800562a:	79fb      	ldrb	r3, [r7, #7]
 800562c:	429a      	cmp	r2, r3
 800562e:	d0b4      	beq.n	800559a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005646:	e033      	b.n	80056b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 f87f 	bl	8005750 <I2C_IsErrorOccurred>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e031      	b.n	80056c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005662:	d025      	beq.n	80056b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005664:	f7fe fe44 	bl	80042f0 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	429a      	cmp	r2, r3
 8005672:	d302      	bcc.n	800567a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d11a      	bne.n	80056b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b02      	cmp	r3, #2
 8005686:	d013      	beq.n	80056b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800568c:	f043 0220 	orr.w	r2, r3, #32
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2220      	movs	r2, #32
 8005698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e007      	b.n	80056c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d1c4      	bne.n	8005648 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056d4:	e02f      	b.n	8005736 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	68b9      	ldr	r1, [r7, #8]
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 f838 	bl	8005750 <I2C_IsErrorOccurred>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e02d      	b.n	8005746 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ea:	f7fe fe01 	bl	80042f0 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d302      	bcc.n	8005700 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d11a      	bne.n	8005736 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b20      	cmp	r3, #32
 800570c:	d013      	beq.n	8005736 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005712:	f043 0220 	orr.w	r2, r3, #32
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e007      	b.n	8005746 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	2b20      	cmp	r3, #32
 8005742:	d1c8      	bne.n	80056d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08a      	sub	sp, #40	@ 0x28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800576a:	2300      	movs	r3, #0
 800576c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	2b00      	cmp	r3, #0
 800577a:	d068      	beq.n	800584e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2210      	movs	r2, #16
 8005782:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005784:	e049      	b.n	800581a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578c:	d045      	beq.n	800581a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800578e:	f7fe fdaf 	bl	80042f0 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	429a      	cmp	r2, r3
 800579c:	d302      	bcc.n	80057a4 <I2C_IsErrorOccurred+0x54>
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d13a      	bne.n	800581a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057c6:	d121      	bne.n	800580c <I2C_IsErrorOccurred+0xbc>
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057ce:	d01d      	beq.n	800580c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80057d0:	7cfb      	ldrb	r3, [r7, #19]
 80057d2:	2b20      	cmp	r3, #32
 80057d4:	d01a      	beq.n	800580c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80057e6:	f7fe fd83 	bl	80042f0 <HAL_GetTick>
 80057ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057ec:	e00e      	b.n	800580c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80057ee:	f7fe fd7f 	bl	80042f0 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b19      	cmp	r3, #25
 80057fa:	d907      	bls.n	800580c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	f043 0320 	orr.w	r3, r3, #32
 8005802:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800580a:	e006      	b.n	800581a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	2b20      	cmp	r3, #32
 8005818:	d1e9      	bne.n	80057ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	f003 0320 	and.w	r3, r3, #32
 8005824:	2b20      	cmp	r3, #32
 8005826:	d003      	beq.n	8005830 <I2C_IsErrorOccurred+0xe0>
 8005828:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0aa      	beq.n	8005786 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005834:	2b00      	cmp	r3, #0
 8005836:	d103      	bne.n	8005840 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2220      	movs	r2, #32
 800583e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	f043 0304 	orr.w	r3, r3, #4
 8005846:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00b      	beq.n	8005878 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	f043 0301 	orr.w	r3, r3, #1
 8005866:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005870:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00b      	beq.n	800589a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	f043 0308 	orr.w	r3, r3, #8
 8005888:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005892:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00b      	beq.n	80058bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	f043 0302 	orr.w	r3, r3, #2
 80058aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80058bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d01c      	beq.n	80058fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f7ff fe3b 	bl	8005540 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6859      	ldr	r1, [r3, #4]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	4b0d      	ldr	r3, [pc, #52]	@ (800590c <I2C_IsErrorOccurred+0x1bc>)
 80058d6:	400b      	ands	r3, r1
 80058d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	431a      	orrs	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80058fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005902:	4618      	mov	r0, r3
 8005904:	3728      	adds	r7, #40	@ 0x28
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	fe00e800 	.word	0xfe00e800

08005910 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	607b      	str	r3, [r7, #4]
 800591a:	460b      	mov	r3, r1
 800591c:	817b      	strh	r3, [r7, #10]
 800591e:	4613      	mov	r3, r2
 8005920:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005922:	897b      	ldrh	r3, [r7, #10]
 8005924:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005928:	7a7b      	ldrb	r3, [r7, #9]
 800592a:	041b      	lsls	r3, r3, #16
 800592c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005930:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	4313      	orrs	r3, r2
 800593a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800593e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	0d5b      	lsrs	r3, r3, #21
 800594a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800594e:	4b08      	ldr	r3, [pc, #32]	@ (8005970 <I2C_TransferConfig+0x60>)
 8005950:	430b      	orrs	r3, r1
 8005952:	43db      	mvns	r3, r3
 8005954:	ea02 0103 	and.w	r1, r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	430a      	orrs	r2, r1
 8005960:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005962:	bf00      	nop
 8005964:	371c      	adds	r7, #28
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	03ff63ff 	.word	0x03ff63ff

08005974 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b20      	cmp	r3, #32
 8005988:	d138      	bne.n	80059fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005990:	2b01      	cmp	r3, #1
 8005992:	d101      	bne.n	8005998 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005994:	2302      	movs	r3, #2
 8005996:	e032      	b.n	80059fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2224      	movs	r2, #36	@ 0x24
 80059a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0201 	bic.w	r2, r2, #1
 80059b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80059c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6819      	ldr	r1, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	e000      	b.n	80059fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80059fc:	2302      	movs	r3, #2
  }
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b086      	sub	sp, #24
 8005a0e:	af02      	add	r7, sp, #8
 8005a10:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e101      	b.n	8005c20 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d106      	bne.n	8005a36 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7fd fcfb 	bl	800342c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2203      	movs	r2, #3
 8005a3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f003 fa2b 	bl	8008ea4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6818      	ldr	r0, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	7c1a      	ldrb	r2, [r3, #16]
 8005a56:	f88d 2000 	strb.w	r2, [sp]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a5e:	f003 f9f4 	bl	8008e4a <USB_CoreInit>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e0d5      	b.n	8005c20 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2100      	movs	r1, #0
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f003 fa23 	bl	8008ec6 <USB_SetCurrentMode>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d005      	beq.n	8005a92 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e0c6      	b.n	8005c20 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a92:	2300      	movs	r3, #0
 8005a94:	73fb      	strb	r3, [r7, #15]
 8005a96:	e04a      	b.n	8005b2e <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a98:	7bfa      	ldrb	r2, [r7, #15]
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	3315      	adds	r3, #21
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005aac:	7bfa      	ldrb	r2, [r7, #15]
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	440b      	add	r3, r1
 8005aba:	3314      	adds	r3, #20
 8005abc:	7bfa      	ldrb	r2, [r7, #15]
 8005abe:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ac0:	7bfa      	ldrb	r2, [r7, #15]
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
 8005ac4:	b298      	uxth	r0, r3
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	332e      	adds	r3, #46	@ 0x2e
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ad8:	7bfa      	ldrb	r2, [r7, #15]
 8005ada:	6879      	ldr	r1, [r7, #4]
 8005adc:	4613      	mov	r3, r2
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	3318      	adds	r3, #24
 8005ae8:	2200      	movs	r2, #0
 8005aea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005aec:	7bfa      	ldrb	r2, [r7, #15]
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	4613      	mov	r3, r2
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	4413      	add	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	440b      	add	r3, r1
 8005afa:	331c      	adds	r3, #28
 8005afc:	2200      	movs	r2, #0
 8005afe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b00:	7bfa      	ldrb	r2, [r7, #15]
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	4613      	mov	r3, r2
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	440b      	add	r3, r1
 8005b0e:	3320      	adds	r3, #32
 8005b10:	2200      	movs	r2, #0
 8005b12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b14:	7bfa      	ldrb	r2, [r7, #15]
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	3324      	adds	r3, #36	@ 0x24
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	73fb      	strb	r3, [r7, #15]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	791b      	ldrb	r3, [r3, #4]
 8005b32:	7bfa      	ldrb	r2, [r7, #15]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d3af      	bcc.n	8005a98 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	73fb      	strb	r3, [r7, #15]
 8005b3c:	e044      	b.n	8005bc8 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b3e:	7bfa      	ldrb	r2, [r7, #15]
 8005b40:	6879      	ldr	r1, [r7, #4]
 8005b42:	4613      	mov	r3, r2
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	440b      	add	r3, r1
 8005b4c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005b50:	2200      	movs	r2, #0
 8005b52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b54:	7bfa      	ldrb	r2, [r7, #15]
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005b66:	7bfa      	ldrb	r2, [r7, #15]
 8005b68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b6a:	7bfa      	ldrb	r2, [r7, #15]
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	440b      	add	r3, r1
 8005b78:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b80:	7bfa      	ldrb	r2, [r7, #15]
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	4613      	mov	r3, r2
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b96:	7bfa      	ldrb	r2, [r7, #15]
 8005b98:	6879      	ldr	r1, [r7, #4]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	440b      	add	r3, r1
 8005ba4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005bac:	7bfa      	ldrb	r2, [r7, #15]
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	4413      	add	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	440b      	add	r3, r1
 8005bba:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	73fb      	strb	r3, [r7, #15]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	791b      	ldrb	r3, [r3, #4]
 8005bcc:	7bfa      	ldrb	r2, [r7, #15]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d3b5      	bcc.n	8005b3e <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	7c1a      	ldrb	r2, [r3, #16]
 8005bda:	f88d 2000 	strb.w	r2, [sp]
 8005bde:	3304      	adds	r3, #4
 8005be0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005be2:	f003 f9bd 	bl	8008f60 <USB_DevInit>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e013      	b.n	8005c20 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	7b1b      	ldrb	r3, [r3, #12]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d102      	bne.n	8005c14 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f80a 	bl	8005c28 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f003 fb62 	bl	80092e2 <USB_DevDisconnect>

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c5a:	f043 0303 	orr.w	r3, r3, #3
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c74:	4b05      	ldr	r3, [pc, #20]	@ (8005c8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a04      	ldr	r2, [pc, #16]	@ (8005c8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c7e:	6013      	str	r3, [r2, #0]
}
 8005c80:	bf00      	nop
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	40007000 	.word	0x40007000

08005c90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005c90:	b480      	push	{r7}
 8005c92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005c94:	4b04      	ldr	r3, [pc, #16]	@ (8005ca8 <HAL_PWREx_GetVoltageRange+0x18>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40007000 	.word	0x40007000

08005cac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cba:	d130      	bne.n	8005d1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cbc:	4b23      	ldr	r3, [pc, #140]	@ (8005d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005cc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cc8:	d038      	beq.n	8005d3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cca:	4b20      	ldr	r3, [pc, #128]	@ (8005d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8005d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005cd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005cda:	4b1d      	ldr	r3, [pc, #116]	@ (8005d50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2232      	movs	r2, #50	@ 0x32
 8005ce0:	fb02 f303 	mul.w	r3, r2, r3
 8005ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8005d54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cea:	0c9b      	lsrs	r3, r3, #18
 8005cec:	3301      	adds	r3, #1
 8005cee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cf0:	e002      	b.n	8005cf8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cf8:	4b14      	ldr	r3, [pc, #80]	@ (8005d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d04:	d102      	bne.n	8005d0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f2      	bne.n	8005cf2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d18:	d110      	bne.n	8005d3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e00f      	b.n	8005d3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d2a:	d007      	beq.n	8005d3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d2c:	4b07      	ldr	r3, [pc, #28]	@ (8005d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d34:	4a05      	ldr	r2, [pc, #20]	@ (8005d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005d36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40007000 	.word	0x40007000
 8005d50:	2000001c 	.word	0x2000001c
 8005d54:	431bde83 	.word	0x431bde83

08005d58 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005d5c:	4b05      	ldr	r3, [pc, #20]	@ (8005d74 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	4a04      	ldr	r2, [pc, #16]	@ (8005d74 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005d62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d66:	6053      	str	r3, [r2, #4]
}
 8005d68:	bf00      	nop
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40007000 	.word	0x40007000

08005d78 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005d80:	f7fe fab6 	bl	80042f0 <HAL_GetTick>
 8005d84:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e063      	b.n	8005e58 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10b      	bne.n	8005db4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7fd fa59 	bl	800325c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005daa:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f858 	bl	8005e64 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	021a      	lsls	r2, r3, #8
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	2120      	movs	r1, #32
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f850 	bl	8005e80 <QSPI_WaitFlagStateUntilTimeout>
 8005de0:	4603      	mov	r3, r0
 8005de2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005de4:	7afb      	ldrb	r3, [r7, #11]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d131      	bne.n	8005e4e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005df4:	f023 0310 	bic.w	r3, r3, #16
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6852      	ldr	r2, [r2, #4]
 8005dfc:	0611      	lsls	r1, r2, #24
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	68d2      	ldr	r2, [r2, #12]
 8005e02:	4311      	orrs	r1, r2
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	4b13      	ldr	r3, [pc, #76]	@ (8005e60 <HAL_QSPI_Init+0xe8>)
 8005e14:	4013      	ands	r3, r2
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6912      	ldr	r2, [r2, #16]
 8005e1a:	0411      	lsls	r1, r2, #16
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6952      	ldr	r2, [r2, #20]
 8005e20:	4311      	orrs	r1, r2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6992      	ldr	r2, [r2, #24]
 8005e26:	4311      	orrs	r1, r2
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6812      	ldr	r2, [r2, #0]
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0201 	orr.w	r2, r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8005e56:	7afb      	ldrb	r3, [r7, #11]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	ffe0f8fe 	.word	0xffe0f8fe

08005e64 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005e90:	e01a      	b.n	8005ec8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e98:	d016      	beq.n	8005ec8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9a:	f7fe fa29 	bl	80042f0 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d302      	bcc.n	8005eb0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10b      	bne.n	8005ec8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2204      	movs	r2, #4
 8005eb4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ebc:	f043 0201 	orr.w	r2, r3, #1
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e00e      	b.n	8005ee6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	bf14      	ite	ne
 8005ed6:	2301      	movne	r3, #1
 8005ed8:	2300      	moveq	r3, #0
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	461a      	mov	r2, r3
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d1d6      	bne.n	8005e92 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e3ca      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f02:	4b97      	ldr	r3, [pc, #604]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 030c 	and.w	r3, r3, #12
 8005f0a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f0c:	4b94      	ldr	r3, [pc, #592]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f003 0303 	and.w	r3, r3, #3
 8005f14:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0310 	and.w	r3, r3, #16
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 80e4 	beq.w	80060ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d007      	beq.n	8005f3a <HAL_RCC_OscConfig+0x4a>
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	2b0c      	cmp	r3, #12
 8005f2e:	f040 808b 	bne.w	8006048 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	f040 8087 	bne.w	8006048 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f3a:	4b89      	ldr	r3, [pc, #548]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <HAL_RCC_OscConfig+0x62>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e3a2      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1a      	ldr	r2, [r3, #32]
 8005f56:	4b82      	ldr	r3, [pc, #520]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d004      	beq.n	8005f6c <HAL_RCC_OscConfig+0x7c>
 8005f62:	4b7f      	ldr	r3, [pc, #508]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f6a:	e005      	b.n	8005f78 <HAL_RCC_OscConfig+0x88>
 8005f6c:	4b7c      	ldr	r3, [pc, #496]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8005f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f72:	091b      	lsrs	r3, r3, #4
 8005f74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d223      	bcs.n	8005fc4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 fd87 	bl	8006a94 <RCC_SetFlashLatencyFromMSIRange>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e383      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f90:	4b73      	ldr	r3, [pc, #460]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a72      	ldr	r2, [pc, #456]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8005f96:	f043 0308 	orr.w	r3, r3, #8
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	4b70      	ldr	r3, [pc, #448]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	496d      	ldr	r1, [pc, #436]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fae:	4b6c      	ldr	r3, [pc, #432]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	021b      	lsls	r3, r3, #8
 8005fbc:	4968      	ldr	r1, [pc, #416]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	604b      	str	r3, [r1, #4]
 8005fc2:	e025      	b.n	8006010 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fc4:	4b66      	ldr	r3, [pc, #408]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a65      	ldr	r2, [pc, #404]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8005fca:	f043 0308 	orr.w	r3, r3, #8
 8005fce:	6013      	str	r3, [r2, #0]
 8005fd0:	4b63      	ldr	r3, [pc, #396]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	4960      	ldr	r1, [pc, #384]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	021b      	lsls	r3, r3, #8
 8005ff0:	495b      	ldr	r1, [pc, #364]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d109      	bne.n	8006010 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	4618      	mov	r0, r3
 8006002:	f000 fd47 	bl	8006a94 <RCC_SetFlashLatencyFromMSIRange>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e343      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006010:	f000 fc4a 	bl	80068a8 <HAL_RCC_GetSysClockFreq>
 8006014:	4602      	mov	r2, r0
 8006016:	4b52      	ldr	r3, [pc, #328]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	091b      	lsrs	r3, r3, #4
 800601c:	f003 030f 	and.w	r3, r3, #15
 8006020:	4950      	ldr	r1, [pc, #320]	@ (8006164 <HAL_RCC_OscConfig+0x274>)
 8006022:	5ccb      	ldrb	r3, [r1, r3]
 8006024:	f003 031f 	and.w	r3, r3, #31
 8006028:	fa22 f303 	lsr.w	r3, r2, r3
 800602c:	4a4e      	ldr	r2, [pc, #312]	@ (8006168 <HAL_RCC_OscConfig+0x278>)
 800602e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006030:	4b4e      	ldr	r3, [pc, #312]	@ (800616c <HAL_RCC_OscConfig+0x27c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4618      	mov	r0, r3
 8006036:	f7fd fa95 	bl	8003564 <HAL_InitTick>
 800603a:	4603      	mov	r3, r0
 800603c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800603e:	7bfb      	ldrb	r3, [r7, #15]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d052      	beq.n	80060ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	e327      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d032      	beq.n	80060b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006050:	4b43      	ldr	r3, [pc, #268]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a42      	ldr	r2, [pc, #264]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8006056:	f043 0301 	orr.w	r3, r3, #1
 800605a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800605c:	f7fe f948 	bl	80042f0 <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006064:	f7fe f944 	bl	80042f0 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e310      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006076:	4b3a      	ldr	r3, [pc, #232]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0f0      	beq.n	8006064 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006082:	4b37      	ldr	r3, [pc, #220]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a36      	ldr	r2, [pc, #216]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8006088:	f043 0308 	orr.w	r3, r3, #8
 800608c:	6013      	str	r3, [r2, #0]
 800608e:	4b34      	ldr	r3, [pc, #208]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	4931      	ldr	r1, [pc, #196]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 800609c:	4313      	orrs	r3, r2
 800609e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060a0:	4b2f      	ldr	r3, [pc, #188]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	021b      	lsls	r3, r3, #8
 80060ae:	492c      	ldr	r1, [pc, #176]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	604b      	str	r3, [r1, #4]
 80060b4:	e01a      	b.n	80060ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80060b6:	4b2a      	ldr	r3, [pc, #168]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a29      	ldr	r2, [pc, #164]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 80060bc:	f023 0301 	bic.w	r3, r3, #1
 80060c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80060c2:	f7fe f915 	bl	80042f0 <HAL_GetTick>
 80060c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80060c8:	e008      	b.n	80060dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060ca:	f7fe f911 	bl	80042f0 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d901      	bls.n	80060dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e2dd      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80060dc:	4b20      	ldr	r3, [pc, #128]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1f0      	bne.n	80060ca <HAL_RCC_OscConfig+0x1da>
 80060e8:	e000      	b.n	80060ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80060ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d074      	beq.n	80061e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	2b08      	cmp	r3, #8
 80060fc:	d005      	beq.n	800610a <HAL_RCC_OscConfig+0x21a>
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b0c      	cmp	r3, #12
 8006102:	d10e      	bne.n	8006122 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2b03      	cmp	r3, #3
 8006108:	d10b      	bne.n	8006122 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800610a:	4b15      	ldr	r3, [pc, #84]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d064      	beq.n	80061e0 <HAL_RCC_OscConfig+0x2f0>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d160      	bne.n	80061e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e2ba      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800612a:	d106      	bne.n	800613a <HAL_RCC_OscConfig+0x24a>
 800612c:	4b0c      	ldr	r3, [pc, #48]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a0b      	ldr	r2, [pc, #44]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8006132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006136:	6013      	str	r3, [r2, #0]
 8006138:	e026      	b.n	8006188 <HAL_RCC_OscConfig+0x298>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006142:	d115      	bne.n	8006170 <HAL_RCC_OscConfig+0x280>
 8006144:	4b06      	ldr	r3, [pc, #24]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a05      	ldr	r2, [pc, #20]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 800614a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	4b03      	ldr	r3, [pc, #12]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a02      	ldr	r2, [pc, #8]	@ (8006160 <HAL_RCC_OscConfig+0x270>)
 8006156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	e014      	b.n	8006188 <HAL_RCC_OscConfig+0x298>
 800615e:	bf00      	nop
 8006160:	40021000 	.word	0x40021000
 8006164:	0800fad4 	.word	0x0800fad4
 8006168:	2000001c 	.word	0x2000001c
 800616c:	20000064 	.word	0x20000064
 8006170:	4ba0      	ldr	r3, [pc, #640]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a9f      	ldr	r2, [pc, #636]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 8006176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	4b9d      	ldr	r3, [pc, #628]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a9c      	ldr	r2, [pc, #624]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 8006182:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d013      	beq.n	80061b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006190:	f7fe f8ae 	bl	80042f0 <HAL_GetTick>
 8006194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006198:	f7fe f8aa 	bl	80042f0 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b64      	cmp	r3, #100	@ 0x64
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e276      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061aa:	4b92      	ldr	r3, [pc, #584]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0f0      	beq.n	8006198 <HAL_RCC_OscConfig+0x2a8>
 80061b6:	e014      	b.n	80061e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b8:	f7fe f89a 	bl	80042f0 <HAL_GetTick>
 80061bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061be:	e008      	b.n	80061d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061c0:	f7fe f896 	bl	80042f0 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b64      	cmp	r3, #100	@ 0x64
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e262      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061d2:	4b88      	ldr	r3, [pc, #544]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1f0      	bne.n	80061c0 <HAL_RCC_OscConfig+0x2d0>
 80061de:	e000      	b.n	80061e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d060      	beq.n	80062b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	2b04      	cmp	r3, #4
 80061f2:	d005      	beq.n	8006200 <HAL_RCC_OscConfig+0x310>
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	2b0c      	cmp	r3, #12
 80061f8:	d119      	bne.n	800622e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d116      	bne.n	800622e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006200:	4b7c      	ldr	r3, [pc, #496]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <HAL_RCC_OscConfig+0x328>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e23f      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006218:	4b76      	ldr	r3, [pc, #472]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	061b      	lsls	r3, r3, #24
 8006226:	4973      	ldr	r1, [pc, #460]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 8006228:	4313      	orrs	r3, r2
 800622a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800622c:	e040      	b.n	80062b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d023      	beq.n	800627e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006236:	4b6f      	ldr	r3, [pc, #444]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a6e      	ldr	r2, [pc, #440]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 800623c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006242:	f7fe f855 	bl	80042f0 <HAL_GetTick>
 8006246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006248:	e008      	b.n	800625c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800624a:	f7fe f851 	bl	80042f0 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d901      	bls.n	800625c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e21d      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800625c:	4b65      	ldr	r3, [pc, #404]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006264:	2b00      	cmp	r3, #0
 8006266:	d0f0      	beq.n	800624a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006268:	4b62      	ldr	r3, [pc, #392]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	061b      	lsls	r3, r3, #24
 8006276:	495f      	ldr	r1, [pc, #380]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 8006278:	4313      	orrs	r3, r2
 800627a:	604b      	str	r3, [r1, #4]
 800627c:	e018      	b.n	80062b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800627e:	4b5d      	ldr	r3, [pc, #372]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a5c      	ldr	r2, [pc, #368]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 8006284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628a:	f7fe f831 	bl	80042f0 <HAL_GetTick>
 800628e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006290:	e008      	b.n	80062a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006292:	f7fe f82d 	bl	80042f0 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e1f9      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062a4:	4b53      	ldr	r3, [pc, #332]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1f0      	bne.n	8006292 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0308 	and.w	r3, r3, #8
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d03c      	beq.n	8006336 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d01c      	beq.n	80062fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062c4:	4b4b      	ldr	r3, [pc, #300]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 80062c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062ca:	4a4a      	ldr	r2, [pc, #296]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 80062cc:	f043 0301 	orr.w	r3, r3, #1
 80062d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d4:	f7fe f80c 	bl	80042f0 <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062dc:	f7fe f808 	bl	80042f0 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e1d4      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062ee:	4b41      	ldr	r3, [pc, #260]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 80062f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0ef      	beq.n	80062dc <HAL_RCC_OscConfig+0x3ec>
 80062fc:	e01b      	b.n	8006336 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062fe:	4b3d      	ldr	r3, [pc, #244]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 8006300:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006304:	4a3b      	ldr	r2, [pc, #236]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 8006306:	f023 0301 	bic.w	r3, r3, #1
 800630a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800630e:	f7fd ffef 	bl	80042f0 <HAL_GetTick>
 8006312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006314:	e008      	b.n	8006328 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006316:	f7fd ffeb 	bl	80042f0 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d901      	bls.n	8006328 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e1b7      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006328:	4b32      	ldr	r3, [pc, #200]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 800632a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1ef      	bne.n	8006316 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0304 	and.w	r3, r3, #4
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 80a6 	beq.w	8006490 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006344:	2300      	movs	r3, #0
 8006346:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006348:	4b2a      	ldr	r3, [pc, #168]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 800634a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800634c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10d      	bne.n	8006370 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006354:	4b27      	ldr	r3, [pc, #156]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 8006356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006358:	4a26      	ldr	r2, [pc, #152]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 800635a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800635e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006360:	4b24      	ldr	r3, [pc, #144]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 8006362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006368:	60bb      	str	r3, [r7, #8]
 800636a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800636c:	2301      	movs	r3, #1
 800636e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006370:	4b21      	ldr	r3, [pc, #132]	@ (80063f8 <HAL_RCC_OscConfig+0x508>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006378:	2b00      	cmp	r3, #0
 800637a:	d118      	bne.n	80063ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800637c:	4b1e      	ldr	r3, [pc, #120]	@ (80063f8 <HAL_RCC_OscConfig+0x508>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a1d      	ldr	r2, [pc, #116]	@ (80063f8 <HAL_RCC_OscConfig+0x508>)
 8006382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006386:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006388:	f7fd ffb2 	bl	80042f0 <HAL_GetTick>
 800638c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800638e:	e008      	b.n	80063a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006390:	f7fd ffae 	bl	80042f0 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e17a      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063a2:	4b15      	ldr	r3, [pc, #84]	@ (80063f8 <HAL_RCC_OscConfig+0x508>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0f0      	beq.n	8006390 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d108      	bne.n	80063c8 <HAL_RCC_OscConfig+0x4d8>
 80063b6:	4b0f      	ldr	r3, [pc, #60]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 80063b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063bc:	4a0d      	ldr	r2, [pc, #52]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 80063be:	f043 0301 	orr.w	r3, r3, #1
 80063c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063c6:	e029      	b.n	800641c <HAL_RCC_OscConfig+0x52c>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	2b05      	cmp	r3, #5
 80063ce:	d115      	bne.n	80063fc <HAL_RCC_OscConfig+0x50c>
 80063d0:	4b08      	ldr	r3, [pc, #32]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d6:	4a07      	ldr	r2, [pc, #28]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 80063d8:	f043 0304 	orr.w	r3, r3, #4
 80063dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063e0:	4b04      	ldr	r3, [pc, #16]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 80063e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063e6:	4a03      	ldr	r2, [pc, #12]	@ (80063f4 <HAL_RCC_OscConfig+0x504>)
 80063e8:	f043 0301 	orr.w	r3, r3, #1
 80063ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063f0:	e014      	b.n	800641c <HAL_RCC_OscConfig+0x52c>
 80063f2:	bf00      	nop
 80063f4:	40021000 	.word	0x40021000
 80063f8:	40007000 	.word	0x40007000
 80063fc:	4b9c      	ldr	r3, [pc, #624]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 80063fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006402:	4a9b      	ldr	r2, [pc, #620]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 8006404:	f023 0301 	bic.w	r3, r3, #1
 8006408:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800640c:	4b98      	ldr	r3, [pc, #608]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 800640e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006412:	4a97      	ldr	r2, [pc, #604]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 8006414:	f023 0304 	bic.w	r3, r3, #4
 8006418:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d016      	beq.n	8006452 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006424:	f7fd ff64 	bl	80042f0 <HAL_GetTick>
 8006428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800642a:	e00a      	b.n	8006442 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800642c:	f7fd ff60 	bl	80042f0 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800643a:	4293      	cmp	r3, r2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e12a      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006442:	4b8b      	ldr	r3, [pc, #556]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 8006444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0ed      	beq.n	800642c <HAL_RCC_OscConfig+0x53c>
 8006450:	e015      	b.n	800647e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006452:	f7fd ff4d 	bl	80042f0 <HAL_GetTick>
 8006456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006458:	e00a      	b.n	8006470 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800645a:	f7fd ff49 	bl	80042f0 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006468:	4293      	cmp	r3, r2
 800646a:	d901      	bls.n	8006470 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e113      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006470:	4b7f      	ldr	r3, [pc, #508]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 8006472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1ed      	bne.n	800645a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800647e:	7ffb      	ldrb	r3, [r7, #31]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d105      	bne.n	8006490 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006484:	4b7a      	ldr	r3, [pc, #488]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 8006486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006488:	4a79      	ldr	r2, [pc, #484]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 800648a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800648e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 80fe 	beq.w	8006696 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649e:	2b02      	cmp	r3, #2
 80064a0:	f040 80d0 	bne.w	8006644 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80064a4:	4b72      	ldr	r3, [pc, #456]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f003 0203 	and.w	r2, r3, #3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d130      	bne.n	800651a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c2:	3b01      	subs	r3, #1
 80064c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d127      	bne.n	800651a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d11f      	bne.n	800651a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80064e4:	2a07      	cmp	r2, #7
 80064e6:	bf14      	ite	ne
 80064e8:	2201      	movne	r2, #1
 80064ea:	2200      	moveq	r2, #0
 80064ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d113      	bne.n	800651a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064fc:	085b      	lsrs	r3, r3, #1
 80064fe:	3b01      	subs	r3, #1
 8006500:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006502:	429a      	cmp	r2, r3
 8006504:	d109      	bne.n	800651a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006510:	085b      	lsrs	r3, r3, #1
 8006512:	3b01      	subs	r3, #1
 8006514:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006516:	429a      	cmp	r2, r3
 8006518:	d06e      	beq.n	80065f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2b0c      	cmp	r3, #12
 800651e:	d069      	beq.n	80065f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006520:	4b53      	ldr	r3, [pc, #332]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d105      	bne.n	8006538 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800652c:	4b50      	ldr	r3, [pc, #320]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e0ad      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800653c:	4b4c      	ldr	r3, [pc, #304]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a4b      	ldr	r2, [pc, #300]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 8006542:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006546:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006548:	f7fd fed2 	bl	80042f0 <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800654e:	e008      	b.n	8006562 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006550:	f7fd fece 	bl	80042f0 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e09a      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006562:	4b43      	ldr	r3, [pc, #268]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1f0      	bne.n	8006550 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800656e:	4b40      	ldr	r3, [pc, #256]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	4b40      	ldr	r3, [pc, #256]	@ (8006674 <HAL_RCC_OscConfig+0x784>)
 8006574:	4013      	ands	r3, r2
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800657e:	3a01      	subs	r2, #1
 8006580:	0112      	lsls	r2, r2, #4
 8006582:	4311      	orrs	r1, r2
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006588:	0212      	lsls	r2, r2, #8
 800658a:	4311      	orrs	r1, r2
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006590:	0852      	lsrs	r2, r2, #1
 8006592:	3a01      	subs	r2, #1
 8006594:	0552      	lsls	r2, r2, #21
 8006596:	4311      	orrs	r1, r2
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800659c:	0852      	lsrs	r2, r2, #1
 800659e:	3a01      	subs	r2, #1
 80065a0:	0652      	lsls	r2, r2, #25
 80065a2:	4311      	orrs	r1, r2
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80065a8:	0912      	lsrs	r2, r2, #4
 80065aa:	0452      	lsls	r2, r2, #17
 80065ac:	430a      	orrs	r2, r1
 80065ae:	4930      	ldr	r1, [pc, #192]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80065b4:	4b2e      	ldr	r3, [pc, #184]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a2d      	ldr	r2, [pc, #180]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 80065ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 80065c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80065cc:	f7fd fe90 	bl	80042f0 <HAL_GetTick>
 80065d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d4:	f7fd fe8c 	bl	80042f0 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e058      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065e6:	4b22      	ldr	r3, [pc, #136]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0f0      	beq.n	80065d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80065f2:	e050      	b.n	8006696 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e04f      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d148      	bne.n	8006696 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006604:	4b1a      	ldr	r3, [pc, #104]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a19      	ldr	r2, [pc, #100]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 800660a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800660e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006610:	4b17      	ldr	r3, [pc, #92]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	4a16      	ldr	r2, [pc, #88]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 8006616:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800661a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800661c:	f7fd fe68 	bl	80042f0 <HAL_GetTick>
 8006620:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006624:	f7fd fe64 	bl	80042f0 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e030      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006636:	4b0e      	ldr	r3, [pc, #56]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d0f0      	beq.n	8006624 <HAL_RCC_OscConfig+0x734>
 8006642:	e028      	b.n	8006696 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	2b0c      	cmp	r3, #12
 8006648:	d023      	beq.n	8006692 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800664a:	4b09      	ldr	r3, [pc, #36]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a08      	ldr	r2, [pc, #32]	@ (8006670 <HAL_RCC_OscConfig+0x780>)
 8006650:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006656:	f7fd fe4b 	bl	80042f0 <HAL_GetTick>
 800665a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800665c:	e00c      	b.n	8006678 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800665e:	f7fd fe47 	bl	80042f0 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	2b02      	cmp	r3, #2
 800666a:	d905      	bls.n	8006678 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e013      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
 8006670:	40021000 	.word	0x40021000
 8006674:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006678:	4b09      	ldr	r3, [pc, #36]	@ (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1ec      	bne.n	800665e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006684:	4b06      	ldr	r3, [pc, #24]	@ (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	4905      	ldr	r1, [pc, #20]	@ (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 800668a:	4b06      	ldr	r3, [pc, #24]	@ (80066a4 <HAL_RCC_OscConfig+0x7b4>)
 800668c:	4013      	ands	r3, r2
 800668e:	60cb      	str	r3, [r1, #12]
 8006690:	e001      	b.n	8006696 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e000      	b.n	8006698 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3720      	adds	r7, #32
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	40021000 	.word	0x40021000
 80066a4:	feeefffc 	.word	0xfeeefffc

080066a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e0e7      	b.n	800688c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066bc:	4b75      	ldr	r3, [pc, #468]	@ (8006894 <HAL_RCC_ClockConfig+0x1ec>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d910      	bls.n	80066ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ca:	4b72      	ldr	r3, [pc, #456]	@ (8006894 <HAL_RCC_ClockConfig+0x1ec>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f023 0207 	bic.w	r2, r3, #7
 80066d2:	4970      	ldr	r1, [pc, #448]	@ (8006894 <HAL_RCC_ClockConfig+0x1ec>)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066da:	4b6e      	ldr	r3, [pc, #440]	@ (8006894 <HAL_RCC_ClockConfig+0x1ec>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0307 	and.w	r3, r3, #7
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d001      	beq.n	80066ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e0cf      	b.n	800688c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d010      	beq.n	800671a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	4b66      	ldr	r3, [pc, #408]	@ (8006898 <HAL_RCC_ClockConfig+0x1f0>)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006704:	429a      	cmp	r2, r3
 8006706:	d908      	bls.n	800671a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006708:	4b63      	ldr	r3, [pc, #396]	@ (8006898 <HAL_RCC_ClockConfig+0x1f0>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	4960      	ldr	r1, [pc, #384]	@ (8006898 <HAL_RCC_ClockConfig+0x1f0>)
 8006716:	4313      	orrs	r3, r2
 8006718:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d04c      	beq.n	80067c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2b03      	cmp	r3, #3
 800672c:	d107      	bne.n	800673e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800672e:	4b5a      	ldr	r3, [pc, #360]	@ (8006898 <HAL_RCC_ClockConfig+0x1f0>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d121      	bne.n	800677e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e0a6      	b.n	800688c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	2b02      	cmp	r3, #2
 8006744:	d107      	bne.n	8006756 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006746:	4b54      	ldr	r3, [pc, #336]	@ (8006898 <HAL_RCC_ClockConfig+0x1f0>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d115      	bne.n	800677e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e09a      	b.n	800688c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d107      	bne.n	800676e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800675e:	4b4e      	ldr	r3, [pc, #312]	@ (8006898 <HAL_RCC_ClockConfig+0x1f0>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d109      	bne.n	800677e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e08e      	b.n	800688c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800676e:	4b4a      	ldr	r3, [pc, #296]	@ (8006898 <HAL_RCC_ClockConfig+0x1f0>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006776:	2b00      	cmp	r3, #0
 8006778:	d101      	bne.n	800677e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e086      	b.n	800688c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800677e:	4b46      	ldr	r3, [pc, #280]	@ (8006898 <HAL_RCC_ClockConfig+0x1f0>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f023 0203 	bic.w	r2, r3, #3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	4943      	ldr	r1, [pc, #268]	@ (8006898 <HAL_RCC_ClockConfig+0x1f0>)
 800678c:	4313      	orrs	r3, r2
 800678e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006790:	f7fd fdae 	bl	80042f0 <HAL_GetTick>
 8006794:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006796:	e00a      	b.n	80067ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006798:	f7fd fdaa 	bl	80042f0 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e06e      	b.n	800688c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ae:	4b3a      	ldr	r3, [pc, #232]	@ (8006898 <HAL_RCC_ClockConfig+0x1f0>)
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f003 020c 	and.w	r2, r3, #12
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	429a      	cmp	r2, r3
 80067be:	d1eb      	bne.n	8006798 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d010      	beq.n	80067ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	4b31      	ldr	r3, [pc, #196]	@ (8006898 <HAL_RCC_ClockConfig+0x1f0>)
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067d8:	429a      	cmp	r2, r3
 80067da:	d208      	bcs.n	80067ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067dc:	4b2e      	ldr	r3, [pc, #184]	@ (8006898 <HAL_RCC_ClockConfig+0x1f0>)
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	492b      	ldr	r1, [pc, #172]	@ (8006898 <HAL_RCC_ClockConfig+0x1f0>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067ee:	4b29      	ldr	r3, [pc, #164]	@ (8006894 <HAL_RCC_ClockConfig+0x1ec>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d210      	bcs.n	800681e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067fc:	4b25      	ldr	r3, [pc, #148]	@ (8006894 <HAL_RCC_ClockConfig+0x1ec>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f023 0207 	bic.w	r2, r3, #7
 8006804:	4923      	ldr	r1, [pc, #140]	@ (8006894 <HAL_RCC_ClockConfig+0x1ec>)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	4313      	orrs	r3, r2
 800680a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800680c:	4b21      	ldr	r3, [pc, #132]	@ (8006894 <HAL_RCC_ClockConfig+0x1ec>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0307 	and.w	r3, r3, #7
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	429a      	cmp	r2, r3
 8006818:	d001      	beq.n	800681e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e036      	b.n	800688c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	2b00      	cmp	r3, #0
 8006828:	d008      	beq.n	800683c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800682a:	4b1b      	ldr	r3, [pc, #108]	@ (8006898 <HAL_RCC_ClockConfig+0x1f0>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	4918      	ldr	r1, [pc, #96]	@ (8006898 <HAL_RCC_ClockConfig+0x1f0>)
 8006838:	4313      	orrs	r3, r2
 800683a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0308 	and.w	r3, r3, #8
 8006844:	2b00      	cmp	r3, #0
 8006846:	d009      	beq.n	800685c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006848:	4b13      	ldr	r3, [pc, #76]	@ (8006898 <HAL_RCC_ClockConfig+0x1f0>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	00db      	lsls	r3, r3, #3
 8006856:	4910      	ldr	r1, [pc, #64]	@ (8006898 <HAL_RCC_ClockConfig+0x1f0>)
 8006858:	4313      	orrs	r3, r2
 800685a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800685c:	f000 f824 	bl	80068a8 <HAL_RCC_GetSysClockFreq>
 8006860:	4602      	mov	r2, r0
 8006862:	4b0d      	ldr	r3, [pc, #52]	@ (8006898 <HAL_RCC_ClockConfig+0x1f0>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	091b      	lsrs	r3, r3, #4
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	490b      	ldr	r1, [pc, #44]	@ (800689c <HAL_RCC_ClockConfig+0x1f4>)
 800686e:	5ccb      	ldrb	r3, [r1, r3]
 8006870:	f003 031f 	and.w	r3, r3, #31
 8006874:	fa22 f303 	lsr.w	r3, r2, r3
 8006878:	4a09      	ldr	r2, [pc, #36]	@ (80068a0 <HAL_RCC_ClockConfig+0x1f8>)
 800687a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800687c:	4b09      	ldr	r3, [pc, #36]	@ (80068a4 <HAL_RCC_ClockConfig+0x1fc>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4618      	mov	r0, r3
 8006882:	f7fc fe6f 	bl	8003564 <HAL_InitTick>
 8006886:	4603      	mov	r3, r0
 8006888:	72fb      	strb	r3, [r7, #11]

  return status;
 800688a:	7afb      	ldrb	r3, [r7, #11]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	40022000 	.word	0x40022000
 8006898:	40021000 	.word	0x40021000
 800689c:	0800fad4 	.word	0x0800fad4
 80068a0:	2000001c 	.word	0x2000001c
 80068a4:	20000064 	.word	0x20000064

080068a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b089      	sub	sp, #36	@ 0x24
 80068ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	61fb      	str	r3, [r7, #28]
 80068b2:	2300      	movs	r3, #0
 80068b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068b6:	4b3e      	ldr	r3, [pc, #248]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f003 030c 	and.w	r3, r3, #12
 80068be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068c0:	4b3b      	ldr	r3, [pc, #236]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f003 0303 	and.w	r3, r3, #3
 80068c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <HAL_RCC_GetSysClockFreq+0x34>
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	2b0c      	cmp	r3, #12
 80068d4:	d121      	bne.n	800691a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d11e      	bne.n	800691a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80068dc:	4b34      	ldr	r3, [pc, #208]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0308 	and.w	r3, r3, #8
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d107      	bne.n	80068f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80068e8:	4b31      	ldr	r3, [pc, #196]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80068ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068ee:	0a1b      	lsrs	r3, r3, #8
 80068f0:	f003 030f 	and.w	r3, r3, #15
 80068f4:	61fb      	str	r3, [r7, #28]
 80068f6:	e005      	b.n	8006904 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80068f8:	4b2d      	ldr	r3, [pc, #180]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	091b      	lsrs	r3, r3, #4
 80068fe:	f003 030f 	and.w	r3, r3, #15
 8006902:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006904:	4a2b      	ldr	r2, [pc, #172]	@ (80069b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800690c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10d      	bne.n	8006930 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006918:	e00a      	b.n	8006930 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b04      	cmp	r3, #4
 800691e:	d102      	bne.n	8006926 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006920:	4b25      	ldr	r3, [pc, #148]	@ (80069b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006922:	61bb      	str	r3, [r7, #24]
 8006924:	e004      	b.n	8006930 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	2b08      	cmp	r3, #8
 800692a:	d101      	bne.n	8006930 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800692c:	4b23      	ldr	r3, [pc, #140]	@ (80069bc <HAL_RCC_GetSysClockFreq+0x114>)
 800692e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	2b0c      	cmp	r3, #12
 8006934:	d134      	bne.n	80069a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006936:	4b1e      	ldr	r3, [pc, #120]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f003 0303 	and.w	r3, r3, #3
 800693e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2b02      	cmp	r3, #2
 8006944:	d003      	beq.n	800694e <HAL_RCC_GetSysClockFreq+0xa6>
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2b03      	cmp	r3, #3
 800694a:	d003      	beq.n	8006954 <HAL_RCC_GetSysClockFreq+0xac>
 800694c:	e005      	b.n	800695a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800694e:	4b1a      	ldr	r3, [pc, #104]	@ (80069b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006950:	617b      	str	r3, [r7, #20]
      break;
 8006952:	e005      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006954:	4b19      	ldr	r3, [pc, #100]	@ (80069bc <HAL_RCC_GetSysClockFreq+0x114>)
 8006956:	617b      	str	r3, [r7, #20]
      break;
 8006958:	e002      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	617b      	str	r3, [r7, #20]
      break;
 800695e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006960:	4b13      	ldr	r3, [pc, #76]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	091b      	lsrs	r3, r3, #4
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	3301      	adds	r3, #1
 800696c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800696e:	4b10      	ldr	r3, [pc, #64]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	0a1b      	lsrs	r3, r3, #8
 8006974:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	fb03 f202 	mul.w	r2, r3, r2
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	fbb2 f3f3 	udiv	r3, r2, r3
 8006984:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006986:	4b0a      	ldr	r3, [pc, #40]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	0e5b      	lsrs	r3, r3, #25
 800698c:	f003 0303 	and.w	r3, r3, #3
 8006990:	3301      	adds	r3, #1
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	fbb2 f3f3 	udiv	r3, r2, r3
 800699e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80069a0:	69bb      	ldr	r3, [r7, #24]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3724      	adds	r7, #36	@ 0x24
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40021000 	.word	0x40021000
 80069b4:	0800faec 	.word	0x0800faec
 80069b8:	00f42400 	.word	0x00f42400
 80069bc:	007a1200 	.word	0x007a1200

080069c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069c0:	b480      	push	{r7}
 80069c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069c4:	4b03      	ldr	r3, [pc, #12]	@ (80069d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80069c6:	681b      	ldr	r3, [r3, #0]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	2000001c 	.word	0x2000001c

080069d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80069dc:	f7ff fff0 	bl	80069c0 <HAL_RCC_GetHCLKFreq>
 80069e0:	4602      	mov	r2, r0
 80069e2:	4b06      	ldr	r3, [pc, #24]	@ (80069fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	0a1b      	lsrs	r3, r3, #8
 80069e8:	f003 0307 	and.w	r3, r3, #7
 80069ec:	4904      	ldr	r1, [pc, #16]	@ (8006a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80069ee:	5ccb      	ldrb	r3, [r1, r3]
 80069f0:	f003 031f 	and.w	r3, r3, #31
 80069f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	40021000 	.word	0x40021000
 8006a00:	0800fae4 	.word	0x0800fae4

08006a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006a08:	f7ff ffda 	bl	80069c0 <HAL_RCC_GetHCLKFreq>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	4b06      	ldr	r3, [pc, #24]	@ (8006a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	0adb      	lsrs	r3, r3, #11
 8006a14:	f003 0307 	and.w	r3, r3, #7
 8006a18:	4904      	ldr	r1, [pc, #16]	@ (8006a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a1a:	5ccb      	ldrb	r3, [r1, r3]
 8006a1c:	f003 031f 	and.w	r3, r3, #31
 8006a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	40021000 	.word	0x40021000
 8006a2c:	0800fae4 	.word	0x0800fae4

08006a30 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	220f      	movs	r2, #15
 8006a3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006a40:	4b12      	ldr	r3, [pc, #72]	@ (8006a8c <HAL_RCC_GetClockConfig+0x5c>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f003 0203 	and.w	r2, r3, #3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8006a8c <HAL_RCC_GetClockConfig+0x5c>)
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006a58:	4b0c      	ldr	r3, [pc, #48]	@ (8006a8c <HAL_RCC_GetClockConfig+0x5c>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006a64:	4b09      	ldr	r3, [pc, #36]	@ (8006a8c <HAL_RCC_GetClockConfig+0x5c>)
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	08db      	lsrs	r3, r3, #3
 8006a6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006a72:	4b07      	ldr	r3, [pc, #28]	@ (8006a90 <HAL_RCC_GetClockConfig+0x60>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0207 	and.w	r2, r3, #7
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	601a      	str	r2, [r3, #0]
}
 8006a7e:	bf00      	nop
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	40021000 	.word	0x40021000
 8006a90:	40022000 	.word	0x40022000

08006a94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006aa0:	4b2a      	ldr	r3, [pc, #168]	@ (8006b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006aac:	f7ff f8f0 	bl	8005c90 <HAL_PWREx_GetVoltageRange>
 8006ab0:	6178      	str	r0, [r7, #20]
 8006ab2:	e014      	b.n	8006ade <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ab4:	4b25      	ldr	r3, [pc, #148]	@ (8006b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab8:	4a24      	ldr	r2, [pc, #144]	@ (8006b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006abe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ac0:	4b22      	ldr	r3, [pc, #136]	@ (8006b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006acc:	f7ff f8e0 	bl	8005c90 <HAL_PWREx_GetVoltageRange>
 8006ad0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8006b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8006b4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ad8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006adc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ae4:	d10b      	bne.n	8006afe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b80      	cmp	r3, #128	@ 0x80
 8006aea:	d919      	bls.n	8006b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2ba0      	cmp	r3, #160	@ 0xa0
 8006af0:	d902      	bls.n	8006af8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006af2:	2302      	movs	r3, #2
 8006af4:	613b      	str	r3, [r7, #16]
 8006af6:	e013      	b.n	8006b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006af8:	2301      	movs	r3, #1
 8006afa:	613b      	str	r3, [r7, #16]
 8006afc:	e010      	b.n	8006b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b80      	cmp	r3, #128	@ 0x80
 8006b02:	d902      	bls.n	8006b0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006b04:	2303      	movs	r3, #3
 8006b06:	613b      	str	r3, [r7, #16]
 8006b08:	e00a      	b.n	8006b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b80      	cmp	r3, #128	@ 0x80
 8006b0e:	d102      	bne.n	8006b16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006b10:	2302      	movs	r3, #2
 8006b12:	613b      	str	r3, [r7, #16]
 8006b14:	e004      	b.n	8006b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b70      	cmp	r3, #112	@ 0x70
 8006b1a:	d101      	bne.n	8006b20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006b20:	4b0b      	ldr	r3, [pc, #44]	@ (8006b50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f023 0207 	bic.w	r2, r3, #7
 8006b28:	4909      	ldr	r1, [pc, #36]	@ (8006b50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006b30:	4b07      	ldr	r3, [pc, #28]	@ (8006b50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d001      	beq.n	8006b42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e000      	b.n	8006b44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3718      	adds	r7, #24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	40021000 	.word	0x40021000
 8006b50:	40022000 	.word	0x40022000

08006b54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b60:	2300      	movs	r3, #0
 8006b62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d041      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b74:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006b78:	d02a      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006b7a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006b7e:	d824      	bhi.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006b80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b84:	d008      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006b86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b8a:	d81e      	bhi.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00a      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006b90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b94:	d010      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006b96:	e018      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006b98:	4b86      	ldr	r3, [pc, #536]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	4a85      	ldr	r2, [pc, #532]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ba2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006ba4:	e015      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	2100      	movs	r1, #0
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 facb 	bl	8007148 <RCCEx_PLLSAI1_Config>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006bb6:	e00c      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	3320      	adds	r3, #32
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fbb6 	bl	8007330 <RCCEx_PLLSAI2_Config>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006bc8:	e003      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	74fb      	strb	r3, [r7, #19]
      break;
 8006bce:	e000      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006bd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bd2:	7cfb      	ldrb	r3, [r7, #19]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10b      	bne.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006bd8:	4b76      	ldr	r3, [pc, #472]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bde:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006be6:	4973      	ldr	r1, [pc, #460]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006bee:	e001      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf0:	7cfb      	ldrb	r3, [r7, #19]
 8006bf2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d041      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c04:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c08:	d02a      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006c0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c0e:	d824      	bhi.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006c10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c14:	d008      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006c16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c1a:	d81e      	bhi.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00a      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006c20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c24:	d010      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006c26:	e018      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006c28:	4b62      	ldr	r3, [pc, #392]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	4a61      	ldr	r2, [pc, #388]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c32:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006c34:	e015      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	3304      	adds	r3, #4
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fa83 	bl	8007148 <RCCEx_PLLSAI1_Config>
 8006c42:	4603      	mov	r3, r0
 8006c44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006c46:	e00c      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3320      	adds	r3, #32
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 fb6e 	bl	8007330 <RCCEx_PLLSAI2_Config>
 8006c54:	4603      	mov	r3, r0
 8006c56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006c58:	e003      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	74fb      	strb	r3, [r7, #19]
      break;
 8006c5e:	e000      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c62:	7cfb      	ldrb	r3, [r7, #19]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10b      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006c68:	4b52      	ldr	r3, [pc, #328]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c76:	494f      	ldr	r1, [pc, #316]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006c7e:	e001      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c80:	7cfb      	ldrb	r3, [r7, #19]
 8006c82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 80a0 	beq.w	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c92:	2300      	movs	r3, #0
 8006c94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c96:	4b47      	ldr	r3, [pc, #284]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e000      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00d      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cac:	4b41      	ldr	r3, [pc, #260]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cb0:	4a40      	ldr	r2, [pc, #256]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cc0:	60bb      	str	r3, [r7, #8]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a3a      	ldr	r2, [pc, #232]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cd4:	f7fd fb0c 	bl	80042f0 <HAL_GetTick>
 8006cd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006cda:	e009      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cdc:	f7fd fb08 	bl	80042f0 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d902      	bls.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	74fb      	strb	r3, [r7, #19]
        break;
 8006cee:	e005      	b.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006cf0:	4b31      	ldr	r3, [pc, #196]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d0ef      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006cfc:	7cfb      	ldrb	r3, [r7, #19]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d15c      	bne.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d02:	4b2c      	ldr	r3, [pc, #176]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d01f      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d019      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d20:	4b24      	ldr	r3, [pc, #144]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d2c:	4b21      	ldr	r3, [pc, #132]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d32:	4a20      	ldr	r2, [pc, #128]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d42:	4a1c      	ldr	r2, [pc, #112]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d4c:	4a19      	ldr	r2, [pc, #100]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d016      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d5e:	f7fd fac7 	bl	80042f0 <HAL_GetTick>
 8006d62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d64:	e00b      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d66:	f7fd fac3 	bl	80042f0 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d902      	bls.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	74fb      	strb	r3, [r7, #19]
            break;
 8006d7c:	e006      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d0ec      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006d8c:	7cfb      	ldrb	r3, [r7, #19]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10c      	bne.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d92:	4b08      	ldr	r3, [pc, #32]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006da2:	4904      	ldr	r1, [pc, #16]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006daa:	e009      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dac:	7cfb      	ldrb	r3, [r7, #19]
 8006dae:	74bb      	strb	r3, [r7, #18]
 8006db0:	e006      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006db2:	bf00      	nop
 8006db4:	40021000 	.word	0x40021000
 8006db8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dbc:	7cfb      	ldrb	r3, [r7, #19]
 8006dbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dc0:	7c7b      	ldrb	r3, [r7, #17]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d105      	bne.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dc6:	4b9e      	ldr	r3, [pc, #632]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dca:	4a9d      	ldr	r2, [pc, #628]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dd0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006dde:	4b98      	ldr	r3, [pc, #608]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006de4:	f023 0203 	bic.w	r2, r3, #3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dec:	4994      	ldr	r1, [pc, #592]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00a      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e00:	4b8f      	ldr	r3, [pc, #572]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e06:	f023 020c 	bic.w	r2, r3, #12
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e0e:	498c      	ldr	r1, [pc, #560]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0304 	and.w	r3, r3, #4
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e22:	4b87      	ldr	r3, [pc, #540]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e30:	4983      	ldr	r1, [pc, #524]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e44:	4b7e      	ldr	r3, [pc, #504]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e52:	497b      	ldr	r1, [pc, #492]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0310 	and.w	r3, r3, #16
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e66:	4b76      	ldr	r3, [pc, #472]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e74:	4972      	ldr	r1, [pc, #456]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0320 	and.w	r3, r3, #32
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00a      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e88:	4b6d      	ldr	r3, [pc, #436]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e96:	496a      	ldr	r1, [pc, #424]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006eaa:	4b65      	ldr	r3, [pc, #404]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eb8:	4961      	ldr	r1, [pc, #388]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00a      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ecc:	4b5c      	ldr	r3, [pc, #368]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eda:	4959      	ldr	r1, [pc, #356]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00a      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006eee:	4b54      	ldr	r3, [pc, #336]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006efc:	4950      	ldr	r1, [pc, #320]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00a      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f10:	4b4b      	ldr	r3, [pc, #300]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f16:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f1e:	4948      	ldr	r1, [pc, #288]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f32:	4b43      	ldr	r3, [pc, #268]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f40:	493f      	ldr	r1, [pc, #252]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d028      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f54:	4b3a      	ldr	r3, [pc, #232]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f62:	4937      	ldr	r1, [pc, #220]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f72:	d106      	bne.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f74:	4b32      	ldr	r3, [pc, #200]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	4a31      	ldr	r2, [pc, #196]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f7e:	60d3      	str	r3, [r2, #12]
 8006f80:	e011      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f8a:	d10c      	bne.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3304      	adds	r3, #4
 8006f90:	2101      	movs	r1, #1
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 f8d8 	bl	8007148 <RCCEx_PLLSAI1_Config>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006f9c:	7cfb      	ldrb	r3, [r7, #19]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006fa2:	7cfb      	ldrb	r3, [r7, #19]
 8006fa4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d028      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006fb2:	4b23      	ldr	r3, [pc, #140]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc0:	491f      	ldr	r1, [pc, #124]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fd0:	d106      	bne.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fd8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fdc:	60d3      	str	r3, [r2, #12]
 8006fde:	e011      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fe4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fe8:	d10c      	bne.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3304      	adds	r3, #4
 8006fee:	2101      	movs	r1, #1
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 f8a9 	bl	8007148 <RCCEx_PLLSAI1_Config>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ffa:	7cfb      	ldrb	r3, [r7, #19]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d001      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007000:	7cfb      	ldrb	r3, [r7, #19]
 8007002:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d02b      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007010:	4b0b      	ldr	r3, [pc, #44]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007016:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800701e:	4908      	ldr	r1, [pc, #32]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007020:	4313      	orrs	r3, r2
 8007022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800702a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800702e:	d109      	bne.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007030:	4b03      	ldr	r3, [pc, #12]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	4a02      	ldr	r2, [pc, #8]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007036:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800703a:	60d3      	str	r3, [r2, #12]
 800703c:	e014      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800703e:	bf00      	nop
 8007040:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007048:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800704c:	d10c      	bne.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	3304      	adds	r3, #4
 8007052:	2101      	movs	r1, #1
 8007054:	4618      	mov	r0, r3
 8007056:	f000 f877 	bl	8007148 <RCCEx_PLLSAI1_Config>
 800705a:	4603      	mov	r3, r0
 800705c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800705e:	7cfb      	ldrb	r3, [r7, #19]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d001      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007064:	7cfb      	ldrb	r3, [r7, #19]
 8007066:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d02f      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007074:	4b2b      	ldr	r3, [pc, #172]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800707a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007082:	4928      	ldr	r1, [pc, #160]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007084:	4313      	orrs	r3, r2
 8007086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800708e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007092:	d10d      	bne.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	3304      	adds	r3, #4
 8007098:	2102      	movs	r1, #2
 800709a:	4618      	mov	r0, r3
 800709c:	f000 f854 	bl	8007148 <RCCEx_PLLSAI1_Config>
 80070a0:	4603      	mov	r3, r0
 80070a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80070a4:	7cfb      	ldrb	r3, [r7, #19]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d014      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80070aa:	7cfb      	ldrb	r3, [r7, #19]
 80070ac:	74bb      	strb	r3, [r7, #18]
 80070ae:	e011      	b.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070b8:	d10c      	bne.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	3320      	adds	r3, #32
 80070be:	2102      	movs	r1, #2
 80070c0:	4618      	mov	r0, r3
 80070c2:	f000 f935 	bl	8007330 <RCCEx_PLLSAI2_Config>
 80070c6:	4603      	mov	r3, r0
 80070c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80070ca:	7cfb      	ldrb	r3, [r7, #19]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80070d0:	7cfb      	ldrb	r3, [r7, #19]
 80070d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00a      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80070e0:	4b10      	ldr	r3, [pc, #64]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80070e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070e6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070ee:	490d      	ldr	r1, [pc, #52]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00b      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007102:	4b08      	ldr	r3, [pc, #32]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007108:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007112:	4904      	ldr	r1, [pc, #16]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007114:	4313      	orrs	r3, r2
 8007116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800711a:	7cbb      	ldrb	r3, [r7, #18]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	40021000 	.word	0x40021000

08007128 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007128:	b480      	push	{r7}
 800712a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800712c:	4b05      	ldr	r3, [pc, #20]	@ (8007144 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a04      	ldr	r2, [pc, #16]	@ (8007144 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007132:	f043 0304 	orr.w	r3, r3, #4
 8007136:	6013      	str	r3, [r2, #0]
}
 8007138:	bf00      	nop
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	40021000 	.word	0x40021000

08007148 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007156:	4b75      	ldr	r3, [pc, #468]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f003 0303 	and.w	r3, r3, #3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d018      	beq.n	8007194 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007162:	4b72      	ldr	r3, [pc, #456]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f003 0203 	and.w	r2, r3, #3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d10d      	bne.n	800718e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
       ||
 8007176:	2b00      	cmp	r3, #0
 8007178:	d009      	beq.n	800718e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800717a:	4b6c      	ldr	r3, [pc, #432]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	091b      	lsrs	r3, r3, #4
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
       ||
 800718a:	429a      	cmp	r2, r3
 800718c:	d047      	beq.n	800721e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	73fb      	strb	r3, [r7, #15]
 8007192:	e044      	b.n	800721e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b03      	cmp	r3, #3
 800719a:	d018      	beq.n	80071ce <RCCEx_PLLSAI1_Config+0x86>
 800719c:	2b03      	cmp	r3, #3
 800719e:	d825      	bhi.n	80071ec <RCCEx_PLLSAI1_Config+0xa4>
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d002      	beq.n	80071aa <RCCEx_PLLSAI1_Config+0x62>
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d009      	beq.n	80071bc <RCCEx_PLLSAI1_Config+0x74>
 80071a8:	e020      	b.n	80071ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80071aa:	4b60      	ldr	r3, [pc, #384]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d11d      	bne.n	80071f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071ba:	e01a      	b.n	80071f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80071bc:	4b5b      	ldr	r3, [pc, #364]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d116      	bne.n	80071f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071cc:	e013      	b.n	80071f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80071ce:	4b57      	ldr	r3, [pc, #348]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10f      	bne.n	80071fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80071da:	4b54      	ldr	r3, [pc, #336]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d109      	bne.n	80071fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071ea:	e006      	b.n	80071fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	73fb      	strb	r3, [r7, #15]
      break;
 80071f0:	e004      	b.n	80071fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80071f2:	bf00      	nop
 80071f4:	e002      	b.n	80071fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80071f6:	bf00      	nop
 80071f8:	e000      	b.n	80071fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80071fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10d      	bne.n	800721e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007202:	4b4a      	ldr	r3, [pc, #296]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6819      	ldr	r1, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	3b01      	subs	r3, #1
 8007214:	011b      	lsls	r3, r3, #4
 8007216:	430b      	orrs	r3, r1
 8007218:	4944      	ldr	r1, [pc, #272]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 800721a:	4313      	orrs	r3, r2
 800721c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800721e:	7bfb      	ldrb	r3, [r7, #15]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d17d      	bne.n	8007320 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007224:	4b41      	ldr	r3, [pc, #260]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a40      	ldr	r2, [pc, #256]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 800722a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800722e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007230:	f7fd f85e 	bl	80042f0 <HAL_GetTick>
 8007234:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007236:	e009      	b.n	800724c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007238:	f7fd f85a 	bl	80042f0 <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	2b02      	cmp	r3, #2
 8007244:	d902      	bls.n	800724c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	73fb      	strb	r3, [r7, #15]
        break;
 800724a:	e005      	b.n	8007258 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800724c:	4b37      	ldr	r3, [pc, #220]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1ef      	bne.n	8007238 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007258:	7bfb      	ldrb	r3, [r7, #15]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d160      	bne.n	8007320 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d111      	bne.n	8007288 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007264:	4b31      	ldr	r3, [pc, #196]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800726c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	6892      	ldr	r2, [r2, #8]
 8007274:	0211      	lsls	r1, r2, #8
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	68d2      	ldr	r2, [r2, #12]
 800727a:	0912      	lsrs	r2, r2, #4
 800727c:	0452      	lsls	r2, r2, #17
 800727e:	430a      	orrs	r2, r1
 8007280:	492a      	ldr	r1, [pc, #168]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007282:	4313      	orrs	r3, r2
 8007284:	610b      	str	r3, [r1, #16]
 8007286:	e027      	b.n	80072d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d112      	bne.n	80072b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800728e:	4b27      	ldr	r3, [pc, #156]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007296:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	6892      	ldr	r2, [r2, #8]
 800729e:	0211      	lsls	r1, r2, #8
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	6912      	ldr	r2, [r2, #16]
 80072a4:	0852      	lsrs	r2, r2, #1
 80072a6:	3a01      	subs	r2, #1
 80072a8:	0552      	lsls	r2, r2, #21
 80072aa:	430a      	orrs	r2, r1
 80072ac:	491f      	ldr	r1, [pc, #124]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	610b      	str	r3, [r1, #16]
 80072b2:	e011      	b.n	80072d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072b4:	4b1d      	ldr	r3, [pc, #116]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80072bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6892      	ldr	r2, [r2, #8]
 80072c4:	0211      	lsls	r1, r2, #8
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	6952      	ldr	r2, [r2, #20]
 80072ca:	0852      	lsrs	r2, r2, #1
 80072cc:	3a01      	subs	r2, #1
 80072ce:	0652      	lsls	r2, r2, #25
 80072d0:	430a      	orrs	r2, r1
 80072d2:	4916      	ldr	r1, [pc, #88]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80072d8:	4b14      	ldr	r3, [pc, #80]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a13      	ldr	r2, [pc, #76]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 80072de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80072e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072e4:	f7fd f804 	bl	80042f0 <HAL_GetTick>
 80072e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80072ea:	e009      	b.n	8007300 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072ec:	f7fd f800 	bl	80042f0 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d902      	bls.n	8007300 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	73fb      	strb	r3, [r7, #15]
          break;
 80072fe:	e005      	b.n	800730c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007300:	4b0a      	ldr	r3, [pc, #40]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0ef      	beq.n	80072ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800730c:	7bfb      	ldrb	r3, [r7, #15]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d106      	bne.n	8007320 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007312:	4b06      	ldr	r3, [pc, #24]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007314:	691a      	ldr	r2, [r3, #16]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	4904      	ldr	r1, [pc, #16]	@ (800732c <RCCEx_PLLSAI1_Config+0x1e4>)
 800731c:	4313      	orrs	r3, r2
 800731e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007320:	7bfb      	ldrb	r3, [r7, #15]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	40021000 	.word	0x40021000

08007330 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800733e:	4b6a      	ldr	r3, [pc, #424]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d018      	beq.n	800737c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800734a:	4b67      	ldr	r3, [pc, #412]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	f003 0203 	and.w	r2, r3, #3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	429a      	cmp	r2, r3
 8007358:	d10d      	bne.n	8007376 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
       ||
 800735e:	2b00      	cmp	r3, #0
 8007360:	d009      	beq.n	8007376 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007362:	4b61      	ldr	r3, [pc, #388]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	091b      	lsrs	r3, r3, #4
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
       ||
 8007372:	429a      	cmp	r2, r3
 8007374:	d047      	beq.n	8007406 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	73fb      	strb	r3, [r7, #15]
 800737a:	e044      	b.n	8007406 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b03      	cmp	r3, #3
 8007382:	d018      	beq.n	80073b6 <RCCEx_PLLSAI2_Config+0x86>
 8007384:	2b03      	cmp	r3, #3
 8007386:	d825      	bhi.n	80073d4 <RCCEx_PLLSAI2_Config+0xa4>
 8007388:	2b01      	cmp	r3, #1
 800738a:	d002      	beq.n	8007392 <RCCEx_PLLSAI2_Config+0x62>
 800738c:	2b02      	cmp	r3, #2
 800738e:	d009      	beq.n	80073a4 <RCCEx_PLLSAI2_Config+0x74>
 8007390:	e020      	b.n	80073d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007392:	4b55      	ldr	r3, [pc, #340]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 0302 	and.w	r3, r3, #2
 800739a:	2b00      	cmp	r3, #0
 800739c:	d11d      	bne.n	80073da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073a2:	e01a      	b.n	80073da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073a4:	4b50      	ldr	r3, [pc, #320]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d116      	bne.n	80073de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073b4:	e013      	b.n	80073de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80073b6:	4b4c      	ldr	r3, [pc, #304]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10f      	bne.n	80073e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80073c2:	4b49      	ldr	r3, [pc, #292]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d109      	bne.n	80073e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073d2:	e006      	b.n	80073e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	73fb      	strb	r3, [r7, #15]
      break;
 80073d8:	e004      	b.n	80073e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80073da:	bf00      	nop
 80073dc:	e002      	b.n	80073e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80073de:	bf00      	nop
 80073e0:	e000      	b.n	80073e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80073e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10d      	bne.n	8007406 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80073ea:	4b3f      	ldr	r3, [pc, #252]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6819      	ldr	r1, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	011b      	lsls	r3, r3, #4
 80073fe:	430b      	orrs	r3, r1
 8007400:	4939      	ldr	r1, [pc, #228]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007402:	4313      	orrs	r3, r2
 8007404:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007406:	7bfb      	ldrb	r3, [r7, #15]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d167      	bne.n	80074dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800740c:	4b36      	ldr	r3, [pc, #216]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a35      	ldr	r2, [pc, #212]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007412:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007416:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007418:	f7fc ff6a 	bl	80042f0 <HAL_GetTick>
 800741c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800741e:	e009      	b.n	8007434 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007420:	f7fc ff66 	bl	80042f0 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	2b02      	cmp	r3, #2
 800742c:	d902      	bls.n	8007434 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	73fb      	strb	r3, [r7, #15]
        break;
 8007432:	e005      	b.n	8007440 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007434:	4b2c      	ldr	r3, [pc, #176]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1ef      	bne.n	8007420 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d14a      	bne.n	80074dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d111      	bne.n	8007470 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800744c:	4b26      	ldr	r3, [pc, #152]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007454:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	6892      	ldr	r2, [r2, #8]
 800745c:	0211      	lsls	r1, r2, #8
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	68d2      	ldr	r2, [r2, #12]
 8007462:	0912      	lsrs	r2, r2, #4
 8007464:	0452      	lsls	r2, r2, #17
 8007466:	430a      	orrs	r2, r1
 8007468:	491f      	ldr	r1, [pc, #124]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800746a:	4313      	orrs	r3, r2
 800746c:	614b      	str	r3, [r1, #20]
 800746e:	e011      	b.n	8007494 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007470:	4b1d      	ldr	r3, [pc, #116]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007478:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6892      	ldr	r2, [r2, #8]
 8007480:	0211      	lsls	r1, r2, #8
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6912      	ldr	r2, [r2, #16]
 8007486:	0852      	lsrs	r2, r2, #1
 8007488:	3a01      	subs	r2, #1
 800748a:	0652      	lsls	r2, r2, #25
 800748c:	430a      	orrs	r2, r1
 800748e:	4916      	ldr	r1, [pc, #88]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007490:	4313      	orrs	r3, r2
 8007492:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007494:	4b14      	ldr	r3, [pc, #80]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a13      	ldr	r2, [pc, #76]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800749a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800749e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074a0:	f7fc ff26 	bl	80042f0 <HAL_GetTick>
 80074a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80074a6:	e009      	b.n	80074bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80074a8:	f7fc ff22 	bl	80042f0 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d902      	bls.n	80074bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	73fb      	strb	r3, [r7, #15]
          break;
 80074ba:	e005      	b.n	80074c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80074bc:	4b0a      	ldr	r3, [pc, #40]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d0ef      	beq.n	80074a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80074ce:	4b06      	ldr	r3, [pc, #24]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074d0:	695a      	ldr	r2, [r3, #20]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	4904      	ldr	r1, [pc, #16]	@ (80074e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	40021000 	.word	0x40021000

080074ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d101      	bne.n	80074fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e095      	b.n	800762a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007502:	2b00      	cmp	r3, #0
 8007504:	d108      	bne.n	8007518 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800750e:	d009      	beq.n	8007524 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	61da      	str	r2, [r3, #28]
 8007516:	e005      	b.n	8007524 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d106      	bne.n	8007544 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f877 	bl	8007632 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2202      	movs	r2, #2
 8007548:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800755a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007564:	d902      	bls.n	800756c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007566:	2300      	movs	r3, #0
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	e002      	b.n	8007572 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800756c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007570:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800757a:	d007      	beq.n	800758c <HAL_SPI_Init+0xa0>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007584:	d002      	beq.n	800758c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800759c:	431a      	orrs	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	f003 0302 	and.w	r3, r3, #2
 80075a6:	431a      	orrs	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	431a      	orrs	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075ba:	431a      	orrs	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	69db      	ldr	r3, [r3, #28]
 80075c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075c4:	431a      	orrs	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ce:	ea42 0103 	orr.w	r1, r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	0c1b      	lsrs	r3, r3, #16
 80075e8:	f003 0204 	and.w	r2, r3, #4
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f0:	f003 0310 	and.w	r3, r3, #16
 80075f4:	431a      	orrs	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075fa:	f003 0308 	and.w	r3, r3, #8
 80075fe:	431a      	orrs	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007608:	ea42 0103 	orr.w	r1, r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800763a:	bf00      	nop
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b08a      	sub	sp, #40	@ 0x28
 800764a:	af00      	add	r7, sp, #0
 800764c:	60f8      	str	r0, [r7, #12]
 800764e:	60b9      	str	r1, [r7, #8]
 8007650:	607a      	str	r2, [r7, #4]
 8007652:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007654:	2301      	movs	r3, #1
 8007656:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007658:	f7fc fe4a 	bl	80042f0 <HAL_GetTick>
 800765c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007664:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800766c:	887b      	ldrh	r3, [r7, #2]
 800766e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8007670:	887b      	ldrh	r3, [r7, #2]
 8007672:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007674:	7ffb      	ldrb	r3, [r7, #31]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d00c      	beq.n	8007694 <HAL_SPI_TransmitReceive+0x4e>
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007680:	d106      	bne.n	8007690 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d102      	bne.n	8007690 <HAL_SPI_TransmitReceive+0x4a>
 800768a:	7ffb      	ldrb	r3, [r7, #31]
 800768c:	2b04      	cmp	r3, #4
 800768e:	d001      	beq.n	8007694 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007690:	2302      	movs	r3, #2
 8007692:	e1f3      	b.n	8007a7c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d005      	beq.n	80076a6 <HAL_SPI_TransmitReceive+0x60>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <HAL_SPI_TransmitReceive+0x60>
 80076a0:	887b      	ldrh	r3, [r7, #2]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e1e8      	b.n	8007a7c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d101      	bne.n	80076b8 <HAL_SPI_TransmitReceive+0x72>
 80076b4:	2302      	movs	r3, #2
 80076b6:	e1e1      	b.n	8007a7c <HAL_SPI_TransmitReceive+0x436>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b04      	cmp	r3, #4
 80076ca:	d003      	beq.n	80076d4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2205      	movs	r2, #5
 80076d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	887a      	ldrh	r2, [r7, #2]
 80076e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	887a      	ldrh	r2, [r7, #2]
 80076ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	887a      	ldrh	r2, [r7, #2]
 80076fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	887a      	ldrh	r2, [r7, #2]
 8007700:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007716:	d802      	bhi.n	800771e <HAL_SPI_TransmitReceive+0xd8>
 8007718:	8abb      	ldrh	r3, [r7, #20]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d908      	bls.n	8007730 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800772c:	605a      	str	r2, [r3, #4]
 800772e:	e007      	b.n	8007740 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685a      	ldr	r2, [r3, #4]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800773e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800774a:	2b40      	cmp	r3, #64	@ 0x40
 800774c:	d007      	beq.n	800775e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800775c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007766:	f240 8083 	bls.w	8007870 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d002      	beq.n	8007778 <HAL_SPI_TransmitReceive+0x132>
 8007772:	8afb      	ldrh	r3, [r7, #22]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d16f      	bne.n	8007858 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800777c:	881a      	ldrh	r2, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007788:	1c9a      	adds	r2, r3, #2
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007792:	b29b      	uxth	r3, r3
 8007794:	3b01      	subs	r3, #1
 8007796:	b29a      	uxth	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800779c:	e05c      	b.n	8007858 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d11b      	bne.n	80077e4 <HAL_SPI_TransmitReceive+0x19e>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d016      	beq.n	80077e4 <HAL_SPI_TransmitReceive+0x19e>
 80077b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d113      	bne.n	80077e4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c0:	881a      	ldrh	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077cc:	1c9a      	adds	r2, r3, #2
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	3b01      	subs	r3, #1
 80077da:	b29a      	uxth	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077e0:	2300      	movs	r3, #0
 80077e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d11c      	bne.n	800782c <HAL_SPI_TransmitReceive+0x1e6>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d016      	beq.n	800782c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68da      	ldr	r2, [r3, #12]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007808:	b292      	uxth	r2, r2
 800780a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007810:	1c9a      	adds	r2, r3, #2
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800781c:	b29b      	uxth	r3, r3
 800781e:	3b01      	subs	r3, #1
 8007820:	b29a      	uxth	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007828:	2301      	movs	r3, #1
 800782a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800782c:	f7fc fd60 	bl	80042f0 <HAL_GetTick>
 8007830:	4602      	mov	r2, r0
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007838:	429a      	cmp	r2, r3
 800783a:	d80d      	bhi.n	8007858 <HAL_SPI_TransmitReceive+0x212>
 800783c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007842:	d009      	beq.n	8007858 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e111      	b.n	8007a7c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d19d      	bne.n	800779e <HAL_SPI_TransmitReceive+0x158>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007868:	b29b      	uxth	r3, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d197      	bne.n	800779e <HAL_SPI_TransmitReceive+0x158>
 800786e:	e0e5      	b.n	8007a3c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <HAL_SPI_TransmitReceive+0x23a>
 8007878:	8afb      	ldrh	r3, [r7, #22]
 800787a:	2b01      	cmp	r3, #1
 800787c:	f040 80d1 	bne.w	8007a22 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007884:	b29b      	uxth	r3, r3
 8007886:	2b01      	cmp	r3, #1
 8007888:	d912      	bls.n	80078b0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800788e:	881a      	ldrh	r2, [r3, #0]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789a:	1c9a      	adds	r2, r3, #2
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	3b02      	subs	r3, #2
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80078ae:	e0b8      	b.n	8007a22 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	330c      	adds	r3, #12
 80078ba:	7812      	ldrb	r2, [r2, #0]
 80078bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	3b01      	subs	r3, #1
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078d6:	e0a4      	b.n	8007a22 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d134      	bne.n	8007950 <HAL_SPI_TransmitReceive+0x30a>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d02f      	beq.n	8007950 <HAL_SPI_TransmitReceive+0x30a>
 80078f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d12c      	bne.n	8007950 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d912      	bls.n	8007926 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007904:	881a      	ldrh	r2, [r3, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007910:	1c9a      	adds	r2, r3, #2
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800791a:	b29b      	uxth	r3, r3
 800791c:	3b02      	subs	r3, #2
 800791e:	b29a      	uxth	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007924:	e012      	b.n	800794c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	330c      	adds	r3, #12
 8007930:	7812      	ldrb	r2, [r2, #0]
 8007932:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007938:	1c5a      	adds	r2, r3, #1
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007942:	b29b      	uxth	r3, r3
 8007944:	3b01      	subs	r3, #1
 8007946:	b29a      	uxth	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b01      	cmp	r3, #1
 800795c:	d148      	bne.n	80079f0 <HAL_SPI_TransmitReceive+0x3aa>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007964:	b29b      	uxth	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d042      	beq.n	80079f0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007970:	b29b      	uxth	r3, r3
 8007972:	2b01      	cmp	r3, #1
 8007974:	d923      	bls.n	80079be <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007980:	b292      	uxth	r2, r2
 8007982:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007988:	1c9a      	adds	r2, r3, #2
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007994:	b29b      	uxth	r3, r3
 8007996:	3b02      	subs	r3, #2
 8007998:	b29a      	uxth	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d81f      	bhi.n	80079ec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80079ba:	605a      	str	r2, [r3, #4]
 80079bc:	e016      	b.n	80079ec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f103 020c 	add.w	r2, r3, #12
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ca:	7812      	ldrb	r2, [r2, #0]
 80079cc:	b2d2      	uxtb	r2, r2
 80079ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d4:	1c5a      	adds	r2, r3, #1
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	3b01      	subs	r3, #1
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079ec:	2301      	movs	r3, #1
 80079ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80079f0:	f7fc fc7e 	bl	80042f0 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d803      	bhi.n	8007a08 <HAL_SPI_TransmitReceive+0x3c2>
 8007a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a06:	d102      	bne.n	8007a0e <HAL_SPI_TransmitReceive+0x3c8>
 8007a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d109      	bne.n	8007a22 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e02c      	b.n	8007a7c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f47f af55 	bne.w	80078d8 <HAL_SPI_TransmitReceive+0x292>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f47f af4e 	bne.w	80078d8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a3c:	6a3a      	ldr	r2, [r7, #32]
 8007a3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f000 f94b 	bl	8007cdc <SPI_EndRxTxTransaction>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d008      	beq.n	8007a5e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2220      	movs	r2, #32
 8007a50:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e00e      	b.n	8007a7c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e000      	b.n	8007a7c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
  }
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3728      	adds	r7, #40	@ 0x28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007a92:	b2db      	uxtb	r3, r3
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b088      	sub	sp, #32
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	4613      	mov	r3, r2
 8007aae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ab0:	f7fc fc1e 	bl	80042f0 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab8:	1a9b      	subs	r3, r3, r2
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	4413      	add	r3, r2
 8007abe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ac0:	f7fc fc16 	bl	80042f0 <HAL_GetTick>
 8007ac4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007ac6:	4b39      	ldr	r3, [pc, #228]	@ (8007bac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	015b      	lsls	r3, r3, #5
 8007acc:	0d1b      	lsrs	r3, r3, #20
 8007ace:	69fa      	ldr	r2, [r7, #28]
 8007ad0:	fb02 f303 	mul.w	r3, r2, r3
 8007ad4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ad6:	e054      	b.n	8007b82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ade:	d050      	beq.n	8007b82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ae0:	f7fc fc06 	bl	80042f0 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	69fa      	ldr	r2, [r7, #28]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d902      	bls.n	8007af6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d13d      	bne.n	8007b72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007b04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b0e:	d111      	bne.n	8007b34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b18:	d004      	beq.n	8007b24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b22:	d107      	bne.n	8007b34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b3c:	d10f      	bne.n	8007b5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b4c:	601a      	str	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e017      	b.n	8007ba2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689a      	ldr	r2, [r3, #8]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	bf0c      	ite	eq
 8007b92:	2301      	moveq	r3, #1
 8007b94:	2300      	movne	r3, #0
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	461a      	mov	r2, r3
 8007b9a:	79fb      	ldrb	r3, [r7, #7]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d19b      	bne.n	8007ad8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3720      	adds	r7, #32
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	2000001c 	.word	0x2000001c

08007bb0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b08a      	sub	sp, #40	@ 0x28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
 8007bbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007bc2:	f7fc fb95 	bl	80042f0 <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bca:	1a9b      	subs	r3, r3, r2
 8007bcc:	683a      	ldr	r2, [r7, #0]
 8007bce:	4413      	add	r3, r2
 8007bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007bd2:	f7fc fb8d 	bl	80042f0 <HAL_GetTick>
 8007bd6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	330c      	adds	r3, #12
 8007bde:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007be0:	4b3d      	ldr	r3, [pc, #244]	@ (8007cd8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	4613      	mov	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	00da      	lsls	r2, r3, #3
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	0d1b      	lsrs	r3, r3, #20
 8007bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bf2:	fb02 f303 	mul.w	r3, r2, r3
 8007bf6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007bf8:	e060      	b.n	8007cbc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007c00:	d107      	bne.n	8007c12 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d104      	bne.n	8007c12 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c18:	d050      	beq.n	8007cbc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c1a:	f7fc fb69 	bl	80042f0 <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d902      	bls.n	8007c30 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d13d      	bne.n	8007cac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c48:	d111      	bne.n	8007c6e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c52:	d004      	beq.n	8007c5e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c5c:	d107      	bne.n	8007c6e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c76:	d10f      	bne.n	8007c98 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e010      	b.n	8007cce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689a      	ldr	r2, [r3, #8]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d196      	bne.n	8007bfa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3728      	adds	r7, #40	@ 0x28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	2000001c 	.word	0x2000001c

08007cdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af02      	add	r7, sp, #8
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f7ff ff5b 	bl	8007bb0 <SPI_WaitFifoStateUntilTimeout>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d007      	beq.n	8007d10 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d04:	f043 0220 	orr.w	r2, r3, #32
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e027      	b.n	8007d60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2200      	movs	r2, #0
 8007d18:	2180      	movs	r1, #128	@ 0x80
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f7ff fec0 	bl	8007aa0 <SPI_WaitFlagStateUntilTimeout>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d007      	beq.n	8007d36 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d2a:	f043 0220 	orr.w	r2, r3, #32
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e014      	b.n	8007d60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f7ff ff34 	bl	8007bb0 <SPI_WaitFifoStateUntilTimeout>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d007      	beq.n	8007d5e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d52:	f043 0220 	orr.w	r2, r3, #32
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e000      	b.n	8007d60 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e049      	b.n	8007e0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d106      	bne.n	8007d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f841 	bl	8007e16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2202      	movs	r2, #2
 8007d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	3304      	adds	r3, #4
 8007da4:	4619      	mov	r1, r3
 8007da6:	4610      	mov	r0, r2
 8007da8:	f000 f9e0 	bl	800816c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b083      	sub	sp, #12
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007e1e:	bf00      	nop
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
	...

08007e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d001      	beq.n	8007e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e04f      	b.n	8007ee4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0201 	orr.w	r2, r2, #1
 8007e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a23      	ldr	r2, [pc, #140]	@ (8007ef0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d01d      	beq.n	8007ea2 <HAL_TIM_Base_Start_IT+0x76>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e6e:	d018      	beq.n	8007ea2 <HAL_TIM_Base_Start_IT+0x76>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a1f      	ldr	r2, [pc, #124]	@ (8007ef4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d013      	beq.n	8007ea2 <HAL_TIM_Base_Start_IT+0x76>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ef8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d00e      	beq.n	8007ea2 <HAL_TIM_Base_Start_IT+0x76>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a1c      	ldr	r2, [pc, #112]	@ (8007efc <HAL_TIM_Base_Start_IT+0xd0>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d009      	beq.n	8007ea2 <HAL_TIM_Base_Start_IT+0x76>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a1b      	ldr	r2, [pc, #108]	@ (8007f00 <HAL_TIM_Base_Start_IT+0xd4>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d004      	beq.n	8007ea2 <HAL_TIM_Base_Start_IT+0x76>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a19      	ldr	r2, [pc, #100]	@ (8007f04 <HAL_TIM_Base_Start_IT+0xd8>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d115      	bne.n	8007ece <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689a      	ldr	r2, [r3, #8]
 8007ea8:	4b17      	ldr	r3, [pc, #92]	@ (8007f08 <HAL_TIM_Base_Start_IT+0xdc>)
 8007eaa:	4013      	ands	r3, r2
 8007eac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b06      	cmp	r3, #6
 8007eb2:	d015      	beq.n	8007ee0 <HAL_TIM_Base_Start_IT+0xb4>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007eba:	d011      	beq.n	8007ee0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f042 0201 	orr.w	r2, r2, #1
 8007eca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ecc:	e008      	b.n	8007ee0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f042 0201 	orr.w	r2, r2, #1
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e000      	b.n	8007ee2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ee0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	40012c00 	.word	0x40012c00
 8007ef4:	40000400 	.word	0x40000400
 8007ef8:	40000800 	.word	0x40000800
 8007efc:	40000c00 	.word	0x40000c00
 8007f00:	40013400 	.word	0x40013400
 8007f04:	40014000 	.word	0x40014000
 8007f08:	00010007 	.word	0x00010007

08007f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d020      	beq.n	8007f70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d01b      	beq.n	8007f70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f06f 0202 	mvn.w	r2, #2
 8007f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d003      	beq.n	8007f5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f8e9 	bl	800812e <HAL_TIM_IC_CaptureCallback>
 8007f5c:	e005      	b.n	8007f6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f8db 	bl	800811a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f8ec 	bl	8008142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	f003 0304 	and.w	r3, r3, #4
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d020      	beq.n	8007fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f003 0304 	and.w	r3, r3, #4
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d01b      	beq.n	8007fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f06f 0204 	mvn.w	r2, #4
 8007f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2202      	movs	r2, #2
 8007f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f8c3 	bl	800812e <HAL_TIM_IC_CaptureCallback>
 8007fa8:	e005      	b.n	8007fb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f8b5 	bl	800811a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f8c6 	bl	8008142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f003 0308 	and.w	r3, r3, #8
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d020      	beq.n	8008008 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f003 0308 	and.w	r3, r3, #8
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d01b      	beq.n	8008008 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f06f 0208 	mvn.w	r2, #8
 8007fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2204      	movs	r2, #4
 8007fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	f003 0303 	and.w	r3, r3, #3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f89d 	bl	800812e <HAL_TIM_IC_CaptureCallback>
 8007ff4:	e005      	b.n	8008002 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f88f 	bl	800811a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f8a0 	bl	8008142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	f003 0310 	and.w	r3, r3, #16
 800800e:	2b00      	cmp	r3, #0
 8008010:	d020      	beq.n	8008054 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f003 0310 	and.w	r3, r3, #16
 8008018:	2b00      	cmp	r3, #0
 800801a:	d01b      	beq.n	8008054 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f06f 0210 	mvn.w	r2, #16
 8008024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2208      	movs	r2, #8
 800802a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f877 	bl	800812e <HAL_TIM_IC_CaptureCallback>
 8008040:	e005      	b.n	800804e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f869 	bl	800811a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f87a 	bl	8008142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00c      	beq.n	8008078 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	2b00      	cmp	r3, #0
 8008066:	d007      	beq.n	8008078 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f06f 0201 	mvn.w	r2, #1
 8008070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7fa ffcc 	bl	8003010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800807e:	2b00      	cmp	r3, #0
 8008080:	d104      	bne.n	800808c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00c      	beq.n	80080a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008092:	2b00      	cmp	r3, #0
 8008094:	d007      	beq.n	80080a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800809e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f913 	bl	80082cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00c      	beq.n	80080ca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d007      	beq.n	80080ca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80080c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f90b 	bl	80082e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00c      	beq.n	80080ee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d007      	beq.n	80080ee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80080e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f834 	bl	8008156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	f003 0320 	and.w	r3, r3, #32
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00c      	beq.n	8008112 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f003 0320 	and.w	r3, r3, #32
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d007      	beq.n	8008112 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f06f 0220 	mvn.w	r2, #32
 800810a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f8d3 	bl	80082b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008112:	bf00      	nop
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800811a:	b480      	push	{r7}
 800811c:	b083      	sub	sp, #12
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008122:	bf00      	nop
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800812e:	b480      	push	{r7}
 8008130:	b083      	sub	sp, #12
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008136:	bf00      	nop
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008142:	b480      	push	{r7}
 8008144:	b083      	sub	sp, #12
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800814a:	bf00      	nop
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008156:	b480      	push	{r7}
 8008158:	b083      	sub	sp, #12
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800815e:	bf00      	nop
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
	...

0800816c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a46      	ldr	r2, [pc, #280]	@ (8008298 <TIM_Base_SetConfig+0x12c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d013      	beq.n	80081ac <TIM_Base_SetConfig+0x40>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800818a:	d00f      	beq.n	80081ac <TIM_Base_SetConfig+0x40>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a43      	ldr	r2, [pc, #268]	@ (800829c <TIM_Base_SetConfig+0x130>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d00b      	beq.n	80081ac <TIM_Base_SetConfig+0x40>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a42      	ldr	r2, [pc, #264]	@ (80082a0 <TIM_Base_SetConfig+0x134>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d007      	beq.n	80081ac <TIM_Base_SetConfig+0x40>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a41      	ldr	r2, [pc, #260]	@ (80082a4 <TIM_Base_SetConfig+0x138>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d003      	beq.n	80081ac <TIM_Base_SetConfig+0x40>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a40      	ldr	r2, [pc, #256]	@ (80082a8 <TIM_Base_SetConfig+0x13c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d108      	bne.n	80081be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a35      	ldr	r2, [pc, #212]	@ (8008298 <TIM_Base_SetConfig+0x12c>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d01f      	beq.n	8008206 <TIM_Base_SetConfig+0x9a>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081cc:	d01b      	beq.n	8008206 <TIM_Base_SetConfig+0x9a>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a32      	ldr	r2, [pc, #200]	@ (800829c <TIM_Base_SetConfig+0x130>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d017      	beq.n	8008206 <TIM_Base_SetConfig+0x9a>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a31      	ldr	r2, [pc, #196]	@ (80082a0 <TIM_Base_SetConfig+0x134>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d013      	beq.n	8008206 <TIM_Base_SetConfig+0x9a>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a30      	ldr	r2, [pc, #192]	@ (80082a4 <TIM_Base_SetConfig+0x138>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d00f      	beq.n	8008206 <TIM_Base_SetConfig+0x9a>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a2f      	ldr	r2, [pc, #188]	@ (80082a8 <TIM_Base_SetConfig+0x13c>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d00b      	beq.n	8008206 <TIM_Base_SetConfig+0x9a>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a2e      	ldr	r2, [pc, #184]	@ (80082ac <TIM_Base_SetConfig+0x140>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d007      	beq.n	8008206 <TIM_Base_SetConfig+0x9a>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a2d      	ldr	r2, [pc, #180]	@ (80082b0 <TIM_Base_SetConfig+0x144>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d003      	beq.n	8008206 <TIM_Base_SetConfig+0x9a>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a2c      	ldr	r2, [pc, #176]	@ (80082b4 <TIM_Base_SetConfig+0x148>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d108      	bne.n	8008218 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800820c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	4313      	orrs	r3, r2
 8008216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	4313      	orrs	r3, r2
 8008224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	689a      	ldr	r2, [r3, #8]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a16      	ldr	r2, [pc, #88]	@ (8008298 <TIM_Base_SetConfig+0x12c>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d00f      	beq.n	8008264 <TIM_Base_SetConfig+0xf8>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a18      	ldr	r2, [pc, #96]	@ (80082a8 <TIM_Base_SetConfig+0x13c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d00b      	beq.n	8008264 <TIM_Base_SetConfig+0xf8>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a17      	ldr	r2, [pc, #92]	@ (80082ac <TIM_Base_SetConfig+0x140>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d007      	beq.n	8008264 <TIM_Base_SetConfig+0xf8>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a16      	ldr	r2, [pc, #88]	@ (80082b0 <TIM_Base_SetConfig+0x144>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d003      	beq.n	8008264 <TIM_Base_SetConfig+0xf8>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a15      	ldr	r2, [pc, #84]	@ (80082b4 <TIM_Base_SetConfig+0x148>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d103      	bne.n	800826c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	691a      	ldr	r2, [r3, #16]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	2b01      	cmp	r3, #1
 800827c:	d105      	bne.n	800828a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	f023 0201 	bic.w	r2, r3, #1
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	611a      	str	r2, [r3, #16]
  }
}
 800828a:	bf00      	nop
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	40012c00 	.word	0x40012c00
 800829c:	40000400 	.word	0x40000400
 80082a0:	40000800 	.word	0x40000800
 80082a4:	40000c00 	.word	0x40000c00
 80082a8:	40013400 	.word	0x40013400
 80082ac:	40014000 	.word	0x40014000
 80082b0:	40014400 	.word	0x40014400
 80082b4:	40014800 	.word	0x40014800

080082b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e040      	b.n	8008388 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800830a:	2b00      	cmp	r3, #0
 800830c:	d106      	bne.n	800831c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f7fa ffe4 	bl	80032e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2224      	movs	r2, #36	@ 0x24
 8008320:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f022 0201 	bic.w	r2, r2, #1
 8008330:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008336:	2b00      	cmp	r3, #0
 8008338:	d002      	beq.n	8008340 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fb6a 	bl	8008a14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f8af 	bl	80084a4 <UART_SetConfig>
 8008346:	4603      	mov	r3, r0
 8008348:	2b01      	cmp	r3, #1
 800834a:	d101      	bne.n	8008350 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e01b      	b.n	8008388 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800835e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	689a      	ldr	r2, [r3, #8]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800836e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f042 0201 	orr.w	r2, r2, #1
 800837e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 fbe9 	bl	8008b58 <UART_CheckIdleState>
 8008386:	4603      	mov	r3, r0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b08a      	sub	sp, #40	@ 0x28
 8008394:	af02      	add	r7, sp, #8
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	603b      	str	r3, [r7, #0]
 800839c:	4613      	mov	r3, r2
 800839e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083a4:	2b20      	cmp	r3, #32
 80083a6:	d177      	bne.n	8008498 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d002      	beq.n	80083b4 <HAL_UART_Transmit+0x24>
 80083ae:	88fb      	ldrh	r3, [r7, #6]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e070      	b.n	800849a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2221      	movs	r2, #33	@ 0x21
 80083c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083c6:	f7fb ff93 	bl	80042f0 <HAL_GetTick>
 80083ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	88fa      	ldrh	r2, [r7, #6]
 80083d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	88fa      	ldrh	r2, [r7, #6]
 80083d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083e4:	d108      	bne.n	80083f8 <HAL_UART_Transmit+0x68>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d104      	bne.n	80083f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	61bb      	str	r3, [r7, #24]
 80083f6:	e003      	b.n	8008400 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083fc:	2300      	movs	r3, #0
 80083fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008400:	e02f      	b.n	8008462 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	2200      	movs	r2, #0
 800840a:	2180      	movs	r1, #128	@ 0x80
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 fc4b 	bl	8008ca8 <UART_WaitOnFlagUntilTimeout>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d004      	beq.n	8008422 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2220      	movs	r2, #32
 800841c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	e03b      	b.n	800849a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10b      	bne.n	8008440 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	881a      	ldrh	r2, [r3, #0]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008434:	b292      	uxth	r2, r2
 8008436:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	3302      	adds	r3, #2
 800843c:	61bb      	str	r3, [r7, #24]
 800843e:	e007      	b.n	8008450 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	781a      	ldrb	r2, [r3, #0]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	3301      	adds	r3, #1
 800844e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008456:	b29b      	uxth	r3, r3
 8008458:	3b01      	subs	r3, #1
 800845a:	b29a      	uxth	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008468:	b29b      	uxth	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1c9      	bne.n	8008402 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2200      	movs	r2, #0
 8008476:	2140      	movs	r1, #64	@ 0x40
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f000 fc15 	bl	8008ca8 <UART_WaitOnFlagUntilTimeout>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d004      	beq.n	800848e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2220      	movs	r2, #32
 8008488:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e005      	b.n	800849a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2220      	movs	r2, #32
 8008492:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	e000      	b.n	800849a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008498:	2302      	movs	r3, #2
  }
}
 800849a:	4618      	mov	r0, r3
 800849c:	3720      	adds	r7, #32
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
	...

080084a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084a8:	b08a      	sub	sp, #40	@ 0x28
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	689a      	ldr	r2, [r3, #8]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	431a      	orrs	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	431a      	orrs	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	69db      	ldr	r3, [r3, #28]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	4ba4      	ldr	r3, [pc, #656]	@ (8008764 <UART_SetConfig+0x2c0>)
 80084d4:	4013      	ands	r3, r2
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	6812      	ldr	r2, [r2, #0]
 80084da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80084dc:	430b      	orrs	r3, r1
 80084de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	68da      	ldr	r2, [r3, #12]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	430a      	orrs	r2, r1
 80084f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a99      	ldr	r2, [pc, #612]	@ (8008768 <UART_SetConfig+0x2c4>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d004      	beq.n	8008510 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800850c:	4313      	orrs	r3, r2
 800850e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008520:	430a      	orrs	r2, r1
 8008522:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a90      	ldr	r2, [pc, #576]	@ (800876c <UART_SetConfig+0x2c8>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d126      	bne.n	800857c <UART_SetConfig+0xd8>
 800852e:	4b90      	ldr	r3, [pc, #576]	@ (8008770 <UART_SetConfig+0x2cc>)
 8008530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008534:	f003 0303 	and.w	r3, r3, #3
 8008538:	2b03      	cmp	r3, #3
 800853a:	d81b      	bhi.n	8008574 <UART_SetConfig+0xd0>
 800853c:	a201      	add	r2, pc, #4	@ (adr r2, 8008544 <UART_SetConfig+0xa0>)
 800853e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008542:	bf00      	nop
 8008544:	08008555 	.word	0x08008555
 8008548:	08008565 	.word	0x08008565
 800854c:	0800855d 	.word	0x0800855d
 8008550:	0800856d 	.word	0x0800856d
 8008554:	2301      	movs	r3, #1
 8008556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800855a:	e116      	b.n	800878a <UART_SetConfig+0x2e6>
 800855c:	2302      	movs	r3, #2
 800855e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008562:	e112      	b.n	800878a <UART_SetConfig+0x2e6>
 8008564:	2304      	movs	r3, #4
 8008566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800856a:	e10e      	b.n	800878a <UART_SetConfig+0x2e6>
 800856c:	2308      	movs	r3, #8
 800856e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008572:	e10a      	b.n	800878a <UART_SetConfig+0x2e6>
 8008574:	2310      	movs	r3, #16
 8008576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800857a:	e106      	b.n	800878a <UART_SetConfig+0x2e6>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a7c      	ldr	r2, [pc, #496]	@ (8008774 <UART_SetConfig+0x2d0>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d138      	bne.n	80085f8 <UART_SetConfig+0x154>
 8008586:	4b7a      	ldr	r3, [pc, #488]	@ (8008770 <UART_SetConfig+0x2cc>)
 8008588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800858c:	f003 030c 	and.w	r3, r3, #12
 8008590:	2b0c      	cmp	r3, #12
 8008592:	d82d      	bhi.n	80085f0 <UART_SetConfig+0x14c>
 8008594:	a201      	add	r2, pc, #4	@ (adr r2, 800859c <UART_SetConfig+0xf8>)
 8008596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859a:	bf00      	nop
 800859c:	080085d1 	.word	0x080085d1
 80085a0:	080085f1 	.word	0x080085f1
 80085a4:	080085f1 	.word	0x080085f1
 80085a8:	080085f1 	.word	0x080085f1
 80085ac:	080085e1 	.word	0x080085e1
 80085b0:	080085f1 	.word	0x080085f1
 80085b4:	080085f1 	.word	0x080085f1
 80085b8:	080085f1 	.word	0x080085f1
 80085bc:	080085d9 	.word	0x080085d9
 80085c0:	080085f1 	.word	0x080085f1
 80085c4:	080085f1 	.word	0x080085f1
 80085c8:	080085f1 	.word	0x080085f1
 80085cc:	080085e9 	.word	0x080085e9
 80085d0:	2300      	movs	r3, #0
 80085d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085d6:	e0d8      	b.n	800878a <UART_SetConfig+0x2e6>
 80085d8:	2302      	movs	r3, #2
 80085da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085de:	e0d4      	b.n	800878a <UART_SetConfig+0x2e6>
 80085e0:	2304      	movs	r3, #4
 80085e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085e6:	e0d0      	b.n	800878a <UART_SetConfig+0x2e6>
 80085e8:	2308      	movs	r3, #8
 80085ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085ee:	e0cc      	b.n	800878a <UART_SetConfig+0x2e6>
 80085f0:	2310      	movs	r3, #16
 80085f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085f6:	e0c8      	b.n	800878a <UART_SetConfig+0x2e6>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a5e      	ldr	r2, [pc, #376]	@ (8008778 <UART_SetConfig+0x2d4>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d125      	bne.n	800864e <UART_SetConfig+0x1aa>
 8008602:	4b5b      	ldr	r3, [pc, #364]	@ (8008770 <UART_SetConfig+0x2cc>)
 8008604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008608:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800860c:	2b30      	cmp	r3, #48	@ 0x30
 800860e:	d016      	beq.n	800863e <UART_SetConfig+0x19a>
 8008610:	2b30      	cmp	r3, #48	@ 0x30
 8008612:	d818      	bhi.n	8008646 <UART_SetConfig+0x1a2>
 8008614:	2b20      	cmp	r3, #32
 8008616:	d00a      	beq.n	800862e <UART_SetConfig+0x18a>
 8008618:	2b20      	cmp	r3, #32
 800861a:	d814      	bhi.n	8008646 <UART_SetConfig+0x1a2>
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <UART_SetConfig+0x182>
 8008620:	2b10      	cmp	r3, #16
 8008622:	d008      	beq.n	8008636 <UART_SetConfig+0x192>
 8008624:	e00f      	b.n	8008646 <UART_SetConfig+0x1a2>
 8008626:	2300      	movs	r3, #0
 8008628:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800862c:	e0ad      	b.n	800878a <UART_SetConfig+0x2e6>
 800862e:	2302      	movs	r3, #2
 8008630:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008634:	e0a9      	b.n	800878a <UART_SetConfig+0x2e6>
 8008636:	2304      	movs	r3, #4
 8008638:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800863c:	e0a5      	b.n	800878a <UART_SetConfig+0x2e6>
 800863e:	2308      	movs	r3, #8
 8008640:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008644:	e0a1      	b.n	800878a <UART_SetConfig+0x2e6>
 8008646:	2310      	movs	r3, #16
 8008648:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800864c:	e09d      	b.n	800878a <UART_SetConfig+0x2e6>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a4a      	ldr	r2, [pc, #296]	@ (800877c <UART_SetConfig+0x2d8>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d125      	bne.n	80086a4 <UART_SetConfig+0x200>
 8008658:	4b45      	ldr	r3, [pc, #276]	@ (8008770 <UART_SetConfig+0x2cc>)
 800865a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800865e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008662:	2bc0      	cmp	r3, #192	@ 0xc0
 8008664:	d016      	beq.n	8008694 <UART_SetConfig+0x1f0>
 8008666:	2bc0      	cmp	r3, #192	@ 0xc0
 8008668:	d818      	bhi.n	800869c <UART_SetConfig+0x1f8>
 800866a:	2b80      	cmp	r3, #128	@ 0x80
 800866c:	d00a      	beq.n	8008684 <UART_SetConfig+0x1e0>
 800866e:	2b80      	cmp	r3, #128	@ 0x80
 8008670:	d814      	bhi.n	800869c <UART_SetConfig+0x1f8>
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <UART_SetConfig+0x1d8>
 8008676:	2b40      	cmp	r3, #64	@ 0x40
 8008678:	d008      	beq.n	800868c <UART_SetConfig+0x1e8>
 800867a:	e00f      	b.n	800869c <UART_SetConfig+0x1f8>
 800867c:	2300      	movs	r3, #0
 800867e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008682:	e082      	b.n	800878a <UART_SetConfig+0x2e6>
 8008684:	2302      	movs	r3, #2
 8008686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800868a:	e07e      	b.n	800878a <UART_SetConfig+0x2e6>
 800868c:	2304      	movs	r3, #4
 800868e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008692:	e07a      	b.n	800878a <UART_SetConfig+0x2e6>
 8008694:	2308      	movs	r3, #8
 8008696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800869a:	e076      	b.n	800878a <UART_SetConfig+0x2e6>
 800869c:	2310      	movs	r3, #16
 800869e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086a2:	e072      	b.n	800878a <UART_SetConfig+0x2e6>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a35      	ldr	r2, [pc, #212]	@ (8008780 <UART_SetConfig+0x2dc>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d12a      	bne.n	8008704 <UART_SetConfig+0x260>
 80086ae:	4b30      	ldr	r3, [pc, #192]	@ (8008770 <UART_SetConfig+0x2cc>)
 80086b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086bc:	d01a      	beq.n	80086f4 <UART_SetConfig+0x250>
 80086be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086c2:	d81b      	bhi.n	80086fc <UART_SetConfig+0x258>
 80086c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086c8:	d00c      	beq.n	80086e4 <UART_SetConfig+0x240>
 80086ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086ce:	d815      	bhi.n	80086fc <UART_SetConfig+0x258>
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d003      	beq.n	80086dc <UART_SetConfig+0x238>
 80086d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086d8:	d008      	beq.n	80086ec <UART_SetConfig+0x248>
 80086da:	e00f      	b.n	80086fc <UART_SetConfig+0x258>
 80086dc:	2300      	movs	r3, #0
 80086de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086e2:	e052      	b.n	800878a <UART_SetConfig+0x2e6>
 80086e4:	2302      	movs	r3, #2
 80086e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086ea:	e04e      	b.n	800878a <UART_SetConfig+0x2e6>
 80086ec:	2304      	movs	r3, #4
 80086ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086f2:	e04a      	b.n	800878a <UART_SetConfig+0x2e6>
 80086f4:	2308      	movs	r3, #8
 80086f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086fa:	e046      	b.n	800878a <UART_SetConfig+0x2e6>
 80086fc:	2310      	movs	r3, #16
 80086fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008702:	e042      	b.n	800878a <UART_SetConfig+0x2e6>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a17      	ldr	r2, [pc, #92]	@ (8008768 <UART_SetConfig+0x2c4>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d13a      	bne.n	8008784 <UART_SetConfig+0x2e0>
 800870e:	4b18      	ldr	r3, [pc, #96]	@ (8008770 <UART_SetConfig+0x2cc>)
 8008710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008714:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008718:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800871c:	d01a      	beq.n	8008754 <UART_SetConfig+0x2b0>
 800871e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008722:	d81b      	bhi.n	800875c <UART_SetConfig+0x2b8>
 8008724:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008728:	d00c      	beq.n	8008744 <UART_SetConfig+0x2a0>
 800872a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800872e:	d815      	bhi.n	800875c <UART_SetConfig+0x2b8>
 8008730:	2b00      	cmp	r3, #0
 8008732:	d003      	beq.n	800873c <UART_SetConfig+0x298>
 8008734:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008738:	d008      	beq.n	800874c <UART_SetConfig+0x2a8>
 800873a:	e00f      	b.n	800875c <UART_SetConfig+0x2b8>
 800873c:	2300      	movs	r3, #0
 800873e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008742:	e022      	b.n	800878a <UART_SetConfig+0x2e6>
 8008744:	2302      	movs	r3, #2
 8008746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800874a:	e01e      	b.n	800878a <UART_SetConfig+0x2e6>
 800874c:	2304      	movs	r3, #4
 800874e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008752:	e01a      	b.n	800878a <UART_SetConfig+0x2e6>
 8008754:	2308      	movs	r3, #8
 8008756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800875a:	e016      	b.n	800878a <UART_SetConfig+0x2e6>
 800875c:	2310      	movs	r3, #16
 800875e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008762:	e012      	b.n	800878a <UART_SetConfig+0x2e6>
 8008764:	efff69f3 	.word	0xefff69f3
 8008768:	40008000 	.word	0x40008000
 800876c:	40013800 	.word	0x40013800
 8008770:	40021000 	.word	0x40021000
 8008774:	40004400 	.word	0x40004400
 8008778:	40004800 	.word	0x40004800
 800877c:	40004c00 	.word	0x40004c00
 8008780:	40005000 	.word	0x40005000
 8008784:	2310      	movs	r3, #16
 8008786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a9f      	ldr	r2, [pc, #636]	@ (8008a0c <UART_SetConfig+0x568>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d17a      	bne.n	800888a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008794:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008798:	2b08      	cmp	r3, #8
 800879a:	d824      	bhi.n	80087e6 <UART_SetConfig+0x342>
 800879c:	a201      	add	r2, pc, #4	@ (adr r2, 80087a4 <UART_SetConfig+0x300>)
 800879e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a2:	bf00      	nop
 80087a4:	080087c9 	.word	0x080087c9
 80087a8:	080087e7 	.word	0x080087e7
 80087ac:	080087d1 	.word	0x080087d1
 80087b0:	080087e7 	.word	0x080087e7
 80087b4:	080087d7 	.word	0x080087d7
 80087b8:	080087e7 	.word	0x080087e7
 80087bc:	080087e7 	.word	0x080087e7
 80087c0:	080087e7 	.word	0x080087e7
 80087c4:	080087df 	.word	0x080087df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087c8:	f7fe f906 	bl	80069d8 <HAL_RCC_GetPCLK1Freq>
 80087cc:	61f8      	str	r0, [r7, #28]
        break;
 80087ce:	e010      	b.n	80087f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087d0:	4b8f      	ldr	r3, [pc, #572]	@ (8008a10 <UART_SetConfig+0x56c>)
 80087d2:	61fb      	str	r3, [r7, #28]
        break;
 80087d4:	e00d      	b.n	80087f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087d6:	f7fe f867 	bl	80068a8 <HAL_RCC_GetSysClockFreq>
 80087da:	61f8      	str	r0, [r7, #28]
        break;
 80087dc:	e009      	b.n	80087f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087e2:	61fb      	str	r3, [r7, #28]
        break;
 80087e4:	e005      	b.n	80087f2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80087f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 80fb 	beq.w	80089f0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	685a      	ldr	r2, [r3, #4]
 80087fe:	4613      	mov	r3, r2
 8008800:	005b      	lsls	r3, r3, #1
 8008802:	4413      	add	r3, r2
 8008804:	69fa      	ldr	r2, [r7, #28]
 8008806:	429a      	cmp	r2, r3
 8008808:	d305      	bcc.n	8008816 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008810:	69fa      	ldr	r2, [r7, #28]
 8008812:	429a      	cmp	r2, r3
 8008814:	d903      	bls.n	800881e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800881c:	e0e8      	b.n	80089f0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	2200      	movs	r2, #0
 8008822:	461c      	mov	r4, r3
 8008824:	4615      	mov	r5, r2
 8008826:	f04f 0200 	mov.w	r2, #0
 800882a:	f04f 0300 	mov.w	r3, #0
 800882e:	022b      	lsls	r3, r5, #8
 8008830:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008834:	0222      	lsls	r2, r4, #8
 8008836:	68f9      	ldr	r1, [r7, #12]
 8008838:	6849      	ldr	r1, [r1, #4]
 800883a:	0849      	lsrs	r1, r1, #1
 800883c:	2000      	movs	r0, #0
 800883e:	4688      	mov	r8, r1
 8008840:	4681      	mov	r9, r0
 8008842:	eb12 0a08 	adds.w	sl, r2, r8
 8008846:	eb43 0b09 	adc.w	fp, r3, r9
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	603b      	str	r3, [r7, #0]
 8008852:	607a      	str	r2, [r7, #4]
 8008854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008858:	4650      	mov	r0, sl
 800885a:	4659      	mov	r1, fp
 800885c:	f7f8 f9f4 	bl	8000c48 <__aeabi_uldivmod>
 8008860:	4602      	mov	r2, r0
 8008862:	460b      	mov	r3, r1
 8008864:	4613      	mov	r3, r2
 8008866:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800886e:	d308      	bcc.n	8008882 <UART_SetConfig+0x3de>
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008876:	d204      	bcs.n	8008882 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	69ba      	ldr	r2, [r7, #24]
 800887e:	60da      	str	r2, [r3, #12]
 8008880:	e0b6      	b.n	80089f0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008888:	e0b2      	b.n	80089f0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008892:	d15e      	bne.n	8008952 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008894:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008898:	2b08      	cmp	r3, #8
 800889a:	d828      	bhi.n	80088ee <UART_SetConfig+0x44a>
 800889c:	a201      	add	r2, pc, #4	@ (adr r2, 80088a4 <UART_SetConfig+0x400>)
 800889e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a2:	bf00      	nop
 80088a4:	080088c9 	.word	0x080088c9
 80088a8:	080088d1 	.word	0x080088d1
 80088ac:	080088d9 	.word	0x080088d9
 80088b0:	080088ef 	.word	0x080088ef
 80088b4:	080088df 	.word	0x080088df
 80088b8:	080088ef 	.word	0x080088ef
 80088bc:	080088ef 	.word	0x080088ef
 80088c0:	080088ef 	.word	0x080088ef
 80088c4:	080088e7 	.word	0x080088e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088c8:	f7fe f886 	bl	80069d8 <HAL_RCC_GetPCLK1Freq>
 80088cc:	61f8      	str	r0, [r7, #28]
        break;
 80088ce:	e014      	b.n	80088fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088d0:	f7fe f898 	bl	8006a04 <HAL_RCC_GetPCLK2Freq>
 80088d4:	61f8      	str	r0, [r7, #28]
        break;
 80088d6:	e010      	b.n	80088fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088d8:	4b4d      	ldr	r3, [pc, #308]	@ (8008a10 <UART_SetConfig+0x56c>)
 80088da:	61fb      	str	r3, [r7, #28]
        break;
 80088dc:	e00d      	b.n	80088fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088de:	f7fd ffe3 	bl	80068a8 <HAL_RCC_GetSysClockFreq>
 80088e2:	61f8      	str	r0, [r7, #28]
        break;
 80088e4:	e009      	b.n	80088fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088ea:	61fb      	str	r3, [r7, #28]
        break;
 80088ec:	e005      	b.n	80088fa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80088f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d077      	beq.n	80089f0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	005a      	lsls	r2, r3, #1
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	085b      	lsrs	r3, r3, #1
 800890a:	441a      	add	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	fbb2 f3f3 	udiv	r3, r2, r3
 8008914:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	2b0f      	cmp	r3, #15
 800891a:	d916      	bls.n	800894a <UART_SetConfig+0x4a6>
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008922:	d212      	bcs.n	800894a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	b29b      	uxth	r3, r3
 8008928:	f023 030f 	bic.w	r3, r3, #15
 800892c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	085b      	lsrs	r3, r3, #1
 8008932:	b29b      	uxth	r3, r3
 8008934:	f003 0307 	and.w	r3, r3, #7
 8008938:	b29a      	uxth	r2, r3
 800893a:	8afb      	ldrh	r3, [r7, #22]
 800893c:	4313      	orrs	r3, r2
 800893e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	8afa      	ldrh	r2, [r7, #22]
 8008946:	60da      	str	r2, [r3, #12]
 8008948:	e052      	b.n	80089f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008950:	e04e      	b.n	80089f0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008952:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008956:	2b08      	cmp	r3, #8
 8008958:	d827      	bhi.n	80089aa <UART_SetConfig+0x506>
 800895a:	a201      	add	r2, pc, #4	@ (adr r2, 8008960 <UART_SetConfig+0x4bc>)
 800895c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008960:	08008985 	.word	0x08008985
 8008964:	0800898d 	.word	0x0800898d
 8008968:	08008995 	.word	0x08008995
 800896c:	080089ab 	.word	0x080089ab
 8008970:	0800899b 	.word	0x0800899b
 8008974:	080089ab 	.word	0x080089ab
 8008978:	080089ab 	.word	0x080089ab
 800897c:	080089ab 	.word	0x080089ab
 8008980:	080089a3 	.word	0x080089a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008984:	f7fe f828 	bl	80069d8 <HAL_RCC_GetPCLK1Freq>
 8008988:	61f8      	str	r0, [r7, #28]
        break;
 800898a:	e014      	b.n	80089b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800898c:	f7fe f83a 	bl	8006a04 <HAL_RCC_GetPCLK2Freq>
 8008990:	61f8      	str	r0, [r7, #28]
        break;
 8008992:	e010      	b.n	80089b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008994:	4b1e      	ldr	r3, [pc, #120]	@ (8008a10 <UART_SetConfig+0x56c>)
 8008996:	61fb      	str	r3, [r7, #28]
        break;
 8008998:	e00d      	b.n	80089b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800899a:	f7fd ff85 	bl	80068a8 <HAL_RCC_GetSysClockFreq>
 800899e:	61f8      	str	r0, [r7, #28]
        break;
 80089a0:	e009      	b.n	80089b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089a6:	61fb      	str	r3, [r7, #28]
        break;
 80089a8:	e005      	b.n	80089b6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80089aa:	2300      	movs	r3, #0
 80089ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80089b4:	bf00      	nop
    }

    if (pclk != 0U)
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d019      	beq.n	80089f0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	085a      	lsrs	r2, r3, #1
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	441a      	add	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	2b0f      	cmp	r3, #15
 80089d4:	d909      	bls.n	80089ea <UART_SetConfig+0x546>
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089dc:	d205      	bcs.n	80089ea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	60da      	str	r2, [r3, #12]
 80089e8:	e002      	b.n	80089f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80089fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3728      	adds	r7, #40	@ 0x28
 8008a04:	46bd      	mov	sp, r7
 8008a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a0a:	bf00      	nop
 8008a0c:	40008000 	.word	0x40008000
 8008a10:	00f42400 	.word	0x00f42400

08008a14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a20:	f003 0308 	and.w	r3, r3, #8
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00a      	beq.n	8008a3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	430a      	orrs	r2, r1
 8008a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00a      	beq.n	8008a60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a64:	f003 0302 	and.w	r3, r3, #2
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00a      	beq.n	8008a82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a86:	f003 0304 	and.w	r3, r3, #4
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00a      	beq.n	8008aa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa8:	f003 0310 	and.w	r3, r3, #16
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00a      	beq.n	8008ac6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aca:	f003 0320 	and.w	r3, r3, #32
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00a      	beq.n	8008ae8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d01a      	beq.n	8008b2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	430a      	orrs	r2, r1
 8008b08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b12:	d10a      	bne.n	8008b2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	430a      	orrs	r2, r1
 8008b28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00a      	beq.n	8008b4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	605a      	str	r2, [r3, #4]
  }
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b098      	sub	sp, #96	@ 0x60
 8008b5c:	af02      	add	r7, sp, #8
 8008b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b68:	f7fb fbc2 	bl	80042f0 <HAL_GetTick>
 8008b6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0308 	and.w	r3, r3, #8
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	d12e      	bne.n	8008bda <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b84:	2200      	movs	r2, #0
 8008b86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f88c 	bl	8008ca8 <UART_WaitOnFlagUntilTimeout>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d021      	beq.n	8008bda <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9e:	e853 3f00 	ldrex	r3, [r3]
 8008ba2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ba6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008baa:	653b      	str	r3, [r7, #80]	@ 0x50
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bb6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008bba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bbc:	e841 2300 	strex	r3, r2, [r1]
 8008bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1e6      	bne.n	8008b96 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2220      	movs	r2, #32
 8008bcc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e062      	b.n	8008ca0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 0304 	and.w	r3, r3, #4
 8008be4:	2b04      	cmp	r3, #4
 8008be6:	d149      	bne.n	8008c7c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008be8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f856 	bl	8008ca8 <UART_WaitOnFlagUntilTimeout>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d03c      	beq.n	8008c7c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0a:	e853 3f00 	ldrex	r3, [r3]
 8008c0e:	623b      	str	r3, [r7, #32]
   return(result);
 8008c10:	6a3b      	ldr	r3, [r7, #32]
 8008c12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c20:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c22:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c28:	e841 2300 	strex	r3, r2, [r1]
 8008c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e6      	bne.n	8008c02 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	3308      	adds	r3, #8
 8008c3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	e853 3f00 	ldrex	r3, [r3]
 8008c42:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f023 0301 	bic.w	r3, r3, #1
 8008c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	3308      	adds	r3, #8
 8008c52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c54:	61fa      	str	r2, [r7, #28]
 8008c56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c58:	69b9      	ldr	r1, [r7, #24]
 8008c5a:	69fa      	ldr	r2, [r7, #28]
 8008c5c:	e841 2300 	strex	r3, r2, [r1]
 8008c60:	617b      	str	r3, [r7, #20]
   return(result);
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1e5      	bne.n	8008c34 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e011      	b.n	8008ca0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2220      	movs	r2, #32
 8008c80:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2220      	movs	r2, #32
 8008c86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3758      	adds	r7, #88	@ 0x58
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	603b      	str	r3, [r7, #0]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cb8:	e04f      	b.n	8008d5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc0:	d04b      	beq.n	8008d5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cc2:	f7fb fb15 	bl	80042f0 <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d302      	bcc.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d101      	bne.n	8008cdc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e04e      	b.n	8008d7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 0304 	and.w	r3, r3, #4
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d037      	beq.n	8008d5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	2b80      	cmp	r3, #128	@ 0x80
 8008cee:	d034      	beq.n	8008d5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	2b40      	cmp	r3, #64	@ 0x40
 8008cf4:	d031      	beq.n	8008d5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	69db      	ldr	r3, [r3, #28]
 8008cfc:	f003 0308 	and.w	r3, r3, #8
 8008d00:	2b08      	cmp	r3, #8
 8008d02:	d110      	bne.n	8008d26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2208      	movs	r2, #8
 8008d0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f000 f838 	bl	8008d82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2208      	movs	r2, #8
 8008d16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e029      	b.n	8008d7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	69db      	ldr	r3, [r3, #28]
 8008d2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d34:	d111      	bne.n	8008d5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f000 f81e 	bl	8008d82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2220      	movs	r2, #32
 8008d4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e00f      	b.n	8008d7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	69da      	ldr	r2, [r3, #28]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	4013      	ands	r3, r2
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	bf0c      	ite	eq
 8008d6a:	2301      	moveq	r3, #1
 8008d6c:	2300      	movne	r3, #0
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	461a      	mov	r2, r3
 8008d72:	79fb      	ldrb	r3, [r7, #7]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d0a0      	beq.n	8008cba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b095      	sub	sp, #84	@ 0x54
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d92:	e853 3f00 	ldrex	r3, [r3]
 8008d96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	461a      	mov	r2, r3
 8008da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008da8:	643b      	str	r3, [r7, #64]	@ 0x40
 8008daa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008dae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008db0:	e841 2300 	strex	r3, r2, [r1]
 8008db4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1e6      	bne.n	8008d8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	3308      	adds	r3, #8
 8008dc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	e853 3f00 	ldrex	r3, [r3]
 8008dca:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	f023 0301 	bic.w	r3, r3, #1
 8008dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	3308      	adds	r3, #8
 8008dda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ddc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008dde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008de2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008de4:	e841 2300 	strex	r3, r2, [r1]
 8008de8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1e5      	bne.n	8008dbc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d118      	bne.n	8008e2a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	e853 3f00 	ldrex	r3, [r3]
 8008e04:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	f023 0310 	bic.w	r3, r3, #16
 8008e0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	461a      	mov	r2, r3
 8008e14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e16:	61bb      	str	r3, [r7, #24]
 8008e18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1a:	6979      	ldr	r1, [r7, #20]
 8008e1c:	69ba      	ldr	r2, [r7, #24]
 8008e1e:	e841 2300 	strex	r3, r2, [r1]
 8008e22:	613b      	str	r3, [r7, #16]
   return(result);
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1e6      	bne.n	8008df8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008e3e:	bf00      	nop
 8008e40:	3754      	adds	r7, #84	@ 0x54
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr

08008e4a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	f107 001c 	add.w	r0, r7, #28
 8008e58:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fa69 	bl	8009340 <USB_CoreReset>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008e72:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d106      	bne.n	8008e88 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e7e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	639a      	str	r2, [r3, #56]	@ 0x38
 8008e86:	e005      	b.n	8008e94 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ea0:	b004      	add	sp, #16
 8008ea2:	4770      	bx	lr

08008ea4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	f023 0201 	bic.w	r2, r3, #1
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr

08008ec6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	460b      	mov	r3, r1
 8008ed0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ee2:	78fb      	ldrb	r3, [r7, #3]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d115      	bne.n	8008f14 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008ef4:	200a      	movs	r0, #10
 8008ef6:	f7fb fa07 	bl	8004308 <HAL_Delay>
      ms += 10U;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	330a      	adds	r3, #10
 8008efe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fa0f 	bl	8009324 <USB_GetMode>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d01e      	beq.n	8008f4a <USB_SetCurrentMode+0x84>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008f10:	d9f0      	bls.n	8008ef4 <USB_SetCurrentMode+0x2e>
 8008f12:	e01a      	b.n	8008f4a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f14:	78fb      	ldrb	r3, [r7, #3]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d115      	bne.n	8008f46 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008f26:	200a      	movs	r0, #10
 8008f28:	f7fb f9ee 	bl	8004308 <HAL_Delay>
      ms += 10U;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	330a      	adds	r3, #10
 8008f30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f9f6 	bl	8009324 <USB_GetMode>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d005      	beq.n	8008f4a <USB_SetCurrentMode+0x84>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2bc7      	cmp	r3, #199	@ 0xc7
 8008f42:	d9f0      	bls.n	8008f26 <USB_SetCurrentMode+0x60>
 8008f44:	e001      	b.n	8008f4a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e005      	b.n	8008f56 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2bc8      	cmp	r3, #200	@ 0xc8
 8008f4e:	d101      	bne.n	8008f54 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e000      	b.n	8008f56 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
	...

08008f60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f60:	b084      	sub	sp, #16
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b086      	sub	sp, #24
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	613b      	str	r3, [r7, #16]
 8008f7e:	e009      	b.n	8008f94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	3340      	adds	r3, #64	@ 0x40
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4413      	add	r3, r2
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	3301      	adds	r3, #1
 8008f92:	613b      	str	r3, [r7, #16]
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	2b0e      	cmp	r3, #14
 8008f98:	d9f2      	bls.n	8008f80 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008f9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d11c      	bne.n	8008fdc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008fb0:	f043 0302 	orr.w	r3, r3, #2
 8008fb4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fba:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	601a      	str	r2, [r3, #0]
 8008fda:	e005      	b.n	8008fe8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008fee:	461a      	mov	r2, r3
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ff4:	2103      	movs	r1, #3
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f95a 	bl	80092b0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ffc:	2110      	movs	r1, #16
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f8f6 	bl	80091f0 <USB_FlushTxFifo>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f920 	bl	8009254 <USB_FlushRxFifo>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009024:	461a      	mov	r2, r3
 8009026:	2300      	movs	r3, #0
 8009028:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009030:	461a      	mov	r2, r3
 8009032:	2300      	movs	r3, #0
 8009034:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800903c:	461a      	mov	r2, r3
 800903e:	2300      	movs	r3, #0
 8009040:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009042:	2300      	movs	r3, #0
 8009044:	613b      	str	r3, [r7, #16]
 8009046:	e043      	b.n	80090d0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4413      	add	r3, r2
 8009050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800905a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800905e:	d118      	bne.n	8009092 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d10a      	bne.n	800907c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	015a      	lsls	r2, r3, #5
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	4413      	add	r3, r2
 800906e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009072:	461a      	mov	r2, r3
 8009074:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009078:	6013      	str	r3, [r2, #0]
 800907a:	e013      	b.n	80090a4 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	015a      	lsls	r2, r3, #5
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	4413      	add	r3, r2
 8009084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009088:	461a      	mov	r2, r3
 800908a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	e008      	b.n	80090a4 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	015a      	lsls	r2, r3, #5
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	4413      	add	r3, r2
 800909a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800909e:	461a      	mov	r2, r3
 80090a0:	2300      	movs	r3, #0
 80090a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	015a      	lsls	r2, r3, #5
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	4413      	add	r3, r2
 80090ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090b0:	461a      	mov	r2, r3
 80090b2:	2300      	movs	r3, #0
 80090b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	015a      	lsls	r2, r3, #5
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	4413      	add	r3, r2
 80090be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090c2:	461a      	mov	r2, r3
 80090c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80090c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	3301      	adds	r3, #1
 80090ce:	613b      	str	r3, [r7, #16]
 80090d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80090d4:	461a      	mov	r2, r3
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	4293      	cmp	r3, r2
 80090da:	d3b5      	bcc.n	8009048 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090dc:	2300      	movs	r3, #0
 80090de:	613b      	str	r3, [r7, #16]
 80090e0:	e043      	b.n	800916a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	015a      	lsls	r2, r3, #5
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	4413      	add	r3, r2
 80090ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090f8:	d118      	bne.n	800912c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10a      	bne.n	8009116 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	015a      	lsls	r2, r3, #5
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	4413      	add	r3, r2
 8009108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800910c:	461a      	mov	r2, r3
 800910e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009112:	6013      	str	r3, [r2, #0]
 8009114:	e013      	b.n	800913e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	4413      	add	r3, r2
 800911e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009122:	461a      	mov	r2, r3
 8009124:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009128:	6013      	str	r3, [r2, #0]
 800912a:	e008      	b.n	800913e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	015a      	lsls	r2, r3, #5
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	4413      	add	r3, r2
 8009134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009138:	461a      	mov	r2, r3
 800913a:	2300      	movs	r3, #0
 800913c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	015a      	lsls	r2, r3, #5
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	4413      	add	r3, r2
 8009146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800914a:	461a      	mov	r2, r3
 800914c:	2300      	movs	r3, #0
 800914e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	015a      	lsls	r2, r3, #5
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4413      	add	r3, r2
 8009158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800915c:	461a      	mov	r2, r3
 800915e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009162:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	3301      	adds	r3, #1
 8009168:	613b      	str	r3, [r7, #16]
 800916a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800916e:	461a      	mov	r2, r3
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	4293      	cmp	r3, r2
 8009174:	d3b5      	bcc.n	80090e2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009184:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009188:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009196:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	f043 0210 	orr.w	r2, r3, #16
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	699a      	ldr	r2, [r3, #24]
 80091a8:	4b10      	ldr	r3, [pc, #64]	@ (80091ec <USB_DevInit+0x28c>)
 80091aa:	4313      	orrs	r3, r2
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80091b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d005      	beq.n	80091c4 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	f043 0208 	orr.w	r2, r3, #8
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80091c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d107      	bne.n	80091dc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80091d4:	f043 0304 	orr.w	r3, r3, #4
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3718      	adds	r7, #24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091e8:	b004      	add	sp, #16
 80091ea:	4770      	bx	lr
 80091ec:	803c3800 	.word	0x803c3800

080091f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80091fa:	2300      	movs	r3, #0
 80091fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	3301      	adds	r3, #1
 8009202:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800920a:	d901      	bls.n	8009210 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800920c:	2303      	movs	r3, #3
 800920e:	e01b      	b.n	8009248 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	daf2      	bge.n	80091fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009218:	2300      	movs	r3, #0
 800921a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	019b      	lsls	r3, r3, #6
 8009220:	f043 0220 	orr.w	r2, r3, #32
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	3301      	adds	r3, #1
 800922c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009234:	d901      	bls.n	800923a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	e006      	b.n	8009248 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	f003 0320 	and.w	r3, r3, #32
 8009242:	2b20      	cmp	r3, #32
 8009244:	d0f0      	beq.n	8009228 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3714      	adds	r7, #20
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800925c:	2300      	movs	r3, #0
 800925e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	3301      	adds	r3, #1
 8009264:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800926c:	d901      	bls.n	8009272 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800926e:	2303      	movs	r3, #3
 8009270:	e018      	b.n	80092a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	2b00      	cmp	r3, #0
 8009278:	daf2      	bge.n	8009260 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800927a:	2300      	movs	r3, #0
 800927c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2210      	movs	r2, #16
 8009282:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	3301      	adds	r3, #1
 8009288:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009290:	d901      	bls.n	8009296 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e006      	b.n	80092a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	f003 0310 	and.w	r3, r3, #16
 800929e:	2b10      	cmp	r3, #16
 80092a0:	d0f0      	beq.n	8009284 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3714      	adds	r7, #20
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	460b      	mov	r3, r1
 80092ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	78fb      	ldrb	r3, [r7, #3]
 80092ca:	68f9      	ldr	r1, [r7, #12]
 80092cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80092d0:	4313      	orrs	r3, r2
 80092d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3714      	adds	r7, #20
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b085      	sub	sp, #20
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80092fc:	f023 0303 	bic.w	r3, r3, #3
 8009300:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009310:	f043 0302 	orr.w	r3, r3, #2
 8009314:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3714      	adds	r7, #20
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	f003 0301 	and.w	r3, r3, #1
}
 8009334:	4618      	mov	r0, r3
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009348:	2300      	movs	r3, #0
 800934a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	3301      	adds	r3, #1
 8009350:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009358:	d901      	bls.n	800935e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	e01b      	b.n	8009396 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	2b00      	cmp	r3, #0
 8009364:	daf2      	bge.n	800934c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009366:	2300      	movs	r3, #0
 8009368:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	f043 0201 	orr.w	r2, r3, #1
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3301      	adds	r3, #1
 800937a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009382:	d901      	bls.n	8009388 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e006      	b.n	8009396 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	f003 0301 	and.w	r3, r3, #1
 8009390:	2b01      	cmp	r3, #1
 8009392:	d0f0      	beq.n	8009376 <USB_CoreReset+0x36>

  return HAL_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b08c      	sub	sp, #48	@ 0x30
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	603b      	str	r3, [r7, #0]
 80093aa:	4603      	mov	r3, r0
 80093ac:	71fb      	strb	r3, [r7, #7]
 80093ae:	460b      	mov	r3, r1
 80093b0:	71bb      	strb	r3, [r7, #6]
 80093b2:	4613      	mov	r3, r2
 80093b4:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80093b6:	79fb      	ldrb	r3, [r7, #7]
 80093b8:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80093ba:	79bb      	ldrb	r3, [r7, #6]
 80093bc:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80093be:	797b      	ldrb	r3, [r7, #5]
 80093c0:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80093c2:	f107 030c 	add.w	r3, r7, #12
 80093c6:	2207      	movs	r2, #7
 80093c8:	2100      	movs	r1, #0
 80093ca:	4618      	mov	r0, r3
 80093cc:	f004 fa9e 	bl	800d90c <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80093d0:	f107 0318 	add.w	r3, r7, #24
 80093d4:	2218      	movs	r2, #24
 80093d6:	2100      	movs	r1, #0
 80093d8:	4618      	mov	r0, r3
 80093da:	f004 fa97 	bl	800d90c <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80093de:	233f      	movs	r3, #63	@ 0x3f
 80093e0:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 80093e2:	238a      	movs	r3, #138	@ 0x8a
 80093e4:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 80093e6:	f107 0314 	add.w	r3, r7, #20
 80093ea:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 80093ec:	2303      	movs	r3, #3
 80093ee:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 80093f0:	f107 030c 	add.w	r3, r7, #12
 80093f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 80093f6:	2307      	movs	r3, #7
 80093f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 80093fa:	f107 0318 	add.w	r3, r7, #24
 80093fe:	2100      	movs	r1, #0
 8009400:	4618      	mov	r0, r3
 8009402:	f000 fea1 	bl	800a148 <hci_send_req>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	da01      	bge.n	8009410 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800940c:	23ff      	movs	r3, #255	@ 0xff
 800940e:	e014      	b.n	800943a <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8009410:	7b3b      	ldrb	r3, [r7, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8009416:	7b3b      	ldrb	r3, [r7, #12]
 8009418:	e00f      	b.n	800943a <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800941a:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800941e:	b29a      	uxth	r2, r3
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8009424:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8009428:	b29a      	uxth	r2, r3
 800942a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800942c:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800942e:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8009432:	b29a      	uxth	r2, r3
 8009434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009436:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3730      	adds	r7, #48	@ 0x30
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b08e      	sub	sp, #56	@ 0x38
 8009446:	af00      	add	r7, sp, #0
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	607a      	str	r2, [r7, #4]
 800944c:	603b      	str	r3, [r7, #0]
 800944e:	4603      	mov	r3, r0
 8009450:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8009452:	7bfb      	ldrb	r3, [r7, #15]
 8009454:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009456:	f107 0314 	add.w	r3, r7, #20
 800945a:	2207      	movs	r2, #7
 800945c:	2100      	movs	r1, #0
 800945e:	4618      	mov	r0, r3
 8009460:	f004 fa54 	bl	800d90c <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009464:	f107 0320 	add.w	r3, r7, #32
 8009468:	2218      	movs	r2, #24
 800946a:	2100      	movs	r1, #0
 800946c:	4618      	mov	r0, r3
 800946e:	f004 fa4d 	bl	800d90c <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009472:	233f      	movs	r3, #63	@ 0x3f
 8009474:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8009476:	238a      	movs	r3, #138	@ 0x8a
 8009478:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 800947a:	f107 031c 	add.w	r3, r7, #28
 800947e:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 8009480:	2301      	movs	r3, #1
 8009482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8009484:	f107 0314 	add.w	r3, r7, #20
 8009488:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 800948a:	2307      	movs	r3, #7
 800948c:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 800948e:	f107 0320 	add.w	r3, r7, #32
 8009492:	2100      	movs	r1, #0
 8009494:	4618      	mov	r0, r3
 8009496:	f000 fe57 	bl	800a148 <hci_send_req>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	da01      	bge.n	80094a4 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 80094a0:	23ff      	movs	r3, #255	@ 0xff
 80094a2:	e014      	b.n	80094ce <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 80094a4:	7d3b      	ldrb	r3, [r7, #20]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d001      	beq.n	80094ae <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 80094aa:	7d3b      	ldrb	r3, [r7, #20]
 80094ac:	e00f      	b.n	80094ce <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 80094ae:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80094b8:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 80094bc:	b29a      	uxth	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80094c2:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3738      	adds	r7, #56	@ 0x38
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80094d6:	b590      	push	{r4, r7, lr}
 80094d8:	b095      	sub	sp, #84	@ 0x54
 80094da:	af00      	add	r7, sp, #0
 80094dc:	4604      	mov	r4, r0
 80094de:	4608      	mov	r0, r1
 80094e0:	4611      	mov	r1, r2
 80094e2:	461a      	mov	r2, r3
 80094e4:	4623      	mov	r3, r4
 80094e6:	71fb      	strb	r3, [r7, #7]
 80094e8:	4603      	mov	r3, r0
 80094ea:	80bb      	strh	r3, [r7, #4]
 80094ec:	460b      	mov	r3, r1
 80094ee:	807b      	strh	r3, [r7, #2]
 80094f0:	4613      	mov	r3, r2
 80094f2:	71bb      	strb	r3, [r7, #6]
//	return BLE_STATUS_INVALID_PARAMS;
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 80094f4:	2300      	movs	r3, #0
 80094f6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 80094fa:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80094fe:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8009502:	4413      	add	r3, r2
 8009504:	330e      	adds	r3, #14
 8009506:	2b28      	cmp	r3, #40	@ 0x28
 8009508:	d901      	bls.n	800950e <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800950a:	2342      	movs	r3, #66	@ 0x42
 800950c:	e0c9      	b.n	80096a2 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 800950e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009512:	3350      	adds	r3, #80	@ 0x50
 8009514:	443b      	add	r3, r7
 8009516:	79fa      	ldrb	r2, [r7, #7]
 8009518:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800951c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009520:	3301      	adds	r3, #1
 8009522:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8009526:	88bb      	ldrh	r3, [r7, #4]
 8009528:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800952a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800952e:	f107 0208 	add.w	r2, r7, #8
 8009532:	4413      	add	r3, r2
 8009534:	88ba      	ldrh	r2, [r7, #4]
 8009536:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8009538:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800953c:	3302      	adds	r3, #2
 800953e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8009542:	887b      	ldrh	r3, [r7, #2]
 8009544:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8009546:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800954a:	f107 0208 	add.w	r2, r7, #8
 800954e:	4413      	add	r3, r2
 8009550:	887a      	ldrh	r2, [r7, #2]
 8009552:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8009554:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009558:	3302      	adds	r3, #2
 800955a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 800955e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009562:	3350      	adds	r3, #80	@ 0x50
 8009564:	443b      	add	r3, r7
 8009566:	79ba      	ldrb	r2, [r7, #6]
 8009568:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800956c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009570:	3301      	adds	r3, #1
 8009572:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8009576:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800957a:	3350      	adds	r3, #80	@ 0x50
 800957c:	443b      	add	r3, r7
 800957e:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8009582:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8009586:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800958a:	3301      	adds	r3, #1
 800958c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 8009590:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009594:	3350      	adds	r3, #80	@ 0x50
 8009596:	443b      	add	r3, r7
 8009598:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800959c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80095a0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80095a4:	3301      	adds	r3, #1
 80095a6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80095aa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80095ae:	f107 0208 	add.w	r2, r7, #8
 80095b2:	4413      	add	r3, r2
 80095b4:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80095b8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80095ba:	4618      	mov	r0, r3
 80095bc:	f004 fa25 	bl	800da0a <memcpy>
  indx +=  LocalNameLen;
 80095c0:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80095c4:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80095c8:	4413      	add	r3, r2
 80095ca:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 80095ce:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80095d2:	3350      	adds	r3, #80	@ 0x50
 80095d4:	443b      	add	r3, r7
 80095d6:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 80095da:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80095de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80095e2:	3301      	adds	r3, #1
 80095e4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80095e8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80095ec:	f107 0208 	add.w	r2, r7, #8
 80095f0:	4413      	add	r3, r2
 80095f2:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 80095f6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80095f8:	4618      	mov	r0, r3
 80095fa:	f004 fa06 	bl	800da0a <memcpy>
  indx +=  ServiceUUIDLen;  
 80095fe:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8009602:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8009606:	4413      	add	r3, r2
 8009608:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800960c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8009610:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8009614:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009618:	f107 0208 	add.w	r2, r7, #8
 800961c:	4413      	add	r3, r2
 800961e:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8009622:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8009624:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009628:	3302      	adds	r3, #2
 800962a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800962e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8009632:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8009636:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800963a:	f107 0208 	add.w	r2, r7, #8
 800963e:	4413      	add	r3, r2
 8009640:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8009644:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8009646:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800964a:	3302      	adds	r3, #2
 800964c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009650:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009654:	2218      	movs	r2, #24
 8009656:	2100      	movs	r1, #0
 8009658:	4618      	mov	r0, r3
 800965a:	f004 f957 	bl	800d90c <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800965e:	233f      	movs	r3, #63	@ 0x3f
 8009660:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8009662:	2383      	movs	r3, #131	@ 0x83
 8009664:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 8009666:	f107 0308 	add.w	r3, r7, #8
 800966a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 800966c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009670:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 8009672:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 8009676:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 8009678:	2301      	movs	r3, #1
 800967a:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800967c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009680:	2100      	movs	r1, #0
 8009682:	4618      	mov	r0, r3
 8009684:	f000 fd60 	bl	800a148 <hci_send_req>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	da01      	bge.n	8009692 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 800968e:	23ff      	movs	r3, #255	@ 0xff
 8009690:	e007      	b.n	80096a2 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8009692:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009696:	2b00      	cmp	r3, #0
 8009698:	d002      	beq.n	80096a0 <aci_gap_set_discoverable+0x1ca>
//	  return BLE_STATUS_TIMEOUT;
	  return status;
 800969a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800969e:	e000      	b.n	80096a2 <aci_gap_set_discoverable+0x1cc>

  }

  return 0;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3754      	adds	r7, #84	@ 0x54
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd90      	pop	{r4, r7, pc}

080096aa <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 80096aa:	b590      	push	{r4, r7, lr}
 80096ac:	b091      	sub	sp, #68	@ 0x44
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	603a      	str	r2, [r7, #0]
 80096b2:	461a      	mov	r2, r3
 80096b4:	4603      	mov	r3, r0
 80096b6:	71fb      	strb	r3, [r7, #7]
 80096b8:	460b      	mov	r3, r1
 80096ba:	71bb      	strb	r3, [r7, #6]
 80096bc:	4613      	mov	r3, r2
 80096be:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 80096c0:	79fb      	ldrb	r3, [r7, #7]
 80096c2:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 80096c4:	79bb      	ldrb	r3, [r7, #6]
 80096c6:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 80096c8:	79bb      	ldrb	r3, [r7, #6]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00a      	beq.n	80096e4 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	f107 030e 	add.w	r3, r7, #14
 80096d4:	6814      	ldr	r4, [r2, #0]
 80096d6:	6850      	ldr	r0, [r2, #4]
 80096d8:	6891      	ldr	r1, [r2, #8]
 80096da:	68d2      	ldr	r2, [r2, #12]
 80096dc:	601c      	str	r4, [r3, #0]
 80096de:	6058      	str	r0, [r3, #4]
 80096e0:	6099      	str	r1, [r3, #8]
 80096e2:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 80096e4:	797b      	ldrb	r3, [r7, #5]
 80096e6:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 80096e8:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80096ec:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 80096ee:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80096f2:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 80096f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80096f8:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 80096fc:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8009700:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009704:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009708:	2218      	movs	r2, #24
 800970a:	2100      	movs	r1, #0
 800970c:	4618      	mov	r0, r3
 800970e:	f004 f8fd 	bl	800d90c <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009712:	233f      	movs	r3, #63	@ 0x3f
 8009714:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8009716:	2386      	movs	r3, #134	@ 0x86
 8009718:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 800971a:	f107 030c 	add.w	r3, r7, #12
 800971e:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 8009720:	231a      	movs	r3, #26
 8009722:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 8009724:	f107 030b 	add.w	r3, r7, #11
 8009728:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 800972a:	2301      	movs	r3, #1
 800972c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800972e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009732:	2100      	movs	r1, #0
 8009734:	4618      	mov	r0, r3
 8009736:	f000 fd07 	bl	800a148 <hci_send_req>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	da01      	bge.n	8009744 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8009740:	23ff      	movs	r3, #255	@ 0xff
 8009742:	e005      	b.n	8009750 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8009744:	7afb      	ldrb	r3, [r7, #11]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <aci_gap_set_auth_requirement+0xa4>
    return status;
 800974a:	7afb      	ldrb	r3, [r7, #11]
 800974c:	e000      	b.n	8009750 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3744      	adds	r7, #68	@ 0x44
 8009754:	46bd      	mov	sp, r7
 8009756:	bd90      	pop	{r4, r7, pc}

08009758 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b092      	sub	sp, #72	@ 0x48
 800975c:	af00      	add	r7, sp, #0
 800975e:	4603      	mov	r3, r0
 8009760:	6039      	str	r1, [r7, #0]
 8009762:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 8009764:	2300      	movs	r3, #0
 8009766:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 800976a:	79fb      	ldrb	r3, [r7, #7]
 800976c:	2b1f      	cmp	r3, #31
 800976e:	d901      	bls.n	8009774 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8009770:	2342      	movs	r3, #66	@ 0x42
 8009772:	e03e      	b.n	80097f2 <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 8009774:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009778:	3348      	adds	r3, #72	@ 0x48
 800977a:	443b      	add	r3, r7
 800977c:	79fa      	ldrb	r2, [r7, #7]
 800977e:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 8009782:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009786:	3301      	adds	r3, #1
 8009788:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800978c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009790:	f107 0208 	add.w	r2, r7, #8
 8009794:	4413      	add	r3, r2
 8009796:	79fa      	ldrb	r2, [r7, #7]
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	4618      	mov	r0, r3
 800979c:	f004 f935 	bl	800da0a <memcpy>
  indx +=  AdvLen;
 80097a0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80097a4:	79fb      	ldrb	r3, [r7, #7]
 80097a6:	4413      	add	r3, r2
 80097a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80097ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80097b0:	2218      	movs	r2, #24
 80097b2:	2100      	movs	r1, #0
 80097b4:	4618      	mov	r0, r3
 80097b6:	f004 f8a9 	bl	800d90c <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80097ba:	233f      	movs	r3, #63	@ 0x3f
 80097bc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 80097be:	238e      	movs	r3, #142	@ 0x8e
 80097c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 80097c2:	f107 0308 	add.w	r3, r7, #8
 80097c6:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 80097c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80097cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 80097ce:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 80097d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 80097d4:	2301      	movs	r3, #1
 80097d6:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 80097d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80097dc:	2100      	movs	r1, #0
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 fcb2 	bl	800a148 <hci_send_req>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	da01      	bge.n	80097ee <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 80097ea:	23ff      	movs	r3, #255	@ 0xff
 80097ec:	e001      	b.n	80097f2 <aci_gap_update_adv_data+0x9a>
    
  return status;
 80097ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3748      	adds	r7, #72	@ 0x48
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b088      	sub	sp, #32
 80097fe:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009800:	f107 0308 	add.w	r3, r7, #8
 8009804:	2218      	movs	r2, #24
 8009806:	2100      	movs	r1, #0
 8009808:	4618      	mov	r0, r3
 800980a:	f004 f87f 	bl	800d90c <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800980e:	233f      	movs	r3, #63	@ 0x3f
 8009810:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8009812:	f240 1301 	movw	r3, #257	@ 0x101
 8009816:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009818:	1dfb      	adds	r3, r7, #7
 800981a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800981c:	2301      	movs	r3, #1
 800981e:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8009820:	f107 0308 	add.w	r3, r7, #8
 8009824:	2100      	movs	r1, #0
 8009826:	4618      	mov	r0, r3
 8009828:	f000 fc8e 	bl	800a148 <hci_send_req>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	da01      	bge.n	8009836 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8009832:	23ff      	movs	r3, #255	@ 0xff
 8009834:	e000      	b.n	8009838 <aci_gatt_init+0x3e>

  return status;
 8009836:	79fb      	ldrb	r3, [r7, #7]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3720      	adds	r7, #32
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b090      	sub	sp, #64	@ 0x40
 8009844:	af00      	add	r7, sp, #0
 8009846:	6039      	str	r1, [r7, #0]
 8009848:	4611      	mov	r1, r2
 800984a:	461a      	mov	r2, r3
 800984c:	4603      	mov	r3, r0
 800984e:	71fb      	strb	r3, [r7, #7]
 8009850:	460b      	mov	r3, r1
 8009852:	71bb      	strb	r3, [r7, #6]
 8009854:	4613      	mov	r3, r2
 8009856:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8009858:	2300      	movs	r3, #0
 800985a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 800985e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009862:	3340      	adds	r3, #64	@ 0x40
 8009864:	443b      	add	r3, r7
 8009866:	79fa      	ldrb	r2, [r7, #7]
 8009868:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800986c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8009870:	3301      	adds	r3, #1
 8009872:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8009876:	79fb      	ldrb	r3, [r7, #7]
 8009878:	2b01      	cmp	r3, #1
 800987a:	d103      	bne.n	8009884 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 800987c:	2302      	movs	r3, #2
 800987e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009882:	e002      	b.n	800988a <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8009884:	2310      	movs	r3, #16
 8009886:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800988a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800988e:	f107 020c 	add.w	r2, r7, #12
 8009892:	4413      	add	r3, r2
 8009894:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8009898:	6839      	ldr	r1, [r7, #0]
 800989a:	4618      	mov	r0, r3
 800989c:	f004 f8b5 	bl	800da0a <memcpy>
  indx +=  uuid_len;
 80098a0:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80098a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80098a8:	4413      	add	r3, r2
 80098aa:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 80098ae:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80098b2:	3340      	adds	r3, #64	@ 0x40
 80098b4:	443b      	add	r3, r7
 80098b6:	79ba      	ldrb	r2, [r7, #6]
 80098b8:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80098bc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80098c0:	3301      	adds	r3, #1
 80098c2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 80098c6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80098ca:	3340      	adds	r3, #64	@ 0x40
 80098cc:	443b      	add	r3, r7
 80098ce:	797a      	ldrb	r2, [r7, #5]
 80098d0:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80098d4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80098d8:	3301      	adds	r3, #1
 80098da:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80098de:	f107 0320 	add.w	r3, r7, #32
 80098e2:	2203      	movs	r2, #3
 80098e4:	2100      	movs	r1, #0
 80098e6:	4618      	mov	r0, r3
 80098e8:	f004 f810 	bl	800d90c <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80098ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098f0:	2218      	movs	r2, #24
 80098f2:	2100      	movs	r1, #0
 80098f4:	4618      	mov	r0, r3
 80098f6:	f004 f809 	bl	800d90c <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80098fa:	233f      	movs	r3, #63	@ 0x3f
 80098fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 80098fe:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8009902:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 8009904:	f107 030c 	add.w	r3, r7, #12
 8009908:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 800990a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800990e:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 8009910:	f107 0320 	add.w	r3, r7, #32
 8009914:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8009916:	2303      	movs	r3, #3
 8009918:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800991a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800991e:	2100      	movs	r1, #0
 8009920:	4618      	mov	r0, r3
 8009922:	f000 fc11 	bl	800a148 <hci_send_req>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	da01      	bge.n	8009930 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 800992c:	23ff      	movs	r3, #255	@ 0xff
 800992e:	e00c      	b.n	800994a <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8009930:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d002      	beq.n	800993e <aci_gatt_add_serv+0xfe>
    return resp.status;
 8009938:	f897 3020 	ldrb.w	r3, [r7, #32]
 800993c:	e005      	b.n	800994a <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 800993e:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 8009942:	b29a      	uxth	r2, r3
 8009944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009946:	801a      	strh	r2, [r3, #0]

  return 0;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3740      	adds	r7, #64	@ 0x40
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b092      	sub	sp, #72	@ 0x48
 8009956:	af00      	add	r7, sp, #0
 8009958:	603a      	str	r2, [r7, #0]
 800995a:	461a      	mov	r2, r3
 800995c:	4603      	mov	r3, r0
 800995e:	80fb      	strh	r3, [r7, #6]
 8009960:	460b      	mov	r3, r1
 8009962:	717b      	strb	r3, [r7, #5]
 8009964:	4613      	mov	r3, r2
 8009966:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8009968:	2300      	movs	r3, #0
 800996a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 800996e:	88fb      	ldrh	r3, [r7, #6]
 8009970:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8009972:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009976:	f107 020c 	add.w	r2, r7, #12
 800997a:	4413      	add	r3, r2
 800997c:	88fa      	ldrh	r2, [r7, #6]
 800997e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009980:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009984:	3302      	adds	r3, #2
 8009986:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 800998a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800998e:	3348      	adds	r3, #72	@ 0x48
 8009990:	443b      	add	r3, r7
 8009992:	797a      	ldrb	r2, [r7, #5]
 8009994:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009998:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800999c:	3301      	adds	r3, #1
 800999e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 80099a2:	797b      	ldrb	r3, [r7, #5]
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d103      	bne.n	80099b0 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 80099a8:	2302      	movs	r3, #2
 80099aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80099ae:	e002      	b.n	80099b6 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 80099b0:	2310      	movs	r3, #16
 80099b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80099b6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80099ba:	f107 020c 	add.w	r2, r7, #12
 80099be:	4413      	add	r3, r2
 80099c0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80099c4:	6839      	ldr	r1, [r7, #0]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f004 f81f 	bl	800da0a <memcpy>
  indx +=  uuid_len;
 80099cc:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80099d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80099d4:	4413      	add	r3, r2
 80099d6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 80099da:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80099de:	3348      	adds	r3, #72	@ 0x48
 80099e0:	443b      	add	r3, r7
 80099e2:	793a      	ldrb	r2, [r7, #4]
 80099e4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80099e8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80099ec:	3301      	adds	r3, #1
 80099ee:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 80099f2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80099f6:	3348      	adds	r3, #72	@ 0x48
 80099f8:	443b      	add	r3, r7
 80099fa:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80099fe:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009a02:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a06:	3301      	adds	r3, #1
 8009a08:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 8009a0c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a10:	3348      	adds	r3, #72	@ 0x48
 8009a12:	443b      	add	r3, r7
 8009a14:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8009a18:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009a1c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a20:	3301      	adds	r3, #1
 8009a22:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 8009a26:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a2a:	3348      	adds	r3, #72	@ 0x48
 8009a2c:	443b      	add	r3, r7
 8009a2e:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 8009a32:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009a36:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 8009a40:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a44:	3348      	adds	r3, #72	@ 0x48
 8009a46:	443b      	add	r3, r7
 8009a48:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8009a4c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009a50:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a54:	3301      	adds	r3, #1
 8009a56:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 8009a5a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a5e:	3348      	adds	r3, #72	@ 0x48
 8009a60:	443b      	add	r3, r7
 8009a62:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8009a66:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8009a6a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009a6e:	3301      	adds	r3, #1
 8009a70:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009a74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009a78:	2203      	movs	r2, #3
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f003 ff45 	bl	800d90c <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009a82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009a86:	2218      	movs	r2, #24
 8009a88:	2100      	movs	r1, #0
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f003 ff3e 	bl	800d90c <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009a90:	233f      	movs	r3, #63	@ 0x3f
 8009a92:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8009a94:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8009a98:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8009a9a:	f107 030c 	add.w	r3, r7, #12
 8009a9e:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8009aa0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 8009aa6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8009aac:	2303      	movs	r3, #3
 8009aae:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8009ab0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 fb46 	bl	800a148 <hci_send_req>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	da01      	bge.n	8009ac6 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8009ac2:	23ff      	movs	r3, #255	@ 0xff
 8009ac4:	e00c      	b.n	8009ae0 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8009ac6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d002      	beq.n	8009ad4 <aci_gatt_add_char+0x182>
    return resp.status;
 8009ace:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009ad2:	e005      	b.n	8009ae0 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8009ad4:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009adc:	801a      	strh	r2, [r3, #0]

  return 0;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3748      	adds	r7, #72	@ 0x48
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8009ae8:	b590      	push	{r4, r7, lr}
 8009aea:	b0ab      	sub	sp, #172	@ 0xac
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	4604      	mov	r4, r0
 8009af0:	4608      	mov	r0, r1
 8009af2:	4611      	mov	r1, r2
 8009af4:	461a      	mov	r2, r3
 8009af6:	4623      	mov	r3, r4
 8009af8:	80fb      	strh	r3, [r7, #6]
 8009afa:	4603      	mov	r3, r0
 8009afc:	80bb      	strh	r3, [r7, #4]
 8009afe:	460b      	mov	r3, r1
 8009b00:	70fb      	strb	r3, [r7, #3]
 8009b02:	4613      	mov	r3, r2
 8009b04:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8009b06:	2300      	movs	r3, #0
 8009b08:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8009b0c:	78bb      	ldrb	r3, [r7, #2]
 8009b0e:	2b7a      	cmp	r3, #122	@ 0x7a
 8009b10:	d901      	bls.n	8009b16 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8009b12:	2342      	movs	r3, #66	@ 0x42
 8009b14:	e074      	b.n	8009c00 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 8009b16:	88fb      	ldrh	r3, [r7, #6]
 8009b18:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8009b1a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009b1e:	f107 0208 	add.w	r2, r7, #8
 8009b22:	4413      	add	r3, r2
 8009b24:	88fa      	ldrh	r2, [r7, #6]
 8009b26:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009b28:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009b2c:	3302      	adds	r3, #2
 8009b2e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 8009b32:	88bb      	ldrh	r3, [r7, #4]
 8009b34:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8009b36:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009b3a:	f107 0208 	add.w	r2, r7, #8
 8009b3e:	4413      	add	r3, r2
 8009b40:	88ba      	ldrh	r2, [r7, #4]
 8009b42:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8009b44:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009b48:	3302      	adds	r3, #2
 8009b4a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 8009b4e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009b52:	33a8      	adds	r3, #168	@ 0xa8
 8009b54:	443b      	add	r3, r7
 8009b56:	78fa      	ldrb	r2, [r7, #3]
 8009b58:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8009b5c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009b60:	3301      	adds	r3, #1
 8009b62:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 8009b66:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009b6a:	33a8      	adds	r3, #168	@ 0xa8
 8009b6c:	443b      	add	r3, r7
 8009b6e:	78ba      	ldrb	r2, [r7, #2]
 8009b70:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8009b74:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009b78:	3301      	adds	r3, #1
 8009b7a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8009b7e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009b82:	f107 0208 	add.w	r2, r7, #8
 8009b86:	4413      	add	r3, r2
 8009b88:	78ba      	ldrb	r2, [r7, #2]
 8009b8a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f003 ff3b 	bl	800da0a <memcpy>
  indx +=  charValueLen;
 8009b94:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8009b98:	78bb      	ldrb	r3, [r7, #2]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009ba0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8009ba4:	2218      	movs	r2, #24
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f003 feaf 	bl	800d90c <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009bae:	233f      	movs	r3, #63	@ 0x3f
 8009bb0:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8009bb4:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8009bb8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 8009bbc:	f107 0308 	add.w	r3, r7, #8
 8009bc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 8009bc4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8009bc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 8009bcc:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 8009bd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8009bda:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8009bde:	2100      	movs	r1, #0
 8009be0:	4618      	mov	r0, r3
 8009be2:	f000 fab1 	bl	800a148 <hci_send_req>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	da01      	bge.n	8009bf0 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 8009bec:	23ff      	movs	r3, #255	@ 0xff
 8009bee:	e007      	b.n	8009c00 <aci_gatt_update_char_value+0x118>

  if (status) {
 8009bf0:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d002      	beq.n	8009bfe <aci_gatt_update_char_value+0x116>
    return status;
 8009bf8:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8009bfc:	e000      	b.n	8009c00 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	37ac      	adds	r7, #172	@ 0xac
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd90      	pop	{r4, r7, pc}

08009c08 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b08a      	sub	sp, #40	@ 0x28
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8009c12:	88fb      	ldrh	r3, [r7, #6]
 8009c14:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8009c16:	f107 0310 	add.w	r3, r7, #16
 8009c1a:	2218      	movs	r2, #24
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f003 fe74 	bl	800d90c <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8009c24:	233f      	movs	r3, #63	@ 0x3f
 8009c26:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8009c28:	f240 1327 	movw	r3, #295	@ 0x127
 8009c2c:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 8009c2e:	f107 030c 	add.w	r3, r7, #12
 8009c32:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8009c34:	2302      	movs	r3, #2
 8009c36:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8009c38:	f107 030b 	add.w	r3, r7, #11
 8009c3c:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 8009c42:	f107 0310 	add.w	r3, r7, #16
 8009c46:	2100      	movs	r1, #0
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f000 fa7d 	bl	800a148 <hci_send_req>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	da01      	bge.n	8009c58 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 8009c54:	23ff      	movs	r3, #255	@ 0xff
 8009c56:	e000      	b.n	8009c5a <aci_gatt_allow_read+0x52>

    return status;
 8009c58:	7afb      	ldrb	r3, [r7, #11]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3728      	adds	r7, #40	@ 0x28
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b0ac      	sub	sp, #176	@ 0xb0
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	60ba      	str	r2, [r7, #8]
 8009c6a:	607b      	str	r3, [r7, #4]
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	73fb      	strb	r3, [r7, #15]
 8009c70:	460b      	mov	r3, r1
 8009c72:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 8009c74:	7bfb      	ldrb	r3, [r7, #15]
 8009c76:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009c7a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8009c7e:	2218      	movs	r2, #24
 8009c80:	2100      	movs	r1, #0
 8009c82:	4618      	mov	r0, r3
 8009c84:	f003 fe42 	bl	800d90c <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009c88:	233f      	movs	r3, #63	@ 0x3f
 8009c8a:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 8009c8e:	230d      	movs	r3, #13
 8009c90:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 8009c94:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8009c98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 8009ca2:	f107 0314 	add.w	r3, r7, #20
 8009ca6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 8009caa:	2380      	movs	r3, #128	@ 0x80
 8009cac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009cb0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 fa46 	bl	800a148 <hci_send_req>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	da01      	bge.n	8009cc6 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 8009cc2:	23ff      	movs	r3, #255	@ 0xff
 8009cc4:	e01e      	b.n	8009d04 <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 8009cc6:	7d3b      	ldrb	r3, [r7, #20]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d001      	beq.n	8009cd0 <aci_hal_read_config_data+0x6e>
    return rp.status;
 8009ccc:	7d3b      	ldrb	r3, [r7, #20]
 8009cce:	e019      	b.n	8009d04 <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 8009cd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	b2da      	uxtb	r2, r3
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	89bb      	ldrh	r3, [r7, #12]
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d201      	bcs.n	8009cee <aci_hal_read_config_data+0x8c>
 8009cea:	89ba      	ldrh	r2, [r7, #12]
 8009cec:	e002      	b.n	8009cf4 <aci_hal_read_config_data+0x92>
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	f107 0314 	add.w	r3, r7, #20
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f003 fe84 	bl	800da0a <memcpy>
  
  return 0;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	37b0      	adds	r7, #176	@ 0xb0
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b08a      	sub	sp, #40	@ 0x28
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	4603      	mov	r3, r0
 8009d14:	460a      	mov	r2, r1
 8009d16:	71fb      	strb	r3, [r7, #7]
 8009d18:	4613      	mov	r3, r2
 8009d1a:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8009d1c:	79fb      	ldrb	r3, [r7, #7]
 8009d1e:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8009d20:	79bb      	ldrb	r3, [r7, #6]
 8009d22:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009d24:	f107 0310 	add.w	r3, r7, #16
 8009d28:	2218      	movs	r2, #24
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f003 fded 	bl	800d90c <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8009d32:	233f      	movs	r3, #63	@ 0x3f
 8009d34:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8009d36:	230f      	movs	r3, #15
 8009d38:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8009d3a:	f107 030c 	add.w	r3, r7, #12
 8009d3e:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8009d40:	2302      	movs	r3, #2
 8009d42:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8009d44:	f107 030b 	add.w	r3, r7, #11
 8009d48:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8009d4e:	f107 0310 	add.w	r3, r7, #16
 8009d52:	2100      	movs	r1, #0
 8009d54:	4618      	mov	r0, r3
 8009d56:	f000 f9f7 	bl	800a148 <hci_send_req>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	da01      	bge.n	8009d64 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8009d60:	23ff      	movs	r3, #255	@ 0xff
 8009d62:	e000      	b.n	8009d66 <aci_hal_set_tx_power_level+0x5a>

  return status;
 8009d64:	7afb      	ldrb	r3, [r7, #11]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3728      	adds	r7, #40	@ 0x28
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8009d6e:	b590      	push	{r4, r7, lr}
 8009d70:	b089      	sub	sp, #36	@ 0x24
 8009d72:	af02      	add	r7, sp, #8
 8009d74:	6078      	str	r0, [r7, #4]
 8009d76:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8009d78:	f107 0410 	add.w	r4, r7, #16
 8009d7c:	f107 0215 	add.w	r2, r7, #21
 8009d80:	f107 0112 	add.w	r1, r7, #18
 8009d84:	f107 0016 	add.w	r0, r7, #22
 8009d88:	f107 030e 	add.w	r3, r7, #14
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	4623      	mov	r3, r4
 8009d90:	f000 f851 	bl	8009e36 <hci_le_read_local_version>
 8009d94:	4603      	mov	r3, r0
 8009d96:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8009d98:	7dfb      	ldrb	r3, [r7, #23]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d124      	bne.n	8009de8 <getBlueNRGVersion+0x7a>
    *hwVersion = hci_revision >> 8;
 8009d9e:	8a7b      	ldrh	r3, [r7, #18]
 8009da0:	0a1b      	lsrs	r3, r3, #8
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8009daa:	8a7b      	ldrh	r3, [r7, #18]
 8009dac:	021b      	lsls	r3, r3, #8
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	881b      	ldrh	r3, [r3, #0]
 8009db8:	b21a      	sxth	r2, r3
 8009dba:	89fb      	ldrh	r3, [r7, #14]
 8009dbc:	b21b      	sxth	r3, r3
 8009dbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009dc2:	b21b      	sxth	r3, r3
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	b21b      	sxth	r3, r3
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	881b      	ldrh	r3, [r3, #0]
 8009dd2:	b21a      	sxth	r2, r3
 8009dd4:	89fb      	ldrh	r3, [r7, #14]
 8009dd6:	b21b      	sxth	r3, r3
 8009dd8:	f003 030f 	and.w	r3, r3, #15
 8009ddc:	b21b      	sxth	r3, r3
 8009dde:	4313      	orrs	r3, r2
 8009de0:	b21b      	sxth	r3, r3
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8009de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	371c      	adds	r7, #28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd90      	pop	{r4, r7, pc}

08009df2 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b088      	sub	sp, #32
 8009df6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009df8:	f107 0308 	add.w	r3, r7, #8
 8009dfc:	2218      	movs	r2, #24
 8009dfe:	2100      	movs	r1, #0
 8009e00:	4618      	mov	r0, r3
 8009e02:	f003 fd83 	bl	800d90c <memset>
  rq.ogf = OGF_HOST_CTL;
 8009e06:	2303      	movs	r3, #3
 8009e08:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009e0e:	1dfb      	adds	r3, r7, #7
 8009e10:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009e12:	2301      	movs	r3, #1
 8009e14:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009e16:	f107 0308 	add.w	r3, r7, #8
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 f993 	bl	800a148 <hci_send_req>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	da01      	bge.n	8009e2c <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8009e28:	23ff      	movs	r3, #255	@ 0xff
 8009e2a:	e000      	b.n	8009e2e <hci_reset+0x3c>
  
  return status;  
 8009e2c:	79fb      	ldrb	r3, [r7, #7]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3720      	adds	r7, #32
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b08e      	sub	sp, #56	@ 0x38
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	60f8      	str	r0, [r7, #12]
 8009e3e:	60b9      	str	r1, [r7, #8]
 8009e40:	607a      	str	r2, [r7, #4]
 8009e42:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009e44:	f107 0314 	add.w	r3, r7, #20
 8009e48:	2209      	movs	r2, #9
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f003 fd5d 	bl	800d90c <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009e52:	f107 0320 	add.w	r3, r7, #32
 8009e56:	2218      	movs	r2, #24
 8009e58:	2100      	movs	r1, #0
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f003 fd56 	bl	800d90c <memset>
  rq.ogf = OGF_INFO_PARAM;
 8009e60:	2304      	movs	r3, #4
 8009e62:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8009e64:	2301      	movs	r3, #1
 8009e66:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8009e70:	f107 0314 	add.w	r3, r7, #20
 8009e74:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8009e76:	2309      	movs	r3, #9
 8009e78:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009e7a:	f107 0320 	add.w	r3, r7, #32
 8009e7e:	2100      	movs	r1, #0
 8009e80:	4618      	mov	r0, r3
 8009e82:	f000 f961 	bl	800a148 <hci_send_req>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	da01      	bge.n	8009e90 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8009e8c:	23ff      	movs	r3, #255	@ 0xff
 8009e8e:	e018      	b.n	8009ec2 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8009e90:	7d3b      	ldrb	r3, [r7, #20]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <hci_le_read_local_version+0x64>
    return resp.status;
 8009e96:	7d3b      	ldrb	r3, [r7, #20]
 8009e98:	e013      	b.n	8009ec2 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8009e9a:	7d7a      	ldrb	r2, [r7, #21]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8009ea0:	8afa      	ldrh	r2, [r7, #22]
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8009ea6:	7e3a      	ldrb	r2, [r7, #24]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8009eac:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8009eb6:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ebe:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3738      	adds	r7, #56	@ 0x38
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b092      	sub	sp, #72	@ 0x48
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	6039      	str	r1, [r7, #0]
 8009ed4:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8009ed6:	f107 0310 	add.w	r3, r7, #16
 8009eda:	2220      	movs	r2, #32
 8009edc:	2100      	movs	r1, #0
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f003 fd14 	bl	800d90c <memset>
  scan_resp_cp.length = length;
 8009ee4:	79fb      	ldrb	r3, [r7, #7]
 8009ee6:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8009ee8:	79fb      	ldrb	r3, [r7, #7]
 8009eea:	2b1f      	cmp	r3, #31
 8009eec:	bf28      	it	cs
 8009eee:	231f      	movcs	r3, #31
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	f107 0310 	add.w	r3, r7, #16
 8009ef8:	3301      	adds	r3, #1
 8009efa:	6839      	ldr	r1, [r7, #0]
 8009efc:	4618      	mov	r0, r3
 8009efe:	f003 fd84 	bl	800da0a <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009f02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009f06:	2218      	movs	r2, #24
 8009f08:	2100      	movs	r1, #0
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f003 fcfe 	bl	800d90c <memset>
  rq.ogf = OGF_LE_CTL;
 8009f10:	2308      	movs	r3, #8
 8009f12:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8009f14:	2309      	movs	r3, #9
 8009f16:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 8009f18:	f107 0310 	add.w	r3, r7, #16
 8009f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8009f1e:	2320      	movs	r3, #32
 8009f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 8009f22:	f107 030f 	add.w	r3, r7, #15
 8009f26:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009f2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009f30:	2100      	movs	r1, #0
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 f908 	bl	800a148 <hci_send_req>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	da01      	bge.n	8009f42 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8009f3e:	23ff      	movs	r3, #255	@ 0xff
 8009f40:	e000      	b.n	8009f44 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8009f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3748      	adds	r7, #72	@ 0x48
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	3308      	adds	r3, #8
 8009f58:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	2b04      	cmp	r3, #4
 8009f60:	d001      	beq.n	8009f66 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8009f62:	2301      	movs	r3, #1
 8009f64:	e00c      	b.n	8009f80 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	3302      	adds	r3, #2
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009f74:	3b03      	subs	r3, #3
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d001      	beq.n	8009f7e <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	e000      	b.n	8009f80 <verify_packet+0x34>
  
  return 0;      
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b0a6      	sub	sp, #152	@ 0x98
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	607b      	str	r3, [r7, #4]
 8009f94:	4603      	mov	r3, r0
 8009f96:	81fb      	strh	r3, [r7, #14]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	81bb      	strh	r3, [r7, #12]
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8009fa0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fa8:	b21a      	sxth	r2, r3
 8009faa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009fae:	029b      	lsls	r3, r3, #10
 8009fb0:	b21b      	sxth	r3, r3
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	b21b      	sxth	r3, r3
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8009fba:	7afb      	ldrb	r3, [r7, #11]
 8009fbc:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8009fc2:	f107 0318 	add.w	r3, r7, #24
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	461a      	mov	r2, r3
 8009fca:	f107 0314 	add.w	r3, r7, #20
 8009fce:	8819      	ldrh	r1, [r3, #0]
 8009fd0:	789b      	ldrb	r3, [r3, #2]
 8009fd2:	8011      	strh	r1, [r2, #0]
 8009fd4:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8009fd6:	f107 0318 	add.w	r3, r7, #24
 8009fda:	3304      	adds	r3, #4
 8009fdc:	7afa      	ldrb	r2, [r7, #11]
 8009fde:	6879      	ldr	r1, [r7, #4]
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f003 fd12 	bl	800da0a <memcpy>
  
  if (hciContext.io.Send)
 8009fe6:	4b09      	ldr	r3, [pc, #36]	@ (800a00c <send_cmd+0x80>)
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d009      	beq.n	800a002 <send_cmd+0x76>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8009fee:	4b07      	ldr	r3, [pc, #28]	@ (800a00c <send_cmd+0x80>)
 8009ff0:	691b      	ldr	r3, [r3, #16]
 8009ff2:	7afa      	ldrb	r2, [r7, #11]
 8009ff4:	b292      	uxth	r2, r2
 8009ff6:	3204      	adds	r2, #4
 8009ff8:	b291      	uxth	r1, r2
 8009ffa:	f107 0218 	add.w	r2, r7, #24
 8009ffe:	4610      	mov	r0, r2
 800a000:	4798      	blx	r3
  }
}
 800a002:	bf00      	nop
 800a004:	3798      	adds	r7, #152	@ 0x98
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	200021c8 	.word	0x200021c8

0800a010 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800a01a:	e00a      	b.n	800a032 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800a01c:	f107 030c 	add.w	r3, r7, #12
 800a020:	4619      	mov	r1, r3
 800a022:	6838      	ldr	r0, [r7, #0]
 800a024:	f000 fae8 	bl	800a5f8 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	4619      	mov	r1, r3
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 fa4f 	bl	800a4d0 <list_insert_head>
  while (!list_is_empty(src_list))
 800a032:	6838      	ldr	r0, [r7, #0]
 800a034:	f000 fa2a 	bl	800a48c <list_is_empty>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d0ee      	beq.n	800a01c <move_list+0xc>
  }
}
 800a03e:	bf00      	nop
 800a040:	bf00      	nop
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a04e:	e009      	b.n	800a064 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800a050:	1d3b      	adds	r3, r7, #4
 800a052:	4619      	mov	r1, r3
 800a054:	4809      	ldr	r0, [pc, #36]	@ (800a07c <free_event_list+0x34>)
 800a056:	f000 faa8 	bl	800a5aa <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4619      	mov	r1, r3
 800a05e:	4808      	ldr	r0, [pc, #32]	@ (800a080 <free_event_list+0x38>)
 800a060:	f000 fa5c 	bl	800a51c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a064:	4806      	ldr	r0, [pc, #24]	@ (800a080 <free_event_list+0x38>)
 800a066:	f000 faee 	bl	800a646 <list_get_size>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	ddef      	ble.n	800a050 <free_event_list+0x8>
  }
}
 800a070:	bf00      	nop
 800a072:	bf00      	nop
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	20001f04 	.word	0x20001f04
 800a080:	20001efc 	.word	0x20001efc

0800a084 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d002      	beq.n	800a09a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800a094:	4a18      	ldr	r2, [pc, #96]	@ (800a0f8 <hci_init+0x74>)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800a09a:	4818      	ldr	r0, [pc, #96]	@ (800a0fc <hci_init+0x78>)
 800a09c:	f000 f9e6 	bl	800a46c <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800a0a0:	4817      	ldr	r0, [pc, #92]	@ (800a100 <hci_init+0x7c>)
 800a0a2:	f000 f9e3 	bl	800a46c <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800a0a6:	f7f7 ffa1 	bl	8001fec <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	73fb      	strb	r3, [r7, #15]
 800a0ae:	e00c      	b.n	800a0ca <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800a0b0:	7bfb      	ldrb	r3, [r7, #15]
 800a0b2:	228c      	movs	r2, #140	@ 0x8c
 800a0b4:	fb02 f303 	mul.w	r3, r2, r3
 800a0b8:	4a12      	ldr	r2, [pc, #72]	@ (800a104 <hci_init+0x80>)
 800a0ba:	4413      	add	r3, r2
 800a0bc:	4619      	mov	r1, r3
 800a0be:	480f      	ldr	r0, [pc, #60]	@ (800a0fc <hci_init+0x78>)
 800a0c0:	f000 fa2c 	bl	800a51c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a0c4:	7bfb      	ldrb	r3, [r7, #15]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	73fb      	strb	r3, [r7, #15]
 800a0ca:	7bfb      	ldrb	r3, [r7, #15]
 800a0cc:	2b04      	cmp	r3, #4
 800a0ce:	d9ef      	bls.n	800a0b0 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800a0d0:	4b09      	ldr	r3, [pc, #36]	@ (800a0f8 <hci_init+0x74>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d003      	beq.n	800a0e0 <hci_init+0x5c>
 800a0d8:	4b07      	ldr	r3, [pc, #28]	@ (800a0f8 <hci_init+0x74>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2000      	movs	r0, #0
 800a0de:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800a0e0:	4b05      	ldr	r3, [pc, #20]	@ (800a0f8 <hci_init+0x74>)
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <hci_init+0x6a>
 800a0e8:	4b03      	ldr	r3, [pc, #12]	@ (800a0f8 <hci_init+0x74>)
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	4798      	blx	r3
}
 800a0ee:	bf00      	nop
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	200021c8 	.word	0x200021c8
 800a0fc:	20001efc 	.word	0x20001efc
 800a100:	20001f04 	.word	0x20001f04
 800a104:	20001f0c 	.word	0x20001f0c

0800a108 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a0b      	ldr	r2, [pc, #44]	@ (800a144 <hci_register_io_bus+0x3c>)
 800a116:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	4a09      	ldr	r2, [pc, #36]	@ (800a144 <hci_register_io_bus+0x3c>)
 800a11e:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	4a07      	ldr	r2, [pc, #28]	@ (800a144 <hci_register_io_bus+0x3c>)
 800a126:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	699b      	ldr	r3, [r3, #24]
 800a12c:	4a05      	ldr	r2, [pc, #20]	@ (800a144 <hci_register_io_bus+0x3c>)
 800a12e:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	4a03      	ldr	r2, [pc, #12]	@ (800a144 <hci_register_io_bus+0x3c>)
 800a136:	6093      	str	r3, [r2, #8]
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr
 800a144:	200021c8 	.word	0x200021c8

0800a148 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b08e      	sub	sp, #56	@ 0x38
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	460b      	mov	r3, r1
 800a152:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	885b      	ldrh	r3, [r3, #2]
 800a158:	b21b      	sxth	r3, r3
 800a15a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a15e:	b21a      	sxth	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	881b      	ldrh	r3, [r3, #0]
 800a164:	b21b      	sxth	r3, r3
 800a166:	029b      	lsls	r3, r3, #10
 800a168:	b21b      	sxth	r3, r3
 800a16a:	4313      	orrs	r3, r2
 800a16c:	b21b      	sxth	r3, r3
 800a16e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800a170:	2300      	movs	r3, #0
 800a172:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800a174:	f107 0308 	add.w	r3, r7, #8
 800a178:	4618      	mov	r0, r3
 800a17a:	f000 f977 	bl	800a46c <list_init_head>

  free_event_list();
 800a17e:	f7ff ff63 	bl	800a048 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	8818      	ldrh	r0, [r3, #0]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	8859      	ldrh	r1, [r3, #2]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	b2da      	uxtb	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	f7ff fefa 	bl	8009f8c <send_cmd>
  
  if (async)
 800a198:	78fb      	ldrb	r3, [r7, #3]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d001      	beq.n	800a1a2 <hci_send_req+0x5a>
  {
    return 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	e0e2      	b.n	800a368 <hci_send_req+0x220>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800a1a2:	f7fa f8a5 	bl	80042f0 <HAL_GetTick>
 800a1a6:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a1a8:	f7fa f8a2 	bl	80042f0 <HAL_GetTick>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b0:	1ad3      	subs	r3, r2, r3
 800a1b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a1b6:	f200 80b3 	bhi.w	800a320 <hci_send_req+0x1d8>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800a1ba:	486d      	ldr	r0, [pc, #436]	@ (800a370 <hci_send_req+0x228>)
 800a1bc:	f000 f966 	bl	800a48c <list_is_empty>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d000      	beq.n	800a1c8 <hci_send_req+0x80>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a1c6:	e7ef      	b.n	800a1a8 <hci_send_req+0x60>
      {
        break;
 800a1c8:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800a1ca:	f107 0310 	add.w	r3, r7, #16
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	4867      	ldr	r0, [pc, #412]	@ (800a370 <hci_send_req+0x228>)
 800a1d2:	f000 f9ea 	bl	800a5aa <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	3308      	adds	r3, #8
 800a1da:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800a1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	2b04      	cmp	r3, #4
 800a1e2:	d17f      	bne.n	800a2e4 <hci_send_req+0x19c>
    {
      event_pckt = (void *)(hci_hdr->data);
 800a1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	3308      	adds	r3, #8
 800a1ee:	3303      	adds	r3, #3
 800a1f0:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a1f8:	3b03      	subs	r3, #3
 800a1fa:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800a1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	2b3e      	cmp	r3, #62	@ 0x3e
 800a202:	d04c      	beq.n	800a29e <hci_send_req+0x156>
 800a204:	2b3e      	cmp	r3, #62	@ 0x3e
 800a206:	dc68      	bgt.n	800a2da <hci_send_req+0x192>
 800a208:	2b10      	cmp	r3, #16
 800a20a:	f000 808b 	beq.w	800a324 <hci_send_req+0x1dc>
 800a20e:	2b10      	cmp	r3, #16
 800a210:	dc63      	bgt.n	800a2da <hci_send_req+0x192>
 800a212:	2b0e      	cmp	r3, #14
 800a214:	d023      	beq.n	800a25e <hci_send_req+0x116>
 800a216:	2b0f      	cmp	r3, #15
 800a218:	d15f      	bne.n	800a2da <hci_send_req+0x192>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800a21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21c:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	885b      	ldrh	r3, [r3, #2]
 800a222:	b29b      	uxth	r3, r3
 800a224:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a226:	429a      	cmp	r2, r3
 800a228:	d17e      	bne.n	800a328 <hci_send_req+0x1e0>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	2b0f      	cmp	r3, #15
 800a230:	d004      	beq.n	800a23c <hci_send_req+0xf4>
          if (cs->status) {
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d051      	beq.n	800a2de <hci_send_req+0x196>
            goto failed;
 800a23a:	e078      	b.n	800a32e <hci_send_req+0x1e6>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	695a      	ldr	r2, [r3, #20]
 800a240:	6a3b      	ldr	r3, [r7, #32]
 800a242:	429a      	cmp	r2, r3
 800a244:	bf28      	it	cs
 800a246:	461a      	movcs	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6918      	ldr	r0, [r3, #16]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	695b      	ldr	r3, [r3, #20]
 800a254:	461a      	mov	r2, r3
 800a256:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a258:	f003 fbd7 	bl	800da0a <memcpy>
        goto done;
 800a25c:	e078      	b.n	800a350 <hci_send_req+0x208>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800a25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a260:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a268:	b29b      	uxth	r3, r3
 800a26a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d15d      	bne.n	800a32c <hci_send_req+0x1e4>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800a270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a272:	3303      	adds	r3, #3
 800a274:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800a276:	6a3b      	ldr	r3, [r7, #32]
 800a278:	3b03      	subs	r3, #3
 800a27a:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	695a      	ldr	r2, [r3, #20]
 800a280:	6a3b      	ldr	r3, [r7, #32]
 800a282:	429a      	cmp	r2, r3
 800a284:	bf28      	it	cs
 800a286:	461a      	movcs	r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6918      	ldr	r0, [r3, #16]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	695b      	ldr	r3, [r3, #20]
 800a294:	461a      	mov	r2, r3
 800a296:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a298:	f003 fbb7 	bl	800da0a <memcpy>
        goto done;
 800a29c:	e058      	b.n	800a350 <hci_send_req+0x208>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800a29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a0:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d118      	bne.n	800a2e2 <hci_send_req+0x19a>
          break;
      
        len -= 1;
 800a2b0:	6a3b      	ldr	r3, [r7, #32]
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	695a      	ldr	r2, [r3, #20]
 800a2ba:	6a3b      	ldr	r3, [r7, #32]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	bf28      	it	cs
 800a2c0:	461a      	movcs	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6918      	ldr	r0, [r3, #16]
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	1c59      	adds	r1, r3, #1
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	f003 fb99 	bl	800da0a <memcpy>
        goto done;
 800a2d8:	e03a      	b.n	800a350 <hci_send_req+0x208>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800a2da:	bf00      	nop
 800a2dc:	e002      	b.n	800a2e4 <hci_send_req+0x19c>
          break;
 800a2de:	bf00      	nop
 800a2e0:	e000      	b.n	800a2e4 <hci_send_req+0x19c>
          break;
 800a2e2:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800a2e4:	4823      	ldr	r0, [pc, #140]	@ (800a374 <hci_send_req+0x22c>)
 800a2e6:	f000 f8d1 	bl	800a48c <list_is_empty>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00d      	beq.n	800a30c <hci_send_req+0x1c4>
 800a2f0:	481f      	ldr	r0, [pc, #124]	@ (800a370 <hci_send_req+0x228>)
 800a2f2:	f000 f8cb 	bl	800a48c <list_is_empty>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d007      	beq.n	800a30c <hci_send_req+0x1c4>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	4619      	mov	r1, r3
 800a300:	481c      	ldr	r0, [pc, #112]	@ (800a374 <hci_send_req+0x22c>)
 800a302:	f000 f90b 	bl	800a51c <list_insert_tail>
      hciReadPacket=NULL;
 800a306:	2300      	movs	r3, #0
 800a308:	613b      	str	r3, [r7, #16]
 800a30a:	e008      	b.n	800a31e <hci_send_req+0x1d6>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	f107 0308 	add.w	r3, r7, #8
 800a312:	4611      	mov	r1, r2
 800a314:	4618      	mov	r0, r3
 800a316:	f000 f901 	bl	800a51c <list_insert_tail>
      hciReadPacket=NULL;
 800a31a:	2300      	movs	r3, #0
 800a31c:	613b      	str	r3, [r7, #16]
  {
 800a31e:	e740      	b.n	800a1a2 <hci_send_req+0x5a>
        goto failed;
 800a320:	bf00      	nop
 800a322:	e004      	b.n	800a32e <hci_send_req+0x1e6>
        goto failed;
 800a324:	bf00      	nop
 800a326:	e002      	b.n	800a32e <hci_send_req+0x1e6>
          goto failed;
 800a328:	bf00      	nop
 800a32a:	e000      	b.n	800a32e <hci_send_req+0x1e6>
          goto failed;
 800a32c:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d004      	beq.n	800a33e <hci_send_req+0x1f6>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	4619      	mov	r1, r3
 800a338:	480e      	ldr	r0, [pc, #56]	@ (800a374 <hci_send_req+0x22c>)
 800a33a:	f000 f8c9 	bl	800a4d0 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a33e:	f107 0308 	add.w	r3, r7, #8
 800a342:	4619      	mov	r1, r3
 800a344:	480a      	ldr	r0, [pc, #40]	@ (800a370 <hci_send_req+0x228>)
 800a346:	f7ff fe63 	bl	800a010 <move_list>

  return -1;
 800a34a:	f04f 33ff 	mov.w	r3, #4294967295
 800a34e:	e00b      	b.n	800a368 <hci_send_req+0x220>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	4619      	mov	r1, r3
 800a354:	4807      	ldr	r0, [pc, #28]	@ (800a374 <hci_send_req+0x22c>)
 800a356:	f000 f8bb 	bl	800a4d0 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a35a:	f107 0308 	add.w	r3, r7, #8
 800a35e:	4619      	mov	r1, r3
 800a360:	4803      	ldr	r0, [pc, #12]	@ (800a370 <hci_send_req+0x228>)
 800a362:	f7ff fe55 	bl	800a010 <move_list>

  return 0;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3738      	adds	r7, #56	@ 0x38
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	20001f04 	.word	0x20001f04
 800a374:	20001efc 	.word	0x20001efc

0800a378 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800a37e:	2300      	movs	r3, #0
 800a380:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800a382:	e013      	b.n	800a3ac <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800a384:	1d3b      	adds	r3, r7, #4
 800a386:	4619      	mov	r1, r3
 800a388:	480e      	ldr	r0, [pc, #56]	@ (800a3c4 <hci_user_evt_proc+0x4c>)
 800a38a:	f000 f90e 	bl	800a5aa <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a38e:	4b0e      	ldr	r3, [pc, #56]	@ (800a3c8 <hci_user_evt_proc+0x50>)
 800a390:	69db      	ldr	r3, [r3, #28]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d005      	beq.n	800a3a2 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800a396:	4b0c      	ldr	r3, [pc, #48]	@ (800a3c8 <hci_user_evt_proc+0x50>)
 800a398:	69db      	ldr	r3, [r3, #28]
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	3208      	adds	r2, #8
 800a39e:	4610      	mov	r0, r2
 800a3a0:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	4809      	ldr	r0, [pc, #36]	@ (800a3cc <hci_user_evt_proc+0x54>)
 800a3a8:	f000 f8b8 	bl	800a51c <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800a3ac:	4805      	ldr	r0, [pc, #20]	@ (800a3c4 <hci_user_evt_proc+0x4c>)
 800a3ae:	f000 f86d 	bl	800a48c <list_is_empty>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d0e5      	beq.n	800a384 <hci_user_evt_proc+0xc>
  }
}
 800a3b8:	bf00      	nop
 800a3ba:	bf00      	nop
 800a3bc:	3708      	adds	r7, #8
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	20001f04 	.word	0x20001f04
 800a3c8:	200021c8 	.word	0x200021c8
 800a3cc:	20001efc 	.word	0x20001efc

0800a3d0 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b086      	sub	sp, #24
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800a3e0:	481f      	ldr	r0, [pc, #124]	@ (800a460 <hci_notify_asynch_evt+0x90>)
 800a3e2:	f000 f853 	bl	800a48c <list_is_empty>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d132      	bne.n	800a452 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800a3ec:	f107 030c 	add.w	r3, r7, #12
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	481b      	ldr	r0, [pc, #108]	@ (800a460 <hci_notify_asynch_evt+0x90>)
 800a3f4:	f000 f8d9 	bl	800a5aa <list_remove_head>
    
    if (hciContext.io.Receive)
 800a3f8:	4b1a      	ldr	r3, [pc, #104]	@ (800a464 <hci_notify_asynch_evt+0x94>)
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d02a      	beq.n	800a456 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800a400:	4b18      	ldr	r3, [pc, #96]	@ (800a464 <hci_notify_asynch_evt+0x94>)
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	3208      	adds	r2, #8
 800a408:	2180      	movs	r1, #128	@ 0x80
 800a40a:	4610      	mov	r0, r2
 800a40c:	4798      	blx	r3
 800a40e:	4603      	mov	r3, r0
 800a410:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800a412:	7cfb      	ldrb	r3, [r7, #19]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d016      	beq.n	800a446 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	7cfa      	ldrb	r2, [r7, #19]
 800a41c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4618      	mov	r0, r3
 800a424:	f7ff fd92 	bl	8009f4c <verify_packet>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d105      	bne.n	800a43a <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	4619      	mov	r1, r3
 800a432:	480d      	ldr	r0, [pc, #52]	@ (800a468 <hci_notify_asynch_evt+0x98>)
 800a434:	f000 f872 	bl	800a51c <list_insert_tail>
 800a438:	e00d      	b.n	800a456 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	4619      	mov	r1, r3
 800a43e:	4808      	ldr	r0, [pc, #32]	@ (800a460 <hci_notify_asynch_evt+0x90>)
 800a440:	f000 f846 	bl	800a4d0 <list_insert_head>
 800a444:	e007      	b.n	800a456 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	4619      	mov	r1, r3
 800a44a:	4805      	ldr	r0, [pc, #20]	@ (800a460 <hci_notify_asynch_evt+0x90>)
 800a44c:	f000 f840 	bl	800a4d0 <list_insert_head>
 800a450:	e001      	b.n	800a456 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800a452:	2301      	movs	r3, #1
 800a454:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800a456:	697b      	ldr	r3, [r7, #20]

}
 800a458:	4618      	mov	r0, r3
 800a45a:	3718      	adds	r7, #24
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	20001efc 	.word	0x20001efc
 800a464:	200021c8 	.word	0x200021c8
 800a468:	20001f04 	.word	0x20001f04

0800a46c <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	605a      	str	r2, [r3, #4]
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b087      	sub	sp, #28
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a494:	f3ef 8310 	mrs	r3, PRIMASK
 800a498:	60fb      	str	r3, [r7, #12]
  return(result);
 800a49a:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a49c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a49e:	b672      	cpsid	i
}
 800a4a0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d102      	bne.n	800a4b2 <list_is_empty+0x26>
  {
    return_value = 1;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	75fb      	strb	r3, [r7, #23]
 800a4b0:	e001      	b.n	800a4b6 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	75fb      	strb	r3, [r7, #23]
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	f383 8810 	msr	PRIMASK, r3
}
 800a4c0:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800a4c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	371c      	adds	r7, #28
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b087      	sub	sp, #28
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4da:	f3ef 8310 	mrs	r3, PRIMASK
 800a4de:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a4e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4e4:	b672      	cpsid	i
}
 800a4e6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	683a      	ldr	r2, [r7, #0]
 800a4fa:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	683a      	ldr	r2, [r7, #0]
 800a502:	605a      	str	r2, [r3, #4]
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	f383 8810 	msr	PRIMASK, r3
}
 800a50e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a510:	bf00      	nop
 800a512:	371c      	adds	r7, #28
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b087      	sub	sp, #28
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a526:	f3ef 8310 	mrs	r3, PRIMASK
 800a52a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a52c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a52e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a530:	b672      	cpsid	i
}
 800a532:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	685a      	ldr	r2, [r3, #4]
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	683a      	ldr	r2, [r7, #0]
 800a546:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	601a      	str	r2, [r3, #0]
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	f383 8810 	msr	PRIMASK, r3
}
 800a55a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a55c:	bf00      	nop
 800a55e:	371c      	adds	r7, #28
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800a568:	b480      	push	{r7}
 800a56a:	b087      	sub	sp, #28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a570:	f3ef 8310 	mrs	r3, PRIMASK
 800a574:	60fb      	str	r3, [r7, #12]
  return(result);
 800a576:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a578:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a57a:	b672      	cpsid	i
}
 800a57c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	6812      	ldr	r2, [r2, #0]
 800a586:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	6852      	ldr	r2, [r2, #4]
 800a590:	605a      	str	r2, [r3, #4]
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	f383 8810 	msr	PRIMASK, r3
}
 800a59c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a59e:	bf00      	nop
 800a5a0:	371c      	adds	r7, #28
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b086      	sub	sp, #24
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5b4:	f3ef 8310 	mrs	r3, PRIMASK
 800a5b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a5bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5be:	b672      	cpsid	i
}
 800a5c0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7ff ffca 	bl	800a568 <list_remove_node>
  (*node)->next = NULL;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	605a      	str	r2, [r3, #4]
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	f383 8810 	msr	PRIMASK, r3
}
 800a5ee:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a5f0:	bf00      	nop
 800a5f2:	3718      	adds	r7, #24
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b086      	sub	sp, #24
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a602:	f3ef 8310 	mrs	r3, PRIMASK
 800a606:	60fb      	str	r3, [r7, #12]
  return(result);
 800a608:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a60a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a60c:	b672      	cpsid	i
}
 800a60e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	685a      	ldr	r2, [r3, #4]
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7ff ffa3 	bl	800a568 <list_remove_node>
  (*node)->next = NULL;
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2200      	movs	r2, #0
 800a628:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2200      	movs	r2, #0
 800a630:	605a      	str	r2, [r3, #4]
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	f383 8810 	msr	PRIMASK, r3
}
 800a63c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a63e:	bf00      	nop
 800a640:	3718      	adds	r7, #24
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800a646:	b480      	push	{r7}
 800a648:	b089      	sub	sp, #36	@ 0x24
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
  int size = 0;
 800a64e:	2300      	movs	r3, #0
 800a650:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a652:	f3ef 8310 	mrs	r3, PRIMASK
 800a656:	613b      	str	r3, [r7, #16]
  return(result);
 800a658:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a65a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a65c:	b672      	cpsid	i
}
 800a65e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800a666:	e005      	b.n	800a674 <list_get_size+0x2e>
  {
    size++;
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	3301      	adds	r3, #1
 800a66c:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800a674:	69ba      	ldr	r2, [r7, #24]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d1f5      	bne.n	800a668 <list_get_size+0x22>
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f383 8810 	msr	PRIMASK, r3
}
 800a686:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800a688:	69fb      	ldr	r3, [r7, #28]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3724      	adds	r7, #36	@ 0x24
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr

0800a696 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a696:	b480      	push	{r7}
 800a698:	b085      	sub	sp, #20
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	4603      	mov	r3, r0
 800a69e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a6a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a6a8:	2b84      	cmp	r3, #132	@ 0x84
 800a6aa:	d005      	beq.n	800a6b8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a6ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	3303      	adds	r3, #3
 800a6b6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3714      	adds	r7, #20
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b083      	sub	sp, #12
 800a6ca:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6cc:	f3ef 8305 	mrs	r3, IPSR
 800a6d0:	607b      	str	r3, [r7, #4]
  return(result);
 800a6d2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	bf14      	ite	ne
 800a6d8:	2301      	movne	r3, #1
 800a6da:	2300      	moveq	r3, #0
 800a6dc:	b2db      	uxtb	r3, r3
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	370c      	adds	r7, #12
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr

0800a6ea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a6ee:	f000 feb5 	bl	800b45c <vTaskStartScheduler>
  
  return osOK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6fa:	b089      	sub	sp, #36	@ 0x24
 800a6fc:	af04      	add	r7, sp, #16
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	695b      	ldr	r3, [r3, #20]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d020      	beq.n	800a74c <osThreadCreate+0x54>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	699b      	ldr	r3, [r3, #24]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d01c      	beq.n	800a74c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	685c      	ldr	r4, [r3, #4]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	691e      	ldr	r6, [r3, #16]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a724:	4618      	mov	r0, r3
 800a726:	f7ff ffb6 	bl	800a696 <makeFreeRtosPriority>
 800a72a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	695b      	ldr	r3, [r3, #20]
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a734:	9202      	str	r2, [sp, #8]
 800a736:	9301      	str	r3, [sp, #4]
 800a738:	9100      	str	r1, [sp, #0]
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	4632      	mov	r2, r6
 800a73e:	4629      	mov	r1, r5
 800a740:	4620      	mov	r0, r4
 800a742:	f000 fcbd 	bl	800b0c0 <xTaskCreateStatic>
 800a746:	4603      	mov	r3, r0
 800a748:	60fb      	str	r3, [r7, #12]
 800a74a:	e01c      	b.n	800a786 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	685c      	ldr	r4, [r3, #4]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a758:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a760:	4618      	mov	r0, r3
 800a762:	f7ff ff98 	bl	800a696 <makeFreeRtosPriority>
 800a766:	4602      	mov	r2, r0
 800a768:	f107 030c 	add.w	r3, r7, #12
 800a76c:	9301      	str	r3, [sp, #4]
 800a76e:	9200      	str	r2, [sp, #0]
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	4632      	mov	r2, r6
 800a774:	4629      	mov	r1, r5
 800a776:	4620      	mov	r0, r4
 800a778:	f000 fd02 	bl	800b180 <xTaskCreate>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d001      	beq.n	800a786 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a782:	2300      	movs	r3, #0
 800a784:	e000      	b.n	800a788 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a786:	68fb      	ldr	r3, [r7, #12]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a790 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <osDelay+0x16>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	e000      	b.n	800a7a8 <osDelay+0x18>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f000 fe21 	bl	800b3f0 <vTaskDelay>
  
  return osOK;
 800a7ae:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a7b8:	b590      	push	{r4, r7, lr}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af02      	add	r7, sp, #8
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d011      	beq.n	800a7ee <osMessageCreate+0x36>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00d      	beq.n	800a7ee <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6818      	ldr	r0, [r3, #0]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6859      	ldr	r1, [r3, #4]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	689a      	ldr	r2, [r3, #8]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	2400      	movs	r4, #0
 800a7e4:	9400      	str	r4, [sp, #0]
 800a7e6:	f000 f9a1 	bl	800ab2c <xQueueGenericCreateStatic>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	e008      	b.n	800a800 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6818      	ldr	r0, [r3, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	f000 fa14 	bl	800ac26 <xQueueGenericCreate>
 800a7fe:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a800:	4618      	mov	r0, r3
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	bd90      	pop	{r4, r7, pc}

0800a808 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a808:	b590      	push	{r4, r7, lr}
 800a80a:	b08b      	sub	sp, #44	@ 0x2c
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a818:	2300      	movs	r3, #0
 800a81a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10a      	bne.n	800a838 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a822:	2380      	movs	r3, #128	@ 0x80
 800a824:	617b      	str	r3, [r7, #20]
    return event;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	461c      	mov	r4, r3
 800a82a:	f107 0314 	add.w	r3, r7, #20
 800a82e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a832:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a836:	e054      	b.n	800a8e2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a838:	2300      	movs	r3, #0
 800a83a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a83c:	2300      	movs	r3, #0
 800a83e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a846:	d103      	bne.n	800a850 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a848:	f04f 33ff 	mov.w	r3, #4294967295
 800a84c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a84e:	e009      	b.n	800a864 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d006      	beq.n	800a864 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800a85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d101      	bne.n	800a864 <osMessageGet+0x5c>
      ticks = 1;
 800a860:	2301      	movs	r3, #1
 800a862:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a864:	f7ff ff2f 	bl	800a6c6 <inHandlerMode>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d01c      	beq.n	800a8a8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a86e:	f107 0220 	add.w	r2, r7, #32
 800a872:	f107 0314 	add.w	r3, r7, #20
 800a876:	3304      	adds	r3, #4
 800a878:	4619      	mov	r1, r3
 800a87a:	68b8      	ldr	r0, [r7, #8]
 800a87c:	f000 fb10 	bl	800aea0 <xQueueReceiveFromISR>
 800a880:	4603      	mov	r3, r0
 800a882:	2b01      	cmp	r3, #1
 800a884:	d102      	bne.n	800a88c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a886:	2310      	movs	r3, #16
 800a888:	617b      	str	r3, [r7, #20]
 800a88a:	e001      	b.n	800a890 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a890:	6a3b      	ldr	r3, [r7, #32]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d01d      	beq.n	800a8d2 <osMessageGet+0xca>
 800a896:	4b15      	ldr	r3, [pc, #84]	@ (800a8ec <osMessageGet+0xe4>)
 800a898:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a89c:	601a      	str	r2, [r3, #0]
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	f3bf 8f6f 	isb	sy
 800a8a6:	e014      	b.n	800a8d2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a8a8:	f107 0314 	add.w	r3, r7, #20
 800a8ac:	3304      	adds	r3, #4
 800a8ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	68b8      	ldr	r0, [r7, #8]
 800a8b4:	f000 fa12 	bl	800acdc <xQueueReceive>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d102      	bne.n	800a8c4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a8be:	2310      	movs	r3, #16
 800a8c0:	617b      	str	r3, [r7, #20]
 800a8c2:	e006      	b.n	800a8d2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d101      	bne.n	800a8ce <osMessageGet+0xc6>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	e000      	b.n	800a8d0 <osMessageGet+0xc8>
 800a8ce:	2340      	movs	r3, #64	@ 0x40
 800a8d0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	461c      	mov	r4, r3
 800a8d6:	f107 0314 	add.w	r3, r7, #20
 800a8da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a8de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	372c      	adds	r7, #44	@ 0x2c
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd90      	pop	{r4, r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	e000ed04 	.word	0xe000ed04

0800a8f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f103 0208 	add.w	r2, r3, #8
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f04f 32ff 	mov.w	r2, #4294967295
 800a908:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f103 0208 	add.w	r2, r3, #8
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f103 0208 	add.w	r2, r3, #8
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a924:	bf00      	nop
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a93e:	bf00      	nop
 800a940:	370c      	adds	r7, #12
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a94a:	b480      	push	{r7}
 800a94c:	b085      	sub	sp, #20
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	689a      	ldr	r2, [r3, #8]
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	683a      	ldr	r2, [r7, #0]
 800a96e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	683a      	ldr	r2, [r7, #0]
 800a974:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	1c5a      	adds	r2, r3, #1
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	601a      	str	r2, [r3, #0]
}
 800a986:	bf00      	nop
 800a988:	3714      	adds	r7, #20
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr

0800a992 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a992:	b480      	push	{r7}
 800a994:	b085      	sub	sp, #20
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
 800a99a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a8:	d103      	bne.n	800a9b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	60fb      	str	r3, [r7, #12]
 800a9b0:	e00c      	b.n	800a9cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	3308      	adds	r3, #8
 800a9b6:	60fb      	str	r3, [r7, #12]
 800a9b8:	e002      	b.n	800a9c0 <vListInsert+0x2e>
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	60fb      	str	r3, [r7, #12]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d2f6      	bcs.n	800a9ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	683a      	ldr	r2, [r7, #0]
 800a9da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	683a      	ldr	r2, [r7, #0]
 800a9e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	1c5a      	adds	r2, r3, #1
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	601a      	str	r2, [r3, #0]
}
 800a9f8:	bf00      	nop
 800a9fa:	3714      	adds	r7, #20
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr

0800aa04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	6892      	ldr	r2, [r2, #8]
 800aa1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	6852      	ldr	r2, [r2, #4]
 800aa24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d103      	bne.n	800aa38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	689a      	ldr	r2, [r3, #8]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	1e5a      	subs	r2, r3, #1
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10b      	bne.n	800aa84 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aa6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa70:	f383 8811 	msr	BASEPRI, r3
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aa7e:	bf00      	nop
 800aa80:	bf00      	nop
 800aa82:	e7fd      	b.n	800aa80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aa84:	f001 faa8 	bl	800bfd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa90:	68f9      	ldr	r1, [r7, #12]
 800aa92:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aa94:	fb01 f303 	mul.w	r3, r1, r3
 800aa98:	441a      	add	r2, r3
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aab4:	3b01      	subs	r3, #1
 800aab6:	68f9      	ldr	r1, [r7, #12]
 800aab8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aaba:	fb01 f303 	mul.w	r3, r1, r3
 800aabe:	441a      	add	r2, r3
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	22ff      	movs	r2, #255	@ 0xff
 800aac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	22ff      	movs	r2, #255	@ 0xff
 800aad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d114      	bne.n	800ab04 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	691b      	ldr	r3, [r3, #16]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d01a      	beq.n	800ab18 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	3310      	adds	r3, #16
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 ff02 	bl	800b8f0 <xTaskRemoveFromEventList>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d012      	beq.n	800ab18 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aaf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ab28 <xQueueGenericReset+0xd0>)
 800aaf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aaf8:	601a      	str	r2, [r3, #0]
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	f3bf 8f6f 	isb	sy
 800ab02:	e009      	b.n	800ab18 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	3310      	adds	r3, #16
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7ff fef1 	bl	800a8f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	3324      	adds	r3, #36	@ 0x24
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7ff feec 	bl	800a8f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab18:	f001 fa90 	bl	800c03c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab1c:	2301      	movs	r3, #1
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	e000ed04 	.word	0xe000ed04

0800ab2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b08e      	sub	sp, #56	@ 0x38
 800ab30:	af02      	add	r7, sp, #8
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
 800ab38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d10b      	bne.n	800ab58 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ab40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ab52:	bf00      	nop
 800ab54:	bf00      	nop
 800ab56:	e7fd      	b.n	800ab54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10b      	bne.n	800ab76 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ab5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab62:	f383 8811 	msr	BASEPRI, r3
 800ab66:	f3bf 8f6f 	isb	sy
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ab70:	bf00      	nop
 800ab72:	bf00      	nop
 800ab74:	e7fd      	b.n	800ab72 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <xQueueGenericCreateStatic+0x56>
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d001      	beq.n	800ab86 <xQueueGenericCreateStatic+0x5a>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e000      	b.n	800ab88 <xQueueGenericCreateStatic+0x5c>
 800ab86:	2300      	movs	r3, #0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10b      	bne.n	800aba4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ab8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab90:	f383 8811 	msr	BASEPRI, r3
 800ab94:	f3bf 8f6f 	isb	sy
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	623b      	str	r3, [r7, #32]
}
 800ab9e:	bf00      	nop
 800aba0:	bf00      	nop
 800aba2:	e7fd      	b.n	800aba0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d102      	bne.n	800abb0 <xQueueGenericCreateStatic+0x84>
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d101      	bne.n	800abb4 <xQueueGenericCreateStatic+0x88>
 800abb0:	2301      	movs	r3, #1
 800abb2:	e000      	b.n	800abb6 <xQueueGenericCreateStatic+0x8a>
 800abb4:	2300      	movs	r3, #0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d10b      	bne.n	800abd2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800abba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abbe:	f383 8811 	msr	BASEPRI, r3
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	f3bf 8f4f 	dsb	sy
 800abca:	61fb      	str	r3, [r7, #28]
}
 800abcc:	bf00      	nop
 800abce:	bf00      	nop
 800abd0:	e7fd      	b.n	800abce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800abd2:	2348      	movs	r3, #72	@ 0x48
 800abd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	2b48      	cmp	r3, #72	@ 0x48
 800abda:	d00b      	beq.n	800abf4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800abdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe0:	f383 8811 	msr	BASEPRI, r3
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	61bb      	str	r3, [r7, #24]
}
 800abee:	bf00      	nop
 800abf0:	bf00      	nop
 800abf2:	e7fd      	b.n	800abf0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800abf4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800abfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00d      	beq.n	800ac1c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac02:	2201      	movs	r2, #1
 800ac04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac08:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ac0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	4613      	mov	r3, r2
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	68b9      	ldr	r1, [r7, #8]
 800ac16:	68f8      	ldr	r0, [r7, #12]
 800ac18:	f000 f840 	bl	800ac9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3730      	adds	r7, #48	@ 0x30
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b08a      	sub	sp, #40	@ 0x28
 800ac2a:	af02      	add	r7, sp, #8
 800ac2c:	60f8      	str	r0, [r7, #12]
 800ac2e:	60b9      	str	r1, [r7, #8]
 800ac30:	4613      	mov	r3, r2
 800ac32:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10b      	bne.n	800ac52 <xQueueGenericCreate+0x2c>
	__asm volatile
 800ac3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac3e:	f383 8811 	msr	BASEPRI, r3
 800ac42:	f3bf 8f6f 	isb	sy
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	613b      	str	r3, [r7, #16]
}
 800ac4c:	bf00      	nop
 800ac4e:	bf00      	nop
 800ac50:	e7fd      	b.n	800ac4e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	68ba      	ldr	r2, [r7, #8]
 800ac56:	fb02 f303 	mul.w	r3, r2, r3
 800ac5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	3348      	adds	r3, #72	@ 0x48
 800ac60:	4618      	mov	r0, r3
 800ac62:	f001 fadb 	bl	800c21c <pvPortMalloc>
 800ac66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d011      	beq.n	800ac92 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	3348      	adds	r3, #72	@ 0x48
 800ac76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac80:	79fa      	ldrb	r2, [r7, #7]
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	9300      	str	r3, [sp, #0]
 800ac86:	4613      	mov	r3, r2
 800ac88:	697a      	ldr	r2, [r7, #20]
 800ac8a:	68b9      	ldr	r1, [r7, #8]
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f000 f805 	bl	800ac9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac92:	69bb      	ldr	r3, [r7, #24]
	}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3720      	adds	r7, #32
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d103      	bne.n	800acb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	69ba      	ldr	r2, [r7, #24]
 800acb4:	601a      	str	r2, [r3, #0]
 800acb6:	e002      	b.n	800acbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	68ba      	ldr	r2, [r7, #8]
 800acc8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800acca:	2101      	movs	r1, #1
 800accc:	69b8      	ldr	r0, [r7, #24]
 800acce:	f7ff fec3 	bl	800aa58 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800acd2:	bf00      	nop
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
	...

0800acdc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b08c      	sub	sp, #48	@ 0x30
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ace8:	2300      	movs	r3, #0
 800acea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800acf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d10b      	bne.n	800ad0e <xQueueReceive+0x32>
	__asm volatile
 800acf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acfa:	f383 8811 	msr	BASEPRI, r3
 800acfe:	f3bf 8f6f 	isb	sy
 800ad02:	f3bf 8f4f 	dsb	sy
 800ad06:	623b      	str	r3, [r7, #32]
}
 800ad08:	bf00      	nop
 800ad0a:	bf00      	nop
 800ad0c:	e7fd      	b.n	800ad0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d103      	bne.n	800ad1c <xQueueReceive+0x40>
 800ad14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d101      	bne.n	800ad20 <xQueueReceive+0x44>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e000      	b.n	800ad22 <xQueueReceive+0x46>
 800ad20:	2300      	movs	r3, #0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d10b      	bne.n	800ad3e <xQueueReceive+0x62>
	__asm volatile
 800ad26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad2a:	f383 8811 	msr	BASEPRI, r3
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f3bf 8f4f 	dsb	sy
 800ad36:	61fb      	str	r3, [r7, #28]
}
 800ad38:	bf00      	nop
 800ad3a:	bf00      	nop
 800ad3c:	e7fd      	b.n	800ad3a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad3e:	f000 ff97 	bl	800bc70 <xTaskGetSchedulerState>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d102      	bne.n	800ad4e <xQueueReceive+0x72>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d101      	bne.n	800ad52 <xQueueReceive+0x76>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e000      	b.n	800ad54 <xQueueReceive+0x78>
 800ad52:	2300      	movs	r3, #0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10b      	bne.n	800ad70 <xQueueReceive+0x94>
	__asm volatile
 800ad58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad5c:	f383 8811 	msr	BASEPRI, r3
 800ad60:	f3bf 8f6f 	isb	sy
 800ad64:	f3bf 8f4f 	dsb	sy
 800ad68:	61bb      	str	r3, [r7, #24]
}
 800ad6a:	bf00      	nop
 800ad6c:	bf00      	nop
 800ad6e:	e7fd      	b.n	800ad6c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad70:	f001 f932 	bl	800bfd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad78:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d01f      	beq.n	800adc0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad80:	68b9      	ldr	r1, [r7, #8]
 800ad82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad84:	f000 f90e 	bl	800afa4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad8a:	1e5a      	subs	r2, r3, #1
 800ad8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad8e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad92:	691b      	ldr	r3, [r3, #16]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00f      	beq.n	800adb8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad9a:	3310      	adds	r3, #16
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f000 fda7 	bl	800b8f0 <xTaskRemoveFromEventList>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d007      	beq.n	800adb8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ada8:	4b3c      	ldr	r3, [pc, #240]	@ (800ae9c <xQueueReceive+0x1c0>)
 800adaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adae:	601a      	str	r2, [r3, #0]
 800adb0:	f3bf 8f4f 	dsb	sy
 800adb4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800adb8:	f001 f940 	bl	800c03c <vPortExitCritical>
				return pdPASS;
 800adbc:	2301      	movs	r3, #1
 800adbe:	e069      	b.n	800ae94 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d103      	bne.n	800adce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800adc6:	f001 f939 	bl	800c03c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800adca:	2300      	movs	r3, #0
 800adcc:	e062      	b.n	800ae94 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800adce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add0:	2b00      	cmp	r3, #0
 800add2:	d106      	bne.n	800ade2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800add4:	f107 0310 	add.w	r3, r7, #16
 800add8:	4618      	mov	r0, r3
 800adda:	f000 fded 	bl	800b9b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800adde:	2301      	movs	r3, #1
 800ade0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ade2:	f001 f92b 	bl	800c03c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ade6:	f000 fb9b 	bl	800b520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800adea:	f001 f8f5 	bl	800bfd8 <vPortEnterCritical>
 800adee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800adf4:	b25b      	sxtb	r3, r3
 800adf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adfa:	d103      	bne.n	800ae04 <xQueueReceive+0x128>
 800adfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae0a:	b25b      	sxtb	r3, r3
 800ae0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae10:	d103      	bne.n	800ae1a <xQueueReceive+0x13e>
 800ae12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae14:	2200      	movs	r2, #0
 800ae16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae1a:	f001 f90f 	bl	800c03c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae1e:	1d3a      	adds	r2, r7, #4
 800ae20:	f107 0310 	add.w	r3, r7, #16
 800ae24:	4611      	mov	r1, r2
 800ae26:	4618      	mov	r0, r3
 800ae28:	f000 fddc 	bl	800b9e4 <xTaskCheckForTimeOut>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d123      	bne.n	800ae7a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae34:	f000 f92e 	bl	800b094 <prvIsQueueEmpty>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d017      	beq.n	800ae6e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae40:	3324      	adds	r3, #36	@ 0x24
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	4611      	mov	r1, r2
 800ae46:	4618      	mov	r0, r3
 800ae48:	f000 fd2c 	bl	800b8a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae4e:	f000 f8cf 	bl	800aff0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae52:	f000 fb73 	bl	800b53c <xTaskResumeAll>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d189      	bne.n	800ad70 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ae5c:	4b0f      	ldr	r3, [pc, #60]	@ (800ae9c <xQueueReceive+0x1c0>)
 800ae5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae62:	601a      	str	r2, [r3, #0]
 800ae64:	f3bf 8f4f 	dsb	sy
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	e780      	b.n	800ad70 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae70:	f000 f8be 	bl	800aff0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae74:	f000 fb62 	bl	800b53c <xTaskResumeAll>
 800ae78:	e77a      	b.n	800ad70 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae7c:	f000 f8b8 	bl	800aff0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae80:	f000 fb5c 	bl	800b53c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae86:	f000 f905 	bl	800b094 <prvIsQueueEmpty>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f43f af6f 	beq.w	800ad70 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3730      	adds	r7, #48	@ 0x30
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	e000ed04 	.word	0xe000ed04

0800aea0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b08e      	sub	sp, #56	@ 0x38
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d10b      	bne.n	800aece <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800aeb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeba:	f383 8811 	msr	BASEPRI, r3
 800aebe:	f3bf 8f6f 	isb	sy
 800aec2:	f3bf 8f4f 	dsb	sy
 800aec6:	623b      	str	r3, [r7, #32]
}
 800aec8:	bf00      	nop
 800aeca:	bf00      	nop
 800aecc:	e7fd      	b.n	800aeca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d103      	bne.n	800aedc <xQueueReceiveFromISR+0x3c>
 800aed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d101      	bne.n	800aee0 <xQueueReceiveFromISR+0x40>
 800aedc:	2301      	movs	r3, #1
 800aede:	e000      	b.n	800aee2 <xQueueReceiveFromISR+0x42>
 800aee0:	2300      	movs	r3, #0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10b      	bne.n	800aefe <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800aee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeea:	f383 8811 	msr	BASEPRI, r3
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	f3bf 8f4f 	dsb	sy
 800aef6:	61fb      	str	r3, [r7, #28]
}
 800aef8:	bf00      	nop
 800aefa:	bf00      	nop
 800aefc:	e7fd      	b.n	800aefa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aefe:	f001 f94b 	bl	800c198 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800af02:	f3ef 8211 	mrs	r2, BASEPRI
 800af06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af0a:	f383 8811 	msr	BASEPRI, r3
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f3bf 8f4f 	dsb	sy
 800af16:	61ba      	str	r2, [r7, #24]
 800af18:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800af1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af22:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af26:	2b00      	cmp	r3, #0
 800af28:	d02f      	beq.n	800af8a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800af2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af34:	68b9      	ldr	r1, [r7, #8]
 800af36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af38:	f000 f834 	bl	800afa4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af3e:	1e5a      	subs	r2, r3, #1
 800af40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af42:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800af44:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800af48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af4c:	d112      	bne.n	800af74 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d016      	beq.n	800af84 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af58:	3310      	adds	r3, #16
 800af5a:	4618      	mov	r0, r3
 800af5c:	f000 fcc8 	bl	800b8f0 <xTaskRemoveFromEventList>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00e      	beq.n	800af84 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00b      	beq.n	800af84 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2201      	movs	r2, #1
 800af70:	601a      	str	r2, [r3, #0]
 800af72:	e007      	b.n	800af84 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800af74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af78:	3301      	adds	r3, #1
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	b25a      	sxtb	r2, r3
 800af7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800af84:	2301      	movs	r3, #1
 800af86:	637b      	str	r3, [r7, #52]	@ 0x34
 800af88:	e001      	b.n	800af8e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800af8a:	2300      	movs	r3, #0
 800af8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800af8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af90:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800af98:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3738      	adds	r7, #56	@ 0x38
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d018      	beq.n	800afe8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	68da      	ldr	r2, [r3, #12]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afbe:	441a      	add	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	68da      	ldr	r2, [r3, #12]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d303      	bcc.n	800afd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	68d9      	ldr	r1, [r3, #12]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afe0:	461a      	mov	r2, r3
 800afe2:	6838      	ldr	r0, [r7, #0]
 800afe4:	f002 fd11 	bl	800da0a <memcpy>
	}
}
 800afe8:	bf00      	nop
 800afea:	3708      	adds	r7, #8
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aff8:	f000 ffee 	bl	800bfd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b002:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b004:	e011      	b.n	800b02a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d012      	beq.n	800b034 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	3324      	adds	r3, #36	@ 0x24
 800b012:	4618      	mov	r0, r3
 800b014:	f000 fc6c 	bl	800b8f0 <xTaskRemoveFromEventList>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d001      	beq.n	800b022 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b01e:	f000 fd45 	bl	800baac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b022:	7bfb      	ldrb	r3, [r7, #15]
 800b024:	3b01      	subs	r3, #1
 800b026:	b2db      	uxtb	r3, r3
 800b028:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b02a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	dce9      	bgt.n	800b006 <prvUnlockQueue+0x16>
 800b032:	e000      	b.n	800b036 <prvUnlockQueue+0x46>
					break;
 800b034:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	22ff      	movs	r2, #255	@ 0xff
 800b03a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b03e:	f000 fffd 	bl	800c03c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b042:	f000 ffc9 	bl	800bfd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b04c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b04e:	e011      	b.n	800b074 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d012      	beq.n	800b07e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	3310      	adds	r3, #16
 800b05c:	4618      	mov	r0, r3
 800b05e:	f000 fc47 	bl	800b8f0 <xTaskRemoveFromEventList>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d001      	beq.n	800b06c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b068:	f000 fd20 	bl	800baac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b06c:	7bbb      	ldrb	r3, [r7, #14]
 800b06e:	3b01      	subs	r3, #1
 800b070:	b2db      	uxtb	r3, r3
 800b072:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b074:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	dce9      	bgt.n	800b050 <prvUnlockQueue+0x60>
 800b07c:	e000      	b.n	800b080 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b07e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	22ff      	movs	r2, #255	@ 0xff
 800b084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b088:	f000 ffd8 	bl	800c03c <vPortExitCritical>
}
 800b08c:	bf00      	nop
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b09c:	f000 ff9c 	bl	800bfd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d102      	bne.n	800b0ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	60fb      	str	r3, [r7, #12]
 800b0ac:	e001      	b.n	800b0b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0b2:	f000 ffc3 	bl	800c03c <vPortExitCritical>

	return xReturn;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3710      	adds	r7, #16
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b08e      	sub	sp, #56	@ 0x38
 800b0c4:	af04      	add	r7, sp, #16
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
 800b0cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b0ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d10b      	bne.n	800b0ec <xTaskCreateStatic+0x2c>
	__asm volatile
 800b0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d8:	f383 8811 	msr	BASEPRI, r3
 800b0dc:	f3bf 8f6f 	isb	sy
 800b0e0:	f3bf 8f4f 	dsb	sy
 800b0e4:	623b      	str	r3, [r7, #32]
}
 800b0e6:	bf00      	nop
 800b0e8:	bf00      	nop
 800b0ea:	e7fd      	b.n	800b0e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d10b      	bne.n	800b10a <xTaskCreateStatic+0x4a>
	__asm volatile
 800b0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0f6:	f383 8811 	msr	BASEPRI, r3
 800b0fa:	f3bf 8f6f 	isb	sy
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	61fb      	str	r3, [r7, #28]
}
 800b104:	bf00      	nop
 800b106:	bf00      	nop
 800b108:	e7fd      	b.n	800b106 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b10a:	2354      	movs	r3, #84	@ 0x54
 800b10c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	2b54      	cmp	r3, #84	@ 0x54
 800b112:	d00b      	beq.n	800b12c <xTaskCreateStatic+0x6c>
	__asm volatile
 800b114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b118:	f383 8811 	msr	BASEPRI, r3
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	61bb      	str	r3, [r7, #24]
}
 800b126:	bf00      	nop
 800b128:	bf00      	nop
 800b12a:	e7fd      	b.n	800b128 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b12c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b130:	2b00      	cmp	r3, #0
 800b132:	d01e      	beq.n	800b172 <xTaskCreateStatic+0xb2>
 800b134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b136:	2b00      	cmp	r3, #0
 800b138:	d01b      	beq.n	800b172 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b13a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b13c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b140:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b142:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b146:	2202      	movs	r2, #2
 800b148:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b14c:	2300      	movs	r3, #0
 800b14e:	9303      	str	r3, [sp, #12]
 800b150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b152:	9302      	str	r3, [sp, #8]
 800b154:	f107 0314 	add.w	r3, r7, #20
 800b158:	9301      	str	r3, [sp, #4]
 800b15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b15c:	9300      	str	r3, [sp, #0]
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	68b9      	ldr	r1, [r7, #8]
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f000 f850 	bl	800b20a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b16a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b16c:	f000 f8d6 	bl	800b31c <prvAddNewTaskToReadyList>
 800b170:	e001      	b.n	800b176 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b172:	2300      	movs	r3, #0
 800b174:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b176:	697b      	ldr	r3, [r7, #20]
	}
 800b178:	4618      	mov	r0, r3
 800b17a:	3728      	adds	r7, #40	@ 0x28
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b180:	b580      	push	{r7, lr}
 800b182:	b08c      	sub	sp, #48	@ 0x30
 800b184:	af04      	add	r7, sp, #16
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	603b      	str	r3, [r7, #0]
 800b18c:	4613      	mov	r3, r2
 800b18e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b190:	88fb      	ldrh	r3, [r7, #6]
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4618      	mov	r0, r3
 800b196:	f001 f841 	bl	800c21c <pvPortMalloc>
 800b19a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d00e      	beq.n	800b1c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b1a2:	2054      	movs	r0, #84	@ 0x54
 800b1a4:	f001 f83a 	bl	800c21c <pvPortMalloc>
 800b1a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d003      	beq.n	800b1b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	697a      	ldr	r2, [r7, #20]
 800b1b4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b1b6:	e005      	b.n	800b1c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b1b8:	6978      	ldr	r0, [r7, #20]
 800b1ba:	f001 f8fd 	bl	800c3b8 <vPortFree>
 800b1be:	e001      	b.n	800b1c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d017      	beq.n	800b1fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b1d2:	88fa      	ldrh	r2, [r7, #6]
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	9303      	str	r3, [sp, #12]
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	9302      	str	r3, [sp, #8]
 800b1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1de:	9301      	str	r3, [sp, #4]
 800b1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	68b9      	ldr	r1, [r7, #8]
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	f000 f80e 	bl	800b20a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1ee:	69f8      	ldr	r0, [r7, #28]
 800b1f0:	f000 f894 	bl	800b31c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	61bb      	str	r3, [r7, #24]
 800b1f8:	e002      	b.n	800b200 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b1fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b1fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b200:	69bb      	ldr	r3, [r7, #24]
	}
 800b202:	4618      	mov	r0, r3
 800b204:	3720      	adds	r7, #32
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b088      	sub	sp, #32
 800b20e:	af00      	add	r7, sp, #0
 800b210:	60f8      	str	r0, [r7, #12]
 800b212:	60b9      	str	r1, [r7, #8]
 800b214:	607a      	str	r2, [r7, #4]
 800b216:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b21a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b222:	3b01      	subs	r3, #1
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	4413      	add	r3, r2
 800b228:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	f023 0307 	bic.w	r3, r3, #7
 800b230:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	f003 0307 	and.w	r3, r3, #7
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00b      	beq.n	800b254 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800b23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b240:	f383 8811 	msr	BASEPRI, r3
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	f3bf 8f4f 	dsb	sy
 800b24c:	617b      	str	r3, [r7, #20]
}
 800b24e:	bf00      	nop
 800b250:	bf00      	nop
 800b252:	e7fd      	b.n	800b250 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d01f      	beq.n	800b29a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b25a:	2300      	movs	r3, #0
 800b25c:	61fb      	str	r3, [r7, #28]
 800b25e:	e012      	b.n	800b286 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b260:	68ba      	ldr	r2, [r7, #8]
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	4413      	add	r3, r2
 800b266:	7819      	ldrb	r1, [r3, #0]
 800b268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	4413      	add	r3, r2
 800b26e:	3334      	adds	r3, #52	@ 0x34
 800b270:	460a      	mov	r2, r1
 800b272:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	69fb      	ldr	r3, [r7, #28]
 800b278:	4413      	add	r3, r2
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d006      	beq.n	800b28e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	3301      	adds	r3, #1
 800b284:	61fb      	str	r3, [r7, #28]
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	2b0f      	cmp	r3, #15
 800b28a:	d9e9      	bls.n	800b260 <prvInitialiseNewTask+0x56>
 800b28c:	e000      	b.n	800b290 <prvInitialiseNewTask+0x86>
			{
				break;
 800b28e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b292:	2200      	movs	r2, #0
 800b294:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b298:	e003      	b.n	800b2a2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29c:	2200      	movs	r2, #0
 800b29e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a4:	2b06      	cmp	r3, #6
 800b2a6:	d901      	bls.n	800b2ac <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b2a8:	2306      	movs	r3, #6
 800b2aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2b6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c0:	3304      	adds	r3, #4
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7ff fb34 	bl	800a930 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ca:	3318      	adds	r3, #24
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7ff fb2f 	bl	800a930 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2da:	f1c3 0207 	rsb	r2, r3, #7
 800b2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2e6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	68f9      	ldr	r1, [r7, #12]
 800b2fa:	69b8      	ldr	r0, [r7, #24]
 800b2fc:	f000 fd3c 	bl	800bd78 <pxPortInitialiseStack>
 800b300:	4602      	mov	r2, r0
 800b302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b304:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d002      	beq.n	800b312 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b30e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b310:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b312:	bf00      	nop
 800b314:	3720      	adds	r7, #32
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
	...

0800b31c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b324:	f000 fe58 	bl	800bfd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b328:	4b2a      	ldr	r3, [pc, #168]	@ (800b3d4 <prvAddNewTaskToReadyList+0xb8>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	3301      	adds	r3, #1
 800b32e:	4a29      	ldr	r2, [pc, #164]	@ (800b3d4 <prvAddNewTaskToReadyList+0xb8>)
 800b330:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b332:	4b29      	ldr	r3, [pc, #164]	@ (800b3d8 <prvAddNewTaskToReadyList+0xbc>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d109      	bne.n	800b34e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b33a:	4a27      	ldr	r2, [pc, #156]	@ (800b3d8 <prvAddNewTaskToReadyList+0xbc>)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b340:	4b24      	ldr	r3, [pc, #144]	@ (800b3d4 <prvAddNewTaskToReadyList+0xb8>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d110      	bne.n	800b36a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b348:	f000 fbd4 	bl	800baf4 <prvInitialiseTaskLists>
 800b34c:	e00d      	b.n	800b36a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b34e:	4b23      	ldr	r3, [pc, #140]	@ (800b3dc <prvAddNewTaskToReadyList+0xc0>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d109      	bne.n	800b36a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b356:	4b20      	ldr	r3, [pc, #128]	@ (800b3d8 <prvAddNewTaskToReadyList+0xbc>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b360:	429a      	cmp	r2, r3
 800b362:	d802      	bhi.n	800b36a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b364:	4a1c      	ldr	r2, [pc, #112]	@ (800b3d8 <prvAddNewTaskToReadyList+0xbc>)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b36a:	4b1d      	ldr	r3, [pc, #116]	@ (800b3e0 <prvAddNewTaskToReadyList+0xc4>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	3301      	adds	r3, #1
 800b370:	4a1b      	ldr	r2, [pc, #108]	@ (800b3e0 <prvAddNewTaskToReadyList+0xc4>)
 800b372:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b378:	2201      	movs	r2, #1
 800b37a:	409a      	lsls	r2, r3
 800b37c:	4b19      	ldr	r3, [pc, #100]	@ (800b3e4 <prvAddNewTaskToReadyList+0xc8>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4313      	orrs	r3, r2
 800b382:	4a18      	ldr	r2, [pc, #96]	@ (800b3e4 <prvAddNewTaskToReadyList+0xc8>)
 800b384:	6013      	str	r3, [r2, #0]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b38a:	4613      	mov	r3, r2
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	4413      	add	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4a15      	ldr	r2, [pc, #84]	@ (800b3e8 <prvAddNewTaskToReadyList+0xcc>)
 800b394:	441a      	add	r2, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	3304      	adds	r3, #4
 800b39a:	4619      	mov	r1, r3
 800b39c:	4610      	mov	r0, r2
 800b39e:	f7ff fad4 	bl	800a94a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b3a2:	f000 fe4b 	bl	800c03c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b3a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b3dc <prvAddNewTaskToReadyList+0xc0>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00e      	beq.n	800b3cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b3ae:	4b0a      	ldr	r3, [pc, #40]	@ (800b3d8 <prvAddNewTaskToReadyList+0xbc>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d207      	bcs.n	800b3cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b3bc:	4b0b      	ldr	r3, [pc, #44]	@ (800b3ec <prvAddNewTaskToReadyList+0xd0>)
 800b3be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	f3bf 8f4f 	dsb	sy
 800b3c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3cc:	bf00      	nop
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	200022e8 	.word	0x200022e8
 800b3d8:	200021e8 	.word	0x200021e8
 800b3dc:	200022f4 	.word	0x200022f4
 800b3e0:	20002304 	.word	0x20002304
 800b3e4:	200022f0 	.word	0x200022f0
 800b3e8:	200021ec 	.word	0x200021ec
 800b3ec:	e000ed04 	.word	0xe000ed04

0800b3f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d018      	beq.n	800b434 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b402:	4b14      	ldr	r3, [pc, #80]	@ (800b454 <vTaskDelay+0x64>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d00b      	beq.n	800b422 <vTaskDelay+0x32>
	__asm volatile
 800b40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b40e:	f383 8811 	msr	BASEPRI, r3
 800b412:	f3bf 8f6f 	isb	sy
 800b416:	f3bf 8f4f 	dsb	sy
 800b41a:	60bb      	str	r3, [r7, #8]
}
 800b41c:	bf00      	nop
 800b41e:	bf00      	nop
 800b420:	e7fd      	b.n	800b41e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b422:	f000 f87d 	bl	800b520 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b426:	2100      	movs	r1, #0
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 fc3f 	bl	800bcac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b42e:	f000 f885 	bl	800b53c <xTaskResumeAll>
 800b432:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d107      	bne.n	800b44a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b43a:	4b07      	ldr	r3, [pc, #28]	@ (800b458 <vTaskDelay+0x68>)
 800b43c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b440:	601a      	str	r2, [r3, #0]
 800b442:	f3bf 8f4f 	dsb	sy
 800b446:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b44a:	bf00      	nop
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	20002310 	.word	0x20002310
 800b458:	e000ed04 	.word	0xe000ed04

0800b45c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b08a      	sub	sp, #40	@ 0x28
 800b460:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b462:	2300      	movs	r3, #0
 800b464:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b466:	2300      	movs	r3, #0
 800b468:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b46a:	463a      	mov	r2, r7
 800b46c:	1d39      	adds	r1, r7, #4
 800b46e:	f107 0308 	add.w	r3, r7, #8
 800b472:	4618      	mov	r0, r3
 800b474:	f7f6 fe06 	bl	8002084 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b478:	6839      	ldr	r1, [r7, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	68ba      	ldr	r2, [r7, #8]
 800b47e:	9202      	str	r2, [sp, #8]
 800b480:	9301      	str	r3, [sp, #4]
 800b482:	2300      	movs	r3, #0
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	2300      	movs	r3, #0
 800b488:	460a      	mov	r2, r1
 800b48a:	491f      	ldr	r1, [pc, #124]	@ (800b508 <vTaskStartScheduler+0xac>)
 800b48c:	481f      	ldr	r0, [pc, #124]	@ (800b50c <vTaskStartScheduler+0xb0>)
 800b48e:	f7ff fe17 	bl	800b0c0 <xTaskCreateStatic>
 800b492:	4603      	mov	r3, r0
 800b494:	4a1e      	ldr	r2, [pc, #120]	@ (800b510 <vTaskStartScheduler+0xb4>)
 800b496:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b498:	4b1d      	ldr	r3, [pc, #116]	@ (800b510 <vTaskStartScheduler+0xb4>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d002      	beq.n	800b4a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	617b      	str	r3, [r7, #20]
 800b4a4:	e001      	b.n	800b4aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d116      	bne.n	800b4de <vTaskStartScheduler+0x82>
	__asm volatile
 800b4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b4:	f383 8811 	msr	BASEPRI, r3
 800b4b8:	f3bf 8f6f 	isb	sy
 800b4bc:	f3bf 8f4f 	dsb	sy
 800b4c0:	613b      	str	r3, [r7, #16]
}
 800b4c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b4c4:	4b13      	ldr	r3, [pc, #76]	@ (800b514 <vTaskStartScheduler+0xb8>)
 800b4c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b4cc:	4b12      	ldr	r3, [pc, #72]	@ (800b518 <vTaskStartScheduler+0xbc>)
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b4d2:	4b12      	ldr	r3, [pc, #72]	@ (800b51c <vTaskStartScheduler+0xc0>)
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b4d8:	f000 fcda 	bl	800be90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b4dc:	e00f      	b.n	800b4fe <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4e4:	d10b      	bne.n	800b4fe <vTaskStartScheduler+0xa2>
	__asm volatile
 800b4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	60fb      	str	r3, [r7, #12]
}
 800b4f8:	bf00      	nop
 800b4fa:	bf00      	nop
 800b4fc:	e7fd      	b.n	800b4fa <vTaskStartScheduler+0x9e>
}
 800b4fe:	bf00      	nop
 800b500:	3718      	adds	r7, #24
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	0800fabc 	.word	0x0800fabc
 800b50c:	0800bac5 	.word	0x0800bac5
 800b510:	2000230c 	.word	0x2000230c
 800b514:	20002308 	.word	0x20002308
 800b518:	200022f4 	.word	0x200022f4
 800b51c:	200022ec 	.word	0x200022ec

0800b520 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b520:	b480      	push	{r7}
 800b522:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b524:	4b04      	ldr	r3, [pc, #16]	@ (800b538 <vTaskSuspendAll+0x18>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	3301      	adds	r3, #1
 800b52a:	4a03      	ldr	r2, [pc, #12]	@ (800b538 <vTaskSuspendAll+0x18>)
 800b52c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b52e:	bf00      	nop
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr
 800b538:	20002310 	.word	0x20002310

0800b53c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b542:	2300      	movs	r3, #0
 800b544:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b546:	2300      	movs	r3, #0
 800b548:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b54a:	4b42      	ldr	r3, [pc, #264]	@ (800b654 <xTaskResumeAll+0x118>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d10b      	bne.n	800b56a <xTaskResumeAll+0x2e>
	__asm volatile
 800b552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b556:	f383 8811 	msr	BASEPRI, r3
 800b55a:	f3bf 8f6f 	isb	sy
 800b55e:	f3bf 8f4f 	dsb	sy
 800b562:	603b      	str	r3, [r7, #0]
}
 800b564:	bf00      	nop
 800b566:	bf00      	nop
 800b568:	e7fd      	b.n	800b566 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b56a:	f000 fd35 	bl	800bfd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b56e:	4b39      	ldr	r3, [pc, #228]	@ (800b654 <xTaskResumeAll+0x118>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	3b01      	subs	r3, #1
 800b574:	4a37      	ldr	r2, [pc, #220]	@ (800b654 <xTaskResumeAll+0x118>)
 800b576:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b578:	4b36      	ldr	r3, [pc, #216]	@ (800b654 <xTaskResumeAll+0x118>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d161      	bne.n	800b644 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b580:	4b35      	ldr	r3, [pc, #212]	@ (800b658 <xTaskResumeAll+0x11c>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d05d      	beq.n	800b644 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b588:	e02e      	b.n	800b5e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b58a:	4b34      	ldr	r3, [pc, #208]	@ (800b65c <xTaskResumeAll+0x120>)
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	3318      	adds	r3, #24
 800b596:	4618      	mov	r0, r3
 800b598:	f7ff fa34 	bl	800aa04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	3304      	adds	r3, #4
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7ff fa2f 	bl	800aa04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	409a      	lsls	r2, r3
 800b5ae:	4b2c      	ldr	r3, [pc, #176]	@ (800b660 <xTaskResumeAll+0x124>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	4a2a      	ldr	r2, [pc, #168]	@ (800b660 <xTaskResumeAll+0x124>)
 800b5b6:	6013      	str	r3, [r2, #0]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5bc:	4613      	mov	r3, r2
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4413      	add	r3, r2
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	4a27      	ldr	r2, [pc, #156]	@ (800b664 <xTaskResumeAll+0x128>)
 800b5c6:	441a      	add	r2, r3
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	3304      	adds	r3, #4
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	4610      	mov	r0, r2
 800b5d0:	f7ff f9bb 	bl	800a94a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5d8:	4b23      	ldr	r3, [pc, #140]	@ (800b668 <xTaskResumeAll+0x12c>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d302      	bcc.n	800b5e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b5e2:	4b22      	ldr	r3, [pc, #136]	@ (800b66c <xTaskResumeAll+0x130>)
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5e8:	4b1c      	ldr	r3, [pc, #112]	@ (800b65c <xTaskResumeAll+0x120>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1cc      	bne.n	800b58a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d001      	beq.n	800b5fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b5f6:	f000 fb1b 	bl	800bc30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b5fa:	4b1d      	ldr	r3, [pc, #116]	@ (800b670 <xTaskResumeAll+0x134>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d010      	beq.n	800b628 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b606:	f000 f837 	bl	800b678 <xTaskIncrementTick>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d002      	beq.n	800b616 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b610:	4b16      	ldr	r3, [pc, #88]	@ (800b66c <xTaskResumeAll+0x130>)
 800b612:	2201      	movs	r2, #1
 800b614:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	3b01      	subs	r3, #1
 800b61a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d1f1      	bne.n	800b606 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b622:	4b13      	ldr	r3, [pc, #76]	@ (800b670 <xTaskResumeAll+0x134>)
 800b624:	2200      	movs	r2, #0
 800b626:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b628:	4b10      	ldr	r3, [pc, #64]	@ (800b66c <xTaskResumeAll+0x130>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d009      	beq.n	800b644 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b630:	2301      	movs	r3, #1
 800b632:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b634:	4b0f      	ldr	r3, [pc, #60]	@ (800b674 <xTaskResumeAll+0x138>)
 800b636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b63a:	601a      	str	r2, [r3, #0]
 800b63c:	f3bf 8f4f 	dsb	sy
 800b640:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b644:	f000 fcfa 	bl	800c03c <vPortExitCritical>

	return xAlreadyYielded;
 800b648:	68bb      	ldr	r3, [r7, #8]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	20002310 	.word	0x20002310
 800b658:	200022e8 	.word	0x200022e8
 800b65c:	200022a8 	.word	0x200022a8
 800b660:	200022f0 	.word	0x200022f0
 800b664:	200021ec 	.word	0x200021ec
 800b668:	200021e8 	.word	0x200021e8
 800b66c:	200022fc 	.word	0x200022fc
 800b670:	200022f8 	.word	0x200022f8
 800b674:	e000ed04 	.word	0xe000ed04

0800b678 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b086      	sub	sp, #24
 800b67c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b67e:	2300      	movs	r3, #0
 800b680:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b682:	4b4f      	ldr	r3, [pc, #316]	@ (800b7c0 <xTaskIncrementTick+0x148>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	f040 808f 	bne.w	800b7aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b68c:	4b4d      	ldr	r3, [pc, #308]	@ (800b7c4 <xTaskIncrementTick+0x14c>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	3301      	adds	r3, #1
 800b692:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b694:	4a4b      	ldr	r2, [pc, #300]	@ (800b7c4 <xTaskIncrementTick+0x14c>)
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d121      	bne.n	800b6e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b6a0:	4b49      	ldr	r3, [pc, #292]	@ (800b7c8 <xTaskIncrementTick+0x150>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00b      	beq.n	800b6c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ae:	f383 8811 	msr	BASEPRI, r3
 800b6b2:	f3bf 8f6f 	isb	sy
 800b6b6:	f3bf 8f4f 	dsb	sy
 800b6ba:	603b      	str	r3, [r7, #0]
}
 800b6bc:	bf00      	nop
 800b6be:	bf00      	nop
 800b6c0:	e7fd      	b.n	800b6be <xTaskIncrementTick+0x46>
 800b6c2:	4b41      	ldr	r3, [pc, #260]	@ (800b7c8 <xTaskIncrementTick+0x150>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	60fb      	str	r3, [r7, #12]
 800b6c8:	4b40      	ldr	r3, [pc, #256]	@ (800b7cc <xTaskIncrementTick+0x154>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a3e      	ldr	r2, [pc, #248]	@ (800b7c8 <xTaskIncrementTick+0x150>)
 800b6ce:	6013      	str	r3, [r2, #0]
 800b6d0:	4a3e      	ldr	r2, [pc, #248]	@ (800b7cc <xTaskIncrementTick+0x154>)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6013      	str	r3, [r2, #0]
 800b6d6:	4b3e      	ldr	r3, [pc, #248]	@ (800b7d0 <xTaskIncrementTick+0x158>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	4a3c      	ldr	r2, [pc, #240]	@ (800b7d0 <xTaskIncrementTick+0x158>)
 800b6de:	6013      	str	r3, [r2, #0]
 800b6e0:	f000 faa6 	bl	800bc30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b6e4:	4b3b      	ldr	r3, [pc, #236]	@ (800b7d4 <xTaskIncrementTick+0x15c>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	693a      	ldr	r2, [r7, #16]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d348      	bcc.n	800b780 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6ee:	4b36      	ldr	r3, [pc, #216]	@ (800b7c8 <xTaskIncrementTick+0x150>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d104      	bne.n	800b702 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6f8:	4b36      	ldr	r3, [pc, #216]	@ (800b7d4 <xTaskIncrementTick+0x15c>)
 800b6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b6fe:	601a      	str	r2, [r3, #0]
					break;
 800b700:	e03e      	b.n	800b780 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b702:	4b31      	ldr	r3, [pc, #196]	@ (800b7c8 <xTaskIncrementTick+0x150>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b712:	693a      	ldr	r2, [r7, #16]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	429a      	cmp	r2, r3
 800b718:	d203      	bcs.n	800b722 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b71a:	4a2e      	ldr	r2, [pc, #184]	@ (800b7d4 <xTaskIncrementTick+0x15c>)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b720:	e02e      	b.n	800b780 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	3304      	adds	r3, #4
 800b726:	4618      	mov	r0, r3
 800b728:	f7ff f96c 	bl	800aa04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b730:	2b00      	cmp	r3, #0
 800b732:	d004      	beq.n	800b73e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	3318      	adds	r3, #24
 800b738:	4618      	mov	r0, r3
 800b73a:	f7ff f963 	bl	800aa04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b742:	2201      	movs	r2, #1
 800b744:	409a      	lsls	r2, r3
 800b746:	4b24      	ldr	r3, [pc, #144]	@ (800b7d8 <xTaskIncrementTick+0x160>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4313      	orrs	r3, r2
 800b74c:	4a22      	ldr	r2, [pc, #136]	@ (800b7d8 <xTaskIncrementTick+0x160>)
 800b74e:	6013      	str	r3, [r2, #0]
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b754:	4613      	mov	r3, r2
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4413      	add	r3, r2
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	4a1f      	ldr	r2, [pc, #124]	@ (800b7dc <xTaskIncrementTick+0x164>)
 800b75e:	441a      	add	r2, r3
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	3304      	adds	r3, #4
 800b764:	4619      	mov	r1, r3
 800b766:	4610      	mov	r0, r2
 800b768:	f7ff f8ef 	bl	800a94a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b770:	4b1b      	ldr	r3, [pc, #108]	@ (800b7e0 <xTaskIncrementTick+0x168>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b776:	429a      	cmp	r2, r3
 800b778:	d3b9      	bcc.n	800b6ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b77a:	2301      	movs	r3, #1
 800b77c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b77e:	e7b6      	b.n	800b6ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b780:	4b17      	ldr	r3, [pc, #92]	@ (800b7e0 <xTaskIncrementTick+0x168>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b786:	4915      	ldr	r1, [pc, #84]	@ (800b7dc <xTaskIncrementTick+0x164>)
 800b788:	4613      	mov	r3, r2
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	4413      	add	r3, r2
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	440b      	add	r3, r1
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b01      	cmp	r3, #1
 800b796:	d901      	bls.n	800b79c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b798:	2301      	movs	r3, #1
 800b79a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b79c:	4b11      	ldr	r3, [pc, #68]	@ (800b7e4 <xTaskIncrementTick+0x16c>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d007      	beq.n	800b7b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	617b      	str	r3, [r7, #20]
 800b7a8:	e004      	b.n	800b7b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b7aa:	4b0f      	ldr	r3, [pc, #60]	@ (800b7e8 <xTaskIncrementTick+0x170>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	4a0d      	ldr	r2, [pc, #52]	@ (800b7e8 <xTaskIncrementTick+0x170>)
 800b7b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b7b4:	697b      	ldr	r3, [r7, #20]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3718      	adds	r7, #24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	20002310 	.word	0x20002310
 800b7c4:	200022ec 	.word	0x200022ec
 800b7c8:	200022a0 	.word	0x200022a0
 800b7cc:	200022a4 	.word	0x200022a4
 800b7d0:	20002300 	.word	0x20002300
 800b7d4:	20002308 	.word	0x20002308
 800b7d8:	200022f0 	.word	0x200022f0
 800b7dc:	200021ec 	.word	0x200021ec
 800b7e0:	200021e8 	.word	0x200021e8
 800b7e4:	200022fc 	.word	0x200022fc
 800b7e8:	200022f8 	.word	0x200022f8

0800b7ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b087      	sub	sp, #28
 800b7f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b7f2:	4b27      	ldr	r3, [pc, #156]	@ (800b890 <vTaskSwitchContext+0xa4>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d003      	beq.n	800b802 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b7fa:	4b26      	ldr	r3, [pc, #152]	@ (800b894 <vTaskSwitchContext+0xa8>)
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b800:	e040      	b.n	800b884 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b802:	4b24      	ldr	r3, [pc, #144]	@ (800b894 <vTaskSwitchContext+0xa8>)
 800b804:	2200      	movs	r2, #0
 800b806:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b808:	4b23      	ldr	r3, [pc, #140]	@ (800b898 <vTaskSwitchContext+0xac>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	fab3 f383 	clz	r3, r3
 800b814:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b816:	7afb      	ldrb	r3, [r7, #11]
 800b818:	f1c3 031f 	rsb	r3, r3, #31
 800b81c:	617b      	str	r3, [r7, #20]
 800b81e:	491f      	ldr	r1, [pc, #124]	@ (800b89c <vTaskSwitchContext+0xb0>)
 800b820:	697a      	ldr	r2, [r7, #20]
 800b822:	4613      	mov	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	4413      	add	r3, r2
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	440b      	add	r3, r1
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d10b      	bne.n	800b84a <vTaskSwitchContext+0x5e>
	__asm volatile
 800b832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b836:	f383 8811 	msr	BASEPRI, r3
 800b83a:	f3bf 8f6f 	isb	sy
 800b83e:	f3bf 8f4f 	dsb	sy
 800b842:	607b      	str	r3, [r7, #4]
}
 800b844:	bf00      	nop
 800b846:	bf00      	nop
 800b848:	e7fd      	b.n	800b846 <vTaskSwitchContext+0x5a>
 800b84a:	697a      	ldr	r2, [r7, #20]
 800b84c:	4613      	mov	r3, r2
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	4413      	add	r3, r2
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	4a11      	ldr	r2, [pc, #68]	@ (800b89c <vTaskSwitchContext+0xb0>)
 800b856:	4413      	add	r3, r2
 800b858:	613b      	str	r3, [r7, #16]
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	685a      	ldr	r2, [r3, #4]
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	605a      	str	r2, [r3, #4]
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	685a      	ldr	r2, [r3, #4]
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	3308      	adds	r3, #8
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d104      	bne.n	800b87a <vTaskSwitchContext+0x8e>
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	685a      	ldr	r2, [r3, #4]
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	605a      	str	r2, [r3, #4]
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	4a07      	ldr	r2, [pc, #28]	@ (800b8a0 <vTaskSwitchContext+0xb4>)
 800b882:	6013      	str	r3, [r2, #0]
}
 800b884:	bf00      	nop
 800b886:	371c      	adds	r7, #28
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr
 800b890:	20002310 	.word	0x20002310
 800b894:	200022fc 	.word	0x200022fc
 800b898:	200022f0 	.word	0x200022f0
 800b89c:	200021ec 	.word	0x200021ec
 800b8a0:	200021e8 	.word	0x200021e8

0800b8a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d10b      	bne.n	800b8cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b8:	f383 8811 	msr	BASEPRI, r3
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	60fb      	str	r3, [r7, #12]
}
 800b8c6:	bf00      	nop
 800b8c8:	bf00      	nop
 800b8ca:	e7fd      	b.n	800b8c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8cc:	4b07      	ldr	r3, [pc, #28]	@ (800b8ec <vTaskPlaceOnEventList+0x48>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	3318      	adds	r3, #24
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f7ff f85c 	bl	800a992 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8da:	2101      	movs	r1, #1
 800b8dc:	6838      	ldr	r0, [r7, #0]
 800b8de:	f000 f9e5 	bl	800bcac <prvAddCurrentTaskToDelayedList>
}
 800b8e2:	bf00      	nop
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	200021e8 	.word	0x200021e8

0800b8f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b086      	sub	sp, #24
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d10b      	bne.n	800b91e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	60fb      	str	r3, [r7, #12]
}
 800b918:	bf00      	nop
 800b91a:	bf00      	nop
 800b91c:	e7fd      	b.n	800b91a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	3318      	adds	r3, #24
 800b922:	4618      	mov	r0, r3
 800b924:	f7ff f86e 	bl	800aa04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b928:	4b1d      	ldr	r3, [pc, #116]	@ (800b9a0 <xTaskRemoveFromEventList+0xb0>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d11c      	bne.n	800b96a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	3304      	adds	r3, #4
 800b934:	4618      	mov	r0, r3
 800b936:	f7ff f865 	bl	800aa04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b93e:	2201      	movs	r2, #1
 800b940:	409a      	lsls	r2, r3
 800b942:	4b18      	ldr	r3, [pc, #96]	@ (800b9a4 <xTaskRemoveFromEventList+0xb4>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4313      	orrs	r3, r2
 800b948:	4a16      	ldr	r2, [pc, #88]	@ (800b9a4 <xTaskRemoveFromEventList+0xb4>)
 800b94a:	6013      	str	r3, [r2, #0]
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b950:	4613      	mov	r3, r2
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	4413      	add	r3, r2
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	4a13      	ldr	r2, [pc, #76]	@ (800b9a8 <xTaskRemoveFromEventList+0xb8>)
 800b95a:	441a      	add	r2, r3
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	3304      	adds	r3, #4
 800b960:	4619      	mov	r1, r3
 800b962:	4610      	mov	r0, r2
 800b964:	f7fe fff1 	bl	800a94a <vListInsertEnd>
 800b968:	e005      	b.n	800b976 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	3318      	adds	r3, #24
 800b96e:	4619      	mov	r1, r3
 800b970:	480e      	ldr	r0, [pc, #56]	@ (800b9ac <xTaskRemoveFromEventList+0xbc>)
 800b972:	f7fe ffea 	bl	800a94a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b97a:	4b0d      	ldr	r3, [pc, #52]	@ (800b9b0 <xTaskRemoveFromEventList+0xc0>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b980:	429a      	cmp	r2, r3
 800b982:	d905      	bls.n	800b990 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b984:	2301      	movs	r3, #1
 800b986:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b988:	4b0a      	ldr	r3, [pc, #40]	@ (800b9b4 <xTaskRemoveFromEventList+0xc4>)
 800b98a:	2201      	movs	r2, #1
 800b98c:	601a      	str	r2, [r3, #0]
 800b98e:	e001      	b.n	800b994 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b990:	2300      	movs	r3, #0
 800b992:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b994:	697b      	ldr	r3, [r7, #20]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3718      	adds	r7, #24
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	20002310 	.word	0x20002310
 800b9a4:	200022f0 	.word	0x200022f0
 800b9a8:	200021ec 	.word	0x200021ec
 800b9ac:	200022a8 	.word	0x200022a8
 800b9b0:	200021e8 	.word	0x200021e8
 800b9b4:	200022fc 	.word	0x200022fc

0800b9b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b9c0:	4b06      	ldr	r3, [pc, #24]	@ (800b9dc <vTaskInternalSetTimeOutState+0x24>)
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b9c8:	4b05      	ldr	r3, [pc, #20]	@ (800b9e0 <vTaskInternalSetTimeOutState+0x28>)
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	605a      	str	r2, [r3, #4]
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr
 800b9dc:	20002300 	.word	0x20002300
 800b9e0:	200022ec 	.word	0x200022ec

0800b9e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b088      	sub	sp, #32
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d10b      	bne.n	800ba0c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b9f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f8:	f383 8811 	msr	BASEPRI, r3
 800b9fc:	f3bf 8f6f 	isb	sy
 800ba00:	f3bf 8f4f 	dsb	sy
 800ba04:	613b      	str	r3, [r7, #16]
}
 800ba06:	bf00      	nop
 800ba08:	bf00      	nop
 800ba0a:	e7fd      	b.n	800ba08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d10b      	bne.n	800ba2a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ba12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba16:	f383 8811 	msr	BASEPRI, r3
 800ba1a:	f3bf 8f6f 	isb	sy
 800ba1e:	f3bf 8f4f 	dsb	sy
 800ba22:	60fb      	str	r3, [r7, #12]
}
 800ba24:	bf00      	nop
 800ba26:	bf00      	nop
 800ba28:	e7fd      	b.n	800ba26 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ba2a:	f000 fad5 	bl	800bfd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba2e:	4b1d      	ldr	r3, [pc, #116]	@ (800baa4 <xTaskCheckForTimeOut+0xc0>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	69ba      	ldr	r2, [r7, #24]
 800ba3a:	1ad3      	subs	r3, r2, r3
 800ba3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba46:	d102      	bne.n	800ba4e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	61fb      	str	r3, [r7, #28]
 800ba4c:	e023      	b.n	800ba96 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	4b15      	ldr	r3, [pc, #84]	@ (800baa8 <xTaskCheckForTimeOut+0xc4>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d007      	beq.n	800ba6a <xTaskCheckForTimeOut+0x86>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	69ba      	ldr	r2, [r7, #24]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d302      	bcc.n	800ba6a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba64:	2301      	movs	r3, #1
 800ba66:	61fb      	str	r3, [r7, #28]
 800ba68:	e015      	b.n	800ba96 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	697a      	ldr	r2, [r7, #20]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d20b      	bcs.n	800ba8c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	1ad2      	subs	r2, r2, r3
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f7ff ff99 	bl	800b9b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba86:	2300      	movs	r3, #0
 800ba88:	61fb      	str	r3, [r7, #28]
 800ba8a:	e004      	b.n	800ba96 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ba92:	2301      	movs	r3, #1
 800ba94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ba96:	f000 fad1 	bl	800c03c <vPortExitCritical>

	return xReturn;
 800ba9a:	69fb      	ldr	r3, [r7, #28]
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3720      	adds	r7, #32
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	200022ec 	.word	0x200022ec
 800baa8:	20002300 	.word	0x20002300

0800baac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800baac:	b480      	push	{r7}
 800baae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bab0:	4b03      	ldr	r3, [pc, #12]	@ (800bac0 <vTaskMissedYield+0x14>)
 800bab2:	2201      	movs	r2, #1
 800bab4:	601a      	str	r2, [r3, #0]
}
 800bab6:	bf00      	nop
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr
 800bac0:	200022fc 	.word	0x200022fc

0800bac4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bacc:	f000 f852 	bl	800bb74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bad0:	4b06      	ldr	r3, [pc, #24]	@ (800baec <prvIdleTask+0x28>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d9f9      	bls.n	800bacc <prvIdleTask+0x8>
			{
				taskYIELD();
 800bad8:	4b05      	ldr	r3, [pc, #20]	@ (800baf0 <prvIdleTask+0x2c>)
 800bada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bade:	601a      	str	r2, [r3, #0]
 800bae0:	f3bf 8f4f 	dsb	sy
 800bae4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bae8:	e7f0      	b.n	800bacc <prvIdleTask+0x8>
 800baea:	bf00      	nop
 800baec:	200021ec 	.word	0x200021ec
 800baf0:	e000ed04 	.word	0xe000ed04

0800baf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bafa:	2300      	movs	r3, #0
 800bafc:	607b      	str	r3, [r7, #4]
 800bafe:	e00c      	b.n	800bb1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	4613      	mov	r3, r2
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	4413      	add	r3, r2
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	4a12      	ldr	r2, [pc, #72]	@ (800bb54 <prvInitialiseTaskLists+0x60>)
 800bb0c:	4413      	add	r3, r2
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7fe feee 	bl	800a8f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	3301      	adds	r3, #1
 800bb18:	607b      	str	r3, [r7, #4]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2b06      	cmp	r3, #6
 800bb1e:	d9ef      	bls.n	800bb00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb20:	480d      	ldr	r0, [pc, #52]	@ (800bb58 <prvInitialiseTaskLists+0x64>)
 800bb22:	f7fe fee5 	bl	800a8f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb26:	480d      	ldr	r0, [pc, #52]	@ (800bb5c <prvInitialiseTaskLists+0x68>)
 800bb28:	f7fe fee2 	bl	800a8f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb2c:	480c      	ldr	r0, [pc, #48]	@ (800bb60 <prvInitialiseTaskLists+0x6c>)
 800bb2e:	f7fe fedf 	bl	800a8f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb32:	480c      	ldr	r0, [pc, #48]	@ (800bb64 <prvInitialiseTaskLists+0x70>)
 800bb34:	f7fe fedc 	bl	800a8f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb38:	480b      	ldr	r0, [pc, #44]	@ (800bb68 <prvInitialiseTaskLists+0x74>)
 800bb3a:	f7fe fed9 	bl	800a8f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb3e:	4b0b      	ldr	r3, [pc, #44]	@ (800bb6c <prvInitialiseTaskLists+0x78>)
 800bb40:	4a05      	ldr	r2, [pc, #20]	@ (800bb58 <prvInitialiseTaskLists+0x64>)
 800bb42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb44:	4b0a      	ldr	r3, [pc, #40]	@ (800bb70 <prvInitialiseTaskLists+0x7c>)
 800bb46:	4a05      	ldr	r2, [pc, #20]	@ (800bb5c <prvInitialiseTaskLists+0x68>)
 800bb48:	601a      	str	r2, [r3, #0]
}
 800bb4a:	bf00      	nop
 800bb4c:	3708      	adds	r7, #8
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	200021ec 	.word	0x200021ec
 800bb58:	20002278 	.word	0x20002278
 800bb5c:	2000228c 	.word	0x2000228c
 800bb60:	200022a8 	.word	0x200022a8
 800bb64:	200022bc 	.word	0x200022bc
 800bb68:	200022d4 	.word	0x200022d4
 800bb6c:	200022a0 	.word	0x200022a0
 800bb70:	200022a4 	.word	0x200022a4

0800bb74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb7a:	e019      	b.n	800bbb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bb7c:	f000 fa2c 	bl	800bfd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb80:	4b10      	ldr	r3, [pc, #64]	@ (800bbc4 <prvCheckTasksWaitingTermination+0x50>)
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	3304      	adds	r3, #4
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f7fe ff39 	bl	800aa04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bb92:	4b0d      	ldr	r3, [pc, #52]	@ (800bbc8 <prvCheckTasksWaitingTermination+0x54>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	3b01      	subs	r3, #1
 800bb98:	4a0b      	ldr	r2, [pc, #44]	@ (800bbc8 <prvCheckTasksWaitingTermination+0x54>)
 800bb9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bb9c:	4b0b      	ldr	r3, [pc, #44]	@ (800bbcc <prvCheckTasksWaitingTermination+0x58>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	3b01      	subs	r3, #1
 800bba2:	4a0a      	ldr	r2, [pc, #40]	@ (800bbcc <prvCheckTasksWaitingTermination+0x58>)
 800bba4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bba6:	f000 fa49 	bl	800c03c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 f810 	bl	800bbd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbb0:	4b06      	ldr	r3, [pc, #24]	@ (800bbcc <prvCheckTasksWaitingTermination+0x58>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1e1      	bne.n	800bb7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bbb8:	bf00      	nop
 800bbba:	bf00      	nop
 800bbbc:	3708      	adds	r7, #8
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	200022bc 	.word	0x200022bc
 800bbc8:	200022e8 	.word	0x200022e8
 800bbcc:	200022d0 	.word	0x200022d0

0800bbd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d108      	bne.n	800bbf4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f000 fbe6 	bl	800c3b8 <vPortFree>
				vPortFree( pxTCB );
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 fbe3 	bl	800c3b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bbf2:	e019      	b.n	800bc28 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d103      	bne.n	800bc06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 fbda 	bl	800c3b8 <vPortFree>
	}
 800bc04:	e010      	b.n	800bc28 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	d00b      	beq.n	800bc28 <prvDeleteTCB+0x58>
	__asm volatile
 800bc10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc14:	f383 8811 	msr	BASEPRI, r3
 800bc18:	f3bf 8f6f 	isb	sy
 800bc1c:	f3bf 8f4f 	dsb	sy
 800bc20:	60fb      	str	r3, [r7, #12]
}
 800bc22:	bf00      	nop
 800bc24:	bf00      	nop
 800bc26:	e7fd      	b.n	800bc24 <prvDeleteTCB+0x54>
	}
 800bc28:	bf00      	nop
 800bc2a:	3710      	adds	r7, #16
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc36:	4b0c      	ldr	r3, [pc, #48]	@ (800bc68 <prvResetNextTaskUnblockTime+0x38>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d104      	bne.n	800bc4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc40:	4b0a      	ldr	r3, [pc, #40]	@ (800bc6c <prvResetNextTaskUnblockTime+0x3c>)
 800bc42:	f04f 32ff 	mov.w	r2, #4294967295
 800bc46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc48:	e008      	b.n	800bc5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc4a:	4b07      	ldr	r3, [pc, #28]	@ (800bc68 <prvResetNextTaskUnblockTime+0x38>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	4a04      	ldr	r2, [pc, #16]	@ (800bc6c <prvResetNextTaskUnblockTime+0x3c>)
 800bc5a:	6013      	str	r3, [r2, #0]
}
 800bc5c:	bf00      	nop
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr
 800bc68:	200022a0 	.word	0x200022a0
 800bc6c:	20002308 	.word	0x20002308

0800bc70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc70:	b480      	push	{r7}
 800bc72:	b083      	sub	sp, #12
 800bc74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc76:	4b0b      	ldr	r3, [pc, #44]	@ (800bca4 <xTaskGetSchedulerState+0x34>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d102      	bne.n	800bc84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc7e:	2301      	movs	r3, #1
 800bc80:	607b      	str	r3, [r7, #4]
 800bc82:	e008      	b.n	800bc96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc84:	4b08      	ldr	r3, [pc, #32]	@ (800bca8 <xTaskGetSchedulerState+0x38>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d102      	bne.n	800bc92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bc8c:	2302      	movs	r3, #2
 800bc8e:	607b      	str	r3, [r7, #4]
 800bc90:	e001      	b.n	800bc96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc92:	2300      	movs	r3, #0
 800bc94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bc96:	687b      	ldr	r3, [r7, #4]
	}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	200022f4 	.word	0x200022f4
 800bca8:	20002310 	.word	0x20002310

0800bcac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bcb6:	4b29      	ldr	r3, [pc, #164]	@ (800bd5c <prvAddCurrentTaskToDelayedList+0xb0>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcbc:	4b28      	ldr	r3, [pc, #160]	@ (800bd60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	3304      	adds	r3, #4
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fe fe9e 	bl	800aa04 <uxListRemove>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d10b      	bne.n	800bce6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bcce:	4b24      	ldr	r3, [pc, #144]	@ (800bd60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	fa02 f303 	lsl.w	r3, r2, r3
 800bcda:	43da      	mvns	r2, r3
 800bcdc:	4b21      	ldr	r3, [pc, #132]	@ (800bd64 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4013      	ands	r3, r2
 800bce2:	4a20      	ldr	r2, [pc, #128]	@ (800bd64 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bce4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcec:	d10a      	bne.n	800bd04 <prvAddCurrentTaskToDelayedList+0x58>
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d007      	beq.n	800bd04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcf4:	4b1a      	ldr	r3, [pc, #104]	@ (800bd60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	3304      	adds	r3, #4
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	481a      	ldr	r0, [pc, #104]	@ (800bd68 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bcfe:	f7fe fe24 	bl	800a94a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bd02:	e026      	b.n	800bd52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4413      	add	r3, r2
 800bd0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bd0c:	4b14      	ldr	r3, [pc, #80]	@ (800bd60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bd14:	68ba      	ldr	r2, [r7, #8]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d209      	bcs.n	800bd30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd1c:	4b13      	ldr	r3, [pc, #76]	@ (800bd6c <prvAddCurrentTaskToDelayedList+0xc0>)
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	4b0f      	ldr	r3, [pc, #60]	@ (800bd60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	3304      	adds	r3, #4
 800bd26:	4619      	mov	r1, r3
 800bd28:	4610      	mov	r0, r2
 800bd2a:	f7fe fe32 	bl	800a992 <vListInsert>
}
 800bd2e:	e010      	b.n	800bd52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd30:	4b0f      	ldr	r3, [pc, #60]	@ (800bd70 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	4b0a      	ldr	r3, [pc, #40]	@ (800bd60 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	3304      	adds	r3, #4
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	f7fe fe28 	bl	800a992 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd42:	4b0c      	ldr	r3, [pc, #48]	@ (800bd74 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	68ba      	ldr	r2, [r7, #8]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d202      	bcs.n	800bd52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bd4c:	4a09      	ldr	r2, [pc, #36]	@ (800bd74 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	6013      	str	r3, [r2, #0]
}
 800bd52:	bf00      	nop
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	200022ec 	.word	0x200022ec
 800bd60:	200021e8 	.word	0x200021e8
 800bd64:	200022f0 	.word	0x200022f0
 800bd68:	200022d4 	.word	0x200022d4
 800bd6c:	200022a4 	.word	0x200022a4
 800bd70:	200022a0 	.word	0x200022a0
 800bd74:	20002308 	.word	0x20002308

0800bd78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	3b04      	subs	r3, #4
 800bd88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bd90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	3b04      	subs	r3, #4
 800bd96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	f023 0201 	bic.w	r2, r3, #1
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	3b04      	subs	r3, #4
 800bda6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bda8:	4a0c      	ldr	r2, [pc, #48]	@ (800bddc <pxPortInitialiseStack+0x64>)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	3b14      	subs	r3, #20
 800bdb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	3b04      	subs	r3, #4
 800bdbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f06f 0202 	mvn.w	r2, #2
 800bdc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	3b20      	subs	r3, #32
 800bdcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bdce:	68fb      	ldr	r3, [r7, #12]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3714      	adds	r7, #20
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr
 800bddc:	0800bde1 	.word	0x0800bde1

0800bde0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bde0:	b480      	push	{r7}
 800bde2:	b085      	sub	sp, #20
 800bde4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bde6:	2300      	movs	r3, #0
 800bde8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bdea:	4b13      	ldr	r3, [pc, #76]	@ (800be38 <prvTaskExitError+0x58>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf2:	d00b      	beq.n	800be0c <prvTaskExitError+0x2c>
	__asm volatile
 800bdf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf8:	f383 8811 	msr	BASEPRI, r3
 800bdfc:	f3bf 8f6f 	isb	sy
 800be00:	f3bf 8f4f 	dsb	sy
 800be04:	60fb      	str	r3, [r7, #12]
}
 800be06:	bf00      	nop
 800be08:	bf00      	nop
 800be0a:	e7fd      	b.n	800be08 <prvTaskExitError+0x28>
	__asm volatile
 800be0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be10:	f383 8811 	msr	BASEPRI, r3
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	f3bf 8f4f 	dsb	sy
 800be1c:	60bb      	str	r3, [r7, #8]
}
 800be1e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be20:	bf00      	nop
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d0fc      	beq.n	800be22 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800be28:	bf00      	nop
 800be2a:	bf00      	nop
 800be2c:	3714      	adds	r7, #20
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop
 800be38:	2000006c 	.word	0x2000006c
 800be3c:	00000000 	.word	0x00000000

0800be40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be40:	4b07      	ldr	r3, [pc, #28]	@ (800be60 <pxCurrentTCBConst2>)
 800be42:	6819      	ldr	r1, [r3, #0]
 800be44:	6808      	ldr	r0, [r1, #0]
 800be46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be4a:	f380 8809 	msr	PSP, r0
 800be4e:	f3bf 8f6f 	isb	sy
 800be52:	f04f 0000 	mov.w	r0, #0
 800be56:	f380 8811 	msr	BASEPRI, r0
 800be5a:	4770      	bx	lr
 800be5c:	f3af 8000 	nop.w

0800be60 <pxCurrentTCBConst2>:
 800be60:	200021e8 	.word	0x200021e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be64:	bf00      	nop
 800be66:	bf00      	nop

0800be68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800be68:	4808      	ldr	r0, [pc, #32]	@ (800be8c <prvPortStartFirstTask+0x24>)
 800be6a:	6800      	ldr	r0, [r0, #0]
 800be6c:	6800      	ldr	r0, [r0, #0]
 800be6e:	f380 8808 	msr	MSP, r0
 800be72:	f04f 0000 	mov.w	r0, #0
 800be76:	f380 8814 	msr	CONTROL, r0
 800be7a:	b662      	cpsie	i
 800be7c:	b661      	cpsie	f
 800be7e:	f3bf 8f4f 	dsb	sy
 800be82:	f3bf 8f6f 	isb	sy
 800be86:	df00      	svc	0
 800be88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800be8a:	bf00      	nop
 800be8c:	e000ed08 	.word	0xe000ed08

0800be90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b086      	sub	sp, #24
 800be94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800be96:	4b47      	ldr	r3, [pc, #284]	@ (800bfb4 <xPortStartScheduler+0x124>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a47      	ldr	r2, [pc, #284]	@ (800bfb8 <xPortStartScheduler+0x128>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d10b      	bne.n	800beb8 <xPortStartScheduler+0x28>
	__asm volatile
 800bea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea4:	f383 8811 	msr	BASEPRI, r3
 800bea8:	f3bf 8f6f 	isb	sy
 800beac:	f3bf 8f4f 	dsb	sy
 800beb0:	60fb      	str	r3, [r7, #12]
}
 800beb2:	bf00      	nop
 800beb4:	bf00      	nop
 800beb6:	e7fd      	b.n	800beb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800beb8:	4b3e      	ldr	r3, [pc, #248]	@ (800bfb4 <xPortStartScheduler+0x124>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a3f      	ldr	r2, [pc, #252]	@ (800bfbc <xPortStartScheduler+0x12c>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d10b      	bne.n	800beda <xPortStartScheduler+0x4a>
	__asm volatile
 800bec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec6:	f383 8811 	msr	BASEPRI, r3
 800beca:	f3bf 8f6f 	isb	sy
 800bece:	f3bf 8f4f 	dsb	sy
 800bed2:	613b      	str	r3, [r7, #16]
}
 800bed4:	bf00      	nop
 800bed6:	bf00      	nop
 800bed8:	e7fd      	b.n	800bed6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800beda:	4b39      	ldr	r3, [pc, #228]	@ (800bfc0 <xPortStartScheduler+0x130>)
 800bedc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	22ff      	movs	r2, #255	@ 0xff
 800beea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	b2db      	uxtb	r3, r3
 800bef2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bef4:	78fb      	ldrb	r3, [r7, #3]
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800befc:	b2da      	uxtb	r2, r3
 800befe:	4b31      	ldr	r3, [pc, #196]	@ (800bfc4 <xPortStartScheduler+0x134>)
 800bf00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf02:	4b31      	ldr	r3, [pc, #196]	@ (800bfc8 <xPortStartScheduler+0x138>)
 800bf04:	2207      	movs	r2, #7
 800bf06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf08:	e009      	b.n	800bf1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bf0a:	4b2f      	ldr	r3, [pc, #188]	@ (800bfc8 <xPortStartScheduler+0x138>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	4a2d      	ldr	r2, [pc, #180]	@ (800bfc8 <xPortStartScheduler+0x138>)
 800bf12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf14:	78fb      	ldrb	r3, [r7, #3]
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	005b      	lsls	r3, r3, #1
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf1e:	78fb      	ldrb	r3, [r7, #3]
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf26:	2b80      	cmp	r3, #128	@ 0x80
 800bf28:	d0ef      	beq.n	800bf0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bf2a:	4b27      	ldr	r3, [pc, #156]	@ (800bfc8 <xPortStartScheduler+0x138>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f1c3 0307 	rsb	r3, r3, #7
 800bf32:	2b04      	cmp	r3, #4
 800bf34:	d00b      	beq.n	800bf4e <xPortStartScheduler+0xbe>
	__asm volatile
 800bf36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf3a:	f383 8811 	msr	BASEPRI, r3
 800bf3e:	f3bf 8f6f 	isb	sy
 800bf42:	f3bf 8f4f 	dsb	sy
 800bf46:	60bb      	str	r3, [r7, #8]
}
 800bf48:	bf00      	nop
 800bf4a:	bf00      	nop
 800bf4c:	e7fd      	b.n	800bf4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bf4e:	4b1e      	ldr	r3, [pc, #120]	@ (800bfc8 <xPortStartScheduler+0x138>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	021b      	lsls	r3, r3, #8
 800bf54:	4a1c      	ldr	r2, [pc, #112]	@ (800bfc8 <xPortStartScheduler+0x138>)
 800bf56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bf58:	4b1b      	ldr	r3, [pc, #108]	@ (800bfc8 <xPortStartScheduler+0x138>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bf60:	4a19      	ldr	r2, [pc, #100]	@ (800bfc8 <xPortStartScheduler+0x138>)
 800bf62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	b2da      	uxtb	r2, r3
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf6c:	4b17      	ldr	r3, [pc, #92]	@ (800bfcc <xPortStartScheduler+0x13c>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a16      	ldr	r2, [pc, #88]	@ (800bfcc <xPortStartScheduler+0x13c>)
 800bf72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bf76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bf78:	4b14      	ldr	r3, [pc, #80]	@ (800bfcc <xPortStartScheduler+0x13c>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a13      	ldr	r2, [pc, #76]	@ (800bfcc <xPortStartScheduler+0x13c>)
 800bf7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bf82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bf84:	f000 f8da 	bl	800c13c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bf88:	4b11      	ldr	r3, [pc, #68]	@ (800bfd0 <xPortStartScheduler+0x140>)
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bf8e:	f000 f8f9 	bl	800c184 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bf92:	4b10      	ldr	r3, [pc, #64]	@ (800bfd4 <xPortStartScheduler+0x144>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a0f      	ldr	r2, [pc, #60]	@ (800bfd4 <xPortStartScheduler+0x144>)
 800bf98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bf9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bf9e:	f7ff ff63 	bl	800be68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bfa2:	f7ff fc23 	bl	800b7ec <vTaskSwitchContext>
	prvTaskExitError();
 800bfa6:	f7ff ff1b 	bl	800bde0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bfaa:	2300      	movs	r3, #0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3718      	adds	r7, #24
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	e000ed00 	.word	0xe000ed00
 800bfb8:	410fc271 	.word	0x410fc271
 800bfbc:	410fc270 	.word	0x410fc270
 800bfc0:	e000e400 	.word	0xe000e400
 800bfc4:	20002314 	.word	0x20002314
 800bfc8:	20002318 	.word	0x20002318
 800bfcc:	e000ed20 	.word	0xe000ed20
 800bfd0:	2000006c 	.word	0x2000006c
 800bfd4:	e000ef34 	.word	0xe000ef34

0800bfd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
	__asm volatile
 800bfde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfe2:	f383 8811 	msr	BASEPRI, r3
 800bfe6:	f3bf 8f6f 	isb	sy
 800bfea:	f3bf 8f4f 	dsb	sy
 800bfee:	607b      	str	r3, [r7, #4]
}
 800bff0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bff2:	4b10      	ldr	r3, [pc, #64]	@ (800c034 <vPortEnterCritical+0x5c>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	3301      	adds	r3, #1
 800bff8:	4a0e      	ldr	r2, [pc, #56]	@ (800c034 <vPortEnterCritical+0x5c>)
 800bffa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bffc:	4b0d      	ldr	r3, [pc, #52]	@ (800c034 <vPortEnterCritical+0x5c>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	2b01      	cmp	r3, #1
 800c002:	d110      	bne.n	800c026 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c004:	4b0c      	ldr	r3, [pc, #48]	@ (800c038 <vPortEnterCritical+0x60>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00b      	beq.n	800c026 <vPortEnterCritical+0x4e>
	__asm volatile
 800c00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c012:	f383 8811 	msr	BASEPRI, r3
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	603b      	str	r3, [r7, #0]
}
 800c020:	bf00      	nop
 800c022:	bf00      	nop
 800c024:	e7fd      	b.n	800c022 <vPortEnterCritical+0x4a>
	}
}
 800c026:	bf00      	nop
 800c028:	370c      	adds	r7, #12
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	2000006c 	.word	0x2000006c
 800c038:	e000ed04 	.word	0xe000ed04

0800c03c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c042:	4b12      	ldr	r3, [pc, #72]	@ (800c08c <vPortExitCritical+0x50>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d10b      	bne.n	800c062 <vPortExitCritical+0x26>
	__asm volatile
 800c04a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c04e:	f383 8811 	msr	BASEPRI, r3
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	607b      	str	r3, [r7, #4]
}
 800c05c:	bf00      	nop
 800c05e:	bf00      	nop
 800c060:	e7fd      	b.n	800c05e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c062:	4b0a      	ldr	r3, [pc, #40]	@ (800c08c <vPortExitCritical+0x50>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	3b01      	subs	r3, #1
 800c068:	4a08      	ldr	r2, [pc, #32]	@ (800c08c <vPortExitCritical+0x50>)
 800c06a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c06c:	4b07      	ldr	r3, [pc, #28]	@ (800c08c <vPortExitCritical+0x50>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d105      	bne.n	800c080 <vPortExitCritical+0x44>
 800c074:	2300      	movs	r3, #0
 800c076:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	f383 8811 	msr	BASEPRI, r3
}
 800c07e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c080:	bf00      	nop
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr
 800c08c:	2000006c 	.word	0x2000006c

0800c090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c090:	f3ef 8009 	mrs	r0, PSP
 800c094:	f3bf 8f6f 	isb	sy
 800c098:	4b15      	ldr	r3, [pc, #84]	@ (800c0f0 <pxCurrentTCBConst>)
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	f01e 0f10 	tst.w	lr, #16
 800c0a0:	bf08      	it	eq
 800c0a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c0a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0aa:	6010      	str	r0, [r2, #0]
 800c0ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c0b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c0b4:	f380 8811 	msr	BASEPRI, r0
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	f3bf 8f6f 	isb	sy
 800c0c0:	f7ff fb94 	bl	800b7ec <vTaskSwitchContext>
 800c0c4:	f04f 0000 	mov.w	r0, #0
 800c0c8:	f380 8811 	msr	BASEPRI, r0
 800c0cc:	bc09      	pop	{r0, r3}
 800c0ce:	6819      	ldr	r1, [r3, #0]
 800c0d0:	6808      	ldr	r0, [r1, #0]
 800c0d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d6:	f01e 0f10 	tst.w	lr, #16
 800c0da:	bf08      	it	eq
 800c0dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c0e0:	f380 8809 	msr	PSP, r0
 800c0e4:	f3bf 8f6f 	isb	sy
 800c0e8:	4770      	bx	lr
 800c0ea:	bf00      	nop
 800c0ec:	f3af 8000 	nop.w

0800c0f0 <pxCurrentTCBConst>:
 800c0f0:	200021e8 	.word	0x200021e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c0f4:	bf00      	nop
 800c0f6:	bf00      	nop

0800c0f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c102:	f383 8811 	msr	BASEPRI, r3
 800c106:	f3bf 8f6f 	isb	sy
 800c10a:	f3bf 8f4f 	dsb	sy
 800c10e:	607b      	str	r3, [r7, #4]
}
 800c110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c112:	f7ff fab1 	bl	800b678 <xTaskIncrementTick>
 800c116:	4603      	mov	r3, r0
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d003      	beq.n	800c124 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c11c:	4b06      	ldr	r3, [pc, #24]	@ (800c138 <SysTick_Handler+0x40>)
 800c11e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c122:	601a      	str	r2, [r3, #0]
 800c124:	2300      	movs	r3, #0
 800c126:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	f383 8811 	msr	BASEPRI, r3
}
 800c12e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c130:	bf00      	nop
 800c132:	3708      	adds	r7, #8
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	e000ed04 	.word	0xe000ed04

0800c13c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c13c:	b480      	push	{r7}
 800c13e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c140:	4b0b      	ldr	r3, [pc, #44]	@ (800c170 <vPortSetupTimerInterrupt+0x34>)
 800c142:	2200      	movs	r2, #0
 800c144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c146:	4b0b      	ldr	r3, [pc, #44]	@ (800c174 <vPortSetupTimerInterrupt+0x38>)
 800c148:	2200      	movs	r2, #0
 800c14a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c14c:	4b0a      	ldr	r3, [pc, #40]	@ (800c178 <vPortSetupTimerInterrupt+0x3c>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a0a      	ldr	r2, [pc, #40]	@ (800c17c <vPortSetupTimerInterrupt+0x40>)
 800c152:	fba2 2303 	umull	r2, r3, r2, r3
 800c156:	099b      	lsrs	r3, r3, #6
 800c158:	4a09      	ldr	r2, [pc, #36]	@ (800c180 <vPortSetupTimerInterrupt+0x44>)
 800c15a:	3b01      	subs	r3, #1
 800c15c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c15e:	4b04      	ldr	r3, [pc, #16]	@ (800c170 <vPortSetupTimerInterrupt+0x34>)
 800c160:	2207      	movs	r2, #7
 800c162:	601a      	str	r2, [r3, #0]
}
 800c164:	bf00      	nop
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr
 800c16e:	bf00      	nop
 800c170:	e000e010 	.word	0xe000e010
 800c174:	e000e018 	.word	0xe000e018
 800c178:	2000001c 	.word	0x2000001c
 800c17c:	10624dd3 	.word	0x10624dd3
 800c180:	e000e014 	.word	0xe000e014

0800c184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c184:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c194 <vPortEnableVFP+0x10>
 800c188:	6801      	ldr	r1, [r0, #0]
 800c18a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c18e:	6001      	str	r1, [r0, #0]
 800c190:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c192:	bf00      	nop
 800c194:	e000ed88 	.word	0xe000ed88

0800c198 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c198:	b480      	push	{r7}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c19e:	f3ef 8305 	mrs	r3, IPSR
 800c1a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2b0f      	cmp	r3, #15
 800c1a8:	d915      	bls.n	800c1d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c1aa:	4a18      	ldr	r2, [pc, #96]	@ (800c20c <vPortValidateInterruptPriority+0x74>)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	4413      	add	r3, r2
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c1b4:	4b16      	ldr	r3, [pc, #88]	@ (800c210 <vPortValidateInterruptPriority+0x78>)
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	7afa      	ldrb	r2, [r7, #11]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d20b      	bcs.n	800c1d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c2:	f383 8811 	msr	BASEPRI, r3
 800c1c6:	f3bf 8f6f 	isb	sy
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	607b      	str	r3, [r7, #4]
}
 800c1d0:	bf00      	nop
 800c1d2:	bf00      	nop
 800c1d4:	e7fd      	b.n	800c1d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c1d6:	4b0f      	ldr	r3, [pc, #60]	@ (800c214 <vPortValidateInterruptPriority+0x7c>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c1de:	4b0e      	ldr	r3, [pc, #56]	@ (800c218 <vPortValidateInterruptPriority+0x80>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d90b      	bls.n	800c1fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c1e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ea:	f383 8811 	msr	BASEPRI, r3
 800c1ee:	f3bf 8f6f 	isb	sy
 800c1f2:	f3bf 8f4f 	dsb	sy
 800c1f6:	603b      	str	r3, [r7, #0]
}
 800c1f8:	bf00      	nop
 800c1fa:	bf00      	nop
 800c1fc:	e7fd      	b.n	800c1fa <vPortValidateInterruptPriority+0x62>
	}
 800c1fe:	bf00      	nop
 800c200:	3714      	adds	r7, #20
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	e000e3f0 	.word	0xe000e3f0
 800c210:	20002314 	.word	0x20002314
 800c214:	e000ed0c 	.word	0xe000ed0c
 800c218:	20002318 	.word	0x20002318

0800c21c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b08a      	sub	sp, #40	@ 0x28
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c224:	2300      	movs	r3, #0
 800c226:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c228:	f7ff f97a 	bl	800b520 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c22c:	4b5c      	ldr	r3, [pc, #368]	@ (800c3a0 <pvPortMalloc+0x184>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d101      	bne.n	800c238 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c234:	f000 f924 	bl	800c480 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c238:	4b5a      	ldr	r3, [pc, #360]	@ (800c3a4 <pvPortMalloc+0x188>)
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4013      	ands	r3, r2
 800c240:	2b00      	cmp	r3, #0
 800c242:	f040 8095 	bne.w	800c370 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d01e      	beq.n	800c28a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c24c:	2208      	movs	r2, #8
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	4413      	add	r3, r2
 800c252:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f003 0307 	and.w	r3, r3, #7
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d015      	beq.n	800c28a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f023 0307 	bic.w	r3, r3, #7
 800c264:	3308      	adds	r3, #8
 800c266:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f003 0307 	and.w	r3, r3, #7
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d00b      	beq.n	800c28a <pvPortMalloc+0x6e>
	__asm volatile
 800c272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c276:	f383 8811 	msr	BASEPRI, r3
 800c27a:	f3bf 8f6f 	isb	sy
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	617b      	str	r3, [r7, #20]
}
 800c284:	bf00      	nop
 800c286:	bf00      	nop
 800c288:	e7fd      	b.n	800c286 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d06f      	beq.n	800c370 <pvPortMalloc+0x154>
 800c290:	4b45      	ldr	r3, [pc, #276]	@ (800c3a8 <pvPortMalloc+0x18c>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	429a      	cmp	r2, r3
 800c298:	d86a      	bhi.n	800c370 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c29a:	4b44      	ldr	r3, [pc, #272]	@ (800c3ac <pvPortMalloc+0x190>)
 800c29c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c29e:	4b43      	ldr	r3, [pc, #268]	@ (800c3ac <pvPortMalloc+0x190>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2a4:	e004      	b.n	800c2b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d903      	bls.n	800c2c2 <pvPortMalloc+0xa6>
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d1f1      	bne.n	800c2a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2c2:	4b37      	ldr	r3, [pc, #220]	@ (800c3a0 <pvPortMalloc+0x184>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d051      	beq.n	800c370 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c2cc:	6a3b      	ldr	r3, [r7, #32]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2208      	movs	r2, #8
 800c2d2:	4413      	add	r3, r2
 800c2d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	6a3b      	ldr	r3, [r7, #32]
 800c2dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e0:	685a      	ldr	r2, [r3, #4]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	1ad2      	subs	r2, r2, r3
 800c2e6:	2308      	movs	r3, #8
 800c2e8:	005b      	lsls	r3, r3, #1
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d920      	bls.n	800c330 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c2ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	f003 0307 	and.w	r3, r3, #7
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00b      	beq.n	800c318 <pvPortMalloc+0xfc>
	__asm volatile
 800c300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c304:	f383 8811 	msr	BASEPRI, r3
 800c308:	f3bf 8f6f 	isb	sy
 800c30c:	f3bf 8f4f 	dsb	sy
 800c310:	613b      	str	r3, [r7, #16]
}
 800c312:	bf00      	nop
 800c314:	bf00      	nop
 800c316:	e7fd      	b.n	800c314 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c31a:	685a      	ldr	r2, [r3, #4]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	1ad2      	subs	r2, r2, r3
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c32a:	69b8      	ldr	r0, [r7, #24]
 800c32c:	f000 f90a 	bl	800c544 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c330:	4b1d      	ldr	r3, [pc, #116]	@ (800c3a8 <pvPortMalloc+0x18c>)
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	1ad3      	subs	r3, r2, r3
 800c33a:	4a1b      	ldr	r2, [pc, #108]	@ (800c3a8 <pvPortMalloc+0x18c>)
 800c33c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c33e:	4b1a      	ldr	r3, [pc, #104]	@ (800c3a8 <pvPortMalloc+0x18c>)
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	4b1b      	ldr	r3, [pc, #108]	@ (800c3b0 <pvPortMalloc+0x194>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	429a      	cmp	r2, r3
 800c348:	d203      	bcs.n	800c352 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c34a:	4b17      	ldr	r3, [pc, #92]	@ (800c3a8 <pvPortMalloc+0x18c>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a18      	ldr	r2, [pc, #96]	@ (800c3b0 <pvPortMalloc+0x194>)
 800c350:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c354:	685a      	ldr	r2, [r3, #4]
 800c356:	4b13      	ldr	r3, [pc, #76]	@ (800c3a4 <pvPortMalloc+0x188>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	431a      	orrs	r2, r3
 800c35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c35e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c362:	2200      	movs	r2, #0
 800c364:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c366:	4b13      	ldr	r3, [pc, #76]	@ (800c3b4 <pvPortMalloc+0x198>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	3301      	adds	r3, #1
 800c36c:	4a11      	ldr	r2, [pc, #68]	@ (800c3b4 <pvPortMalloc+0x198>)
 800c36e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c370:	f7ff f8e4 	bl	800b53c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c374:	69fb      	ldr	r3, [r7, #28]
 800c376:	f003 0307 	and.w	r3, r3, #7
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00b      	beq.n	800c396 <pvPortMalloc+0x17a>
	__asm volatile
 800c37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	60fb      	str	r3, [r7, #12]
}
 800c390:	bf00      	nop
 800c392:	bf00      	nop
 800c394:	e7fd      	b.n	800c392 <pvPortMalloc+0x176>
	return pvReturn;
 800c396:	69fb      	ldr	r3, [r7, #28]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3728      	adds	r7, #40	@ 0x28
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	20002edc 	.word	0x20002edc
 800c3a4:	20002ef0 	.word	0x20002ef0
 800c3a8:	20002ee0 	.word	0x20002ee0
 800c3ac:	20002ed4 	.word	0x20002ed4
 800c3b0:	20002ee4 	.word	0x20002ee4
 800c3b4:	20002ee8 	.word	0x20002ee8

0800c3b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d04f      	beq.n	800c46a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3ca:	2308      	movs	r3, #8
 800c3cc:	425b      	negs	r3, r3
 800c3ce:	697a      	ldr	r2, [r7, #20]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	685a      	ldr	r2, [r3, #4]
 800c3dc:	4b25      	ldr	r3, [pc, #148]	@ (800c474 <vPortFree+0xbc>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d10b      	bne.n	800c3fe <vPortFree+0x46>
	__asm volatile
 800c3e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ea:	f383 8811 	msr	BASEPRI, r3
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	f3bf 8f4f 	dsb	sy
 800c3f6:	60fb      	str	r3, [r7, #12]
}
 800c3f8:	bf00      	nop
 800c3fa:	bf00      	nop
 800c3fc:	e7fd      	b.n	800c3fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00b      	beq.n	800c41e <vPortFree+0x66>
	__asm volatile
 800c406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c40a:	f383 8811 	msr	BASEPRI, r3
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f3bf 8f4f 	dsb	sy
 800c416:	60bb      	str	r3, [r7, #8]
}
 800c418:	bf00      	nop
 800c41a:	bf00      	nop
 800c41c:	e7fd      	b.n	800c41a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	685a      	ldr	r2, [r3, #4]
 800c422:	4b14      	ldr	r3, [pc, #80]	@ (800c474 <vPortFree+0xbc>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4013      	ands	r3, r2
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d01e      	beq.n	800c46a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d11a      	bne.n	800c46a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	685a      	ldr	r2, [r3, #4]
 800c438:	4b0e      	ldr	r3, [pc, #56]	@ (800c474 <vPortFree+0xbc>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	43db      	mvns	r3, r3
 800c43e:	401a      	ands	r2, r3
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c444:	f7ff f86c 	bl	800b520 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	685a      	ldr	r2, [r3, #4]
 800c44c:	4b0a      	ldr	r3, [pc, #40]	@ (800c478 <vPortFree+0xc0>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4413      	add	r3, r2
 800c452:	4a09      	ldr	r2, [pc, #36]	@ (800c478 <vPortFree+0xc0>)
 800c454:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c456:	6938      	ldr	r0, [r7, #16]
 800c458:	f000 f874 	bl	800c544 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c45c:	4b07      	ldr	r3, [pc, #28]	@ (800c47c <vPortFree+0xc4>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	3301      	adds	r3, #1
 800c462:	4a06      	ldr	r2, [pc, #24]	@ (800c47c <vPortFree+0xc4>)
 800c464:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c466:	f7ff f869 	bl	800b53c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c46a:	bf00      	nop
 800c46c:	3718      	adds	r7, #24
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	20002ef0 	.word	0x20002ef0
 800c478:	20002ee0 	.word	0x20002ee0
 800c47c:	20002eec 	.word	0x20002eec

0800c480 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c480:	b480      	push	{r7}
 800c482:	b085      	sub	sp, #20
 800c484:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c486:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800c48a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c48c:	4b27      	ldr	r3, [pc, #156]	@ (800c52c <prvHeapInit+0xac>)
 800c48e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f003 0307 	and.w	r3, r3, #7
 800c496:	2b00      	cmp	r3, #0
 800c498:	d00c      	beq.n	800c4b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	3307      	adds	r3, #7
 800c49e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f023 0307 	bic.w	r3, r3, #7
 800c4a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c4a8:	68ba      	ldr	r2, [r7, #8]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	4a1f      	ldr	r2, [pc, #124]	@ (800c52c <prvHeapInit+0xac>)
 800c4b0:	4413      	add	r3, r2
 800c4b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4b8:	4a1d      	ldr	r2, [pc, #116]	@ (800c530 <prvHeapInit+0xb0>)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4be:	4b1c      	ldr	r3, [pc, #112]	@ (800c530 <prvHeapInit+0xb0>)
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	68ba      	ldr	r2, [r7, #8]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c4cc:	2208      	movs	r2, #8
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	1a9b      	subs	r3, r3, r2
 800c4d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f023 0307 	bic.w	r3, r3, #7
 800c4da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	4a15      	ldr	r2, [pc, #84]	@ (800c534 <prvHeapInit+0xb4>)
 800c4e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c4e2:	4b14      	ldr	r3, [pc, #80]	@ (800c534 <prvHeapInit+0xb4>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c4ea:	4b12      	ldr	r3, [pc, #72]	@ (800c534 <prvHeapInit+0xb4>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	68fa      	ldr	r2, [r7, #12]
 800c4fa:	1ad2      	subs	r2, r2, r3
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c500:	4b0c      	ldr	r3, [pc, #48]	@ (800c534 <prvHeapInit+0xb4>)
 800c502:	681a      	ldr	r2, [r3, #0]
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	4a0a      	ldr	r2, [pc, #40]	@ (800c538 <prvHeapInit+0xb8>)
 800c50e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	4a09      	ldr	r2, [pc, #36]	@ (800c53c <prvHeapInit+0xbc>)
 800c516:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c518:	4b09      	ldr	r3, [pc, #36]	@ (800c540 <prvHeapInit+0xc0>)
 800c51a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c51e:	601a      	str	r2, [r3, #0]
}
 800c520:	bf00      	nop
 800c522:	3714      	adds	r7, #20
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr
 800c52c:	2000231c 	.word	0x2000231c
 800c530:	20002ed4 	.word	0x20002ed4
 800c534:	20002edc 	.word	0x20002edc
 800c538:	20002ee4 	.word	0x20002ee4
 800c53c:	20002ee0 	.word	0x20002ee0
 800c540:	20002ef0 	.word	0x20002ef0

0800c544 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c544:	b480      	push	{r7}
 800c546:	b085      	sub	sp, #20
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c54c:	4b28      	ldr	r3, [pc, #160]	@ (800c5f0 <prvInsertBlockIntoFreeList+0xac>)
 800c54e:	60fb      	str	r3, [r7, #12]
 800c550:	e002      	b.n	800c558 <prvInsertBlockIntoFreeList+0x14>
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	60fb      	str	r3, [r7, #12]
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	429a      	cmp	r2, r3
 800c560:	d8f7      	bhi.n	800c552 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	68ba      	ldr	r2, [r7, #8]
 800c56c:	4413      	add	r3, r2
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	429a      	cmp	r2, r3
 800c572:	d108      	bne.n	800c586 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	685a      	ldr	r2, [r3, #4]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	441a      	add	r2, r3
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	68ba      	ldr	r2, [r7, #8]
 800c590:	441a      	add	r2, r3
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	429a      	cmp	r2, r3
 800c598:	d118      	bne.n	800c5cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	4b15      	ldr	r3, [pc, #84]	@ (800c5f4 <prvInsertBlockIntoFreeList+0xb0>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d00d      	beq.n	800c5c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	685a      	ldr	r2, [r3, #4]
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	441a      	add	r2, r3
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	601a      	str	r2, [r3, #0]
 800c5c0:	e008      	b.n	800c5d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5c2:	4b0c      	ldr	r3, [pc, #48]	@ (800c5f4 <prvInsertBlockIntoFreeList+0xb0>)
 800c5c4:	681a      	ldr	r2, [r3, #0]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	601a      	str	r2, [r3, #0]
 800c5ca:	e003      	b.n	800c5d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c5d4:	68fa      	ldr	r2, [r7, #12]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d002      	beq.n	800c5e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5e2:	bf00      	nop
 800c5e4:	3714      	adds	r7, #20
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr
 800c5ee:	bf00      	nop
 800c5f0:	20002ed4 	.word	0x20002ed4
 800c5f4:	20002edc 	.word	0x20002edc

0800c5f8 <arm_fir_init_f32>:
 800c5f8:	b538      	push	{r3, r4, r5, lr}
 800c5fa:	9c04      	ldr	r4, [sp, #16]
 800c5fc:	6082      	str	r2, [r0, #8]
 800c5fe:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800c602:	3c01      	subs	r4, #1
 800c604:	440c      	add	r4, r1
 800c606:	8001      	strh	r1, [r0, #0]
 800c608:	4605      	mov	r5, r0
 800c60a:	00a2      	lsls	r2, r4, #2
 800c60c:	4618      	mov	r0, r3
 800c60e:	2100      	movs	r1, #0
 800c610:	f001 f97c 	bl	800d90c <memset>
 800c614:	6068      	str	r0, [r5, #4]
 800c616:	bd38      	pop	{r3, r4, r5, pc}

0800c618 <arm_fir_f32>:
 800c618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61c:	ed2d 8b10 	vpush	{d8-d15}
 800c620:	b08b      	sub	sp, #44	@ 0x2c
 800c622:	f8b0 8000 	ldrh.w	r8, [r0]
 800c626:	9003      	str	r0, [sp, #12]
 800c628:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 800c62c:	461e      	mov	r6, r3
 800c62e:	9304      	str	r3, [sp, #16]
 800c630:	f108 4380 	add.w	r3, r8, #1073741824	@ 0x40000000
 800c634:	3b01      	subs	r3, #1
 800c636:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 800c63a:	08f3      	lsrs	r3, r6, #3
 800c63c:	9002      	str	r0, [sp, #8]
 800c63e:	9500      	str	r5, [sp, #0]
 800c640:	9301      	str	r3, [sp, #4]
 800c642:	f000 81f1 	beq.w	800ca28 <arm_fir_f32+0x410>
 800c646:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 800c64a:	f100 0620 	add.w	r6, r0, #32
 800c64e:	9405      	str	r4, [sp, #20]
 800c650:	0164      	lsls	r4, r4, #5
 800c652:	4420      	add	r0, r4
 800c654:	f008 0a07 	and.w	sl, r8, #7
 800c658:	9607      	str	r6, [sp, #28]
 800c65a:	9006      	str	r0, [sp, #24]
 800c65c:	469c      	mov	ip, r3
 800c65e:	4650      	mov	r0, sl
 800c660:	4623      	mov	r3, r4
 800c662:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c666:	f8cd 8020 	str.w	r8, [sp, #32]
 800c66a:	1937      	adds	r7, r6, r4
 800c66c:	f109 0b1c 	add.w	fp, r9, #28
 800c670:	f8dd e014 	ldr.w	lr, [sp, #20]
 800c674:	9209      	str	r2, [sp, #36]	@ 0x24
 800c676:	f8cd 9014 	str.w	r9, [sp, #20]
 800c67a:	f101 0620 	add.w	r6, r1, #32
 800c67e:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800c682:	9106      	str	r1, [sp, #24]
 800c684:	3520      	adds	r5, #32
 800c686:	f102 0420 	add.w	r4, r2, #32
 800c68a:	4698      	mov	r8, r3
 800c68c:	f856 3c20 	ldr.w	r3, [r6, #-32]
 800c690:	f845 3c20 	str.w	r3, [r5, #-32]
 800c694:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800c698:	f845 3c1c 	str.w	r3, [r5, #-28]
 800c69c:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800c6a0:	f845 3c18 	str.w	r3, [r5, #-24]
 800c6a4:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800c6a8:	f845 3c14 	str.w	r3, [r5, #-20]
 800c6ac:	f856 3c10 	ldr.w	r3, [r6, #-16]
 800c6b0:	f845 3c10 	str.w	r3, [r5, #-16]
 800c6b4:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800c6b8:	f845 3c0c 	str.w	r3, [r5, #-12]
 800c6bc:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800c6c0:	f845 3c08 	str.w	r3, [r5, #-8]
 800c6c4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c6c8:	f845 3c04 	str.w	r3, [r5, #-4]
 800c6cc:	ed1b 2a07 	vldr	s4, [fp, #-28]	@ 0xffffffe4
 800c6d0:	ed5b 1a06 	vldr	s3, [fp, #-24]	@ 0xffffffe8
 800c6d4:	ed1b 1a05 	vldr	s2, [fp, #-20]	@ 0xffffffec
 800c6d8:	ed5b 0a04 	vldr	s1, [fp, #-16]
 800c6dc:	ed1b 0a03 	vldr	s0, [fp, #-12]
 800c6e0:	ed1b 8a02 	vldr	s16, [fp, #-8]
 800c6e4:	ed5b 8a01 	vldr	s17, [fp, #-4]
 800c6e8:	eddf 6af5 	vldr	s13, [pc, #980]	@ 800cac0 <arm_fir_f32+0x4a8>
 800c6ec:	465a      	mov	r2, fp
 800c6ee:	f1be 0f00 	cmp.w	lr, #0
 800c6f2:	f000 81fe 	beq.w	800caf2 <arm_fir_f32+0x4da>
 800c6f6:	f10b 0120 	add.w	r1, fp, #32
 800c6fa:	eef0 ba66 	vmov.f32	s23, s13
 800c6fe:	eeb0 6a66 	vmov.f32	s12, s13
 800c702:	eeb0 9a66 	vmov.f32	s18, s13
 800c706:	eef0 9a66 	vmov.f32	s19, s13
 800c70a:	eeb0 aa66 	vmov.f32	s20, s13
 800c70e:	eef0 aa66 	vmov.f32	s21, s13
 800c712:	eeb0 ba66 	vmov.f32	s22, s13
 800c716:	460a      	mov	r2, r1
 800c718:	4653      	mov	r3, sl
 800c71a:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 800c71e:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 800c722:	ed53 ea07 	vldr	s29, [r3, #-28]	@ 0xffffffe4
 800c726:	ed13 ea06 	vldr	s28, [r3, #-24]	@ 0xffffffe8
 800c72a:	ed53 da05 	vldr	s27, [r3, #-20]	@ 0xffffffec
 800c72e:	ed53 ca04 	vldr	s25, [r3, #-16]
 800c732:	ed53 2a03 	vldr	s5, [r3, #-12]
 800c736:	ed13 4a02 	vldr	s8, [r3, #-8]
 800c73a:	ed13 5a01 	vldr	s10, [r3, #-4]
 800c73e:	ee67 fa02 	vmul.f32	s31, s14, s4
 800c742:	ee27 da21 	vmul.f32	s26, s14, s3
 800c746:	ed12 2a07 	vldr	s4, [r2, #-28]	@ 0xffffffe4
 800c74a:	ee27 ca01 	vmul.f32	s24, s14, s2
 800c74e:	ee27 3a20 	vmul.f32	s6, s14, s1
 800c752:	ee67 3a00 	vmul.f32	s7, s14, s0
 800c756:	ee67 5a08 	vmul.f32	s11, s14, s16
 800c75a:	ee27 fa28 	vmul.f32	s30, s14, s17
 800c75e:	ee67 7a24 	vmul.f32	s15, s14, s9
 800c762:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800c766:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800c76a:	ee6e faa1 	vmul.f32	s31, s29, s3
 800c76e:	ee2e da81 	vmul.f32	s26, s29, s2
 800c772:	ed52 1a06 	vldr	s3, [r2, #-24]	@ 0xffffffe8
 800c776:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800c77a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c77e:	ee2e caa0 	vmul.f32	s24, s29, s1
 800c782:	ee2e 3a80 	vmul.f32	s6, s29, s0
 800c786:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c78a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c78e:	ee6e 3a88 	vmul.f32	s7, s29, s16
 800c792:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 800c796:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800c79a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c79e:	ee24 faae 	vmul.f32	s30, s9, s29
 800c7a2:	ee6e ea82 	vmul.f32	s29, s29, s4
 800c7a6:	ee2e 7a01 	vmul.f32	s14, s28, s2
 800c7aa:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800c7ae:	ed12 1a05 	vldr	s2, [r2, #-20]	@ 0xffffffec
 800c7b2:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800c7b6:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800c7ba:	ee2e da20 	vmul.f32	s26, s28, s1
 800c7be:	ee2e ca00 	vmul.f32	s24, s28, s0
 800c7c2:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c7c6:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c7ca:	ee2e 3a08 	vmul.f32	s6, s28, s16
 800c7ce:	ee6e 3a28 	vmul.f32	s7, s28, s17
 800c7d2:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c7d6:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800c7da:	ee64 5a8e 	vmul.f32	s11, s9, s28
 800c7de:	ee22 fa0e 	vmul.f32	s30, s4, s28
 800c7e2:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 800c7e6:	ee2e ea21 	vmul.f32	s28, s28, s3
 800c7ea:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 800c7ee:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800c7f2:	ed52 0a04 	vldr	s1, [r2, #-16]
 800c7f6:	ee2d da80 	vmul.f32	s26, s27, s0
 800c7fa:	ee37 ba0b 	vadd.f32	s22, s14, s22
 800c7fe:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800c802:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c806:	ee2d ca88 	vmul.f32	s24, s27, s16
 800c80a:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 800c80e:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c812:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c816:	ee64 3aad 	vmul.f32	s7, s9, s27
 800c81a:	ee62 5a2d 	vmul.f32	s11, s4, s27
 800c81e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800c822:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800c826:	ee21 faad 	vmul.f32	s30, s3, s27
 800c82a:	ee6d da81 	vmul.f32	s27, s27, s2
 800c82e:	ee6c fa80 	vmul.f32	s31, s25, s0
 800c832:	ee36 ba8b 	vadd.f32	s22, s13, s22
 800c836:	ed12 0a03 	vldr	s0, [r2, #-12]
 800c83a:	ee3d da2a 	vadd.f32	s26, s26, s21
 800c83e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800c842:	ee6c aa88 	vmul.f32	s21, s25, s16
 800c846:	ee2c caa8 	vmul.f32	s24, s25, s17
 800c84a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c84e:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c852:	ee24 3aac 	vmul.f32	s6, s9, s25
 800c856:	ee62 3a2c 	vmul.f32	s7, s4, s25
 800c85a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c85e:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800c862:	ee61 5aac 	vmul.f32	s11, s3, s25
 800c866:	ee21 fa2c 	vmul.f32	s30, s2, s25
 800c86a:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800c86e:	ee6c caa0 	vmul.f32	s25, s25, s1
 800c872:	ee62 ea88 	vmul.f32	s29, s5, s16
 800c876:	ee3a da8d 	vadd.f32	s26, s21, s26
 800c87a:	ed12 8a02 	vldr	s16, [r2, #-8]
 800c87e:	ee62 aaa8 	vmul.f32	s21, s5, s17
 800c882:	ee3f ba8b 	vadd.f32	s22, s31, s22
 800c886:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800c88a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c88e:	ee24 caa2 	vmul.f32	s24, s9, s5
 800c892:	ee22 3a22 	vmul.f32	s6, s4, s5
 800c896:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c89a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c89e:	ee61 3aa2 	vmul.f32	s7, s3, s5
 800c8a2:	ee61 5a22 	vmul.f32	s11, s2, s5
 800c8a6:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800c8aa:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 800c8ae:	ee20 faa2 	vmul.f32	s30, s1, s5
 800c8b2:	ee62 2a80 	vmul.f32	s5, s5, s0
 800c8b6:	ee7e fa8b 	vadd.f32	s31, s29, s22
 800c8ba:	ee72 7aa7 	vadd.f32	s15, s5, s15
 800c8be:	ee24 ba28 	vmul.f32	s22, s8, s17
 800c8c2:	ee7a aa8d 	vadd.f32	s21, s21, s26
 800c8c6:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800c8ca:	ee24 da84 	vmul.f32	s26, s9, s8
 800c8ce:	ee22 ca04 	vmul.f32	s24, s4, s8
 800c8d2:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c8d6:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c8da:	ee21 3a84 	vmul.f32	s6, s3, s8
 800c8de:	ee61 3a04 	vmul.f32	s7, s2, s8
 800c8e2:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c8e6:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800c8ea:	ee60 5a84 	vmul.f32	s11, s1, s8
 800c8ee:	ee20 7a04 	vmul.f32	s14, s0, s8
 800c8f2:	ee64 6a08 	vmul.f32	s13, s8, s16
 800c8f6:	ed52 8a01 	vldr	s17, [r2, #-4]
 800c8fa:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c8fe:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c902:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c906:	ee37 7a2b 	vadd.f32	s14, s14, s23
 800c90a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c90e:	ee3b ba2f 	vadd.f32	s22, s22, s31
 800c912:	ee64 4a85 	vmul.f32	s9, s9, s10
 800c916:	ee7d aa2a 	vadd.f32	s21, s26, s21
 800c91a:	ee22 4a05 	vmul.f32	s8, s4, s10
 800c91e:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800c922:	ee61 2a85 	vmul.f32	s5, s3, s10
 800c926:	ee21 3a05 	vmul.f32	s6, s2, s10
 800c92a:	ee60 3a85 	vmul.f32	s7, s1, s10
 800c92e:	ee60 5a05 	vmul.f32	s11, s0, s10
 800c932:	ee68 ba05 	vmul.f32	s23, s16, s10
 800c936:	ee65 7a28 	vmul.f32	s15, s10, s17
 800c93a:	3320      	adds	r3, #32
 800c93c:	429f      	cmp	r7, r3
 800c93e:	ee34 ba8b 	vadd.f32	s22, s9, s22
 800c942:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800c946:	ee32 aa8a 	vadd.f32	s20, s5, s20
 800c94a:	ee73 9a29 	vadd.f32	s19, s6, s19
 800c94e:	ee33 9a89 	vadd.f32	s18, s7, s18
 800c952:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c956:	ee7b ba87 	vadd.f32	s23, s23, s14
 800c95a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800c95e:	f102 0220 	add.w	r2, r2, #32
 800c962:	f47f aeda 	bne.w	800c71a <arm_fir_f32+0x102>
 800c966:	eb0b 0208 	add.w	r2, fp, r8
 800c96a:	46cb      	mov	fp, r9
 800c96c:	b3a0      	cbz	r0, 800c9d8 <arm_fir_f32+0x3c0>
 800c96e:	4603      	mov	r3, r0
 800c970:	ecfb 7a01 	vldmia	fp!, {s15}
 800c974:	ecf2 5a01 	vldmia	r2!, {s11}
 800c978:	ee27 2a82 	vmul.f32	s4, s15, s4
 800c97c:	ee67 2aa1 	vmul.f32	s5, s15, s3
 800c980:	ee27 3a81 	vmul.f32	s6, s15, s2
 800c984:	ee67 3aa0 	vmul.f32	s7, s15, s1
 800c988:	ee27 4a80 	vmul.f32	s8, s15, s0
 800c98c:	ee67 4a88 	vmul.f32	s9, s15, s16
 800c990:	ee27 5aa8 	vmul.f32	s10, s15, s17
 800c994:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c998:	3b01      	subs	r3, #1
 800c99a:	ee3b ba02 	vadd.f32	s22, s22, s4
 800c99e:	ee7a aaa2 	vadd.f32	s21, s21, s5
 800c9a2:	eeb0 2a61 	vmov.f32	s4, s3
 800c9a6:	ee3a aa03 	vadd.f32	s20, s20, s6
 800c9aa:	eef0 1a41 	vmov.f32	s3, s2
 800c9ae:	ee79 9aa3 	vadd.f32	s19, s19, s7
 800c9b2:	eeb0 1a60 	vmov.f32	s2, s1
 800c9b6:	ee39 9a04 	vadd.f32	s18, s18, s8
 800c9ba:	eef0 0a40 	vmov.f32	s1, s0
 800c9be:	ee36 6a24 	vadd.f32	s12, s12, s9
 800c9c2:	eeb0 0a48 	vmov.f32	s0, s16
 800c9c6:	ee7b ba85 	vadd.f32	s23, s23, s10
 800c9ca:	eeb0 8a68 	vmov.f32	s16, s17
 800c9ce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c9d2:	eef0 8a65 	vmov.f32	s17, s11
 800c9d6:	d1cb      	bne.n	800c970 <arm_fir_f32+0x358>
 800c9d8:	f1bc 0c01 	subs.w	ip, ip, #1
 800c9dc:	ed04 ba08 	vstr	s22, [r4, #-32]	@ 0xffffffe0
 800c9e0:	ed44 aa07 	vstr	s21, [r4, #-28]	@ 0xffffffe4
 800c9e4:	ed04 aa06 	vstr	s20, [r4, #-24]	@ 0xffffffe8
 800c9e8:	ed44 9a05 	vstr	s19, [r4, #-20]	@ 0xffffffec
 800c9ec:	ed04 9a04 	vstr	s18, [r4, #-16]
 800c9f0:	ed04 6a03 	vstr	s12, [r4, #-12]
 800c9f4:	ed44 ba02 	vstr	s23, [r4, #-8]
 800c9f8:	ed44 6a01 	vstr	s13, [r4, #-4]
 800c9fc:	f106 0620 	add.w	r6, r6, #32
 800ca00:	f105 0520 	add.w	r5, r5, #32
 800ca04:	f104 0420 	add.w	r4, r4, #32
 800ca08:	468b      	mov	fp, r1
 800ca0a:	f47f ae3f 	bne.w	800c68c <arm_fir_f32+0x74>
 800ca0e:	9b01      	ldr	r3, [sp, #4]
 800ca10:	9800      	ldr	r0, [sp, #0]
 800ca12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca18:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 800ca1c:	015b      	lsls	r3, r3, #5
 800ca1e:	4418      	add	r0, r3
 800ca20:	4419      	add	r1, r3
 800ca22:	441a      	add	r2, r3
 800ca24:	4499      	add	r9, r3
 800ca26:	9000      	str	r0, [sp, #0]
 800ca28:	9b04      	ldr	r3, [sp, #16]
 800ca2a:	f013 0707 	ands.w	r7, r3, #7
 800ca2e:	d020      	beq.n	800ca72 <arm_fir_f32+0x45a>
 800ca30:	00bf      	lsls	r7, r7, #2
 800ca32:	9e00      	ldr	r6, [sp, #0]
 800ca34:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ca38:	eb01 0c07 	add.w	ip, r1, r7
 800ca3c:	464d      	mov	r5, r9
 800ca3e:	f851 3b04 	ldr.w	r3, [r1], #4
 800ca42:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800cac0 <arm_fir_f32+0x4a8>
 800ca46:	f846 3b04 	str.w	r3, [r6], #4
 800ca4a:	4674      	mov	r4, lr
 800ca4c:	4643      	mov	r3, r8
 800ca4e:	4628      	mov	r0, r5
 800ca50:	ecf0 7a01 	vldmia	r0!, {s15}
 800ca54:	ecf4 6a01 	vldmia	r4!, {s13}
 800ca58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ca5c:	3b01      	subs	r3, #1
 800ca5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ca62:	d1f5      	bne.n	800ca50 <arm_fir_f32+0x438>
 800ca64:	4561      	cmp	r1, ip
 800ca66:	eca2 7a01 	vstmia	r2!, {s14}
 800ca6a:	f105 0504 	add.w	r5, r5, #4
 800ca6e:	d1e6      	bne.n	800ca3e <arm_fir_f32+0x426>
 800ca70:	44b9      	add	r9, r7
 800ca72:	f108 38ff 	add.w	r8, r8, #4294967295
 800ca76:	9b03      	ldr	r3, [sp, #12]
 800ca78:	ea5f 0498 	movs.w	r4, r8, lsr #2
 800ca7c:	685d      	ldr	r5, [r3, #4]
 800ca7e:	d021      	beq.n	800cac4 <arm_fir_f32+0x4ac>
 800ca80:	f109 0210 	add.w	r2, r9, #16
 800ca84:	f105 0310 	add.w	r3, r5, #16
 800ca88:	4621      	mov	r1, r4
 800ca8a:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800ca8e:	f843 0c10 	str.w	r0, [r3, #-16]
 800ca92:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800ca96:	f843 0c0c 	str.w	r0, [r3, #-12]
 800ca9a:	f852 0c08 	ldr.w	r0, [r2, #-8]
 800ca9e:	f843 0c08 	str.w	r0, [r3, #-8]
 800caa2:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800caa6:	f843 0c04 	str.w	r0, [r3, #-4]
 800caaa:	3901      	subs	r1, #1
 800caac:	f102 0210 	add.w	r2, r2, #16
 800cab0:	f103 0310 	add.w	r3, r3, #16
 800cab4:	d1e9      	bne.n	800ca8a <arm_fir_f32+0x472>
 800cab6:	0124      	lsls	r4, r4, #4
 800cab8:	44a1      	add	r9, r4
 800caba:	4425      	add	r5, r4
 800cabc:	e002      	b.n	800cac4 <arm_fir_f32+0x4ac>
 800cabe:	bf00      	nop
 800cac0:	00000000 	.word	0x00000000
 800cac4:	f018 0803 	ands.w	r8, r8, #3
 800cac8:	d00e      	beq.n	800cae8 <arm_fir_f32+0x4d0>
 800caca:	f8d9 3000 	ldr.w	r3, [r9]
 800cace:	602b      	str	r3, [r5, #0]
 800cad0:	f1b8 0801 	subs.w	r8, r8, #1
 800cad4:	d008      	beq.n	800cae8 <arm_fir_f32+0x4d0>
 800cad6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cada:	606b      	str	r3, [r5, #4]
 800cadc:	f1b8 0f01 	cmp.w	r8, #1
 800cae0:	bf1c      	itt	ne
 800cae2:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 800cae6:	60ab      	strne	r3, [r5, #8]
 800cae8:	b00b      	add	sp, #44	@ 0x2c
 800caea:	ecbd 8b10 	vpop	{d8-d15}
 800caee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caf2:	eef0 ba66 	vmov.f32	s23, s13
 800caf6:	eeb0 6a66 	vmov.f32	s12, s13
 800cafa:	eeb0 9a66 	vmov.f32	s18, s13
 800cafe:	eef0 9a66 	vmov.f32	s19, s13
 800cb02:	eeb0 aa66 	vmov.f32	s20, s13
 800cb06:	eef0 aa66 	vmov.f32	s21, s13
 800cb0a:	eeb0 ba66 	vmov.f32	s22, s13
 800cb0e:	f8dd b008 	ldr.w	fp, [sp, #8]
 800cb12:	f102 0120 	add.w	r1, r2, #32
 800cb16:	e729      	b.n	800c96c <arm_fir_f32+0x354>

0800cb18 <arm_biquad_cascade_df1_init_f32>:
 800cb18:	b510      	push	{r4, lr}
 800cb1a:	6082      	str	r2, [r0, #8]
 800cb1c:	6001      	str	r1, [r0, #0]
 800cb1e:	4604      	mov	r4, r0
 800cb20:	010a      	lsls	r2, r1, #4
 800cb22:	4618      	mov	r0, r3
 800cb24:	2100      	movs	r1, #0
 800cb26:	f000 fef1 	bl	800d90c <memset>
 800cb2a:	6060      	str	r0, [r4, #4]
 800cb2c:	bd10      	pop	{r4, pc}
 800cb2e:	bf00      	nop

0800cb30 <srand>:
 800cb30:	b538      	push	{r3, r4, r5, lr}
 800cb32:	4b10      	ldr	r3, [pc, #64]	@ (800cb74 <srand+0x44>)
 800cb34:	681d      	ldr	r5, [r3, #0]
 800cb36:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800cb38:	4604      	mov	r4, r0
 800cb3a:	b9b3      	cbnz	r3, 800cb6a <srand+0x3a>
 800cb3c:	2018      	movs	r0, #24
 800cb3e:	f001 fe35 	bl	800e7ac <malloc>
 800cb42:	4602      	mov	r2, r0
 800cb44:	6328      	str	r0, [r5, #48]	@ 0x30
 800cb46:	b920      	cbnz	r0, 800cb52 <srand+0x22>
 800cb48:	4b0b      	ldr	r3, [pc, #44]	@ (800cb78 <srand+0x48>)
 800cb4a:	480c      	ldr	r0, [pc, #48]	@ (800cb7c <srand+0x4c>)
 800cb4c:	2146      	movs	r1, #70	@ 0x46
 800cb4e:	f000 ff6b 	bl	800da28 <__assert_func>
 800cb52:	490b      	ldr	r1, [pc, #44]	@ (800cb80 <srand+0x50>)
 800cb54:	4b0b      	ldr	r3, [pc, #44]	@ (800cb84 <srand+0x54>)
 800cb56:	e9c0 1300 	strd	r1, r3, [r0]
 800cb5a:	4b0b      	ldr	r3, [pc, #44]	@ (800cb88 <srand+0x58>)
 800cb5c:	6083      	str	r3, [r0, #8]
 800cb5e:	230b      	movs	r3, #11
 800cb60:	8183      	strh	r3, [r0, #12]
 800cb62:	2100      	movs	r1, #0
 800cb64:	2001      	movs	r0, #1
 800cb66:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800cb6a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	611c      	str	r4, [r3, #16]
 800cb70:	615a      	str	r2, [r3, #20]
 800cb72:	bd38      	pop	{r3, r4, r5, pc}
 800cb74:	2000007c 	.word	0x2000007c
 800cb78:	0800fb30 	.word	0x0800fb30
 800cb7c:	0800fb47 	.word	0x0800fb47
 800cb80:	abcd330e 	.word	0xabcd330e
 800cb84:	e66d1234 	.word	0xe66d1234
 800cb88:	0005deec 	.word	0x0005deec

0800cb8c <rand>:
 800cb8c:	4b16      	ldr	r3, [pc, #88]	@ (800cbe8 <rand+0x5c>)
 800cb8e:	b510      	push	{r4, lr}
 800cb90:	681c      	ldr	r4, [r3, #0]
 800cb92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cb94:	b9b3      	cbnz	r3, 800cbc4 <rand+0x38>
 800cb96:	2018      	movs	r0, #24
 800cb98:	f001 fe08 	bl	800e7ac <malloc>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	6320      	str	r0, [r4, #48]	@ 0x30
 800cba0:	b920      	cbnz	r0, 800cbac <rand+0x20>
 800cba2:	4b12      	ldr	r3, [pc, #72]	@ (800cbec <rand+0x60>)
 800cba4:	4812      	ldr	r0, [pc, #72]	@ (800cbf0 <rand+0x64>)
 800cba6:	2152      	movs	r1, #82	@ 0x52
 800cba8:	f000 ff3e 	bl	800da28 <__assert_func>
 800cbac:	4911      	ldr	r1, [pc, #68]	@ (800cbf4 <rand+0x68>)
 800cbae:	4b12      	ldr	r3, [pc, #72]	@ (800cbf8 <rand+0x6c>)
 800cbb0:	e9c0 1300 	strd	r1, r3, [r0]
 800cbb4:	4b11      	ldr	r3, [pc, #68]	@ (800cbfc <rand+0x70>)
 800cbb6:	6083      	str	r3, [r0, #8]
 800cbb8:	230b      	movs	r3, #11
 800cbba:	8183      	strh	r3, [r0, #12]
 800cbbc:	2100      	movs	r1, #0
 800cbbe:	2001      	movs	r0, #1
 800cbc0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800cbc4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cbc6:	480e      	ldr	r0, [pc, #56]	@ (800cc00 <rand+0x74>)
 800cbc8:	690b      	ldr	r3, [r1, #16]
 800cbca:	694c      	ldr	r4, [r1, #20]
 800cbcc:	4a0d      	ldr	r2, [pc, #52]	@ (800cc04 <rand+0x78>)
 800cbce:	4358      	muls	r0, r3
 800cbd0:	fb02 0004 	mla	r0, r2, r4, r0
 800cbd4:	fba3 3202 	umull	r3, r2, r3, r2
 800cbd8:	3301      	adds	r3, #1
 800cbda:	eb40 0002 	adc.w	r0, r0, r2
 800cbde:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800cbe2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800cbe6:	bd10      	pop	{r4, pc}
 800cbe8:	2000007c 	.word	0x2000007c
 800cbec:	0800fb30 	.word	0x0800fb30
 800cbf0:	0800fb47 	.word	0x0800fb47
 800cbf4:	abcd330e 	.word	0xabcd330e
 800cbf8:	e66d1234 	.word	0xe66d1234
 800cbfc:	0005deec 	.word	0x0005deec
 800cc00:	5851f42d 	.word	0x5851f42d
 800cc04:	4c957f2d 	.word	0x4c957f2d

0800cc08 <__cvt>:
 800cc08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc0c:	ec57 6b10 	vmov	r6, r7, d0
 800cc10:	2f00      	cmp	r7, #0
 800cc12:	460c      	mov	r4, r1
 800cc14:	4619      	mov	r1, r3
 800cc16:	463b      	mov	r3, r7
 800cc18:	bfbb      	ittet	lt
 800cc1a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cc1e:	461f      	movlt	r7, r3
 800cc20:	2300      	movge	r3, #0
 800cc22:	232d      	movlt	r3, #45	@ 0x2d
 800cc24:	700b      	strb	r3, [r1, #0]
 800cc26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc28:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cc2c:	4691      	mov	r9, r2
 800cc2e:	f023 0820 	bic.w	r8, r3, #32
 800cc32:	bfbc      	itt	lt
 800cc34:	4632      	movlt	r2, r6
 800cc36:	4616      	movlt	r6, r2
 800cc38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cc3c:	d005      	beq.n	800cc4a <__cvt+0x42>
 800cc3e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cc42:	d100      	bne.n	800cc46 <__cvt+0x3e>
 800cc44:	3401      	adds	r4, #1
 800cc46:	2102      	movs	r1, #2
 800cc48:	e000      	b.n	800cc4c <__cvt+0x44>
 800cc4a:	2103      	movs	r1, #3
 800cc4c:	ab03      	add	r3, sp, #12
 800cc4e:	9301      	str	r3, [sp, #4]
 800cc50:	ab02      	add	r3, sp, #8
 800cc52:	9300      	str	r3, [sp, #0]
 800cc54:	ec47 6b10 	vmov	d0, r6, r7
 800cc58:	4653      	mov	r3, sl
 800cc5a:	4622      	mov	r2, r4
 800cc5c:	f000 ff8c 	bl	800db78 <_dtoa_r>
 800cc60:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cc64:	4605      	mov	r5, r0
 800cc66:	d119      	bne.n	800cc9c <__cvt+0x94>
 800cc68:	f019 0f01 	tst.w	r9, #1
 800cc6c:	d00e      	beq.n	800cc8c <__cvt+0x84>
 800cc6e:	eb00 0904 	add.w	r9, r0, r4
 800cc72:	2200      	movs	r2, #0
 800cc74:	2300      	movs	r3, #0
 800cc76:	4630      	mov	r0, r6
 800cc78:	4639      	mov	r1, r7
 800cc7a:	f7f3 ff25 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc7e:	b108      	cbz	r0, 800cc84 <__cvt+0x7c>
 800cc80:	f8cd 900c 	str.w	r9, [sp, #12]
 800cc84:	2230      	movs	r2, #48	@ 0x30
 800cc86:	9b03      	ldr	r3, [sp, #12]
 800cc88:	454b      	cmp	r3, r9
 800cc8a:	d31e      	bcc.n	800ccca <__cvt+0xc2>
 800cc8c:	9b03      	ldr	r3, [sp, #12]
 800cc8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc90:	1b5b      	subs	r3, r3, r5
 800cc92:	4628      	mov	r0, r5
 800cc94:	6013      	str	r3, [r2, #0]
 800cc96:	b004      	add	sp, #16
 800cc98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cca0:	eb00 0904 	add.w	r9, r0, r4
 800cca4:	d1e5      	bne.n	800cc72 <__cvt+0x6a>
 800cca6:	7803      	ldrb	r3, [r0, #0]
 800cca8:	2b30      	cmp	r3, #48	@ 0x30
 800ccaa:	d10a      	bne.n	800ccc2 <__cvt+0xba>
 800ccac:	2200      	movs	r2, #0
 800ccae:	2300      	movs	r3, #0
 800ccb0:	4630      	mov	r0, r6
 800ccb2:	4639      	mov	r1, r7
 800ccb4:	f7f3 ff08 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccb8:	b918      	cbnz	r0, 800ccc2 <__cvt+0xba>
 800ccba:	f1c4 0401 	rsb	r4, r4, #1
 800ccbe:	f8ca 4000 	str.w	r4, [sl]
 800ccc2:	f8da 3000 	ldr.w	r3, [sl]
 800ccc6:	4499      	add	r9, r3
 800ccc8:	e7d3      	b.n	800cc72 <__cvt+0x6a>
 800ccca:	1c59      	adds	r1, r3, #1
 800cccc:	9103      	str	r1, [sp, #12]
 800ccce:	701a      	strb	r2, [r3, #0]
 800ccd0:	e7d9      	b.n	800cc86 <__cvt+0x7e>

0800ccd2 <__exponent>:
 800ccd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ccd4:	2900      	cmp	r1, #0
 800ccd6:	bfba      	itte	lt
 800ccd8:	4249      	neglt	r1, r1
 800ccda:	232d      	movlt	r3, #45	@ 0x2d
 800ccdc:	232b      	movge	r3, #43	@ 0x2b
 800ccde:	2909      	cmp	r1, #9
 800cce0:	7002      	strb	r2, [r0, #0]
 800cce2:	7043      	strb	r3, [r0, #1]
 800cce4:	dd29      	ble.n	800cd3a <__exponent+0x68>
 800cce6:	f10d 0307 	add.w	r3, sp, #7
 800ccea:	461d      	mov	r5, r3
 800ccec:	270a      	movs	r7, #10
 800ccee:	461a      	mov	r2, r3
 800ccf0:	fbb1 f6f7 	udiv	r6, r1, r7
 800ccf4:	fb07 1416 	mls	r4, r7, r6, r1
 800ccf8:	3430      	adds	r4, #48	@ 0x30
 800ccfa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ccfe:	460c      	mov	r4, r1
 800cd00:	2c63      	cmp	r4, #99	@ 0x63
 800cd02:	f103 33ff 	add.w	r3, r3, #4294967295
 800cd06:	4631      	mov	r1, r6
 800cd08:	dcf1      	bgt.n	800ccee <__exponent+0x1c>
 800cd0a:	3130      	adds	r1, #48	@ 0x30
 800cd0c:	1e94      	subs	r4, r2, #2
 800cd0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cd12:	1c41      	adds	r1, r0, #1
 800cd14:	4623      	mov	r3, r4
 800cd16:	42ab      	cmp	r3, r5
 800cd18:	d30a      	bcc.n	800cd30 <__exponent+0x5e>
 800cd1a:	f10d 0309 	add.w	r3, sp, #9
 800cd1e:	1a9b      	subs	r3, r3, r2
 800cd20:	42ac      	cmp	r4, r5
 800cd22:	bf88      	it	hi
 800cd24:	2300      	movhi	r3, #0
 800cd26:	3302      	adds	r3, #2
 800cd28:	4403      	add	r3, r0
 800cd2a:	1a18      	subs	r0, r3, r0
 800cd2c:	b003      	add	sp, #12
 800cd2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd30:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cd34:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cd38:	e7ed      	b.n	800cd16 <__exponent+0x44>
 800cd3a:	2330      	movs	r3, #48	@ 0x30
 800cd3c:	3130      	adds	r1, #48	@ 0x30
 800cd3e:	7083      	strb	r3, [r0, #2]
 800cd40:	70c1      	strb	r1, [r0, #3]
 800cd42:	1d03      	adds	r3, r0, #4
 800cd44:	e7f1      	b.n	800cd2a <__exponent+0x58>
	...

0800cd48 <_printf_float>:
 800cd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd4c:	b08d      	sub	sp, #52	@ 0x34
 800cd4e:	460c      	mov	r4, r1
 800cd50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cd54:	4616      	mov	r6, r2
 800cd56:	461f      	mov	r7, r3
 800cd58:	4605      	mov	r5, r0
 800cd5a:	f000 fddf 	bl	800d91c <_localeconv_r>
 800cd5e:	6803      	ldr	r3, [r0, #0]
 800cd60:	9304      	str	r3, [sp, #16]
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7f3 fa84 	bl	8000270 <strlen>
 800cd68:	2300      	movs	r3, #0
 800cd6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd6c:	f8d8 3000 	ldr.w	r3, [r8]
 800cd70:	9005      	str	r0, [sp, #20]
 800cd72:	3307      	adds	r3, #7
 800cd74:	f023 0307 	bic.w	r3, r3, #7
 800cd78:	f103 0208 	add.w	r2, r3, #8
 800cd7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cd80:	f8d4 b000 	ldr.w	fp, [r4]
 800cd84:	f8c8 2000 	str.w	r2, [r8]
 800cd88:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cd90:	9307      	str	r3, [sp, #28]
 800cd92:	f8cd 8018 	str.w	r8, [sp, #24]
 800cd96:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cd9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd9e:	4b9c      	ldr	r3, [pc, #624]	@ (800d010 <_printf_float+0x2c8>)
 800cda0:	f04f 32ff 	mov.w	r2, #4294967295
 800cda4:	f7f3 fec2 	bl	8000b2c <__aeabi_dcmpun>
 800cda8:	bb70      	cbnz	r0, 800ce08 <_printf_float+0xc0>
 800cdaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cdae:	4b98      	ldr	r3, [pc, #608]	@ (800d010 <_printf_float+0x2c8>)
 800cdb0:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb4:	f7f3 fe9c 	bl	8000af0 <__aeabi_dcmple>
 800cdb8:	bb30      	cbnz	r0, 800ce08 <_printf_float+0xc0>
 800cdba:	2200      	movs	r2, #0
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	4640      	mov	r0, r8
 800cdc0:	4649      	mov	r1, r9
 800cdc2:	f7f3 fe8b 	bl	8000adc <__aeabi_dcmplt>
 800cdc6:	b110      	cbz	r0, 800cdce <_printf_float+0x86>
 800cdc8:	232d      	movs	r3, #45	@ 0x2d
 800cdca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdce:	4a91      	ldr	r2, [pc, #580]	@ (800d014 <_printf_float+0x2cc>)
 800cdd0:	4b91      	ldr	r3, [pc, #580]	@ (800d018 <_printf_float+0x2d0>)
 800cdd2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cdd6:	bf8c      	ite	hi
 800cdd8:	4690      	movhi	r8, r2
 800cdda:	4698      	movls	r8, r3
 800cddc:	2303      	movs	r3, #3
 800cdde:	6123      	str	r3, [r4, #16]
 800cde0:	f02b 0304 	bic.w	r3, fp, #4
 800cde4:	6023      	str	r3, [r4, #0]
 800cde6:	f04f 0900 	mov.w	r9, #0
 800cdea:	9700      	str	r7, [sp, #0]
 800cdec:	4633      	mov	r3, r6
 800cdee:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cdf0:	4621      	mov	r1, r4
 800cdf2:	4628      	mov	r0, r5
 800cdf4:	f000 f9d2 	bl	800d19c <_printf_common>
 800cdf8:	3001      	adds	r0, #1
 800cdfa:	f040 808d 	bne.w	800cf18 <_printf_float+0x1d0>
 800cdfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ce02:	b00d      	add	sp, #52	@ 0x34
 800ce04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce08:	4642      	mov	r2, r8
 800ce0a:	464b      	mov	r3, r9
 800ce0c:	4640      	mov	r0, r8
 800ce0e:	4649      	mov	r1, r9
 800ce10:	f7f3 fe8c 	bl	8000b2c <__aeabi_dcmpun>
 800ce14:	b140      	cbz	r0, 800ce28 <_printf_float+0xe0>
 800ce16:	464b      	mov	r3, r9
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	bfbc      	itt	lt
 800ce1c:	232d      	movlt	r3, #45	@ 0x2d
 800ce1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ce22:	4a7e      	ldr	r2, [pc, #504]	@ (800d01c <_printf_float+0x2d4>)
 800ce24:	4b7e      	ldr	r3, [pc, #504]	@ (800d020 <_printf_float+0x2d8>)
 800ce26:	e7d4      	b.n	800cdd2 <_printf_float+0x8a>
 800ce28:	6863      	ldr	r3, [r4, #4]
 800ce2a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ce2e:	9206      	str	r2, [sp, #24]
 800ce30:	1c5a      	adds	r2, r3, #1
 800ce32:	d13b      	bne.n	800ceac <_printf_float+0x164>
 800ce34:	2306      	movs	r3, #6
 800ce36:	6063      	str	r3, [r4, #4]
 800ce38:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	6022      	str	r2, [r4, #0]
 800ce40:	9303      	str	r3, [sp, #12]
 800ce42:	ab0a      	add	r3, sp, #40	@ 0x28
 800ce44:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ce48:	ab09      	add	r3, sp, #36	@ 0x24
 800ce4a:	9300      	str	r3, [sp, #0]
 800ce4c:	6861      	ldr	r1, [r4, #4]
 800ce4e:	ec49 8b10 	vmov	d0, r8, r9
 800ce52:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ce56:	4628      	mov	r0, r5
 800ce58:	f7ff fed6 	bl	800cc08 <__cvt>
 800ce5c:	9b06      	ldr	r3, [sp, #24]
 800ce5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce60:	2b47      	cmp	r3, #71	@ 0x47
 800ce62:	4680      	mov	r8, r0
 800ce64:	d129      	bne.n	800ceba <_printf_float+0x172>
 800ce66:	1cc8      	adds	r0, r1, #3
 800ce68:	db02      	blt.n	800ce70 <_printf_float+0x128>
 800ce6a:	6863      	ldr	r3, [r4, #4]
 800ce6c:	4299      	cmp	r1, r3
 800ce6e:	dd41      	ble.n	800cef4 <_printf_float+0x1ac>
 800ce70:	f1aa 0a02 	sub.w	sl, sl, #2
 800ce74:	fa5f fa8a 	uxtb.w	sl, sl
 800ce78:	3901      	subs	r1, #1
 800ce7a:	4652      	mov	r2, sl
 800ce7c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ce80:	9109      	str	r1, [sp, #36]	@ 0x24
 800ce82:	f7ff ff26 	bl	800ccd2 <__exponent>
 800ce86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce88:	1813      	adds	r3, r2, r0
 800ce8a:	2a01      	cmp	r2, #1
 800ce8c:	4681      	mov	r9, r0
 800ce8e:	6123      	str	r3, [r4, #16]
 800ce90:	dc02      	bgt.n	800ce98 <_printf_float+0x150>
 800ce92:	6822      	ldr	r2, [r4, #0]
 800ce94:	07d2      	lsls	r2, r2, #31
 800ce96:	d501      	bpl.n	800ce9c <_printf_float+0x154>
 800ce98:	3301      	adds	r3, #1
 800ce9a:	6123      	str	r3, [r4, #16]
 800ce9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d0a2      	beq.n	800cdea <_printf_float+0xa2>
 800cea4:	232d      	movs	r3, #45	@ 0x2d
 800cea6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ceaa:	e79e      	b.n	800cdea <_printf_float+0xa2>
 800ceac:	9a06      	ldr	r2, [sp, #24]
 800ceae:	2a47      	cmp	r2, #71	@ 0x47
 800ceb0:	d1c2      	bne.n	800ce38 <_printf_float+0xf0>
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d1c0      	bne.n	800ce38 <_printf_float+0xf0>
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e7bd      	b.n	800ce36 <_printf_float+0xee>
 800ceba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cebe:	d9db      	bls.n	800ce78 <_printf_float+0x130>
 800cec0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cec4:	d118      	bne.n	800cef8 <_printf_float+0x1b0>
 800cec6:	2900      	cmp	r1, #0
 800cec8:	6863      	ldr	r3, [r4, #4]
 800ceca:	dd0b      	ble.n	800cee4 <_printf_float+0x19c>
 800cecc:	6121      	str	r1, [r4, #16]
 800cece:	b913      	cbnz	r3, 800ced6 <_printf_float+0x18e>
 800ced0:	6822      	ldr	r2, [r4, #0]
 800ced2:	07d0      	lsls	r0, r2, #31
 800ced4:	d502      	bpl.n	800cedc <_printf_float+0x194>
 800ced6:	3301      	adds	r3, #1
 800ced8:	440b      	add	r3, r1
 800ceda:	6123      	str	r3, [r4, #16]
 800cedc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cede:	f04f 0900 	mov.w	r9, #0
 800cee2:	e7db      	b.n	800ce9c <_printf_float+0x154>
 800cee4:	b913      	cbnz	r3, 800ceec <_printf_float+0x1a4>
 800cee6:	6822      	ldr	r2, [r4, #0]
 800cee8:	07d2      	lsls	r2, r2, #31
 800ceea:	d501      	bpl.n	800cef0 <_printf_float+0x1a8>
 800ceec:	3302      	adds	r3, #2
 800ceee:	e7f4      	b.n	800ceda <_printf_float+0x192>
 800cef0:	2301      	movs	r3, #1
 800cef2:	e7f2      	b.n	800ceda <_printf_float+0x192>
 800cef4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cef8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cefa:	4299      	cmp	r1, r3
 800cefc:	db05      	blt.n	800cf0a <_printf_float+0x1c2>
 800cefe:	6823      	ldr	r3, [r4, #0]
 800cf00:	6121      	str	r1, [r4, #16]
 800cf02:	07d8      	lsls	r0, r3, #31
 800cf04:	d5ea      	bpl.n	800cedc <_printf_float+0x194>
 800cf06:	1c4b      	adds	r3, r1, #1
 800cf08:	e7e7      	b.n	800ceda <_printf_float+0x192>
 800cf0a:	2900      	cmp	r1, #0
 800cf0c:	bfd4      	ite	le
 800cf0e:	f1c1 0202 	rsble	r2, r1, #2
 800cf12:	2201      	movgt	r2, #1
 800cf14:	4413      	add	r3, r2
 800cf16:	e7e0      	b.n	800ceda <_printf_float+0x192>
 800cf18:	6823      	ldr	r3, [r4, #0]
 800cf1a:	055a      	lsls	r2, r3, #21
 800cf1c:	d407      	bmi.n	800cf2e <_printf_float+0x1e6>
 800cf1e:	6923      	ldr	r3, [r4, #16]
 800cf20:	4642      	mov	r2, r8
 800cf22:	4631      	mov	r1, r6
 800cf24:	4628      	mov	r0, r5
 800cf26:	47b8      	blx	r7
 800cf28:	3001      	adds	r0, #1
 800cf2a:	d12b      	bne.n	800cf84 <_printf_float+0x23c>
 800cf2c:	e767      	b.n	800cdfe <_printf_float+0xb6>
 800cf2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cf32:	f240 80dd 	bls.w	800d0f0 <_printf_float+0x3a8>
 800cf36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	f7f3 fdc3 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf42:	2800      	cmp	r0, #0
 800cf44:	d033      	beq.n	800cfae <_printf_float+0x266>
 800cf46:	4a37      	ldr	r2, [pc, #220]	@ (800d024 <_printf_float+0x2dc>)
 800cf48:	2301      	movs	r3, #1
 800cf4a:	4631      	mov	r1, r6
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	47b8      	blx	r7
 800cf50:	3001      	adds	r0, #1
 800cf52:	f43f af54 	beq.w	800cdfe <_printf_float+0xb6>
 800cf56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cf5a:	4543      	cmp	r3, r8
 800cf5c:	db02      	blt.n	800cf64 <_printf_float+0x21c>
 800cf5e:	6823      	ldr	r3, [r4, #0]
 800cf60:	07d8      	lsls	r0, r3, #31
 800cf62:	d50f      	bpl.n	800cf84 <_printf_float+0x23c>
 800cf64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf68:	4631      	mov	r1, r6
 800cf6a:	4628      	mov	r0, r5
 800cf6c:	47b8      	blx	r7
 800cf6e:	3001      	adds	r0, #1
 800cf70:	f43f af45 	beq.w	800cdfe <_printf_float+0xb6>
 800cf74:	f04f 0900 	mov.w	r9, #0
 800cf78:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf7c:	f104 0a1a 	add.w	sl, r4, #26
 800cf80:	45c8      	cmp	r8, r9
 800cf82:	dc09      	bgt.n	800cf98 <_printf_float+0x250>
 800cf84:	6823      	ldr	r3, [r4, #0]
 800cf86:	079b      	lsls	r3, r3, #30
 800cf88:	f100 8103 	bmi.w	800d192 <_printf_float+0x44a>
 800cf8c:	68e0      	ldr	r0, [r4, #12]
 800cf8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf90:	4298      	cmp	r0, r3
 800cf92:	bfb8      	it	lt
 800cf94:	4618      	movlt	r0, r3
 800cf96:	e734      	b.n	800ce02 <_printf_float+0xba>
 800cf98:	2301      	movs	r3, #1
 800cf9a:	4652      	mov	r2, sl
 800cf9c:	4631      	mov	r1, r6
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	47b8      	blx	r7
 800cfa2:	3001      	adds	r0, #1
 800cfa4:	f43f af2b 	beq.w	800cdfe <_printf_float+0xb6>
 800cfa8:	f109 0901 	add.w	r9, r9, #1
 800cfac:	e7e8      	b.n	800cf80 <_printf_float+0x238>
 800cfae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	dc39      	bgt.n	800d028 <_printf_float+0x2e0>
 800cfb4:	4a1b      	ldr	r2, [pc, #108]	@ (800d024 <_printf_float+0x2dc>)
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	4631      	mov	r1, r6
 800cfba:	4628      	mov	r0, r5
 800cfbc:	47b8      	blx	r7
 800cfbe:	3001      	adds	r0, #1
 800cfc0:	f43f af1d 	beq.w	800cdfe <_printf_float+0xb6>
 800cfc4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cfc8:	ea59 0303 	orrs.w	r3, r9, r3
 800cfcc:	d102      	bne.n	800cfd4 <_printf_float+0x28c>
 800cfce:	6823      	ldr	r3, [r4, #0]
 800cfd0:	07d9      	lsls	r1, r3, #31
 800cfd2:	d5d7      	bpl.n	800cf84 <_printf_float+0x23c>
 800cfd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfd8:	4631      	mov	r1, r6
 800cfda:	4628      	mov	r0, r5
 800cfdc:	47b8      	blx	r7
 800cfde:	3001      	adds	r0, #1
 800cfe0:	f43f af0d 	beq.w	800cdfe <_printf_float+0xb6>
 800cfe4:	f04f 0a00 	mov.w	sl, #0
 800cfe8:	f104 0b1a 	add.w	fp, r4, #26
 800cfec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfee:	425b      	negs	r3, r3
 800cff0:	4553      	cmp	r3, sl
 800cff2:	dc01      	bgt.n	800cff8 <_printf_float+0x2b0>
 800cff4:	464b      	mov	r3, r9
 800cff6:	e793      	b.n	800cf20 <_printf_float+0x1d8>
 800cff8:	2301      	movs	r3, #1
 800cffa:	465a      	mov	r2, fp
 800cffc:	4631      	mov	r1, r6
 800cffe:	4628      	mov	r0, r5
 800d000:	47b8      	blx	r7
 800d002:	3001      	adds	r0, #1
 800d004:	f43f aefb 	beq.w	800cdfe <_printf_float+0xb6>
 800d008:	f10a 0a01 	add.w	sl, sl, #1
 800d00c:	e7ee      	b.n	800cfec <_printf_float+0x2a4>
 800d00e:	bf00      	nop
 800d010:	7fefffff 	.word	0x7fefffff
 800d014:	0800fba3 	.word	0x0800fba3
 800d018:	0800fb9f 	.word	0x0800fb9f
 800d01c:	0800fbab 	.word	0x0800fbab
 800d020:	0800fba7 	.word	0x0800fba7
 800d024:	0800fbaf 	.word	0x0800fbaf
 800d028:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d02a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d02e:	4553      	cmp	r3, sl
 800d030:	bfa8      	it	ge
 800d032:	4653      	movge	r3, sl
 800d034:	2b00      	cmp	r3, #0
 800d036:	4699      	mov	r9, r3
 800d038:	dc36      	bgt.n	800d0a8 <_printf_float+0x360>
 800d03a:	f04f 0b00 	mov.w	fp, #0
 800d03e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d042:	f104 021a 	add.w	r2, r4, #26
 800d046:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d048:	9306      	str	r3, [sp, #24]
 800d04a:	eba3 0309 	sub.w	r3, r3, r9
 800d04e:	455b      	cmp	r3, fp
 800d050:	dc31      	bgt.n	800d0b6 <_printf_float+0x36e>
 800d052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d054:	459a      	cmp	sl, r3
 800d056:	dc3a      	bgt.n	800d0ce <_printf_float+0x386>
 800d058:	6823      	ldr	r3, [r4, #0]
 800d05a:	07da      	lsls	r2, r3, #31
 800d05c:	d437      	bmi.n	800d0ce <_printf_float+0x386>
 800d05e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d060:	ebaa 0903 	sub.w	r9, sl, r3
 800d064:	9b06      	ldr	r3, [sp, #24]
 800d066:	ebaa 0303 	sub.w	r3, sl, r3
 800d06a:	4599      	cmp	r9, r3
 800d06c:	bfa8      	it	ge
 800d06e:	4699      	movge	r9, r3
 800d070:	f1b9 0f00 	cmp.w	r9, #0
 800d074:	dc33      	bgt.n	800d0de <_printf_float+0x396>
 800d076:	f04f 0800 	mov.w	r8, #0
 800d07a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d07e:	f104 0b1a 	add.w	fp, r4, #26
 800d082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d084:	ebaa 0303 	sub.w	r3, sl, r3
 800d088:	eba3 0309 	sub.w	r3, r3, r9
 800d08c:	4543      	cmp	r3, r8
 800d08e:	f77f af79 	ble.w	800cf84 <_printf_float+0x23c>
 800d092:	2301      	movs	r3, #1
 800d094:	465a      	mov	r2, fp
 800d096:	4631      	mov	r1, r6
 800d098:	4628      	mov	r0, r5
 800d09a:	47b8      	blx	r7
 800d09c:	3001      	adds	r0, #1
 800d09e:	f43f aeae 	beq.w	800cdfe <_printf_float+0xb6>
 800d0a2:	f108 0801 	add.w	r8, r8, #1
 800d0a6:	e7ec      	b.n	800d082 <_printf_float+0x33a>
 800d0a8:	4642      	mov	r2, r8
 800d0aa:	4631      	mov	r1, r6
 800d0ac:	4628      	mov	r0, r5
 800d0ae:	47b8      	blx	r7
 800d0b0:	3001      	adds	r0, #1
 800d0b2:	d1c2      	bne.n	800d03a <_printf_float+0x2f2>
 800d0b4:	e6a3      	b.n	800cdfe <_printf_float+0xb6>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	4631      	mov	r1, r6
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	9206      	str	r2, [sp, #24]
 800d0be:	47b8      	blx	r7
 800d0c0:	3001      	adds	r0, #1
 800d0c2:	f43f ae9c 	beq.w	800cdfe <_printf_float+0xb6>
 800d0c6:	9a06      	ldr	r2, [sp, #24]
 800d0c8:	f10b 0b01 	add.w	fp, fp, #1
 800d0cc:	e7bb      	b.n	800d046 <_printf_float+0x2fe>
 800d0ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0d2:	4631      	mov	r1, r6
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	47b8      	blx	r7
 800d0d8:	3001      	adds	r0, #1
 800d0da:	d1c0      	bne.n	800d05e <_printf_float+0x316>
 800d0dc:	e68f      	b.n	800cdfe <_printf_float+0xb6>
 800d0de:	9a06      	ldr	r2, [sp, #24]
 800d0e0:	464b      	mov	r3, r9
 800d0e2:	4442      	add	r2, r8
 800d0e4:	4631      	mov	r1, r6
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	47b8      	blx	r7
 800d0ea:	3001      	adds	r0, #1
 800d0ec:	d1c3      	bne.n	800d076 <_printf_float+0x32e>
 800d0ee:	e686      	b.n	800cdfe <_printf_float+0xb6>
 800d0f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d0f4:	f1ba 0f01 	cmp.w	sl, #1
 800d0f8:	dc01      	bgt.n	800d0fe <_printf_float+0x3b6>
 800d0fa:	07db      	lsls	r3, r3, #31
 800d0fc:	d536      	bpl.n	800d16c <_printf_float+0x424>
 800d0fe:	2301      	movs	r3, #1
 800d100:	4642      	mov	r2, r8
 800d102:	4631      	mov	r1, r6
 800d104:	4628      	mov	r0, r5
 800d106:	47b8      	blx	r7
 800d108:	3001      	adds	r0, #1
 800d10a:	f43f ae78 	beq.w	800cdfe <_printf_float+0xb6>
 800d10e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d112:	4631      	mov	r1, r6
 800d114:	4628      	mov	r0, r5
 800d116:	47b8      	blx	r7
 800d118:	3001      	adds	r0, #1
 800d11a:	f43f ae70 	beq.w	800cdfe <_printf_float+0xb6>
 800d11e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d122:	2200      	movs	r2, #0
 800d124:	2300      	movs	r3, #0
 800d126:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d12a:	f7f3 fccd 	bl	8000ac8 <__aeabi_dcmpeq>
 800d12e:	b9c0      	cbnz	r0, 800d162 <_printf_float+0x41a>
 800d130:	4653      	mov	r3, sl
 800d132:	f108 0201 	add.w	r2, r8, #1
 800d136:	4631      	mov	r1, r6
 800d138:	4628      	mov	r0, r5
 800d13a:	47b8      	blx	r7
 800d13c:	3001      	adds	r0, #1
 800d13e:	d10c      	bne.n	800d15a <_printf_float+0x412>
 800d140:	e65d      	b.n	800cdfe <_printf_float+0xb6>
 800d142:	2301      	movs	r3, #1
 800d144:	465a      	mov	r2, fp
 800d146:	4631      	mov	r1, r6
 800d148:	4628      	mov	r0, r5
 800d14a:	47b8      	blx	r7
 800d14c:	3001      	adds	r0, #1
 800d14e:	f43f ae56 	beq.w	800cdfe <_printf_float+0xb6>
 800d152:	f108 0801 	add.w	r8, r8, #1
 800d156:	45d0      	cmp	r8, sl
 800d158:	dbf3      	blt.n	800d142 <_printf_float+0x3fa>
 800d15a:	464b      	mov	r3, r9
 800d15c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d160:	e6df      	b.n	800cf22 <_printf_float+0x1da>
 800d162:	f04f 0800 	mov.w	r8, #0
 800d166:	f104 0b1a 	add.w	fp, r4, #26
 800d16a:	e7f4      	b.n	800d156 <_printf_float+0x40e>
 800d16c:	2301      	movs	r3, #1
 800d16e:	4642      	mov	r2, r8
 800d170:	e7e1      	b.n	800d136 <_printf_float+0x3ee>
 800d172:	2301      	movs	r3, #1
 800d174:	464a      	mov	r2, r9
 800d176:	4631      	mov	r1, r6
 800d178:	4628      	mov	r0, r5
 800d17a:	47b8      	blx	r7
 800d17c:	3001      	adds	r0, #1
 800d17e:	f43f ae3e 	beq.w	800cdfe <_printf_float+0xb6>
 800d182:	f108 0801 	add.w	r8, r8, #1
 800d186:	68e3      	ldr	r3, [r4, #12]
 800d188:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d18a:	1a5b      	subs	r3, r3, r1
 800d18c:	4543      	cmp	r3, r8
 800d18e:	dcf0      	bgt.n	800d172 <_printf_float+0x42a>
 800d190:	e6fc      	b.n	800cf8c <_printf_float+0x244>
 800d192:	f04f 0800 	mov.w	r8, #0
 800d196:	f104 0919 	add.w	r9, r4, #25
 800d19a:	e7f4      	b.n	800d186 <_printf_float+0x43e>

0800d19c <_printf_common>:
 800d19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1a0:	4616      	mov	r6, r2
 800d1a2:	4698      	mov	r8, r3
 800d1a4:	688a      	ldr	r2, [r1, #8]
 800d1a6:	690b      	ldr	r3, [r1, #16]
 800d1a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	bfb8      	it	lt
 800d1b0:	4613      	movlt	r3, r2
 800d1b2:	6033      	str	r3, [r6, #0]
 800d1b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d1b8:	4607      	mov	r7, r0
 800d1ba:	460c      	mov	r4, r1
 800d1bc:	b10a      	cbz	r2, 800d1c2 <_printf_common+0x26>
 800d1be:	3301      	adds	r3, #1
 800d1c0:	6033      	str	r3, [r6, #0]
 800d1c2:	6823      	ldr	r3, [r4, #0]
 800d1c4:	0699      	lsls	r1, r3, #26
 800d1c6:	bf42      	ittt	mi
 800d1c8:	6833      	ldrmi	r3, [r6, #0]
 800d1ca:	3302      	addmi	r3, #2
 800d1cc:	6033      	strmi	r3, [r6, #0]
 800d1ce:	6825      	ldr	r5, [r4, #0]
 800d1d0:	f015 0506 	ands.w	r5, r5, #6
 800d1d4:	d106      	bne.n	800d1e4 <_printf_common+0x48>
 800d1d6:	f104 0a19 	add.w	sl, r4, #25
 800d1da:	68e3      	ldr	r3, [r4, #12]
 800d1dc:	6832      	ldr	r2, [r6, #0]
 800d1de:	1a9b      	subs	r3, r3, r2
 800d1e0:	42ab      	cmp	r3, r5
 800d1e2:	dc26      	bgt.n	800d232 <_printf_common+0x96>
 800d1e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d1e8:	6822      	ldr	r2, [r4, #0]
 800d1ea:	3b00      	subs	r3, #0
 800d1ec:	bf18      	it	ne
 800d1ee:	2301      	movne	r3, #1
 800d1f0:	0692      	lsls	r2, r2, #26
 800d1f2:	d42b      	bmi.n	800d24c <_printf_common+0xb0>
 800d1f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d1f8:	4641      	mov	r1, r8
 800d1fa:	4638      	mov	r0, r7
 800d1fc:	47c8      	blx	r9
 800d1fe:	3001      	adds	r0, #1
 800d200:	d01e      	beq.n	800d240 <_printf_common+0xa4>
 800d202:	6823      	ldr	r3, [r4, #0]
 800d204:	6922      	ldr	r2, [r4, #16]
 800d206:	f003 0306 	and.w	r3, r3, #6
 800d20a:	2b04      	cmp	r3, #4
 800d20c:	bf02      	ittt	eq
 800d20e:	68e5      	ldreq	r5, [r4, #12]
 800d210:	6833      	ldreq	r3, [r6, #0]
 800d212:	1aed      	subeq	r5, r5, r3
 800d214:	68a3      	ldr	r3, [r4, #8]
 800d216:	bf0c      	ite	eq
 800d218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d21c:	2500      	movne	r5, #0
 800d21e:	4293      	cmp	r3, r2
 800d220:	bfc4      	itt	gt
 800d222:	1a9b      	subgt	r3, r3, r2
 800d224:	18ed      	addgt	r5, r5, r3
 800d226:	2600      	movs	r6, #0
 800d228:	341a      	adds	r4, #26
 800d22a:	42b5      	cmp	r5, r6
 800d22c:	d11a      	bne.n	800d264 <_printf_common+0xc8>
 800d22e:	2000      	movs	r0, #0
 800d230:	e008      	b.n	800d244 <_printf_common+0xa8>
 800d232:	2301      	movs	r3, #1
 800d234:	4652      	mov	r2, sl
 800d236:	4641      	mov	r1, r8
 800d238:	4638      	mov	r0, r7
 800d23a:	47c8      	blx	r9
 800d23c:	3001      	adds	r0, #1
 800d23e:	d103      	bne.n	800d248 <_printf_common+0xac>
 800d240:	f04f 30ff 	mov.w	r0, #4294967295
 800d244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d248:	3501      	adds	r5, #1
 800d24a:	e7c6      	b.n	800d1da <_printf_common+0x3e>
 800d24c:	18e1      	adds	r1, r4, r3
 800d24e:	1c5a      	adds	r2, r3, #1
 800d250:	2030      	movs	r0, #48	@ 0x30
 800d252:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d256:	4422      	add	r2, r4
 800d258:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d25c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d260:	3302      	adds	r3, #2
 800d262:	e7c7      	b.n	800d1f4 <_printf_common+0x58>
 800d264:	2301      	movs	r3, #1
 800d266:	4622      	mov	r2, r4
 800d268:	4641      	mov	r1, r8
 800d26a:	4638      	mov	r0, r7
 800d26c:	47c8      	blx	r9
 800d26e:	3001      	adds	r0, #1
 800d270:	d0e6      	beq.n	800d240 <_printf_common+0xa4>
 800d272:	3601      	adds	r6, #1
 800d274:	e7d9      	b.n	800d22a <_printf_common+0x8e>
	...

0800d278 <_printf_i>:
 800d278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d27c:	7e0f      	ldrb	r7, [r1, #24]
 800d27e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d280:	2f78      	cmp	r7, #120	@ 0x78
 800d282:	4691      	mov	r9, r2
 800d284:	4680      	mov	r8, r0
 800d286:	460c      	mov	r4, r1
 800d288:	469a      	mov	sl, r3
 800d28a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d28e:	d807      	bhi.n	800d2a0 <_printf_i+0x28>
 800d290:	2f62      	cmp	r7, #98	@ 0x62
 800d292:	d80a      	bhi.n	800d2aa <_printf_i+0x32>
 800d294:	2f00      	cmp	r7, #0
 800d296:	f000 80d1 	beq.w	800d43c <_printf_i+0x1c4>
 800d29a:	2f58      	cmp	r7, #88	@ 0x58
 800d29c:	f000 80b8 	beq.w	800d410 <_printf_i+0x198>
 800d2a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d2a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d2a8:	e03a      	b.n	800d320 <_printf_i+0xa8>
 800d2aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d2ae:	2b15      	cmp	r3, #21
 800d2b0:	d8f6      	bhi.n	800d2a0 <_printf_i+0x28>
 800d2b2:	a101      	add	r1, pc, #4	@ (adr r1, 800d2b8 <_printf_i+0x40>)
 800d2b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2b8:	0800d311 	.word	0x0800d311
 800d2bc:	0800d325 	.word	0x0800d325
 800d2c0:	0800d2a1 	.word	0x0800d2a1
 800d2c4:	0800d2a1 	.word	0x0800d2a1
 800d2c8:	0800d2a1 	.word	0x0800d2a1
 800d2cc:	0800d2a1 	.word	0x0800d2a1
 800d2d0:	0800d325 	.word	0x0800d325
 800d2d4:	0800d2a1 	.word	0x0800d2a1
 800d2d8:	0800d2a1 	.word	0x0800d2a1
 800d2dc:	0800d2a1 	.word	0x0800d2a1
 800d2e0:	0800d2a1 	.word	0x0800d2a1
 800d2e4:	0800d423 	.word	0x0800d423
 800d2e8:	0800d34f 	.word	0x0800d34f
 800d2ec:	0800d3dd 	.word	0x0800d3dd
 800d2f0:	0800d2a1 	.word	0x0800d2a1
 800d2f4:	0800d2a1 	.word	0x0800d2a1
 800d2f8:	0800d445 	.word	0x0800d445
 800d2fc:	0800d2a1 	.word	0x0800d2a1
 800d300:	0800d34f 	.word	0x0800d34f
 800d304:	0800d2a1 	.word	0x0800d2a1
 800d308:	0800d2a1 	.word	0x0800d2a1
 800d30c:	0800d3e5 	.word	0x0800d3e5
 800d310:	6833      	ldr	r3, [r6, #0]
 800d312:	1d1a      	adds	r2, r3, #4
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	6032      	str	r2, [r6, #0]
 800d318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d31c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d320:	2301      	movs	r3, #1
 800d322:	e09c      	b.n	800d45e <_printf_i+0x1e6>
 800d324:	6833      	ldr	r3, [r6, #0]
 800d326:	6820      	ldr	r0, [r4, #0]
 800d328:	1d19      	adds	r1, r3, #4
 800d32a:	6031      	str	r1, [r6, #0]
 800d32c:	0606      	lsls	r6, r0, #24
 800d32e:	d501      	bpl.n	800d334 <_printf_i+0xbc>
 800d330:	681d      	ldr	r5, [r3, #0]
 800d332:	e003      	b.n	800d33c <_printf_i+0xc4>
 800d334:	0645      	lsls	r5, r0, #25
 800d336:	d5fb      	bpl.n	800d330 <_printf_i+0xb8>
 800d338:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d33c:	2d00      	cmp	r5, #0
 800d33e:	da03      	bge.n	800d348 <_printf_i+0xd0>
 800d340:	232d      	movs	r3, #45	@ 0x2d
 800d342:	426d      	negs	r5, r5
 800d344:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d348:	4858      	ldr	r0, [pc, #352]	@ (800d4ac <_printf_i+0x234>)
 800d34a:	230a      	movs	r3, #10
 800d34c:	e011      	b.n	800d372 <_printf_i+0xfa>
 800d34e:	6821      	ldr	r1, [r4, #0]
 800d350:	6833      	ldr	r3, [r6, #0]
 800d352:	0608      	lsls	r0, r1, #24
 800d354:	f853 5b04 	ldr.w	r5, [r3], #4
 800d358:	d402      	bmi.n	800d360 <_printf_i+0xe8>
 800d35a:	0649      	lsls	r1, r1, #25
 800d35c:	bf48      	it	mi
 800d35e:	b2ad      	uxthmi	r5, r5
 800d360:	2f6f      	cmp	r7, #111	@ 0x6f
 800d362:	4852      	ldr	r0, [pc, #328]	@ (800d4ac <_printf_i+0x234>)
 800d364:	6033      	str	r3, [r6, #0]
 800d366:	bf14      	ite	ne
 800d368:	230a      	movne	r3, #10
 800d36a:	2308      	moveq	r3, #8
 800d36c:	2100      	movs	r1, #0
 800d36e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d372:	6866      	ldr	r6, [r4, #4]
 800d374:	60a6      	str	r6, [r4, #8]
 800d376:	2e00      	cmp	r6, #0
 800d378:	db05      	blt.n	800d386 <_printf_i+0x10e>
 800d37a:	6821      	ldr	r1, [r4, #0]
 800d37c:	432e      	orrs	r6, r5
 800d37e:	f021 0104 	bic.w	r1, r1, #4
 800d382:	6021      	str	r1, [r4, #0]
 800d384:	d04b      	beq.n	800d41e <_printf_i+0x1a6>
 800d386:	4616      	mov	r6, r2
 800d388:	fbb5 f1f3 	udiv	r1, r5, r3
 800d38c:	fb03 5711 	mls	r7, r3, r1, r5
 800d390:	5dc7      	ldrb	r7, [r0, r7]
 800d392:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d396:	462f      	mov	r7, r5
 800d398:	42bb      	cmp	r3, r7
 800d39a:	460d      	mov	r5, r1
 800d39c:	d9f4      	bls.n	800d388 <_printf_i+0x110>
 800d39e:	2b08      	cmp	r3, #8
 800d3a0:	d10b      	bne.n	800d3ba <_printf_i+0x142>
 800d3a2:	6823      	ldr	r3, [r4, #0]
 800d3a4:	07df      	lsls	r7, r3, #31
 800d3a6:	d508      	bpl.n	800d3ba <_printf_i+0x142>
 800d3a8:	6923      	ldr	r3, [r4, #16]
 800d3aa:	6861      	ldr	r1, [r4, #4]
 800d3ac:	4299      	cmp	r1, r3
 800d3ae:	bfde      	ittt	le
 800d3b0:	2330      	movle	r3, #48	@ 0x30
 800d3b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d3b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d3ba:	1b92      	subs	r2, r2, r6
 800d3bc:	6122      	str	r2, [r4, #16]
 800d3be:	f8cd a000 	str.w	sl, [sp]
 800d3c2:	464b      	mov	r3, r9
 800d3c4:	aa03      	add	r2, sp, #12
 800d3c6:	4621      	mov	r1, r4
 800d3c8:	4640      	mov	r0, r8
 800d3ca:	f7ff fee7 	bl	800d19c <_printf_common>
 800d3ce:	3001      	adds	r0, #1
 800d3d0:	d14a      	bne.n	800d468 <_printf_i+0x1f0>
 800d3d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d6:	b004      	add	sp, #16
 800d3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3dc:	6823      	ldr	r3, [r4, #0]
 800d3de:	f043 0320 	orr.w	r3, r3, #32
 800d3e2:	6023      	str	r3, [r4, #0]
 800d3e4:	4832      	ldr	r0, [pc, #200]	@ (800d4b0 <_printf_i+0x238>)
 800d3e6:	2778      	movs	r7, #120	@ 0x78
 800d3e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d3ec:	6823      	ldr	r3, [r4, #0]
 800d3ee:	6831      	ldr	r1, [r6, #0]
 800d3f0:	061f      	lsls	r7, r3, #24
 800d3f2:	f851 5b04 	ldr.w	r5, [r1], #4
 800d3f6:	d402      	bmi.n	800d3fe <_printf_i+0x186>
 800d3f8:	065f      	lsls	r7, r3, #25
 800d3fa:	bf48      	it	mi
 800d3fc:	b2ad      	uxthmi	r5, r5
 800d3fe:	6031      	str	r1, [r6, #0]
 800d400:	07d9      	lsls	r1, r3, #31
 800d402:	bf44      	itt	mi
 800d404:	f043 0320 	orrmi.w	r3, r3, #32
 800d408:	6023      	strmi	r3, [r4, #0]
 800d40a:	b11d      	cbz	r5, 800d414 <_printf_i+0x19c>
 800d40c:	2310      	movs	r3, #16
 800d40e:	e7ad      	b.n	800d36c <_printf_i+0xf4>
 800d410:	4826      	ldr	r0, [pc, #152]	@ (800d4ac <_printf_i+0x234>)
 800d412:	e7e9      	b.n	800d3e8 <_printf_i+0x170>
 800d414:	6823      	ldr	r3, [r4, #0]
 800d416:	f023 0320 	bic.w	r3, r3, #32
 800d41a:	6023      	str	r3, [r4, #0]
 800d41c:	e7f6      	b.n	800d40c <_printf_i+0x194>
 800d41e:	4616      	mov	r6, r2
 800d420:	e7bd      	b.n	800d39e <_printf_i+0x126>
 800d422:	6833      	ldr	r3, [r6, #0]
 800d424:	6825      	ldr	r5, [r4, #0]
 800d426:	6961      	ldr	r1, [r4, #20]
 800d428:	1d18      	adds	r0, r3, #4
 800d42a:	6030      	str	r0, [r6, #0]
 800d42c:	062e      	lsls	r6, r5, #24
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	d501      	bpl.n	800d436 <_printf_i+0x1be>
 800d432:	6019      	str	r1, [r3, #0]
 800d434:	e002      	b.n	800d43c <_printf_i+0x1c4>
 800d436:	0668      	lsls	r0, r5, #25
 800d438:	d5fb      	bpl.n	800d432 <_printf_i+0x1ba>
 800d43a:	8019      	strh	r1, [r3, #0]
 800d43c:	2300      	movs	r3, #0
 800d43e:	6123      	str	r3, [r4, #16]
 800d440:	4616      	mov	r6, r2
 800d442:	e7bc      	b.n	800d3be <_printf_i+0x146>
 800d444:	6833      	ldr	r3, [r6, #0]
 800d446:	1d1a      	adds	r2, r3, #4
 800d448:	6032      	str	r2, [r6, #0]
 800d44a:	681e      	ldr	r6, [r3, #0]
 800d44c:	6862      	ldr	r2, [r4, #4]
 800d44e:	2100      	movs	r1, #0
 800d450:	4630      	mov	r0, r6
 800d452:	f7f2 febd 	bl	80001d0 <memchr>
 800d456:	b108      	cbz	r0, 800d45c <_printf_i+0x1e4>
 800d458:	1b80      	subs	r0, r0, r6
 800d45a:	6060      	str	r0, [r4, #4]
 800d45c:	6863      	ldr	r3, [r4, #4]
 800d45e:	6123      	str	r3, [r4, #16]
 800d460:	2300      	movs	r3, #0
 800d462:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d466:	e7aa      	b.n	800d3be <_printf_i+0x146>
 800d468:	6923      	ldr	r3, [r4, #16]
 800d46a:	4632      	mov	r2, r6
 800d46c:	4649      	mov	r1, r9
 800d46e:	4640      	mov	r0, r8
 800d470:	47d0      	blx	sl
 800d472:	3001      	adds	r0, #1
 800d474:	d0ad      	beq.n	800d3d2 <_printf_i+0x15a>
 800d476:	6823      	ldr	r3, [r4, #0]
 800d478:	079b      	lsls	r3, r3, #30
 800d47a:	d413      	bmi.n	800d4a4 <_printf_i+0x22c>
 800d47c:	68e0      	ldr	r0, [r4, #12]
 800d47e:	9b03      	ldr	r3, [sp, #12]
 800d480:	4298      	cmp	r0, r3
 800d482:	bfb8      	it	lt
 800d484:	4618      	movlt	r0, r3
 800d486:	e7a6      	b.n	800d3d6 <_printf_i+0x15e>
 800d488:	2301      	movs	r3, #1
 800d48a:	4632      	mov	r2, r6
 800d48c:	4649      	mov	r1, r9
 800d48e:	4640      	mov	r0, r8
 800d490:	47d0      	blx	sl
 800d492:	3001      	adds	r0, #1
 800d494:	d09d      	beq.n	800d3d2 <_printf_i+0x15a>
 800d496:	3501      	adds	r5, #1
 800d498:	68e3      	ldr	r3, [r4, #12]
 800d49a:	9903      	ldr	r1, [sp, #12]
 800d49c:	1a5b      	subs	r3, r3, r1
 800d49e:	42ab      	cmp	r3, r5
 800d4a0:	dcf2      	bgt.n	800d488 <_printf_i+0x210>
 800d4a2:	e7eb      	b.n	800d47c <_printf_i+0x204>
 800d4a4:	2500      	movs	r5, #0
 800d4a6:	f104 0619 	add.w	r6, r4, #25
 800d4aa:	e7f5      	b.n	800d498 <_printf_i+0x220>
 800d4ac:	0800fbb1 	.word	0x0800fbb1
 800d4b0:	0800fbc2 	.word	0x0800fbc2

0800d4b4 <std>:
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	b510      	push	{r4, lr}
 800d4b8:	4604      	mov	r4, r0
 800d4ba:	e9c0 3300 	strd	r3, r3, [r0]
 800d4be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d4c2:	6083      	str	r3, [r0, #8]
 800d4c4:	8181      	strh	r1, [r0, #12]
 800d4c6:	6643      	str	r3, [r0, #100]	@ 0x64
 800d4c8:	81c2      	strh	r2, [r0, #14]
 800d4ca:	6183      	str	r3, [r0, #24]
 800d4cc:	4619      	mov	r1, r3
 800d4ce:	2208      	movs	r2, #8
 800d4d0:	305c      	adds	r0, #92	@ 0x5c
 800d4d2:	f000 fa1b 	bl	800d90c <memset>
 800d4d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d50c <std+0x58>)
 800d4d8:	6263      	str	r3, [r4, #36]	@ 0x24
 800d4da:	4b0d      	ldr	r3, [pc, #52]	@ (800d510 <std+0x5c>)
 800d4dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d4de:	4b0d      	ldr	r3, [pc, #52]	@ (800d514 <std+0x60>)
 800d4e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d4e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d518 <std+0x64>)
 800d4e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800d4e6:	4b0d      	ldr	r3, [pc, #52]	@ (800d51c <std+0x68>)
 800d4e8:	6224      	str	r4, [r4, #32]
 800d4ea:	429c      	cmp	r4, r3
 800d4ec:	d006      	beq.n	800d4fc <std+0x48>
 800d4ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d4f2:	4294      	cmp	r4, r2
 800d4f4:	d002      	beq.n	800d4fc <std+0x48>
 800d4f6:	33d0      	adds	r3, #208	@ 0xd0
 800d4f8:	429c      	cmp	r4, r3
 800d4fa:	d105      	bne.n	800d508 <std+0x54>
 800d4fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d504:	f000 ba7e 	b.w	800da04 <__retarget_lock_init_recursive>
 800d508:	bd10      	pop	{r4, pc}
 800d50a:	bf00      	nop
 800d50c:	0800d75d 	.word	0x0800d75d
 800d510:	0800d77f 	.word	0x0800d77f
 800d514:	0800d7b7 	.word	0x0800d7b7
 800d518:	0800d7db 	.word	0x0800d7db
 800d51c:	20002ef4 	.word	0x20002ef4

0800d520 <stdio_exit_handler>:
 800d520:	4a02      	ldr	r2, [pc, #8]	@ (800d52c <stdio_exit_handler+0xc>)
 800d522:	4903      	ldr	r1, [pc, #12]	@ (800d530 <stdio_exit_handler+0x10>)
 800d524:	4803      	ldr	r0, [pc, #12]	@ (800d534 <stdio_exit_handler+0x14>)
 800d526:	f000 b869 	b.w	800d5fc <_fwalk_sglue>
 800d52a:	bf00      	nop
 800d52c:	20000070 	.word	0x20000070
 800d530:	0800f649 	.word	0x0800f649
 800d534:	20000080 	.word	0x20000080

0800d538 <cleanup_stdio>:
 800d538:	6841      	ldr	r1, [r0, #4]
 800d53a:	4b0c      	ldr	r3, [pc, #48]	@ (800d56c <cleanup_stdio+0x34>)
 800d53c:	4299      	cmp	r1, r3
 800d53e:	b510      	push	{r4, lr}
 800d540:	4604      	mov	r4, r0
 800d542:	d001      	beq.n	800d548 <cleanup_stdio+0x10>
 800d544:	f002 f880 	bl	800f648 <_fflush_r>
 800d548:	68a1      	ldr	r1, [r4, #8]
 800d54a:	4b09      	ldr	r3, [pc, #36]	@ (800d570 <cleanup_stdio+0x38>)
 800d54c:	4299      	cmp	r1, r3
 800d54e:	d002      	beq.n	800d556 <cleanup_stdio+0x1e>
 800d550:	4620      	mov	r0, r4
 800d552:	f002 f879 	bl	800f648 <_fflush_r>
 800d556:	68e1      	ldr	r1, [r4, #12]
 800d558:	4b06      	ldr	r3, [pc, #24]	@ (800d574 <cleanup_stdio+0x3c>)
 800d55a:	4299      	cmp	r1, r3
 800d55c:	d004      	beq.n	800d568 <cleanup_stdio+0x30>
 800d55e:	4620      	mov	r0, r4
 800d560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d564:	f002 b870 	b.w	800f648 <_fflush_r>
 800d568:	bd10      	pop	{r4, pc}
 800d56a:	bf00      	nop
 800d56c:	20002ef4 	.word	0x20002ef4
 800d570:	20002f5c 	.word	0x20002f5c
 800d574:	20002fc4 	.word	0x20002fc4

0800d578 <global_stdio_init.part.0>:
 800d578:	b510      	push	{r4, lr}
 800d57a:	4b0b      	ldr	r3, [pc, #44]	@ (800d5a8 <global_stdio_init.part.0+0x30>)
 800d57c:	4c0b      	ldr	r4, [pc, #44]	@ (800d5ac <global_stdio_init.part.0+0x34>)
 800d57e:	4a0c      	ldr	r2, [pc, #48]	@ (800d5b0 <global_stdio_init.part.0+0x38>)
 800d580:	601a      	str	r2, [r3, #0]
 800d582:	4620      	mov	r0, r4
 800d584:	2200      	movs	r2, #0
 800d586:	2104      	movs	r1, #4
 800d588:	f7ff ff94 	bl	800d4b4 <std>
 800d58c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d590:	2201      	movs	r2, #1
 800d592:	2109      	movs	r1, #9
 800d594:	f7ff ff8e 	bl	800d4b4 <std>
 800d598:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d59c:	2202      	movs	r2, #2
 800d59e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5a2:	2112      	movs	r1, #18
 800d5a4:	f7ff bf86 	b.w	800d4b4 <std>
 800d5a8:	2000302c 	.word	0x2000302c
 800d5ac:	20002ef4 	.word	0x20002ef4
 800d5b0:	0800d521 	.word	0x0800d521

0800d5b4 <__sfp_lock_acquire>:
 800d5b4:	4801      	ldr	r0, [pc, #4]	@ (800d5bc <__sfp_lock_acquire+0x8>)
 800d5b6:	f000 ba26 	b.w	800da06 <__retarget_lock_acquire_recursive>
 800d5ba:	bf00      	nop
 800d5bc:	20003035 	.word	0x20003035

0800d5c0 <__sfp_lock_release>:
 800d5c0:	4801      	ldr	r0, [pc, #4]	@ (800d5c8 <__sfp_lock_release+0x8>)
 800d5c2:	f000 ba21 	b.w	800da08 <__retarget_lock_release_recursive>
 800d5c6:	bf00      	nop
 800d5c8:	20003035 	.word	0x20003035

0800d5cc <__sinit>:
 800d5cc:	b510      	push	{r4, lr}
 800d5ce:	4604      	mov	r4, r0
 800d5d0:	f7ff fff0 	bl	800d5b4 <__sfp_lock_acquire>
 800d5d4:	6a23      	ldr	r3, [r4, #32]
 800d5d6:	b11b      	cbz	r3, 800d5e0 <__sinit+0x14>
 800d5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5dc:	f7ff bff0 	b.w	800d5c0 <__sfp_lock_release>
 800d5e0:	4b04      	ldr	r3, [pc, #16]	@ (800d5f4 <__sinit+0x28>)
 800d5e2:	6223      	str	r3, [r4, #32]
 800d5e4:	4b04      	ldr	r3, [pc, #16]	@ (800d5f8 <__sinit+0x2c>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d1f5      	bne.n	800d5d8 <__sinit+0xc>
 800d5ec:	f7ff ffc4 	bl	800d578 <global_stdio_init.part.0>
 800d5f0:	e7f2      	b.n	800d5d8 <__sinit+0xc>
 800d5f2:	bf00      	nop
 800d5f4:	0800d539 	.word	0x0800d539
 800d5f8:	2000302c 	.word	0x2000302c

0800d5fc <_fwalk_sglue>:
 800d5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d600:	4607      	mov	r7, r0
 800d602:	4688      	mov	r8, r1
 800d604:	4614      	mov	r4, r2
 800d606:	2600      	movs	r6, #0
 800d608:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d60c:	f1b9 0901 	subs.w	r9, r9, #1
 800d610:	d505      	bpl.n	800d61e <_fwalk_sglue+0x22>
 800d612:	6824      	ldr	r4, [r4, #0]
 800d614:	2c00      	cmp	r4, #0
 800d616:	d1f7      	bne.n	800d608 <_fwalk_sglue+0xc>
 800d618:	4630      	mov	r0, r6
 800d61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d61e:	89ab      	ldrh	r3, [r5, #12]
 800d620:	2b01      	cmp	r3, #1
 800d622:	d907      	bls.n	800d634 <_fwalk_sglue+0x38>
 800d624:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d628:	3301      	adds	r3, #1
 800d62a:	d003      	beq.n	800d634 <_fwalk_sglue+0x38>
 800d62c:	4629      	mov	r1, r5
 800d62e:	4638      	mov	r0, r7
 800d630:	47c0      	blx	r8
 800d632:	4306      	orrs	r6, r0
 800d634:	3568      	adds	r5, #104	@ 0x68
 800d636:	e7e9      	b.n	800d60c <_fwalk_sglue+0x10>

0800d638 <iprintf>:
 800d638:	b40f      	push	{r0, r1, r2, r3}
 800d63a:	b507      	push	{r0, r1, r2, lr}
 800d63c:	4906      	ldr	r1, [pc, #24]	@ (800d658 <iprintf+0x20>)
 800d63e:	ab04      	add	r3, sp, #16
 800d640:	6808      	ldr	r0, [r1, #0]
 800d642:	f853 2b04 	ldr.w	r2, [r3], #4
 800d646:	6881      	ldr	r1, [r0, #8]
 800d648:	9301      	str	r3, [sp, #4]
 800d64a:	f001 fe61 	bl	800f310 <_vfiprintf_r>
 800d64e:	b003      	add	sp, #12
 800d650:	f85d eb04 	ldr.w	lr, [sp], #4
 800d654:	b004      	add	sp, #16
 800d656:	4770      	bx	lr
 800d658:	2000007c 	.word	0x2000007c

0800d65c <_puts_r>:
 800d65c:	6a03      	ldr	r3, [r0, #32]
 800d65e:	b570      	push	{r4, r5, r6, lr}
 800d660:	6884      	ldr	r4, [r0, #8]
 800d662:	4605      	mov	r5, r0
 800d664:	460e      	mov	r6, r1
 800d666:	b90b      	cbnz	r3, 800d66c <_puts_r+0x10>
 800d668:	f7ff ffb0 	bl	800d5cc <__sinit>
 800d66c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d66e:	07db      	lsls	r3, r3, #31
 800d670:	d405      	bmi.n	800d67e <_puts_r+0x22>
 800d672:	89a3      	ldrh	r3, [r4, #12]
 800d674:	0598      	lsls	r0, r3, #22
 800d676:	d402      	bmi.n	800d67e <_puts_r+0x22>
 800d678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d67a:	f000 f9c4 	bl	800da06 <__retarget_lock_acquire_recursive>
 800d67e:	89a3      	ldrh	r3, [r4, #12]
 800d680:	0719      	lsls	r1, r3, #28
 800d682:	d502      	bpl.n	800d68a <_puts_r+0x2e>
 800d684:	6923      	ldr	r3, [r4, #16]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d135      	bne.n	800d6f6 <_puts_r+0x9a>
 800d68a:	4621      	mov	r1, r4
 800d68c:	4628      	mov	r0, r5
 800d68e:	f000 f8e7 	bl	800d860 <__swsetup_r>
 800d692:	b380      	cbz	r0, 800d6f6 <_puts_r+0x9a>
 800d694:	f04f 35ff 	mov.w	r5, #4294967295
 800d698:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d69a:	07da      	lsls	r2, r3, #31
 800d69c:	d405      	bmi.n	800d6aa <_puts_r+0x4e>
 800d69e:	89a3      	ldrh	r3, [r4, #12]
 800d6a0:	059b      	lsls	r3, r3, #22
 800d6a2:	d402      	bmi.n	800d6aa <_puts_r+0x4e>
 800d6a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6a6:	f000 f9af 	bl	800da08 <__retarget_lock_release_recursive>
 800d6aa:	4628      	mov	r0, r5
 800d6ac:	bd70      	pop	{r4, r5, r6, pc}
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	da04      	bge.n	800d6bc <_puts_r+0x60>
 800d6b2:	69a2      	ldr	r2, [r4, #24]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	dc17      	bgt.n	800d6e8 <_puts_r+0x8c>
 800d6b8:	290a      	cmp	r1, #10
 800d6ba:	d015      	beq.n	800d6e8 <_puts_r+0x8c>
 800d6bc:	6823      	ldr	r3, [r4, #0]
 800d6be:	1c5a      	adds	r2, r3, #1
 800d6c0:	6022      	str	r2, [r4, #0]
 800d6c2:	7019      	strb	r1, [r3, #0]
 800d6c4:	68a3      	ldr	r3, [r4, #8]
 800d6c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	60a3      	str	r3, [r4, #8]
 800d6ce:	2900      	cmp	r1, #0
 800d6d0:	d1ed      	bne.n	800d6ae <_puts_r+0x52>
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	da11      	bge.n	800d6fa <_puts_r+0x9e>
 800d6d6:	4622      	mov	r2, r4
 800d6d8:	210a      	movs	r1, #10
 800d6da:	4628      	mov	r0, r5
 800d6dc:	f000 f881 	bl	800d7e2 <__swbuf_r>
 800d6e0:	3001      	adds	r0, #1
 800d6e2:	d0d7      	beq.n	800d694 <_puts_r+0x38>
 800d6e4:	250a      	movs	r5, #10
 800d6e6:	e7d7      	b.n	800d698 <_puts_r+0x3c>
 800d6e8:	4622      	mov	r2, r4
 800d6ea:	4628      	mov	r0, r5
 800d6ec:	f000 f879 	bl	800d7e2 <__swbuf_r>
 800d6f0:	3001      	adds	r0, #1
 800d6f2:	d1e7      	bne.n	800d6c4 <_puts_r+0x68>
 800d6f4:	e7ce      	b.n	800d694 <_puts_r+0x38>
 800d6f6:	3e01      	subs	r6, #1
 800d6f8:	e7e4      	b.n	800d6c4 <_puts_r+0x68>
 800d6fa:	6823      	ldr	r3, [r4, #0]
 800d6fc:	1c5a      	adds	r2, r3, #1
 800d6fe:	6022      	str	r2, [r4, #0]
 800d700:	220a      	movs	r2, #10
 800d702:	701a      	strb	r2, [r3, #0]
 800d704:	e7ee      	b.n	800d6e4 <_puts_r+0x88>
	...

0800d708 <puts>:
 800d708:	4b02      	ldr	r3, [pc, #8]	@ (800d714 <puts+0xc>)
 800d70a:	4601      	mov	r1, r0
 800d70c:	6818      	ldr	r0, [r3, #0]
 800d70e:	f7ff bfa5 	b.w	800d65c <_puts_r>
 800d712:	bf00      	nop
 800d714:	2000007c 	.word	0x2000007c

0800d718 <siprintf>:
 800d718:	b40e      	push	{r1, r2, r3}
 800d71a:	b510      	push	{r4, lr}
 800d71c:	b09d      	sub	sp, #116	@ 0x74
 800d71e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d720:	9002      	str	r0, [sp, #8]
 800d722:	9006      	str	r0, [sp, #24]
 800d724:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d728:	480a      	ldr	r0, [pc, #40]	@ (800d754 <siprintf+0x3c>)
 800d72a:	9107      	str	r1, [sp, #28]
 800d72c:	9104      	str	r1, [sp, #16]
 800d72e:	490a      	ldr	r1, [pc, #40]	@ (800d758 <siprintf+0x40>)
 800d730:	f853 2b04 	ldr.w	r2, [r3], #4
 800d734:	9105      	str	r1, [sp, #20]
 800d736:	2400      	movs	r4, #0
 800d738:	a902      	add	r1, sp, #8
 800d73a:	6800      	ldr	r0, [r0, #0]
 800d73c:	9301      	str	r3, [sp, #4]
 800d73e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d740:	f001 fcc0 	bl	800f0c4 <_svfiprintf_r>
 800d744:	9b02      	ldr	r3, [sp, #8]
 800d746:	701c      	strb	r4, [r3, #0]
 800d748:	b01d      	add	sp, #116	@ 0x74
 800d74a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d74e:	b003      	add	sp, #12
 800d750:	4770      	bx	lr
 800d752:	bf00      	nop
 800d754:	2000007c 	.word	0x2000007c
 800d758:	ffff0208 	.word	0xffff0208

0800d75c <__sread>:
 800d75c:	b510      	push	{r4, lr}
 800d75e:	460c      	mov	r4, r1
 800d760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d764:	f000 f900 	bl	800d968 <_read_r>
 800d768:	2800      	cmp	r0, #0
 800d76a:	bfab      	itete	ge
 800d76c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d76e:	89a3      	ldrhlt	r3, [r4, #12]
 800d770:	181b      	addge	r3, r3, r0
 800d772:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d776:	bfac      	ite	ge
 800d778:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d77a:	81a3      	strhlt	r3, [r4, #12]
 800d77c:	bd10      	pop	{r4, pc}

0800d77e <__swrite>:
 800d77e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d782:	461f      	mov	r7, r3
 800d784:	898b      	ldrh	r3, [r1, #12]
 800d786:	05db      	lsls	r3, r3, #23
 800d788:	4605      	mov	r5, r0
 800d78a:	460c      	mov	r4, r1
 800d78c:	4616      	mov	r6, r2
 800d78e:	d505      	bpl.n	800d79c <__swrite+0x1e>
 800d790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d794:	2302      	movs	r3, #2
 800d796:	2200      	movs	r2, #0
 800d798:	f000 f8d4 	bl	800d944 <_lseek_r>
 800d79c:	89a3      	ldrh	r3, [r4, #12]
 800d79e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d7a6:	81a3      	strh	r3, [r4, #12]
 800d7a8:	4632      	mov	r2, r6
 800d7aa:	463b      	mov	r3, r7
 800d7ac:	4628      	mov	r0, r5
 800d7ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b2:	f000 b8eb 	b.w	800d98c <_write_r>

0800d7b6 <__sseek>:
 800d7b6:	b510      	push	{r4, lr}
 800d7b8:	460c      	mov	r4, r1
 800d7ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7be:	f000 f8c1 	bl	800d944 <_lseek_r>
 800d7c2:	1c43      	adds	r3, r0, #1
 800d7c4:	89a3      	ldrh	r3, [r4, #12]
 800d7c6:	bf15      	itete	ne
 800d7c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d7ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d7ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d7d2:	81a3      	strheq	r3, [r4, #12]
 800d7d4:	bf18      	it	ne
 800d7d6:	81a3      	strhne	r3, [r4, #12]
 800d7d8:	bd10      	pop	{r4, pc}

0800d7da <__sclose>:
 800d7da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7de:	f000 b8a1 	b.w	800d924 <_close_r>

0800d7e2 <__swbuf_r>:
 800d7e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7e4:	460e      	mov	r6, r1
 800d7e6:	4614      	mov	r4, r2
 800d7e8:	4605      	mov	r5, r0
 800d7ea:	b118      	cbz	r0, 800d7f4 <__swbuf_r+0x12>
 800d7ec:	6a03      	ldr	r3, [r0, #32]
 800d7ee:	b90b      	cbnz	r3, 800d7f4 <__swbuf_r+0x12>
 800d7f0:	f7ff feec 	bl	800d5cc <__sinit>
 800d7f4:	69a3      	ldr	r3, [r4, #24]
 800d7f6:	60a3      	str	r3, [r4, #8]
 800d7f8:	89a3      	ldrh	r3, [r4, #12]
 800d7fa:	071a      	lsls	r2, r3, #28
 800d7fc:	d501      	bpl.n	800d802 <__swbuf_r+0x20>
 800d7fe:	6923      	ldr	r3, [r4, #16]
 800d800:	b943      	cbnz	r3, 800d814 <__swbuf_r+0x32>
 800d802:	4621      	mov	r1, r4
 800d804:	4628      	mov	r0, r5
 800d806:	f000 f82b 	bl	800d860 <__swsetup_r>
 800d80a:	b118      	cbz	r0, 800d814 <__swbuf_r+0x32>
 800d80c:	f04f 37ff 	mov.w	r7, #4294967295
 800d810:	4638      	mov	r0, r7
 800d812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d814:	6823      	ldr	r3, [r4, #0]
 800d816:	6922      	ldr	r2, [r4, #16]
 800d818:	1a98      	subs	r0, r3, r2
 800d81a:	6963      	ldr	r3, [r4, #20]
 800d81c:	b2f6      	uxtb	r6, r6
 800d81e:	4283      	cmp	r3, r0
 800d820:	4637      	mov	r7, r6
 800d822:	dc05      	bgt.n	800d830 <__swbuf_r+0x4e>
 800d824:	4621      	mov	r1, r4
 800d826:	4628      	mov	r0, r5
 800d828:	f001 ff0e 	bl	800f648 <_fflush_r>
 800d82c:	2800      	cmp	r0, #0
 800d82e:	d1ed      	bne.n	800d80c <__swbuf_r+0x2a>
 800d830:	68a3      	ldr	r3, [r4, #8]
 800d832:	3b01      	subs	r3, #1
 800d834:	60a3      	str	r3, [r4, #8]
 800d836:	6823      	ldr	r3, [r4, #0]
 800d838:	1c5a      	adds	r2, r3, #1
 800d83a:	6022      	str	r2, [r4, #0]
 800d83c:	701e      	strb	r6, [r3, #0]
 800d83e:	6962      	ldr	r2, [r4, #20]
 800d840:	1c43      	adds	r3, r0, #1
 800d842:	429a      	cmp	r2, r3
 800d844:	d004      	beq.n	800d850 <__swbuf_r+0x6e>
 800d846:	89a3      	ldrh	r3, [r4, #12]
 800d848:	07db      	lsls	r3, r3, #31
 800d84a:	d5e1      	bpl.n	800d810 <__swbuf_r+0x2e>
 800d84c:	2e0a      	cmp	r6, #10
 800d84e:	d1df      	bne.n	800d810 <__swbuf_r+0x2e>
 800d850:	4621      	mov	r1, r4
 800d852:	4628      	mov	r0, r5
 800d854:	f001 fef8 	bl	800f648 <_fflush_r>
 800d858:	2800      	cmp	r0, #0
 800d85a:	d0d9      	beq.n	800d810 <__swbuf_r+0x2e>
 800d85c:	e7d6      	b.n	800d80c <__swbuf_r+0x2a>
	...

0800d860 <__swsetup_r>:
 800d860:	b538      	push	{r3, r4, r5, lr}
 800d862:	4b29      	ldr	r3, [pc, #164]	@ (800d908 <__swsetup_r+0xa8>)
 800d864:	4605      	mov	r5, r0
 800d866:	6818      	ldr	r0, [r3, #0]
 800d868:	460c      	mov	r4, r1
 800d86a:	b118      	cbz	r0, 800d874 <__swsetup_r+0x14>
 800d86c:	6a03      	ldr	r3, [r0, #32]
 800d86e:	b90b      	cbnz	r3, 800d874 <__swsetup_r+0x14>
 800d870:	f7ff feac 	bl	800d5cc <__sinit>
 800d874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d878:	0719      	lsls	r1, r3, #28
 800d87a:	d422      	bmi.n	800d8c2 <__swsetup_r+0x62>
 800d87c:	06da      	lsls	r2, r3, #27
 800d87e:	d407      	bmi.n	800d890 <__swsetup_r+0x30>
 800d880:	2209      	movs	r2, #9
 800d882:	602a      	str	r2, [r5, #0]
 800d884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d888:	81a3      	strh	r3, [r4, #12]
 800d88a:	f04f 30ff 	mov.w	r0, #4294967295
 800d88e:	e033      	b.n	800d8f8 <__swsetup_r+0x98>
 800d890:	0758      	lsls	r0, r3, #29
 800d892:	d512      	bpl.n	800d8ba <__swsetup_r+0x5a>
 800d894:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d896:	b141      	cbz	r1, 800d8aa <__swsetup_r+0x4a>
 800d898:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d89c:	4299      	cmp	r1, r3
 800d89e:	d002      	beq.n	800d8a6 <__swsetup_r+0x46>
 800d8a0:	4628      	mov	r0, r5
 800d8a2:	f000 ff39 	bl	800e718 <_free_r>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d8aa:	89a3      	ldrh	r3, [r4, #12]
 800d8ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d8b0:	81a3      	strh	r3, [r4, #12]
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	6063      	str	r3, [r4, #4]
 800d8b6:	6923      	ldr	r3, [r4, #16]
 800d8b8:	6023      	str	r3, [r4, #0]
 800d8ba:	89a3      	ldrh	r3, [r4, #12]
 800d8bc:	f043 0308 	orr.w	r3, r3, #8
 800d8c0:	81a3      	strh	r3, [r4, #12]
 800d8c2:	6923      	ldr	r3, [r4, #16]
 800d8c4:	b94b      	cbnz	r3, 800d8da <__swsetup_r+0x7a>
 800d8c6:	89a3      	ldrh	r3, [r4, #12]
 800d8c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d8cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d8d0:	d003      	beq.n	800d8da <__swsetup_r+0x7a>
 800d8d2:	4621      	mov	r1, r4
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	f001 ff17 	bl	800f708 <__smakebuf_r>
 800d8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8de:	f013 0201 	ands.w	r2, r3, #1
 800d8e2:	d00a      	beq.n	800d8fa <__swsetup_r+0x9a>
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	60a2      	str	r2, [r4, #8]
 800d8e8:	6962      	ldr	r2, [r4, #20]
 800d8ea:	4252      	negs	r2, r2
 800d8ec:	61a2      	str	r2, [r4, #24]
 800d8ee:	6922      	ldr	r2, [r4, #16]
 800d8f0:	b942      	cbnz	r2, 800d904 <__swsetup_r+0xa4>
 800d8f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d8f6:	d1c5      	bne.n	800d884 <__swsetup_r+0x24>
 800d8f8:	bd38      	pop	{r3, r4, r5, pc}
 800d8fa:	0799      	lsls	r1, r3, #30
 800d8fc:	bf58      	it	pl
 800d8fe:	6962      	ldrpl	r2, [r4, #20]
 800d900:	60a2      	str	r2, [r4, #8]
 800d902:	e7f4      	b.n	800d8ee <__swsetup_r+0x8e>
 800d904:	2000      	movs	r0, #0
 800d906:	e7f7      	b.n	800d8f8 <__swsetup_r+0x98>
 800d908:	2000007c 	.word	0x2000007c

0800d90c <memset>:
 800d90c:	4402      	add	r2, r0
 800d90e:	4603      	mov	r3, r0
 800d910:	4293      	cmp	r3, r2
 800d912:	d100      	bne.n	800d916 <memset+0xa>
 800d914:	4770      	bx	lr
 800d916:	f803 1b01 	strb.w	r1, [r3], #1
 800d91a:	e7f9      	b.n	800d910 <memset+0x4>

0800d91c <_localeconv_r>:
 800d91c:	4800      	ldr	r0, [pc, #0]	@ (800d920 <_localeconv_r+0x4>)
 800d91e:	4770      	bx	lr
 800d920:	200001bc 	.word	0x200001bc

0800d924 <_close_r>:
 800d924:	b538      	push	{r3, r4, r5, lr}
 800d926:	4d06      	ldr	r5, [pc, #24]	@ (800d940 <_close_r+0x1c>)
 800d928:	2300      	movs	r3, #0
 800d92a:	4604      	mov	r4, r0
 800d92c:	4608      	mov	r0, r1
 800d92e:	602b      	str	r3, [r5, #0]
 800d930:	f7f5 ff42 	bl	80037b8 <_close>
 800d934:	1c43      	adds	r3, r0, #1
 800d936:	d102      	bne.n	800d93e <_close_r+0x1a>
 800d938:	682b      	ldr	r3, [r5, #0]
 800d93a:	b103      	cbz	r3, 800d93e <_close_r+0x1a>
 800d93c:	6023      	str	r3, [r4, #0]
 800d93e:	bd38      	pop	{r3, r4, r5, pc}
 800d940:	20003030 	.word	0x20003030

0800d944 <_lseek_r>:
 800d944:	b538      	push	{r3, r4, r5, lr}
 800d946:	4d07      	ldr	r5, [pc, #28]	@ (800d964 <_lseek_r+0x20>)
 800d948:	4604      	mov	r4, r0
 800d94a:	4608      	mov	r0, r1
 800d94c:	4611      	mov	r1, r2
 800d94e:	2200      	movs	r2, #0
 800d950:	602a      	str	r2, [r5, #0]
 800d952:	461a      	mov	r2, r3
 800d954:	f7f5 ff57 	bl	8003806 <_lseek>
 800d958:	1c43      	adds	r3, r0, #1
 800d95a:	d102      	bne.n	800d962 <_lseek_r+0x1e>
 800d95c:	682b      	ldr	r3, [r5, #0]
 800d95e:	b103      	cbz	r3, 800d962 <_lseek_r+0x1e>
 800d960:	6023      	str	r3, [r4, #0]
 800d962:	bd38      	pop	{r3, r4, r5, pc}
 800d964:	20003030 	.word	0x20003030

0800d968 <_read_r>:
 800d968:	b538      	push	{r3, r4, r5, lr}
 800d96a:	4d07      	ldr	r5, [pc, #28]	@ (800d988 <_read_r+0x20>)
 800d96c:	4604      	mov	r4, r0
 800d96e:	4608      	mov	r0, r1
 800d970:	4611      	mov	r1, r2
 800d972:	2200      	movs	r2, #0
 800d974:	602a      	str	r2, [r5, #0]
 800d976:	461a      	mov	r2, r3
 800d978:	f7f5 fee5 	bl	8003746 <_read>
 800d97c:	1c43      	adds	r3, r0, #1
 800d97e:	d102      	bne.n	800d986 <_read_r+0x1e>
 800d980:	682b      	ldr	r3, [r5, #0]
 800d982:	b103      	cbz	r3, 800d986 <_read_r+0x1e>
 800d984:	6023      	str	r3, [r4, #0]
 800d986:	bd38      	pop	{r3, r4, r5, pc}
 800d988:	20003030 	.word	0x20003030

0800d98c <_write_r>:
 800d98c:	b538      	push	{r3, r4, r5, lr}
 800d98e:	4d07      	ldr	r5, [pc, #28]	@ (800d9ac <_write_r+0x20>)
 800d990:	4604      	mov	r4, r0
 800d992:	4608      	mov	r0, r1
 800d994:	4611      	mov	r1, r2
 800d996:	2200      	movs	r2, #0
 800d998:	602a      	str	r2, [r5, #0]
 800d99a:	461a      	mov	r2, r3
 800d99c:	f7f5 fef0 	bl	8003780 <_write>
 800d9a0:	1c43      	adds	r3, r0, #1
 800d9a2:	d102      	bne.n	800d9aa <_write_r+0x1e>
 800d9a4:	682b      	ldr	r3, [r5, #0]
 800d9a6:	b103      	cbz	r3, 800d9aa <_write_r+0x1e>
 800d9a8:	6023      	str	r3, [r4, #0]
 800d9aa:	bd38      	pop	{r3, r4, r5, pc}
 800d9ac:	20003030 	.word	0x20003030

0800d9b0 <__errno>:
 800d9b0:	4b01      	ldr	r3, [pc, #4]	@ (800d9b8 <__errno+0x8>)
 800d9b2:	6818      	ldr	r0, [r3, #0]
 800d9b4:	4770      	bx	lr
 800d9b6:	bf00      	nop
 800d9b8:	2000007c 	.word	0x2000007c

0800d9bc <__libc_init_array>:
 800d9bc:	b570      	push	{r4, r5, r6, lr}
 800d9be:	4d0d      	ldr	r5, [pc, #52]	@ (800d9f4 <__libc_init_array+0x38>)
 800d9c0:	4c0d      	ldr	r4, [pc, #52]	@ (800d9f8 <__libc_init_array+0x3c>)
 800d9c2:	1b64      	subs	r4, r4, r5
 800d9c4:	10a4      	asrs	r4, r4, #2
 800d9c6:	2600      	movs	r6, #0
 800d9c8:	42a6      	cmp	r6, r4
 800d9ca:	d109      	bne.n	800d9e0 <__libc_init_array+0x24>
 800d9cc:	4d0b      	ldr	r5, [pc, #44]	@ (800d9fc <__libc_init_array+0x40>)
 800d9ce:	4c0c      	ldr	r4, [pc, #48]	@ (800da00 <__libc_init_array+0x44>)
 800d9d0:	f001 ffd6 	bl	800f980 <_init>
 800d9d4:	1b64      	subs	r4, r4, r5
 800d9d6:	10a4      	asrs	r4, r4, #2
 800d9d8:	2600      	movs	r6, #0
 800d9da:	42a6      	cmp	r6, r4
 800d9dc:	d105      	bne.n	800d9ea <__libc_init_array+0x2e>
 800d9de:	bd70      	pop	{r4, r5, r6, pc}
 800d9e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9e4:	4798      	blx	r3
 800d9e6:	3601      	adds	r6, #1
 800d9e8:	e7ee      	b.n	800d9c8 <__libc_init_array+0xc>
 800d9ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9ee:	4798      	blx	r3
 800d9f0:	3601      	adds	r6, #1
 800d9f2:	e7f2      	b.n	800d9da <__libc_init_array+0x1e>
 800d9f4:	0800ff04 	.word	0x0800ff04
 800d9f8:	0800ff04 	.word	0x0800ff04
 800d9fc:	0800ff04 	.word	0x0800ff04
 800da00:	0800ff08 	.word	0x0800ff08

0800da04 <__retarget_lock_init_recursive>:
 800da04:	4770      	bx	lr

0800da06 <__retarget_lock_acquire_recursive>:
 800da06:	4770      	bx	lr

0800da08 <__retarget_lock_release_recursive>:
 800da08:	4770      	bx	lr

0800da0a <memcpy>:
 800da0a:	440a      	add	r2, r1
 800da0c:	4291      	cmp	r1, r2
 800da0e:	f100 33ff 	add.w	r3, r0, #4294967295
 800da12:	d100      	bne.n	800da16 <memcpy+0xc>
 800da14:	4770      	bx	lr
 800da16:	b510      	push	{r4, lr}
 800da18:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da20:	4291      	cmp	r1, r2
 800da22:	d1f9      	bne.n	800da18 <memcpy+0xe>
 800da24:	bd10      	pop	{r4, pc}
	...

0800da28 <__assert_func>:
 800da28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da2a:	4614      	mov	r4, r2
 800da2c:	461a      	mov	r2, r3
 800da2e:	4b09      	ldr	r3, [pc, #36]	@ (800da54 <__assert_func+0x2c>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4605      	mov	r5, r0
 800da34:	68d8      	ldr	r0, [r3, #12]
 800da36:	b14c      	cbz	r4, 800da4c <__assert_func+0x24>
 800da38:	4b07      	ldr	r3, [pc, #28]	@ (800da58 <__assert_func+0x30>)
 800da3a:	9100      	str	r1, [sp, #0]
 800da3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800da40:	4906      	ldr	r1, [pc, #24]	@ (800da5c <__assert_func+0x34>)
 800da42:	462b      	mov	r3, r5
 800da44:	f001 fe28 	bl	800f698 <fiprintf>
 800da48:	f001 fee6 	bl	800f818 <abort>
 800da4c:	4b04      	ldr	r3, [pc, #16]	@ (800da60 <__assert_func+0x38>)
 800da4e:	461c      	mov	r4, r3
 800da50:	e7f3      	b.n	800da3a <__assert_func+0x12>
 800da52:	bf00      	nop
 800da54:	2000007c 	.word	0x2000007c
 800da58:	0800fbd3 	.word	0x0800fbd3
 800da5c:	0800fbe0 	.word	0x0800fbe0
 800da60:	0800fc0e 	.word	0x0800fc0e

0800da64 <quorem>:
 800da64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da68:	6903      	ldr	r3, [r0, #16]
 800da6a:	690c      	ldr	r4, [r1, #16]
 800da6c:	42a3      	cmp	r3, r4
 800da6e:	4607      	mov	r7, r0
 800da70:	db7e      	blt.n	800db70 <quorem+0x10c>
 800da72:	3c01      	subs	r4, #1
 800da74:	f101 0814 	add.w	r8, r1, #20
 800da78:	00a3      	lsls	r3, r4, #2
 800da7a:	f100 0514 	add.w	r5, r0, #20
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da84:	9301      	str	r3, [sp, #4]
 800da86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800da8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da8e:	3301      	adds	r3, #1
 800da90:	429a      	cmp	r2, r3
 800da92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800da96:	fbb2 f6f3 	udiv	r6, r2, r3
 800da9a:	d32e      	bcc.n	800dafa <quorem+0x96>
 800da9c:	f04f 0a00 	mov.w	sl, #0
 800daa0:	46c4      	mov	ip, r8
 800daa2:	46ae      	mov	lr, r5
 800daa4:	46d3      	mov	fp, sl
 800daa6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800daaa:	b298      	uxth	r0, r3
 800daac:	fb06 a000 	mla	r0, r6, r0, sl
 800dab0:	0c02      	lsrs	r2, r0, #16
 800dab2:	0c1b      	lsrs	r3, r3, #16
 800dab4:	fb06 2303 	mla	r3, r6, r3, r2
 800dab8:	f8de 2000 	ldr.w	r2, [lr]
 800dabc:	b280      	uxth	r0, r0
 800dabe:	b292      	uxth	r2, r2
 800dac0:	1a12      	subs	r2, r2, r0
 800dac2:	445a      	add	r2, fp
 800dac4:	f8de 0000 	ldr.w	r0, [lr]
 800dac8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dacc:	b29b      	uxth	r3, r3
 800dace:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dad2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dad6:	b292      	uxth	r2, r2
 800dad8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dadc:	45e1      	cmp	r9, ip
 800dade:	f84e 2b04 	str.w	r2, [lr], #4
 800dae2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dae6:	d2de      	bcs.n	800daa6 <quorem+0x42>
 800dae8:	9b00      	ldr	r3, [sp, #0]
 800daea:	58eb      	ldr	r3, [r5, r3]
 800daec:	b92b      	cbnz	r3, 800dafa <quorem+0x96>
 800daee:	9b01      	ldr	r3, [sp, #4]
 800daf0:	3b04      	subs	r3, #4
 800daf2:	429d      	cmp	r5, r3
 800daf4:	461a      	mov	r2, r3
 800daf6:	d32f      	bcc.n	800db58 <quorem+0xf4>
 800daf8:	613c      	str	r4, [r7, #16]
 800dafa:	4638      	mov	r0, r7
 800dafc:	f001 f97e 	bl	800edfc <__mcmp>
 800db00:	2800      	cmp	r0, #0
 800db02:	db25      	blt.n	800db50 <quorem+0xec>
 800db04:	4629      	mov	r1, r5
 800db06:	2000      	movs	r0, #0
 800db08:	f858 2b04 	ldr.w	r2, [r8], #4
 800db0c:	f8d1 c000 	ldr.w	ip, [r1]
 800db10:	fa1f fe82 	uxth.w	lr, r2
 800db14:	fa1f f38c 	uxth.w	r3, ip
 800db18:	eba3 030e 	sub.w	r3, r3, lr
 800db1c:	4403      	add	r3, r0
 800db1e:	0c12      	lsrs	r2, r2, #16
 800db20:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800db24:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800db28:	b29b      	uxth	r3, r3
 800db2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db2e:	45c1      	cmp	r9, r8
 800db30:	f841 3b04 	str.w	r3, [r1], #4
 800db34:	ea4f 4022 	mov.w	r0, r2, asr #16
 800db38:	d2e6      	bcs.n	800db08 <quorem+0xa4>
 800db3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db42:	b922      	cbnz	r2, 800db4e <quorem+0xea>
 800db44:	3b04      	subs	r3, #4
 800db46:	429d      	cmp	r5, r3
 800db48:	461a      	mov	r2, r3
 800db4a:	d30b      	bcc.n	800db64 <quorem+0x100>
 800db4c:	613c      	str	r4, [r7, #16]
 800db4e:	3601      	adds	r6, #1
 800db50:	4630      	mov	r0, r6
 800db52:	b003      	add	sp, #12
 800db54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db58:	6812      	ldr	r2, [r2, #0]
 800db5a:	3b04      	subs	r3, #4
 800db5c:	2a00      	cmp	r2, #0
 800db5e:	d1cb      	bne.n	800daf8 <quorem+0x94>
 800db60:	3c01      	subs	r4, #1
 800db62:	e7c6      	b.n	800daf2 <quorem+0x8e>
 800db64:	6812      	ldr	r2, [r2, #0]
 800db66:	3b04      	subs	r3, #4
 800db68:	2a00      	cmp	r2, #0
 800db6a:	d1ef      	bne.n	800db4c <quorem+0xe8>
 800db6c:	3c01      	subs	r4, #1
 800db6e:	e7ea      	b.n	800db46 <quorem+0xe2>
 800db70:	2000      	movs	r0, #0
 800db72:	e7ee      	b.n	800db52 <quorem+0xee>
 800db74:	0000      	movs	r0, r0
	...

0800db78 <_dtoa_r>:
 800db78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db7c:	69c7      	ldr	r7, [r0, #28]
 800db7e:	b097      	sub	sp, #92	@ 0x5c
 800db80:	ed8d 0b04 	vstr	d0, [sp, #16]
 800db84:	ec55 4b10 	vmov	r4, r5, d0
 800db88:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800db8a:	9107      	str	r1, [sp, #28]
 800db8c:	4681      	mov	r9, r0
 800db8e:	920c      	str	r2, [sp, #48]	@ 0x30
 800db90:	9311      	str	r3, [sp, #68]	@ 0x44
 800db92:	b97f      	cbnz	r7, 800dbb4 <_dtoa_r+0x3c>
 800db94:	2010      	movs	r0, #16
 800db96:	f000 fe09 	bl	800e7ac <malloc>
 800db9a:	4602      	mov	r2, r0
 800db9c:	f8c9 001c 	str.w	r0, [r9, #28]
 800dba0:	b920      	cbnz	r0, 800dbac <_dtoa_r+0x34>
 800dba2:	4ba9      	ldr	r3, [pc, #676]	@ (800de48 <_dtoa_r+0x2d0>)
 800dba4:	21ef      	movs	r1, #239	@ 0xef
 800dba6:	48a9      	ldr	r0, [pc, #676]	@ (800de4c <_dtoa_r+0x2d4>)
 800dba8:	f7ff ff3e 	bl	800da28 <__assert_func>
 800dbac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dbb0:	6007      	str	r7, [r0, #0]
 800dbb2:	60c7      	str	r7, [r0, #12]
 800dbb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dbb8:	6819      	ldr	r1, [r3, #0]
 800dbba:	b159      	cbz	r1, 800dbd4 <_dtoa_r+0x5c>
 800dbbc:	685a      	ldr	r2, [r3, #4]
 800dbbe:	604a      	str	r2, [r1, #4]
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	4093      	lsls	r3, r2
 800dbc4:	608b      	str	r3, [r1, #8]
 800dbc6:	4648      	mov	r0, r9
 800dbc8:	f000 fee6 	bl	800e998 <_Bfree>
 800dbcc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	601a      	str	r2, [r3, #0]
 800dbd4:	1e2b      	subs	r3, r5, #0
 800dbd6:	bfb9      	ittee	lt
 800dbd8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dbdc:	9305      	strlt	r3, [sp, #20]
 800dbde:	2300      	movge	r3, #0
 800dbe0:	6033      	strge	r3, [r6, #0]
 800dbe2:	9f05      	ldr	r7, [sp, #20]
 800dbe4:	4b9a      	ldr	r3, [pc, #616]	@ (800de50 <_dtoa_r+0x2d8>)
 800dbe6:	bfbc      	itt	lt
 800dbe8:	2201      	movlt	r2, #1
 800dbea:	6032      	strlt	r2, [r6, #0]
 800dbec:	43bb      	bics	r3, r7
 800dbee:	d112      	bne.n	800dc16 <_dtoa_r+0x9e>
 800dbf0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dbf2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dbf6:	6013      	str	r3, [r2, #0]
 800dbf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dbfc:	4323      	orrs	r3, r4
 800dbfe:	f000 855a 	beq.w	800e6b6 <_dtoa_r+0xb3e>
 800dc02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dc04:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800de64 <_dtoa_r+0x2ec>
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	f000 855c 	beq.w	800e6c6 <_dtoa_r+0xb4e>
 800dc0e:	f10a 0303 	add.w	r3, sl, #3
 800dc12:	f000 bd56 	b.w	800e6c2 <_dtoa_r+0xb4a>
 800dc16:	ed9d 7b04 	vldr	d7, [sp, #16]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	ec51 0b17 	vmov	r0, r1, d7
 800dc20:	2300      	movs	r3, #0
 800dc22:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800dc26:	f7f2 ff4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc2a:	4680      	mov	r8, r0
 800dc2c:	b158      	cbz	r0, 800dc46 <_dtoa_r+0xce>
 800dc2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dc30:	2301      	movs	r3, #1
 800dc32:	6013      	str	r3, [r2, #0]
 800dc34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dc36:	b113      	cbz	r3, 800dc3e <_dtoa_r+0xc6>
 800dc38:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dc3a:	4b86      	ldr	r3, [pc, #536]	@ (800de54 <_dtoa_r+0x2dc>)
 800dc3c:	6013      	str	r3, [r2, #0]
 800dc3e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800de68 <_dtoa_r+0x2f0>
 800dc42:	f000 bd40 	b.w	800e6c6 <_dtoa_r+0xb4e>
 800dc46:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800dc4a:	aa14      	add	r2, sp, #80	@ 0x50
 800dc4c:	a915      	add	r1, sp, #84	@ 0x54
 800dc4e:	4648      	mov	r0, r9
 800dc50:	f001 f984 	bl	800ef5c <__d2b>
 800dc54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dc58:	9002      	str	r0, [sp, #8]
 800dc5a:	2e00      	cmp	r6, #0
 800dc5c:	d078      	beq.n	800dd50 <_dtoa_r+0x1d8>
 800dc5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc60:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800dc64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dc6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dc70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dc74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dc78:	4619      	mov	r1, r3
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	4b76      	ldr	r3, [pc, #472]	@ (800de58 <_dtoa_r+0x2e0>)
 800dc7e:	f7f2 fb03 	bl	8000288 <__aeabi_dsub>
 800dc82:	a36b      	add	r3, pc, #428	@ (adr r3, 800de30 <_dtoa_r+0x2b8>)
 800dc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc88:	f7f2 fcb6 	bl	80005f8 <__aeabi_dmul>
 800dc8c:	a36a      	add	r3, pc, #424	@ (adr r3, 800de38 <_dtoa_r+0x2c0>)
 800dc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc92:	f7f2 fafb 	bl	800028c <__adddf3>
 800dc96:	4604      	mov	r4, r0
 800dc98:	4630      	mov	r0, r6
 800dc9a:	460d      	mov	r5, r1
 800dc9c:	f7f2 fc42 	bl	8000524 <__aeabi_i2d>
 800dca0:	a367      	add	r3, pc, #412	@ (adr r3, 800de40 <_dtoa_r+0x2c8>)
 800dca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca6:	f7f2 fca7 	bl	80005f8 <__aeabi_dmul>
 800dcaa:	4602      	mov	r2, r0
 800dcac:	460b      	mov	r3, r1
 800dcae:	4620      	mov	r0, r4
 800dcb0:	4629      	mov	r1, r5
 800dcb2:	f7f2 faeb 	bl	800028c <__adddf3>
 800dcb6:	4604      	mov	r4, r0
 800dcb8:	460d      	mov	r5, r1
 800dcba:	f7f2 ff4d 	bl	8000b58 <__aeabi_d2iz>
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	4607      	mov	r7, r0
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	4629      	mov	r1, r5
 800dcc8:	f7f2 ff08 	bl	8000adc <__aeabi_dcmplt>
 800dccc:	b140      	cbz	r0, 800dce0 <_dtoa_r+0x168>
 800dcce:	4638      	mov	r0, r7
 800dcd0:	f7f2 fc28 	bl	8000524 <__aeabi_i2d>
 800dcd4:	4622      	mov	r2, r4
 800dcd6:	462b      	mov	r3, r5
 800dcd8:	f7f2 fef6 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcdc:	b900      	cbnz	r0, 800dce0 <_dtoa_r+0x168>
 800dcde:	3f01      	subs	r7, #1
 800dce0:	2f16      	cmp	r7, #22
 800dce2:	d852      	bhi.n	800dd8a <_dtoa_r+0x212>
 800dce4:	4b5d      	ldr	r3, [pc, #372]	@ (800de5c <_dtoa_r+0x2e4>)
 800dce6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dcf2:	f7f2 fef3 	bl	8000adc <__aeabi_dcmplt>
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	d049      	beq.n	800dd8e <_dtoa_r+0x216>
 800dcfa:	3f01      	subs	r7, #1
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	9310      	str	r3, [sp, #64]	@ 0x40
 800dd00:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dd02:	1b9b      	subs	r3, r3, r6
 800dd04:	1e5a      	subs	r2, r3, #1
 800dd06:	bf45      	ittet	mi
 800dd08:	f1c3 0301 	rsbmi	r3, r3, #1
 800dd0c:	9300      	strmi	r3, [sp, #0]
 800dd0e:	2300      	movpl	r3, #0
 800dd10:	2300      	movmi	r3, #0
 800dd12:	9206      	str	r2, [sp, #24]
 800dd14:	bf54      	ite	pl
 800dd16:	9300      	strpl	r3, [sp, #0]
 800dd18:	9306      	strmi	r3, [sp, #24]
 800dd1a:	2f00      	cmp	r7, #0
 800dd1c:	db39      	blt.n	800dd92 <_dtoa_r+0x21a>
 800dd1e:	9b06      	ldr	r3, [sp, #24]
 800dd20:	970d      	str	r7, [sp, #52]	@ 0x34
 800dd22:	443b      	add	r3, r7
 800dd24:	9306      	str	r3, [sp, #24]
 800dd26:	2300      	movs	r3, #0
 800dd28:	9308      	str	r3, [sp, #32]
 800dd2a:	9b07      	ldr	r3, [sp, #28]
 800dd2c:	2b09      	cmp	r3, #9
 800dd2e:	d863      	bhi.n	800ddf8 <_dtoa_r+0x280>
 800dd30:	2b05      	cmp	r3, #5
 800dd32:	bfc4      	itt	gt
 800dd34:	3b04      	subgt	r3, #4
 800dd36:	9307      	strgt	r3, [sp, #28]
 800dd38:	9b07      	ldr	r3, [sp, #28]
 800dd3a:	f1a3 0302 	sub.w	r3, r3, #2
 800dd3e:	bfcc      	ite	gt
 800dd40:	2400      	movgt	r4, #0
 800dd42:	2401      	movle	r4, #1
 800dd44:	2b03      	cmp	r3, #3
 800dd46:	d863      	bhi.n	800de10 <_dtoa_r+0x298>
 800dd48:	e8df f003 	tbb	[pc, r3]
 800dd4c:	2b375452 	.word	0x2b375452
 800dd50:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800dd54:	441e      	add	r6, r3
 800dd56:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dd5a:	2b20      	cmp	r3, #32
 800dd5c:	bfc1      	itttt	gt
 800dd5e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dd62:	409f      	lslgt	r7, r3
 800dd64:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dd68:	fa24 f303 	lsrgt.w	r3, r4, r3
 800dd6c:	bfd6      	itet	le
 800dd6e:	f1c3 0320 	rsble	r3, r3, #32
 800dd72:	ea47 0003 	orrgt.w	r0, r7, r3
 800dd76:	fa04 f003 	lslle.w	r0, r4, r3
 800dd7a:	f7f2 fbc3 	bl	8000504 <__aeabi_ui2d>
 800dd7e:	2201      	movs	r2, #1
 800dd80:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800dd84:	3e01      	subs	r6, #1
 800dd86:	9212      	str	r2, [sp, #72]	@ 0x48
 800dd88:	e776      	b.n	800dc78 <_dtoa_r+0x100>
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	e7b7      	b.n	800dcfe <_dtoa_r+0x186>
 800dd8e:	9010      	str	r0, [sp, #64]	@ 0x40
 800dd90:	e7b6      	b.n	800dd00 <_dtoa_r+0x188>
 800dd92:	9b00      	ldr	r3, [sp, #0]
 800dd94:	1bdb      	subs	r3, r3, r7
 800dd96:	9300      	str	r3, [sp, #0]
 800dd98:	427b      	negs	r3, r7
 800dd9a:	9308      	str	r3, [sp, #32]
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	930d      	str	r3, [sp, #52]	@ 0x34
 800dda0:	e7c3      	b.n	800dd2a <_dtoa_r+0x1b2>
 800dda2:	2301      	movs	r3, #1
 800dda4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dda6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dda8:	eb07 0b03 	add.w	fp, r7, r3
 800ddac:	f10b 0301 	add.w	r3, fp, #1
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	9303      	str	r3, [sp, #12]
 800ddb4:	bfb8      	it	lt
 800ddb6:	2301      	movlt	r3, #1
 800ddb8:	e006      	b.n	800ddc8 <_dtoa_r+0x250>
 800ddba:	2301      	movs	r3, #1
 800ddbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	dd28      	ble.n	800de16 <_dtoa_r+0x29e>
 800ddc4:	469b      	mov	fp, r3
 800ddc6:	9303      	str	r3, [sp, #12]
 800ddc8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ddcc:	2100      	movs	r1, #0
 800ddce:	2204      	movs	r2, #4
 800ddd0:	f102 0514 	add.w	r5, r2, #20
 800ddd4:	429d      	cmp	r5, r3
 800ddd6:	d926      	bls.n	800de26 <_dtoa_r+0x2ae>
 800ddd8:	6041      	str	r1, [r0, #4]
 800ddda:	4648      	mov	r0, r9
 800dddc:	f000 fd9c 	bl	800e918 <_Balloc>
 800dde0:	4682      	mov	sl, r0
 800dde2:	2800      	cmp	r0, #0
 800dde4:	d142      	bne.n	800de6c <_dtoa_r+0x2f4>
 800dde6:	4b1e      	ldr	r3, [pc, #120]	@ (800de60 <_dtoa_r+0x2e8>)
 800dde8:	4602      	mov	r2, r0
 800ddea:	f240 11af 	movw	r1, #431	@ 0x1af
 800ddee:	e6da      	b.n	800dba6 <_dtoa_r+0x2e>
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	e7e3      	b.n	800ddbc <_dtoa_r+0x244>
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	e7d5      	b.n	800dda4 <_dtoa_r+0x22c>
 800ddf8:	2401      	movs	r4, #1
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	9307      	str	r3, [sp, #28]
 800ddfe:	9409      	str	r4, [sp, #36]	@ 0x24
 800de00:	f04f 3bff 	mov.w	fp, #4294967295
 800de04:	2200      	movs	r2, #0
 800de06:	f8cd b00c 	str.w	fp, [sp, #12]
 800de0a:	2312      	movs	r3, #18
 800de0c:	920c      	str	r2, [sp, #48]	@ 0x30
 800de0e:	e7db      	b.n	800ddc8 <_dtoa_r+0x250>
 800de10:	2301      	movs	r3, #1
 800de12:	9309      	str	r3, [sp, #36]	@ 0x24
 800de14:	e7f4      	b.n	800de00 <_dtoa_r+0x288>
 800de16:	f04f 0b01 	mov.w	fp, #1
 800de1a:	f8cd b00c 	str.w	fp, [sp, #12]
 800de1e:	465b      	mov	r3, fp
 800de20:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800de24:	e7d0      	b.n	800ddc8 <_dtoa_r+0x250>
 800de26:	3101      	adds	r1, #1
 800de28:	0052      	lsls	r2, r2, #1
 800de2a:	e7d1      	b.n	800ddd0 <_dtoa_r+0x258>
 800de2c:	f3af 8000 	nop.w
 800de30:	636f4361 	.word	0x636f4361
 800de34:	3fd287a7 	.word	0x3fd287a7
 800de38:	8b60c8b3 	.word	0x8b60c8b3
 800de3c:	3fc68a28 	.word	0x3fc68a28
 800de40:	509f79fb 	.word	0x509f79fb
 800de44:	3fd34413 	.word	0x3fd34413
 800de48:	0800fb30 	.word	0x0800fb30
 800de4c:	0800fc1c 	.word	0x0800fc1c
 800de50:	7ff00000 	.word	0x7ff00000
 800de54:	0800fbb0 	.word	0x0800fbb0
 800de58:	3ff80000 	.word	0x3ff80000
 800de5c:	0800fd30 	.word	0x0800fd30
 800de60:	0800fc74 	.word	0x0800fc74
 800de64:	0800fc18 	.word	0x0800fc18
 800de68:	0800fbaf 	.word	0x0800fbaf
 800de6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800de70:	6018      	str	r0, [r3, #0]
 800de72:	9b03      	ldr	r3, [sp, #12]
 800de74:	2b0e      	cmp	r3, #14
 800de76:	f200 80a1 	bhi.w	800dfbc <_dtoa_r+0x444>
 800de7a:	2c00      	cmp	r4, #0
 800de7c:	f000 809e 	beq.w	800dfbc <_dtoa_r+0x444>
 800de80:	2f00      	cmp	r7, #0
 800de82:	dd33      	ble.n	800deec <_dtoa_r+0x374>
 800de84:	4b9c      	ldr	r3, [pc, #624]	@ (800e0f8 <_dtoa_r+0x580>)
 800de86:	f007 020f 	and.w	r2, r7, #15
 800de8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de8e:	ed93 7b00 	vldr	d7, [r3]
 800de92:	05f8      	lsls	r0, r7, #23
 800de94:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800de98:	ea4f 1427 	mov.w	r4, r7, asr #4
 800de9c:	d516      	bpl.n	800decc <_dtoa_r+0x354>
 800de9e:	4b97      	ldr	r3, [pc, #604]	@ (800e0fc <_dtoa_r+0x584>)
 800dea0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dea4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dea8:	f7f2 fcd0 	bl	800084c <__aeabi_ddiv>
 800deac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800deb0:	f004 040f 	and.w	r4, r4, #15
 800deb4:	2603      	movs	r6, #3
 800deb6:	4d91      	ldr	r5, [pc, #580]	@ (800e0fc <_dtoa_r+0x584>)
 800deb8:	b954      	cbnz	r4, 800ded0 <_dtoa_r+0x358>
 800deba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800debe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dec2:	f7f2 fcc3 	bl	800084c <__aeabi_ddiv>
 800dec6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800deca:	e028      	b.n	800df1e <_dtoa_r+0x3a6>
 800decc:	2602      	movs	r6, #2
 800dece:	e7f2      	b.n	800deb6 <_dtoa_r+0x33e>
 800ded0:	07e1      	lsls	r1, r4, #31
 800ded2:	d508      	bpl.n	800dee6 <_dtoa_r+0x36e>
 800ded4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ded8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dedc:	f7f2 fb8c 	bl	80005f8 <__aeabi_dmul>
 800dee0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dee4:	3601      	adds	r6, #1
 800dee6:	1064      	asrs	r4, r4, #1
 800dee8:	3508      	adds	r5, #8
 800deea:	e7e5      	b.n	800deb8 <_dtoa_r+0x340>
 800deec:	f000 80af 	beq.w	800e04e <_dtoa_r+0x4d6>
 800def0:	427c      	negs	r4, r7
 800def2:	4b81      	ldr	r3, [pc, #516]	@ (800e0f8 <_dtoa_r+0x580>)
 800def4:	4d81      	ldr	r5, [pc, #516]	@ (800e0fc <_dtoa_r+0x584>)
 800def6:	f004 020f 	and.w	r2, r4, #15
 800defa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800defe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800df06:	f7f2 fb77 	bl	80005f8 <__aeabi_dmul>
 800df0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df0e:	1124      	asrs	r4, r4, #4
 800df10:	2300      	movs	r3, #0
 800df12:	2602      	movs	r6, #2
 800df14:	2c00      	cmp	r4, #0
 800df16:	f040 808f 	bne.w	800e038 <_dtoa_r+0x4c0>
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d1d3      	bne.n	800dec6 <_dtoa_r+0x34e>
 800df1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800df20:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800df24:	2b00      	cmp	r3, #0
 800df26:	f000 8094 	beq.w	800e052 <_dtoa_r+0x4da>
 800df2a:	4b75      	ldr	r3, [pc, #468]	@ (800e100 <_dtoa_r+0x588>)
 800df2c:	2200      	movs	r2, #0
 800df2e:	4620      	mov	r0, r4
 800df30:	4629      	mov	r1, r5
 800df32:	f7f2 fdd3 	bl	8000adc <__aeabi_dcmplt>
 800df36:	2800      	cmp	r0, #0
 800df38:	f000 808b 	beq.w	800e052 <_dtoa_r+0x4da>
 800df3c:	9b03      	ldr	r3, [sp, #12]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	f000 8087 	beq.w	800e052 <_dtoa_r+0x4da>
 800df44:	f1bb 0f00 	cmp.w	fp, #0
 800df48:	dd34      	ble.n	800dfb4 <_dtoa_r+0x43c>
 800df4a:	4620      	mov	r0, r4
 800df4c:	4b6d      	ldr	r3, [pc, #436]	@ (800e104 <_dtoa_r+0x58c>)
 800df4e:	2200      	movs	r2, #0
 800df50:	4629      	mov	r1, r5
 800df52:	f7f2 fb51 	bl	80005f8 <__aeabi_dmul>
 800df56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df5a:	f107 38ff 	add.w	r8, r7, #4294967295
 800df5e:	3601      	adds	r6, #1
 800df60:	465c      	mov	r4, fp
 800df62:	4630      	mov	r0, r6
 800df64:	f7f2 fade 	bl	8000524 <__aeabi_i2d>
 800df68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df6c:	f7f2 fb44 	bl	80005f8 <__aeabi_dmul>
 800df70:	4b65      	ldr	r3, [pc, #404]	@ (800e108 <_dtoa_r+0x590>)
 800df72:	2200      	movs	r2, #0
 800df74:	f7f2 f98a 	bl	800028c <__adddf3>
 800df78:	4605      	mov	r5, r0
 800df7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800df7e:	2c00      	cmp	r4, #0
 800df80:	d16a      	bne.n	800e058 <_dtoa_r+0x4e0>
 800df82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df86:	4b61      	ldr	r3, [pc, #388]	@ (800e10c <_dtoa_r+0x594>)
 800df88:	2200      	movs	r2, #0
 800df8a:	f7f2 f97d 	bl	8000288 <__aeabi_dsub>
 800df8e:	4602      	mov	r2, r0
 800df90:	460b      	mov	r3, r1
 800df92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800df96:	462a      	mov	r2, r5
 800df98:	4633      	mov	r3, r6
 800df9a:	f7f2 fdbd 	bl	8000b18 <__aeabi_dcmpgt>
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	f040 8298 	bne.w	800e4d4 <_dtoa_r+0x95c>
 800dfa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dfa8:	462a      	mov	r2, r5
 800dfaa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dfae:	f7f2 fd95 	bl	8000adc <__aeabi_dcmplt>
 800dfb2:	bb38      	cbnz	r0, 800e004 <_dtoa_r+0x48c>
 800dfb4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800dfb8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800dfbc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	f2c0 8157 	blt.w	800e272 <_dtoa_r+0x6fa>
 800dfc4:	2f0e      	cmp	r7, #14
 800dfc6:	f300 8154 	bgt.w	800e272 <_dtoa_r+0x6fa>
 800dfca:	4b4b      	ldr	r3, [pc, #300]	@ (800e0f8 <_dtoa_r+0x580>)
 800dfcc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dfd0:	ed93 7b00 	vldr	d7, [r3]
 800dfd4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	ed8d 7b00 	vstr	d7, [sp]
 800dfdc:	f280 80e5 	bge.w	800e1aa <_dtoa_r+0x632>
 800dfe0:	9b03      	ldr	r3, [sp, #12]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	f300 80e1 	bgt.w	800e1aa <_dtoa_r+0x632>
 800dfe8:	d10c      	bne.n	800e004 <_dtoa_r+0x48c>
 800dfea:	4b48      	ldr	r3, [pc, #288]	@ (800e10c <_dtoa_r+0x594>)
 800dfec:	2200      	movs	r2, #0
 800dfee:	ec51 0b17 	vmov	r0, r1, d7
 800dff2:	f7f2 fb01 	bl	80005f8 <__aeabi_dmul>
 800dff6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dffa:	f7f2 fd83 	bl	8000b04 <__aeabi_dcmpge>
 800dffe:	2800      	cmp	r0, #0
 800e000:	f000 8266 	beq.w	800e4d0 <_dtoa_r+0x958>
 800e004:	2400      	movs	r4, #0
 800e006:	4625      	mov	r5, r4
 800e008:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e00a:	4656      	mov	r6, sl
 800e00c:	ea6f 0803 	mvn.w	r8, r3
 800e010:	2700      	movs	r7, #0
 800e012:	4621      	mov	r1, r4
 800e014:	4648      	mov	r0, r9
 800e016:	f000 fcbf 	bl	800e998 <_Bfree>
 800e01a:	2d00      	cmp	r5, #0
 800e01c:	f000 80bd 	beq.w	800e19a <_dtoa_r+0x622>
 800e020:	b12f      	cbz	r7, 800e02e <_dtoa_r+0x4b6>
 800e022:	42af      	cmp	r7, r5
 800e024:	d003      	beq.n	800e02e <_dtoa_r+0x4b6>
 800e026:	4639      	mov	r1, r7
 800e028:	4648      	mov	r0, r9
 800e02a:	f000 fcb5 	bl	800e998 <_Bfree>
 800e02e:	4629      	mov	r1, r5
 800e030:	4648      	mov	r0, r9
 800e032:	f000 fcb1 	bl	800e998 <_Bfree>
 800e036:	e0b0      	b.n	800e19a <_dtoa_r+0x622>
 800e038:	07e2      	lsls	r2, r4, #31
 800e03a:	d505      	bpl.n	800e048 <_dtoa_r+0x4d0>
 800e03c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e040:	f7f2 fada 	bl	80005f8 <__aeabi_dmul>
 800e044:	3601      	adds	r6, #1
 800e046:	2301      	movs	r3, #1
 800e048:	1064      	asrs	r4, r4, #1
 800e04a:	3508      	adds	r5, #8
 800e04c:	e762      	b.n	800df14 <_dtoa_r+0x39c>
 800e04e:	2602      	movs	r6, #2
 800e050:	e765      	b.n	800df1e <_dtoa_r+0x3a6>
 800e052:	9c03      	ldr	r4, [sp, #12]
 800e054:	46b8      	mov	r8, r7
 800e056:	e784      	b.n	800df62 <_dtoa_r+0x3ea>
 800e058:	4b27      	ldr	r3, [pc, #156]	@ (800e0f8 <_dtoa_r+0x580>)
 800e05a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e05c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e060:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e064:	4454      	add	r4, sl
 800e066:	2900      	cmp	r1, #0
 800e068:	d054      	beq.n	800e114 <_dtoa_r+0x59c>
 800e06a:	4929      	ldr	r1, [pc, #164]	@ (800e110 <_dtoa_r+0x598>)
 800e06c:	2000      	movs	r0, #0
 800e06e:	f7f2 fbed 	bl	800084c <__aeabi_ddiv>
 800e072:	4633      	mov	r3, r6
 800e074:	462a      	mov	r2, r5
 800e076:	f7f2 f907 	bl	8000288 <__aeabi_dsub>
 800e07a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e07e:	4656      	mov	r6, sl
 800e080:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e084:	f7f2 fd68 	bl	8000b58 <__aeabi_d2iz>
 800e088:	4605      	mov	r5, r0
 800e08a:	f7f2 fa4b 	bl	8000524 <__aeabi_i2d>
 800e08e:	4602      	mov	r2, r0
 800e090:	460b      	mov	r3, r1
 800e092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e096:	f7f2 f8f7 	bl	8000288 <__aeabi_dsub>
 800e09a:	3530      	adds	r5, #48	@ 0x30
 800e09c:	4602      	mov	r2, r0
 800e09e:	460b      	mov	r3, r1
 800e0a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e0a4:	f806 5b01 	strb.w	r5, [r6], #1
 800e0a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e0ac:	f7f2 fd16 	bl	8000adc <__aeabi_dcmplt>
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	d172      	bne.n	800e19a <_dtoa_r+0x622>
 800e0b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e0b8:	4911      	ldr	r1, [pc, #68]	@ (800e100 <_dtoa_r+0x588>)
 800e0ba:	2000      	movs	r0, #0
 800e0bc:	f7f2 f8e4 	bl	8000288 <__aeabi_dsub>
 800e0c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e0c4:	f7f2 fd0a 	bl	8000adc <__aeabi_dcmplt>
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	f040 80b4 	bne.w	800e236 <_dtoa_r+0x6be>
 800e0ce:	42a6      	cmp	r6, r4
 800e0d0:	f43f af70 	beq.w	800dfb4 <_dtoa_r+0x43c>
 800e0d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e0d8:	4b0a      	ldr	r3, [pc, #40]	@ (800e104 <_dtoa_r+0x58c>)
 800e0da:	2200      	movs	r2, #0
 800e0dc:	f7f2 fa8c 	bl	80005f8 <__aeabi_dmul>
 800e0e0:	4b08      	ldr	r3, [pc, #32]	@ (800e104 <_dtoa_r+0x58c>)
 800e0e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e0ec:	f7f2 fa84 	bl	80005f8 <__aeabi_dmul>
 800e0f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0f4:	e7c4      	b.n	800e080 <_dtoa_r+0x508>
 800e0f6:	bf00      	nop
 800e0f8:	0800fd30 	.word	0x0800fd30
 800e0fc:	0800fd08 	.word	0x0800fd08
 800e100:	3ff00000 	.word	0x3ff00000
 800e104:	40240000 	.word	0x40240000
 800e108:	401c0000 	.word	0x401c0000
 800e10c:	40140000 	.word	0x40140000
 800e110:	3fe00000 	.word	0x3fe00000
 800e114:	4631      	mov	r1, r6
 800e116:	4628      	mov	r0, r5
 800e118:	f7f2 fa6e 	bl	80005f8 <__aeabi_dmul>
 800e11c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e120:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e122:	4656      	mov	r6, sl
 800e124:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e128:	f7f2 fd16 	bl	8000b58 <__aeabi_d2iz>
 800e12c:	4605      	mov	r5, r0
 800e12e:	f7f2 f9f9 	bl	8000524 <__aeabi_i2d>
 800e132:	4602      	mov	r2, r0
 800e134:	460b      	mov	r3, r1
 800e136:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e13a:	f7f2 f8a5 	bl	8000288 <__aeabi_dsub>
 800e13e:	3530      	adds	r5, #48	@ 0x30
 800e140:	f806 5b01 	strb.w	r5, [r6], #1
 800e144:	4602      	mov	r2, r0
 800e146:	460b      	mov	r3, r1
 800e148:	42a6      	cmp	r6, r4
 800e14a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e14e:	f04f 0200 	mov.w	r2, #0
 800e152:	d124      	bne.n	800e19e <_dtoa_r+0x626>
 800e154:	4baf      	ldr	r3, [pc, #700]	@ (800e414 <_dtoa_r+0x89c>)
 800e156:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e15a:	f7f2 f897 	bl	800028c <__adddf3>
 800e15e:	4602      	mov	r2, r0
 800e160:	460b      	mov	r3, r1
 800e162:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e166:	f7f2 fcd7 	bl	8000b18 <__aeabi_dcmpgt>
 800e16a:	2800      	cmp	r0, #0
 800e16c:	d163      	bne.n	800e236 <_dtoa_r+0x6be>
 800e16e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e172:	49a8      	ldr	r1, [pc, #672]	@ (800e414 <_dtoa_r+0x89c>)
 800e174:	2000      	movs	r0, #0
 800e176:	f7f2 f887 	bl	8000288 <__aeabi_dsub>
 800e17a:	4602      	mov	r2, r0
 800e17c:	460b      	mov	r3, r1
 800e17e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e182:	f7f2 fcab 	bl	8000adc <__aeabi_dcmplt>
 800e186:	2800      	cmp	r0, #0
 800e188:	f43f af14 	beq.w	800dfb4 <_dtoa_r+0x43c>
 800e18c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e18e:	1e73      	subs	r3, r6, #1
 800e190:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e192:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e196:	2b30      	cmp	r3, #48	@ 0x30
 800e198:	d0f8      	beq.n	800e18c <_dtoa_r+0x614>
 800e19a:	4647      	mov	r7, r8
 800e19c:	e03b      	b.n	800e216 <_dtoa_r+0x69e>
 800e19e:	4b9e      	ldr	r3, [pc, #632]	@ (800e418 <_dtoa_r+0x8a0>)
 800e1a0:	f7f2 fa2a 	bl	80005f8 <__aeabi_dmul>
 800e1a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e1a8:	e7bc      	b.n	800e124 <_dtoa_r+0x5ac>
 800e1aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e1ae:	4656      	mov	r6, sl
 800e1b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	4629      	mov	r1, r5
 800e1b8:	f7f2 fb48 	bl	800084c <__aeabi_ddiv>
 800e1bc:	f7f2 fccc 	bl	8000b58 <__aeabi_d2iz>
 800e1c0:	4680      	mov	r8, r0
 800e1c2:	f7f2 f9af 	bl	8000524 <__aeabi_i2d>
 800e1c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1ca:	f7f2 fa15 	bl	80005f8 <__aeabi_dmul>
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	4620      	mov	r0, r4
 800e1d4:	4629      	mov	r1, r5
 800e1d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e1da:	f7f2 f855 	bl	8000288 <__aeabi_dsub>
 800e1de:	f806 4b01 	strb.w	r4, [r6], #1
 800e1e2:	9d03      	ldr	r5, [sp, #12]
 800e1e4:	eba6 040a 	sub.w	r4, r6, sl
 800e1e8:	42a5      	cmp	r5, r4
 800e1ea:	4602      	mov	r2, r0
 800e1ec:	460b      	mov	r3, r1
 800e1ee:	d133      	bne.n	800e258 <_dtoa_r+0x6e0>
 800e1f0:	f7f2 f84c 	bl	800028c <__adddf3>
 800e1f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1f8:	4604      	mov	r4, r0
 800e1fa:	460d      	mov	r5, r1
 800e1fc:	f7f2 fc8c 	bl	8000b18 <__aeabi_dcmpgt>
 800e200:	b9c0      	cbnz	r0, 800e234 <_dtoa_r+0x6bc>
 800e202:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e206:	4620      	mov	r0, r4
 800e208:	4629      	mov	r1, r5
 800e20a:	f7f2 fc5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e20e:	b110      	cbz	r0, 800e216 <_dtoa_r+0x69e>
 800e210:	f018 0f01 	tst.w	r8, #1
 800e214:	d10e      	bne.n	800e234 <_dtoa_r+0x6bc>
 800e216:	9902      	ldr	r1, [sp, #8]
 800e218:	4648      	mov	r0, r9
 800e21a:	f000 fbbd 	bl	800e998 <_Bfree>
 800e21e:	2300      	movs	r3, #0
 800e220:	7033      	strb	r3, [r6, #0]
 800e222:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e224:	3701      	adds	r7, #1
 800e226:	601f      	str	r7, [r3, #0]
 800e228:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	f000 824b 	beq.w	800e6c6 <_dtoa_r+0xb4e>
 800e230:	601e      	str	r6, [r3, #0]
 800e232:	e248      	b.n	800e6c6 <_dtoa_r+0xb4e>
 800e234:	46b8      	mov	r8, r7
 800e236:	4633      	mov	r3, r6
 800e238:	461e      	mov	r6, r3
 800e23a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e23e:	2a39      	cmp	r2, #57	@ 0x39
 800e240:	d106      	bne.n	800e250 <_dtoa_r+0x6d8>
 800e242:	459a      	cmp	sl, r3
 800e244:	d1f8      	bne.n	800e238 <_dtoa_r+0x6c0>
 800e246:	2230      	movs	r2, #48	@ 0x30
 800e248:	f108 0801 	add.w	r8, r8, #1
 800e24c:	f88a 2000 	strb.w	r2, [sl]
 800e250:	781a      	ldrb	r2, [r3, #0]
 800e252:	3201      	adds	r2, #1
 800e254:	701a      	strb	r2, [r3, #0]
 800e256:	e7a0      	b.n	800e19a <_dtoa_r+0x622>
 800e258:	4b6f      	ldr	r3, [pc, #444]	@ (800e418 <_dtoa_r+0x8a0>)
 800e25a:	2200      	movs	r2, #0
 800e25c:	f7f2 f9cc 	bl	80005f8 <__aeabi_dmul>
 800e260:	2200      	movs	r2, #0
 800e262:	2300      	movs	r3, #0
 800e264:	4604      	mov	r4, r0
 800e266:	460d      	mov	r5, r1
 800e268:	f7f2 fc2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e26c:	2800      	cmp	r0, #0
 800e26e:	d09f      	beq.n	800e1b0 <_dtoa_r+0x638>
 800e270:	e7d1      	b.n	800e216 <_dtoa_r+0x69e>
 800e272:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e274:	2a00      	cmp	r2, #0
 800e276:	f000 80ea 	beq.w	800e44e <_dtoa_r+0x8d6>
 800e27a:	9a07      	ldr	r2, [sp, #28]
 800e27c:	2a01      	cmp	r2, #1
 800e27e:	f300 80cd 	bgt.w	800e41c <_dtoa_r+0x8a4>
 800e282:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e284:	2a00      	cmp	r2, #0
 800e286:	f000 80c1 	beq.w	800e40c <_dtoa_r+0x894>
 800e28a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e28e:	9c08      	ldr	r4, [sp, #32]
 800e290:	9e00      	ldr	r6, [sp, #0]
 800e292:	9a00      	ldr	r2, [sp, #0]
 800e294:	441a      	add	r2, r3
 800e296:	9200      	str	r2, [sp, #0]
 800e298:	9a06      	ldr	r2, [sp, #24]
 800e29a:	2101      	movs	r1, #1
 800e29c:	441a      	add	r2, r3
 800e29e:	4648      	mov	r0, r9
 800e2a0:	9206      	str	r2, [sp, #24]
 800e2a2:	f000 fc2d 	bl	800eb00 <__i2b>
 800e2a6:	4605      	mov	r5, r0
 800e2a8:	b166      	cbz	r6, 800e2c4 <_dtoa_r+0x74c>
 800e2aa:	9b06      	ldr	r3, [sp, #24]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	dd09      	ble.n	800e2c4 <_dtoa_r+0x74c>
 800e2b0:	42b3      	cmp	r3, r6
 800e2b2:	9a00      	ldr	r2, [sp, #0]
 800e2b4:	bfa8      	it	ge
 800e2b6:	4633      	movge	r3, r6
 800e2b8:	1ad2      	subs	r2, r2, r3
 800e2ba:	9200      	str	r2, [sp, #0]
 800e2bc:	9a06      	ldr	r2, [sp, #24]
 800e2be:	1af6      	subs	r6, r6, r3
 800e2c0:	1ad3      	subs	r3, r2, r3
 800e2c2:	9306      	str	r3, [sp, #24]
 800e2c4:	9b08      	ldr	r3, [sp, #32]
 800e2c6:	b30b      	cbz	r3, 800e30c <_dtoa_r+0x794>
 800e2c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	f000 80c6 	beq.w	800e45c <_dtoa_r+0x8e4>
 800e2d0:	2c00      	cmp	r4, #0
 800e2d2:	f000 80c0 	beq.w	800e456 <_dtoa_r+0x8de>
 800e2d6:	4629      	mov	r1, r5
 800e2d8:	4622      	mov	r2, r4
 800e2da:	4648      	mov	r0, r9
 800e2dc:	f000 fcc8 	bl	800ec70 <__pow5mult>
 800e2e0:	9a02      	ldr	r2, [sp, #8]
 800e2e2:	4601      	mov	r1, r0
 800e2e4:	4605      	mov	r5, r0
 800e2e6:	4648      	mov	r0, r9
 800e2e8:	f000 fc20 	bl	800eb2c <__multiply>
 800e2ec:	9902      	ldr	r1, [sp, #8]
 800e2ee:	4680      	mov	r8, r0
 800e2f0:	4648      	mov	r0, r9
 800e2f2:	f000 fb51 	bl	800e998 <_Bfree>
 800e2f6:	9b08      	ldr	r3, [sp, #32]
 800e2f8:	1b1b      	subs	r3, r3, r4
 800e2fa:	9308      	str	r3, [sp, #32]
 800e2fc:	f000 80b1 	beq.w	800e462 <_dtoa_r+0x8ea>
 800e300:	9a08      	ldr	r2, [sp, #32]
 800e302:	4641      	mov	r1, r8
 800e304:	4648      	mov	r0, r9
 800e306:	f000 fcb3 	bl	800ec70 <__pow5mult>
 800e30a:	9002      	str	r0, [sp, #8]
 800e30c:	2101      	movs	r1, #1
 800e30e:	4648      	mov	r0, r9
 800e310:	f000 fbf6 	bl	800eb00 <__i2b>
 800e314:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e316:	4604      	mov	r4, r0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	f000 81d8 	beq.w	800e6ce <_dtoa_r+0xb56>
 800e31e:	461a      	mov	r2, r3
 800e320:	4601      	mov	r1, r0
 800e322:	4648      	mov	r0, r9
 800e324:	f000 fca4 	bl	800ec70 <__pow5mult>
 800e328:	9b07      	ldr	r3, [sp, #28]
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	4604      	mov	r4, r0
 800e32e:	f300 809f 	bgt.w	800e470 <_dtoa_r+0x8f8>
 800e332:	9b04      	ldr	r3, [sp, #16]
 800e334:	2b00      	cmp	r3, #0
 800e336:	f040 8097 	bne.w	800e468 <_dtoa_r+0x8f0>
 800e33a:	9b05      	ldr	r3, [sp, #20]
 800e33c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e340:	2b00      	cmp	r3, #0
 800e342:	f040 8093 	bne.w	800e46c <_dtoa_r+0x8f4>
 800e346:	9b05      	ldr	r3, [sp, #20]
 800e348:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e34c:	0d1b      	lsrs	r3, r3, #20
 800e34e:	051b      	lsls	r3, r3, #20
 800e350:	b133      	cbz	r3, 800e360 <_dtoa_r+0x7e8>
 800e352:	9b00      	ldr	r3, [sp, #0]
 800e354:	3301      	adds	r3, #1
 800e356:	9300      	str	r3, [sp, #0]
 800e358:	9b06      	ldr	r3, [sp, #24]
 800e35a:	3301      	adds	r3, #1
 800e35c:	9306      	str	r3, [sp, #24]
 800e35e:	2301      	movs	r3, #1
 800e360:	9308      	str	r3, [sp, #32]
 800e362:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e364:	2b00      	cmp	r3, #0
 800e366:	f000 81b8 	beq.w	800e6da <_dtoa_r+0xb62>
 800e36a:	6923      	ldr	r3, [r4, #16]
 800e36c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e370:	6918      	ldr	r0, [r3, #16]
 800e372:	f000 fb79 	bl	800ea68 <__hi0bits>
 800e376:	f1c0 0020 	rsb	r0, r0, #32
 800e37a:	9b06      	ldr	r3, [sp, #24]
 800e37c:	4418      	add	r0, r3
 800e37e:	f010 001f 	ands.w	r0, r0, #31
 800e382:	f000 8082 	beq.w	800e48a <_dtoa_r+0x912>
 800e386:	f1c0 0320 	rsb	r3, r0, #32
 800e38a:	2b04      	cmp	r3, #4
 800e38c:	dd73      	ble.n	800e476 <_dtoa_r+0x8fe>
 800e38e:	9b00      	ldr	r3, [sp, #0]
 800e390:	f1c0 001c 	rsb	r0, r0, #28
 800e394:	4403      	add	r3, r0
 800e396:	9300      	str	r3, [sp, #0]
 800e398:	9b06      	ldr	r3, [sp, #24]
 800e39a:	4403      	add	r3, r0
 800e39c:	4406      	add	r6, r0
 800e39e:	9306      	str	r3, [sp, #24]
 800e3a0:	9b00      	ldr	r3, [sp, #0]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	dd05      	ble.n	800e3b2 <_dtoa_r+0x83a>
 800e3a6:	9902      	ldr	r1, [sp, #8]
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	4648      	mov	r0, r9
 800e3ac:	f000 fcba 	bl	800ed24 <__lshift>
 800e3b0:	9002      	str	r0, [sp, #8]
 800e3b2:	9b06      	ldr	r3, [sp, #24]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	dd05      	ble.n	800e3c4 <_dtoa_r+0x84c>
 800e3b8:	4621      	mov	r1, r4
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	4648      	mov	r0, r9
 800e3be:	f000 fcb1 	bl	800ed24 <__lshift>
 800e3c2:	4604      	mov	r4, r0
 800e3c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d061      	beq.n	800e48e <_dtoa_r+0x916>
 800e3ca:	9802      	ldr	r0, [sp, #8]
 800e3cc:	4621      	mov	r1, r4
 800e3ce:	f000 fd15 	bl	800edfc <__mcmp>
 800e3d2:	2800      	cmp	r0, #0
 800e3d4:	da5b      	bge.n	800e48e <_dtoa_r+0x916>
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	9902      	ldr	r1, [sp, #8]
 800e3da:	220a      	movs	r2, #10
 800e3dc:	4648      	mov	r0, r9
 800e3de:	f000 fafd 	bl	800e9dc <__multadd>
 800e3e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3e4:	9002      	str	r0, [sp, #8]
 800e3e6:	f107 38ff 	add.w	r8, r7, #4294967295
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	f000 8177 	beq.w	800e6de <_dtoa_r+0xb66>
 800e3f0:	4629      	mov	r1, r5
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	220a      	movs	r2, #10
 800e3f6:	4648      	mov	r0, r9
 800e3f8:	f000 faf0 	bl	800e9dc <__multadd>
 800e3fc:	f1bb 0f00 	cmp.w	fp, #0
 800e400:	4605      	mov	r5, r0
 800e402:	dc6f      	bgt.n	800e4e4 <_dtoa_r+0x96c>
 800e404:	9b07      	ldr	r3, [sp, #28]
 800e406:	2b02      	cmp	r3, #2
 800e408:	dc49      	bgt.n	800e49e <_dtoa_r+0x926>
 800e40a:	e06b      	b.n	800e4e4 <_dtoa_r+0x96c>
 800e40c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e40e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e412:	e73c      	b.n	800e28e <_dtoa_r+0x716>
 800e414:	3fe00000 	.word	0x3fe00000
 800e418:	40240000 	.word	0x40240000
 800e41c:	9b03      	ldr	r3, [sp, #12]
 800e41e:	1e5c      	subs	r4, r3, #1
 800e420:	9b08      	ldr	r3, [sp, #32]
 800e422:	42a3      	cmp	r3, r4
 800e424:	db09      	blt.n	800e43a <_dtoa_r+0x8c2>
 800e426:	1b1c      	subs	r4, r3, r4
 800e428:	9b03      	ldr	r3, [sp, #12]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	f6bf af30 	bge.w	800e290 <_dtoa_r+0x718>
 800e430:	9b00      	ldr	r3, [sp, #0]
 800e432:	9a03      	ldr	r2, [sp, #12]
 800e434:	1a9e      	subs	r6, r3, r2
 800e436:	2300      	movs	r3, #0
 800e438:	e72b      	b.n	800e292 <_dtoa_r+0x71a>
 800e43a:	9b08      	ldr	r3, [sp, #32]
 800e43c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e43e:	9408      	str	r4, [sp, #32]
 800e440:	1ae3      	subs	r3, r4, r3
 800e442:	441a      	add	r2, r3
 800e444:	9e00      	ldr	r6, [sp, #0]
 800e446:	9b03      	ldr	r3, [sp, #12]
 800e448:	920d      	str	r2, [sp, #52]	@ 0x34
 800e44a:	2400      	movs	r4, #0
 800e44c:	e721      	b.n	800e292 <_dtoa_r+0x71a>
 800e44e:	9c08      	ldr	r4, [sp, #32]
 800e450:	9e00      	ldr	r6, [sp, #0]
 800e452:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e454:	e728      	b.n	800e2a8 <_dtoa_r+0x730>
 800e456:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e45a:	e751      	b.n	800e300 <_dtoa_r+0x788>
 800e45c:	9a08      	ldr	r2, [sp, #32]
 800e45e:	9902      	ldr	r1, [sp, #8]
 800e460:	e750      	b.n	800e304 <_dtoa_r+0x78c>
 800e462:	f8cd 8008 	str.w	r8, [sp, #8]
 800e466:	e751      	b.n	800e30c <_dtoa_r+0x794>
 800e468:	2300      	movs	r3, #0
 800e46a:	e779      	b.n	800e360 <_dtoa_r+0x7e8>
 800e46c:	9b04      	ldr	r3, [sp, #16]
 800e46e:	e777      	b.n	800e360 <_dtoa_r+0x7e8>
 800e470:	2300      	movs	r3, #0
 800e472:	9308      	str	r3, [sp, #32]
 800e474:	e779      	b.n	800e36a <_dtoa_r+0x7f2>
 800e476:	d093      	beq.n	800e3a0 <_dtoa_r+0x828>
 800e478:	9a00      	ldr	r2, [sp, #0]
 800e47a:	331c      	adds	r3, #28
 800e47c:	441a      	add	r2, r3
 800e47e:	9200      	str	r2, [sp, #0]
 800e480:	9a06      	ldr	r2, [sp, #24]
 800e482:	441a      	add	r2, r3
 800e484:	441e      	add	r6, r3
 800e486:	9206      	str	r2, [sp, #24]
 800e488:	e78a      	b.n	800e3a0 <_dtoa_r+0x828>
 800e48a:	4603      	mov	r3, r0
 800e48c:	e7f4      	b.n	800e478 <_dtoa_r+0x900>
 800e48e:	9b03      	ldr	r3, [sp, #12]
 800e490:	2b00      	cmp	r3, #0
 800e492:	46b8      	mov	r8, r7
 800e494:	dc20      	bgt.n	800e4d8 <_dtoa_r+0x960>
 800e496:	469b      	mov	fp, r3
 800e498:	9b07      	ldr	r3, [sp, #28]
 800e49a:	2b02      	cmp	r3, #2
 800e49c:	dd1e      	ble.n	800e4dc <_dtoa_r+0x964>
 800e49e:	f1bb 0f00 	cmp.w	fp, #0
 800e4a2:	f47f adb1 	bne.w	800e008 <_dtoa_r+0x490>
 800e4a6:	4621      	mov	r1, r4
 800e4a8:	465b      	mov	r3, fp
 800e4aa:	2205      	movs	r2, #5
 800e4ac:	4648      	mov	r0, r9
 800e4ae:	f000 fa95 	bl	800e9dc <__multadd>
 800e4b2:	4601      	mov	r1, r0
 800e4b4:	4604      	mov	r4, r0
 800e4b6:	9802      	ldr	r0, [sp, #8]
 800e4b8:	f000 fca0 	bl	800edfc <__mcmp>
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	f77f ada3 	ble.w	800e008 <_dtoa_r+0x490>
 800e4c2:	4656      	mov	r6, sl
 800e4c4:	2331      	movs	r3, #49	@ 0x31
 800e4c6:	f806 3b01 	strb.w	r3, [r6], #1
 800e4ca:	f108 0801 	add.w	r8, r8, #1
 800e4ce:	e59f      	b.n	800e010 <_dtoa_r+0x498>
 800e4d0:	9c03      	ldr	r4, [sp, #12]
 800e4d2:	46b8      	mov	r8, r7
 800e4d4:	4625      	mov	r5, r4
 800e4d6:	e7f4      	b.n	800e4c2 <_dtoa_r+0x94a>
 800e4d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e4dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	f000 8101 	beq.w	800e6e6 <_dtoa_r+0xb6e>
 800e4e4:	2e00      	cmp	r6, #0
 800e4e6:	dd05      	ble.n	800e4f4 <_dtoa_r+0x97c>
 800e4e8:	4629      	mov	r1, r5
 800e4ea:	4632      	mov	r2, r6
 800e4ec:	4648      	mov	r0, r9
 800e4ee:	f000 fc19 	bl	800ed24 <__lshift>
 800e4f2:	4605      	mov	r5, r0
 800e4f4:	9b08      	ldr	r3, [sp, #32]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d05c      	beq.n	800e5b4 <_dtoa_r+0xa3c>
 800e4fa:	6869      	ldr	r1, [r5, #4]
 800e4fc:	4648      	mov	r0, r9
 800e4fe:	f000 fa0b 	bl	800e918 <_Balloc>
 800e502:	4606      	mov	r6, r0
 800e504:	b928      	cbnz	r0, 800e512 <_dtoa_r+0x99a>
 800e506:	4b82      	ldr	r3, [pc, #520]	@ (800e710 <_dtoa_r+0xb98>)
 800e508:	4602      	mov	r2, r0
 800e50a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e50e:	f7ff bb4a 	b.w	800dba6 <_dtoa_r+0x2e>
 800e512:	692a      	ldr	r2, [r5, #16]
 800e514:	3202      	adds	r2, #2
 800e516:	0092      	lsls	r2, r2, #2
 800e518:	f105 010c 	add.w	r1, r5, #12
 800e51c:	300c      	adds	r0, #12
 800e51e:	f7ff fa74 	bl	800da0a <memcpy>
 800e522:	2201      	movs	r2, #1
 800e524:	4631      	mov	r1, r6
 800e526:	4648      	mov	r0, r9
 800e528:	f000 fbfc 	bl	800ed24 <__lshift>
 800e52c:	f10a 0301 	add.w	r3, sl, #1
 800e530:	9300      	str	r3, [sp, #0]
 800e532:	eb0a 030b 	add.w	r3, sl, fp
 800e536:	9308      	str	r3, [sp, #32]
 800e538:	9b04      	ldr	r3, [sp, #16]
 800e53a:	f003 0301 	and.w	r3, r3, #1
 800e53e:	462f      	mov	r7, r5
 800e540:	9306      	str	r3, [sp, #24]
 800e542:	4605      	mov	r5, r0
 800e544:	9b00      	ldr	r3, [sp, #0]
 800e546:	9802      	ldr	r0, [sp, #8]
 800e548:	4621      	mov	r1, r4
 800e54a:	f103 3bff 	add.w	fp, r3, #4294967295
 800e54e:	f7ff fa89 	bl	800da64 <quorem>
 800e552:	4603      	mov	r3, r0
 800e554:	3330      	adds	r3, #48	@ 0x30
 800e556:	9003      	str	r0, [sp, #12]
 800e558:	4639      	mov	r1, r7
 800e55a:	9802      	ldr	r0, [sp, #8]
 800e55c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e55e:	f000 fc4d 	bl	800edfc <__mcmp>
 800e562:	462a      	mov	r2, r5
 800e564:	9004      	str	r0, [sp, #16]
 800e566:	4621      	mov	r1, r4
 800e568:	4648      	mov	r0, r9
 800e56a:	f000 fc63 	bl	800ee34 <__mdiff>
 800e56e:	68c2      	ldr	r2, [r0, #12]
 800e570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e572:	4606      	mov	r6, r0
 800e574:	bb02      	cbnz	r2, 800e5b8 <_dtoa_r+0xa40>
 800e576:	4601      	mov	r1, r0
 800e578:	9802      	ldr	r0, [sp, #8]
 800e57a:	f000 fc3f 	bl	800edfc <__mcmp>
 800e57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e580:	4602      	mov	r2, r0
 800e582:	4631      	mov	r1, r6
 800e584:	4648      	mov	r0, r9
 800e586:	920c      	str	r2, [sp, #48]	@ 0x30
 800e588:	9309      	str	r3, [sp, #36]	@ 0x24
 800e58a:	f000 fa05 	bl	800e998 <_Bfree>
 800e58e:	9b07      	ldr	r3, [sp, #28]
 800e590:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e592:	9e00      	ldr	r6, [sp, #0]
 800e594:	ea42 0103 	orr.w	r1, r2, r3
 800e598:	9b06      	ldr	r3, [sp, #24]
 800e59a:	4319      	orrs	r1, r3
 800e59c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e59e:	d10d      	bne.n	800e5bc <_dtoa_r+0xa44>
 800e5a0:	2b39      	cmp	r3, #57	@ 0x39
 800e5a2:	d027      	beq.n	800e5f4 <_dtoa_r+0xa7c>
 800e5a4:	9a04      	ldr	r2, [sp, #16]
 800e5a6:	2a00      	cmp	r2, #0
 800e5a8:	dd01      	ble.n	800e5ae <_dtoa_r+0xa36>
 800e5aa:	9b03      	ldr	r3, [sp, #12]
 800e5ac:	3331      	adds	r3, #49	@ 0x31
 800e5ae:	f88b 3000 	strb.w	r3, [fp]
 800e5b2:	e52e      	b.n	800e012 <_dtoa_r+0x49a>
 800e5b4:	4628      	mov	r0, r5
 800e5b6:	e7b9      	b.n	800e52c <_dtoa_r+0x9b4>
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	e7e2      	b.n	800e582 <_dtoa_r+0xa0a>
 800e5bc:	9904      	ldr	r1, [sp, #16]
 800e5be:	2900      	cmp	r1, #0
 800e5c0:	db04      	blt.n	800e5cc <_dtoa_r+0xa54>
 800e5c2:	9807      	ldr	r0, [sp, #28]
 800e5c4:	4301      	orrs	r1, r0
 800e5c6:	9806      	ldr	r0, [sp, #24]
 800e5c8:	4301      	orrs	r1, r0
 800e5ca:	d120      	bne.n	800e60e <_dtoa_r+0xa96>
 800e5cc:	2a00      	cmp	r2, #0
 800e5ce:	ddee      	ble.n	800e5ae <_dtoa_r+0xa36>
 800e5d0:	9902      	ldr	r1, [sp, #8]
 800e5d2:	9300      	str	r3, [sp, #0]
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	4648      	mov	r0, r9
 800e5d8:	f000 fba4 	bl	800ed24 <__lshift>
 800e5dc:	4621      	mov	r1, r4
 800e5de:	9002      	str	r0, [sp, #8]
 800e5e0:	f000 fc0c 	bl	800edfc <__mcmp>
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	9b00      	ldr	r3, [sp, #0]
 800e5e8:	dc02      	bgt.n	800e5f0 <_dtoa_r+0xa78>
 800e5ea:	d1e0      	bne.n	800e5ae <_dtoa_r+0xa36>
 800e5ec:	07da      	lsls	r2, r3, #31
 800e5ee:	d5de      	bpl.n	800e5ae <_dtoa_r+0xa36>
 800e5f0:	2b39      	cmp	r3, #57	@ 0x39
 800e5f2:	d1da      	bne.n	800e5aa <_dtoa_r+0xa32>
 800e5f4:	2339      	movs	r3, #57	@ 0x39
 800e5f6:	f88b 3000 	strb.w	r3, [fp]
 800e5fa:	4633      	mov	r3, r6
 800e5fc:	461e      	mov	r6, r3
 800e5fe:	3b01      	subs	r3, #1
 800e600:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e604:	2a39      	cmp	r2, #57	@ 0x39
 800e606:	d04e      	beq.n	800e6a6 <_dtoa_r+0xb2e>
 800e608:	3201      	adds	r2, #1
 800e60a:	701a      	strb	r2, [r3, #0]
 800e60c:	e501      	b.n	800e012 <_dtoa_r+0x49a>
 800e60e:	2a00      	cmp	r2, #0
 800e610:	dd03      	ble.n	800e61a <_dtoa_r+0xaa2>
 800e612:	2b39      	cmp	r3, #57	@ 0x39
 800e614:	d0ee      	beq.n	800e5f4 <_dtoa_r+0xa7c>
 800e616:	3301      	adds	r3, #1
 800e618:	e7c9      	b.n	800e5ae <_dtoa_r+0xa36>
 800e61a:	9a00      	ldr	r2, [sp, #0]
 800e61c:	9908      	ldr	r1, [sp, #32]
 800e61e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e622:	428a      	cmp	r2, r1
 800e624:	d028      	beq.n	800e678 <_dtoa_r+0xb00>
 800e626:	9902      	ldr	r1, [sp, #8]
 800e628:	2300      	movs	r3, #0
 800e62a:	220a      	movs	r2, #10
 800e62c:	4648      	mov	r0, r9
 800e62e:	f000 f9d5 	bl	800e9dc <__multadd>
 800e632:	42af      	cmp	r7, r5
 800e634:	9002      	str	r0, [sp, #8]
 800e636:	f04f 0300 	mov.w	r3, #0
 800e63a:	f04f 020a 	mov.w	r2, #10
 800e63e:	4639      	mov	r1, r7
 800e640:	4648      	mov	r0, r9
 800e642:	d107      	bne.n	800e654 <_dtoa_r+0xadc>
 800e644:	f000 f9ca 	bl	800e9dc <__multadd>
 800e648:	4607      	mov	r7, r0
 800e64a:	4605      	mov	r5, r0
 800e64c:	9b00      	ldr	r3, [sp, #0]
 800e64e:	3301      	adds	r3, #1
 800e650:	9300      	str	r3, [sp, #0]
 800e652:	e777      	b.n	800e544 <_dtoa_r+0x9cc>
 800e654:	f000 f9c2 	bl	800e9dc <__multadd>
 800e658:	4629      	mov	r1, r5
 800e65a:	4607      	mov	r7, r0
 800e65c:	2300      	movs	r3, #0
 800e65e:	220a      	movs	r2, #10
 800e660:	4648      	mov	r0, r9
 800e662:	f000 f9bb 	bl	800e9dc <__multadd>
 800e666:	4605      	mov	r5, r0
 800e668:	e7f0      	b.n	800e64c <_dtoa_r+0xad4>
 800e66a:	f1bb 0f00 	cmp.w	fp, #0
 800e66e:	bfcc      	ite	gt
 800e670:	465e      	movgt	r6, fp
 800e672:	2601      	movle	r6, #1
 800e674:	4456      	add	r6, sl
 800e676:	2700      	movs	r7, #0
 800e678:	9902      	ldr	r1, [sp, #8]
 800e67a:	9300      	str	r3, [sp, #0]
 800e67c:	2201      	movs	r2, #1
 800e67e:	4648      	mov	r0, r9
 800e680:	f000 fb50 	bl	800ed24 <__lshift>
 800e684:	4621      	mov	r1, r4
 800e686:	9002      	str	r0, [sp, #8]
 800e688:	f000 fbb8 	bl	800edfc <__mcmp>
 800e68c:	2800      	cmp	r0, #0
 800e68e:	dcb4      	bgt.n	800e5fa <_dtoa_r+0xa82>
 800e690:	d102      	bne.n	800e698 <_dtoa_r+0xb20>
 800e692:	9b00      	ldr	r3, [sp, #0]
 800e694:	07db      	lsls	r3, r3, #31
 800e696:	d4b0      	bmi.n	800e5fa <_dtoa_r+0xa82>
 800e698:	4633      	mov	r3, r6
 800e69a:	461e      	mov	r6, r3
 800e69c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e6a0:	2a30      	cmp	r2, #48	@ 0x30
 800e6a2:	d0fa      	beq.n	800e69a <_dtoa_r+0xb22>
 800e6a4:	e4b5      	b.n	800e012 <_dtoa_r+0x49a>
 800e6a6:	459a      	cmp	sl, r3
 800e6a8:	d1a8      	bne.n	800e5fc <_dtoa_r+0xa84>
 800e6aa:	2331      	movs	r3, #49	@ 0x31
 800e6ac:	f108 0801 	add.w	r8, r8, #1
 800e6b0:	f88a 3000 	strb.w	r3, [sl]
 800e6b4:	e4ad      	b.n	800e012 <_dtoa_r+0x49a>
 800e6b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e6b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e714 <_dtoa_r+0xb9c>
 800e6bc:	b11b      	cbz	r3, 800e6c6 <_dtoa_r+0xb4e>
 800e6be:	f10a 0308 	add.w	r3, sl, #8
 800e6c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e6c4:	6013      	str	r3, [r2, #0]
 800e6c6:	4650      	mov	r0, sl
 800e6c8:	b017      	add	sp, #92	@ 0x5c
 800e6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ce:	9b07      	ldr	r3, [sp, #28]
 800e6d0:	2b01      	cmp	r3, #1
 800e6d2:	f77f ae2e 	ble.w	800e332 <_dtoa_r+0x7ba>
 800e6d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e6d8:	9308      	str	r3, [sp, #32]
 800e6da:	2001      	movs	r0, #1
 800e6dc:	e64d      	b.n	800e37a <_dtoa_r+0x802>
 800e6de:	f1bb 0f00 	cmp.w	fp, #0
 800e6e2:	f77f aed9 	ble.w	800e498 <_dtoa_r+0x920>
 800e6e6:	4656      	mov	r6, sl
 800e6e8:	9802      	ldr	r0, [sp, #8]
 800e6ea:	4621      	mov	r1, r4
 800e6ec:	f7ff f9ba 	bl	800da64 <quorem>
 800e6f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e6f4:	f806 3b01 	strb.w	r3, [r6], #1
 800e6f8:	eba6 020a 	sub.w	r2, r6, sl
 800e6fc:	4593      	cmp	fp, r2
 800e6fe:	ddb4      	ble.n	800e66a <_dtoa_r+0xaf2>
 800e700:	9902      	ldr	r1, [sp, #8]
 800e702:	2300      	movs	r3, #0
 800e704:	220a      	movs	r2, #10
 800e706:	4648      	mov	r0, r9
 800e708:	f000 f968 	bl	800e9dc <__multadd>
 800e70c:	9002      	str	r0, [sp, #8]
 800e70e:	e7eb      	b.n	800e6e8 <_dtoa_r+0xb70>
 800e710:	0800fc74 	.word	0x0800fc74
 800e714:	0800fc0f 	.word	0x0800fc0f

0800e718 <_free_r>:
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	4605      	mov	r5, r0
 800e71c:	2900      	cmp	r1, #0
 800e71e:	d041      	beq.n	800e7a4 <_free_r+0x8c>
 800e720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e724:	1f0c      	subs	r4, r1, #4
 800e726:	2b00      	cmp	r3, #0
 800e728:	bfb8      	it	lt
 800e72a:	18e4      	addlt	r4, r4, r3
 800e72c:	f000 f8e8 	bl	800e900 <__malloc_lock>
 800e730:	4a1d      	ldr	r2, [pc, #116]	@ (800e7a8 <_free_r+0x90>)
 800e732:	6813      	ldr	r3, [r2, #0]
 800e734:	b933      	cbnz	r3, 800e744 <_free_r+0x2c>
 800e736:	6063      	str	r3, [r4, #4]
 800e738:	6014      	str	r4, [r2, #0]
 800e73a:	4628      	mov	r0, r5
 800e73c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e740:	f000 b8e4 	b.w	800e90c <__malloc_unlock>
 800e744:	42a3      	cmp	r3, r4
 800e746:	d908      	bls.n	800e75a <_free_r+0x42>
 800e748:	6820      	ldr	r0, [r4, #0]
 800e74a:	1821      	adds	r1, r4, r0
 800e74c:	428b      	cmp	r3, r1
 800e74e:	bf01      	itttt	eq
 800e750:	6819      	ldreq	r1, [r3, #0]
 800e752:	685b      	ldreq	r3, [r3, #4]
 800e754:	1809      	addeq	r1, r1, r0
 800e756:	6021      	streq	r1, [r4, #0]
 800e758:	e7ed      	b.n	800e736 <_free_r+0x1e>
 800e75a:	461a      	mov	r2, r3
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	b10b      	cbz	r3, 800e764 <_free_r+0x4c>
 800e760:	42a3      	cmp	r3, r4
 800e762:	d9fa      	bls.n	800e75a <_free_r+0x42>
 800e764:	6811      	ldr	r1, [r2, #0]
 800e766:	1850      	adds	r0, r2, r1
 800e768:	42a0      	cmp	r0, r4
 800e76a:	d10b      	bne.n	800e784 <_free_r+0x6c>
 800e76c:	6820      	ldr	r0, [r4, #0]
 800e76e:	4401      	add	r1, r0
 800e770:	1850      	adds	r0, r2, r1
 800e772:	4283      	cmp	r3, r0
 800e774:	6011      	str	r1, [r2, #0]
 800e776:	d1e0      	bne.n	800e73a <_free_r+0x22>
 800e778:	6818      	ldr	r0, [r3, #0]
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	6053      	str	r3, [r2, #4]
 800e77e:	4408      	add	r0, r1
 800e780:	6010      	str	r0, [r2, #0]
 800e782:	e7da      	b.n	800e73a <_free_r+0x22>
 800e784:	d902      	bls.n	800e78c <_free_r+0x74>
 800e786:	230c      	movs	r3, #12
 800e788:	602b      	str	r3, [r5, #0]
 800e78a:	e7d6      	b.n	800e73a <_free_r+0x22>
 800e78c:	6820      	ldr	r0, [r4, #0]
 800e78e:	1821      	adds	r1, r4, r0
 800e790:	428b      	cmp	r3, r1
 800e792:	bf04      	itt	eq
 800e794:	6819      	ldreq	r1, [r3, #0]
 800e796:	685b      	ldreq	r3, [r3, #4]
 800e798:	6063      	str	r3, [r4, #4]
 800e79a:	bf04      	itt	eq
 800e79c:	1809      	addeq	r1, r1, r0
 800e79e:	6021      	streq	r1, [r4, #0]
 800e7a0:	6054      	str	r4, [r2, #4]
 800e7a2:	e7ca      	b.n	800e73a <_free_r+0x22>
 800e7a4:	bd38      	pop	{r3, r4, r5, pc}
 800e7a6:	bf00      	nop
 800e7a8:	2000303c 	.word	0x2000303c

0800e7ac <malloc>:
 800e7ac:	4b02      	ldr	r3, [pc, #8]	@ (800e7b8 <malloc+0xc>)
 800e7ae:	4601      	mov	r1, r0
 800e7b0:	6818      	ldr	r0, [r3, #0]
 800e7b2:	f000 b825 	b.w	800e800 <_malloc_r>
 800e7b6:	bf00      	nop
 800e7b8:	2000007c 	.word	0x2000007c

0800e7bc <sbrk_aligned>:
 800e7bc:	b570      	push	{r4, r5, r6, lr}
 800e7be:	4e0f      	ldr	r6, [pc, #60]	@ (800e7fc <sbrk_aligned+0x40>)
 800e7c0:	460c      	mov	r4, r1
 800e7c2:	6831      	ldr	r1, [r6, #0]
 800e7c4:	4605      	mov	r5, r0
 800e7c6:	b911      	cbnz	r1, 800e7ce <sbrk_aligned+0x12>
 800e7c8:	f001 f816 	bl	800f7f8 <_sbrk_r>
 800e7cc:	6030      	str	r0, [r6, #0]
 800e7ce:	4621      	mov	r1, r4
 800e7d0:	4628      	mov	r0, r5
 800e7d2:	f001 f811 	bl	800f7f8 <_sbrk_r>
 800e7d6:	1c43      	adds	r3, r0, #1
 800e7d8:	d103      	bne.n	800e7e2 <sbrk_aligned+0x26>
 800e7da:	f04f 34ff 	mov.w	r4, #4294967295
 800e7de:	4620      	mov	r0, r4
 800e7e0:	bd70      	pop	{r4, r5, r6, pc}
 800e7e2:	1cc4      	adds	r4, r0, #3
 800e7e4:	f024 0403 	bic.w	r4, r4, #3
 800e7e8:	42a0      	cmp	r0, r4
 800e7ea:	d0f8      	beq.n	800e7de <sbrk_aligned+0x22>
 800e7ec:	1a21      	subs	r1, r4, r0
 800e7ee:	4628      	mov	r0, r5
 800e7f0:	f001 f802 	bl	800f7f8 <_sbrk_r>
 800e7f4:	3001      	adds	r0, #1
 800e7f6:	d1f2      	bne.n	800e7de <sbrk_aligned+0x22>
 800e7f8:	e7ef      	b.n	800e7da <sbrk_aligned+0x1e>
 800e7fa:	bf00      	nop
 800e7fc:	20003038 	.word	0x20003038

0800e800 <_malloc_r>:
 800e800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e804:	1ccd      	adds	r5, r1, #3
 800e806:	f025 0503 	bic.w	r5, r5, #3
 800e80a:	3508      	adds	r5, #8
 800e80c:	2d0c      	cmp	r5, #12
 800e80e:	bf38      	it	cc
 800e810:	250c      	movcc	r5, #12
 800e812:	2d00      	cmp	r5, #0
 800e814:	4606      	mov	r6, r0
 800e816:	db01      	blt.n	800e81c <_malloc_r+0x1c>
 800e818:	42a9      	cmp	r1, r5
 800e81a:	d904      	bls.n	800e826 <_malloc_r+0x26>
 800e81c:	230c      	movs	r3, #12
 800e81e:	6033      	str	r3, [r6, #0]
 800e820:	2000      	movs	r0, #0
 800e822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e826:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e8fc <_malloc_r+0xfc>
 800e82a:	f000 f869 	bl	800e900 <__malloc_lock>
 800e82e:	f8d8 3000 	ldr.w	r3, [r8]
 800e832:	461c      	mov	r4, r3
 800e834:	bb44      	cbnz	r4, 800e888 <_malloc_r+0x88>
 800e836:	4629      	mov	r1, r5
 800e838:	4630      	mov	r0, r6
 800e83a:	f7ff ffbf 	bl	800e7bc <sbrk_aligned>
 800e83e:	1c43      	adds	r3, r0, #1
 800e840:	4604      	mov	r4, r0
 800e842:	d158      	bne.n	800e8f6 <_malloc_r+0xf6>
 800e844:	f8d8 4000 	ldr.w	r4, [r8]
 800e848:	4627      	mov	r7, r4
 800e84a:	2f00      	cmp	r7, #0
 800e84c:	d143      	bne.n	800e8d6 <_malloc_r+0xd6>
 800e84e:	2c00      	cmp	r4, #0
 800e850:	d04b      	beq.n	800e8ea <_malloc_r+0xea>
 800e852:	6823      	ldr	r3, [r4, #0]
 800e854:	4639      	mov	r1, r7
 800e856:	4630      	mov	r0, r6
 800e858:	eb04 0903 	add.w	r9, r4, r3
 800e85c:	f000 ffcc 	bl	800f7f8 <_sbrk_r>
 800e860:	4581      	cmp	r9, r0
 800e862:	d142      	bne.n	800e8ea <_malloc_r+0xea>
 800e864:	6821      	ldr	r1, [r4, #0]
 800e866:	1a6d      	subs	r5, r5, r1
 800e868:	4629      	mov	r1, r5
 800e86a:	4630      	mov	r0, r6
 800e86c:	f7ff ffa6 	bl	800e7bc <sbrk_aligned>
 800e870:	3001      	adds	r0, #1
 800e872:	d03a      	beq.n	800e8ea <_malloc_r+0xea>
 800e874:	6823      	ldr	r3, [r4, #0]
 800e876:	442b      	add	r3, r5
 800e878:	6023      	str	r3, [r4, #0]
 800e87a:	f8d8 3000 	ldr.w	r3, [r8]
 800e87e:	685a      	ldr	r2, [r3, #4]
 800e880:	bb62      	cbnz	r2, 800e8dc <_malloc_r+0xdc>
 800e882:	f8c8 7000 	str.w	r7, [r8]
 800e886:	e00f      	b.n	800e8a8 <_malloc_r+0xa8>
 800e888:	6822      	ldr	r2, [r4, #0]
 800e88a:	1b52      	subs	r2, r2, r5
 800e88c:	d420      	bmi.n	800e8d0 <_malloc_r+0xd0>
 800e88e:	2a0b      	cmp	r2, #11
 800e890:	d917      	bls.n	800e8c2 <_malloc_r+0xc2>
 800e892:	1961      	adds	r1, r4, r5
 800e894:	42a3      	cmp	r3, r4
 800e896:	6025      	str	r5, [r4, #0]
 800e898:	bf18      	it	ne
 800e89a:	6059      	strne	r1, [r3, #4]
 800e89c:	6863      	ldr	r3, [r4, #4]
 800e89e:	bf08      	it	eq
 800e8a0:	f8c8 1000 	streq.w	r1, [r8]
 800e8a4:	5162      	str	r2, [r4, r5]
 800e8a6:	604b      	str	r3, [r1, #4]
 800e8a8:	4630      	mov	r0, r6
 800e8aa:	f000 f82f 	bl	800e90c <__malloc_unlock>
 800e8ae:	f104 000b 	add.w	r0, r4, #11
 800e8b2:	1d23      	adds	r3, r4, #4
 800e8b4:	f020 0007 	bic.w	r0, r0, #7
 800e8b8:	1ac2      	subs	r2, r0, r3
 800e8ba:	bf1c      	itt	ne
 800e8bc:	1a1b      	subne	r3, r3, r0
 800e8be:	50a3      	strne	r3, [r4, r2]
 800e8c0:	e7af      	b.n	800e822 <_malloc_r+0x22>
 800e8c2:	6862      	ldr	r2, [r4, #4]
 800e8c4:	42a3      	cmp	r3, r4
 800e8c6:	bf0c      	ite	eq
 800e8c8:	f8c8 2000 	streq.w	r2, [r8]
 800e8cc:	605a      	strne	r2, [r3, #4]
 800e8ce:	e7eb      	b.n	800e8a8 <_malloc_r+0xa8>
 800e8d0:	4623      	mov	r3, r4
 800e8d2:	6864      	ldr	r4, [r4, #4]
 800e8d4:	e7ae      	b.n	800e834 <_malloc_r+0x34>
 800e8d6:	463c      	mov	r4, r7
 800e8d8:	687f      	ldr	r7, [r7, #4]
 800e8da:	e7b6      	b.n	800e84a <_malloc_r+0x4a>
 800e8dc:	461a      	mov	r2, r3
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	42a3      	cmp	r3, r4
 800e8e2:	d1fb      	bne.n	800e8dc <_malloc_r+0xdc>
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	6053      	str	r3, [r2, #4]
 800e8e8:	e7de      	b.n	800e8a8 <_malloc_r+0xa8>
 800e8ea:	230c      	movs	r3, #12
 800e8ec:	6033      	str	r3, [r6, #0]
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	f000 f80c 	bl	800e90c <__malloc_unlock>
 800e8f4:	e794      	b.n	800e820 <_malloc_r+0x20>
 800e8f6:	6005      	str	r5, [r0, #0]
 800e8f8:	e7d6      	b.n	800e8a8 <_malloc_r+0xa8>
 800e8fa:	bf00      	nop
 800e8fc:	2000303c 	.word	0x2000303c

0800e900 <__malloc_lock>:
 800e900:	4801      	ldr	r0, [pc, #4]	@ (800e908 <__malloc_lock+0x8>)
 800e902:	f7ff b880 	b.w	800da06 <__retarget_lock_acquire_recursive>
 800e906:	bf00      	nop
 800e908:	20003034 	.word	0x20003034

0800e90c <__malloc_unlock>:
 800e90c:	4801      	ldr	r0, [pc, #4]	@ (800e914 <__malloc_unlock+0x8>)
 800e90e:	f7ff b87b 	b.w	800da08 <__retarget_lock_release_recursive>
 800e912:	bf00      	nop
 800e914:	20003034 	.word	0x20003034

0800e918 <_Balloc>:
 800e918:	b570      	push	{r4, r5, r6, lr}
 800e91a:	69c6      	ldr	r6, [r0, #28]
 800e91c:	4604      	mov	r4, r0
 800e91e:	460d      	mov	r5, r1
 800e920:	b976      	cbnz	r6, 800e940 <_Balloc+0x28>
 800e922:	2010      	movs	r0, #16
 800e924:	f7ff ff42 	bl	800e7ac <malloc>
 800e928:	4602      	mov	r2, r0
 800e92a:	61e0      	str	r0, [r4, #28]
 800e92c:	b920      	cbnz	r0, 800e938 <_Balloc+0x20>
 800e92e:	4b18      	ldr	r3, [pc, #96]	@ (800e990 <_Balloc+0x78>)
 800e930:	4818      	ldr	r0, [pc, #96]	@ (800e994 <_Balloc+0x7c>)
 800e932:	216b      	movs	r1, #107	@ 0x6b
 800e934:	f7ff f878 	bl	800da28 <__assert_func>
 800e938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e93c:	6006      	str	r6, [r0, #0]
 800e93e:	60c6      	str	r6, [r0, #12]
 800e940:	69e6      	ldr	r6, [r4, #28]
 800e942:	68f3      	ldr	r3, [r6, #12]
 800e944:	b183      	cbz	r3, 800e968 <_Balloc+0x50>
 800e946:	69e3      	ldr	r3, [r4, #28]
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e94e:	b9b8      	cbnz	r0, 800e980 <_Balloc+0x68>
 800e950:	2101      	movs	r1, #1
 800e952:	fa01 f605 	lsl.w	r6, r1, r5
 800e956:	1d72      	adds	r2, r6, #5
 800e958:	0092      	lsls	r2, r2, #2
 800e95a:	4620      	mov	r0, r4
 800e95c:	f000 ff63 	bl	800f826 <_calloc_r>
 800e960:	b160      	cbz	r0, 800e97c <_Balloc+0x64>
 800e962:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e966:	e00e      	b.n	800e986 <_Balloc+0x6e>
 800e968:	2221      	movs	r2, #33	@ 0x21
 800e96a:	2104      	movs	r1, #4
 800e96c:	4620      	mov	r0, r4
 800e96e:	f000 ff5a 	bl	800f826 <_calloc_r>
 800e972:	69e3      	ldr	r3, [r4, #28]
 800e974:	60f0      	str	r0, [r6, #12]
 800e976:	68db      	ldr	r3, [r3, #12]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d1e4      	bne.n	800e946 <_Balloc+0x2e>
 800e97c:	2000      	movs	r0, #0
 800e97e:	bd70      	pop	{r4, r5, r6, pc}
 800e980:	6802      	ldr	r2, [r0, #0]
 800e982:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e986:	2300      	movs	r3, #0
 800e988:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e98c:	e7f7      	b.n	800e97e <_Balloc+0x66>
 800e98e:	bf00      	nop
 800e990:	0800fb30 	.word	0x0800fb30
 800e994:	0800fc85 	.word	0x0800fc85

0800e998 <_Bfree>:
 800e998:	b570      	push	{r4, r5, r6, lr}
 800e99a:	69c6      	ldr	r6, [r0, #28]
 800e99c:	4605      	mov	r5, r0
 800e99e:	460c      	mov	r4, r1
 800e9a0:	b976      	cbnz	r6, 800e9c0 <_Bfree+0x28>
 800e9a2:	2010      	movs	r0, #16
 800e9a4:	f7ff ff02 	bl	800e7ac <malloc>
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	61e8      	str	r0, [r5, #28]
 800e9ac:	b920      	cbnz	r0, 800e9b8 <_Bfree+0x20>
 800e9ae:	4b09      	ldr	r3, [pc, #36]	@ (800e9d4 <_Bfree+0x3c>)
 800e9b0:	4809      	ldr	r0, [pc, #36]	@ (800e9d8 <_Bfree+0x40>)
 800e9b2:	218f      	movs	r1, #143	@ 0x8f
 800e9b4:	f7ff f838 	bl	800da28 <__assert_func>
 800e9b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e9bc:	6006      	str	r6, [r0, #0]
 800e9be:	60c6      	str	r6, [r0, #12]
 800e9c0:	b13c      	cbz	r4, 800e9d2 <_Bfree+0x3a>
 800e9c2:	69eb      	ldr	r3, [r5, #28]
 800e9c4:	6862      	ldr	r2, [r4, #4]
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e9cc:	6021      	str	r1, [r4, #0]
 800e9ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e9d2:	bd70      	pop	{r4, r5, r6, pc}
 800e9d4:	0800fb30 	.word	0x0800fb30
 800e9d8:	0800fc85 	.word	0x0800fc85

0800e9dc <__multadd>:
 800e9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9e0:	690d      	ldr	r5, [r1, #16]
 800e9e2:	4607      	mov	r7, r0
 800e9e4:	460c      	mov	r4, r1
 800e9e6:	461e      	mov	r6, r3
 800e9e8:	f101 0c14 	add.w	ip, r1, #20
 800e9ec:	2000      	movs	r0, #0
 800e9ee:	f8dc 3000 	ldr.w	r3, [ip]
 800e9f2:	b299      	uxth	r1, r3
 800e9f4:	fb02 6101 	mla	r1, r2, r1, r6
 800e9f8:	0c1e      	lsrs	r6, r3, #16
 800e9fa:	0c0b      	lsrs	r3, r1, #16
 800e9fc:	fb02 3306 	mla	r3, r2, r6, r3
 800ea00:	b289      	uxth	r1, r1
 800ea02:	3001      	adds	r0, #1
 800ea04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ea08:	4285      	cmp	r5, r0
 800ea0a:	f84c 1b04 	str.w	r1, [ip], #4
 800ea0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ea12:	dcec      	bgt.n	800e9ee <__multadd+0x12>
 800ea14:	b30e      	cbz	r6, 800ea5a <__multadd+0x7e>
 800ea16:	68a3      	ldr	r3, [r4, #8]
 800ea18:	42ab      	cmp	r3, r5
 800ea1a:	dc19      	bgt.n	800ea50 <__multadd+0x74>
 800ea1c:	6861      	ldr	r1, [r4, #4]
 800ea1e:	4638      	mov	r0, r7
 800ea20:	3101      	adds	r1, #1
 800ea22:	f7ff ff79 	bl	800e918 <_Balloc>
 800ea26:	4680      	mov	r8, r0
 800ea28:	b928      	cbnz	r0, 800ea36 <__multadd+0x5a>
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	4b0c      	ldr	r3, [pc, #48]	@ (800ea60 <__multadd+0x84>)
 800ea2e:	480d      	ldr	r0, [pc, #52]	@ (800ea64 <__multadd+0x88>)
 800ea30:	21ba      	movs	r1, #186	@ 0xba
 800ea32:	f7fe fff9 	bl	800da28 <__assert_func>
 800ea36:	6922      	ldr	r2, [r4, #16]
 800ea38:	3202      	adds	r2, #2
 800ea3a:	f104 010c 	add.w	r1, r4, #12
 800ea3e:	0092      	lsls	r2, r2, #2
 800ea40:	300c      	adds	r0, #12
 800ea42:	f7fe ffe2 	bl	800da0a <memcpy>
 800ea46:	4621      	mov	r1, r4
 800ea48:	4638      	mov	r0, r7
 800ea4a:	f7ff ffa5 	bl	800e998 <_Bfree>
 800ea4e:	4644      	mov	r4, r8
 800ea50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ea54:	3501      	adds	r5, #1
 800ea56:	615e      	str	r6, [r3, #20]
 800ea58:	6125      	str	r5, [r4, #16]
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea60:	0800fc74 	.word	0x0800fc74
 800ea64:	0800fc85 	.word	0x0800fc85

0800ea68 <__hi0bits>:
 800ea68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	bf36      	itet	cc
 800ea70:	0403      	lslcc	r3, r0, #16
 800ea72:	2000      	movcs	r0, #0
 800ea74:	2010      	movcc	r0, #16
 800ea76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ea7a:	bf3c      	itt	cc
 800ea7c:	021b      	lslcc	r3, r3, #8
 800ea7e:	3008      	addcc	r0, #8
 800ea80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea84:	bf3c      	itt	cc
 800ea86:	011b      	lslcc	r3, r3, #4
 800ea88:	3004      	addcc	r0, #4
 800ea8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea8e:	bf3c      	itt	cc
 800ea90:	009b      	lslcc	r3, r3, #2
 800ea92:	3002      	addcc	r0, #2
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	db05      	blt.n	800eaa4 <__hi0bits+0x3c>
 800ea98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ea9c:	f100 0001 	add.w	r0, r0, #1
 800eaa0:	bf08      	it	eq
 800eaa2:	2020      	moveq	r0, #32
 800eaa4:	4770      	bx	lr

0800eaa6 <__lo0bits>:
 800eaa6:	6803      	ldr	r3, [r0, #0]
 800eaa8:	4602      	mov	r2, r0
 800eaaa:	f013 0007 	ands.w	r0, r3, #7
 800eaae:	d00b      	beq.n	800eac8 <__lo0bits+0x22>
 800eab0:	07d9      	lsls	r1, r3, #31
 800eab2:	d421      	bmi.n	800eaf8 <__lo0bits+0x52>
 800eab4:	0798      	lsls	r0, r3, #30
 800eab6:	bf49      	itett	mi
 800eab8:	085b      	lsrmi	r3, r3, #1
 800eaba:	089b      	lsrpl	r3, r3, #2
 800eabc:	2001      	movmi	r0, #1
 800eabe:	6013      	strmi	r3, [r2, #0]
 800eac0:	bf5c      	itt	pl
 800eac2:	6013      	strpl	r3, [r2, #0]
 800eac4:	2002      	movpl	r0, #2
 800eac6:	4770      	bx	lr
 800eac8:	b299      	uxth	r1, r3
 800eaca:	b909      	cbnz	r1, 800ead0 <__lo0bits+0x2a>
 800eacc:	0c1b      	lsrs	r3, r3, #16
 800eace:	2010      	movs	r0, #16
 800ead0:	b2d9      	uxtb	r1, r3
 800ead2:	b909      	cbnz	r1, 800ead8 <__lo0bits+0x32>
 800ead4:	3008      	adds	r0, #8
 800ead6:	0a1b      	lsrs	r3, r3, #8
 800ead8:	0719      	lsls	r1, r3, #28
 800eada:	bf04      	itt	eq
 800eadc:	091b      	lsreq	r3, r3, #4
 800eade:	3004      	addeq	r0, #4
 800eae0:	0799      	lsls	r1, r3, #30
 800eae2:	bf04      	itt	eq
 800eae4:	089b      	lsreq	r3, r3, #2
 800eae6:	3002      	addeq	r0, #2
 800eae8:	07d9      	lsls	r1, r3, #31
 800eaea:	d403      	bmi.n	800eaf4 <__lo0bits+0x4e>
 800eaec:	085b      	lsrs	r3, r3, #1
 800eaee:	f100 0001 	add.w	r0, r0, #1
 800eaf2:	d003      	beq.n	800eafc <__lo0bits+0x56>
 800eaf4:	6013      	str	r3, [r2, #0]
 800eaf6:	4770      	bx	lr
 800eaf8:	2000      	movs	r0, #0
 800eafa:	4770      	bx	lr
 800eafc:	2020      	movs	r0, #32
 800eafe:	4770      	bx	lr

0800eb00 <__i2b>:
 800eb00:	b510      	push	{r4, lr}
 800eb02:	460c      	mov	r4, r1
 800eb04:	2101      	movs	r1, #1
 800eb06:	f7ff ff07 	bl	800e918 <_Balloc>
 800eb0a:	4602      	mov	r2, r0
 800eb0c:	b928      	cbnz	r0, 800eb1a <__i2b+0x1a>
 800eb0e:	4b05      	ldr	r3, [pc, #20]	@ (800eb24 <__i2b+0x24>)
 800eb10:	4805      	ldr	r0, [pc, #20]	@ (800eb28 <__i2b+0x28>)
 800eb12:	f240 1145 	movw	r1, #325	@ 0x145
 800eb16:	f7fe ff87 	bl	800da28 <__assert_func>
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	6144      	str	r4, [r0, #20]
 800eb1e:	6103      	str	r3, [r0, #16]
 800eb20:	bd10      	pop	{r4, pc}
 800eb22:	bf00      	nop
 800eb24:	0800fc74 	.word	0x0800fc74
 800eb28:	0800fc85 	.word	0x0800fc85

0800eb2c <__multiply>:
 800eb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb30:	4617      	mov	r7, r2
 800eb32:	690a      	ldr	r2, [r1, #16]
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	429a      	cmp	r2, r3
 800eb38:	bfa8      	it	ge
 800eb3a:	463b      	movge	r3, r7
 800eb3c:	4689      	mov	r9, r1
 800eb3e:	bfa4      	itt	ge
 800eb40:	460f      	movge	r7, r1
 800eb42:	4699      	movge	r9, r3
 800eb44:	693d      	ldr	r5, [r7, #16]
 800eb46:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	6879      	ldr	r1, [r7, #4]
 800eb4e:	eb05 060a 	add.w	r6, r5, sl
 800eb52:	42b3      	cmp	r3, r6
 800eb54:	b085      	sub	sp, #20
 800eb56:	bfb8      	it	lt
 800eb58:	3101      	addlt	r1, #1
 800eb5a:	f7ff fedd 	bl	800e918 <_Balloc>
 800eb5e:	b930      	cbnz	r0, 800eb6e <__multiply+0x42>
 800eb60:	4602      	mov	r2, r0
 800eb62:	4b41      	ldr	r3, [pc, #260]	@ (800ec68 <__multiply+0x13c>)
 800eb64:	4841      	ldr	r0, [pc, #260]	@ (800ec6c <__multiply+0x140>)
 800eb66:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800eb6a:	f7fe ff5d 	bl	800da28 <__assert_func>
 800eb6e:	f100 0414 	add.w	r4, r0, #20
 800eb72:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800eb76:	4623      	mov	r3, r4
 800eb78:	2200      	movs	r2, #0
 800eb7a:	4573      	cmp	r3, lr
 800eb7c:	d320      	bcc.n	800ebc0 <__multiply+0x94>
 800eb7e:	f107 0814 	add.w	r8, r7, #20
 800eb82:	f109 0114 	add.w	r1, r9, #20
 800eb86:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800eb8a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800eb8e:	9302      	str	r3, [sp, #8]
 800eb90:	1beb      	subs	r3, r5, r7
 800eb92:	3b15      	subs	r3, #21
 800eb94:	f023 0303 	bic.w	r3, r3, #3
 800eb98:	3304      	adds	r3, #4
 800eb9a:	3715      	adds	r7, #21
 800eb9c:	42bd      	cmp	r5, r7
 800eb9e:	bf38      	it	cc
 800eba0:	2304      	movcc	r3, #4
 800eba2:	9301      	str	r3, [sp, #4]
 800eba4:	9b02      	ldr	r3, [sp, #8]
 800eba6:	9103      	str	r1, [sp, #12]
 800eba8:	428b      	cmp	r3, r1
 800ebaa:	d80c      	bhi.n	800ebc6 <__multiply+0x9a>
 800ebac:	2e00      	cmp	r6, #0
 800ebae:	dd03      	ble.n	800ebb8 <__multiply+0x8c>
 800ebb0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d055      	beq.n	800ec64 <__multiply+0x138>
 800ebb8:	6106      	str	r6, [r0, #16]
 800ebba:	b005      	add	sp, #20
 800ebbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebc0:	f843 2b04 	str.w	r2, [r3], #4
 800ebc4:	e7d9      	b.n	800eb7a <__multiply+0x4e>
 800ebc6:	f8b1 a000 	ldrh.w	sl, [r1]
 800ebca:	f1ba 0f00 	cmp.w	sl, #0
 800ebce:	d01f      	beq.n	800ec10 <__multiply+0xe4>
 800ebd0:	46c4      	mov	ip, r8
 800ebd2:	46a1      	mov	r9, r4
 800ebd4:	2700      	movs	r7, #0
 800ebd6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ebda:	f8d9 3000 	ldr.w	r3, [r9]
 800ebde:	fa1f fb82 	uxth.w	fp, r2
 800ebe2:	b29b      	uxth	r3, r3
 800ebe4:	fb0a 330b 	mla	r3, sl, fp, r3
 800ebe8:	443b      	add	r3, r7
 800ebea:	f8d9 7000 	ldr.w	r7, [r9]
 800ebee:	0c12      	lsrs	r2, r2, #16
 800ebf0:	0c3f      	lsrs	r7, r7, #16
 800ebf2:	fb0a 7202 	mla	r2, sl, r2, r7
 800ebf6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ebfa:	b29b      	uxth	r3, r3
 800ebfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec00:	4565      	cmp	r5, ip
 800ec02:	f849 3b04 	str.w	r3, [r9], #4
 800ec06:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ec0a:	d8e4      	bhi.n	800ebd6 <__multiply+0xaa>
 800ec0c:	9b01      	ldr	r3, [sp, #4]
 800ec0e:	50e7      	str	r7, [r4, r3]
 800ec10:	9b03      	ldr	r3, [sp, #12]
 800ec12:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ec16:	3104      	adds	r1, #4
 800ec18:	f1b9 0f00 	cmp.w	r9, #0
 800ec1c:	d020      	beq.n	800ec60 <__multiply+0x134>
 800ec1e:	6823      	ldr	r3, [r4, #0]
 800ec20:	4647      	mov	r7, r8
 800ec22:	46a4      	mov	ip, r4
 800ec24:	f04f 0a00 	mov.w	sl, #0
 800ec28:	f8b7 b000 	ldrh.w	fp, [r7]
 800ec2c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ec30:	fb09 220b 	mla	r2, r9, fp, r2
 800ec34:	4452      	add	r2, sl
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec3c:	f84c 3b04 	str.w	r3, [ip], #4
 800ec40:	f857 3b04 	ldr.w	r3, [r7], #4
 800ec44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ec48:	f8bc 3000 	ldrh.w	r3, [ip]
 800ec4c:	fb09 330a 	mla	r3, r9, sl, r3
 800ec50:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ec54:	42bd      	cmp	r5, r7
 800ec56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ec5a:	d8e5      	bhi.n	800ec28 <__multiply+0xfc>
 800ec5c:	9a01      	ldr	r2, [sp, #4]
 800ec5e:	50a3      	str	r3, [r4, r2]
 800ec60:	3404      	adds	r4, #4
 800ec62:	e79f      	b.n	800eba4 <__multiply+0x78>
 800ec64:	3e01      	subs	r6, #1
 800ec66:	e7a1      	b.n	800ebac <__multiply+0x80>
 800ec68:	0800fc74 	.word	0x0800fc74
 800ec6c:	0800fc85 	.word	0x0800fc85

0800ec70 <__pow5mult>:
 800ec70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec74:	4615      	mov	r5, r2
 800ec76:	f012 0203 	ands.w	r2, r2, #3
 800ec7a:	4607      	mov	r7, r0
 800ec7c:	460e      	mov	r6, r1
 800ec7e:	d007      	beq.n	800ec90 <__pow5mult+0x20>
 800ec80:	4c25      	ldr	r4, [pc, #148]	@ (800ed18 <__pow5mult+0xa8>)
 800ec82:	3a01      	subs	r2, #1
 800ec84:	2300      	movs	r3, #0
 800ec86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ec8a:	f7ff fea7 	bl	800e9dc <__multadd>
 800ec8e:	4606      	mov	r6, r0
 800ec90:	10ad      	asrs	r5, r5, #2
 800ec92:	d03d      	beq.n	800ed10 <__pow5mult+0xa0>
 800ec94:	69fc      	ldr	r4, [r7, #28]
 800ec96:	b97c      	cbnz	r4, 800ecb8 <__pow5mult+0x48>
 800ec98:	2010      	movs	r0, #16
 800ec9a:	f7ff fd87 	bl	800e7ac <malloc>
 800ec9e:	4602      	mov	r2, r0
 800eca0:	61f8      	str	r0, [r7, #28]
 800eca2:	b928      	cbnz	r0, 800ecb0 <__pow5mult+0x40>
 800eca4:	4b1d      	ldr	r3, [pc, #116]	@ (800ed1c <__pow5mult+0xac>)
 800eca6:	481e      	ldr	r0, [pc, #120]	@ (800ed20 <__pow5mult+0xb0>)
 800eca8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ecac:	f7fe febc 	bl	800da28 <__assert_func>
 800ecb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ecb4:	6004      	str	r4, [r0, #0]
 800ecb6:	60c4      	str	r4, [r0, #12]
 800ecb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ecbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ecc0:	b94c      	cbnz	r4, 800ecd6 <__pow5mult+0x66>
 800ecc2:	f240 2171 	movw	r1, #625	@ 0x271
 800ecc6:	4638      	mov	r0, r7
 800ecc8:	f7ff ff1a 	bl	800eb00 <__i2b>
 800eccc:	2300      	movs	r3, #0
 800ecce:	f8c8 0008 	str.w	r0, [r8, #8]
 800ecd2:	4604      	mov	r4, r0
 800ecd4:	6003      	str	r3, [r0, #0]
 800ecd6:	f04f 0900 	mov.w	r9, #0
 800ecda:	07eb      	lsls	r3, r5, #31
 800ecdc:	d50a      	bpl.n	800ecf4 <__pow5mult+0x84>
 800ecde:	4631      	mov	r1, r6
 800ece0:	4622      	mov	r2, r4
 800ece2:	4638      	mov	r0, r7
 800ece4:	f7ff ff22 	bl	800eb2c <__multiply>
 800ece8:	4631      	mov	r1, r6
 800ecea:	4680      	mov	r8, r0
 800ecec:	4638      	mov	r0, r7
 800ecee:	f7ff fe53 	bl	800e998 <_Bfree>
 800ecf2:	4646      	mov	r6, r8
 800ecf4:	106d      	asrs	r5, r5, #1
 800ecf6:	d00b      	beq.n	800ed10 <__pow5mult+0xa0>
 800ecf8:	6820      	ldr	r0, [r4, #0]
 800ecfa:	b938      	cbnz	r0, 800ed0c <__pow5mult+0x9c>
 800ecfc:	4622      	mov	r2, r4
 800ecfe:	4621      	mov	r1, r4
 800ed00:	4638      	mov	r0, r7
 800ed02:	f7ff ff13 	bl	800eb2c <__multiply>
 800ed06:	6020      	str	r0, [r4, #0]
 800ed08:	f8c0 9000 	str.w	r9, [r0]
 800ed0c:	4604      	mov	r4, r0
 800ed0e:	e7e4      	b.n	800ecda <__pow5mult+0x6a>
 800ed10:	4630      	mov	r0, r6
 800ed12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed16:	bf00      	nop
 800ed18:	0800fcfc 	.word	0x0800fcfc
 800ed1c:	0800fb30 	.word	0x0800fb30
 800ed20:	0800fc85 	.word	0x0800fc85

0800ed24 <__lshift>:
 800ed24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed28:	460c      	mov	r4, r1
 800ed2a:	6849      	ldr	r1, [r1, #4]
 800ed2c:	6923      	ldr	r3, [r4, #16]
 800ed2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ed32:	68a3      	ldr	r3, [r4, #8]
 800ed34:	4607      	mov	r7, r0
 800ed36:	4691      	mov	r9, r2
 800ed38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ed3c:	f108 0601 	add.w	r6, r8, #1
 800ed40:	42b3      	cmp	r3, r6
 800ed42:	db0b      	blt.n	800ed5c <__lshift+0x38>
 800ed44:	4638      	mov	r0, r7
 800ed46:	f7ff fde7 	bl	800e918 <_Balloc>
 800ed4a:	4605      	mov	r5, r0
 800ed4c:	b948      	cbnz	r0, 800ed62 <__lshift+0x3e>
 800ed4e:	4602      	mov	r2, r0
 800ed50:	4b28      	ldr	r3, [pc, #160]	@ (800edf4 <__lshift+0xd0>)
 800ed52:	4829      	ldr	r0, [pc, #164]	@ (800edf8 <__lshift+0xd4>)
 800ed54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ed58:	f7fe fe66 	bl	800da28 <__assert_func>
 800ed5c:	3101      	adds	r1, #1
 800ed5e:	005b      	lsls	r3, r3, #1
 800ed60:	e7ee      	b.n	800ed40 <__lshift+0x1c>
 800ed62:	2300      	movs	r3, #0
 800ed64:	f100 0114 	add.w	r1, r0, #20
 800ed68:	f100 0210 	add.w	r2, r0, #16
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	4553      	cmp	r3, sl
 800ed70:	db33      	blt.n	800edda <__lshift+0xb6>
 800ed72:	6920      	ldr	r0, [r4, #16]
 800ed74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ed78:	f104 0314 	add.w	r3, r4, #20
 800ed7c:	f019 091f 	ands.w	r9, r9, #31
 800ed80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ed84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ed88:	d02b      	beq.n	800ede2 <__lshift+0xbe>
 800ed8a:	f1c9 0e20 	rsb	lr, r9, #32
 800ed8e:	468a      	mov	sl, r1
 800ed90:	2200      	movs	r2, #0
 800ed92:	6818      	ldr	r0, [r3, #0]
 800ed94:	fa00 f009 	lsl.w	r0, r0, r9
 800ed98:	4310      	orrs	r0, r2
 800ed9a:	f84a 0b04 	str.w	r0, [sl], #4
 800ed9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eda2:	459c      	cmp	ip, r3
 800eda4:	fa22 f20e 	lsr.w	r2, r2, lr
 800eda8:	d8f3      	bhi.n	800ed92 <__lshift+0x6e>
 800edaa:	ebac 0304 	sub.w	r3, ip, r4
 800edae:	3b15      	subs	r3, #21
 800edb0:	f023 0303 	bic.w	r3, r3, #3
 800edb4:	3304      	adds	r3, #4
 800edb6:	f104 0015 	add.w	r0, r4, #21
 800edba:	4560      	cmp	r0, ip
 800edbc:	bf88      	it	hi
 800edbe:	2304      	movhi	r3, #4
 800edc0:	50ca      	str	r2, [r1, r3]
 800edc2:	b10a      	cbz	r2, 800edc8 <__lshift+0xa4>
 800edc4:	f108 0602 	add.w	r6, r8, #2
 800edc8:	3e01      	subs	r6, #1
 800edca:	4638      	mov	r0, r7
 800edcc:	612e      	str	r6, [r5, #16]
 800edce:	4621      	mov	r1, r4
 800edd0:	f7ff fde2 	bl	800e998 <_Bfree>
 800edd4:	4628      	mov	r0, r5
 800edd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edda:	f842 0f04 	str.w	r0, [r2, #4]!
 800edde:	3301      	adds	r3, #1
 800ede0:	e7c5      	b.n	800ed6e <__lshift+0x4a>
 800ede2:	3904      	subs	r1, #4
 800ede4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ede8:	f841 2f04 	str.w	r2, [r1, #4]!
 800edec:	459c      	cmp	ip, r3
 800edee:	d8f9      	bhi.n	800ede4 <__lshift+0xc0>
 800edf0:	e7ea      	b.n	800edc8 <__lshift+0xa4>
 800edf2:	bf00      	nop
 800edf4:	0800fc74 	.word	0x0800fc74
 800edf8:	0800fc85 	.word	0x0800fc85

0800edfc <__mcmp>:
 800edfc:	690a      	ldr	r2, [r1, #16]
 800edfe:	4603      	mov	r3, r0
 800ee00:	6900      	ldr	r0, [r0, #16]
 800ee02:	1a80      	subs	r0, r0, r2
 800ee04:	b530      	push	{r4, r5, lr}
 800ee06:	d10e      	bne.n	800ee26 <__mcmp+0x2a>
 800ee08:	3314      	adds	r3, #20
 800ee0a:	3114      	adds	r1, #20
 800ee0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ee10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ee14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ee18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ee1c:	4295      	cmp	r5, r2
 800ee1e:	d003      	beq.n	800ee28 <__mcmp+0x2c>
 800ee20:	d205      	bcs.n	800ee2e <__mcmp+0x32>
 800ee22:	f04f 30ff 	mov.w	r0, #4294967295
 800ee26:	bd30      	pop	{r4, r5, pc}
 800ee28:	42a3      	cmp	r3, r4
 800ee2a:	d3f3      	bcc.n	800ee14 <__mcmp+0x18>
 800ee2c:	e7fb      	b.n	800ee26 <__mcmp+0x2a>
 800ee2e:	2001      	movs	r0, #1
 800ee30:	e7f9      	b.n	800ee26 <__mcmp+0x2a>
	...

0800ee34 <__mdiff>:
 800ee34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee38:	4689      	mov	r9, r1
 800ee3a:	4606      	mov	r6, r0
 800ee3c:	4611      	mov	r1, r2
 800ee3e:	4648      	mov	r0, r9
 800ee40:	4614      	mov	r4, r2
 800ee42:	f7ff ffdb 	bl	800edfc <__mcmp>
 800ee46:	1e05      	subs	r5, r0, #0
 800ee48:	d112      	bne.n	800ee70 <__mdiff+0x3c>
 800ee4a:	4629      	mov	r1, r5
 800ee4c:	4630      	mov	r0, r6
 800ee4e:	f7ff fd63 	bl	800e918 <_Balloc>
 800ee52:	4602      	mov	r2, r0
 800ee54:	b928      	cbnz	r0, 800ee62 <__mdiff+0x2e>
 800ee56:	4b3f      	ldr	r3, [pc, #252]	@ (800ef54 <__mdiff+0x120>)
 800ee58:	f240 2137 	movw	r1, #567	@ 0x237
 800ee5c:	483e      	ldr	r0, [pc, #248]	@ (800ef58 <__mdiff+0x124>)
 800ee5e:	f7fe fde3 	bl	800da28 <__assert_func>
 800ee62:	2301      	movs	r3, #1
 800ee64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ee68:	4610      	mov	r0, r2
 800ee6a:	b003      	add	sp, #12
 800ee6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee70:	bfbc      	itt	lt
 800ee72:	464b      	movlt	r3, r9
 800ee74:	46a1      	movlt	r9, r4
 800ee76:	4630      	mov	r0, r6
 800ee78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ee7c:	bfba      	itte	lt
 800ee7e:	461c      	movlt	r4, r3
 800ee80:	2501      	movlt	r5, #1
 800ee82:	2500      	movge	r5, #0
 800ee84:	f7ff fd48 	bl	800e918 <_Balloc>
 800ee88:	4602      	mov	r2, r0
 800ee8a:	b918      	cbnz	r0, 800ee94 <__mdiff+0x60>
 800ee8c:	4b31      	ldr	r3, [pc, #196]	@ (800ef54 <__mdiff+0x120>)
 800ee8e:	f240 2145 	movw	r1, #581	@ 0x245
 800ee92:	e7e3      	b.n	800ee5c <__mdiff+0x28>
 800ee94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ee98:	6926      	ldr	r6, [r4, #16]
 800ee9a:	60c5      	str	r5, [r0, #12]
 800ee9c:	f109 0310 	add.w	r3, r9, #16
 800eea0:	f109 0514 	add.w	r5, r9, #20
 800eea4:	f104 0e14 	add.w	lr, r4, #20
 800eea8:	f100 0b14 	add.w	fp, r0, #20
 800eeac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800eeb0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800eeb4:	9301      	str	r3, [sp, #4]
 800eeb6:	46d9      	mov	r9, fp
 800eeb8:	f04f 0c00 	mov.w	ip, #0
 800eebc:	9b01      	ldr	r3, [sp, #4]
 800eebe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800eec2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800eec6:	9301      	str	r3, [sp, #4]
 800eec8:	fa1f f38a 	uxth.w	r3, sl
 800eecc:	4619      	mov	r1, r3
 800eece:	b283      	uxth	r3, r0
 800eed0:	1acb      	subs	r3, r1, r3
 800eed2:	0c00      	lsrs	r0, r0, #16
 800eed4:	4463      	add	r3, ip
 800eed6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800eeda:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800eede:	b29b      	uxth	r3, r3
 800eee0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800eee4:	4576      	cmp	r6, lr
 800eee6:	f849 3b04 	str.w	r3, [r9], #4
 800eeea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eeee:	d8e5      	bhi.n	800eebc <__mdiff+0x88>
 800eef0:	1b33      	subs	r3, r6, r4
 800eef2:	3b15      	subs	r3, #21
 800eef4:	f023 0303 	bic.w	r3, r3, #3
 800eef8:	3415      	adds	r4, #21
 800eefa:	3304      	adds	r3, #4
 800eefc:	42a6      	cmp	r6, r4
 800eefe:	bf38      	it	cc
 800ef00:	2304      	movcc	r3, #4
 800ef02:	441d      	add	r5, r3
 800ef04:	445b      	add	r3, fp
 800ef06:	461e      	mov	r6, r3
 800ef08:	462c      	mov	r4, r5
 800ef0a:	4544      	cmp	r4, r8
 800ef0c:	d30e      	bcc.n	800ef2c <__mdiff+0xf8>
 800ef0e:	f108 0103 	add.w	r1, r8, #3
 800ef12:	1b49      	subs	r1, r1, r5
 800ef14:	f021 0103 	bic.w	r1, r1, #3
 800ef18:	3d03      	subs	r5, #3
 800ef1a:	45a8      	cmp	r8, r5
 800ef1c:	bf38      	it	cc
 800ef1e:	2100      	movcc	r1, #0
 800ef20:	440b      	add	r3, r1
 800ef22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ef26:	b191      	cbz	r1, 800ef4e <__mdiff+0x11a>
 800ef28:	6117      	str	r7, [r2, #16]
 800ef2a:	e79d      	b.n	800ee68 <__mdiff+0x34>
 800ef2c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ef30:	46e6      	mov	lr, ip
 800ef32:	0c08      	lsrs	r0, r1, #16
 800ef34:	fa1c fc81 	uxtah	ip, ip, r1
 800ef38:	4471      	add	r1, lr
 800ef3a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ef3e:	b289      	uxth	r1, r1
 800ef40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ef44:	f846 1b04 	str.w	r1, [r6], #4
 800ef48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ef4c:	e7dd      	b.n	800ef0a <__mdiff+0xd6>
 800ef4e:	3f01      	subs	r7, #1
 800ef50:	e7e7      	b.n	800ef22 <__mdiff+0xee>
 800ef52:	bf00      	nop
 800ef54:	0800fc74 	.word	0x0800fc74
 800ef58:	0800fc85 	.word	0x0800fc85

0800ef5c <__d2b>:
 800ef5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ef60:	460f      	mov	r7, r1
 800ef62:	2101      	movs	r1, #1
 800ef64:	ec59 8b10 	vmov	r8, r9, d0
 800ef68:	4616      	mov	r6, r2
 800ef6a:	f7ff fcd5 	bl	800e918 <_Balloc>
 800ef6e:	4604      	mov	r4, r0
 800ef70:	b930      	cbnz	r0, 800ef80 <__d2b+0x24>
 800ef72:	4602      	mov	r2, r0
 800ef74:	4b23      	ldr	r3, [pc, #140]	@ (800f004 <__d2b+0xa8>)
 800ef76:	4824      	ldr	r0, [pc, #144]	@ (800f008 <__d2b+0xac>)
 800ef78:	f240 310f 	movw	r1, #783	@ 0x30f
 800ef7c:	f7fe fd54 	bl	800da28 <__assert_func>
 800ef80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ef84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ef88:	b10d      	cbz	r5, 800ef8e <__d2b+0x32>
 800ef8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ef8e:	9301      	str	r3, [sp, #4]
 800ef90:	f1b8 0300 	subs.w	r3, r8, #0
 800ef94:	d023      	beq.n	800efde <__d2b+0x82>
 800ef96:	4668      	mov	r0, sp
 800ef98:	9300      	str	r3, [sp, #0]
 800ef9a:	f7ff fd84 	bl	800eaa6 <__lo0bits>
 800ef9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800efa2:	b1d0      	cbz	r0, 800efda <__d2b+0x7e>
 800efa4:	f1c0 0320 	rsb	r3, r0, #32
 800efa8:	fa02 f303 	lsl.w	r3, r2, r3
 800efac:	430b      	orrs	r3, r1
 800efae:	40c2      	lsrs	r2, r0
 800efb0:	6163      	str	r3, [r4, #20]
 800efb2:	9201      	str	r2, [sp, #4]
 800efb4:	9b01      	ldr	r3, [sp, #4]
 800efb6:	61a3      	str	r3, [r4, #24]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	bf0c      	ite	eq
 800efbc:	2201      	moveq	r2, #1
 800efbe:	2202      	movne	r2, #2
 800efc0:	6122      	str	r2, [r4, #16]
 800efc2:	b1a5      	cbz	r5, 800efee <__d2b+0x92>
 800efc4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800efc8:	4405      	add	r5, r0
 800efca:	603d      	str	r5, [r7, #0]
 800efcc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800efd0:	6030      	str	r0, [r6, #0]
 800efd2:	4620      	mov	r0, r4
 800efd4:	b003      	add	sp, #12
 800efd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efda:	6161      	str	r1, [r4, #20]
 800efdc:	e7ea      	b.n	800efb4 <__d2b+0x58>
 800efde:	a801      	add	r0, sp, #4
 800efe0:	f7ff fd61 	bl	800eaa6 <__lo0bits>
 800efe4:	9b01      	ldr	r3, [sp, #4]
 800efe6:	6163      	str	r3, [r4, #20]
 800efe8:	3020      	adds	r0, #32
 800efea:	2201      	movs	r2, #1
 800efec:	e7e8      	b.n	800efc0 <__d2b+0x64>
 800efee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eff2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800eff6:	6038      	str	r0, [r7, #0]
 800eff8:	6918      	ldr	r0, [r3, #16]
 800effa:	f7ff fd35 	bl	800ea68 <__hi0bits>
 800effe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f002:	e7e5      	b.n	800efd0 <__d2b+0x74>
 800f004:	0800fc74 	.word	0x0800fc74
 800f008:	0800fc85 	.word	0x0800fc85

0800f00c <__ssputs_r>:
 800f00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f010:	688e      	ldr	r6, [r1, #8]
 800f012:	461f      	mov	r7, r3
 800f014:	42be      	cmp	r6, r7
 800f016:	680b      	ldr	r3, [r1, #0]
 800f018:	4682      	mov	sl, r0
 800f01a:	460c      	mov	r4, r1
 800f01c:	4690      	mov	r8, r2
 800f01e:	d82d      	bhi.n	800f07c <__ssputs_r+0x70>
 800f020:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f024:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f028:	d026      	beq.n	800f078 <__ssputs_r+0x6c>
 800f02a:	6965      	ldr	r5, [r4, #20]
 800f02c:	6909      	ldr	r1, [r1, #16]
 800f02e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f032:	eba3 0901 	sub.w	r9, r3, r1
 800f036:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f03a:	1c7b      	adds	r3, r7, #1
 800f03c:	444b      	add	r3, r9
 800f03e:	106d      	asrs	r5, r5, #1
 800f040:	429d      	cmp	r5, r3
 800f042:	bf38      	it	cc
 800f044:	461d      	movcc	r5, r3
 800f046:	0553      	lsls	r3, r2, #21
 800f048:	d527      	bpl.n	800f09a <__ssputs_r+0x8e>
 800f04a:	4629      	mov	r1, r5
 800f04c:	f7ff fbd8 	bl	800e800 <_malloc_r>
 800f050:	4606      	mov	r6, r0
 800f052:	b360      	cbz	r0, 800f0ae <__ssputs_r+0xa2>
 800f054:	6921      	ldr	r1, [r4, #16]
 800f056:	464a      	mov	r2, r9
 800f058:	f7fe fcd7 	bl	800da0a <memcpy>
 800f05c:	89a3      	ldrh	r3, [r4, #12]
 800f05e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f066:	81a3      	strh	r3, [r4, #12]
 800f068:	6126      	str	r6, [r4, #16]
 800f06a:	6165      	str	r5, [r4, #20]
 800f06c:	444e      	add	r6, r9
 800f06e:	eba5 0509 	sub.w	r5, r5, r9
 800f072:	6026      	str	r6, [r4, #0]
 800f074:	60a5      	str	r5, [r4, #8]
 800f076:	463e      	mov	r6, r7
 800f078:	42be      	cmp	r6, r7
 800f07a:	d900      	bls.n	800f07e <__ssputs_r+0x72>
 800f07c:	463e      	mov	r6, r7
 800f07e:	6820      	ldr	r0, [r4, #0]
 800f080:	4632      	mov	r2, r6
 800f082:	4641      	mov	r1, r8
 800f084:	f000 fb7c 	bl	800f780 <memmove>
 800f088:	68a3      	ldr	r3, [r4, #8]
 800f08a:	1b9b      	subs	r3, r3, r6
 800f08c:	60a3      	str	r3, [r4, #8]
 800f08e:	6823      	ldr	r3, [r4, #0]
 800f090:	4433      	add	r3, r6
 800f092:	6023      	str	r3, [r4, #0]
 800f094:	2000      	movs	r0, #0
 800f096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f09a:	462a      	mov	r2, r5
 800f09c:	f000 fbe9 	bl	800f872 <_realloc_r>
 800f0a0:	4606      	mov	r6, r0
 800f0a2:	2800      	cmp	r0, #0
 800f0a4:	d1e0      	bne.n	800f068 <__ssputs_r+0x5c>
 800f0a6:	6921      	ldr	r1, [r4, #16]
 800f0a8:	4650      	mov	r0, sl
 800f0aa:	f7ff fb35 	bl	800e718 <_free_r>
 800f0ae:	230c      	movs	r3, #12
 800f0b0:	f8ca 3000 	str.w	r3, [sl]
 800f0b4:	89a3      	ldrh	r3, [r4, #12]
 800f0b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0ba:	81a3      	strh	r3, [r4, #12]
 800f0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c0:	e7e9      	b.n	800f096 <__ssputs_r+0x8a>
	...

0800f0c4 <_svfiprintf_r>:
 800f0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c8:	4698      	mov	r8, r3
 800f0ca:	898b      	ldrh	r3, [r1, #12]
 800f0cc:	061b      	lsls	r3, r3, #24
 800f0ce:	b09d      	sub	sp, #116	@ 0x74
 800f0d0:	4607      	mov	r7, r0
 800f0d2:	460d      	mov	r5, r1
 800f0d4:	4614      	mov	r4, r2
 800f0d6:	d510      	bpl.n	800f0fa <_svfiprintf_r+0x36>
 800f0d8:	690b      	ldr	r3, [r1, #16]
 800f0da:	b973      	cbnz	r3, 800f0fa <_svfiprintf_r+0x36>
 800f0dc:	2140      	movs	r1, #64	@ 0x40
 800f0de:	f7ff fb8f 	bl	800e800 <_malloc_r>
 800f0e2:	6028      	str	r0, [r5, #0]
 800f0e4:	6128      	str	r0, [r5, #16]
 800f0e6:	b930      	cbnz	r0, 800f0f6 <_svfiprintf_r+0x32>
 800f0e8:	230c      	movs	r3, #12
 800f0ea:	603b      	str	r3, [r7, #0]
 800f0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f0f0:	b01d      	add	sp, #116	@ 0x74
 800f0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0f6:	2340      	movs	r3, #64	@ 0x40
 800f0f8:	616b      	str	r3, [r5, #20]
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0fe:	2320      	movs	r3, #32
 800f100:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f104:	f8cd 800c 	str.w	r8, [sp, #12]
 800f108:	2330      	movs	r3, #48	@ 0x30
 800f10a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f2a8 <_svfiprintf_r+0x1e4>
 800f10e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f112:	f04f 0901 	mov.w	r9, #1
 800f116:	4623      	mov	r3, r4
 800f118:	469a      	mov	sl, r3
 800f11a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f11e:	b10a      	cbz	r2, 800f124 <_svfiprintf_r+0x60>
 800f120:	2a25      	cmp	r2, #37	@ 0x25
 800f122:	d1f9      	bne.n	800f118 <_svfiprintf_r+0x54>
 800f124:	ebba 0b04 	subs.w	fp, sl, r4
 800f128:	d00b      	beq.n	800f142 <_svfiprintf_r+0x7e>
 800f12a:	465b      	mov	r3, fp
 800f12c:	4622      	mov	r2, r4
 800f12e:	4629      	mov	r1, r5
 800f130:	4638      	mov	r0, r7
 800f132:	f7ff ff6b 	bl	800f00c <__ssputs_r>
 800f136:	3001      	adds	r0, #1
 800f138:	f000 80a7 	beq.w	800f28a <_svfiprintf_r+0x1c6>
 800f13c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f13e:	445a      	add	r2, fp
 800f140:	9209      	str	r2, [sp, #36]	@ 0x24
 800f142:	f89a 3000 	ldrb.w	r3, [sl]
 800f146:	2b00      	cmp	r3, #0
 800f148:	f000 809f 	beq.w	800f28a <_svfiprintf_r+0x1c6>
 800f14c:	2300      	movs	r3, #0
 800f14e:	f04f 32ff 	mov.w	r2, #4294967295
 800f152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f156:	f10a 0a01 	add.w	sl, sl, #1
 800f15a:	9304      	str	r3, [sp, #16]
 800f15c:	9307      	str	r3, [sp, #28]
 800f15e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f162:	931a      	str	r3, [sp, #104]	@ 0x68
 800f164:	4654      	mov	r4, sl
 800f166:	2205      	movs	r2, #5
 800f168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f16c:	484e      	ldr	r0, [pc, #312]	@ (800f2a8 <_svfiprintf_r+0x1e4>)
 800f16e:	f7f1 f82f 	bl	80001d0 <memchr>
 800f172:	9a04      	ldr	r2, [sp, #16]
 800f174:	b9d8      	cbnz	r0, 800f1ae <_svfiprintf_r+0xea>
 800f176:	06d0      	lsls	r0, r2, #27
 800f178:	bf44      	itt	mi
 800f17a:	2320      	movmi	r3, #32
 800f17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f180:	0711      	lsls	r1, r2, #28
 800f182:	bf44      	itt	mi
 800f184:	232b      	movmi	r3, #43	@ 0x2b
 800f186:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f18a:	f89a 3000 	ldrb.w	r3, [sl]
 800f18e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f190:	d015      	beq.n	800f1be <_svfiprintf_r+0xfa>
 800f192:	9a07      	ldr	r2, [sp, #28]
 800f194:	4654      	mov	r4, sl
 800f196:	2000      	movs	r0, #0
 800f198:	f04f 0c0a 	mov.w	ip, #10
 800f19c:	4621      	mov	r1, r4
 800f19e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1a2:	3b30      	subs	r3, #48	@ 0x30
 800f1a4:	2b09      	cmp	r3, #9
 800f1a6:	d94b      	bls.n	800f240 <_svfiprintf_r+0x17c>
 800f1a8:	b1b0      	cbz	r0, 800f1d8 <_svfiprintf_r+0x114>
 800f1aa:	9207      	str	r2, [sp, #28]
 800f1ac:	e014      	b.n	800f1d8 <_svfiprintf_r+0x114>
 800f1ae:	eba0 0308 	sub.w	r3, r0, r8
 800f1b2:	fa09 f303 	lsl.w	r3, r9, r3
 800f1b6:	4313      	orrs	r3, r2
 800f1b8:	9304      	str	r3, [sp, #16]
 800f1ba:	46a2      	mov	sl, r4
 800f1bc:	e7d2      	b.n	800f164 <_svfiprintf_r+0xa0>
 800f1be:	9b03      	ldr	r3, [sp, #12]
 800f1c0:	1d19      	adds	r1, r3, #4
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	9103      	str	r1, [sp, #12]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	bfbb      	ittet	lt
 800f1ca:	425b      	neglt	r3, r3
 800f1cc:	f042 0202 	orrlt.w	r2, r2, #2
 800f1d0:	9307      	strge	r3, [sp, #28]
 800f1d2:	9307      	strlt	r3, [sp, #28]
 800f1d4:	bfb8      	it	lt
 800f1d6:	9204      	strlt	r2, [sp, #16]
 800f1d8:	7823      	ldrb	r3, [r4, #0]
 800f1da:	2b2e      	cmp	r3, #46	@ 0x2e
 800f1dc:	d10a      	bne.n	800f1f4 <_svfiprintf_r+0x130>
 800f1de:	7863      	ldrb	r3, [r4, #1]
 800f1e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1e2:	d132      	bne.n	800f24a <_svfiprintf_r+0x186>
 800f1e4:	9b03      	ldr	r3, [sp, #12]
 800f1e6:	1d1a      	adds	r2, r3, #4
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	9203      	str	r2, [sp, #12]
 800f1ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f1f0:	3402      	adds	r4, #2
 800f1f2:	9305      	str	r3, [sp, #20]
 800f1f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f2b8 <_svfiprintf_r+0x1f4>
 800f1f8:	7821      	ldrb	r1, [r4, #0]
 800f1fa:	2203      	movs	r2, #3
 800f1fc:	4650      	mov	r0, sl
 800f1fe:	f7f0 ffe7 	bl	80001d0 <memchr>
 800f202:	b138      	cbz	r0, 800f214 <_svfiprintf_r+0x150>
 800f204:	9b04      	ldr	r3, [sp, #16]
 800f206:	eba0 000a 	sub.w	r0, r0, sl
 800f20a:	2240      	movs	r2, #64	@ 0x40
 800f20c:	4082      	lsls	r2, r0
 800f20e:	4313      	orrs	r3, r2
 800f210:	3401      	adds	r4, #1
 800f212:	9304      	str	r3, [sp, #16]
 800f214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f218:	4824      	ldr	r0, [pc, #144]	@ (800f2ac <_svfiprintf_r+0x1e8>)
 800f21a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f21e:	2206      	movs	r2, #6
 800f220:	f7f0 ffd6 	bl	80001d0 <memchr>
 800f224:	2800      	cmp	r0, #0
 800f226:	d036      	beq.n	800f296 <_svfiprintf_r+0x1d2>
 800f228:	4b21      	ldr	r3, [pc, #132]	@ (800f2b0 <_svfiprintf_r+0x1ec>)
 800f22a:	bb1b      	cbnz	r3, 800f274 <_svfiprintf_r+0x1b0>
 800f22c:	9b03      	ldr	r3, [sp, #12]
 800f22e:	3307      	adds	r3, #7
 800f230:	f023 0307 	bic.w	r3, r3, #7
 800f234:	3308      	adds	r3, #8
 800f236:	9303      	str	r3, [sp, #12]
 800f238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f23a:	4433      	add	r3, r6
 800f23c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f23e:	e76a      	b.n	800f116 <_svfiprintf_r+0x52>
 800f240:	fb0c 3202 	mla	r2, ip, r2, r3
 800f244:	460c      	mov	r4, r1
 800f246:	2001      	movs	r0, #1
 800f248:	e7a8      	b.n	800f19c <_svfiprintf_r+0xd8>
 800f24a:	2300      	movs	r3, #0
 800f24c:	3401      	adds	r4, #1
 800f24e:	9305      	str	r3, [sp, #20]
 800f250:	4619      	mov	r1, r3
 800f252:	f04f 0c0a 	mov.w	ip, #10
 800f256:	4620      	mov	r0, r4
 800f258:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f25c:	3a30      	subs	r2, #48	@ 0x30
 800f25e:	2a09      	cmp	r2, #9
 800f260:	d903      	bls.n	800f26a <_svfiprintf_r+0x1a6>
 800f262:	2b00      	cmp	r3, #0
 800f264:	d0c6      	beq.n	800f1f4 <_svfiprintf_r+0x130>
 800f266:	9105      	str	r1, [sp, #20]
 800f268:	e7c4      	b.n	800f1f4 <_svfiprintf_r+0x130>
 800f26a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f26e:	4604      	mov	r4, r0
 800f270:	2301      	movs	r3, #1
 800f272:	e7f0      	b.n	800f256 <_svfiprintf_r+0x192>
 800f274:	ab03      	add	r3, sp, #12
 800f276:	9300      	str	r3, [sp, #0]
 800f278:	462a      	mov	r2, r5
 800f27a:	4b0e      	ldr	r3, [pc, #56]	@ (800f2b4 <_svfiprintf_r+0x1f0>)
 800f27c:	a904      	add	r1, sp, #16
 800f27e:	4638      	mov	r0, r7
 800f280:	f7fd fd62 	bl	800cd48 <_printf_float>
 800f284:	1c42      	adds	r2, r0, #1
 800f286:	4606      	mov	r6, r0
 800f288:	d1d6      	bne.n	800f238 <_svfiprintf_r+0x174>
 800f28a:	89ab      	ldrh	r3, [r5, #12]
 800f28c:	065b      	lsls	r3, r3, #25
 800f28e:	f53f af2d 	bmi.w	800f0ec <_svfiprintf_r+0x28>
 800f292:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f294:	e72c      	b.n	800f0f0 <_svfiprintf_r+0x2c>
 800f296:	ab03      	add	r3, sp, #12
 800f298:	9300      	str	r3, [sp, #0]
 800f29a:	462a      	mov	r2, r5
 800f29c:	4b05      	ldr	r3, [pc, #20]	@ (800f2b4 <_svfiprintf_r+0x1f0>)
 800f29e:	a904      	add	r1, sp, #16
 800f2a0:	4638      	mov	r0, r7
 800f2a2:	f7fd ffe9 	bl	800d278 <_printf_i>
 800f2a6:	e7ed      	b.n	800f284 <_svfiprintf_r+0x1c0>
 800f2a8:	0800fcde 	.word	0x0800fcde
 800f2ac:	0800fce8 	.word	0x0800fce8
 800f2b0:	0800cd49 	.word	0x0800cd49
 800f2b4:	0800f00d 	.word	0x0800f00d
 800f2b8:	0800fce4 	.word	0x0800fce4

0800f2bc <__sfputc_r>:
 800f2bc:	6893      	ldr	r3, [r2, #8]
 800f2be:	3b01      	subs	r3, #1
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	b410      	push	{r4}
 800f2c4:	6093      	str	r3, [r2, #8]
 800f2c6:	da08      	bge.n	800f2da <__sfputc_r+0x1e>
 800f2c8:	6994      	ldr	r4, [r2, #24]
 800f2ca:	42a3      	cmp	r3, r4
 800f2cc:	db01      	blt.n	800f2d2 <__sfputc_r+0x16>
 800f2ce:	290a      	cmp	r1, #10
 800f2d0:	d103      	bne.n	800f2da <__sfputc_r+0x1e>
 800f2d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2d6:	f7fe ba84 	b.w	800d7e2 <__swbuf_r>
 800f2da:	6813      	ldr	r3, [r2, #0]
 800f2dc:	1c58      	adds	r0, r3, #1
 800f2de:	6010      	str	r0, [r2, #0]
 800f2e0:	7019      	strb	r1, [r3, #0]
 800f2e2:	4608      	mov	r0, r1
 800f2e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2e8:	4770      	bx	lr

0800f2ea <__sfputs_r>:
 800f2ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ec:	4606      	mov	r6, r0
 800f2ee:	460f      	mov	r7, r1
 800f2f0:	4614      	mov	r4, r2
 800f2f2:	18d5      	adds	r5, r2, r3
 800f2f4:	42ac      	cmp	r4, r5
 800f2f6:	d101      	bne.n	800f2fc <__sfputs_r+0x12>
 800f2f8:	2000      	movs	r0, #0
 800f2fa:	e007      	b.n	800f30c <__sfputs_r+0x22>
 800f2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f300:	463a      	mov	r2, r7
 800f302:	4630      	mov	r0, r6
 800f304:	f7ff ffda 	bl	800f2bc <__sfputc_r>
 800f308:	1c43      	adds	r3, r0, #1
 800f30a:	d1f3      	bne.n	800f2f4 <__sfputs_r+0xa>
 800f30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f310 <_vfiprintf_r>:
 800f310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f314:	460d      	mov	r5, r1
 800f316:	b09d      	sub	sp, #116	@ 0x74
 800f318:	4614      	mov	r4, r2
 800f31a:	4698      	mov	r8, r3
 800f31c:	4606      	mov	r6, r0
 800f31e:	b118      	cbz	r0, 800f328 <_vfiprintf_r+0x18>
 800f320:	6a03      	ldr	r3, [r0, #32]
 800f322:	b90b      	cbnz	r3, 800f328 <_vfiprintf_r+0x18>
 800f324:	f7fe f952 	bl	800d5cc <__sinit>
 800f328:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f32a:	07d9      	lsls	r1, r3, #31
 800f32c:	d405      	bmi.n	800f33a <_vfiprintf_r+0x2a>
 800f32e:	89ab      	ldrh	r3, [r5, #12]
 800f330:	059a      	lsls	r2, r3, #22
 800f332:	d402      	bmi.n	800f33a <_vfiprintf_r+0x2a>
 800f334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f336:	f7fe fb66 	bl	800da06 <__retarget_lock_acquire_recursive>
 800f33a:	89ab      	ldrh	r3, [r5, #12]
 800f33c:	071b      	lsls	r3, r3, #28
 800f33e:	d501      	bpl.n	800f344 <_vfiprintf_r+0x34>
 800f340:	692b      	ldr	r3, [r5, #16]
 800f342:	b99b      	cbnz	r3, 800f36c <_vfiprintf_r+0x5c>
 800f344:	4629      	mov	r1, r5
 800f346:	4630      	mov	r0, r6
 800f348:	f7fe fa8a 	bl	800d860 <__swsetup_r>
 800f34c:	b170      	cbz	r0, 800f36c <_vfiprintf_r+0x5c>
 800f34e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f350:	07dc      	lsls	r4, r3, #31
 800f352:	d504      	bpl.n	800f35e <_vfiprintf_r+0x4e>
 800f354:	f04f 30ff 	mov.w	r0, #4294967295
 800f358:	b01d      	add	sp, #116	@ 0x74
 800f35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f35e:	89ab      	ldrh	r3, [r5, #12]
 800f360:	0598      	lsls	r0, r3, #22
 800f362:	d4f7      	bmi.n	800f354 <_vfiprintf_r+0x44>
 800f364:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f366:	f7fe fb4f 	bl	800da08 <__retarget_lock_release_recursive>
 800f36a:	e7f3      	b.n	800f354 <_vfiprintf_r+0x44>
 800f36c:	2300      	movs	r3, #0
 800f36e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f370:	2320      	movs	r3, #32
 800f372:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f376:	f8cd 800c 	str.w	r8, [sp, #12]
 800f37a:	2330      	movs	r3, #48	@ 0x30
 800f37c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f52c <_vfiprintf_r+0x21c>
 800f380:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f384:	f04f 0901 	mov.w	r9, #1
 800f388:	4623      	mov	r3, r4
 800f38a:	469a      	mov	sl, r3
 800f38c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f390:	b10a      	cbz	r2, 800f396 <_vfiprintf_r+0x86>
 800f392:	2a25      	cmp	r2, #37	@ 0x25
 800f394:	d1f9      	bne.n	800f38a <_vfiprintf_r+0x7a>
 800f396:	ebba 0b04 	subs.w	fp, sl, r4
 800f39a:	d00b      	beq.n	800f3b4 <_vfiprintf_r+0xa4>
 800f39c:	465b      	mov	r3, fp
 800f39e:	4622      	mov	r2, r4
 800f3a0:	4629      	mov	r1, r5
 800f3a2:	4630      	mov	r0, r6
 800f3a4:	f7ff ffa1 	bl	800f2ea <__sfputs_r>
 800f3a8:	3001      	adds	r0, #1
 800f3aa:	f000 80a7 	beq.w	800f4fc <_vfiprintf_r+0x1ec>
 800f3ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f3b0:	445a      	add	r2, fp
 800f3b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800f3b4:	f89a 3000 	ldrb.w	r3, [sl]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	f000 809f 	beq.w	800f4fc <_vfiprintf_r+0x1ec>
 800f3be:	2300      	movs	r3, #0
 800f3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800f3c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3c8:	f10a 0a01 	add.w	sl, sl, #1
 800f3cc:	9304      	str	r3, [sp, #16]
 800f3ce:	9307      	str	r3, [sp, #28]
 800f3d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f3d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800f3d6:	4654      	mov	r4, sl
 800f3d8:	2205      	movs	r2, #5
 800f3da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3de:	4853      	ldr	r0, [pc, #332]	@ (800f52c <_vfiprintf_r+0x21c>)
 800f3e0:	f7f0 fef6 	bl	80001d0 <memchr>
 800f3e4:	9a04      	ldr	r2, [sp, #16]
 800f3e6:	b9d8      	cbnz	r0, 800f420 <_vfiprintf_r+0x110>
 800f3e8:	06d1      	lsls	r1, r2, #27
 800f3ea:	bf44      	itt	mi
 800f3ec:	2320      	movmi	r3, #32
 800f3ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3f2:	0713      	lsls	r3, r2, #28
 800f3f4:	bf44      	itt	mi
 800f3f6:	232b      	movmi	r3, #43	@ 0x2b
 800f3f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3fc:	f89a 3000 	ldrb.w	r3, [sl]
 800f400:	2b2a      	cmp	r3, #42	@ 0x2a
 800f402:	d015      	beq.n	800f430 <_vfiprintf_r+0x120>
 800f404:	9a07      	ldr	r2, [sp, #28]
 800f406:	4654      	mov	r4, sl
 800f408:	2000      	movs	r0, #0
 800f40a:	f04f 0c0a 	mov.w	ip, #10
 800f40e:	4621      	mov	r1, r4
 800f410:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f414:	3b30      	subs	r3, #48	@ 0x30
 800f416:	2b09      	cmp	r3, #9
 800f418:	d94b      	bls.n	800f4b2 <_vfiprintf_r+0x1a2>
 800f41a:	b1b0      	cbz	r0, 800f44a <_vfiprintf_r+0x13a>
 800f41c:	9207      	str	r2, [sp, #28]
 800f41e:	e014      	b.n	800f44a <_vfiprintf_r+0x13a>
 800f420:	eba0 0308 	sub.w	r3, r0, r8
 800f424:	fa09 f303 	lsl.w	r3, r9, r3
 800f428:	4313      	orrs	r3, r2
 800f42a:	9304      	str	r3, [sp, #16]
 800f42c:	46a2      	mov	sl, r4
 800f42e:	e7d2      	b.n	800f3d6 <_vfiprintf_r+0xc6>
 800f430:	9b03      	ldr	r3, [sp, #12]
 800f432:	1d19      	adds	r1, r3, #4
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	9103      	str	r1, [sp, #12]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	bfbb      	ittet	lt
 800f43c:	425b      	neglt	r3, r3
 800f43e:	f042 0202 	orrlt.w	r2, r2, #2
 800f442:	9307      	strge	r3, [sp, #28]
 800f444:	9307      	strlt	r3, [sp, #28]
 800f446:	bfb8      	it	lt
 800f448:	9204      	strlt	r2, [sp, #16]
 800f44a:	7823      	ldrb	r3, [r4, #0]
 800f44c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f44e:	d10a      	bne.n	800f466 <_vfiprintf_r+0x156>
 800f450:	7863      	ldrb	r3, [r4, #1]
 800f452:	2b2a      	cmp	r3, #42	@ 0x2a
 800f454:	d132      	bne.n	800f4bc <_vfiprintf_r+0x1ac>
 800f456:	9b03      	ldr	r3, [sp, #12]
 800f458:	1d1a      	adds	r2, r3, #4
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	9203      	str	r2, [sp, #12]
 800f45e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f462:	3402      	adds	r4, #2
 800f464:	9305      	str	r3, [sp, #20]
 800f466:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f53c <_vfiprintf_r+0x22c>
 800f46a:	7821      	ldrb	r1, [r4, #0]
 800f46c:	2203      	movs	r2, #3
 800f46e:	4650      	mov	r0, sl
 800f470:	f7f0 feae 	bl	80001d0 <memchr>
 800f474:	b138      	cbz	r0, 800f486 <_vfiprintf_r+0x176>
 800f476:	9b04      	ldr	r3, [sp, #16]
 800f478:	eba0 000a 	sub.w	r0, r0, sl
 800f47c:	2240      	movs	r2, #64	@ 0x40
 800f47e:	4082      	lsls	r2, r0
 800f480:	4313      	orrs	r3, r2
 800f482:	3401      	adds	r4, #1
 800f484:	9304      	str	r3, [sp, #16]
 800f486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f48a:	4829      	ldr	r0, [pc, #164]	@ (800f530 <_vfiprintf_r+0x220>)
 800f48c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f490:	2206      	movs	r2, #6
 800f492:	f7f0 fe9d 	bl	80001d0 <memchr>
 800f496:	2800      	cmp	r0, #0
 800f498:	d03f      	beq.n	800f51a <_vfiprintf_r+0x20a>
 800f49a:	4b26      	ldr	r3, [pc, #152]	@ (800f534 <_vfiprintf_r+0x224>)
 800f49c:	bb1b      	cbnz	r3, 800f4e6 <_vfiprintf_r+0x1d6>
 800f49e:	9b03      	ldr	r3, [sp, #12]
 800f4a0:	3307      	adds	r3, #7
 800f4a2:	f023 0307 	bic.w	r3, r3, #7
 800f4a6:	3308      	adds	r3, #8
 800f4a8:	9303      	str	r3, [sp, #12]
 800f4aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4ac:	443b      	add	r3, r7
 800f4ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4b0:	e76a      	b.n	800f388 <_vfiprintf_r+0x78>
 800f4b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4b6:	460c      	mov	r4, r1
 800f4b8:	2001      	movs	r0, #1
 800f4ba:	e7a8      	b.n	800f40e <_vfiprintf_r+0xfe>
 800f4bc:	2300      	movs	r3, #0
 800f4be:	3401      	adds	r4, #1
 800f4c0:	9305      	str	r3, [sp, #20]
 800f4c2:	4619      	mov	r1, r3
 800f4c4:	f04f 0c0a 	mov.w	ip, #10
 800f4c8:	4620      	mov	r0, r4
 800f4ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4ce:	3a30      	subs	r2, #48	@ 0x30
 800f4d0:	2a09      	cmp	r2, #9
 800f4d2:	d903      	bls.n	800f4dc <_vfiprintf_r+0x1cc>
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d0c6      	beq.n	800f466 <_vfiprintf_r+0x156>
 800f4d8:	9105      	str	r1, [sp, #20]
 800f4da:	e7c4      	b.n	800f466 <_vfiprintf_r+0x156>
 800f4dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f4e0:	4604      	mov	r4, r0
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	e7f0      	b.n	800f4c8 <_vfiprintf_r+0x1b8>
 800f4e6:	ab03      	add	r3, sp, #12
 800f4e8:	9300      	str	r3, [sp, #0]
 800f4ea:	462a      	mov	r2, r5
 800f4ec:	4b12      	ldr	r3, [pc, #72]	@ (800f538 <_vfiprintf_r+0x228>)
 800f4ee:	a904      	add	r1, sp, #16
 800f4f0:	4630      	mov	r0, r6
 800f4f2:	f7fd fc29 	bl	800cd48 <_printf_float>
 800f4f6:	4607      	mov	r7, r0
 800f4f8:	1c78      	adds	r0, r7, #1
 800f4fa:	d1d6      	bne.n	800f4aa <_vfiprintf_r+0x19a>
 800f4fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f4fe:	07d9      	lsls	r1, r3, #31
 800f500:	d405      	bmi.n	800f50e <_vfiprintf_r+0x1fe>
 800f502:	89ab      	ldrh	r3, [r5, #12]
 800f504:	059a      	lsls	r2, r3, #22
 800f506:	d402      	bmi.n	800f50e <_vfiprintf_r+0x1fe>
 800f508:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f50a:	f7fe fa7d 	bl	800da08 <__retarget_lock_release_recursive>
 800f50e:	89ab      	ldrh	r3, [r5, #12]
 800f510:	065b      	lsls	r3, r3, #25
 800f512:	f53f af1f 	bmi.w	800f354 <_vfiprintf_r+0x44>
 800f516:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f518:	e71e      	b.n	800f358 <_vfiprintf_r+0x48>
 800f51a:	ab03      	add	r3, sp, #12
 800f51c:	9300      	str	r3, [sp, #0]
 800f51e:	462a      	mov	r2, r5
 800f520:	4b05      	ldr	r3, [pc, #20]	@ (800f538 <_vfiprintf_r+0x228>)
 800f522:	a904      	add	r1, sp, #16
 800f524:	4630      	mov	r0, r6
 800f526:	f7fd fea7 	bl	800d278 <_printf_i>
 800f52a:	e7e4      	b.n	800f4f6 <_vfiprintf_r+0x1e6>
 800f52c:	0800fcde 	.word	0x0800fcde
 800f530:	0800fce8 	.word	0x0800fce8
 800f534:	0800cd49 	.word	0x0800cd49
 800f538:	0800f2eb 	.word	0x0800f2eb
 800f53c:	0800fce4 	.word	0x0800fce4

0800f540 <__sflush_r>:
 800f540:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f548:	0716      	lsls	r6, r2, #28
 800f54a:	4605      	mov	r5, r0
 800f54c:	460c      	mov	r4, r1
 800f54e:	d454      	bmi.n	800f5fa <__sflush_r+0xba>
 800f550:	684b      	ldr	r3, [r1, #4]
 800f552:	2b00      	cmp	r3, #0
 800f554:	dc02      	bgt.n	800f55c <__sflush_r+0x1c>
 800f556:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f558:	2b00      	cmp	r3, #0
 800f55a:	dd48      	ble.n	800f5ee <__sflush_r+0xae>
 800f55c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f55e:	2e00      	cmp	r6, #0
 800f560:	d045      	beq.n	800f5ee <__sflush_r+0xae>
 800f562:	2300      	movs	r3, #0
 800f564:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f568:	682f      	ldr	r7, [r5, #0]
 800f56a:	6a21      	ldr	r1, [r4, #32]
 800f56c:	602b      	str	r3, [r5, #0]
 800f56e:	d030      	beq.n	800f5d2 <__sflush_r+0x92>
 800f570:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f572:	89a3      	ldrh	r3, [r4, #12]
 800f574:	0759      	lsls	r1, r3, #29
 800f576:	d505      	bpl.n	800f584 <__sflush_r+0x44>
 800f578:	6863      	ldr	r3, [r4, #4]
 800f57a:	1ad2      	subs	r2, r2, r3
 800f57c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f57e:	b10b      	cbz	r3, 800f584 <__sflush_r+0x44>
 800f580:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f582:	1ad2      	subs	r2, r2, r3
 800f584:	2300      	movs	r3, #0
 800f586:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f588:	6a21      	ldr	r1, [r4, #32]
 800f58a:	4628      	mov	r0, r5
 800f58c:	47b0      	blx	r6
 800f58e:	1c43      	adds	r3, r0, #1
 800f590:	89a3      	ldrh	r3, [r4, #12]
 800f592:	d106      	bne.n	800f5a2 <__sflush_r+0x62>
 800f594:	6829      	ldr	r1, [r5, #0]
 800f596:	291d      	cmp	r1, #29
 800f598:	d82b      	bhi.n	800f5f2 <__sflush_r+0xb2>
 800f59a:	4a2a      	ldr	r2, [pc, #168]	@ (800f644 <__sflush_r+0x104>)
 800f59c:	40ca      	lsrs	r2, r1
 800f59e:	07d6      	lsls	r6, r2, #31
 800f5a0:	d527      	bpl.n	800f5f2 <__sflush_r+0xb2>
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	6062      	str	r2, [r4, #4]
 800f5a6:	04d9      	lsls	r1, r3, #19
 800f5a8:	6922      	ldr	r2, [r4, #16]
 800f5aa:	6022      	str	r2, [r4, #0]
 800f5ac:	d504      	bpl.n	800f5b8 <__sflush_r+0x78>
 800f5ae:	1c42      	adds	r2, r0, #1
 800f5b0:	d101      	bne.n	800f5b6 <__sflush_r+0x76>
 800f5b2:	682b      	ldr	r3, [r5, #0]
 800f5b4:	b903      	cbnz	r3, 800f5b8 <__sflush_r+0x78>
 800f5b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f5b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f5ba:	602f      	str	r7, [r5, #0]
 800f5bc:	b1b9      	cbz	r1, 800f5ee <__sflush_r+0xae>
 800f5be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f5c2:	4299      	cmp	r1, r3
 800f5c4:	d002      	beq.n	800f5cc <__sflush_r+0x8c>
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	f7ff f8a6 	bl	800e718 <_free_r>
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800f5d0:	e00d      	b.n	800f5ee <__sflush_r+0xae>
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	4628      	mov	r0, r5
 800f5d6:	47b0      	blx	r6
 800f5d8:	4602      	mov	r2, r0
 800f5da:	1c50      	adds	r0, r2, #1
 800f5dc:	d1c9      	bne.n	800f572 <__sflush_r+0x32>
 800f5de:	682b      	ldr	r3, [r5, #0]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d0c6      	beq.n	800f572 <__sflush_r+0x32>
 800f5e4:	2b1d      	cmp	r3, #29
 800f5e6:	d001      	beq.n	800f5ec <__sflush_r+0xac>
 800f5e8:	2b16      	cmp	r3, #22
 800f5ea:	d11e      	bne.n	800f62a <__sflush_r+0xea>
 800f5ec:	602f      	str	r7, [r5, #0]
 800f5ee:	2000      	movs	r0, #0
 800f5f0:	e022      	b.n	800f638 <__sflush_r+0xf8>
 800f5f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5f6:	b21b      	sxth	r3, r3
 800f5f8:	e01b      	b.n	800f632 <__sflush_r+0xf2>
 800f5fa:	690f      	ldr	r7, [r1, #16]
 800f5fc:	2f00      	cmp	r7, #0
 800f5fe:	d0f6      	beq.n	800f5ee <__sflush_r+0xae>
 800f600:	0793      	lsls	r3, r2, #30
 800f602:	680e      	ldr	r6, [r1, #0]
 800f604:	bf08      	it	eq
 800f606:	694b      	ldreq	r3, [r1, #20]
 800f608:	600f      	str	r7, [r1, #0]
 800f60a:	bf18      	it	ne
 800f60c:	2300      	movne	r3, #0
 800f60e:	eba6 0807 	sub.w	r8, r6, r7
 800f612:	608b      	str	r3, [r1, #8]
 800f614:	f1b8 0f00 	cmp.w	r8, #0
 800f618:	dde9      	ble.n	800f5ee <__sflush_r+0xae>
 800f61a:	6a21      	ldr	r1, [r4, #32]
 800f61c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f61e:	4643      	mov	r3, r8
 800f620:	463a      	mov	r2, r7
 800f622:	4628      	mov	r0, r5
 800f624:	47b0      	blx	r6
 800f626:	2800      	cmp	r0, #0
 800f628:	dc08      	bgt.n	800f63c <__sflush_r+0xfc>
 800f62a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f62e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f632:	81a3      	strh	r3, [r4, #12]
 800f634:	f04f 30ff 	mov.w	r0, #4294967295
 800f638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f63c:	4407      	add	r7, r0
 800f63e:	eba8 0800 	sub.w	r8, r8, r0
 800f642:	e7e7      	b.n	800f614 <__sflush_r+0xd4>
 800f644:	20400001 	.word	0x20400001

0800f648 <_fflush_r>:
 800f648:	b538      	push	{r3, r4, r5, lr}
 800f64a:	690b      	ldr	r3, [r1, #16]
 800f64c:	4605      	mov	r5, r0
 800f64e:	460c      	mov	r4, r1
 800f650:	b913      	cbnz	r3, 800f658 <_fflush_r+0x10>
 800f652:	2500      	movs	r5, #0
 800f654:	4628      	mov	r0, r5
 800f656:	bd38      	pop	{r3, r4, r5, pc}
 800f658:	b118      	cbz	r0, 800f662 <_fflush_r+0x1a>
 800f65a:	6a03      	ldr	r3, [r0, #32]
 800f65c:	b90b      	cbnz	r3, 800f662 <_fflush_r+0x1a>
 800f65e:	f7fd ffb5 	bl	800d5cc <__sinit>
 800f662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d0f3      	beq.n	800f652 <_fflush_r+0xa>
 800f66a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f66c:	07d0      	lsls	r0, r2, #31
 800f66e:	d404      	bmi.n	800f67a <_fflush_r+0x32>
 800f670:	0599      	lsls	r1, r3, #22
 800f672:	d402      	bmi.n	800f67a <_fflush_r+0x32>
 800f674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f676:	f7fe f9c6 	bl	800da06 <__retarget_lock_acquire_recursive>
 800f67a:	4628      	mov	r0, r5
 800f67c:	4621      	mov	r1, r4
 800f67e:	f7ff ff5f 	bl	800f540 <__sflush_r>
 800f682:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f684:	07da      	lsls	r2, r3, #31
 800f686:	4605      	mov	r5, r0
 800f688:	d4e4      	bmi.n	800f654 <_fflush_r+0xc>
 800f68a:	89a3      	ldrh	r3, [r4, #12]
 800f68c:	059b      	lsls	r3, r3, #22
 800f68e:	d4e1      	bmi.n	800f654 <_fflush_r+0xc>
 800f690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f692:	f7fe f9b9 	bl	800da08 <__retarget_lock_release_recursive>
 800f696:	e7dd      	b.n	800f654 <_fflush_r+0xc>

0800f698 <fiprintf>:
 800f698:	b40e      	push	{r1, r2, r3}
 800f69a:	b503      	push	{r0, r1, lr}
 800f69c:	4601      	mov	r1, r0
 800f69e:	ab03      	add	r3, sp, #12
 800f6a0:	4805      	ldr	r0, [pc, #20]	@ (800f6b8 <fiprintf+0x20>)
 800f6a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6a6:	6800      	ldr	r0, [r0, #0]
 800f6a8:	9301      	str	r3, [sp, #4]
 800f6aa:	f7ff fe31 	bl	800f310 <_vfiprintf_r>
 800f6ae:	b002      	add	sp, #8
 800f6b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6b4:	b003      	add	sp, #12
 800f6b6:	4770      	bx	lr
 800f6b8:	2000007c 	.word	0x2000007c

0800f6bc <__swhatbuf_r>:
 800f6bc:	b570      	push	{r4, r5, r6, lr}
 800f6be:	460c      	mov	r4, r1
 800f6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6c4:	2900      	cmp	r1, #0
 800f6c6:	b096      	sub	sp, #88	@ 0x58
 800f6c8:	4615      	mov	r5, r2
 800f6ca:	461e      	mov	r6, r3
 800f6cc:	da0d      	bge.n	800f6ea <__swhatbuf_r+0x2e>
 800f6ce:	89a3      	ldrh	r3, [r4, #12]
 800f6d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f6d4:	f04f 0100 	mov.w	r1, #0
 800f6d8:	bf14      	ite	ne
 800f6da:	2340      	movne	r3, #64	@ 0x40
 800f6dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f6e0:	2000      	movs	r0, #0
 800f6e2:	6031      	str	r1, [r6, #0]
 800f6e4:	602b      	str	r3, [r5, #0]
 800f6e6:	b016      	add	sp, #88	@ 0x58
 800f6e8:	bd70      	pop	{r4, r5, r6, pc}
 800f6ea:	466a      	mov	r2, sp
 800f6ec:	f000 f862 	bl	800f7b4 <_fstat_r>
 800f6f0:	2800      	cmp	r0, #0
 800f6f2:	dbec      	blt.n	800f6ce <__swhatbuf_r+0x12>
 800f6f4:	9901      	ldr	r1, [sp, #4]
 800f6f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f6fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f6fe:	4259      	negs	r1, r3
 800f700:	4159      	adcs	r1, r3
 800f702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f706:	e7eb      	b.n	800f6e0 <__swhatbuf_r+0x24>

0800f708 <__smakebuf_r>:
 800f708:	898b      	ldrh	r3, [r1, #12]
 800f70a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f70c:	079d      	lsls	r5, r3, #30
 800f70e:	4606      	mov	r6, r0
 800f710:	460c      	mov	r4, r1
 800f712:	d507      	bpl.n	800f724 <__smakebuf_r+0x1c>
 800f714:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f718:	6023      	str	r3, [r4, #0]
 800f71a:	6123      	str	r3, [r4, #16]
 800f71c:	2301      	movs	r3, #1
 800f71e:	6163      	str	r3, [r4, #20]
 800f720:	b003      	add	sp, #12
 800f722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f724:	ab01      	add	r3, sp, #4
 800f726:	466a      	mov	r2, sp
 800f728:	f7ff ffc8 	bl	800f6bc <__swhatbuf_r>
 800f72c:	9f00      	ldr	r7, [sp, #0]
 800f72e:	4605      	mov	r5, r0
 800f730:	4639      	mov	r1, r7
 800f732:	4630      	mov	r0, r6
 800f734:	f7ff f864 	bl	800e800 <_malloc_r>
 800f738:	b948      	cbnz	r0, 800f74e <__smakebuf_r+0x46>
 800f73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f73e:	059a      	lsls	r2, r3, #22
 800f740:	d4ee      	bmi.n	800f720 <__smakebuf_r+0x18>
 800f742:	f023 0303 	bic.w	r3, r3, #3
 800f746:	f043 0302 	orr.w	r3, r3, #2
 800f74a:	81a3      	strh	r3, [r4, #12]
 800f74c:	e7e2      	b.n	800f714 <__smakebuf_r+0xc>
 800f74e:	89a3      	ldrh	r3, [r4, #12]
 800f750:	6020      	str	r0, [r4, #0]
 800f752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f756:	81a3      	strh	r3, [r4, #12]
 800f758:	9b01      	ldr	r3, [sp, #4]
 800f75a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f75e:	b15b      	cbz	r3, 800f778 <__smakebuf_r+0x70>
 800f760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f764:	4630      	mov	r0, r6
 800f766:	f000 f837 	bl	800f7d8 <_isatty_r>
 800f76a:	b128      	cbz	r0, 800f778 <__smakebuf_r+0x70>
 800f76c:	89a3      	ldrh	r3, [r4, #12]
 800f76e:	f023 0303 	bic.w	r3, r3, #3
 800f772:	f043 0301 	orr.w	r3, r3, #1
 800f776:	81a3      	strh	r3, [r4, #12]
 800f778:	89a3      	ldrh	r3, [r4, #12]
 800f77a:	431d      	orrs	r5, r3
 800f77c:	81a5      	strh	r5, [r4, #12]
 800f77e:	e7cf      	b.n	800f720 <__smakebuf_r+0x18>

0800f780 <memmove>:
 800f780:	4288      	cmp	r0, r1
 800f782:	b510      	push	{r4, lr}
 800f784:	eb01 0402 	add.w	r4, r1, r2
 800f788:	d902      	bls.n	800f790 <memmove+0x10>
 800f78a:	4284      	cmp	r4, r0
 800f78c:	4623      	mov	r3, r4
 800f78e:	d807      	bhi.n	800f7a0 <memmove+0x20>
 800f790:	1e43      	subs	r3, r0, #1
 800f792:	42a1      	cmp	r1, r4
 800f794:	d008      	beq.n	800f7a8 <memmove+0x28>
 800f796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f79a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f79e:	e7f8      	b.n	800f792 <memmove+0x12>
 800f7a0:	4402      	add	r2, r0
 800f7a2:	4601      	mov	r1, r0
 800f7a4:	428a      	cmp	r2, r1
 800f7a6:	d100      	bne.n	800f7aa <memmove+0x2a>
 800f7a8:	bd10      	pop	{r4, pc}
 800f7aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f7ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f7b2:	e7f7      	b.n	800f7a4 <memmove+0x24>

0800f7b4 <_fstat_r>:
 800f7b4:	b538      	push	{r3, r4, r5, lr}
 800f7b6:	4d07      	ldr	r5, [pc, #28]	@ (800f7d4 <_fstat_r+0x20>)
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	4604      	mov	r4, r0
 800f7bc:	4608      	mov	r0, r1
 800f7be:	4611      	mov	r1, r2
 800f7c0:	602b      	str	r3, [r5, #0]
 800f7c2:	f7f4 f805 	bl	80037d0 <_fstat>
 800f7c6:	1c43      	adds	r3, r0, #1
 800f7c8:	d102      	bne.n	800f7d0 <_fstat_r+0x1c>
 800f7ca:	682b      	ldr	r3, [r5, #0]
 800f7cc:	b103      	cbz	r3, 800f7d0 <_fstat_r+0x1c>
 800f7ce:	6023      	str	r3, [r4, #0]
 800f7d0:	bd38      	pop	{r3, r4, r5, pc}
 800f7d2:	bf00      	nop
 800f7d4:	20003030 	.word	0x20003030

0800f7d8 <_isatty_r>:
 800f7d8:	b538      	push	{r3, r4, r5, lr}
 800f7da:	4d06      	ldr	r5, [pc, #24]	@ (800f7f4 <_isatty_r+0x1c>)
 800f7dc:	2300      	movs	r3, #0
 800f7de:	4604      	mov	r4, r0
 800f7e0:	4608      	mov	r0, r1
 800f7e2:	602b      	str	r3, [r5, #0]
 800f7e4:	f7f4 f804 	bl	80037f0 <_isatty>
 800f7e8:	1c43      	adds	r3, r0, #1
 800f7ea:	d102      	bne.n	800f7f2 <_isatty_r+0x1a>
 800f7ec:	682b      	ldr	r3, [r5, #0]
 800f7ee:	b103      	cbz	r3, 800f7f2 <_isatty_r+0x1a>
 800f7f0:	6023      	str	r3, [r4, #0]
 800f7f2:	bd38      	pop	{r3, r4, r5, pc}
 800f7f4:	20003030 	.word	0x20003030

0800f7f8 <_sbrk_r>:
 800f7f8:	b538      	push	{r3, r4, r5, lr}
 800f7fa:	4d06      	ldr	r5, [pc, #24]	@ (800f814 <_sbrk_r+0x1c>)
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	4604      	mov	r4, r0
 800f800:	4608      	mov	r0, r1
 800f802:	602b      	str	r3, [r5, #0]
 800f804:	f7f4 f80c 	bl	8003820 <_sbrk>
 800f808:	1c43      	adds	r3, r0, #1
 800f80a:	d102      	bne.n	800f812 <_sbrk_r+0x1a>
 800f80c:	682b      	ldr	r3, [r5, #0]
 800f80e:	b103      	cbz	r3, 800f812 <_sbrk_r+0x1a>
 800f810:	6023      	str	r3, [r4, #0]
 800f812:	bd38      	pop	{r3, r4, r5, pc}
 800f814:	20003030 	.word	0x20003030

0800f818 <abort>:
 800f818:	b508      	push	{r3, lr}
 800f81a:	2006      	movs	r0, #6
 800f81c:	f000 f88c 	bl	800f938 <raise>
 800f820:	2001      	movs	r0, #1
 800f822:	f7f3 ff85 	bl	8003730 <_exit>

0800f826 <_calloc_r>:
 800f826:	b570      	push	{r4, r5, r6, lr}
 800f828:	fba1 5402 	umull	r5, r4, r1, r2
 800f82c:	b934      	cbnz	r4, 800f83c <_calloc_r+0x16>
 800f82e:	4629      	mov	r1, r5
 800f830:	f7fe ffe6 	bl	800e800 <_malloc_r>
 800f834:	4606      	mov	r6, r0
 800f836:	b928      	cbnz	r0, 800f844 <_calloc_r+0x1e>
 800f838:	4630      	mov	r0, r6
 800f83a:	bd70      	pop	{r4, r5, r6, pc}
 800f83c:	220c      	movs	r2, #12
 800f83e:	6002      	str	r2, [r0, #0]
 800f840:	2600      	movs	r6, #0
 800f842:	e7f9      	b.n	800f838 <_calloc_r+0x12>
 800f844:	462a      	mov	r2, r5
 800f846:	4621      	mov	r1, r4
 800f848:	f7fe f860 	bl	800d90c <memset>
 800f84c:	e7f4      	b.n	800f838 <_calloc_r+0x12>

0800f84e <__ascii_mbtowc>:
 800f84e:	b082      	sub	sp, #8
 800f850:	b901      	cbnz	r1, 800f854 <__ascii_mbtowc+0x6>
 800f852:	a901      	add	r1, sp, #4
 800f854:	b142      	cbz	r2, 800f868 <__ascii_mbtowc+0x1a>
 800f856:	b14b      	cbz	r3, 800f86c <__ascii_mbtowc+0x1e>
 800f858:	7813      	ldrb	r3, [r2, #0]
 800f85a:	600b      	str	r3, [r1, #0]
 800f85c:	7812      	ldrb	r2, [r2, #0]
 800f85e:	1e10      	subs	r0, r2, #0
 800f860:	bf18      	it	ne
 800f862:	2001      	movne	r0, #1
 800f864:	b002      	add	sp, #8
 800f866:	4770      	bx	lr
 800f868:	4610      	mov	r0, r2
 800f86a:	e7fb      	b.n	800f864 <__ascii_mbtowc+0x16>
 800f86c:	f06f 0001 	mvn.w	r0, #1
 800f870:	e7f8      	b.n	800f864 <__ascii_mbtowc+0x16>

0800f872 <_realloc_r>:
 800f872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f876:	4607      	mov	r7, r0
 800f878:	4614      	mov	r4, r2
 800f87a:	460d      	mov	r5, r1
 800f87c:	b921      	cbnz	r1, 800f888 <_realloc_r+0x16>
 800f87e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f882:	4611      	mov	r1, r2
 800f884:	f7fe bfbc 	b.w	800e800 <_malloc_r>
 800f888:	b92a      	cbnz	r2, 800f896 <_realloc_r+0x24>
 800f88a:	f7fe ff45 	bl	800e718 <_free_r>
 800f88e:	4625      	mov	r5, r4
 800f890:	4628      	mov	r0, r5
 800f892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f896:	f000 f86b 	bl	800f970 <_malloc_usable_size_r>
 800f89a:	4284      	cmp	r4, r0
 800f89c:	4606      	mov	r6, r0
 800f89e:	d802      	bhi.n	800f8a6 <_realloc_r+0x34>
 800f8a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f8a4:	d8f4      	bhi.n	800f890 <_realloc_r+0x1e>
 800f8a6:	4621      	mov	r1, r4
 800f8a8:	4638      	mov	r0, r7
 800f8aa:	f7fe ffa9 	bl	800e800 <_malloc_r>
 800f8ae:	4680      	mov	r8, r0
 800f8b0:	b908      	cbnz	r0, 800f8b6 <_realloc_r+0x44>
 800f8b2:	4645      	mov	r5, r8
 800f8b4:	e7ec      	b.n	800f890 <_realloc_r+0x1e>
 800f8b6:	42b4      	cmp	r4, r6
 800f8b8:	4622      	mov	r2, r4
 800f8ba:	4629      	mov	r1, r5
 800f8bc:	bf28      	it	cs
 800f8be:	4632      	movcs	r2, r6
 800f8c0:	f7fe f8a3 	bl	800da0a <memcpy>
 800f8c4:	4629      	mov	r1, r5
 800f8c6:	4638      	mov	r0, r7
 800f8c8:	f7fe ff26 	bl	800e718 <_free_r>
 800f8cc:	e7f1      	b.n	800f8b2 <_realloc_r+0x40>

0800f8ce <__ascii_wctomb>:
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	4608      	mov	r0, r1
 800f8d2:	b141      	cbz	r1, 800f8e6 <__ascii_wctomb+0x18>
 800f8d4:	2aff      	cmp	r2, #255	@ 0xff
 800f8d6:	d904      	bls.n	800f8e2 <__ascii_wctomb+0x14>
 800f8d8:	228a      	movs	r2, #138	@ 0x8a
 800f8da:	601a      	str	r2, [r3, #0]
 800f8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f8e0:	4770      	bx	lr
 800f8e2:	700a      	strb	r2, [r1, #0]
 800f8e4:	2001      	movs	r0, #1
 800f8e6:	4770      	bx	lr

0800f8e8 <_raise_r>:
 800f8e8:	291f      	cmp	r1, #31
 800f8ea:	b538      	push	{r3, r4, r5, lr}
 800f8ec:	4605      	mov	r5, r0
 800f8ee:	460c      	mov	r4, r1
 800f8f0:	d904      	bls.n	800f8fc <_raise_r+0x14>
 800f8f2:	2316      	movs	r3, #22
 800f8f4:	6003      	str	r3, [r0, #0]
 800f8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f8fa:	bd38      	pop	{r3, r4, r5, pc}
 800f8fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f8fe:	b112      	cbz	r2, 800f906 <_raise_r+0x1e>
 800f900:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f904:	b94b      	cbnz	r3, 800f91a <_raise_r+0x32>
 800f906:	4628      	mov	r0, r5
 800f908:	f000 f830 	bl	800f96c <_getpid_r>
 800f90c:	4622      	mov	r2, r4
 800f90e:	4601      	mov	r1, r0
 800f910:	4628      	mov	r0, r5
 800f912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f916:	f000 b817 	b.w	800f948 <_kill_r>
 800f91a:	2b01      	cmp	r3, #1
 800f91c:	d00a      	beq.n	800f934 <_raise_r+0x4c>
 800f91e:	1c59      	adds	r1, r3, #1
 800f920:	d103      	bne.n	800f92a <_raise_r+0x42>
 800f922:	2316      	movs	r3, #22
 800f924:	6003      	str	r3, [r0, #0]
 800f926:	2001      	movs	r0, #1
 800f928:	e7e7      	b.n	800f8fa <_raise_r+0x12>
 800f92a:	2100      	movs	r1, #0
 800f92c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f930:	4620      	mov	r0, r4
 800f932:	4798      	blx	r3
 800f934:	2000      	movs	r0, #0
 800f936:	e7e0      	b.n	800f8fa <_raise_r+0x12>

0800f938 <raise>:
 800f938:	4b02      	ldr	r3, [pc, #8]	@ (800f944 <raise+0xc>)
 800f93a:	4601      	mov	r1, r0
 800f93c:	6818      	ldr	r0, [r3, #0]
 800f93e:	f7ff bfd3 	b.w	800f8e8 <_raise_r>
 800f942:	bf00      	nop
 800f944:	2000007c 	.word	0x2000007c

0800f948 <_kill_r>:
 800f948:	b538      	push	{r3, r4, r5, lr}
 800f94a:	4d07      	ldr	r5, [pc, #28]	@ (800f968 <_kill_r+0x20>)
 800f94c:	2300      	movs	r3, #0
 800f94e:	4604      	mov	r4, r0
 800f950:	4608      	mov	r0, r1
 800f952:	4611      	mov	r1, r2
 800f954:	602b      	str	r3, [r5, #0]
 800f956:	f7f3 fedb 	bl	8003710 <_kill>
 800f95a:	1c43      	adds	r3, r0, #1
 800f95c:	d102      	bne.n	800f964 <_kill_r+0x1c>
 800f95e:	682b      	ldr	r3, [r5, #0]
 800f960:	b103      	cbz	r3, 800f964 <_kill_r+0x1c>
 800f962:	6023      	str	r3, [r4, #0]
 800f964:	bd38      	pop	{r3, r4, r5, pc}
 800f966:	bf00      	nop
 800f968:	20003030 	.word	0x20003030

0800f96c <_getpid_r>:
 800f96c:	f7f3 bec8 	b.w	8003700 <_getpid>

0800f970 <_malloc_usable_size_r>:
 800f970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f974:	1f18      	subs	r0, r3, #4
 800f976:	2b00      	cmp	r3, #0
 800f978:	bfbc      	itt	lt
 800f97a:	580b      	ldrlt	r3, [r1, r0]
 800f97c:	18c0      	addlt	r0, r0, r3
 800f97e:	4770      	bx	lr

0800f980 <_init>:
 800f980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f982:	bf00      	nop
 800f984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f986:	bc08      	pop	{r3}
 800f988:	469e      	mov	lr, r3
 800f98a:	4770      	bx	lr

0800f98c <_fini>:
 800f98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f98e:	bf00      	nop
 800f990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f992:	bc08      	pop	{r3}
 800f994:	469e      	mov	lr, r3
 800f996:	4770      	bx	lr
