
hw6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aac8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800ac58  0800ac58  0000bc58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad54  0800ad54  0000c06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ad54  0800ad54  0000bd54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad5c  0800ad5c  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad5c  0800ad5c  0000bd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad60  0800ad60  0000bd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800ad64  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002280  2000006c  0800add0  0000c06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022ec  0800add0  0000c2ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aeac  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051d2  00000000  00000000  00036f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027a8  00000000  00000000  0003c120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ef2  00000000  00000000  0003e8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006c1f  00000000  00000000  000407ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002be7c  00000000  00000000  000473d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011db58  00000000  00000000  00073255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00190dad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b468  00000000  00000000  00190df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0019c258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ac40 	.word	0x0800ac40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800ac40 	.word	0x0800ac40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch){
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005aa:	2201      	movs	r2, #1
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <__io_putchar+0x20>)
 80005ae:	f005 fcad 	bl	8005f0c <HAL_UART_Transmit>
	return ch;
 80005b2:	687b      	ldr	r3, [r7, #4]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000026c 	.word	0x2000026c

080005c0 <HAL_ADC_ConvCpltCallback>:

#include <stdio.h>
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	uint16_t val = HAL_ADC_GetValue(hadc1);
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f001 fe25 	bl	8002218 <HAL_ADC_GetValue>
 80005ce:	4603      	mov	r3, r0
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	81fb      	strh	r3, [r7, #14]
//	printf("%d\n", val); //todo: dispatch to task
	osMessageQueuePut(myQueue01Handle, &val, 0, 0);
 80005d4:	4b05      	ldr	r3, [pc, #20]	@ (80005ec <HAL_ADC_ConvCpltCallback+0x2c>)
 80005d6:	6818      	ldr	r0, [r3, #0]
 80005d8:	f107 010e 	add.w	r1, r7, #14
 80005dc:	2300      	movs	r3, #0
 80005de:	2200      	movs	r2, #0
 80005e0:	f006 fe22 	bl	8007228 <osMessageQueuePut>

}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000864 	.word	0x20000864

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f001 f903 	bl	80017fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f840 	bl	800067c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005fc:	f000 f8a0 	bl	8000740 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 fb00 	bl	8000c04 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000604:	f000 f942 	bl	800088c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000608:	f000 f978 	bl	80008fc <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800060c:	f000 f9b4 	bl	8000978 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000610:	f000 f9d8 	bl	80009c4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000614:	f000 fa68 	bl	8000ae8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000618:	f000 fa96 	bl	8000b48 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800061c:	f000 fac4 	bl	8000ba8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000620:	f000 f8ba 	bl	8000798 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000624:	f000 fa0c 	bl	8000a40 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000628:	480d      	ldr	r0, [pc, #52]	@ (8000660 <main+0x70>)
 800062a:	f001 fcc7 	bl	8001fbc <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 800062e:	480d      	ldr	r0, [pc, #52]	@ (8000664 <main+0x74>)
 8000630:	f005 f91c 	bl	800586c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000634:	f006 fca8 	bl	8006f88 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8000638:	4a0b      	ldr	r2, [pc, #44]	@ (8000668 <main+0x78>)
 800063a:	2102      	movs	r1, #2
 800063c:	2010      	movs	r0, #16
 800063e:	f006 fd7f 	bl	8007140 <osMessageQueueNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a09      	ldr	r2, [pc, #36]	@ (800066c <main+0x7c>)
 8000646:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000648:	4a09      	ldr	r2, [pc, #36]	@ (8000670 <main+0x80>)
 800064a:	2100      	movs	r1, #0
 800064c:	4809      	ldr	r0, [pc, #36]	@ (8000674 <main+0x84>)
 800064e:	f006 fce5 	bl	800701c <osThreadNew>
 8000652:	4603      	mov	r3, r0
 8000654:	4a08      	ldr	r2, [pc, #32]	@ (8000678 <main+0x88>)
 8000656:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000658:	f006 fcba 	bl	8006fd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <main+0x6c>
 8000660:	20000088 	.word	0x20000088
 8000664:	20000220 	.word	0x20000220
 8000668:	0800acc0 	.word	0x0800acc0
 800066c:	20000864 	.word	0x20000864
 8000670:	0800ac9c 	.word	0x0800ac9c
 8000674:	08000f15 	.word	0x08000f15
 8000678:	20000860 	.word	0x20000860

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b096      	sub	sp, #88	@ 0x58
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2244      	movs	r2, #68	@ 0x44
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f009 fcb3 	bl	8009ff6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	463b      	mov	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006a2:	f003 fbfb 	bl	8003e9c <HAL_PWREx_ControlVoltageScaling>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006ac:	f000 fc4c 	bl	8000f48 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006b0:	f003 fbd6 	bl	8003e60 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006b4:	4b21      	ldr	r3, [pc, #132]	@ (800073c <SystemClock_Config+0xc0>)
 80006b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006ba:	4a20      	ldr	r2, [pc, #128]	@ (800073c <SystemClock_Config+0xc0>)
 80006bc:	f023 0318 	bic.w	r3, r3, #24
 80006c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006c4:	2314      	movs	r3, #20
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006d4:	2360      	movs	r3, #96	@ 0x60
 80006d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2302      	movs	r3, #2
 80006da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006dc:	2301      	movs	r3, #1
 80006de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006e4:	2328      	movs	r3, #40	@ 0x28
 80006e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006e8:	2307      	movs	r3, #7
 80006ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 fcf1 	bl	80040e0 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000704:	f000 fc20 	bl	8000f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2303      	movs	r3, #3
 800070e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	2104      	movs	r1, #4
 8000720:	4618      	mov	r0, r3
 8000722:	f004 f8b9 	bl	8004898 <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800072c:	f000 fc0c 	bl	8000f48 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000730:	f004 fdc0 	bl	80052b4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000734:	bf00      	nop
 8000736:	3758      	adds	r7, #88	@ 0x58
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40021000 	.word	0x40021000

08000740 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b0a2      	sub	sp, #136	@ 0x88
 8000744:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000746:	463b      	mov	r3, r7
 8000748:	2288      	movs	r2, #136	@ 0x88
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f009 fc52 	bl	8009ff6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000752:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000756:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000758:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800075c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800075e:	2301      	movs	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000762:	2301      	movs	r3, #1
 8000764:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000766:	2318      	movs	r3, #24
 8000768:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800076a:	2307      	movs	r3, #7
 800076c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800076e:	2302      	movs	r3, #2
 8000770:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000776:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800077a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4618      	mov	r0, r3
 8000780:	f004 faae 	bl	8004ce0 <HAL_RCCEx_PeriphCLKConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 800078a:	f000 fbdd 	bl	8000f48 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3788      	adds	r7, #136	@ 0x88
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	@ 0x28
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
 80007b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ba:	4b31      	ldr	r3, [pc, #196]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007bc:	4a31      	ldr	r2, [pc, #196]	@ (8000884 <MX_ADC1_Init+0xec>)
 80007be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007c2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007da:	4b29      	ldr	r3, [pc, #164]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007dc:	2204      	movs	r2, #4
 80007de:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e0:	4b27      	ldr	r3, [pc, #156]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007e6:	4b26      	ldr	r3, [pc, #152]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007ec:	4b24      	ldr	r3, [pc, #144]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f2:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80007fa:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <MX_ADC1_Init+0xe8>)
 80007fc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000800:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000802:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <MX_ADC1_Init+0xe8>)
 8000804:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000808:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800080a:	4b1d      	ldr	r3, [pc, #116]	@ (8000880 <MX_ADC1_Init+0xe8>)
 800080c:	2200      	movs	r2, #0
 800080e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000812:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_ADC1_Init+0xe8>)
 8000814:	2200      	movs	r2, #0
 8000816:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000818:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_ADC1_Init+0xe8>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000820:	4817      	ldr	r0, [pc, #92]	@ (8000880 <MX_ADC1_Init+0xe8>)
 8000822:	f001 fa7b 	bl	8001d1c <HAL_ADC_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800082c:	f000 fb8c 	bl	8000f48 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4811      	ldr	r0, [pc, #68]	@ (8000880 <MX_ADC1_Init+0xe8>)
 800083c:	f002 fbf8 	bl	8003030 <HAL_ADCEx_MultiModeConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000846:	f000 fb7f 	bl	8000f48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800084a:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_ADC1_Init+0xf0>)
 800084c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084e:	2306      	movs	r3, #6
 8000850:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000856:	237f      	movs	r3, #127	@ 0x7f
 8000858:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800085a:	2304      	movs	r3, #4
 800085c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	@ (8000880 <MX_ADC1_Init+0xe8>)
 8000868:	f001 ff12 	bl	8002690 <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000872:	f000 fb69 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	3728      	adds	r7, #40	@ 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000088 	.word	0x20000088
 8000884:	50040000 	.word	0x50040000
 8000888:	c7520000 	.word	0xc7520000

0800088c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000890:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <MX_DFSDM1_Init+0x68>)
 8000892:	4a19      	ldr	r2, [pc, #100]	@ (80008f8 <MX_DFSDM1_Init+0x6c>)
 8000894:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000896:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <MX_DFSDM1_Init+0x68>)
 8000898:	2201      	movs	r2, #1
 800089a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800089c:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <MX_DFSDM1_Init+0x68>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_DFSDM1_Init+0x68>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_DFSDM1_Init+0x68>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_DFSDM1_Init+0x68>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_DFSDM1_Init+0x68>)
 80008b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008ba:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <MX_DFSDM1_Init+0x68>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_DFSDM1_Init+0x68>)
 80008c4:	2204      	movs	r2, #4
 80008c6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <MX_DFSDM1_Init+0x68>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_DFSDM1_Init+0x68>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <MX_DFSDM1_Init+0x68>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_DFSDM1_Init+0x68>)
 80008dc:	2200      	movs	r2, #0
 80008de:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <MX_DFSDM1_Init+0x68>)
 80008e2:	f002 fd67 	bl	80033b4 <HAL_DFSDM_ChannelInit>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80008ec:	f000 fb2c 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200000ec 	.word	0x200000ec
 80008f8:	40016020 	.word	0x40016020

080008fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000900:	4b1b      	ldr	r3, [pc, #108]	@ (8000970 <MX_I2C2_Init+0x74>)
 8000902:	4a1c      	ldr	r2, [pc, #112]	@ (8000974 <MX_I2C2_Init+0x78>)
 8000904:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000906:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <MX_I2C2_Init+0x74>)
 8000908:	f640 6214 	movw	r2, #3604	@ 0xe14
 800090c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800090e:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <MX_I2C2_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000914:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <MX_I2C2_Init+0x74>)
 8000916:	2201      	movs	r2, #1
 8000918:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <MX_I2C2_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000920:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <MX_I2C2_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000926:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <MX_I2C2_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800092c:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <MX_I2C2_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000932:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <MX_I2C2_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000938:	480d      	ldr	r0, [pc, #52]	@ (8000970 <MX_I2C2_Init+0x74>)
 800093a:	f003 f82c 	bl	8003996 <HAL_I2C_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000944:	f000 fb00 	bl	8000f48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000948:	2100      	movs	r1, #0
 800094a:	4809      	ldr	r0, [pc, #36]	@ (8000970 <MX_I2C2_Init+0x74>)
 800094c:	f003 f8be 	bl	8003acc <HAL_I2CEx_ConfigAnalogFilter>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000956:	f000 faf7 	bl	8000f48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800095a:	2100      	movs	r1, #0
 800095c:	4804      	ldr	r0, [pc, #16]	@ (8000970 <MX_I2C2_Init+0x74>)
 800095e:	f003 f900 	bl	8003b62 <HAL_I2CEx_ConfigDigitalFilter>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000968:	f000 faee 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000124 	.word	0x20000124
 8000974:	40005800 	.word	0x40005800

08000978 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800097c:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <MX_QUADSPI_Init+0x44>)
 800097e:	4a10      	ldr	r2, [pc, #64]	@ (80009c0 <MX_QUADSPI_Init+0x48>)
 8000980:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000982:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <MX_QUADSPI_Init+0x44>)
 8000984:	2202      	movs	r2, #2
 8000986:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000988:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <MX_QUADSPI_Init+0x44>)
 800098a:	2204      	movs	r2, #4
 800098c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <MX_QUADSPI_Init+0x44>)
 8000990:	2210      	movs	r2, #16
 8000992:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000994:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <MX_QUADSPI_Init+0x44>)
 8000996:	2217      	movs	r2, #23
 8000998:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800099a:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <MX_QUADSPI_Init+0x44>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <MX_QUADSPI_Init+0x44>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	@ (80009bc <MX_QUADSPI_Init+0x44>)
 80009a8:	f003 fade 	bl	8003f68 <HAL_QSPI_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80009b2:	f000 fac9 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000178 	.word	0x20000178
 80009c0:	a0001000 	.word	0xa0001000

080009c4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <MX_SPI3_Init+0x74>)
 80009ca:	4a1c      	ldr	r2, [pc, #112]	@ (8000a3c <MX_SPI3_Init+0x78>)
 80009cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <MX_SPI3_Init+0x74>)
 80009d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009d6:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <MX_SPI3_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80009dc:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <MX_SPI3_Init+0x74>)
 80009de:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80009e2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e4:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <MX_SPI3_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ea:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <MX_SPI3_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_SPI3_Init+0x74>)
 80009f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009f6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <MX_SPI3_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_SPI3_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <MX_SPI3_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <MX_SPI3_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a10:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <MX_SPI3_Init+0x74>)
 8000a12:	2207      	movs	r2, #7
 8000a14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <MX_SPI3_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_SPI3_Init+0x74>)
 8000a1e:	2208      	movs	r2, #8
 8000a20:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_SPI3_Init+0x74>)
 8000a24:	f004 fe28 	bl	8005678 <HAL_SPI_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a2e:	f000 fa8b 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200001bc 	.word	0x200001bc
 8000a3c:	40003c00 	.word	0x40003c00

08000a40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ae0 <MX_TIM1_Init+0xa0>)
 8000a60:	4a20      	ldr	r2, [pc, #128]	@ (8000ae4 <MX_TIM1_Init+0xa4>)
 8000a62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 8000a64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae0 <MX_TIM1_Init+0xa0>)
 8000a66:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000a6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae0 <MX_TIM1_Init+0xa0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000a72:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae0 <MX_TIM1_Init+0xa0>)
 8000a74:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ae0 <MX_TIM1_Init+0xa0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a80:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <MX_TIM1_Init+0xa0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a86:	4b16      	ldr	r3, [pc, #88]	@ (8000ae0 <MX_TIM1_Init+0xa0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a8c:	4814      	ldr	r0, [pc, #80]	@ (8000ae0 <MX_TIM1_Init+0xa0>)
 8000a8e:	f004 fe96 	bl	80057be <HAL_TIM_Base_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000a98:	f000 fa56 	bl	8000f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480d      	ldr	r0, [pc, #52]	@ (8000ae0 <MX_TIM1_Init+0xa0>)
 8000aaa:	f004 ff4f 	bl	800594c <HAL_TIM_ConfigClockSource>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000ab4:	f000 fa48 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ab8:	2320      	movs	r3, #32
 8000aba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <MX_TIM1_Init+0xa0>)
 8000aca:	f005 f949 	bl	8005d60 <HAL_TIMEx_MasterConfigSynchronization>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ad4:	f000 fa38 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	3720      	adds	r7, #32
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000220 	.word	0x20000220
 8000ae4:	40012c00 	.word	0x40012c00

08000ae8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aec:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000aee:	4a15      	ldr	r2, [pc, #84]	@ (8000b44 <MX_USART1_UART_Init+0x5c>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000af2:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000af4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000af8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	@ (8000b40 <MX_USART1_UART_Init+0x58>)
 8000b2c:	f005 f9a0 	bl	8005e70 <HAL_UART_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b36:	f000 fa07 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000026c 	.word	0x2000026c
 8000b44:	40013800 	.word	0x40013800

08000b48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b4e:	4a15      	ldr	r2, [pc, #84]	@ (8000ba4 <MX_USART3_UART_Init+0x5c>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b52:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_USART3_UART_Init+0x58>)
 8000b8c:	f005 f970 	bl	8005e70 <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b96:	f000 f9d7 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200002f4 	.word	0x200002f4
 8000ba4:	40004800 	.word	0x40004800

08000ba8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bac:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000bb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb6:	2206      	movs	r2, #6
 8000bb8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bba:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bde:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bea:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bec:	f003 f805 	bl	8003bfa <HAL_PCD_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bf6:	f000 f9a7 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2000037c 	.word	0x2000037c

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	@ 0x28
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c1a:	4bb9      	ldr	r3, [pc, #740]	@ (8000f00 <MX_GPIO_Init+0x2fc>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1e:	4ab8      	ldr	r2, [pc, #736]	@ (8000f00 <MX_GPIO_Init+0x2fc>)
 8000c20:	f043 0310 	orr.w	r3, r3, #16
 8000c24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c26:	4bb6      	ldr	r3, [pc, #728]	@ (8000f00 <MX_GPIO_Init+0x2fc>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2a:	f003 0310 	and.w	r3, r3, #16
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	4bb3      	ldr	r3, [pc, #716]	@ (8000f00 <MX_GPIO_Init+0x2fc>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c36:	4ab2      	ldr	r2, [pc, #712]	@ (8000f00 <MX_GPIO_Init+0x2fc>)
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c3e:	4bb0      	ldr	r3, [pc, #704]	@ (8000f00 <MX_GPIO_Init+0x2fc>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c42:	f003 0304 	and.w	r3, r3, #4
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4bad      	ldr	r3, [pc, #692]	@ (8000f00 <MX_GPIO_Init+0x2fc>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	4aac      	ldr	r2, [pc, #688]	@ (8000f00 <MX_GPIO_Init+0x2fc>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c56:	4baa      	ldr	r3, [pc, #680]	@ (8000f00 <MX_GPIO_Init+0x2fc>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	4ba7      	ldr	r3, [pc, #668]	@ (8000f00 <MX_GPIO_Init+0x2fc>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c66:	4aa6      	ldr	r2, [pc, #664]	@ (8000f00 <MX_GPIO_Init+0x2fc>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c6e:	4ba4      	ldr	r3, [pc, #656]	@ (8000f00 <MX_GPIO_Init+0x2fc>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7a:	4ba1      	ldr	r3, [pc, #644]	@ (8000f00 <MX_GPIO_Init+0x2fc>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7e:	4aa0      	ldr	r2, [pc, #640]	@ (8000f00 <MX_GPIO_Init+0x2fc>)
 8000c80:	f043 0308 	orr.w	r3, r3, #8
 8000c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c86:	4b9e      	ldr	r3, [pc, #632]	@ (8000f00 <MX_GPIO_Init+0x2fc>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	f003 0308 	and.w	r3, r3, #8
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000c98:	489a      	ldr	r0, [pc, #616]	@ (8000f04 <MX_GPIO_Init+0x300>)
 8000c9a:	f002 fe41 	bl	8003920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca8:	f002 fe3a 	bl	8003920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000cac:	2200      	movs	r2, #0
 8000cae:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000cb2:	4895      	ldr	r0, [pc, #596]	@ (8000f08 <MX_GPIO_Init+0x304>)
 8000cb4:	f002 fe34 	bl	8003920 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000cbe:	4893      	ldr	r0, [pc, #588]	@ (8000f0c <MX_GPIO_Init+0x308>)
 8000cc0:	f002 fe2e 	bl	8003920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cca:	4890      	ldr	r0, [pc, #576]	@ (8000f0c <MX_GPIO_Init+0x308>)
 8000ccc:	f002 fe28 	bl	8003920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000cd6:	488e      	ldr	r0, [pc, #568]	@ (8000f10 <MX_GPIO_Init+0x30c>)
 8000cd8:	f002 fe22 	bl	8003920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2120      	movs	r1, #32
 8000ce0:	4889      	ldr	r0, [pc, #548]	@ (8000f08 <MX_GPIO_Init+0x304>)
 8000ce2:	f002 fe1d 	bl	8003920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2101      	movs	r1, #1
 8000cea:	4886      	ldr	r0, [pc, #536]	@ (8000f04 <MX_GPIO_Init+0x300>)
 8000cec:	f002 fe18 	bl	8003920 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000cf0:	f240 1315 	movw	r3, #277	@ 0x115
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	487e      	ldr	r0, [pc, #504]	@ (8000f04 <MX_GPIO_Init+0x300>)
 8000d0a:	f002 fc5f 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000d0e:	236a      	movs	r3, #106	@ 0x6a
 8000d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4878      	ldr	r0, [pc, #480]	@ (8000f04 <MX_GPIO_Init+0x300>)
 8000d24:	f002 fc52 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000d28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d2e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4874      	ldr	r0, [pc, #464]	@ (8000f10 <MX_GPIO_Init+0x30c>)
 8000d40:	f002 fc44 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000d44:	2303      	movs	r3, #3
 8000d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d54:	2308      	movs	r3, #8
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d62:	f002 fc33 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000d66:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d82:	f002 fc23 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000d86:	2308      	movs	r3, #8
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d96:	2301      	movs	r3, #1
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da4:	f002 fc12 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000da8:	23e0      	movs	r3, #224	@ 0xe0
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000db8:	2305      	movs	r3, #5
 8000dba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc6:	f002 fc01 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	484a      	ldr	r0, [pc, #296]	@ (8000f08 <MX_GPIO_Init+0x304>)
 8000de0:	f002 fbf4 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000de4:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000de8:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4842      	ldr	r0, [pc, #264]	@ (8000f08 <MX_GPIO_Init+0x304>)
 8000dfe:	f002 fbe5 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000e02:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000e06:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e08:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	483c      	ldr	r0, [pc, #240]	@ (8000f0c <MX_GPIO_Init+0x308>)
 8000e1a:	f002 fbd7 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000e1e:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4619      	mov	r1, r3
 8000e36:	4835      	ldr	r0, [pc, #212]	@ (8000f0c <MX_GPIO_Init+0x308>)
 8000e38:	f002 fbc8 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000e3c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	482e      	ldr	r0, [pc, #184]	@ (8000f10 <MX_GPIO_Init+0x30c>)
 8000e56:	f002 fbb9 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e5a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4827      	ldr	r0, [pc, #156]	@ (8000f10 <MX_GPIO_Init+0x30c>)
 8000e72:	f002 fbab 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000e76:	2302      	movs	r3, #2
 8000e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e86:	2305      	movs	r3, #5
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4619      	mov	r1, r3
 8000e90:	481e      	ldr	r0, [pc, #120]	@ (8000f0c <MX_GPIO_Init+0x308>)
 8000e92:	f002 fb9b 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000e96:	2378      	movs	r3, #120	@ 0x78
 8000e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4816      	ldr	r0, [pc, #88]	@ (8000f0c <MX_GPIO_Init+0x308>)
 8000eb2:	f002 fb8b 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000eb6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ebc:	2312      	movs	r3, #18
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ec8:	2304      	movs	r3, #4
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480d      	ldr	r0, [pc, #52]	@ (8000f08 <MX_GPIO_Init+0x304>)
 8000ed4:	f002 fb7a 	bl	80035cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2105      	movs	r1, #5
 8000edc:	2017      	movs	r0, #23
 8000ede:	f002 fa32 	bl	8003346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ee2:	2017      	movs	r0, #23
 8000ee4:	f002 fa4b 	bl	800337e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2105      	movs	r1, #5
 8000eec:	2028      	movs	r0, #40	@ 0x28
 8000eee:	f002 fa2a 	bl	8003346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ef2:	2028      	movs	r0, #40	@ 0x28
 8000ef4:	f002 fa43 	bl	800337e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	@ 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40021000 	.word	0x40021000
 8000f04:	48001000 	.word	0x48001000
 8000f08:	48000400 	.word	0x48000400
 8000f0c:	48000c00 	.word	0x48000c00
 8000f10:	48000800 	.word	0x48000800

08000f14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint16_t adc_val;

	for (;;) {
		if (osMessageQueueGet(myQueue01Handle, &adc_val, NULL, osWaitForever) == osOK) {
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <StartDefaultTask+0x2c>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	f107 010e 	add.w	r1, r7, #14
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f006 f9dd 	bl	80072e8 <osMessageQueueGet>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1f3      	bne.n	8000f1c <StartDefaultTask+0x8>
			printf("Temperature: %d\n", adc_val);
 8000f34:	89fb      	ldrh	r3, [r7, #14]
 8000f36:	4619      	mov	r1, r3
 8000f38:	4802      	ldr	r0, [pc, #8]	@ (8000f44 <StartDefaultTask+0x30>)
 8000f3a:	f009 f807 	bl	8009f4c <iprintf>
		if (osMessageQueueGet(myQueue01Handle, &adc_val, NULL, osWaitForever) == osOK) {
 8000f3e:	e7ed      	b.n	8000f1c <StartDefaultTask+0x8>
 8000f40:	20000864 	.word	0x20000864
 8000f44:	0800ac70 	.word	0x0800ac70

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <Error_Handler+0x8>

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f5e:	4a10      	ldr	r2, [pc, #64]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f76:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f7e:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	210f      	movs	r1, #15
 8000f8e:	f06f 0001 	mvn.w	r0, #1
 8000f92:	f002 f9d8 	bl	8003346 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08c      	sub	sp, #48	@ 0x30
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a31      	ldr	r2, [pc, #196]	@ (8001088 <HAL_ADC_MspInit+0xe4>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d15c      	bne.n	8001080 <HAL_ADC_MspInit+0xdc>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fc6:	4b31      	ldr	r3, [pc, #196]	@ (800108c <HAL_ADC_MspInit+0xe8>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	4a30      	ldr	r2, [pc, #192]	@ (800108c <HAL_ADC_MspInit+0xe8>)
 8000fcc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd2:	4b2e      	ldr	r3, [pc, #184]	@ (800108c <HAL_ADC_MspInit+0xe8>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fda:	61bb      	str	r3, [r7, #24]
 8000fdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b2b      	ldr	r3, [pc, #172]	@ (800108c <HAL_ADC_MspInit+0xe8>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800108c <HAL_ADC_MspInit+0xe8>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fea:	4b28      	ldr	r3, [pc, #160]	@ (800108c <HAL_ADC_MspInit+0xe8>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4b25      	ldr	r3, [pc, #148]	@ (800108c <HAL_ADC_MspInit+0xe8>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	4a24      	ldr	r2, [pc, #144]	@ (800108c <HAL_ADC_MspInit+0xe8>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001002:	4b22      	ldr	r3, [pc, #136]	@ (800108c <HAL_ADC_MspInit+0xe8>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <HAL_ADC_MspInit+0xe8>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001012:	4a1e      	ldr	r2, [pc, #120]	@ (800108c <HAL_ADC_MspInit+0xe8>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <HAL_ADC_MspInit+0xe8>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001026:	233f      	movs	r3, #63	@ 0x3f
 8001028:	61fb      	str	r3, [r7, #28]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800102a:	230b      	movs	r3, #11
 800102c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	4815      	ldr	r0, [pc, #84]	@ (8001090 <HAL_ADC_MspInit+0xec>)
 800103a:	f002 fac7 	bl	80035cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 800103e:	2310      	movs	r3, #16
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001042:	230b      	movs	r3, #11
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001054:	f002 faba 	bl	80035cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001058:	2302      	movs	r3, #2
 800105a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800105c:	230b      	movs	r3, #11
 800105e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4619      	mov	r1, r3
 800106a:	480a      	ldr	r0, [pc, #40]	@ (8001094 <HAL_ADC_MspInit+0xf0>)
 800106c:	f002 faae 	bl	80035cc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	2105      	movs	r1, #5
 8001074:	2012      	movs	r0, #18
 8001076:	f002 f966 	bl	8003346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800107a:	2012      	movs	r0, #18
 800107c:	f002 f97f 	bl	800337e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001080:	bf00      	nop
 8001082:	3730      	adds	r7, #48	@ 0x30
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	50040000 	.word	0x50040000
 800108c:	40021000 	.word	0x40021000
 8001090:	48000800 	.word	0x48000800
 8001094:	48000400 	.word	0x48000400

08001098 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b0ac      	sub	sp, #176	@ 0xb0
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2288      	movs	r2, #136	@ 0x88
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f008 ff9c 	bl	8009ff6 <memset>
  if(DFSDM1_Init == 0)
 80010be:	4b25      	ldr	r3, [pc, #148]	@ (8001154 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d142      	bne.n	800114c <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80010c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010ca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 fe02 	bl	8004ce0 <HAL_RCCEx_PeriphCLKConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80010e2:	f7ff ff31 	bl	8000f48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80010e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001158 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001158 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010f2:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010fe:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	4a15      	ldr	r2, [pc, #84]	@ (8001158 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001104:	f043 0310 	orr.w	r3, r3, #16
 8001108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110a:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001116:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800111a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001130:	2306      	movs	r3, #6
 8001132:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001136:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800113a:	4619      	mov	r1, r3
 800113c:	4807      	ldr	r0, [pc, #28]	@ (800115c <HAL_DFSDM_ChannelMspInit+0xc4>)
 800113e:	f002 fa45 	bl	80035cc <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001142:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	3301      	adds	r3, #1
 8001148:	4a02      	ldr	r2, [pc, #8]	@ (8001154 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800114a:	6013      	str	r3, [r2, #0]
  }

}
 800114c:	bf00      	nop
 800114e:	37b0      	adds	r7, #176	@ 0xb0
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000868 	.word	0x20000868
 8001158:	40021000 	.word	0x40021000
 800115c:	48001000 	.word	0x48001000

08001160 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0ac      	sub	sp, #176	@ 0xb0
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2288      	movs	r2, #136	@ 0x88
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f008 ff38 	bl	8009ff6 <memset>
  if(hi2c->Instance==I2C2)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a21      	ldr	r2, [pc, #132]	@ (8001210 <HAL_I2C_MspInit+0xb0>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d13b      	bne.n	8001208 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001190:	2380      	movs	r3, #128	@ 0x80
 8001192:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001194:	2300      	movs	r3, #0
 8001196:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4618      	mov	r0, r3
 800119e:	f003 fd9f 	bl	8004ce0 <HAL_RCCEx_PeriphCLKConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011a8:	f7ff fece 	bl	8000f48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ac:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <HAL_I2C_MspInit+0xb4>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b0:	4a18      	ldr	r2, [pc, #96]	@ (8001214 <HAL_I2C_MspInit+0xb4>)
 80011b2:	f043 0302 	orr.w	r3, r3, #2
 80011b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b8:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <HAL_I2C_MspInit+0xb4>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80011c4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011cc:	2312      	movs	r3, #18
 80011ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011de:	2304      	movs	r3, #4
 80011e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011e8:	4619      	mov	r1, r3
 80011ea:	480b      	ldr	r0, [pc, #44]	@ (8001218 <HAL_I2C_MspInit+0xb8>)
 80011ec:	f002 f9ee 	bl	80035cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011f0:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <HAL_I2C_MspInit+0xb4>)
 80011f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f4:	4a07      	ldr	r2, [pc, #28]	@ (8001214 <HAL_I2C_MspInit+0xb4>)
 80011f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <HAL_I2C_MspInit+0xb4>)
 80011fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001200:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001208:	bf00      	nop
 800120a:	37b0      	adds	r7, #176	@ 0xb0
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40005800 	.word	0x40005800
 8001214:	40021000 	.word	0x40021000
 8001218:	48000400 	.word	0x48000400

0800121c <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	@ 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a17      	ldr	r2, [pc, #92]	@ (8001298 <HAL_QSPI_MspInit+0x7c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d128      	bne.n	8001290 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800123e:	4b17      	ldr	r3, [pc, #92]	@ (800129c <HAL_QSPI_MspInit+0x80>)
 8001240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001242:	4a16      	ldr	r2, [pc, #88]	@ (800129c <HAL_QSPI_MspInit+0x80>)
 8001244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001248:	6513      	str	r3, [r2, #80]	@ 0x50
 800124a:	4b14      	ldr	r3, [pc, #80]	@ (800129c <HAL_QSPI_MspInit+0x80>)
 800124c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800124e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001256:	4b11      	ldr	r3, [pc, #68]	@ (800129c <HAL_QSPI_MspInit+0x80>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	4a10      	ldr	r2, [pc, #64]	@ (800129c <HAL_QSPI_MspInit+0x80>)
 800125c:	f043 0310 	orr.w	r3, r3, #16
 8001260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001262:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <HAL_QSPI_MspInit+0x80>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800126e:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001272:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001280:	230a      	movs	r3, #10
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4619      	mov	r1, r3
 800128a:	4805      	ldr	r0, [pc, #20]	@ (80012a0 <HAL_QSPI_MspInit+0x84>)
 800128c:	f002 f99e 	bl	80035cc <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	@ 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	a0001000 	.word	0xa0001000
 800129c:	40021000 	.word	0x40021000
 80012a0:	48001000 	.word	0x48001000

080012a4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	@ 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a17      	ldr	r2, [pc, #92]	@ (8001320 <HAL_SPI_MspInit+0x7c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d128      	bne.n	8001318 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012c6:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <HAL_SPI_MspInit+0x80>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ca:	4a16      	ldr	r2, [pc, #88]	@ (8001324 <HAL_SPI_MspInit+0x80>)
 80012cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012d2:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <HAL_SPI_MspInit+0x80>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012de:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <HAL_SPI_MspInit+0x80>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	4a10      	ldr	r2, [pc, #64]	@ (8001324 <HAL_SPI_MspInit+0x80>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <HAL_SPI_MspInit+0x80>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80012f6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001308:	2306      	movs	r3, #6
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	4805      	ldr	r0, [pc, #20]	@ (8001328 <HAL_SPI_MspInit+0x84>)
 8001314:	f002 f95a 	bl	80035cc <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	@ 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40003c00 	.word	0x40003c00
 8001324:	40021000 	.word	0x40021000
 8001328:	48000800 	.word	0x48000800

0800132c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0a      	ldr	r2, [pc, #40]	@ (8001364 <HAL_TIM_Base_MspInit+0x38>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d10b      	bne.n	8001356 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800133e:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <HAL_TIM_Base_MspInit+0x3c>)
 8001340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001342:	4a09      	ldr	r2, [pc, #36]	@ (8001368 <HAL_TIM_Base_MspInit+0x3c>)
 8001344:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001348:	6613      	str	r3, [r2, #96]	@ 0x60
 800134a:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <HAL_TIM_Base_MspInit+0x3c>)
 800134c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800134e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40012c00 	.word	0x40012c00
 8001368:	40021000 	.word	0x40021000

0800136c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b0ae      	sub	sp, #184	@ 0xb8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	2288      	movs	r2, #136	@ 0x88
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f008 fe32 	bl	8009ff6 <memset>
  if(huart->Instance==USART1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a42      	ldr	r2, [pc, #264]	@ (80014a0 <HAL_UART_MspInit+0x134>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d13b      	bne.n	8001414 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800139c:	2301      	movs	r3, #1
 800139e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013a0:	2300      	movs	r3, #0
 80013a2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	4618      	mov	r0, r3
 80013aa:	f003 fc99 	bl	8004ce0 <HAL_RCCEx_PeriphCLKConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013b4:	f7ff fdc8 	bl	8000f48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013b8:	4b3a      	ldr	r3, [pc, #232]	@ (80014a4 <HAL_UART_MspInit+0x138>)
 80013ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013bc:	4a39      	ldr	r2, [pc, #228]	@ (80014a4 <HAL_UART_MspInit+0x138>)
 80013be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c2:	6613      	str	r3, [r2, #96]	@ 0x60
 80013c4:	4b37      	ldr	r3, [pc, #220]	@ (80014a4 <HAL_UART_MspInit+0x138>)
 80013c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d0:	4b34      	ldr	r3, [pc, #208]	@ (80014a4 <HAL_UART_MspInit+0x138>)
 80013d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d4:	4a33      	ldr	r2, [pc, #204]	@ (80014a4 <HAL_UART_MspInit+0x138>)
 80013d6:	f043 0302 	orr.w	r3, r3, #2
 80013da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013dc:	4b31      	ldr	r3, [pc, #196]	@ (80014a4 <HAL_UART_MspInit+0x138>)
 80013de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80013e8:	23c0      	movs	r3, #192	@ 0xc0
 80013ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001400:	2307      	movs	r3, #7
 8001402:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001406:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800140a:	4619      	mov	r1, r3
 800140c:	4826      	ldr	r0, [pc, #152]	@ (80014a8 <HAL_UART_MspInit+0x13c>)
 800140e:	f002 f8dd 	bl	80035cc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001412:	e040      	b.n	8001496 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a24      	ldr	r2, [pc, #144]	@ (80014ac <HAL_UART_MspInit+0x140>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d13b      	bne.n	8001496 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800141e:	2304      	movs	r3, #4
 8001420:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001422:	2300      	movs	r3, #0
 8001424:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	4618      	mov	r0, r3
 800142c:	f003 fc58 	bl	8004ce0 <HAL_RCCEx_PeriphCLKConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001436:	f7ff fd87 	bl	8000f48 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800143a:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <HAL_UART_MspInit+0x138>)
 800143c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143e:	4a19      	ldr	r2, [pc, #100]	@ (80014a4 <HAL_UART_MspInit+0x138>)
 8001440:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001444:	6593      	str	r3, [r2, #88]	@ 0x58
 8001446:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <HAL_UART_MspInit+0x138>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001452:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <HAL_UART_MspInit+0x138>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	4a13      	ldr	r2, [pc, #76]	@ (80014a4 <HAL_UART_MspInit+0x138>)
 8001458:	f043 0308 	orr.w	r3, r3, #8
 800145c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145e:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <HAL_UART_MspInit+0x138>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800146a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800146e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001484:	2307      	movs	r3, #7
 8001486:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800148e:	4619      	mov	r1, r3
 8001490:	4807      	ldr	r0, [pc, #28]	@ (80014b0 <HAL_UART_MspInit+0x144>)
 8001492:	f002 f89b 	bl	80035cc <HAL_GPIO_Init>
}
 8001496:	bf00      	nop
 8001498:	37b8      	adds	r7, #184	@ 0xb8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40013800 	.word	0x40013800
 80014a4:	40021000 	.word	0x40021000
 80014a8:	48000400 	.word	0x48000400
 80014ac:	40004800 	.word	0x40004800
 80014b0:	48000c00 	.word	0x48000c00

080014b4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	@ 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014d4:	d154      	bne.n	8001580 <HAL_PCD_MspInit+0xcc>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001588 <HAL_PCD_MspInit+0xd4>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014da:	4a2b      	ldr	r2, [pc, #172]	@ (8001588 <HAL_PCD_MspInit+0xd4>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e2:	4b29      	ldr	r3, [pc, #164]	@ (8001588 <HAL_PCD_MspInit+0xd4>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80014ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001506:	f002 f861 	bl	80035cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800150a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800150e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800151c:	230a      	movs	r3, #10
 800151e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800152a:	f002 f84f 	bl	80035cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800152e:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <HAL_PCD_MspInit+0xd4>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	4a15      	ldr	r2, [pc, #84]	@ (8001588 <HAL_PCD_MspInit+0xd4>)
 8001534:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153a:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <HAL_PCD_MspInit+0xd4>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <HAL_PCD_MspInit+0xd4>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d114      	bne.n	800157c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <HAL_PCD_MspInit+0xd4>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001556:	4a0c      	ldr	r2, [pc, #48]	@ (8001588 <HAL_PCD_MspInit+0xd4>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800155c:	6593      	str	r3, [r2, #88]	@ 0x58
 800155e:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <HAL_PCD_MspInit+0xd4>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800156a:	f002 fced 	bl	8003f48 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <HAL_PCD_MspInit+0xd4>)
 8001570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001572:	4a05      	ldr	r2, [pc, #20]	@ (8001588 <HAL_PCD_MspInit+0xd4>)
 8001574:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001578:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800157a:	e001      	b.n	8001580 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 800157c:	f002 fce4 	bl	8003f48 <HAL_PWREx_EnableVddUSB>
}
 8001580:	bf00      	nop
 8001582:	3728      	adds	r7, #40	@ 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40021000 	.word	0x40021000

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <NMI_Handler+0x4>

08001594 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <HardFault_Handler+0x4>

0800159c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <MemManage_Handler+0x4>

080015a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c6:	f000 f96f 	bl	80018a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015ca:	f007 fb7f 	bl	8008ccc <xTaskGetSchedulerState>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d001      	beq.n	80015d8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015d4:	f008 f978 	bl	80098c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015e0:	4802      	ldr	r0, [pc, #8]	@ (80015ec <ADC1_2_IRQHandler+0x10>)
 80015e2:	f000 fe27 	bl	8002234 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000088 	.word	0x20000088

080015f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80015f4:	2020      	movs	r0, #32
 80015f6:	f002 f9ab 	bl	8003950 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80015fa:	2040      	movs	r0, #64	@ 0x40
 80015fc:	f002 f9a8 	bl	8003950 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001600:	2080      	movs	r0, #128	@ 0x80
 8001602:	f002 f9a5 	bl	8003950 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001606:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800160a:	f002 f9a1 	bl	8003950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}

08001612 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001616:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800161a:	f002 f999 	bl	8003950 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800161e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001622:	f002 f995 	bl	8003950 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001626:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800162a:	f002 f991 	bl	8003950 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800162e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001632:	f002 f98d 	bl	8003950 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001636:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800163a:	f002 f989 	bl	8003950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}

08001642 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b086      	sub	sp, #24
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	e00a      	b.n	800166a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001654:	f3af 8000 	nop.w
 8001658:	4601      	mov	r1, r0
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	60ba      	str	r2, [r7, #8]
 8001660:	b2ca      	uxtb	r2, r1
 8001662:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	3301      	adds	r3, #1
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	429a      	cmp	r2, r3
 8001670:	dbf0      	blt.n	8001654 <_read+0x12>
  }

  return len;
 8001672:	687b      	ldr	r3, [r7, #4]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	e009      	b.n	80016a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	60ba      	str	r2, [r7, #8]
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe ff80 	bl	800059c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	3301      	adds	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	dbf1      	blt.n	800168e <_write+0x12>
  }
  return len;
 80016aa:	687b      	ldr	r3, [r7, #4]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_close>:

int _close(int file)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016dc:	605a      	str	r2, [r3, #4]
  return 0;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <_isatty>:

int _isatty(int file)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016f4:	2301      	movs	r3, #1
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001702:	b480      	push	{r7}
 8001704:	b085      	sub	sp, #20
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001724:	4a14      	ldr	r2, [pc, #80]	@ (8001778 <_sbrk+0x5c>)
 8001726:	4b15      	ldr	r3, [pc, #84]	@ (800177c <_sbrk+0x60>)
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001730:	4b13      	ldr	r3, [pc, #76]	@ (8001780 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001738:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <_sbrk+0x64>)
 800173a:	4a12      	ldr	r2, [pc, #72]	@ (8001784 <_sbrk+0x68>)
 800173c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173e:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <_sbrk+0x64>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	429a      	cmp	r2, r3
 800174a:	d207      	bcs.n	800175c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800174c:	f008 fca2 	bl	800a094 <__errno>
 8001750:	4603      	mov	r3, r0
 8001752:	220c      	movs	r2, #12
 8001754:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	e009      	b.n	8001770 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800175c:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001762:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	4a05      	ldr	r2, [pc, #20]	@ (8001780 <_sbrk+0x64>)
 800176c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176e:	68fb      	ldr	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20018000 	.word	0x20018000
 800177c:	00000400 	.word	0x00000400
 8001780:	2000086c 	.word	0x2000086c
 8001784:	200022f0 	.word	0x200022f0

08001788 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <SystemInit+0x20>)
 800178e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001792:	4a05      	ldr	r2, [pc, #20]	@ (80017a8 <SystemInit+0x20>)
 8001794:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001798:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017b0:	f7ff ffea 	bl	8001788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b4:	480c      	ldr	r0, [pc, #48]	@ (80017e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80017b6:	490d      	ldr	r1, [pc, #52]	@ (80017ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80017b8:	4a0d      	ldr	r2, [pc, #52]	@ (80017f0 <LoopForever+0xe>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017cc:	4c0a      	ldr	r4, [pc, #40]	@ (80017f8 <LoopForever+0x16>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017da:	f008 fc61 	bl	800a0a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017de:	f7fe ff07 	bl	80005f0 <main>

080017e2 <LoopForever>:

LoopForever:
    b LoopForever
 80017e2:	e7fe      	b.n	80017e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80017f0:	0800ad64 	.word	0x0800ad64
  ldr r2, =_sbss
 80017f4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80017f8:	200022ec 	.word	0x200022ec

080017fc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC3_IRQHandler>

080017fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001808:	2003      	movs	r0, #3
 800180a:	f001 fd91 	bl	8003330 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180e:	200f      	movs	r0, #15
 8001810:	f000 f80e 	bl	8001830 <HAL_InitTick>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	71fb      	strb	r3, [r7, #7]
 800181e:	e001      	b.n	8001824 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001820:	f7ff fb98 	bl	8000f54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001824:	79fb      	ldrb	r3, [r7, #7]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800183c:	4b17      	ldr	r3, [pc, #92]	@ (800189c <HAL_InitTick+0x6c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d023      	beq.n	800188c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001844:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <HAL_InitTick+0x70>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b14      	ldr	r3, [pc, #80]	@ (800189c <HAL_InitTick+0x6c>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f001 fd9d 	bl	800339a <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d809      	bhi.n	8001880 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f001 fd67 	bl	8003346 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001878:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <HAL_InitTick+0x74>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e007      	b.n	8001890 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	e004      	b.n	8001890 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
 800188a:	e001      	b.n	8001890 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000008 	.word	0x20000008
 80018a0:	20000000 	.word	0x20000000
 80018a4:	20000004 	.word	0x20000004

080018a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <HAL_IncTick+0x20>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <HAL_IncTick+0x24>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a04      	ldr	r2, [pc, #16]	@ (80018cc <HAL_IncTick+0x24>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000008 	.word	0x20000008
 80018cc:	20000870 	.word	0x20000870

080018d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b03      	ldr	r3, [pc, #12]	@ (80018e4 <HAL_GetTick+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000870 	.word	0x20000870

080018e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f0:	f7ff ffee 	bl	80018d0 <HAL_GetTick>
 80018f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d005      	beq.n	800190e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001902:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <HAL_Delay+0x44>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190e:	bf00      	nop
 8001910:	f7ff ffde 	bl	80018d0 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d8f7      	bhi.n	8001910 <HAL_Delay+0x28>
  {
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000008 	.word	0x20000008

08001930 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	609a      	str	r2, [r3, #8]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	609a      	str	r2, [r3, #8]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3360      	adds	r3, #96	@ 0x60
 80019aa:	461a      	mov	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <LL_ADC_SetOffset+0x44>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	4313      	orrs	r3, r2
 80019c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019d0:	bf00      	nop
 80019d2:	371c      	adds	r7, #28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	03fff000 	.word	0x03fff000

080019e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3360      	adds	r3, #96	@ 0x60
 80019ee:	461a      	mov	r2, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3360      	adds	r3, #96	@ 0x60
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a36:	bf00      	nop
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3330      	adds	r3, #48	@ 0x30
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	4413      	add	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	211f      	movs	r1, #31
 8001a94:	fa01 f303 	lsl.w	r3, r1, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	0e9b      	lsrs	r3, r3, #26
 8001aa0:	f003 011f 	and.w	r1, r3, #31
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	f003 031f 	and.w	r3, r3, #31
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ab4:	bf00      	nop
 8001ab6:	371c      	adds	r7, #28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001acc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b087      	sub	sp, #28
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	3314      	adds	r3, #20
 8001af6:	461a      	mov	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	0e5b      	lsrs	r3, r3, #25
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	0d1b      	lsrs	r3, r3, #20
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	2107      	movs	r1, #7
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	0d1b      	lsrs	r3, r3, #20
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b30:	bf00      	nop
 8001b32:	371c      	adds	r7, #28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b54:	43db      	mvns	r3, r3
 8001b56:	401a      	ands	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0318 	and.w	r3, r3, #24
 8001b5e:	4908      	ldr	r1, [pc, #32]	@ (8001b80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b60:	40d9      	lsrs	r1, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	400b      	ands	r3, r1
 8001b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	0007ffff 	.word	0x0007ffff

08001b84 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 031f 	and.w	r3, r3, #31
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001bcc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6093      	str	r3, [r2, #8]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bf4:	d101      	bne.n	8001bfa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c1c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c44:	d101      	bne.n	8001c4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c6c:	f043 0201 	orr.w	r2, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <LL_ADC_IsEnabled+0x18>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <LL_ADC_IsEnabled+0x1a>
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cb6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cba:	f043 0204 	orr.w	r2, r3, #4
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d101      	bne.n	8001ce6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d101      	bne.n	8001d0c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d1c:	b590      	push	{r4, r7, lr}
 8001d1e:	b089      	sub	sp, #36	@ 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e130      	b.n	8001f98 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d109      	bne.n	8001d58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff f92d 	bl	8000fa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff3f 	bl	8001be0 <LL_ADC_IsDeepPowerDownEnabled>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff25 	bl	8001bbc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ff5a 	bl	8001c30 <LL_ADC_IsInternalRegulatorEnabled>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d115      	bne.n	8001dae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff ff3e 	bl	8001c08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d8c:	4b84      	ldr	r3, [pc, #528]	@ (8001fa0 <HAL_ADC_Init+0x284>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	099b      	lsrs	r3, r3, #6
 8001d92:	4a84      	ldr	r2, [pc, #528]	@ (8001fa4 <HAL_ADC_Init+0x288>)
 8001d94:	fba2 2303 	umull	r2, r3, r2, r3
 8001d98:	099b      	lsrs	r3, r3, #6
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001da0:	e002      	b.n	8001da8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3b01      	subs	r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f9      	bne.n	8001da2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff ff3c 	bl	8001c30 <LL_ADC_IsInternalRegulatorEnabled>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10d      	bne.n	8001dda <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc2:	f043 0210 	orr.w	r2, r3, #16
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dce:	f043 0201 	orr.w	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff75 	bl	8001cce <LL_ADC_REG_IsConversionOngoing>
 8001de4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f040 80c9 	bne.w	8001f86 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f040 80c5 	bne.w	8001f86 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e00:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e04:	f043 0202 	orr.w	r2, r3, #2
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff35 	bl	8001c80 <LL_ADC_IsEnabled>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d115      	bne.n	8001e48 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e1c:	4862      	ldr	r0, [pc, #392]	@ (8001fa8 <HAL_ADC_Init+0x28c>)
 8001e1e:	f7ff ff2f 	bl	8001c80 <LL_ADC_IsEnabled>
 8001e22:	4604      	mov	r4, r0
 8001e24:	4861      	ldr	r0, [pc, #388]	@ (8001fac <HAL_ADC_Init+0x290>)
 8001e26:	f7ff ff2b 	bl	8001c80 <LL_ADC_IsEnabled>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	431c      	orrs	r4, r3
 8001e2e:	4860      	ldr	r0, [pc, #384]	@ (8001fb0 <HAL_ADC_Init+0x294>)
 8001e30:	f7ff ff26 	bl	8001c80 <LL_ADC_IsEnabled>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4323      	orrs	r3, r4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d105      	bne.n	8001e48 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	4619      	mov	r1, r3
 8001e42:	485c      	ldr	r0, [pc, #368]	@ (8001fb4 <HAL_ADC_Init+0x298>)
 8001e44:	f7ff fd74 	bl	8001930 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	7e5b      	ldrb	r3, [r3, #25]
 8001e4c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e52:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e58:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e5e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e66:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d106      	bne.n	8001e84 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	045b      	lsls	r3, r3, #17
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e90:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e98:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	4b44      	ldr	r3, [pc, #272]	@ (8001fb8 <HAL_ADC_Init+0x29c>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	69b9      	ldr	r1, [r7, #24]
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff1b 	bl	8001cf4 <LL_ADC_INJ_IsConversionOngoing>
 8001ebe:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d13d      	bne.n	8001f42 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d13a      	bne.n	8001f42 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ed0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ed8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ee8:	f023 0302 	bic.w	r3, r3, #2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	69b9      	ldr	r1, [r7, #24]
 8001ef2:	430b      	orrs	r3, r1
 8001ef4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d118      	bne.n	8001f32 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f0a:	f023 0304 	bic.w	r3, r3, #4
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f16:	4311      	orrs	r1, r2
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f1c:	4311      	orrs	r1, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f22:	430a      	orrs	r2, r1
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	611a      	str	r2, [r3, #16]
 8001f30:	e007      	b.n	8001f42 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0201 	bic.w	r2, r2, #1
 8001f40:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d10c      	bne.n	8001f64 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f50:	f023 010f 	bic.w	r1, r3, #15
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	1e5a      	subs	r2, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f62:	e007      	b.n	8001f74 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 020f 	bic.w	r2, r2, #15
 8001f72:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f78:	f023 0303 	bic.w	r3, r3, #3
 8001f7c:	f043 0201 	orr.w	r2, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f84:	e007      	b.n	8001f96 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8a:	f043 0210 	orr.w	r2, r3, #16
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f96:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3724      	adds	r7, #36	@ 0x24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd90      	pop	{r4, r7, pc}
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	053e2d63 	.word	0x053e2d63
 8001fa8:	50040000 	.word	0x50040000
 8001fac:	50040100 	.word	0x50040100
 8001fb0:	50040200 	.word	0x50040200
 8001fb4:	50040300 	.word	0x50040300
 8001fb8:	fff0c007 	.word	0xfff0c007

08001fbc <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fc4:	4891      	ldr	r0, [pc, #580]	@ (800220c <HAL_ADC_Start_IT+0x250>)
 8001fc6:	f7ff fddd 	bl	8001b84 <LL_ADC_GetMultimode>
 8001fca:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fe7c 	bl	8001cce <LL_ADC_REG_IsConversionOngoing>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f040 8110 	bne.w	80021fe <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_Start_IT+0x30>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e10b      	b.n	8002204 <HAL_ADC_Start_IT+0x248>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 ff3d 	bl	8002e74 <ADC_Enable>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ffe:	7dfb      	ldrb	r3, [r7, #23]
 8002000:	2b00      	cmp	r3, #0
 8002002:	f040 80f7 	bne.w	80021f4 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800200e:	f023 0301 	bic.w	r3, r3, #1
 8002012:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a7c      	ldr	r2, [pc, #496]	@ (8002210 <HAL_ADC_Start_IT+0x254>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d002      	beq.n	800202a <HAL_ADC_Start_IT+0x6e>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	e000      	b.n	800202c <HAL_ADC_Start_IT+0x70>
 800202a:	4b7a      	ldr	r3, [pc, #488]	@ (8002214 <HAL_ADC_Start_IT+0x258>)
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	4293      	cmp	r3, r2
 8002032:	d002      	beq.n	800203a <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d105      	bne.n	8002046 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d006      	beq.n	8002060 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002056:	f023 0206 	bic.w	r2, r3, #6
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	659a      	str	r2, [r3, #88]	@ 0x58
 800205e:	e002      	b.n	8002066 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	221c      	movs	r2, #28
 800206c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 021c 	bic.w	r2, r2, #28
 8002084:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	2b08      	cmp	r3, #8
 800208c:	d108      	bne.n	80020a0 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0208 	orr.w	r2, r2, #8
 800209c:	605a      	str	r2, [r3, #4]
          break;
 800209e:	e008      	b.n	80020b2 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0204 	orr.w	r2, r2, #4
 80020ae:	605a      	str	r2, [r3, #4]
          break;
 80020b0:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d107      	bne.n	80020ca <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f042 0210 	orr.w	r2, r2, #16
 80020c8:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a50      	ldr	r2, [pc, #320]	@ (8002210 <HAL_ADC_Start_IT+0x254>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d002      	beq.n	80020da <HAL_ADC_Start_IT+0x11e>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	e000      	b.n	80020dc <HAL_ADC_Start_IT+0x120>
 80020da:	4b4e      	ldr	r3, [pc, #312]	@ (8002214 <HAL_ADC_Start_IT+0x258>)
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d008      	beq.n	80020f6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b05      	cmp	r3, #5
 80020ee:	d002      	beq.n	80020f6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	2b09      	cmp	r3, #9
 80020f4:	d13a      	bne.n	800216c <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d02d      	beq.n	8002160 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002108:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800210c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	2b08      	cmp	r3, #8
 800211a:	d110      	bne.n	800213e <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0220 	bic.w	r2, r2, #32
 800212a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800213a:	605a      	str	r2, [r3, #4]
              break;
 800213c:	e010      	b.n	8002160 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800214c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0220 	orr.w	r2, r2, #32
 800215c:	605a      	str	r2, [r3, #4]
              break;
 800215e:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fd9e 	bl	8001ca6 <LL_ADC_REG_StartConversion>
 800216a:	e04a      	b.n	8002202 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002170:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a24      	ldr	r2, [pc, #144]	@ (8002210 <HAL_ADC_Start_IT+0x254>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d002      	beq.n	8002188 <HAL_ADC_Start_IT+0x1cc>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	e000      	b.n	800218a <HAL_ADC_Start_IT+0x1ce>
 8002188:	4b22      	ldr	r3, [pc, #136]	@ (8002214 <HAL_ADC_Start_IT+0x258>)
 800218a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d034      	beq.n	8002202 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d110      	bne.n	80021d2 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0220 	bic.w	r2, r2, #32
 80021be:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021ce:	605a      	str	r2, [r3, #4]
              break;
 80021d0:	e017      	b.n	8002202 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021e0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 0220 	orr.w	r2, r2, #32
 80021f0:	605a      	str	r2, [r3, #4]
              break;
 80021f2:	e006      	b.n	8002202 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80021fc:	e001      	b.n	8002202 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021fe:	2302      	movs	r3, #2
 8002200:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002202:	7dfb      	ldrb	r3, [r7, #23]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	50040300 	.word	0x50040300
 8002210:	50040100 	.word	0x50040100
 8002214:	50040000 	.word	0x50040000

08002218 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	@ 0x28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002250:	4882      	ldr	r0, [pc, #520]	@ (800245c <HAL_ADC_IRQHandler+0x228>)
 8002252:	f7ff fc97 	bl	8001b84 <LL_ADC_GetMultimode>
 8002256:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d017      	beq.n	8002292 <HAL_ADC_IRQHandler+0x5e>
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d012      	beq.n	8002292 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	2b00      	cmp	r3, #0
 8002276:	d105      	bne.n	8002284 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 fec9 	bl	800301c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2202      	movs	r2, #2
 8002290:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d004      	beq.n	80022a6 <HAL_ADC_IRQHandler+0x72>
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10a      	bne.n	80022bc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 8083 	beq.w	80023b8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d07d      	beq.n	80023b8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c0:	f003 0310 	and.w	r3, r3, #16
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d105      	bne.n	80022d4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff fbb2 	bl	8001a42 <LL_ADC_REG_IsTriggerSourceSWStart>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d062      	beq.n	80023aa <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002460 <HAL_ADC_IRQHandler+0x22c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d002      	beq.n	80022f4 <HAL_ADC_IRQHandler+0xc0>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	e000      	b.n	80022f6 <HAL_ADC_IRQHandler+0xc2>
 80022f4:	4b5b      	ldr	r3, [pc, #364]	@ (8002464 <HAL_ADC_IRQHandler+0x230>)
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d008      	beq.n	8002310 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2b05      	cmp	r3, #5
 8002308:	d002      	beq.n	8002310 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2b09      	cmp	r3, #9
 800230e:	d104      	bne.n	800231a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	623b      	str	r3, [r7, #32]
 8002318:	e00c      	b.n	8002334 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a50      	ldr	r2, [pc, #320]	@ (8002460 <HAL_ADC_IRQHandler+0x22c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d002      	beq.n	800232a <HAL_ADC_IRQHandler+0xf6>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	e000      	b.n	800232c <HAL_ADC_IRQHandler+0xf8>
 800232a:	4b4e      	ldr	r3, [pc, #312]	@ (8002464 <HAL_ADC_IRQHandler+0x230>)
 800232c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d135      	bne.n	80023aa <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b08      	cmp	r3, #8
 800234a:	d12e      	bne.n	80023aa <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fcbc 	bl	8001cce <LL_ADC_REG_IsConversionOngoing>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d11a      	bne.n	8002392 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 020c 	bic.w	r2, r2, #12
 800236a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002370:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d112      	bne.n	80023aa <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002388:	f043 0201 	orr.w	r2, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002390:	e00b      	b.n	80023aa <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002396:	f043 0210 	orr.w	r2, r3, #16
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a2:	f043 0201 	orr.w	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fe f908 	bl	80005c0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	220c      	movs	r2, #12
 80023b6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0320 	and.w	r3, r3, #32
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d004      	beq.n	80023cc <HAL_ADC_IRQHandler+0x198>
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	f003 0320 	and.w	r3, r3, #32
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10b      	bne.n	80023e4 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 809f 	beq.w	8002516 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8099 	beq.w	8002516 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d105      	bne.n	80023fc <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fb5d 	bl	8001ac0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002406:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fb18 	bl	8001a42 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002412:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a11      	ldr	r2, [pc, #68]	@ (8002460 <HAL_ADC_IRQHandler+0x22c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d002      	beq.n	8002424 <HAL_ADC_IRQHandler+0x1f0>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	e000      	b.n	8002426 <HAL_ADC_IRQHandler+0x1f2>
 8002424:	4b0f      	ldr	r3, [pc, #60]	@ (8002464 <HAL_ADC_IRQHandler+0x230>)
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	4293      	cmp	r3, r2
 800242c:	d008      	beq.n	8002440 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2b06      	cmp	r3, #6
 8002438:	d002      	beq.n	8002440 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b07      	cmp	r3, #7
 800243e:	d104      	bne.n	800244a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	623b      	str	r3, [r7, #32]
 8002448:	e013      	b.n	8002472 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a04      	ldr	r2, [pc, #16]	@ (8002460 <HAL_ADC_IRQHandler+0x22c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d009      	beq.n	8002468 <HAL_ADC_IRQHandler+0x234>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	e007      	b.n	800246a <HAL_ADC_IRQHandler+0x236>
 800245a:	bf00      	nop
 800245c:	50040300 	.word	0x50040300
 8002460:	50040100 	.word	0x50040100
 8002464:	50040000 	.word	0x50040000
 8002468:	4b7d      	ldr	r3, [pc, #500]	@ (8002660 <HAL_ADC_IRQHandler+0x42c>)
 800246a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d047      	beq.n	8002508 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <HAL_ADC_IRQHandler+0x25e>
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d03f      	beq.n	8002508 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800248e:	2b00      	cmp	r3, #0
 8002490:	d13a      	bne.n	8002508 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800249c:	2b40      	cmp	r3, #64	@ 0x40
 800249e:	d133      	bne.n	8002508 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d12e      	bne.n	8002508 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fc20 	bl	8001cf4 <LL_ADC_INJ_IsConversionOngoing>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d11a      	bne.n	80024f0 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80024c8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d112      	bne.n	8002508 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e6:	f043 0201 	orr.w	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	655a      	str	r2, [r3, #84]	@ 0x54
 80024ee:	e00b      	b.n	8002508 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f4:	f043 0210 	orr.w	r2, r3, #16
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002500:	f043 0201 	orr.w	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 fd5f 	bl	8002fcc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2260      	movs	r2, #96	@ 0x60
 8002514:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251c:	2b00      	cmp	r3, #0
 800251e:	d011      	beq.n	8002544 <HAL_ADC_IRQHandler+0x310>
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00c      	beq.n	8002544 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f896 	bl	8002668 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2280      	movs	r2, #128	@ 0x80
 8002542:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254a:	2b00      	cmp	r3, #0
 800254c:	d012      	beq.n	8002574 <HAL_ADC_IRQHandler+0x340>
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00d      	beq.n	8002574 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fd45 	bl	8002ff4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002572:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800257a:	2b00      	cmp	r3, #0
 800257c:	d012      	beq.n	80025a4 <HAL_ADC_IRQHandler+0x370>
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00d      	beq.n	80025a4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800258c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 fd37 	bl	8003008 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d036      	beq.n	800261c <HAL_ADC_IRQHandler+0x3e8>
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d031      	beq.n	800261c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d102      	bne.n	80025c6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80025c0:	2301      	movs	r3, #1
 80025c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c4:	e014      	b.n	80025f0 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80025cc:	4825      	ldr	r0, [pc, #148]	@ (8002664 <HAL_ADC_IRQHandler+0x430>)
 80025ce:	f7ff fae7 	bl	8001ba0 <LL_ADC_GetMultiDMATransfer>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00b      	beq.n	80025f0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80025d8:	2301      	movs	r3, #1
 80025da:	627b      	str	r3, [r7, #36]	@ 0x24
 80025dc:	e008      	b.n	80025f0 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80025ec:	2301      	movs	r3, #1
 80025ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d10e      	bne.n	8002614 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025fa:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002606:	f043 0202 	orr.w	r2, r3, #2
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f834 	bl	800267c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2210      	movs	r2, #16
 800261a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002622:	2b00      	cmp	r3, #0
 8002624:	d018      	beq.n	8002658 <HAL_ADC_IRQHandler+0x424>
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002634:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002640:	f043 0208 	orr.w	r2, r3, #8
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002650:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fcc4 	bl	8002fe0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002658:	bf00      	nop
 800265a:	3728      	adds	r7, #40	@ 0x28
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	50040000 	.word	0x50040000
 8002664:	50040300 	.word	0x50040300

08002668 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b0b6      	sub	sp, #216	@ 0xd8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x22>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e3c9      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x7b6>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fb05 	bl	8001cce <LL_ADC_REG_IsConversionOngoing>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f040 83aa 	bne.w	8002e20 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b05      	cmp	r3, #5
 80026da:	d824      	bhi.n	8002726 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	3b02      	subs	r3, #2
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d81b      	bhi.n	800271e <HAL_ADC_ConfigChannel+0x8e>
 80026e6:	a201      	add	r2, pc, #4	@ (adr r2, 80026ec <HAL_ADC_ConfigChannel+0x5c>)
 80026e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ec:	080026fd 	.word	0x080026fd
 80026f0:	08002705 	.word	0x08002705
 80026f4:	0800270d 	.word	0x0800270d
 80026f8:	08002715 	.word	0x08002715
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80026fc:	230c      	movs	r3, #12
 80026fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002702:	e010      	b.n	8002726 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002704:	2312      	movs	r3, #18
 8002706:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800270a:	e00c      	b.n	8002726 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800270c:	2318      	movs	r3, #24
 800270e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002712:	e008      	b.n	8002726 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002714:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002718:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800271c:	e003      	b.n	8002726 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800271e:	2306      	movs	r3, #6
 8002720:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002724:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002734:	f7ff f998 	bl	8001a68 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fac6 	bl	8001cce <LL_ADC_REG_IsConversionOngoing>
 8002742:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fad2 	bl	8001cf4 <LL_ADC_INJ_IsConversionOngoing>
 8002750:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002754:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002758:	2b00      	cmp	r3, #0
 800275a:	f040 81a4 	bne.w	8002aa6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800275e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002762:	2b00      	cmp	r3, #0
 8002764:	f040 819f 	bne.w	8002aa6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	6819      	ldr	r1, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	461a      	mov	r2, r3
 8002776:	f7ff f9b6 	bl	8001ae6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	08db      	lsrs	r3, r3, #3
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	2b04      	cmp	r3, #4
 800279a:	d00a      	beq.n	80027b2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6919      	ldr	r1, [r3, #16]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80027ac:	f7ff f8f4 	bl	8001998 <LL_ADC_SetOffset>
 80027b0:	e179      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff f911 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80027be:	4603      	mov	r3, r0
 80027c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10a      	bne.n	80027de <HAL_ADC_ConfigChannel+0x14e>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2100      	movs	r1, #0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff f906 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80027d4:	4603      	mov	r3, r0
 80027d6:	0e9b      	lsrs	r3, r3, #26
 80027d8:	f003 021f 	and.w	r2, r3, #31
 80027dc:	e01e      	b.n	800281c <HAL_ADC_ConfigChannel+0x18c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2100      	movs	r1, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff f8fb 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027f4:	fa93 f3a3 	rbit	r3, r3
 80027f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002800:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002804:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800280c:	2320      	movs	r3, #32
 800280e:	e004      	b.n	800281a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002810:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002814:	fab3 f383 	clz	r3, r3
 8002818:	b2db      	uxtb	r3, r3
 800281a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1a4>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	0e9b      	lsrs	r3, r3, #26
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	e018      	b.n	8002866 <HAL_ADC_ConfigChannel+0x1d6>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002848:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800284c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002850:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002858:	2320      	movs	r3, #32
 800285a:	e004      	b.n	8002866 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800285c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002860:	fab3 f383 	clz	r3, r3
 8002864:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002866:	429a      	cmp	r2, r3
 8002868:	d106      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2200      	movs	r2, #0
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff f8ca 	bl	8001a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2101      	movs	r1, #1
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff f8ae 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002884:	4603      	mov	r3, r0
 8002886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10a      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x214>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2101      	movs	r1, #1
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff f8a3 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 800289a:	4603      	mov	r3, r0
 800289c:	0e9b      	lsrs	r3, r3, #26
 800289e:	f003 021f 	and.w	r2, r3, #31
 80028a2:	e01e      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x252>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2101      	movs	r1, #1
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff f898 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028ba:	fa93 f3a3 	rbit	r3, r3
 80028be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80028c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80028ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80028d2:	2320      	movs	r3, #32
 80028d4:	e004      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80028d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d105      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x26a>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	0e9b      	lsrs	r3, r3, #26
 80028f4:	f003 031f 	and.w	r3, r3, #31
 80028f8:	e018      	b.n	800292c <HAL_ADC_ConfigChannel+0x29c>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800290e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002912:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002916:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800291e:	2320      	movs	r3, #32
 8002920:	e004      	b.n	800292c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002922:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002926:	fab3 f383 	clz	r3, r3
 800292a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800292c:	429a      	cmp	r2, r3
 800292e:	d106      	bne.n	800293e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2200      	movs	r2, #0
 8002936:	2101      	movs	r1, #1
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff f867 	bl	8001a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2102      	movs	r1, #2
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff f84b 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 800294a:	4603      	mov	r3, r0
 800294c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <HAL_ADC_ConfigChannel+0x2da>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2102      	movs	r1, #2
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff f840 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002960:	4603      	mov	r3, r0
 8002962:	0e9b      	lsrs	r3, r3, #26
 8002964:	f003 021f 	and.w	r2, r3, #31
 8002968:	e01e      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x318>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2102      	movs	r1, #2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff f835 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002976:	4603      	mov	r3, r0
 8002978:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002988:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800298c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002990:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002998:	2320      	movs	r3, #32
 800299a:	e004      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800299c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029a0:	fab3 f383 	clz	r3, r3
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d105      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x330>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	0e9b      	lsrs	r3, r3, #26
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	e014      	b.n	80029ea <HAL_ADC_ConfigChannel+0x35a>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029c8:	fa93 f3a3 	rbit	r3, r3
 80029cc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80029ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80029d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80029dc:	2320      	movs	r3, #32
 80029de:	e004      	b.n	80029ea <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80029e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d106      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2200      	movs	r2, #0
 80029f4:	2102      	movs	r1, #2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff f808 	bl	8001a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2103      	movs	r1, #3
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe ffec 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10a      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x398>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2103      	movs	r1, #3
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fe ffe1 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	0e9b      	lsrs	r3, r3, #26
 8002a22:	f003 021f 	and.w	r2, r3, #31
 8002a26:	e017      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x3c8>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2103      	movs	r1, #3
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe ffd6 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002a34:	4603      	mov	r3, r0
 8002a36:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002a40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a42:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002a44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002a4a:	2320      	movs	r3, #32
 8002a4c:	e003      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002a4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a50:	fab3 f383 	clz	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d105      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x3e0>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0e9b      	lsrs	r3, r3, #26
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	e011      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x404>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002a7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a80:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002a82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002a88:	2320      	movs	r3, #32
 8002a8a:	e003      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002a8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d106      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2103      	movs	r1, #3
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe ffb3 	bl	8001a0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff f8e8 	bl	8001c80 <LL_ADC_IsEnabled>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f040 8140 	bne.w	8002d38 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	6819      	ldr	r1, [r3, #0]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	f7ff f839 	bl	8001b3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	4a8f      	ldr	r2, [pc, #572]	@ (8002d0c <HAL_ADC_ConfigChannel+0x67c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	f040 8131 	bne.w	8002d38 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10b      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x46e>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	0e9b      	lsrs	r3, r3, #26
 8002aec:	3301      	adds	r3, #1
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	2b09      	cmp	r3, #9
 8002af4:	bf94      	ite	ls
 8002af6:	2301      	movls	r3, #1
 8002af8:	2300      	movhi	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	e019      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x4a2>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002b10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002b16:	2320      	movs	r3, #32
 8002b18:	e003      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002b1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b1c:	fab3 f383 	clz	r3, r3
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	3301      	adds	r3, #1
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	2b09      	cmp	r3, #9
 8002b2a:	bf94      	ite	ls
 8002b2c:	2301      	movls	r3, #1
 8002b2e:	2300      	movhi	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d079      	beq.n	8002c2a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d107      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x4c2>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	0e9b      	lsrs	r3, r3, #26
 8002b48:	3301      	adds	r3, #1
 8002b4a:	069b      	lsls	r3, r3, #26
 8002b4c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b50:	e015      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x4ee>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b62:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002b64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002b6a:	2320      	movs	r3, #32
 8002b6c:	e003      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	3301      	adds	r3, #1
 8002b78:	069b      	lsls	r3, r3, #26
 8002b7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x50e>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	0e9b      	lsrs	r3, r3, #26
 8002b90:	3301      	adds	r3, #1
 8002b92:	f003 031f 	and.w	r3, r3, #31
 8002b96:	2101      	movs	r1, #1
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	e017      	b.n	8002bce <HAL_ADC_ConfigChannel+0x53e>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bae:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002bb6:	2320      	movs	r3, #32
 8002bb8:	e003      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002bba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bbc:	fab3 f383 	clz	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	2101      	movs	r1, #1
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	ea42 0103 	orr.w	r1, r2, r3
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10a      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x564>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	0e9b      	lsrs	r3, r3, #26
 8002be4:	3301      	adds	r3, #1
 8002be6:	f003 021f 	and.w	r2, r3, #31
 8002bea:	4613      	mov	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	051b      	lsls	r3, r3, #20
 8002bf2:	e018      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x596>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bfc:	fa93 f3a3 	rbit	r3, r3
 8002c00:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c04:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002c0c:	2320      	movs	r3, #32
 8002c0e:	e003      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f003 021f 	and.w	r2, r3, #31
 8002c1e:	4613      	mov	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c26:	430b      	orrs	r3, r1
 8002c28:	e081      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d107      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x5b6>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	0e9b      	lsrs	r3, r3, #26
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	069b      	lsls	r3, r3, #26
 8002c40:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c44:	e015      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x5e2>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002c5e:	2320      	movs	r3, #32
 8002c60:	e003      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	069b      	lsls	r3, r3, #26
 8002c6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x602>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	0e9b      	lsrs	r3, r3, #26
 8002c84:	3301      	adds	r3, #1
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c90:	e017      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x632>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	61bb      	str	r3, [r7, #24]
  return result;
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002caa:	2320      	movs	r3, #32
 8002cac:	e003      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	ea42 0103 	orr.w	r1, r2, r3
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10d      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x65e>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	0e9b      	lsrs	r3, r3, #26
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f003 021f 	and.w	r2, r3, #31
 8002cde:	4613      	mov	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3b1e      	subs	r3, #30
 8002ce6:	051b      	lsls	r3, r3, #20
 8002ce8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cec:	e01e      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x69c>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	60fb      	str	r3, [r7, #12]
  return result;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d104      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002d06:	2320      	movs	r3, #32
 8002d08:	e006      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x688>
 8002d0a:	bf00      	nop
 8002d0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f003 021f 	and.w	r2, r3, #31
 8002d1e:	4613      	mov	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	4413      	add	r3, r2
 8002d24:	3b1e      	subs	r3, #30
 8002d26:	051b      	lsls	r3, r3, #20
 8002d28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d2c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d32:	4619      	mov	r1, r3
 8002d34:	f7fe fed7 	bl	8001ae6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4b44      	ldr	r3, [pc, #272]	@ (8002e50 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d07a      	beq.n	8002e3a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d44:	4843      	ldr	r0, [pc, #268]	@ (8002e54 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d46:	f7fe fe19 	bl	800197c <LL_ADC_GetCommonPathInternalCh>
 8002d4a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a41      	ldr	r2, [pc, #260]	@ (8002e58 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d12c      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d126      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a3c      	ldr	r2, [pc, #240]	@ (8002e5c <HAL_ADC_ConfigChannel+0x7cc>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d004      	beq.n	8002d78 <HAL_ADC_ConfigChannel+0x6e8>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a3b      	ldr	r2, [pc, #236]	@ (8002e60 <HAL_ADC_ConfigChannel+0x7d0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d15d      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d80:	4619      	mov	r1, r3
 8002d82:	4834      	ldr	r0, [pc, #208]	@ (8002e54 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d84:	f7fe fde7 	bl	8001956 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d88:	4b36      	ldr	r3, [pc, #216]	@ (8002e64 <HAL_ADC_ConfigChannel+0x7d4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	099b      	lsrs	r3, r3, #6
 8002d8e:	4a36      	ldr	r2, [pc, #216]	@ (8002e68 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	099b      	lsrs	r3, r3, #6
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	4613      	mov	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002da2:	e002      	b.n	8002daa <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f9      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002db0:	e040      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a2d      	ldr	r2, [pc, #180]	@ (8002e6c <HAL_ADC_ConfigChannel+0x7dc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d118      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002dc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d112      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a23      	ldr	r2, [pc, #140]	@ (8002e5c <HAL_ADC_ConfigChannel+0x7cc>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d004      	beq.n	8002ddc <HAL_ADC_ConfigChannel+0x74c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a22      	ldr	r2, [pc, #136]	@ (8002e60 <HAL_ADC_ConfigChannel+0x7d0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d12d      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ddc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002de0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002de4:	4619      	mov	r1, r3
 8002de6:	481b      	ldr	r0, [pc, #108]	@ (8002e54 <HAL_ADC_ConfigChannel+0x7c4>)
 8002de8:	f7fe fdb5 	bl	8001956 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dec:	e024      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e70 <HAL_ADC_ConfigChannel+0x7e0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d120      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002df8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002dfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d11a      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a14      	ldr	r2, [pc, #80]	@ (8002e5c <HAL_ADC_ConfigChannel+0x7cc>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d115      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e16:	4619      	mov	r1, r3
 8002e18:	480e      	ldr	r0, [pc, #56]	@ (8002e54 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e1a:	f7fe fd9c 	bl	8001956 <LL_ADC_SetCommonPathInternalCh>
 8002e1e:	e00c      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e24:	f043 0220 	orr.w	r2, r3, #32
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002e32:	e002      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e34:	bf00      	nop
 8002e36:	e000      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e42:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	37d8      	adds	r7, #216	@ 0xd8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	80080000 	.word	0x80080000
 8002e54:	50040300 	.word	0x50040300
 8002e58:	c7520000 	.word	0xc7520000
 8002e5c:	50040000 	.word	0x50040000
 8002e60:	50040200 	.word	0x50040200
 8002e64:	20000000 	.word	0x20000000
 8002e68:	053e2d63 	.word	0x053e2d63
 8002e6c:	cb840000 	.word	0xcb840000
 8002e70:	80000001 	.word	0x80000001

08002e74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe fefb 	bl	8001c80 <LL_ADC_IsEnabled>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d169      	bne.n	8002f64 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	4b36      	ldr	r3, [pc, #216]	@ (8002f70 <ADC_Enable+0xfc>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00d      	beq.n	8002eba <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea2:	f043 0210 	orr.w	r2, r3, #16
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eae:	f043 0201 	orr.w	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e055      	b.n	8002f66 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe feca 	bl	8001c58 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ec4:	482b      	ldr	r0, [pc, #172]	@ (8002f74 <ADC_Enable+0x100>)
 8002ec6:	f7fe fd59 	bl	800197c <LL_ADC_GetCommonPathInternalCh>
 8002eca:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ecc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ed4:	4b28      	ldr	r3, [pc, #160]	@ (8002f78 <ADC_Enable+0x104>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	099b      	lsrs	r3, r3, #6
 8002eda:	4a28      	ldr	r2, [pc, #160]	@ (8002f7c <ADC_Enable+0x108>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002eee:	e002      	b.n	8002ef6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1f9      	bne.n	8002ef0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002efc:	f7fe fce8 	bl	80018d0 <HAL_GetTick>
 8002f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f02:	e028      	b.n	8002f56 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe feb9 	bl	8001c80 <LL_ADC_IsEnabled>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d104      	bne.n	8002f1e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fe fe9d 	bl	8001c58 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f1e:	f7fe fcd7 	bl	80018d0 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d914      	bls.n	8002f56 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d00d      	beq.n	8002f56 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3e:	f043 0210 	orr.w	r2, r3, #16
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4a:	f043 0201 	orr.w	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e007      	b.n	8002f66 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d1cf      	bne.n	8002f04 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	8000003f 	.word	0x8000003f
 8002f74:	50040300 	.word	0x50040300
 8002f78:	20000000 	.word	0x20000000
 8002f7c:	053e2d63 	.word	0x053e2d63

08002f80 <LL_ADC_IsEnabled>:
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <LL_ADC_IsEnabled+0x18>
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <LL_ADC_IsEnabled+0x1a>
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d101      	bne.n	8002fbe <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b09f      	sub	sp, #124	@ 0x7c
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800304a:	2302      	movs	r3, #2
 800304c:	e093      	b.n	8003176 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003056:	2300      	movs	r3, #0
 8003058:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800305a:	2300      	movs	r3, #0
 800305c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a47      	ldr	r2, [pc, #284]	@ (8003180 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d102      	bne.n	800306e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003068:	4b46      	ldr	r3, [pc, #280]	@ (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	e001      	b.n	8003072 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800306e:	2300      	movs	r3, #0
 8003070:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10b      	bne.n	8003090 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307c:	f043 0220 	orr.w	r2, r3, #32
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e072      	b.n	8003176 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff ff87 	bl	8002fa6 <LL_ADC_REG_IsConversionOngoing>
 8003098:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff ff81 	bl	8002fa6 <LL_ADC_REG_IsConversionOngoing>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d154      	bne.n	8003154 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80030aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d151      	bne.n	8003154 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030b0:	4b35      	ldr	r3, [pc, #212]	@ (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80030b2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d02c      	beq.n	8003116 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80030bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030ce:	035b      	lsls	r3, r3, #13
 80030d0:	430b      	orrs	r3, r1
 80030d2:	431a      	orrs	r2, r3
 80030d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030d8:	4829      	ldr	r0, [pc, #164]	@ (8003180 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030da:	f7ff ff51 	bl	8002f80 <LL_ADC_IsEnabled>
 80030de:	4604      	mov	r4, r0
 80030e0:	4828      	ldr	r0, [pc, #160]	@ (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030e2:	f7ff ff4d 	bl	8002f80 <LL_ADC_IsEnabled>
 80030e6:	4603      	mov	r3, r0
 80030e8:	431c      	orrs	r4, r3
 80030ea:	4828      	ldr	r0, [pc, #160]	@ (800318c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80030ec:	f7ff ff48 	bl	8002f80 <LL_ADC_IsEnabled>
 80030f0:	4603      	mov	r3, r0
 80030f2:	4323      	orrs	r3, r4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d137      	bne.n	8003168 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003100:	f023 030f 	bic.w	r3, r3, #15
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	6811      	ldr	r1, [r2, #0]
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	6892      	ldr	r2, [r2, #8]
 800310c:	430a      	orrs	r2, r1
 800310e:	431a      	orrs	r2, r3
 8003110:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003112:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003114:	e028      	b.n	8003168 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003116:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800311e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003120:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003122:	4817      	ldr	r0, [pc, #92]	@ (8003180 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003124:	f7ff ff2c 	bl	8002f80 <LL_ADC_IsEnabled>
 8003128:	4604      	mov	r4, r0
 800312a:	4816      	ldr	r0, [pc, #88]	@ (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800312c:	f7ff ff28 	bl	8002f80 <LL_ADC_IsEnabled>
 8003130:	4603      	mov	r3, r0
 8003132:	431c      	orrs	r4, r3
 8003134:	4815      	ldr	r0, [pc, #84]	@ (800318c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003136:	f7ff ff23 	bl	8002f80 <LL_ADC_IsEnabled>
 800313a:	4603      	mov	r3, r0
 800313c:	4323      	orrs	r3, r4
 800313e:	2b00      	cmp	r3, #0
 8003140:	d112      	bne.n	8003168 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800314a:	f023 030f 	bic.w	r3, r3, #15
 800314e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003150:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003152:	e009      	b.n	8003168 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003158:	f043 0220 	orr.w	r2, r3, #32
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003166:	e000      	b.n	800316a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003168:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003172:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003176:	4618      	mov	r0, r3
 8003178:	377c      	adds	r7, #124	@ 0x7c
 800317a:	46bd      	mov	sp, r7
 800317c:	bd90      	pop	{r4, r7, pc}
 800317e:	bf00      	nop
 8003180:	50040000 	.word	0x50040000
 8003184:	50040100 	.word	0x50040100
 8003188:	50040300 	.word	0x50040300
 800318c:	50040200 	.word	0x50040200

08003190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031a0:	4b0c      	ldr	r3, [pc, #48]	@ (80031d4 <__NVIC_SetPriorityGrouping+0x44>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031ac:	4013      	ands	r3, r2
 80031ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031c2:	4a04      	ldr	r2, [pc, #16]	@ (80031d4 <__NVIC_SetPriorityGrouping+0x44>)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	60d3      	str	r3, [r2, #12]
}
 80031c8:	bf00      	nop
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	e000ed00 	.word	0xe000ed00

080031d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031dc:	4b04      	ldr	r3, [pc, #16]	@ (80031f0 <__NVIC_GetPriorityGrouping+0x18>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	0a1b      	lsrs	r3, r3, #8
 80031e2:	f003 0307 	and.w	r3, r3, #7
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	2b00      	cmp	r3, #0
 8003204:	db0b      	blt.n	800321e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	f003 021f 	and.w	r2, r3, #31
 800320c:	4907      	ldr	r1, [pc, #28]	@ (800322c <__NVIC_EnableIRQ+0x38>)
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	2001      	movs	r0, #1
 8003216:	fa00 f202 	lsl.w	r2, r0, r2
 800321a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	e000e100 	.word	0xe000e100

08003230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	6039      	str	r1, [r7, #0]
 800323a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800323c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003240:	2b00      	cmp	r3, #0
 8003242:	db0a      	blt.n	800325a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	b2da      	uxtb	r2, r3
 8003248:	490c      	ldr	r1, [pc, #48]	@ (800327c <__NVIC_SetPriority+0x4c>)
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	0112      	lsls	r2, r2, #4
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	440b      	add	r3, r1
 8003254:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003258:	e00a      	b.n	8003270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	b2da      	uxtb	r2, r3
 800325e:	4908      	ldr	r1, [pc, #32]	@ (8003280 <__NVIC_SetPriority+0x50>)
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	3b04      	subs	r3, #4
 8003268:	0112      	lsls	r2, r2, #4
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	440b      	add	r3, r1
 800326e:	761a      	strb	r2, [r3, #24]
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000e100 	.word	0xe000e100
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003284:	b480      	push	{r7}
 8003286:	b089      	sub	sp, #36	@ 0x24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f1c3 0307 	rsb	r3, r3, #7
 800329e:	2b04      	cmp	r3, #4
 80032a0:	bf28      	it	cs
 80032a2:	2304      	movcs	r3, #4
 80032a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	3304      	adds	r3, #4
 80032aa:	2b06      	cmp	r3, #6
 80032ac:	d902      	bls.n	80032b4 <NVIC_EncodePriority+0x30>
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	3b03      	subs	r3, #3
 80032b2:	e000      	b.n	80032b6 <NVIC_EncodePriority+0x32>
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b8:	f04f 32ff 	mov.w	r2, #4294967295
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43da      	mvns	r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	401a      	ands	r2, r3
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032cc:	f04f 31ff 	mov.w	r1, #4294967295
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	fa01 f303 	lsl.w	r3, r1, r3
 80032d6:	43d9      	mvns	r1, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032dc:	4313      	orrs	r3, r2
         );
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3724      	adds	r7, #36	@ 0x24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032fc:	d301      	bcc.n	8003302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032fe:	2301      	movs	r3, #1
 8003300:	e00f      	b.n	8003322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003302:	4a0a      	ldr	r2, [pc, #40]	@ (800332c <SysTick_Config+0x40>)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3b01      	subs	r3, #1
 8003308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800330a:	210f      	movs	r1, #15
 800330c:	f04f 30ff 	mov.w	r0, #4294967295
 8003310:	f7ff ff8e 	bl	8003230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003314:	4b05      	ldr	r3, [pc, #20]	@ (800332c <SysTick_Config+0x40>)
 8003316:	2200      	movs	r2, #0
 8003318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800331a:	4b04      	ldr	r3, [pc, #16]	@ (800332c <SysTick_Config+0x40>)
 800331c:	2207      	movs	r2, #7
 800331e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	e000e010 	.word	0xe000e010

08003330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ff29 	bl	8003190 <__NVIC_SetPriorityGrouping>
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b086      	sub	sp, #24
 800334a:	af00      	add	r7, sp, #0
 800334c:	4603      	mov	r3, r0
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003358:	f7ff ff3e 	bl	80031d8 <__NVIC_GetPriorityGrouping>
 800335c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	6978      	ldr	r0, [r7, #20]
 8003364:	f7ff ff8e 	bl	8003284 <NVIC_EncodePriority>
 8003368:	4602      	mov	r2, r0
 800336a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336e:	4611      	mov	r1, r2
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff ff5d 	bl	8003230 <__NVIC_SetPriority>
}
 8003376:	bf00      	nop
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	4603      	mov	r3, r0
 8003386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ff31 	bl	80031f4 <__NVIC_EnableIRQ>
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff ffa2 	bl	80032ec <SysTick_Config>
 80033a8:	4603      	mov	r3, r0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e0ac      	b.n	8003520 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 f8b2 	bl	8003534 <DFSDM_GetChannelFromInstance>
 80033d0:	4603      	mov	r3, r0
 80033d2:	4a55      	ldr	r2, [pc, #340]	@ (8003528 <HAL_DFSDM_ChannelInit+0x174>)
 80033d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e09f      	b.n	8003520 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7fd fe59 	bl	8001098 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80033e6:	4b51      	ldr	r3, [pc, #324]	@ (800352c <HAL_DFSDM_ChannelInit+0x178>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3301      	adds	r3, #1
 80033ec:	4a4f      	ldr	r2, [pc, #316]	@ (800352c <HAL_DFSDM_ChannelInit+0x178>)
 80033ee:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80033f0:	4b4e      	ldr	r3, [pc, #312]	@ (800352c <HAL_DFSDM_ChannelInit+0x178>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d125      	bne.n	8003444 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80033f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003530 <HAL_DFSDM_ChannelInit+0x17c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a4c      	ldr	r2, [pc, #304]	@ (8003530 <HAL_DFSDM_ChannelInit+0x17c>)
 80033fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003402:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003404:	4b4a      	ldr	r3, [pc, #296]	@ (8003530 <HAL_DFSDM_ChannelInit+0x17c>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	4948      	ldr	r1, [pc, #288]	@ (8003530 <HAL_DFSDM_ChannelInit+0x17c>)
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003412:	4b47      	ldr	r3, [pc, #284]	@ (8003530 <HAL_DFSDM_ChannelInit+0x17c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a46      	ldr	r2, [pc, #280]	@ (8003530 <HAL_DFSDM_ChannelInit+0x17c>)
 8003418:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800341c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	791b      	ldrb	r3, [r3, #4]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d108      	bne.n	8003438 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003426:	4b42      	ldr	r3, [pc, #264]	@ (8003530 <HAL_DFSDM_ChannelInit+0x17c>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	3b01      	subs	r3, #1
 8003430:	041b      	lsls	r3, r3, #16
 8003432:	493f      	ldr	r1, [pc, #252]	@ (8003530 <HAL_DFSDM_ChannelInit+0x17c>)
 8003434:	4313      	orrs	r3, r2
 8003436:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003438:	4b3d      	ldr	r3, [pc, #244]	@ (8003530 <HAL_DFSDM_ChannelInit+0x17c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a3c      	ldr	r2, [pc, #240]	@ (8003530 <HAL_DFSDM_ChannelInit+0x17c>)
 800343e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003442:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003452:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6819      	ldr	r1, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003462:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003468:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 020f 	bic.w	r2, r2, #15
 8003480:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6819      	ldr	r1, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80034a8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6899      	ldr	r1, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b8:	3b01      	subs	r3, #1
 80034ba:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f002 0207 	and.w	r2, r2, #7
 80034d4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6859      	ldr	r1, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003500:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f000 f810 	bl	8003534 <DFSDM_GetChannelFromInstance>
 8003514:	4602      	mov	r2, r0
 8003516:	4904      	ldr	r1, [pc, #16]	@ (8003528 <HAL_DFSDM_ChannelInit+0x174>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20000878 	.word	0x20000878
 800352c:	20000874 	.word	0x20000874
 8003530:	40016000 	.word	0x40016000

08003534 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a1c      	ldr	r2, [pc, #112]	@ (80035b0 <DFSDM_GetChannelFromInstance+0x7c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d102      	bne.n	800354a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	e02b      	b.n	80035a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a19      	ldr	r2, [pc, #100]	@ (80035b4 <DFSDM_GetChannelFromInstance+0x80>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d102      	bne.n	8003558 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003552:	2301      	movs	r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	e024      	b.n	80035a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a17      	ldr	r2, [pc, #92]	@ (80035b8 <DFSDM_GetChannelFromInstance+0x84>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d102      	bne.n	8003566 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003560:	2302      	movs	r3, #2
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	e01d      	b.n	80035a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a14      	ldr	r2, [pc, #80]	@ (80035bc <DFSDM_GetChannelFromInstance+0x88>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d102      	bne.n	8003574 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800356e:	2304      	movs	r3, #4
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	e016      	b.n	80035a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a12      	ldr	r2, [pc, #72]	@ (80035c0 <DFSDM_GetChannelFromInstance+0x8c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d102      	bne.n	8003582 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800357c:	2305      	movs	r3, #5
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	e00f      	b.n	80035a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a0f      	ldr	r2, [pc, #60]	@ (80035c4 <DFSDM_GetChannelFromInstance+0x90>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d102      	bne.n	8003590 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800358a:	2306      	movs	r3, #6
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	e008      	b.n	80035a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a0d      	ldr	r2, [pc, #52]	@ (80035c8 <DFSDM_GetChannelFromInstance+0x94>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d102      	bne.n	800359e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003598:	2307      	movs	r3, #7
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	e001      	b.n	80035a2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800359e:	2303      	movs	r3, #3
 80035a0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80035a2:	68fb      	ldr	r3, [r7, #12]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	40016000 	.word	0x40016000
 80035b4:	40016020 	.word	0x40016020
 80035b8:	40016040 	.word	0x40016040
 80035bc:	40016080 	.word	0x40016080
 80035c0:	400160a0 	.word	0x400160a0
 80035c4:	400160c0 	.word	0x400160c0
 80035c8:	400160e0 	.word	0x400160e0

080035cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035da:	e17f      	b.n	80038dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	2101      	movs	r1, #1
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	fa01 f303 	lsl.w	r3, r1, r3
 80035e8:	4013      	ands	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8171 	beq.w	80038d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d005      	beq.n	800360c <HAL_GPIO_Init+0x40>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d130      	bne.n	800366e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	2203      	movs	r2, #3
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4013      	ands	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003642:	2201      	movs	r2, #1
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4013      	ands	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	f003 0201 	and.w	r2, r3, #1
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	2b03      	cmp	r3, #3
 8003678:	d118      	bne.n	80036ac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003680:	2201      	movs	r2, #1
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	08db      	lsrs	r3, r3, #3
 8003696:	f003 0201 	and.w	r2, r3, #1
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d017      	beq.n	80036e8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	2203      	movs	r2, #3
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4013      	ands	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d123      	bne.n	800373c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	08da      	lsrs	r2, r3, #3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3208      	adds	r2, #8
 80036fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003700:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	220f      	movs	r2, #15
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4013      	ands	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	08da      	lsrs	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3208      	adds	r2, #8
 8003736:	6939      	ldr	r1, [r7, #16]
 8003738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	2203      	movs	r2, #3
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4013      	ands	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 0203 	and.w	r2, r3, #3
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80ac 	beq.w	80038d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800377e:	4b5f      	ldr	r3, [pc, #380]	@ (80038fc <HAL_GPIO_Init+0x330>)
 8003780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003782:	4a5e      	ldr	r2, [pc, #376]	@ (80038fc <HAL_GPIO_Init+0x330>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	6613      	str	r3, [r2, #96]	@ 0x60
 800378a:	4b5c      	ldr	r3, [pc, #368]	@ (80038fc <HAL_GPIO_Init+0x330>)
 800378c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003796:	4a5a      	ldr	r2, [pc, #360]	@ (8003900 <HAL_GPIO_Init+0x334>)
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	089b      	lsrs	r3, r3, #2
 800379c:	3302      	adds	r3, #2
 800379e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	220f      	movs	r2, #15
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4013      	ands	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80037c0:	d025      	beq.n	800380e <HAL_GPIO_Init+0x242>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a4f      	ldr	r2, [pc, #316]	@ (8003904 <HAL_GPIO_Init+0x338>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d01f      	beq.n	800380a <HAL_GPIO_Init+0x23e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a4e      	ldr	r2, [pc, #312]	@ (8003908 <HAL_GPIO_Init+0x33c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d019      	beq.n	8003806 <HAL_GPIO_Init+0x23a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a4d      	ldr	r2, [pc, #308]	@ (800390c <HAL_GPIO_Init+0x340>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d013      	beq.n	8003802 <HAL_GPIO_Init+0x236>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a4c      	ldr	r2, [pc, #304]	@ (8003910 <HAL_GPIO_Init+0x344>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00d      	beq.n	80037fe <HAL_GPIO_Init+0x232>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a4b      	ldr	r2, [pc, #300]	@ (8003914 <HAL_GPIO_Init+0x348>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d007      	beq.n	80037fa <HAL_GPIO_Init+0x22e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a4a      	ldr	r2, [pc, #296]	@ (8003918 <HAL_GPIO_Init+0x34c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d101      	bne.n	80037f6 <HAL_GPIO_Init+0x22a>
 80037f2:	2306      	movs	r3, #6
 80037f4:	e00c      	b.n	8003810 <HAL_GPIO_Init+0x244>
 80037f6:	2307      	movs	r3, #7
 80037f8:	e00a      	b.n	8003810 <HAL_GPIO_Init+0x244>
 80037fa:	2305      	movs	r3, #5
 80037fc:	e008      	b.n	8003810 <HAL_GPIO_Init+0x244>
 80037fe:	2304      	movs	r3, #4
 8003800:	e006      	b.n	8003810 <HAL_GPIO_Init+0x244>
 8003802:	2303      	movs	r3, #3
 8003804:	e004      	b.n	8003810 <HAL_GPIO_Init+0x244>
 8003806:	2302      	movs	r3, #2
 8003808:	e002      	b.n	8003810 <HAL_GPIO_Init+0x244>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <HAL_GPIO_Init+0x244>
 800380e:	2300      	movs	r3, #0
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	f002 0203 	and.w	r2, r2, #3
 8003816:	0092      	lsls	r2, r2, #2
 8003818:	4093      	lsls	r3, r2
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003820:	4937      	ldr	r1, [pc, #220]	@ (8003900 <HAL_GPIO_Init+0x334>)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	089b      	lsrs	r3, r3, #2
 8003826:	3302      	adds	r3, #2
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800382e:	4b3b      	ldr	r3, [pc, #236]	@ (800391c <HAL_GPIO_Init+0x350>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	43db      	mvns	r3, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003852:	4a32      	ldr	r2, [pc, #200]	@ (800391c <HAL_GPIO_Init+0x350>)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003858:	4b30      	ldr	r3, [pc, #192]	@ (800391c <HAL_GPIO_Init+0x350>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	43db      	mvns	r3, r3
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4013      	ands	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800387c:	4a27      	ldr	r2, [pc, #156]	@ (800391c <HAL_GPIO_Init+0x350>)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003882:	4b26      	ldr	r3, [pc, #152]	@ (800391c <HAL_GPIO_Init+0x350>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	43db      	mvns	r3, r3
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4013      	ands	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038a6:	4a1d      	ldr	r2, [pc, #116]	@ (800391c <HAL_GPIO_Init+0x350>)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038ac:	4b1b      	ldr	r3, [pc, #108]	@ (800391c <HAL_GPIO_Init+0x350>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	43db      	mvns	r3, r3
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038d0:	4a12      	ldr	r2, [pc, #72]	@ (800391c <HAL_GPIO_Init+0x350>)
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	3301      	adds	r3, #1
 80038da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	fa22 f303 	lsr.w	r3, r2, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f47f ae78 	bne.w	80035dc <HAL_GPIO_Init+0x10>
  }
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000
 8003900:	40010000 	.word	0x40010000
 8003904:	48000400 	.word	0x48000400
 8003908:	48000800 	.word	0x48000800
 800390c:	48000c00 	.word	0x48000c00
 8003910:	48001000 	.word	0x48001000
 8003914:	48001400 	.word	0x48001400
 8003918:	48001800 	.word	0x48001800
 800391c:	40010400 	.word	0x40010400

08003920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	807b      	strh	r3, [r7, #2]
 800392c:	4613      	mov	r3, r2
 800392e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003930:	787b      	ldrb	r3, [r7, #1]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003936:	887a      	ldrh	r2, [r7, #2]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800393c:	e002      	b.n	8003944 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800393e:	887a      	ldrh	r2, [r7, #2]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800395a:	4b08      	ldr	r3, [pc, #32]	@ (800397c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800395c:	695a      	ldr	r2, [r3, #20]
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	4013      	ands	r3, r2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d006      	beq.n	8003974 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003966:	4a05      	ldr	r2, [pc, #20]	@ (800397c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800396c:	88fb      	ldrh	r3, [r7, #6]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 f806 	bl	8003980 <HAL_GPIO_EXTI_Callback>
  }
}
 8003974:	bf00      	nop
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40010400 	.word	0x40010400

08003980 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e08d      	b.n	8003ac4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7fd fbcf 	bl	8001160 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2224      	movs	r2, #36	@ 0x24
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0201 	bic.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80039e6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039f6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d107      	bne.n	8003a10 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a0c:	609a      	str	r2, [r3, #8]
 8003a0e:	e006      	b.n	8003a1e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003a1c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d108      	bne.n	8003a38 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	e007      	b.n	8003a48 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a46:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6812      	ldr	r2, [r2, #0]
 8003a52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a5a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a6a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69d9      	ldr	r1, [r3, #28]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1a      	ldr	r2, [r3, #32]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f042 0201 	orr.w	r2, r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	d138      	bne.n	8003b54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e032      	b.n	8003b56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	@ 0x24
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0201 	bic.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6819      	ldr	r1, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	e000      	b.n	8003b56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b54:	2302      	movs	r3, #2
  }
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b085      	sub	sp, #20
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d139      	bne.n	8003bec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e033      	b.n	8003bee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2224      	movs	r2, #36	@ 0x24
 8003b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0201 	bic.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003bb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	e000      	b.n	8003bee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bec:	2302      	movs	r3, #2
  }
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b086      	sub	sp, #24
 8003bfe:	af02      	add	r7, sp, #8
 8003c00:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e101      	b.n	8003e10 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d106      	bne.n	8003c26 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7fd fc47 	bl	80014b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2203      	movs	r2, #3
 8003c2a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f002 fef1 	bl	8006a20 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	7c1a      	ldrb	r2, [r3, #16]
 8003c46:	f88d 2000 	strb.w	r2, [sp]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c4e:	f002 feba 	bl	80069c6 <USB_CoreInit>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0d5      	b.n	8003e10 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f002 fee9 	bl	8006a42 <USB_SetCurrentMode>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e0c6      	b.n	8003e10 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]
 8003c86:	e04a      	b.n	8003d1e <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	3315      	adds	r3, #21
 8003c98:	2201      	movs	r2, #1
 8003c9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c9c:	7bfa      	ldrb	r2, [r7, #15]
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	3314      	adds	r3, #20
 8003cac:	7bfa      	ldrb	r2, [r7, #15]
 8003cae:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cb0:	7bfa      	ldrb	r2, [r7, #15]
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	b298      	uxth	r0, r3
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	332e      	adds	r3, #46	@ 0x2e
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cc8:	7bfa      	ldrb	r2, [r7, #15]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	3318      	adds	r3, #24
 8003cd8:	2200      	movs	r2, #0
 8003cda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003cdc:	7bfa      	ldrb	r2, [r7, #15]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	331c      	adds	r3, #28
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003cf0:	7bfa      	ldrb	r2, [r7, #15]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	3320      	adds	r3, #32
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d04:	7bfa      	ldrb	r2, [r7, #15]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	3324      	adds	r3, #36	@ 0x24
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	73fb      	strb	r3, [r7, #15]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	791b      	ldrb	r3, [r3, #4]
 8003d22:	7bfa      	ldrb	r2, [r7, #15]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d3af      	bcc.n	8003c88 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d28:	2300      	movs	r3, #0
 8003d2a:	73fb      	strb	r3, [r7, #15]
 8003d2c:	e044      	b.n	8003db8 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d2e:	7bfa      	ldrb	r2, [r7, #15]
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d44:	7bfa      	ldrb	r2, [r7, #15]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d5a:	7bfa      	ldrb	r2, [r7, #15]
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d70:	7bfa      	ldrb	r2, [r7, #15]
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d86:	7bfa      	ldrb	r2, [r7, #15]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d9c:	7bfa      	ldrb	r2, [r7, #15]
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	3301      	adds	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	791b      	ldrb	r3, [r3, #4]
 8003dbc:	7bfa      	ldrb	r2, [r7, #15]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d3b5      	bcc.n	8003d2e <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	7c1a      	ldrb	r2, [r3, #16]
 8003dca:	f88d 2000 	strb.w	r2, [sp]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dd2:	f002 fe83 	bl	8006adc <USB_DevInit>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e013      	b.n	8003e10 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	7b1b      	ldrb	r3, [r3, #12]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d102      	bne.n	8003e04 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f80a 	bl	8003e18 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f003 f828 	bl	8006e5e <USB_DevDisconnect>

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e4a:	f043 0303 	orr.w	r3, r3, #3
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e64:	4b05      	ldr	r3, [pc, #20]	@ (8003e7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a04      	ldr	r2, [pc, #16]	@ (8003e7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e6e:	6013      	str	r3, [r2, #0]
}
 8003e70:	bf00      	nop
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40007000 	.word	0x40007000

08003e80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e84:	4b04      	ldr	r3, [pc, #16]	@ (8003e98 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40007000 	.word	0x40007000

08003e9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eaa:	d130      	bne.n	8003f0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eac:	4b23      	ldr	r3, [pc, #140]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eb8:	d038      	beq.n	8003f2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003eba:	4b20      	ldr	r3, [pc, #128]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ec4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ec8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003eca:	4b1d      	ldr	r3, [pc, #116]	@ (8003f40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2232      	movs	r2, #50	@ 0x32
 8003ed0:	fb02 f303 	mul.w	r3, r2, r3
 8003ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8003f44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eda:	0c9b      	lsrs	r3, r3, #18
 8003edc:	3301      	adds	r3, #1
 8003ede:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ee0:	e002      	b.n	8003ee8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ee8:	4b14      	ldr	r3, [pc, #80]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef4:	d102      	bne.n	8003efc <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f2      	bne.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003efc:	4b0f      	ldr	r3, [pc, #60]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f08:	d110      	bne.n	8003f2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e00f      	b.n	8003f2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f1a:	d007      	beq.n	8003f2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f1c:	4b07      	ldr	r3, [pc, #28]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f24:	4a05      	ldr	r2, [pc, #20]	@ (8003f3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40007000 	.word	0x40007000
 8003f40:	20000000 	.word	0x20000000
 8003f44:	431bde83 	.word	0x431bde83

08003f48 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003f4c:	4b05      	ldr	r3, [pc, #20]	@ (8003f64 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	4a04      	ldr	r2, [pc, #16]	@ (8003f64 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003f52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f56:	6053      	str	r3, [r2, #4]
}
 8003f58:	bf00      	nop
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40007000 	.word	0x40007000

08003f68 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003f70:	f7fd fcae 	bl	80018d0 <HAL_GetTick>
 8003f74:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e063      	b.n	8004048 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10b      	bne.n	8003fa4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7fd f941 	bl	800121c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003f9a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f858 	bl	8004054 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	021a      	lsls	r2, r3, #8
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2120      	movs	r1, #32
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f850 	bl	8004070 <QSPI_WaitFlagStateUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003fd4:	7afb      	ldrb	r3, [r7, #11]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d131      	bne.n	800403e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003fe4:	f023 0310 	bic.w	r3, r3, #16
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6852      	ldr	r2, [r2, #4]
 8003fec:	0611      	lsls	r1, r2, #24
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	68d2      	ldr	r2, [r2, #12]
 8003ff2:	4311      	orrs	r1, r2
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	4b13      	ldr	r3, [pc, #76]	@ (8004050 <HAL_QSPI_Init+0xe8>)
 8004004:	4013      	ands	r3, r2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6912      	ldr	r2, [r2, #16]
 800400a:	0411      	lsls	r1, r2, #16
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6952      	ldr	r2, [r2, #20]
 8004010:	4311      	orrs	r1, r2
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6992      	ldr	r2, [r2, #24]
 8004016:	4311      	orrs	r1, r2
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	430b      	orrs	r3, r1
 800401e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8004046:	7afb      	ldrb	r3, [r7, #11]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	ffe0f8fe 	.word	0xffe0f8fe

08004054 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	4613      	mov	r3, r2
 800407e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004080:	e01a      	b.n	80040b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004088:	d016      	beq.n	80040b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408a:	f7fd fc21 	bl	80018d0 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	429a      	cmp	r2, r3
 8004098:	d302      	bcc.n	80040a0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10b      	bne.n	80040b8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2204      	movs	r2, #4
 80040a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ac:	f043 0201 	orr.w	r2, r3, #1
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e00e      	b.n	80040d6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bf14      	ite	ne
 80040c6:	2301      	movne	r3, #1
 80040c8:	2300      	moveq	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d1d6      	bne.n	8004082 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e3ca      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f2:	4b97      	ldr	r3, [pc, #604]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040fc:	4b94      	ldr	r3, [pc, #592]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 80e4 	beq.w	80042dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d007      	beq.n	800412a <HAL_RCC_OscConfig+0x4a>
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b0c      	cmp	r3, #12
 800411e:	f040 808b 	bne.w	8004238 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b01      	cmp	r3, #1
 8004126:	f040 8087 	bne.w	8004238 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800412a:	4b89      	ldr	r3, [pc, #548]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_RCC_OscConfig+0x62>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e3a2      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1a      	ldr	r2, [r3, #32]
 8004146:	4b82      	ldr	r3, [pc, #520]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d004      	beq.n	800415c <HAL_RCC_OscConfig+0x7c>
 8004152:	4b7f      	ldr	r3, [pc, #508]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800415a:	e005      	b.n	8004168 <HAL_RCC_OscConfig+0x88>
 800415c:	4b7c      	ldr	r3, [pc, #496]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 800415e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004162:	091b      	lsrs	r3, r3, #4
 8004164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004168:	4293      	cmp	r3, r2
 800416a:	d223      	bcs.n	80041b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fd55 	bl	8004c20 <RCC_SetFlashLatencyFromMSIRange>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e383      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004180:	4b73      	ldr	r3, [pc, #460]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a72      	ldr	r2, [pc, #456]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 8004186:	f043 0308 	orr.w	r3, r3, #8
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	4b70      	ldr	r3, [pc, #448]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	496d      	ldr	r1, [pc, #436]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 800419a:	4313      	orrs	r3, r2
 800419c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800419e:	4b6c      	ldr	r3, [pc, #432]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	4968      	ldr	r1, [pc, #416]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	604b      	str	r3, [r1, #4]
 80041b2:	e025      	b.n	8004200 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041b4:	4b66      	ldr	r3, [pc, #408]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a65      	ldr	r2, [pc, #404]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 80041ba:	f043 0308 	orr.w	r3, r3, #8
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	4b63      	ldr	r3, [pc, #396]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	4960      	ldr	r1, [pc, #384]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	495b      	ldr	r1, [pc, #364]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d109      	bne.n	8004200 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fd15 	bl	8004c20 <RCC_SetFlashLatencyFromMSIRange>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e343      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004200:	f000 fc4a 	bl	8004a98 <HAL_RCC_GetSysClockFreq>
 8004204:	4602      	mov	r2, r0
 8004206:	4b52      	ldr	r3, [pc, #328]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	091b      	lsrs	r3, r3, #4
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	4950      	ldr	r1, [pc, #320]	@ (8004354 <HAL_RCC_OscConfig+0x274>)
 8004212:	5ccb      	ldrb	r3, [r1, r3]
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
 800421c:	4a4e      	ldr	r2, [pc, #312]	@ (8004358 <HAL_RCC_OscConfig+0x278>)
 800421e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004220:	4b4e      	ldr	r3, [pc, #312]	@ (800435c <HAL_RCC_OscConfig+0x27c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4618      	mov	r0, r3
 8004226:	f7fd fb03 	bl	8001830 <HAL_InitTick>
 800422a:	4603      	mov	r3, r0
 800422c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d052      	beq.n	80042da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	e327      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d032      	beq.n	80042a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004240:	4b43      	ldr	r3, [pc, #268]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a42      	ldr	r2, [pc, #264]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800424c:	f7fd fb40 	bl	80018d0 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004254:	f7fd fb3c 	bl	80018d0 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e310      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004266:	4b3a      	ldr	r3, [pc, #232]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004272:	4b37      	ldr	r3, [pc, #220]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a36      	ldr	r2, [pc, #216]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 8004278:	f043 0308 	orr.w	r3, r3, #8
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	4b34      	ldr	r3, [pc, #208]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	4931      	ldr	r1, [pc, #196]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 800428c:	4313      	orrs	r3, r2
 800428e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004290:	4b2f      	ldr	r3, [pc, #188]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	492c      	ldr	r1, [pc, #176]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	604b      	str	r3, [r1, #4]
 80042a4:	e01a      	b.n	80042dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a29      	ldr	r2, [pc, #164]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042b2:	f7fd fb0d 	bl	80018d0 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042ba:	f7fd fb09 	bl	80018d0 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e2dd      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042cc:	4b20      	ldr	r3, [pc, #128]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1f0      	bne.n	80042ba <HAL_RCC_OscConfig+0x1da>
 80042d8:	e000      	b.n	80042dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d074      	beq.n	80043d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d005      	beq.n	80042fa <HAL_RCC_OscConfig+0x21a>
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	2b0c      	cmp	r3, #12
 80042f2:	d10e      	bne.n	8004312 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d10b      	bne.n	8004312 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042fa:	4b15      	ldr	r3, [pc, #84]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d064      	beq.n	80043d0 <HAL_RCC_OscConfig+0x2f0>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d160      	bne.n	80043d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e2ba      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800431a:	d106      	bne.n	800432a <HAL_RCC_OscConfig+0x24a>
 800431c:	4b0c      	ldr	r3, [pc, #48]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a0b      	ldr	r2, [pc, #44]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 8004322:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	e026      	b.n	8004378 <HAL_RCC_OscConfig+0x298>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004332:	d115      	bne.n	8004360 <HAL_RCC_OscConfig+0x280>
 8004334:	4b06      	ldr	r3, [pc, #24]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a05      	ldr	r2, [pc, #20]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 800433a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	4b03      	ldr	r3, [pc, #12]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a02      	ldr	r2, [pc, #8]	@ (8004350 <HAL_RCC_OscConfig+0x270>)
 8004346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	e014      	b.n	8004378 <HAL_RCC_OscConfig+0x298>
 800434e:	bf00      	nop
 8004350:	40021000 	.word	0x40021000
 8004354:	0800acd8 	.word	0x0800acd8
 8004358:	20000000 	.word	0x20000000
 800435c:	20000004 	.word	0x20000004
 8004360:	4ba0      	ldr	r3, [pc, #640]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a9f      	ldr	r2, [pc, #636]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 8004366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	4b9d      	ldr	r3, [pc, #628]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a9c      	ldr	r2, [pc, #624]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 8004372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d013      	beq.n	80043a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004380:	f7fd faa6 	bl	80018d0 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004388:	f7fd faa2 	bl	80018d0 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b64      	cmp	r3, #100	@ 0x64
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e276      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800439a:	4b92      	ldr	r3, [pc, #584]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f0      	beq.n	8004388 <HAL_RCC_OscConfig+0x2a8>
 80043a6:	e014      	b.n	80043d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a8:	f7fd fa92 	bl	80018d0 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b0:	f7fd fa8e 	bl	80018d0 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b64      	cmp	r3, #100	@ 0x64
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e262      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043c2:	4b88      	ldr	r3, [pc, #544]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x2d0>
 80043ce:	e000      	b.n	80043d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d060      	beq.n	80044a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_OscConfig+0x310>
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	2b0c      	cmp	r3, #12
 80043e8:	d119      	bne.n	800441e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d116      	bne.n	800441e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043f0:	4b7c      	ldr	r3, [pc, #496]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_RCC_OscConfig+0x328>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e23f      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004408:	4b76      	ldr	r3, [pc, #472]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	061b      	lsls	r3, r3, #24
 8004416:	4973      	ldr	r1, [pc, #460]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 8004418:	4313      	orrs	r3, r2
 800441a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800441c:	e040      	b.n	80044a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d023      	beq.n	800446e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004426:	4b6f      	ldr	r3, [pc, #444]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a6e      	ldr	r2, [pc, #440]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 800442c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004432:	f7fd fa4d 	bl	80018d0 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443a:	f7fd fa49 	bl	80018d0 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e21d      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800444c:	4b65      	ldr	r3, [pc, #404]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004458:	4b62      	ldr	r3, [pc, #392]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	061b      	lsls	r3, r3, #24
 8004466:	495f      	ldr	r1, [pc, #380]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 8004468:	4313      	orrs	r3, r2
 800446a:	604b      	str	r3, [r1, #4]
 800446c:	e018      	b.n	80044a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446e:	4b5d      	ldr	r3, [pc, #372]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a5c      	ldr	r2, [pc, #368]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 8004474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447a:	f7fd fa29 	bl	80018d0 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004482:	f7fd fa25 	bl	80018d0 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e1f9      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004494:	4b53      	ldr	r3, [pc, #332]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1f0      	bne.n	8004482 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d03c      	beq.n	8004526 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01c      	beq.n	80044ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b4:	4b4b      	ldr	r3, [pc, #300]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 80044b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044ba:	4a4a      	ldr	r2, [pc, #296]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c4:	f7fd fa04 	bl	80018d0 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044cc:	f7fd fa00 	bl	80018d0 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e1d4      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044de:	4b41      	ldr	r3, [pc, #260]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 80044e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0ef      	beq.n	80044cc <HAL_RCC_OscConfig+0x3ec>
 80044ec:	e01b      	b.n	8004526 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ee:	4b3d      	ldr	r3, [pc, #244]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 80044f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044f4:	4a3b      	ldr	r2, [pc, #236]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 80044f6:	f023 0301 	bic.w	r3, r3, #1
 80044fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fe:	f7fd f9e7 	bl	80018d0 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004506:	f7fd f9e3 	bl	80018d0 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e1b7      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004518:	4b32      	ldr	r3, [pc, #200]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 800451a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1ef      	bne.n	8004506 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80a6 	beq.w	8004680 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004534:	2300      	movs	r3, #0
 8004536:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004538:	4b2a      	ldr	r3, [pc, #168]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 800453a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800453c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10d      	bne.n	8004560 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004544:	4b27      	ldr	r3, [pc, #156]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 8004546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004548:	4a26      	ldr	r2, [pc, #152]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 800454a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800454e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004550:	4b24      	ldr	r3, [pc, #144]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 8004552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800455c:	2301      	movs	r3, #1
 800455e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004560:	4b21      	ldr	r3, [pc, #132]	@ (80045e8 <HAL_RCC_OscConfig+0x508>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d118      	bne.n	800459e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800456c:	4b1e      	ldr	r3, [pc, #120]	@ (80045e8 <HAL_RCC_OscConfig+0x508>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1d      	ldr	r2, [pc, #116]	@ (80045e8 <HAL_RCC_OscConfig+0x508>)
 8004572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004576:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004578:	f7fd f9aa 	bl	80018d0 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004580:	f7fd f9a6 	bl	80018d0 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e17a      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004592:	4b15      	ldr	r3, [pc, #84]	@ (80045e8 <HAL_RCC_OscConfig+0x508>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0f0      	beq.n	8004580 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d108      	bne.n	80045b8 <HAL_RCC_OscConfig+0x4d8>
 80045a6:	4b0f      	ldr	r3, [pc, #60]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 80045a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ac:	4a0d      	ldr	r2, [pc, #52]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 80045ae:	f043 0301 	orr.w	r3, r3, #1
 80045b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045b6:	e029      	b.n	800460c <HAL_RCC_OscConfig+0x52c>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2b05      	cmp	r3, #5
 80045be:	d115      	bne.n	80045ec <HAL_RCC_OscConfig+0x50c>
 80045c0:	4b08      	ldr	r3, [pc, #32]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 80045c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c6:	4a07      	ldr	r2, [pc, #28]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 80045c8:	f043 0304 	orr.w	r3, r3, #4
 80045cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045d0:	4b04      	ldr	r3, [pc, #16]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d6:	4a03      	ldr	r2, [pc, #12]	@ (80045e4 <HAL_RCC_OscConfig+0x504>)
 80045d8:	f043 0301 	orr.w	r3, r3, #1
 80045dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045e0:	e014      	b.n	800460c <HAL_RCC_OscConfig+0x52c>
 80045e2:	bf00      	nop
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40007000 	.word	0x40007000
 80045ec:	4b9c      	ldr	r3, [pc, #624]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f2:	4a9b      	ldr	r2, [pc, #620]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 80045f4:	f023 0301 	bic.w	r3, r3, #1
 80045f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045fc:	4b98      	ldr	r3, [pc, #608]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004602:	4a97      	ldr	r2, [pc, #604]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 8004604:	f023 0304 	bic.w	r3, r3, #4
 8004608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d016      	beq.n	8004642 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004614:	f7fd f95c 	bl	80018d0 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800461a:	e00a      	b.n	8004632 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461c:	f7fd f958 	bl	80018d0 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e12a      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004632:	4b8b      	ldr	r3, [pc, #556]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 8004634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0ed      	beq.n	800461c <HAL_RCC_OscConfig+0x53c>
 8004640:	e015      	b.n	800466e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004642:	f7fd f945 	bl	80018d0 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004648:	e00a      	b.n	8004660 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464a:	f7fd f941 	bl	80018d0 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004658:	4293      	cmp	r3, r2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e113      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004660:	4b7f      	ldr	r3, [pc, #508]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1ed      	bne.n	800464a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800466e:	7ffb      	ldrb	r3, [r7, #31]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d105      	bne.n	8004680 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004674:	4b7a      	ldr	r3, [pc, #488]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 8004676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004678:	4a79      	ldr	r2, [pc, #484]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 800467a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800467e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 80fe 	beq.w	8004886 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468e:	2b02      	cmp	r3, #2
 8004690:	f040 80d0 	bne.w	8004834 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004694:	4b72      	ldr	r3, [pc, #456]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f003 0203 	and.w	r2, r3, #3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d130      	bne.n	800470a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b2:	3b01      	subs	r3, #1
 80046b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d127      	bne.n	800470a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d11f      	bne.n	800470a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80046d4:	2a07      	cmp	r2, #7
 80046d6:	bf14      	ite	ne
 80046d8:	2201      	movne	r2, #1
 80046da:	2200      	moveq	r2, #0
 80046dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046de:	4293      	cmp	r3, r2
 80046e0:	d113      	bne.n	800470a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ec:	085b      	lsrs	r3, r3, #1
 80046ee:	3b01      	subs	r3, #1
 80046f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d109      	bne.n	800470a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	3b01      	subs	r3, #1
 8004704:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004706:	429a      	cmp	r2, r3
 8004708:	d06e      	beq.n	80047e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	2b0c      	cmp	r3, #12
 800470e:	d069      	beq.n	80047e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004710:	4b53      	ldr	r3, [pc, #332]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d105      	bne.n	8004728 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800471c:	4b50      	ldr	r3, [pc, #320]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0ad      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800472c:	4b4c      	ldr	r3, [pc, #304]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a4b      	ldr	r2, [pc, #300]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 8004732:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004736:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004738:	f7fd f8ca 	bl	80018d0 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004740:	f7fd f8c6 	bl	80018d0 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e09a      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004752:	4b43      	ldr	r3, [pc, #268]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800475e:	4b40      	ldr	r3, [pc, #256]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	4b40      	ldr	r3, [pc, #256]	@ (8004864 <HAL_RCC_OscConfig+0x784>)
 8004764:	4013      	ands	r3, r2
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800476e:	3a01      	subs	r2, #1
 8004770:	0112      	lsls	r2, r2, #4
 8004772:	4311      	orrs	r1, r2
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004778:	0212      	lsls	r2, r2, #8
 800477a:	4311      	orrs	r1, r2
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004780:	0852      	lsrs	r2, r2, #1
 8004782:	3a01      	subs	r2, #1
 8004784:	0552      	lsls	r2, r2, #21
 8004786:	4311      	orrs	r1, r2
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800478c:	0852      	lsrs	r2, r2, #1
 800478e:	3a01      	subs	r2, #1
 8004790:	0652      	lsls	r2, r2, #25
 8004792:	4311      	orrs	r1, r2
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004798:	0912      	lsrs	r2, r2, #4
 800479a:	0452      	lsls	r2, r2, #17
 800479c:	430a      	orrs	r2, r1
 800479e:	4930      	ldr	r1, [pc, #192]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a2d      	ldr	r2, [pc, #180]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 80047aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 80047b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047bc:	f7fd f888 	bl	80018d0 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fd f884 	bl	80018d0 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e058      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d6:	4b22      	ldr	r3, [pc, #136]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047e2:	e050      	b.n	8004886 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e04f      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d148      	bne.n	8004886 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a19      	ldr	r2, [pc, #100]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 80047fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004800:	4b17      	ldr	r3, [pc, #92]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4a16      	ldr	r2, [pc, #88]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 8004806:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800480a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800480c:	f7fd f860 	bl	80018d0 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004814:	f7fd f85c 	bl	80018d0 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e030      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004826:	4b0e      	ldr	r3, [pc, #56]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x734>
 8004832:	e028      	b.n	8004886 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b0c      	cmp	r3, #12
 8004838:	d023      	beq.n	8004882 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800483a:	4b09      	ldr	r3, [pc, #36]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a08      	ldr	r2, [pc, #32]	@ (8004860 <HAL_RCC_OscConfig+0x780>)
 8004840:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004846:	f7fd f843 	bl	80018d0 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800484c:	e00c      	b.n	8004868 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800484e:	f7fd f83f 	bl	80018d0 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d905      	bls.n	8004868 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e013      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
 8004860:	40021000 	.word	0x40021000
 8004864:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004868:	4b09      	ldr	r3, [pc, #36]	@ (8004890 <HAL_RCC_OscConfig+0x7b0>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1ec      	bne.n	800484e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004874:	4b06      	ldr	r3, [pc, #24]	@ (8004890 <HAL_RCC_OscConfig+0x7b0>)
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	4905      	ldr	r1, [pc, #20]	@ (8004890 <HAL_RCC_OscConfig+0x7b0>)
 800487a:	4b06      	ldr	r3, [pc, #24]	@ (8004894 <HAL_RCC_OscConfig+0x7b4>)
 800487c:	4013      	ands	r3, r2
 800487e:	60cb      	str	r3, [r1, #12]
 8004880:	e001      	b.n	8004886 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3720      	adds	r7, #32
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40021000 	.word	0x40021000
 8004894:	feeefffc 	.word	0xfeeefffc

08004898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0e7      	b.n	8004a7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048ac:	4b75      	ldr	r3, [pc, #468]	@ (8004a84 <HAL_RCC_ClockConfig+0x1ec>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d910      	bls.n	80048dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ba:	4b72      	ldr	r3, [pc, #456]	@ (8004a84 <HAL_RCC_ClockConfig+0x1ec>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f023 0207 	bic.w	r2, r3, #7
 80048c2:	4970      	ldr	r1, [pc, #448]	@ (8004a84 <HAL_RCC_ClockConfig+0x1ec>)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ca:	4b6e      	ldr	r3, [pc, #440]	@ (8004a84 <HAL_RCC_ClockConfig+0x1ec>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d001      	beq.n	80048dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e0cf      	b.n	8004a7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d010      	beq.n	800490a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	4b66      	ldr	r3, [pc, #408]	@ (8004a88 <HAL_RCC_ClockConfig+0x1f0>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d908      	bls.n	800490a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f8:	4b63      	ldr	r3, [pc, #396]	@ (8004a88 <HAL_RCC_ClockConfig+0x1f0>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	4960      	ldr	r1, [pc, #384]	@ (8004a88 <HAL_RCC_ClockConfig+0x1f0>)
 8004906:	4313      	orrs	r3, r2
 8004908:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d04c      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b03      	cmp	r3, #3
 800491c:	d107      	bne.n	800492e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800491e:	4b5a      	ldr	r3, [pc, #360]	@ (8004a88 <HAL_RCC_ClockConfig+0x1f0>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d121      	bne.n	800496e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e0a6      	b.n	8004a7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d107      	bne.n	8004946 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004936:	4b54      	ldr	r3, [pc, #336]	@ (8004a88 <HAL_RCC_ClockConfig+0x1f0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d115      	bne.n	800496e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e09a      	b.n	8004a7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d107      	bne.n	800495e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800494e:	4b4e      	ldr	r3, [pc, #312]	@ (8004a88 <HAL_RCC_ClockConfig+0x1f0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e08e      	b.n	8004a7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800495e:	4b4a      	ldr	r3, [pc, #296]	@ (8004a88 <HAL_RCC_ClockConfig+0x1f0>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e086      	b.n	8004a7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800496e:	4b46      	ldr	r3, [pc, #280]	@ (8004a88 <HAL_RCC_ClockConfig+0x1f0>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f023 0203 	bic.w	r2, r3, #3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	4943      	ldr	r1, [pc, #268]	@ (8004a88 <HAL_RCC_ClockConfig+0x1f0>)
 800497c:	4313      	orrs	r3, r2
 800497e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004980:	f7fc ffa6 	bl	80018d0 <HAL_GetTick>
 8004984:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004986:	e00a      	b.n	800499e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004988:	f7fc ffa2 	bl	80018d0 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e06e      	b.n	8004a7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499e:	4b3a      	ldr	r3, [pc, #232]	@ (8004a88 <HAL_RCC_ClockConfig+0x1f0>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 020c 	and.w	r2, r3, #12
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d1eb      	bne.n	8004988 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d010      	beq.n	80049de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	4b31      	ldr	r3, [pc, #196]	@ (8004a88 <HAL_RCC_ClockConfig+0x1f0>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d208      	bcs.n	80049de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004a88 <HAL_RCC_ClockConfig+0x1f0>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	492b      	ldr	r1, [pc, #172]	@ (8004a88 <HAL_RCC_ClockConfig+0x1f0>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049de:	4b29      	ldr	r3, [pc, #164]	@ (8004a84 <HAL_RCC_ClockConfig+0x1ec>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d210      	bcs.n	8004a0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ec:	4b25      	ldr	r3, [pc, #148]	@ (8004a84 <HAL_RCC_ClockConfig+0x1ec>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f023 0207 	bic.w	r2, r3, #7
 80049f4:	4923      	ldr	r1, [pc, #140]	@ (8004a84 <HAL_RCC_ClockConfig+0x1ec>)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fc:	4b21      	ldr	r3, [pc, #132]	@ (8004a84 <HAL_RCC_ClockConfig+0x1ec>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d001      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e036      	b.n	8004a7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d008      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004a88 <HAL_RCC_ClockConfig+0x1f0>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	4918      	ldr	r1, [pc, #96]	@ (8004a88 <HAL_RCC_ClockConfig+0x1f0>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d009      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a38:	4b13      	ldr	r3, [pc, #76]	@ (8004a88 <HAL_RCC_ClockConfig+0x1f0>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	4910      	ldr	r1, [pc, #64]	@ (8004a88 <HAL_RCC_ClockConfig+0x1f0>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a4c:	f000 f824 	bl	8004a98 <HAL_RCC_GetSysClockFreq>
 8004a50:	4602      	mov	r2, r0
 8004a52:	4b0d      	ldr	r3, [pc, #52]	@ (8004a88 <HAL_RCC_ClockConfig+0x1f0>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	091b      	lsrs	r3, r3, #4
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	490b      	ldr	r1, [pc, #44]	@ (8004a8c <HAL_RCC_ClockConfig+0x1f4>)
 8004a5e:	5ccb      	ldrb	r3, [r1, r3]
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	fa22 f303 	lsr.w	r3, r2, r3
 8004a68:	4a09      	ldr	r2, [pc, #36]	@ (8004a90 <HAL_RCC_ClockConfig+0x1f8>)
 8004a6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a6c:	4b09      	ldr	r3, [pc, #36]	@ (8004a94 <HAL_RCC_ClockConfig+0x1fc>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fc fedd 	bl	8001830 <HAL_InitTick>
 8004a76:	4603      	mov	r3, r0
 8004a78:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a7a:	7afb      	ldrb	r3, [r7, #11]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40022000 	.word	0x40022000
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	0800acd8 	.word	0x0800acd8
 8004a90:	20000000 	.word	0x20000000
 8004a94:	20000004 	.word	0x20000004

08004a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b089      	sub	sp, #36	@ 0x24
 8004a9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61fb      	str	r3, [r7, #28]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 030c 	and.w	r3, r3, #12
 8004aae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0303 	and.w	r3, r3, #3
 8004ab8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_RCC_GetSysClockFreq+0x34>
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	2b0c      	cmp	r3, #12
 8004ac4:	d121      	bne.n	8004b0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d11e      	bne.n	8004b0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004acc:	4b34      	ldr	r3, [pc, #208]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d107      	bne.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ad8:	4b31      	ldr	r3, [pc, #196]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ade:	0a1b      	lsrs	r3, r3, #8
 8004ae0:	f003 030f 	and.w	r3, r3, #15
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	e005      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004af4:	4a2b      	ldr	r2, [pc, #172]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004afc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10d      	bne.n	8004b20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b08:	e00a      	b.n	8004b20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d102      	bne.n	8004b16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b10:	4b25      	ldr	r3, [pc, #148]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b12:	61bb      	str	r3, [r7, #24]
 8004b14:	e004      	b.n	8004b20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d101      	bne.n	8004b20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b1c:	4b23      	ldr	r3, [pc, #140]	@ (8004bac <HAL_RCC_GetSysClockFreq+0x114>)
 8004b1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	2b0c      	cmp	r3, #12
 8004b24:	d134      	bne.n	8004b90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b26:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d003      	beq.n	8004b3e <HAL_RCC_GetSysClockFreq+0xa6>
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d003      	beq.n	8004b44 <HAL_RCC_GetSysClockFreq+0xac>
 8004b3c:	e005      	b.n	8004b4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b40:	617b      	str	r3, [r7, #20]
      break;
 8004b42:	e005      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b44:	4b19      	ldr	r3, [pc, #100]	@ (8004bac <HAL_RCC_GetSysClockFreq+0x114>)
 8004b46:	617b      	str	r3, [r7, #20]
      break;
 8004b48:	e002      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	617b      	str	r3, [r7, #20]
      break;
 8004b4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b50:	4b13      	ldr	r3, [pc, #76]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	091b      	lsrs	r3, r3, #4
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	0a1b      	lsrs	r3, r3, #8
 8004b64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	fb03 f202 	mul.w	r2, r3, r2
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b76:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	0e5b      	lsrs	r3, r3, #25
 8004b7c:	f003 0303 	and.w	r3, r3, #3
 8004b80:	3301      	adds	r3, #1
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b90:	69bb      	ldr	r3, [r7, #24]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3724      	adds	r7, #36	@ 0x24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	0800acf0 	.word	0x0800acf0
 8004ba8:	00f42400 	.word	0x00f42400
 8004bac:	007a1200 	.word	0x007a1200

08004bb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bb4:	4b03      	ldr	r3, [pc, #12]	@ (8004bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20000000 	.word	0x20000000

08004bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bcc:	f7ff fff0 	bl	8004bb0 <HAL_RCC_GetHCLKFreq>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	4b06      	ldr	r3, [pc, #24]	@ (8004bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	0a1b      	lsrs	r3, r3, #8
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	4904      	ldr	r1, [pc, #16]	@ (8004bf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bde:	5ccb      	ldrb	r3, [r1, r3]
 8004be0:	f003 031f 	and.w	r3, r3, #31
 8004be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	0800ace8 	.word	0x0800ace8

08004bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bf8:	f7ff ffda 	bl	8004bb0 <HAL_RCC_GetHCLKFreq>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	4b06      	ldr	r3, [pc, #24]	@ (8004c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	0adb      	lsrs	r3, r3, #11
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	4904      	ldr	r1, [pc, #16]	@ (8004c1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c0a:	5ccb      	ldrb	r3, [r1, r3]
 8004c0c:	f003 031f 	and.w	r3, r3, #31
 8004c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	0800ace8 	.word	0x0800ace8

08004c20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c28:	2300      	movs	r3, #0
 8004c2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8004cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c38:	f7ff f922 	bl	8003e80 <HAL_PWREx_GetVoltageRange>
 8004c3c:	6178      	str	r0, [r7, #20]
 8004c3e:	e014      	b.n	8004c6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c40:	4b25      	ldr	r3, [pc, #148]	@ (8004cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c44:	4a24      	ldr	r2, [pc, #144]	@ (8004cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c4c:	4b22      	ldr	r3, [pc, #136]	@ (8004cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c58:	f7ff f912 	bl	8003e80 <HAL_PWREx_GetVoltageRange>
 8004c5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c62:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c68:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c70:	d10b      	bne.n	8004c8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b80      	cmp	r3, #128	@ 0x80
 8004c76:	d919      	bls.n	8004cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2ba0      	cmp	r3, #160	@ 0xa0
 8004c7c:	d902      	bls.n	8004c84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c7e:	2302      	movs	r3, #2
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	e013      	b.n	8004cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c84:	2301      	movs	r3, #1
 8004c86:	613b      	str	r3, [r7, #16]
 8004c88:	e010      	b.n	8004cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b80      	cmp	r3, #128	@ 0x80
 8004c8e:	d902      	bls.n	8004c96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c90:	2303      	movs	r3, #3
 8004c92:	613b      	str	r3, [r7, #16]
 8004c94:	e00a      	b.n	8004cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b80      	cmp	r3, #128	@ 0x80
 8004c9a:	d102      	bne.n	8004ca2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	e004      	b.n	8004cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b70      	cmp	r3, #112	@ 0x70
 8004ca6:	d101      	bne.n	8004cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ca8:	2301      	movs	r3, #1
 8004caa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cac:	4b0b      	ldr	r3, [pc, #44]	@ (8004cdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f023 0207 	bic.w	r2, r3, #7
 8004cb4:	4909      	ldr	r1, [pc, #36]	@ (8004cdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004cbc:	4b07      	ldr	r3, [pc, #28]	@ (8004cdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d001      	beq.n	8004cce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	40022000 	.word	0x40022000

08004ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ce8:	2300      	movs	r3, #0
 8004cea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cec:	2300      	movs	r3, #0
 8004cee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d041      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d00:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d04:	d02a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d06:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d0a:	d824      	bhi.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d10:	d008      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d16:	d81e      	bhi.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d20:	d010      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d22:	e018      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d24:	4b86      	ldr	r3, [pc, #536]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	4a85      	ldr	r2, [pc, #532]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d2e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d30:	e015      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3304      	adds	r3, #4
 8004d36:	2100      	movs	r1, #0
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 facb 	bl	80052d4 <RCCEx_PLLSAI1_Config>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d42:	e00c      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3320      	adds	r3, #32
 8004d48:	2100      	movs	r1, #0
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fbb6 	bl	80054bc <RCCEx_PLLSAI2_Config>
 8004d50:	4603      	mov	r3, r0
 8004d52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d54:	e003      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	74fb      	strb	r3, [r7, #19]
      break;
 8004d5a:	e000      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d5e:	7cfb      	ldrb	r3, [r7, #19]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10b      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d64:	4b76      	ldr	r3, [pc, #472]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d72:	4973      	ldr	r1, [pc, #460]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004d7a:	e001      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7c:	7cfb      	ldrb	r3, [r7, #19]
 8004d7e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d041      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d94:	d02a      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004d96:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d9a:	d824      	bhi.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004d9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004da0:	d008      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004da2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004da6:	d81e      	bhi.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004dac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004db0:	d010      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004db2:	e018      	b.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004db4:	4b62      	ldr	r3, [pc, #392]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	4a61      	ldr	r2, [pc, #388]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dbe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dc0:	e015      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3304      	adds	r3, #4
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fa83 	bl	80052d4 <RCCEx_PLLSAI1_Config>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dd2:	e00c      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3320      	adds	r3, #32
 8004dd8:	2100      	movs	r1, #0
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fb6e 	bl	80054bc <RCCEx_PLLSAI2_Config>
 8004de0:	4603      	mov	r3, r0
 8004de2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004de4:	e003      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	74fb      	strb	r3, [r7, #19]
      break;
 8004dea:	e000      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dee:	7cfb      	ldrb	r3, [r7, #19]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004df4:	4b52      	ldr	r3, [pc, #328]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dfa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e02:	494f      	ldr	r1, [pc, #316]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004e0a:	e001      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0c:	7cfb      	ldrb	r3, [r7, #19]
 8004e0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 80a0 	beq.w	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e22:	4b47      	ldr	r3, [pc, #284]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004e32:	2300      	movs	r3, #0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00d      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e38:	4b41      	ldr	r3, [pc, #260]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e3c:	4a40      	ldr	r2, [pc, #256]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e42:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e44:	4b3e      	ldr	r3, [pc, #248]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e4c:	60bb      	str	r3, [r7, #8]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e50:	2301      	movs	r3, #1
 8004e52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e54:	4b3b      	ldr	r3, [pc, #236]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a3a      	ldr	r2, [pc, #232]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e60:	f7fc fd36 	bl	80018d0 <HAL_GetTick>
 8004e64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e66:	e009      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e68:	f7fc fd32 	bl	80018d0 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d902      	bls.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	74fb      	strb	r3, [r7, #19]
        break;
 8004e7a:	e005      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e7c:	4b31      	ldr	r3, [pc, #196]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0ef      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004e88:	7cfb      	ldrb	r3, [r7, #19]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d15c      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01f      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d019      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004eac:	4b24      	ldr	r3, [pc, #144]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eb6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004eb8:	4b21      	ldr	r3, [pc, #132]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ebe:	4a20      	ldr	r2, [pc, #128]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ece:	4a1c      	ldr	r2, [pc, #112]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ed8:	4a19      	ldr	r2, [pc, #100]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d016      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eea:	f7fc fcf1 	bl	80018d0 <HAL_GetTick>
 8004eee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef0:	e00b      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef2:	f7fc fced 	bl	80018d0 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d902      	bls.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	74fb      	strb	r3, [r7, #19]
            break;
 8004f08:	e006      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0ec      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004f18:	7cfb      	ldrb	r3, [r7, #19]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10c      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f1e:	4b08      	ldr	r3, [pc, #32]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f2e:	4904      	ldr	r1, [pc, #16]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f36:	e009      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f38:	7cfb      	ldrb	r3, [r7, #19]
 8004f3a:	74bb      	strb	r3, [r7, #18]
 8004f3c:	e006      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f3e:	bf00      	nop
 8004f40:	40021000 	.word	0x40021000
 8004f44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f48:	7cfb      	ldrb	r3, [r7, #19]
 8004f4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f4c:	7c7b      	ldrb	r3, [r7, #17]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d105      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f52:	4b9e      	ldr	r3, [pc, #632]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f56:	4a9d      	ldr	r2, [pc, #628]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f6a:	4b98      	ldr	r3, [pc, #608]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f70:	f023 0203 	bic.w	r2, r3, #3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f78:	4994      	ldr	r1, [pc, #592]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f8c:	4b8f      	ldr	r3, [pc, #572]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f92:	f023 020c 	bic.w	r2, r3, #12
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9a:	498c      	ldr	r1, [pc, #560]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fae:	4b87      	ldr	r3, [pc, #540]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbc:	4983      	ldr	r1, [pc, #524]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fd0:	4b7e      	ldr	r3, [pc, #504]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fde:	497b      	ldr	r1, [pc, #492]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0310 	and.w	r3, r3, #16
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ff2:	4b76      	ldr	r3, [pc, #472]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005000:	4972      	ldr	r1, [pc, #456]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0320 	and.w	r3, r3, #32
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005014:	4b6d      	ldr	r3, [pc, #436]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800501a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005022:	496a      	ldr	r1, [pc, #424]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005024:	4313      	orrs	r3, r2
 8005026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005036:	4b65      	ldr	r3, [pc, #404]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800503c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005044:	4961      	ldr	r1, [pc, #388]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005058:	4b5c      	ldr	r3, [pc, #368]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005066:	4959      	ldr	r1, [pc, #356]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800507a:	4b54      	ldr	r3, [pc, #336]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800507c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005080:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005088:	4950      	ldr	r1, [pc, #320]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508a:	4313      	orrs	r3, r2
 800508c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800509c:	4b4b      	ldr	r3, [pc, #300]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050aa:	4948      	ldr	r1, [pc, #288]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050be:	4b43      	ldr	r3, [pc, #268]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050cc:	493f      	ldr	r1, [pc, #252]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d028      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050e0:	4b3a      	ldr	r3, [pc, #232]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050ee:	4937      	ldr	r1, [pc, #220]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050fe:	d106      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005100:	4b32      	ldr	r3, [pc, #200]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	4a31      	ldr	r2, [pc, #196]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005106:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800510a:	60d3      	str	r3, [r2, #12]
 800510c:	e011      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005112:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005116:	d10c      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	2101      	movs	r1, #1
 800511e:	4618      	mov	r0, r3
 8005120:	f000 f8d8 	bl	80052d4 <RCCEx_PLLSAI1_Config>
 8005124:	4603      	mov	r3, r0
 8005126:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005128:	7cfb      	ldrb	r3, [r7, #19]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800512e:	7cfb      	ldrb	r3, [r7, #19]
 8005130:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d028      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800513e:	4b23      	ldr	r3, [pc, #140]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005144:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800514c:	491f      	ldr	r1, [pc, #124]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005158:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800515c:	d106      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800515e:	4b1b      	ldr	r3, [pc, #108]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	4a1a      	ldr	r2, [pc, #104]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005164:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005168:	60d3      	str	r3, [r2, #12]
 800516a:	e011      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005170:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005174:	d10c      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	3304      	adds	r3, #4
 800517a:	2101      	movs	r1, #1
 800517c:	4618      	mov	r0, r3
 800517e:	f000 f8a9 	bl	80052d4 <RCCEx_PLLSAI1_Config>
 8005182:	4603      	mov	r3, r0
 8005184:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005186:	7cfb      	ldrb	r3, [r7, #19]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800518c:	7cfb      	ldrb	r3, [r7, #19]
 800518e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d02b      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800519c:	4b0b      	ldr	r3, [pc, #44]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051aa:	4908      	ldr	r1, [pc, #32]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051ba:	d109      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051bc:	4b03      	ldr	r3, [pc, #12]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	4a02      	ldr	r2, [pc, #8]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051c6:	60d3      	str	r3, [r2, #12]
 80051c8:	e014      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80051ca:	bf00      	nop
 80051cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051d8:	d10c      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	3304      	adds	r3, #4
 80051de:	2101      	movs	r1, #1
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 f877 	bl	80052d4 <RCCEx_PLLSAI1_Config>
 80051e6:	4603      	mov	r3, r0
 80051e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051ea:	7cfb      	ldrb	r3, [r7, #19]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80051f0:	7cfb      	ldrb	r3, [r7, #19]
 80051f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d02f      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005200:	4b2b      	ldr	r3, [pc, #172]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005206:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800520e:	4928      	ldr	r1, [pc, #160]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800521a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800521e:	d10d      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3304      	adds	r3, #4
 8005224:	2102      	movs	r1, #2
 8005226:	4618      	mov	r0, r3
 8005228:	f000 f854 	bl	80052d4 <RCCEx_PLLSAI1_Config>
 800522c:	4603      	mov	r3, r0
 800522e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005230:	7cfb      	ldrb	r3, [r7, #19]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d014      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005236:	7cfb      	ldrb	r3, [r7, #19]
 8005238:	74bb      	strb	r3, [r7, #18]
 800523a:	e011      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005240:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005244:	d10c      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	3320      	adds	r3, #32
 800524a:	2102      	movs	r1, #2
 800524c:	4618      	mov	r0, r3
 800524e:	f000 f935 	bl	80054bc <RCCEx_PLLSAI2_Config>
 8005252:	4603      	mov	r3, r0
 8005254:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005256:	7cfb      	ldrb	r3, [r7, #19]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800525c:	7cfb      	ldrb	r3, [r7, #19]
 800525e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800526c:	4b10      	ldr	r3, [pc, #64]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005272:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800527a:	490d      	ldr	r1, [pc, #52]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800527c:	4313      	orrs	r3, r2
 800527e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00b      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800528e:	4b08      	ldr	r3, [pc, #32]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005294:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800529e:	4904      	ldr	r1, [pc, #16]	@ (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40021000 	.word	0x40021000

080052b4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80052b8:	4b05      	ldr	r3, [pc, #20]	@ (80052d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a04      	ldr	r2, [pc, #16]	@ (80052d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80052be:	f043 0304 	orr.w	r3, r3, #4
 80052c2:	6013      	str	r3, [r2, #0]
}
 80052c4:	bf00      	nop
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40021000 	.word	0x40021000

080052d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052e2:	4b75      	ldr	r3, [pc, #468]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d018      	beq.n	8005320 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052ee:	4b72      	ldr	r3, [pc, #456]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 0203 	and.w	r2, r3, #3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d10d      	bne.n	800531a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
       ||
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005306:	4b6c      	ldr	r3, [pc, #432]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	091b      	lsrs	r3, r3, #4
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
       ||
 8005316:	429a      	cmp	r2, r3
 8005318:	d047      	beq.n	80053aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	73fb      	strb	r3, [r7, #15]
 800531e:	e044      	b.n	80053aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b03      	cmp	r3, #3
 8005326:	d018      	beq.n	800535a <RCCEx_PLLSAI1_Config+0x86>
 8005328:	2b03      	cmp	r3, #3
 800532a:	d825      	bhi.n	8005378 <RCCEx_PLLSAI1_Config+0xa4>
 800532c:	2b01      	cmp	r3, #1
 800532e:	d002      	beq.n	8005336 <RCCEx_PLLSAI1_Config+0x62>
 8005330:	2b02      	cmp	r3, #2
 8005332:	d009      	beq.n	8005348 <RCCEx_PLLSAI1_Config+0x74>
 8005334:	e020      	b.n	8005378 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005336:	4b60      	ldr	r3, [pc, #384]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d11d      	bne.n	800537e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005346:	e01a      	b.n	800537e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005348:	4b5b      	ldr	r3, [pc, #364]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005350:	2b00      	cmp	r3, #0
 8005352:	d116      	bne.n	8005382 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005358:	e013      	b.n	8005382 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800535a:	4b57      	ldr	r3, [pc, #348]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10f      	bne.n	8005386 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005366:	4b54      	ldr	r3, [pc, #336]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d109      	bne.n	8005386 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005376:	e006      	b.n	8005386 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	73fb      	strb	r3, [r7, #15]
      break;
 800537c:	e004      	b.n	8005388 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800537e:	bf00      	nop
 8005380:	e002      	b.n	8005388 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005382:	bf00      	nop
 8005384:	e000      	b.n	8005388 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005386:	bf00      	nop
    }

    if(status == HAL_OK)
 8005388:	7bfb      	ldrb	r3, [r7, #15]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10d      	bne.n	80053aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800538e:	4b4a      	ldr	r3, [pc, #296]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6819      	ldr	r1, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	3b01      	subs	r3, #1
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	430b      	orrs	r3, r1
 80053a4:	4944      	ldr	r1, [pc, #272]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d17d      	bne.n	80054ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053b0:	4b41      	ldr	r3, [pc, #260]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a40      	ldr	r2, [pc, #256]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053bc:	f7fc fa88 	bl	80018d0 <HAL_GetTick>
 80053c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053c2:	e009      	b.n	80053d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053c4:	f7fc fa84 	bl	80018d0 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d902      	bls.n	80053d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	73fb      	strb	r3, [r7, #15]
        break;
 80053d6:	e005      	b.n	80053e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053d8:	4b37      	ldr	r3, [pc, #220]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1ef      	bne.n	80053c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d160      	bne.n	80054ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d111      	bne.n	8005414 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053f0:	4b31      	ldr	r3, [pc, #196]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80053f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6892      	ldr	r2, [r2, #8]
 8005400:	0211      	lsls	r1, r2, #8
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	68d2      	ldr	r2, [r2, #12]
 8005406:	0912      	lsrs	r2, r2, #4
 8005408:	0452      	lsls	r2, r2, #17
 800540a:	430a      	orrs	r2, r1
 800540c:	492a      	ldr	r1, [pc, #168]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800540e:	4313      	orrs	r3, r2
 8005410:	610b      	str	r3, [r1, #16]
 8005412:	e027      	b.n	8005464 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d112      	bne.n	8005440 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800541a:	4b27      	ldr	r3, [pc, #156]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005422:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6892      	ldr	r2, [r2, #8]
 800542a:	0211      	lsls	r1, r2, #8
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6912      	ldr	r2, [r2, #16]
 8005430:	0852      	lsrs	r2, r2, #1
 8005432:	3a01      	subs	r2, #1
 8005434:	0552      	lsls	r2, r2, #21
 8005436:	430a      	orrs	r2, r1
 8005438:	491f      	ldr	r1, [pc, #124]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800543a:	4313      	orrs	r3, r2
 800543c:	610b      	str	r3, [r1, #16]
 800543e:	e011      	b.n	8005464 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005440:	4b1d      	ldr	r3, [pc, #116]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005448:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6892      	ldr	r2, [r2, #8]
 8005450:	0211      	lsls	r1, r2, #8
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6952      	ldr	r2, [r2, #20]
 8005456:	0852      	lsrs	r2, r2, #1
 8005458:	3a01      	subs	r2, #1
 800545a:	0652      	lsls	r2, r2, #25
 800545c:	430a      	orrs	r2, r1
 800545e:	4916      	ldr	r1, [pc, #88]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005460:	4313      	orrs	r3, r2
 8005462:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005464:	4b14      	ldr	r3, [pc, #80]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a13      	ldr	r2, [pc, #76]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800546a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800546e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005470:	f7fc fa2e 	bl	80018d0 <HAL_GetTick>
 8005474:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005476:	e009      	b.n	800548c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005478:	f7fc fa2a 	bl	80018d0 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d902      	bls.n	800548c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	73fb      	strb	r3, [r7, #15]
          break;
 800548a:	e005      	b.n	8005498 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800548c:	4b0a      	ldr	r3, [pc, #40]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0ef      	beq.n	8005478 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005498:	7bfb      	ldrb	r3, [r7, #15]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800549e:	4b06      	ldr	r3, [pc, #24]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	4904      	ldr	r1, [pc, #16]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	40021000 	.word	0x40021000

080054bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d018      	beq.n	8005508 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80054d6:	4b67      	ldr	r3, [pc, #412]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0203 	and.w	r2, r3, #3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d10d      	bne.n	8005502 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
       ||
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80054ee:	4b61      	ldr	r3, [pc, #388]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	091b      	lsrs	r3, r3, #4
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
       ||
 80054fe:	429a      	cmp	r2, r3
 8005500:	d047      	beq.n	8005592 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	73fb      	strb	r3, [r7, #15]
 8005506:	e044      	b.n	8005592 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b03      	cmp	r3, #3
 800550e:	d018      	beq.n	8005542 <RCCEx_PLLSAI2_Config+0x86>
 8005510:	2b03      	cmp	r3, #3
 8005512:	d825      	bhi.n	8005560 <RCCEx_PLLSAI2_Config+0xa4>
 8005514:	2b01      	cmp	r3, #1
 8005516:	d002      	beq.n	800551e <RCCEx_PLLSAI2_Config+0x62>
 8005518:	2b02      	cmp	r3, #2
 800551a:	d009      	beq.n	8005530 <RCCEx_PLLSAI2_Config+0x74>
 800551c:	e020      	b.n	8005560 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800551e:	4b55      	ldr	r3, [pc, #340]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d11d      	bne.n	8005566 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800552e:	e01a      	b.n	8005566 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005530:	4b50      	ldr	r3, [pc, #320]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005538:	2b00      	cmp	r3, #0
 800553a:	d116      	bne.n	800556a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005540:	e013      	b.n	800556a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005542:	4b4c      	ldr	r3, [pc, #304]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10f      	bne.n	800556e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800554e:	4b49      	ldr	r3, [pc, #292]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d109      	bne.n	800556e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800555e:	e006      	b.n	800556e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	73fb      	strb	r3, [r7, #15]
      break;
 8005564:	e004      	b.n	8005570 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005566:	bf00      	nop
 8005568:	e002      	b.n	8005570 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800556a:	bf00      	nop
 800556c:	e000      	b.n	8005570 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800556e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10d      	bne.n	8005592 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005576:	4b3f      	ldr	r3, [pc, #252]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6819      	ldr	r1, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	3b01      	subs	r3, #1
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	430b      	orrs	r3, r1
 800558c:	4939      	ldr	r1, [pc, #228]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 800558e:	4313      	orrs	r3, r2
 8005590:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d167      	bne.n	8005668 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005598:	4b36      	ldr	r3, [pc, #216]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a35      	ldr	r2, [pc, #212]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 800559e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a4:	f7fc f994 	bl	80018d0 <HAL_GetTick>
 80055a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055aa:	e009      	b.n	80055c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055ac:	f7fc f990 	bl	80018d0 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d902      	bls.n	80055c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	73fb      	strb	r3, [r7, #15]
        break;
 80055be:	e005      	b.n	80055cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055c0:	4b2c      	ldr	r3, [pc, #176]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1ef      	bne.n	80055ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d14a      	bne.n	8005668 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d111      	bne.n	80055fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055d8:	4b26      	ldr	r3, [pc, #152]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80055e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6892      	ldr	r2, [r2, #8]
 80055e8:	0211      	lsls	r1, r2, #8
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	68d2      	ldr	r2, [r2, #12]
 80055ee:	0912      	lsrs	r2, r2, #4
 80055f0:	0452      	lsls	r2, r2, #17
 80055f2:	430a      	orrs	r2, r1
 80055f4:	491f      	ldr	r1, [pc, #124]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	614b      	str	r3, [r1, #20]
 80055fa:	e011      	b.n	8005620 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005604:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6892      	ldr	r2, [r2, #8]
 800560c:	0211      	lsls	r1, r2, #8
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6912      	ldr	r2, [r2, #16]
 8005612:	0852      	lsrs	r2, r2, #1
 8005614:	3a01      	subs	r2, #1
 8005616:	0652      	lsls	r2, r2, #25
 8005618:	430a      	orrs	r2, r1
 800561a:	4916      	ldr	r1, [pc, #88]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 800561c:	4313      	orrs	r3, r2
 800561e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005620:	4b14      	ldr	r3, [pc, #80]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a13      	ldr	r2, [pc, #76]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800562a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562c:	f7fc f950 	bl	80018d0 <HAL_GetTick>
 8005630:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005632:	e009      	b.n	8005648 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005634:	f7fc f94c 	bl	80018d0 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d902      	bls.n	8005648 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	73fb      	strb	r3, [r7, #15]
          break;
 8005646:	e005      	b.n	8005654 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005648:	4b0a      	ldr	r3, [pc, #40]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0ef      	beq.n	8005634 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800565a:	4b06      	ldr	r3, [pc, #24]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	4904      	ldr	r1, [pc, #16]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005664:	4313      	orrs	r3, r2
 8005666:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005668:	7bfb      	ldrb	r3, [r7, #15]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40021000 	.word	0x40021000

08005678 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e095      	b.n	80057b6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568e:	2b00      	cmp	r3, #0
 8005690:	d108      	bne.n	80056a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800569a:	d009      	beq.n	80056b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	61da      	str	r2, [r3, #28]
 80056a2:	e005      	b.n	80056b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7fb fdea 	bl	80012a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056f0:	d902      	bls.n	80056f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80056f2:	2300      	movs	r3, #0
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	e002      	b.n	80056fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80056fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005706:	d007      	beq.n	8005718 <HAL_SPI_Init+0xa0>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005710:	d002      	beq.n	8005718 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005728:	431a      	orrs	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	431a      	orrs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005750:	431a      	orrs	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800575a:	ea42 0103 	orr.w	r1, r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005762:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	0c1b      	lsrs	r3, r3, #16
 8005774:	f003 0204 	and.w	r2, r3, #4
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577c:	f003 0310 	and.w	r3, r3, #16
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005794:	ea42 0103 	orr.w	r1, r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b082      	sub	sp, #8
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e049      	b.n	8005864 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d106      	bne.n	80057ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7fb fda1 	bl	800132c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2202      	movs	r2, #2
 80057ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3304      	adds	r3, #4
 80057fa:	4619      	mov	r1, r3
 80057fc:	4610      	mov	r0, r2
 80057fe:	f000 f96f 	bl	8005ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b01      	cmp	r3, #1
 800587e:	d001      	beq.n	8005884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e04f      	b.n	8005924 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0201 	orr.w	r2, r2, #1
 800589a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a23      	ldr	r2, [pc, #140]	@ (8005930 <HAL_TIM_Base_Start_IT+0xc4>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d01d      	beq.n	80058e2 <HAL_TIM_Base_Start_IT+0x76>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ae:	d018      	beq.n	80058e2 <HAL_TIM_Base_Start_IT+0x76>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1f      	ldr	r2, [pc, #124]	@ (8005934 <HAL_TIM_Base_Start_IT+0xc8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d013      	beq.n	80058e2 <HAL_TIM_Base_Start_IT+0x76>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1e      	ldr	r2, [pc, #120]	@ (8005938 <HAL_TIM_Base_Start_IT+0xcc>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00e      	beq.n	80058e2 <HAL_TIM_Base_Start_IT+0x76>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1c      	ldr	r2, [pc, #112]	@ (800593c <HAL_TIM_Base_Start_IT+0xd0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d009      	beq.n	80058e2 <HAL_TIM_Base_Start_IT+0x76>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005940 <HAL_TIM_Base_Start_IT+0xd4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d004      	beq.n	80058e2 <HAL_TIM_Base_Start_IT+0x76>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a19      	ldr	r2, [pc, #100]	@ (8005944 <HAL_TIM_Base_Start_IT+0xd8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d115      	bne.n	800590e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	4b17      	ldr	r3, [pc, #92]	@ (8005948 <HAL_TIM_Base_Start_IT+0xdc>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b06      	cmp	r3, #6
 80058f2:	d015      	beq.n	8005920 <HAL_TIM_Base_Start_IT+0xb4>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058fa:	d011      	beq.n	8005920 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800590c:	e008      	b.n	8005920 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f042 0201 	orr.w	r2, r2, #1
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	e000      	b.n	8005922 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005920:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	40012c00 	.word	0x40012c00
 8005934:	40000400 	.word	0x40000400
 8005938:	40000800 	.word	0x40000800
 800593c:	40000c00 	.word	0x40000c00
 8005940:	40013400 	.word	0x40013400
 8005944:	40014000 	.word	0x40014000
 8005948:	00010007 	.word	0x00010007

0800594c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_TIM_ConfigClockSource+0x1c>
 8005964:	2302      	movs	r3, #2
 8005966:	e0b6      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x18a>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005986:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800598a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005992:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059a4:	d03e      	beq.n	8005a24 <HAL_TIM_ConfigClockSource+0xd8>
 80059a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059aa:	f200 8087 	bhi.w	8005abc <HAL_TIM_ConfigClockSource+0x170>
 80059ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059b2:	f000 8086 	beq.w	8005ac2 <HAL_TIM_ConfigClockSource+0x176>
 80059b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ba:	d87f      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x170>
 80059bc:	2b70      	cmp	r3, #112	@ 0x70
 80059be:	d01a      	beq.n	80059f6 <HAL_TIM_ConfigClockSource+0xaa>
 80059c0:	2b70      	cmp	r3, #112	@ 0x70
 80059c2:	d87b      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x170>
 80059c4:	2b60      	cmp	r3, #96	@ 0x60
 80059c6:	d050      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x11e>
 80059c8:	2b60      	cmp	r3, #96	@ 0x60
 80059ca:	d877      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x170>
 80059cc:	2b50      	cmp	r3, #80	@ 0x50
 80059ce:	d03c      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0xfe>
 80059d0:	2b50      	cmp	r3, #80	@ 0x50
 80059d2:	d873      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x170>
 80059d4:	2b40      	cmp	r3, #64	@ 0x40
 80059d6:	d058      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x13e>
 80059d8:	2b40      	cmp	r3, #64	@ 0x40
 80059da:	d86f      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x170>
 80059dc:	2b30      	cmp	r3, #48	@ 0x30
 80059de:	d064      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15e>
 80059e0:	2b30      	cmp	r3, #48	@ 0x30
 80059e2:	d86b      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x170>
 80059e4:	2b20      	cmp	r3, #32
 80059e6:	d060      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15e>
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d867      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x170>
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d05c      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15e>
 80059f0:	2b10      	cmp	r3, #16
 80059f2:	d05a      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15e>
 80059f4:	e062      	b.n	8005abc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a06:	f000 f98b 	bl	8005d20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	609a      	str	r2, [r3, #8]
      break;
 8005a22:	e04f      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a34:	f000 f974 	bl	8005d20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a46:	609a      	str	r2, [r3, #8]
      break;
 8005a48:	e03c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a56:	461a      	mov	r2, r3
 8005a58:	f000 f8e8 	bl	8005c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2150      	movs	r1, #80	@ 0x50
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 f941 	bl	8005cea <TIM_ITRx_SetConfig>
      break;
 8005a68:	e02c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a76:	461a      	mov	r2, r3
 8005a78:	f000 f907 	bl	8005c8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2160      	movs	r1, #96	@ 0x60
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 f931 	bl	8005cea <TIM_ITRx_SetConfig>
      break;
 8005a88:	e01c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a96:	461a      	mov	r2, r3
 8005a98:	f000 f8c8 	bl	8005c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2140      	movs	r1, #64	@ 0x40
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 f921 	bl	8005cea <TIM_ITRx_SetConfig>
      break;
 8005aa8:	e00c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	f000 f918 	bl	8005cea <TIM_ITRx_SetConfig>
      break;
 8005aba:	e003      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac0:	e000      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005ac2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a46      	ldr	r2, [pc, #280]	@ (8005c0c <TIM_Base_SetConfig+0x12c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d013      	beq.n	8005b20 <TIM_Base_SetConfig+0x40>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005afe:	d00f      	beq.n	8005b20 <TIM_Base_SetConfig+0x40>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a43      	ldr	r2, [pc, #268]	@ (8005c10 <TIM_Base_SetConfig+0x130>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d00b      	beq.n	8005b20 <TIM_Base_SetConfig+0x40>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a42      	ldr	r2, [pc, #264]	@ (8005c14 <TIM_Base_SetConfig+0x134>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d007      	beq.n	8005b20 <TIM_Base_SetConfig+0x40>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a41      	ldr	r2, [pc, #260]	@ (8005c18 <TIM_Base_SetConfig+0x138>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d003      	beq.n	8005b20 <TIM_Base_SetConfig+0x40>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a40      	ldr	r2, [pc, #256]	@ (8005c1c <TIM_Base_SetConfig+0x13c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d108      	bne.n	8005b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a35      	ldr	r2, [pc, #212]	@ (8005c0c <TIM_Base_SetConfig+0x12c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d01f      	beq.n	8005b7a <TIM_Base_SetConfig+0x9a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b40:	d01b      	beq.n	8005b7a <TIM_Base_SetConfig+0x9a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a32      	ldr	r2, [pc, #200]	@ (8005c10 <TIM_Base_SetConfig+0x130>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d017      	beq.n	8005b7a <TIM_Base_SetConfig+0x9a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a31      	ldr	r2, [pc, #196]	@ (8005c14 <TIM_Base_SetConfig+0x134>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <TIM_Base_SetConfig+0x9a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a30      	ldr	r2, [pc, #192]	@ (8005c18 <TIM_Base_SetConfig+0x138>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00f      	beq.n	8005b7a <TIM_Base_SetConfig+0x9a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a2f      	ldr	r2, [pc, #188]	@ (8005c1c <TIM_Base_SetConfig+0x13c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00b      	beq.n	8005b7a <TIM_Base_SetConfig+0x9a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a2e      	ldr	r2, [pc, #184]	@ (8005c20 <TIM_Base_SetConfig+0x140>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d007      	beq.n	8005b7a <TIM_Base_SetConfig+0x9a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a2d      	ldr	r2, [pc, #180]	@ (8005c24 <TIM_Base_SetConfig+0x144>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d003      	beq.n	8005b7a <TIM_Base_SetConfig+0x9a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a2c      	ldr	r2, [pc, #176]	@ (8005c28 <TIM_Base_SetConfig+0x148>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d108      	bne.n	8005b8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a16      	ldr	r2, [pc, #88]	@ (8005c0c <TIM_Base_SetConfig+0x12c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00f      	beq.n	8005bd8 <TIM_Base_SetConfig+0xf8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a18      	ldr	r2, [pc, #96]	@ (8005c1c <TIM_Base_SetConfig+0x13c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00b      	beq.n	8005bd8 <TIM_Base_SetConfig+0xf8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a17      	ldr	r2, [pc, #92]	@ (8005c20 <TIM_Base_SetConfig+0x140>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d007      	beq.n	8005bd8 <TIM_Base_SetConfig+0xf8>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a16      	ldr	r2, [pc, #88]	@ (8005c24 <TIM_Base_SetConfig+0x144>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d003      	beq.n	8005bd8 <TIM_Base_SetConfig+0xf8>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a15      	ldr	r2, [pc, #84]	@ (8005c28 <TIM_Base_SetConfig+0x148>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d103      	bne.n	8005be0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	691a      	ldr	r2, [r3, #16]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d105      	bne.n	8005bfe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f023 0201 	bic.w	r2, r3, #1
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	611a      	str	r2, [r3, #16]
  }
}
 8005bfe:	bf00      	nop
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40012c00 	.word	0x40012c00
 8005c10:	40000400 	.word	0x40000400
 8005c14:	40000800 	.word	0x40000800
 8005c18:	40000c00 	.word	0x40000c00
 8005c1c:	40013400 	.word	0x40013400
 8005c20:	40014000 	.word	0x40014000
 8005c24:	40014400 	.word	0x40014400
 8005c28:	40014800 	.word	0x40014800

08005c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f023 0201 	bic.w	r2, r3, #1
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f023 030a 	bic.w	r3, r3, #10
 8005c68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	621a      	str	r2, [r3, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b087      	sub	sp, #28
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	60f8      	str	r0, [r7, #12]
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	f023 0210 	bic.w	r2, r3, #16
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	031b      	lsls	r3, r3, #12
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	621a      	str	r2, [r3, #32]
}
 8005cde:	bf00      	nop
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b085      	sub	sp, #20
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	f043 0307 	orr.w	r3, r3, #7
 8005d0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	609a      	str	r2, [r3, #8]
}
 8005d14:	bf00      	nop
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	021a      	lsls	r2, r3, #8
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	609a      	str	r2, [r3, #8]
}
 8005d54:	bf00      	nop
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e068      	b.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a2e      	ldr	r2, [pc, #184]	@ (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d004      	beq.n	8005dac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a2d      	ldr	r2, [pc, #180]	@ (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d108      	bne.n	8005dbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005db2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a1e      	ldr	r2, [pc, #120]	@ (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d01d      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dea:	d018      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d013      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a1a      	ldr	r2, [pc, #104]	@ (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00e      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a18      	ldr	r2, [pc, #96]	@ (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d009      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a13      	ldr	r2, [pc, #76]	@ (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d004      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a14      	ldr	r2, [pc, #80]	@ (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d10c      	bne.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40012c00 	.word	0x40012c00
 8005e5c:	40013400 	.word	0x40013400
 8005e60:	40000400 	.word	0x40000400
 8005e64:	40000800 	.word	0x40000800
 8005e68:	40000c00 	.word	0x40000c00
 8005e6c:	40014000 	.word	0x40014000

08005e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e040      	b.n	8005f04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d106      	bne.n	8005e98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7fb fa6a 	bl	800136c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2224      	movs	r2, #36	@ 0x24
 8005e9c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0201 	bic.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fb6a 	bl	8006590 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f8af 	bl	8006020 <UART_SetConfig>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e01b      	b.n	8005f04 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005eea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0201 	orr.w	r2, r2, #1
 8005efa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fbe9 	bl	80066d4 <UART_CheckIdleState>
 8005f02:	4603      	mov	r3, r0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b08a      	sub	sp, #40	@ 0x28
 8005f10:	af02      	add	r7, sp, #8
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	d177      	bne.n	8006014 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d002      	beq.n	8005f30 <HAL_UART_Transmit+0x24>
 8005f2a:	88fb      	ldrh	r3, [r7, #6]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e070      	b.n	8006016 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2221      	movs	r2, #33	@ 0x21
 8005f40:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f42:	f7fb fcc5 	bl	80018d0 <HAL_GetTick>
 8005f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	88fa      	ldrh	r2, [r7, #6]
 8005f4c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	88fa      	ldrh	r2, [r7, #6]
 8005f54:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f60:	d108      	bne.n	8005f74 <HAL_UART_Transmit+0x68>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d104      	bne.n	8005f74 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	61bb      	str	r3, [r7, #24]
 8005f72:	e003      	b.n	8005f7c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f7c:	e02f      	b.n	8005fde <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2200      	movs	r2, #0
 8005f86:	2180      	movs	r1, #128	@ 0x80
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 fc4b 	bl	8006824 <UART_WaitOnFlagUntilTimeout>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d004      	beq.n	8005f9e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2220      	movs	r2, #32
 8005f98:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e03b      	b.n	8006016 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10b      	bne.n	8005fbc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	881a      	ldrh	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fb0:	b292      	uxth	r2, r2
 8005fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	3302      	adds	r3, #2
 8005fb8:	61bb      	str	r3, [r7, #24]
 8005fba:	e007      	b.n	8005fcc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	781a      	ldrb	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1c9      	bne.n	8005f7e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2140      	movs	r1, #64	@ 0x40
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fc15 	bl	8006824 <UART_WaitOnFlagUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e005      	b.n	8006016 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2220      	movs	r2, #32
 800600e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006010:	2300      	movs	r3, #0
 8006012:	e000      	b.n	8006016 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006014:	2302      	movs	r3, #2
  }
}
 8006016:	4618      	mov	r0, r3
 8006018:	3720      	adds	r7, #32
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006024:	b08a      	sub	sp, #40	@ 0x28
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	431a      	orrs	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	431a      	orrs	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	4313      	orrs	r3, r2
 8006046:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	4ba4      	ldr	r3, [pc, #656]	@ (80062e0 <UART_SetConfig+0x2c0>)
 8006050:	4013      	ands	r3, r2
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	6812      	ldr	r2, [r2, #0]
 8006056:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006058:	430b      	orrs	r3, r1
 800605a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a99      	ldr	r2, [pc, #612]	@ (80062e4 <UART_SetConfig+0x2c4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d004      	beq.n	800608c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006088:	4313      	orrs	r3, r2
 800608a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800609c:	430a      	orrs	r2, r1
 800609e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a90      	ldr	r2, [pc, #576]	@ (80062e8 <UART_SetConfig+0x2c8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d126      	bne.n	80060f8 <UART_SetConfig+0xd8>
 80060aa:	4b90      	ldr	r3, [pc, #576]	@ (80062ec <UART_SetConfig+0x2cc>)
 80060ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060b0:	f003 0303 	and.w	r3, r3, #3
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d81b      	bhi.n	80060f0 <UART_SetConfig+0xd0>
 80060b8:	a201      	add	r2, pc, #4	@ (adr r2, 80060c0 <UART_SetConfig+0xa0>)
 80060ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060be:	bf00      	nop
 80060c0:	080060d1 	.word	0x080060d1
 80060c4:	080060e1 	.word	0x080060e1
 80060c8:	080060d9 	.word	0x080060d9
 80060cc:	080060e9 	.word	0x080060e9
 80060d0:	2301      	movs	r3, #1
 80060d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060d6:	e116      	b.n	8006306 <UART_SetConfig+0x2e6>
 80060d8:	2302      	movs	r3, #2
 80060da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060de:	e112      	b.n	8006306 <UART_SetConfig+0x2e6>
 80060e0:	2304      	movs	r3, #4
 80060e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060e6:	e10e      	b.n	8006306 <UART_SetConfig+0x2e6>
 80060e8:	2308      	movs	r3, #8
 80060ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ee:	e10a      	b.n	8006306 <UART_SetConfig+0x2e6>
 80060f0:	2310      	movs	r3, #16
 80060f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060f6:	e106      	b.n	8006306 <UART_SetConfig+0x2e6>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a7c      	ldr	r2, [pc, #496]	@ (80062f0 <UART_SetConfig+0x2d0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d138      	bne.n	8006174 <UART_SetConfig+0x154>
 8006102:	4b7a      	ldr	r3, [pc, #488]	@ (80062ec <UART_SetConfig+0x2cc>)
 8006104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006108:	f003 030c 	and.w	r3, r3, #12
 800610c:	2b0c      	cmp	r3, #12
 800610e:	d82d      	bhi.n	800616c <UART_SetConfig+0x14c>
 8006110:	a201      	add	r2, pc, #4	@ (adr r2, 8006118 <UART_SetConfig+0xf8>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	0800614d 	.word	0x0800614d
 800611c:	0800616d 	.word	0x0800616d
 8006120:	0800616d 	.word	0x0800616d
 8006124:	0800616d 	.word	0x0800616d
 8006128:	0800615d 	.word	0x0800615d
 800612c:	0800616d 	.word	0x0800616d
 8006130:	0800616d 	.word	0x0800616d
 8006134:	0800616d 	.word	0x0800616d
 8006138:	08006155 	.word	0x08006155
 800613c:	0800616d 	.word	0x0800616d
 8006140:	0800616d 	.word	0x0800616d
 8006144:	0800616d 	.word	0x0800616d
 8006148:	08006165 	.word	0x08006165
 800614c:	2300      	movs	r3, #0
 800614e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006152:	e0d8      	b.n	8006306 <UART_SetConfig+0x2e6>
 8006154:	2302      	movs	r3, #2
 8006156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800615a:	e0d4      	b.n	8006306 <UART_SetConfig+0x2e6>
 800615c:	2304      	movs	r3, #4
 800615e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006162:	e0d0      	b.n	8006306 <UART_SetConfig+0x2e6>
 8006164:	2308      	movs	r3, #8
 8006166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800616a:	e0cc      	b.n	8006306 <UART_SetConfig+0x2e6>
 800616c:	2310      	movs	r3, #16
 800616e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006172:	e0c8      	b.n	8006306 <UART_SetConfig+0x2e6>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a5e      	ldr	r2, [pc, #376]	@ (80062f4 <UART_SetConfig+0x2d4>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d125      	bne.n	80061ca <UART_SetConfig+0x1aa>
 800617e:	4b5b      	ldr	r3, [pc, #364]	@ (80062ec <UART_SetConfig+0x2cc>)
 8006180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006184:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006188:	2b30      	cmp	r3, #48	@ 0x30
 800618a:	d016      	beq.n	80061ba <UART_SetConfig+0x19a>
 800618c:	2b30      	cmp	r3, #48	@ 0x30
 800618e:	d818      	bhi.n	80061c2 <UART_SetConfig+0x1a2>
 8006190:	2b20      	cmp	r3, #32
 8006192:	d00a      	beq.n	80061aa <UART_SetConfig+0x18a>
 8006194:	2b20      	cmp	r3, #32
 8006196:	d814      	bhi.n	80061c2 <UART_SetConfig+0x1a2>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <UART_SetConfig+0x182>
 800619c:	2b10      	cmp	r3, #16
 800619e:	d008      	beq.n	80061b2 <UART_SetConfig+0x192>
 80061a0:	e00f      	b.n	80061c2 <UART_SetConfig+0x1a2>
 80061a2:	2300      	movs	r3, #0
 80061a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061a8:	e0ad      	b.n	8006306 <UART_SetConfig+0x2e6>
 80061aa:	2302      	movs	r3, #2
 80061ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061b0:	e0a9      	b.n	8006306 <UART_SetConfig+0x2e6>
 80061b2:	2304      	movs	r3, #4
 80061b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061b8:	e0a5      	b.n	8006306 <UART_SetConfig+0x2e6>
 80061ba:	2308      	movs	r3, #8
 80061bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061c0:	e0a1      	b.n	8006306 <UART_SetConfig+0x2e6>
 80061c2:	2310      	movs	r3, #16
 80061c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061c8:	e09d      	b.n	8006306 <UART_SetConfig+0x2e6>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a4a      	ldr	r2, [pc, #296]	@ (80062f8 <UART_SetConfig+0x2d8>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d125      	bne.n	8006220 <UART_SetConfig+0x200>
 80061d4:	4b45      	ldr	r3, [pc, #276]	@ (80062ec <UART_SetConfig+0x2cc>)
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80061de:	2bc0      	cmp	r3, #192	@ 0xc0
 80061e0:	d016      	beq.n	8006210 <UART_SetConfig+0x1f0>
 80061e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80061e4:	d818      	bhi.n	8006218 <UART_SetConfig+0x1f8>
 80061e6:	2b80      	cmp	r3, #128	@ 0x80
 80061e8:	d00a      	beq.n	8006200 <UART_SetConfig+0x1e0>
 80061ea:	2b80      	cmp	r3, #128	@ 0x80
 80061ec:	d814      	bhi.n	8006218 <UART_SetConfig+0x1f8>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <UART_SetConfig+0x1d8>
 80061f2:	2b40      	cmp	r3, #64	@ 0x40
 80061f4:	d008      	beq.n	8006208 <UART_SetConfig+0x1e8>
 80061f6:	e00f      	b.n	8006218 <UART_SetConfig+0x1f8>
 80061f8:	2300      	movs	r3, #0
 80061fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061fe:	e082      	b.n	8006306 <UART_SetConfig+0x2e6>
 8006200:	2302      	movs	r3, #2
 8006202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006206:	e07e      	b.n	8006306 <UART_SetConfig+0x2e6>
 8006208:	2304      	movs	r3, #4
 800620a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800620e:	e07a      	b.n	8006306 <UART_SetConfig+0x2e6>
 8006210:	2308      	movs	r3, #8
 8006212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006216:	e076      	b.n	8006306 <UART_SetConfig+0x2e6>
 8006218:	2310      	movs	r3, #16
 800621a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800621e:	e072      	b.n	8006306 <UART_SetConfig+0x2e6>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a35      	ldr	r2, [pc, #212]	@ (80062fc <UART_SetConfig+0x2dc>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d12a      	bne.n	8006280 <UART_SetConfig+0x260>
 800622a:	4b30      	ldr	r3, [pc, #192]	@ (80062ec <UART_SetConfig+0x2cc>)
 800622c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006230:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006234:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006238:	d01a      	beq.n	8006270 <UART_SetConfig+0x250>
 800623a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800623e:	d81b      	bhi.n	8006278 <UART_SetConfig+0x258>
 8006240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006244:	d00c      	beq.n	8006260 <UART_SetConfig+0x240>
 8006246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800624a:	d815      	bhi.n	8006278 <UART_SetConfig+0x258>
 800624c:	2b00      	cmp	r3, #0
 800624e:	d003      	beq.n	8006258 <UART_SetConfig+0x238>
 8006250:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006254:	d008      	beq.n	8006268 <UART_SetConfig+0x248>
 8006256:	e00f      	b.n	8006278 <UART_SetConfig+0x258>
 8006258:	2300      	movs	r3, #0
 800625a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800625e:	e052      	b.n	8006306 <UART_SetConfig+0x2e6>
 8006260:	2302      	movs	r3, #2
 8006262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006266:	e04e      	b.n	8006306 <UART_SetConfig+0x2e6>
 8006268:	2304      	movs	r3, #4
 800626a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800626e:	e04a      	b.n	8006306 <UART_SetConfig+0x2e6>
 8006270:	2308      	movs	r3, #8
 8006272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006276:	e046      	b.n	8006306 <UART_SetConfig+0x2e6>
 8006278:	2310      	movs	r3, #16
 800627a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800627e:	e042      	b.n	8006306 <UART_SetConfig+0x2e6>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a17      	ldr	r2, [pc, #92]	@ (80062e4 <UART_SetConfig+0x2c4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d13a      	bne.n	8006300 <UART_SetConfig+0x2e0>
 800628a:	4b18      	ldr	r3, [pc, #96]	@ (80062ec <UART_SetConfig+0x2cc>)
 800628c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006290:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006294:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006298:	d01a      	beq.n	80062d0 <UART_SetConfig+0x2b0>
 800629a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800629e:	d81b      	bhi.n	80062d8 <UART_SetConfig+0x2b8>
 80062a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062a4:	d00c      	beq.n	80062c0 <UART_SetConfig+0x2a0>
 80062a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062aa:	d815      	bhi.n	80062d8 <UART_SetConfig+0x2b8>
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <UART_SetConfig+0x298>
 80062b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062b4:	d008      	beq.n	80062c8 <UART_SetConfig+0x2a8>
 80062b6:	e00f      	b.n	80062d8 <UART_SetConfig+0x2b8>
 80062b8:	2300      	movs	r3, #0
 80062ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062be:	e022      	b.n	8006306 <UART_SetConfig+0x2e6>
 80062c0:	2302      	movs	r3, #2
 80062c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062c6:	e01e      	b.n	8006306 <UART_SetConfig+0x2e6>
 80062c8:	2304      	movs	r3, #4
 80062ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ce:	e01a      	b.n	8006306 <UART_SetConfig+0x2e6>
 80062d0:	2308      	movs	r3, #8
 80062d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062d6:	e016      	b.n	8006306 <UART_SetConfig+0x2e6>
 80062d8:	2310      	movs	r3, #16
 80062da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062de:	e012      	b.n	8006306 <UART_SetConfig+0x2e6>
 80062e0:	efff69f3 	.word	0xefff69f3
 80062e4:	40008000 	.word	0x40008000
 80062e8:	40013800 	.word	0x40013800
 80062ec:	40021000 	.word	0x40021000
 80062f0:	40004400 	.word	0x40004400
 80062f4:	40004800 	.word	0x40004800
 80062f8:	40004c00 	.word	0x40004c00
 80062fc:	40005000 	.word	0x40005000
 8006300:	2310      	movs	r3, #16
 8006302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a9f      	ldr	r2, [pc, #636]	@ (8006588 <UART_SetConfig+0x568>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d17a      	bne.n	8006406 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006310:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006314:	2b08      	cmp	r3, #8
 8006316:	d824      	bhi.n	8006362 <UART_SetConfig+0x342>
 8006318:	a201      	add	r2, pc, #4	@ (adr r2, 8006320 <UART_SetConfig+0x300>)
 800631a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631e:	bf00      	nop
 8006320:	08006345 	.word	0x08006345
 8006324:	08006363 	.word	0x08006363
 8006328:	0800634d 	.word	0x0800634d
 800632c:	08006363 	.word	0x08006363
 8006330:	08006353 	.word	0x08006353
 8006334:	08006363 	.word	0x08006363
 8006338:	08006363 	.word	0x08006363
 800633c:	08006363 	.word	0x08006363
 8006340:	0800635b 	.word	0x0800635b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006344:	f7fe fc40 	bl	8004bc8 <HAL_RCC_GetPCLK1Freq>
 8006348:	61f8      	str	r0, [r7, #28]
        break;
 800634a:	e010      	b.n	800636e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800634c:	4b8f      	ldr	r3, [pc, #572]	@ (800658c <UART_SetConfig+0x56c>)
 800634e:	61fb      	str	r3, [r7, #28]
        break;
 8006350:	e00d      	b.n	800636e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006352:	f7fe fba1 	bl	8004a98 <HAL_RCC_GetSysClockFreq>
 8006356:	61f8      	str	r0, [r7, #28]
        break;
 8006358:	e009      	b.n	800636e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800635a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800635e:	61fb      	str	r3, [r7, #28]
        break;
 8006360:	e005      	b.n	800636e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800636c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 80fb 	beq.w	800656c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	4613      	mov	r3, r2
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	4413      	add	r3, r2
 8006380:	69fa      	ldr	r2, [r7, #28]
 8006382:	429a      	cmp	r2, r3
 8006384:	d305      	bcc.n	8006392 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	429a      	cmp	r2, r3
 8006390:	d903      	bls.n	800639a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006398:	e0e8      	b.n	800656c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	2200      	movs	r2, #0
 800639e:	461c      	mov	r4, r3
 80063a0:	4615      	mov	r5, r2
 80063a2:	f04f 0200 	mov.w	r2, #0
 80063a6:	f04f 0300 	mov.w	r3, #0
 80063aa:	022b      	lsls	r3, r5, #8
 80063ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80063b0:	0222      	lsls	r2, r4, #8
 80063b2:	68f9      	ldr	r1, [r7, #12]
 80063b4:	6849      	ldr	r1, [r1, #4]
 80063b6:	0849      	lsrs	r1, r1, #1
 80063b8:	2000      	movs	r0, #0
 80063ba:	4688      	mov	r8, r1
 80063bc:	4681      	mov	r9, r0
 80063be:	eb12 0a08 	adds.w	sl, r2, r8
 80063c2:	eb43 0b09 	adc.w	fp, r3, r9
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	603b      	str	r3, [r7, #0]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063d4:	4650      	mov	r0, sl
 80063d6:	4659      	mov	r1, fp
 80063d8:	f7f9 ff4a 	bl	8000270 <__aeabi_uldivmod>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4613      	mov	r3, r2
 80063e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063ea:	d308      	bcc.n	80063fe <UART_SetConfig+0x3de>
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063f2:	d204      	bcs.n	80063fe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	60da      	str	r2, [r3, #12]
 80063fc:	e0b6      	b.n	800656c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006404:	e0b2      	b.n	800656c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800640e:	d15e      	bne.n	80064ce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006410:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006414:	2b08      	cmp	r3, #8
 8006416:	d828      	bhi.n	800646a <UART_SetConfig+0x44a>
 8006418:	a201      	add	r2, pc, #4	@ (adr r2, 8006420 <UART_SetConfig+0x400>)
 800641a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641e:	bf00      	nop
 8006420:	08006445 	.word	0x08006445
 8006424:	0800644d 	.word	0x0800644d
 8006428:	08006455 	.word	0x08006455
 800642c:	0800646b 	.word	0x0800646b
 8006430:	0800645b 	.word	0x0800645b
 8006434:	0800646b 	.word	0x0800646b
 8006438:	0800646b 	.word	0x0800646b
 800643c:	0800646b 	.word	0x0800646b
 8006440:	08006463 	.word	0x08006463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006444:	f7fe fbc0 	bl	8004bc8 <HAL_RCC_GetPCLK1Freq>
 8006448:	61f8      	str	r0, [r7, #28]
        break;
 800644a:	e014      	b.n	8006476 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800644c:	f7fe fbd2 	bl	8004bf4 <HAL_RCC_GetPCLK2Freq>
 8006450:	61f8      	str	r0, [r7, #28]
        break;
 8006452:	e010      	b.n	8006476 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006454:	4b4d      	ldr	r3, [pc, #308]	@ (800658c <UART_SetConfig+0x56c>)
 8006456:	61fb      	str	r3, [r7, #28]
        break;
 8006458:	e00d      	b.n	8006476 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800645a:	f7fe fb1d 	bl	8004a98 <HAL_RCC_GetSysClockFreq>
 800645e:	61f8      	str	r0, [r7, #28]
        break;
 8006460:	e009      	b.n	8006476 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006466:	61fb      	str	r3, [r7, #28]
        break;
 8006468:	e005      	b.n	8006476 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800646a:	2300      	movs	r3, #0
 800646c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006474:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d077      	beq.n	800656c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	005a      	lsls	r2, r3, #1
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	085b      	lsrs	r3, r3, #1
 8006486:	441a      	add	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006490:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	2b0f      	cmp	r3, #15
 8006496:	d916      	bls.n	80064c6 <UART_SetConfig+0x4a6>
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800649e:	d212      	bcs.n	80064c6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	f023 030f 	bic.w	r3, r3, #15
 80064a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	085b      	lsrs	r3, r3, #1
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	8afb      	ldrh	r3, [r7, #22]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	8afa      	ldrh	r2, [r7, #22]
 80064c2:	60da      	str	r2, [r3, #12]
 80064c4:	e052      	b.n	800656c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80064cc:	e04e      	b.n	800656c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80064d2:	2b08      	cmp	r3, #8
 80064d4:	d827      	bhi.n	8006526 <UART_SetConfig+0x506>
 80064d6:	a201      	add	r2, pc, #4	@ (adr r2, 80064dc <UART_SetConfig+0x4bc>)
 80064d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064dc:	08006501 	.word	0x08006501
 80064e0:	08006509 	.word	0x08006509
 80064e4:	08006511 	.word	0x08006511
 80064e8:	08006527 	.word	0x08006527
 80064ec:	08006517 	.word	0x08006517
 80064f0:	08006527 	.word	0x08006527
 80064f4:	08006527 	.word	0x08006527
 80064f8:	08006527 	.word	0x08006527
 80064fc:	0800651f 	.word	0x0800651f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006500:	f7fe fb62 	bl	8004bc8 <HAL_RCC_GetPCLK1Freq>
 8006504:	61f8      	str	r0, [r7, #28]
        break;
 8006506:	e014      	b.n	8006532 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006508:	f7fe fb74 	bl	8004bf4 <HAL_RCC_GetPCLK2Freq>
 800650c:	61f8      	str	r0, [r7, #28]
        break;
 800650e:	e010      	b.n	8006532 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006510:	4b1e      	ldr	r3, [pc, #120]	@ (800658c <UART_SetConfig+0x56c>)
 8006512:	61fb      	str	r3, [r7, #28]
        break;
 8006514:	e00d      	b.n	8006532 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006516:	f7fe fabf 	bl	8004a98 <HAL_RCC_GetSysClockFreq>
 800651a:	61f8      	str	r0, [r7, #28]
        break;
 800651c:	e009      	b.n	8006532 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800651e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006522:	61fb      	str	r3, [r7, #28]
        break;
 8006524:	e005      	b.n	8006532 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006526:	2300      	movs	r3, #0
 8006528:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006530:	bf00      	nop
    }

    if (pclk != 0U)
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d019      	beq.n	800656c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	085a      	lsrs	r2, r3, #1
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	441a      	add	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	fbb2 f3f3 	udiv	r3, r2, r3
 800654a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	2b0f      	cmp	r3, #15
 8006550:	d909      	bls.n	8006566 <UART_SetConfig+0x546>
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006558:	d205      	bcs.n	8006566 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60da      	str	r2, [r3, #12]
 8006564:	e002      	b.n	800656c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006578:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800657c:	4618      	mov	r0, r3
 800657e:	3728      	adds	r7, #40	@ 0x28
 8006580:	46bd      	mov	sp, r7
 8006582:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006586:	bf00      	nop
 8006588:	40008000 	.word	0x40008000
 800658c:	00f42400 	.word	0x00f42400

08006590 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659c:	f003 0308 	and.w	r3, r3, #8
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00a      	beq.n	80065ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00a      	beq.n	80065fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006602:	f003 0304 	and.w	r3, r3, #4
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00a      	beq.n	8006642 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006646:	f003 0320 	and.w	r3, r3, #32
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00a      	beq.n	8006664 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d01a      	beq.n	80066a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800668e:	d10a      	bne.n	80066a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	605a      	str	r2, [r3, #4]
  }
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b098      	sub	sp, #96	@ 0x60
 80066d8:	af02      	add	r7, sp, #8
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066e4:	f7fb f8f4 	bl	80018d0 <HAL_GetTick>
 80066e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d12e      	bne.n	8006756 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006700:	2200      	movs	r2, #0
 8006702:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f88c 	bl	8006824 <UART_WaitOnFlagUntilTimeout>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d021      	beq.n	8006756 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671a:	e853 3f00 	ldrex	r3, [r3]
 800671e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006722:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006726:	653b      	str	r3, [r7, #80]	@ 0x50
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	461a      	mov	r2, r3
 800672e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006730:	647b      	str	r3, [r7, #68]	@ 0x44
 8006732:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006734:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006736:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006738:	e841 2300 	strex	r3, r2, [r1]
 800673c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800673e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1e6      	bne.n	8006712 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2220      	movs	r2, #32
 8006748:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e062      	b.n	800681c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	2b04      	cmp	r3, #4
 8006762:	d149      	bne.n	80067f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006764:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800676c:	2200      	movs	r2, #0
 800676e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f856 	bl	8006824 <UART_WaitOnFlagUntilTimeout>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d03c      	beq.n	80067f8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006786:	e853 3f00 	ldrex	r3, [r3]
 800678a:	623b      	str	r3, [r7, #32]
   return(result);
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	461a      	mov	r2, r3
 800679a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800679c:	633b      	str	r3, [r7, #48]	@ 0x30
 800679e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067a4:	e841 2300 	strex	r3, r2, [r1]
 80067a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e6      	bne.n	800677e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3308      	adds	r3, #8
 80067b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	e853 3f00 	ldrex	r3, [r3]
 80067be:	60fb      	str	r3, [r7, #12]
   return(result);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f023 0301 	bic.w	r3, r3, #1
 80067c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3308      	adds	r3, #8
 80067ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067d0:	61fa      	str	r2, [r7, #28]
 80067d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d4:	69b9      	ldr	r1, [r7, #24]
 80067d6:	69fa      	ldr	r2, [r7, #28]
 80067d8:	e841 2300 	strex	r3, r2, [r1]
 80067dc:	617b      	str	r3, [r7, #20]
   return(result);
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1e5      	bne.n	80067b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e011      	b.n	800681c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2220      	movs	r2, #32
 80067fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3758      	adds	r7, #88	@ 0x58
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	603b      	str	r3, [r7, #0]
 8006830:	4613      	mov	r3, r2
 8006832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006834:	e04f      	b.n	80068d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683c:	d04b      	beq.n	80068d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800683e:	f7fb f847 	bl	80018d0 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	69ba      	ldr	r2, [r7, #24]
 800684a:	429a      	cmp	r2, r3
 800684c:	d302      	bcc.n	8006854 <UART_WaitOnFlagUntilTimeout+0x30>
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e04e      	b.n	80068f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0304 	and.w	r3, r3, #4
 8006862:	2b00      	cmp	r3, #0
 8006864:	d037      	beq.n	80068d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2b80      	cmp	r3, #128	@ 0x80
 800686a:	d034      	beq.n	80068d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b40      	cmp	r3, #64	@ 0x40
 8006870:	d031      	beq.n	80068d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	f003 0308 	and.w	r3, r3, #8
 800687c:	2b08      	cmp	r3, #8
 800687e:	d110      	bne.n	80068a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2208      	movs	r2, #8
 8006886:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 f838 	bl	80068fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2208      	movs	r2, #8
 8006892:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e029      	b.n	80068f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068b0:	d111      	bne.n	80068d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 f81e 	bl	80068fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2220      	movs	r2, #32
 80068c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e00f      	b.n	80068f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	69da      	ldr	r2, [r3, #28]
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	4013      	ands	r3, r2
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	bf0c      	ite	eq
 80068e6:	2301      	moveq	r3, #1
 80068e8:	2300      	movne	r3, #0
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	461a      	mov	r2, r3
 80068ee:	79fb      	ldrb	r3, [r7, #7]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d0a0      	beq.n	8006836 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068fe:	b480      	push	{r7}
 8006900:	b095      	sub	sp, #84	@ 0x54
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800690e:	e853 3f00 	ldrex	r3, [r3]
 8006912:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006916:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800691a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	461a      	mov	r2, r3
 8006922:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006924:	643b      	str	r3, [r7, #64]	@ 0x40
 8006926:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006928:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800692a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800692c:	e841 2300 	strex	r3, r2, [r1]
 8006930:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1e6      	bne.n	8006906 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3308      	adds	r3, #8
 800693e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	e853 3f00 	ldrex	r3, [r3]
 8006946:	61fb      	str	r3, [r7, #28]
   return(result);
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	f023 0301 	bic.w	r3, r3, #1
 800694e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3308      	adds	r3, #8
 8006956:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006958:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800695a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800695e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006960:	e841 2300 	strex	r3, r2, [r1]
 8006964:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1e5      	bne.n	8006938 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006970:	2b01      	cmp	r3, #1
 8006972:	d118      	bne.n	80069a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	60bb      	str	r3, [r7, #8]
   return(result);
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f023 0310 	bic.w	r3, r3, #16
 8006988:	647b      	str	r3, [r7, #68]	@ 0x44
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006992:	61bb      	str	r3, [r7, #24]
 8006994:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	6979      	ldr	r1, [r7, #20]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	613b      	str	r3, [r7, #16]
   return(result);
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e6      	bne.n	8006974 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80069ba:	bf00      	nop
 80069bc:	3754      	adds	r7, #84	@ 0x54
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069c6:	b084      	sub	sp, #16
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	f107 001c 	add.w	r0, r7, #28
 80069d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fa69 	bl	8006ebc <USB_CoreReset>
 80069ea:	4603      	mov	r3, r0
 80069ec:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80069ee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d106      	bne.n	8006a04 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069fa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	639a      	str	r2, [r3, #56]	@ 0x38
 8006a02:	e005      	b.n	8006a10 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a08:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a1c:	b004      	add	sp, #16
 8006a1e:	4770      	bx	lr

08006a20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f023 0201 	bic.w	r2, r3, #1
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a5e:	78fb      	ldrb	r3, [r7, #3]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d115      	bne.n	8006a90 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006a70:	200a      	movs	r0, #10
 8006a72:	f7fa ff39 	bl	80018e8 <HAL_Delay>
      ms += 10U;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	330a      	adds	r3, #10
 8006a7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fa0f 	bl	8006ea0 <USB_GetMode>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d01e      	beq.n	8006ac6 <USB_SetCurrentMode+0x84>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2bc7      	cmp	r3, #199	@ 0xc7
 8006a8c:	d9f0      	bls.n	8006a70 <USB_SetCurrentMode+0x2e>
 8006a8e:	e01a      	b.n	8006ac6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a90:	78fb      	ldrb	r3, [r7, #3]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d115      	bne.n	8006ac2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006aa2:	200a      	movs	r0, #10
 8006aa4:	f7fa ff20 	bl	80018e8 <HAL_Delay>
      ms += 10U;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	330a      	adds	r3, #10
 8006aac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f9f6 	bl	8006ea0 <USB_GetMode>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d005      	beq.n	8006ac6 <USB_SetCurrentMode+0x84>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2bc7      	cmp	r3, #199	@ 0xc7
 8006abe:	d9f0      	bls.n	8006aa2 <USB_SetCurrentMode+0x60>
 8006ac0:	e001      	b.n	8006ac6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e005      	b.n	8006ad2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2bc8      	cmp	r3, #200	@ 0xc8
 8006aca:	d101      	bne.n	8006ad0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e000      	b.n	8006ad2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006adc:	b084      	sub	sp, #16
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b086      	sub	sp, #24
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006aea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006af6:	2300      	movs	r3, #0
 8006af8:	613b      	str	r3, [r7, #16]
 8006afa:	e009      	b.n	8006b10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	3340      	adds	r3, #64	@ 0x40
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	2200      	movs	r2, #0
 8006b08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	613b      	str	r3, [r7, #16]
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	2b0e      	cmp	r3, #14
 8006b14:	d9f2      	bls.n	8006afc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b16:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d11c      	bne.n	8006b58 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b2c:	f043 0302 	orr.w	r3, r3, #2
 8006b30:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b36:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	601a      	str	r2, [r3, #0]
 8006b56:	e005      	b.n	8006b64 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b70:	2103      	movs	r1, #3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f95a 	bl	8006e2c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b78:	2110      	movs	r1, #16
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f8f6 	bl	8006d6c <USB_FlushTxFifo>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f920 	bl	8006dd0 <USB_FlushRxFifo>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bac:	461a      	mov	r2, r3
 8006bae:	2300      	movs	r3, #0
 8006bb0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bb8:	461a      	mov	r2, r3
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	613b      	str	r3, [r7, #16]
 8006bc2:	e043      	b.n	8006c4c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bda:	d118      	bne.n	8006c0e <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10a      	bne.n	8006bf8 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	e013      	b.n	8006c20 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c04:	461a      	mov	r2, r3
 8006c06:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c0a:	6013      	str	r3, [r2, #0]
 8006c0c:	e008      	b.n	8006c20 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	2300      	movs	r3, #0
 8006c30:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	613b      	str	r3, [r7, #16]
 8006c4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c50:	461a      	mov	r2, r3
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d3b5      	bcc.n	8006bc4 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	613b      	str	r3, [r7, #16]
 8006c5c:	e043      	b.n	8006ce6 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c74:	d118      	bne.n	8006ca8 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10a      	bne.n	8006c92 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c88:	461a      	mov	r2, r3
 8006c8a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	e013      	b.n	8006cba <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006ca4:	6013      	str	r3, [r2, #0]
 8006ca6:	e008      	b.n	8006cba <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	2300      	movs	r3, #0
 8006cca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cd8:	461a      	mov	r2, r3
 8006cda:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006cde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	613b      	str	r3, [r7, #16]
 8006ce6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006cea:	461a      	mov	r2, r3
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d3b5      	bcc.n	8006c5e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d04:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006d12:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	f043 0210 	orr.w	r2, r3, #16
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	699a      	ldr	r2, [r3, #24]
 8006d24:	4b10      	ldr	r3, [pc, #64]	@ (8006d68 <USB_DevInit+0x28c>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d2c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	f043 0208 	orr.w	r2, r3, #8
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d40:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d107      	bne.n	8006d58 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d50:	f043 0304 	orr.w	r3, r3, #4
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3718      	adds	r7, #24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d64:	b004      	add	sp, #16
 8006d66:	4770      	bx	lr
 8006d68:	803c3800 	.word	0x803c3800

08006d6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d76:	2300      	movs	r3, #0
 8006d78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d86:	d901      	bls.n	8006d8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e01b      	b.n	8006dc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	daf2      	bge.n	8006d7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	019b      	lsls	r3, r3, #6
 8006d9c:	f043 0220 	orr.w	r2, r3, #32
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	3301      	adds	r3, #1
 8006da8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006db0:	d901      	bls.n	8006db6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e006      	b.n	8006dc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	d0f0      	beq.n	8006da4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	3301      	adds	r3, #1
 8006de0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006de8:	d901      	bls.n	8006dee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e018      	b.n	8006e20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	daf2      	bge.n	8006ddc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2210      	movs	r2, #16
 8006dfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3301      	adds	r3, #1
 8006e04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e0c:	d901      	bls.n	8006e12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e006      	b.n	8006e20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	f003 0310 	and.w	r3, r3, #16
 8006e1a:	2b10      	cmp	r3, #16
 8006e1c:	d0f0      	beq.n	8006e00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	460b      	mov	r3, r1
 8006e36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	68f9      	ldr	r1, [r7, #12]
 8006e48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b085      	sub	sp, #20
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006e78:	f023 0303 	bic.w	r3, r3, #3
 8006e7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e8c:	f043 0302 	orr.w	r3, r3, #2
 8006e90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	f003 0301 	and.w	r3, r3, #1
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ed4:	d901      	bls.n	8006eda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e01b      	b.n	8006f12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	daf2      	bge.n	8006ec8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	f043 0201 	orr.w	r2, r3, #1
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006efe:	d901      	bls.n	8006f04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e006      	b.n	8006f12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d0f0      	beq.n	8006ef2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
	...

08006f20 <__NVIC_SetPriority>:
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	4603      	mov	r3, r0
 8006f28:	6039      	str	r1, [r7, #0]
 8006f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	db0a      	blt.n	8006f4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	490c      	ldr	r1, [pc, #48]	@ (8006f6c <__NVIC_SetPriority+0x4c>)
 8006f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f3e:	0112      	lsls	r2, r2, #4
 8006f40:	b2d2      	uxtb	r2, r2
 8006f42:	440b      	add	r3, r1
 8006f44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006f48:	e00a      	b.n	8006f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	4908      	ldr	r1, [pc, #32]	@ (8006f70 <__NVIC_SetPriority+0x50>)
 8006f50:	79fb      	ldrb	r3, [r7, #7]
 8006f52:	f003 030f 	and.w	r3, r3, #15
 8006f56:	3b04      	subs	r3, #4
 8006f58:	0112      	lsls	r2, r2, #4
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	440b      	add	r3, r1
 8006f5e:	761a      	strb	r2, [r3, #24]
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	e000e100 	.word	0xe000e100
 8006f70:	e000ed00 	.word	0xe000ed00

08006f74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006f74:	b580      	push	{r7, lr}
 8006f76:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006f78:	2100      	movs	r1, #0
 8006f7a:	f06f 0004 	mvn.w	r0, #4
 8006f7e:	f7ff ffcf 	bl	8006f20 <__NVIC_SetPriority>
#endif
}
 8006f82:	bf00      	nop
 8006f84:	bd80      	pop	{r7, pc}
	...

08006f88 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f8e:	f3ef 8305 	mrs	r3, IPSR
 8006f92:	603b      	str	r3, [r7, #0]
  return(result);
 8006f94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006f9a:	f06f 0305 	mvn.w	r3, #5
 8006f9e:	607b      	str	r3, [r7, #4]
 8006fa0:	e00c      	b.n	8006fbc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8006fcc <osKernelInitialize+0x44>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d105      	bne.n	8006fb6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006faa:	4b08      	ldr	r3, [pc, #32]	@ (8006fcc <osKernelInitialize+0x44>)
 8006fac:	2201      	movs	r2, #1
 8006fae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	607b      	str	r3, [r7, #4]
 8006fb4:	e002      	b.n	8006fbc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006fbc:	687b      	ldr	r3, [r7, #4]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	20000898 	.word	0x20000898

08006fd0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fd6:	f3ef 8305 	mrs	r3, IPSR
 8006fda:	603b      	str	r3, [r7, #0]
  return(result);
 8006fdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <osKernelStart+0x1a>
    stat = osErrorISR;
 8006fe2:	f06f 0305 	mvn.w	r3, #5
 8006fe6:	607b      	str	r3, [r7, #4]
 8006fe8:	e010      	b.n	800700c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006fea:	4b0b      	ldr	r3, [pc, #44]	@ (8007018 <osKernelStart+0x48>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d109      	bne.n	8007006 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006ff2:	f7ff ffbf 	bl	8006f74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006ff6:	4b08      	ldr	r3, [pc, #32]	@ (8007018 <osKernelStart+0x48>)
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ffc:	f001 fa18 	bl	8008430 <vTaskStartScheduler>
      stat = osOK;
 8007000:	2300      	movs	r3, #0
 8007002:	607b      	str	r3, [r7, #4]
 8007004:	e002      	b.n	800700c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007006:	f04f 33ff 	mov.w	r3, #4294967295
 800700a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800700c:	687b      	ldr	r3, [r7, #4]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	20000898 	.word	0x20000898

0800701c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800701c:	b580      	push	{r7, lr}
 800701e:	b08e      	sub	sp, #56	@ 0x38
 8007020:	af04      	add	r7, sp, #16
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007028:	2300      	movs	r3, #0
 800702a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800702c:	f3ef 8305 	mrs	r3, IPSR
 8007030:	617b      	str	r3, [r7, #20]
  return(result);
 8007032:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007034:	2b00      	cmp	r3, #0
 8007036:	d17e      	bne.n	8007136 <osThreadNew+0x11a>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d07b      	beq.n	8007136 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800703e:	2380      	movs	r3, #128	@ 0x80
 8007040:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007042:	2318      	movs	r3, #24
 8007044:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007046:	2300      	movs	r3, #0
 8007048:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800704a:	f04f 33ff 	mov.w	r3, #4294967295
 800704e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d045      	beq.n	80070e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <osThreadNew+0x48>
        name = attr->name;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d008      	beq.n	800708a <osThreadNew+0x6e>
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	2b38      	cmp	r3, #56	@ 0x38
 800707c:	d805      	bhi.n	800708a <osThreadNew+0x6e>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <osThreadNew+0x72>
        return (NULL);
 800708a:	2300      	movs	r3, #0
 800708c:	e054      	b.n	8007138 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	089b      	lsrs	r3, r3, #2
 800709c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00e      	beq.n	80070c4 <osThreadNew+0xa8>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	2b5b      	cmp	r3, #91	@ 0x5b
 80070ac:	d90a      	bls.n	80070c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d006      	beq.n	80070c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <osThreadNew+0xa8>
        mem = 1;
 80070be:	2301      	movs	r3, #1
 80070c0:	61bb      	str	r3, [r7, #24]
 80070c2:	e010      	b.n	80070e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10c      	bne.n	80070e6 <osThreadNew+0xca>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d108      	bne.n	80070e6 <osThreadNew+0xca>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d104      	bne.n	80070e6 <osThreadNew+0xca>
          mem = 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	61bb      	str	r3, [r7, #24]
 80070e0:	e001      	b.n	80070e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80070e2:	2300      	movs	r3, #0
 80070e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d110      	bne.n	800710e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070f4:	9202      	str	r2, [sp, #8]
 80070f6:	9301      	str	r3, [sp, #4]
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	6a3a      	ldr	r2, [r7, #32]
 8007100:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 ffee 	bl	80080e4 <xTaskCreateStatic>
 8007108:	4603      	mov	r3, r0
 800710a:	613b      	str	r3, [r7, #16]
 800710c:	e013      	b.n	8007136 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d110      	bne.n	8007136 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	b29a      	uxth	r2, r3
 8007118:	f107 0310 	add.w	r3, r7, #16
 800711c:	9301      	str	r3, [sp, #4]
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f001 f83c 	bl	80081a4 <xTaskCreate>
 800712c:	4603      	mov	r3, r0
 800712e:	2b01      	cmp	r3, #1
 8007130:	d001      	beq.n	8007136 <osThreadNew+0x11a>
            hTask = NULL;
 8007132:	2300      	movs	r3, #0
 8007134:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007136:	693b      	ldr	r3, [r7, #16]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3728      	adds	r7, #40	@ 0x28
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007140:	b580      	push	{r7, lr}
 8007142:	b08a      	sub	sp, #40	@ 0x28
 8007144:	af02      	add	r7, sp, #8
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800714c:	2300      	movs	r3, #0
 800714e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007150:	f3ef 8305 	mrs	r3, IPSR
 8007154:	613b      	str	r3, [r7, #16]
  return(result);
 8007156:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007158:	2b00      	cmp	r3, #0
 800715a:	d15f      	bne.n	800721c <osMessageQueueNew+0xdc>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d05c      	beq.n	800721c <osMessageQueueNew+0xdc>
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d059      	beq.n	800721c <osMessageQueueNew+0xdc>
    mem = -1;
 8007168:	f04f 33ff 	mov.w	r3, #4294967295
 800716c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d029      	beq.n	80071c8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d012      	beq.n	80071a2 <osMessageQueueNew+0x62>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	2b4f      	cmp	r3, #79	@ 0x4f
 8007182:	d90e      	bls.n	80071a2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00a      	beq.n	80071a2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	695a      	ldr	r2, [r3, #20]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	68b9      	ldr	r1, [r7, #8]
 8007194:	fb01 f303 	mul.w	r3, r1, r3
 8007198:	429a      	cmp	r2, r3
 800719a:	d302      	bcc.n	80071a2 <osMessageQueueNew+0x62>
        mem = 1;
 800719c:	2301      	movs	r3, #1
 800719e:	61bb      	str	r3, [r7, #24]
 80071a0:	e014      	b.n	80071cc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d110      	bne.n	80071cc <osMessageQueueNew+0x8c>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10c      	bne.n	80071cc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d108      	bne.n	80071cc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d104      	bne.n	80071cc <osMessageQueueNew+0x8c>
          mem = 0;
 80071c2:	2300      	movs	r3, #0
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	e001      	b.n	80071cc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80071c8:	2300      	movs	r3, #0
 80071ca:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d10b      	bne.n	80071ea <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	691a      	ldr	r2, [r3, #16]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	2100      	movs	r1, #0
 80071dc:	9100      	str	r1, [sp, #0]
 80071de:	68b9      	ldr	r1, [r7, #8]
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 fa31 	bl	8007648 <xQueueGenericCreateStatic>
 80071e6:	61f8      	str	r0, [r7, #28]
 80071e8:	e008      	b.n	80071fc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d105      	bne.n	80071fc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80071f0:	2200      	movs	r2, #0
 80071f2:	68b9      	ldr	r1, [r7, #8]
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 faa4 	bl	8007742 <xQueueGenericCreate>
 80071fa:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00c      	beq.n	800721c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <osMessageQueueNew+0xd0>
        name = attr->name;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	617b      	str	r3, [r7, #20]
 800720e:	e001      	b.n	8007214 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007210:	2300      	movs	r3, #0
 8007212:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007214:	6979      	ldr	r1, [r7, #20]
 8007216:	69f8      	ldr	r0, [r7, #28]
 8007218:	f000 ff06 	bl	8008028 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800721c:	69fb      	ldr	r3, [r7, #28]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3720      	adds	r7, #32
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007228:	b580      	push	{r7, lr}
 800722a:	b088      	sub	sp, #32
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	603b      	str	r3, [r7, #0]
 8007234:	4613      	mov	r3, r2
 8007236:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800723c:	2300      	movs	r3, #0
 800723e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007240:	f3ef 8305 	mrs	r3, IPSR
 8007244:	617b      	str	r3, [r7, #20]
  return(result);
 8007246:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007248:	2b00      	cmp	r3, #0
 800724a:	d028      	beq.n	800729e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d005      	beq.n	800725e <osMessageQueuePut+0x36>
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <osMessageQueuePut+0x36>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800725e:	f06f 0303 	mvn.w	r3, #3
 8007262:	61fb      	str	r3, [r7, #28]
 8007264:	e038      	b.n	80072d8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007266:	2300      	movs	r3, #0
 8007268:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800726a:	f107 0210 	add.w	r2, r7, #16
 800726e:	2300      	movs	r3, #0
 8007270:	68b9      	ldr	r1, [r7, #8]
 8007272:	69b8      	ldr	r0, [r7, #24]
 8007274:	f000 fbc6 	bl	8007a04 <xQueueGenericSendFromISR>
 8007278:	4603      	mov	r3, r0
 800727a:	2b01      	cmp	r3, #1
 800727c:	d003      	beq.n	8007286 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800727e:	f06f 0302 	mvn.w	r3, #2
 8007282:	61fb      	str	r3, [r7, #28]
 8007284:	e028      	b.n	80072d8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d025      	beq.n	80072d8 <osMessageQueuePut+0xb0>
 800728c:	4b15      	ldr	r3, [pc, #84]	@ (80072e4 <osMessageQueuePut+0xbc>)
 800728e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	e01c      	b.n	80072d8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <osMessageQueuePut+0x82>
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d103      	bne.n	80072b2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80072aa:	f06f 0303 	mvn.w	r3, #3
 80072ae:	61fb      	str	r3, [r7, #28]
 80072b0:	e012      	b.n	80072d8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80072b2:	2300      	movs	r3, #0
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	68b9      	ldr	r1, [r7, #8]
 80072b8:	69b8      	ldr	r0, [r7, #24]
 80072ba:	f000 faa1 	bl	8007800 <xQueueGenericSend>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d009      	beq.n	80072d8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80072ca:	f06f 0301 	mvn.w	r3, #1
 80072ce:	61fb      	str	r3, [r7, #28]
 80072d0:	e002      	b.n	80072d8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80072d2:	f06f 0302 	mvn.w	r3, #2
 80072d6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80072d8:	69fb      	ldr	r3, [r7, #28]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3720      	adds	r7, #32
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	e000ed04 	.word	0xe000ed04

080072e8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b088      	sub	sp, #32
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072fe:	f3ef 8305 	mrs	r3, IPSR
 8007302:	617b      	str	r3, [r7, #20]
  return(result);
 8007304:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007306:	2b00      	cmp	r3, #0
 8007308:	d028      	beq.n	800735c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d005      	beq.n	800731c <osMessageQueueGet+0x34>
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <osMessageQueueGet+0x34>
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800731c:	f06f 0303 	mvn.w	r3, #3
 8007320:	61fb      	str	r3, [r7, #28]
 8007322:	e037      	b.n	8007394 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007324:	2300      	movs	r3, #0
 8007326:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007328:	f107 0310 	add.w	r3, r7, #16
 800732c:	461a      	mov	r2, r3
 800732e:	68b9      	ldr	r1, [r7, #8]
 8007330:	69b8      	ldr	r0, [r7, #24]
 8007332:	f000 fce7 	bl	8007d04 <xQueueReceiveFromISR>
 8007336:	4603      	mov	r3, r0
 8007338:	2b01      	cmp	r3, #1
 800733a:	d003      	beq.n	8007344 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800733c:	f06f 0302 	mvn.w	r3, #2
 8007340:	61fb      	str	r3, [r7, #28]
 8007342:	e027      	b.n	8007394 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d024      	beq.n	8007394 <osMessageQueueGet+0xac>
 800734a:	4b15      	ldr	r3, [pc, #84]	@ (80073a0 <osMessageQueueGet+0xb8>)
 800734c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007350:	601a      	str	r2, [r3, #0]
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	e01b      	b.n	8007394 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d002      	beq.n	8007368 <osMessageQueueGet+0x80>
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d103      	bne.n	8007370 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007368:	f06f 0303 	mvn.w	r3, #3
 800736c:	61fb      	str	r3, [r7, #28]
 800736e:	e011      	b.n	8007394 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	68b9      	ldr	r1, [r7, #8]
 8007374:	69b8      	ldr	r0, [r7, #24]
 8007376:	f000 fbe3 	bl	8007b40 <xQueueReceive>
 800737a:	4603      	mov	r3, r0
 800737c:	2b01      	cmp	r3, #1
 800737e:	d009      	beq.n	8007394 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007386:	f06f 0301 	mvn.w	r3, #1
 800738a:	61fb      	str	r3, [r7, #28]
 800738c:	e002      	b.n	8007394 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800738e:	f06f 0302 	mvn.w	r3, #2
 8007392:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007394:	69fb      	ldr	r3, [r7, #28]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3720      	adds	r7, #32
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	e000ed04 	.word	0xe000ed04

080073a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4a07      	ldr	r2, [pc, #28]	@ (80073d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80073b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	4a06      	ldr	r2, [pc, #24]	@ (80073d4 <vApplicationGetIdleTaskMemory+0x30>)
 80073ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2280      	movs	r2, #128	@ 0x80
 80073c0:	601a      	str	r2, [r3, #0]
}
 80073c2:	bf00      	nop
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	2000089c 	.word	0x2000089c
 80073d4:	200008f8 	.word	0x200008f8

080073d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4a07      	ldr	r2, [pc, #28]	@ (8007404 <vApplicationGetTimerTaskMemory+0x2c>)
 80073e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	4a06      	ldr	r2, [pc, #24]	@ (8007408 <vApplicationGetTimerTaskMemory+0x30>)
 80073ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80073f6:	601a      	str	r2, [r3, #0]
}
 80073f8:	bf00      	nop
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	20000af8 	.word	0x20000af8
 8007408:	20000b54 	.word	0x20000b54

0800740c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f103 0208 	add.w	r2, r3, #8
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f04f 32ff 	mov.w	r2, #4294967295
 8007424:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f103 0208 	add.w	r2, r3, #8
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f103 0208 	add.w	r2, r3, #8
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800745a:	bf00      	nop
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007466:	b480      	push	{r7}
 8007468:	b085      	sub	sp, #20
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	601a      	str	r2, [r3, #0]
}
 80074a2:	bf00      	nop
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074ae:	b480      	push	{r7}
 80074b0:	b085      	sub	sp, #20
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c4:	d103      	bne.n	80074ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	e00c      	b.n	80074e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	3308      	adds	r3, #8
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	e002      	b.n	80074dc <vListInsert+0x2e>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d2f6      	bcs.n	80074d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	601a      	str	r2, [r3, #0]
}
 8007514:	bf00      	nop
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	6892      	ldr	r2, [r2, #8]
 8007536:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	6852      	ldr	r2, [r2, #4]
 8007540:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	429a      	cmp	r2, r3
 800754a:	d103      	bne.n	8007554 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	1e5a      	subs	r2, r3, #1
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10b      	bne.n	80075a0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800759a:	bf00      	nop
 800759c:	bf00      	nop
 800759e:	e7fd      	b.n	800759c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80075a0:	f002 f902 	bl	80097a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ac:	68f9      	ldr	r1, [r7, #12]
 80075ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80075b0:	fb01 f303 	mul.w	r3, r1, r3
 80075b4:	441a      	add	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d0:	3b01      	subs	r3, #1
 80075d2:	68f9      	ldr	r1, [r7, #12]
 80075d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80075d6:	fb01 f303 	mul.w	r3, r1, r3
 80075da:	441a      	add	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	22ff      	movs	r2, #255	@ 0xff
 80075e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	22ff      	movs	r2, #255	@ 0xff
 80075ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d114      	bne.n	8007620 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d01a      	beq.n	8007634 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3310      	adds	r3, #16
 8007602:	4618      	mov	r0, r3
 8007604:	f001 f9a2 	bl	800894c <xTaskRemoveFromEventList>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d012      	beq.n	8007634 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800760e:	4b0d      	ldr	r3, [pc, #52]	@ (8007644 <xQueueGenericReset+0xd0>)
 8007610:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	e009      	b.n	8007634 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	3310      	adds	r3, #16
 8007624:	4618      	mov	r0, r3
 8007626:	f7ff fef1 	bl	800740c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3324      	adds	r3, #36	@ 0x24
 800762e:	4618      	mov	r0, r3
 8007630:	f7ff feec 	bl	800740c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007634:	f002 f8ea 	bl	800980c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007638:	2301      	movs	r3, #1
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	e000ed04 	.word	0xe000ed04

08007648 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08e      	sub	sp, #56	@ 0x38
 800764c:	af02      	add	r7, sp, #8
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10b      	bne.n	8007674 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800766e:	bf00      	nop
 8007670:	bf00      	nop
 8007672:	e7fd      	b.n	8007670 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10b      	bne.n	8007692 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800768c:	bf00      	nop
 800768e:	bf00      	nop
 8007690:	e7fd      	b.n	800768e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d002      	beq.n	800769e <xQueueGenericCreateStatic+0x56>
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <xQueueGenericCreateStatic+0x5a>
 800769e:	2301      	movs	r3, #1
 80076a0:	e000      	b.n	80076a4 <xQueueGenericCreateStatic+0x5c>
 80076a2:	2300      	movs	r3, #0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10b      	bne.n	80076c0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	623b      	str	r3, [r7, #32]
}
 80076ba:	bf00      	nop
 80076bc:	bf00      	nop
 80076be:	e7fd      	b.n	80076bc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d102      	bne.n	80076cc <xQueueGenericCreateStatic+0x84>
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <xQueueGenericCreateStatic+0x88>
 80076cc:	2301      	movs	r3, #1
 80076ce:	e000      	b.n	80076d2 <xQueueGenericCreateStatic+0x8a>
 80076d0:	2300      	movs	r3, #0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10b      	bne.n	80076ee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80076d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	61fb      	str	r3, [r7, #28]
}
 80076e8:	bf00      	nop
 80076ea:	bf00      	nop
 80076ec:	e7fd      	b.n	80076ea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80076ee:	2350      	movs	r3, #80	@ 0x50
 80076f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2b50      	cmp	r3, #80	@ 0x50
 80076f6:	d00b      	beq.n	8007710 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	61bb      	str	r3, [r7, #24]
}
 800770a:	bf00      	nop
 800770c:	bf00      	nop
 800770e:	e7fd      	b.n	800770c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007710:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00d      	beq.n	8007738 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800771c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007724:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	4613      	mov	r3, r2
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	68b9      	ldr	r1, [r7, #8]
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f000 f840 	bl	80077b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800773a:	4618      	mov	r0, r3
 800773c:	3730      	adds	r7, #48	@ 0x30
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007742:	b580      	push	{r7, lr}
 8007744:	b08a      	sub	sp, #40	@ 0x28
 8007746:	af02      	add	r7, sp, #8
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	4613      	mov	r3, r2
 800774e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10b      	bne.n	800776e <xQueueGenericCreate+0x2c>
	__asm volatile
 8007756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	613b      	str	r3, [r7, #16]
}
 8007768:	bf00      	nop
 800776a:	bf00      	nop
 800776c:	e7fd      	b.n	800776a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	fb02 f303 	mul.w	r3, r2, r3
 8007776:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	3350      	adds	r3, #80	@ 0x50
 800777c:	4618      	mov	r0, r3
 800777e:	f002 f935 	bl	80099ec <pvPortMalloc>
 8007782:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d011      	beq.n	80077ae <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	3350      	adds	r3, #80	@ 0x50
 8007792:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800779c:	79fa      	ldrb	r2, [r7, #7]
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	4613      	mov	r3, r2
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	68b9      	ldr	r1, [r7, #8]
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 f805 	bl	80077b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077ae:	69bb      	ldr	r3, [r7, #24]
	}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3720      	adds	r7, #32
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
 80077c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d103      	bne.n	80077d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	e002      	b.n	80077da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077e6:	2101      	movs	r1, #1
 80077e8:	69b8      	ldr	r0, [r7, #24]
 80077ea:	f7ff fec3 	bl	8007574 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	78fa      	ldrb	r2, [r7, #3]
 80077f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80077f6:	bf00      	nop
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b08e      	sub	sp, #56	@ 0x38
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
 800780c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800780e:	2300      	movs	r3, #0
 8007810:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10b      	bne.n	8007834 <xQueueGenericSend+0x34>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800782e:	bf00      	nop
 8007830:	bf00      	nop
 8007832:	e7fd      	b.n	8007830 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d103      	bne.n	8007842 <xQueueGenericSend+0x42>
 800783a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <xQueueGenericSend+0x46>
 8007842:	2301      	movs	r3, #1
 8007844:	e000      	b.n	8007848 <xQueueGenericSend+0x48>
 8007846:	2300      	movs	r3, #0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10b      	bne.n	8007864 <xQueueGenericSend+0x64>
	__asm volatile
 800784c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800785e:	bf00      	nop
 8007860:	bf00      	nop
 8007862:	e7fd      	b.n	8007860 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	2b02      	cmp	r3, #2
 8007868:	d103      	bne.n	8007872 <xQueueGenericSend+0x72>
 800786a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800786e:	2b01      	cmp	r3, #1
 8007870:	d101      	bne.n	8007876 <xQueueGenericSend+0x76>
 8007872:	2301      	movs	r3, #1
 8007874:	e000      	b.n	8007878 <xQueueGenericSend+0x78>
 8007876:	2300      	movs	r3, #0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10b      	bne.n	8007894 <xQueueGenericSend+0x94>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	623b      	str	r3, [r7, #32]
}
 800788e:	bf00      	nop
 8007890:	bf00      	nop
 8007892:	e7fd      	b.n	8007890 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007894:	f001 fa1a 	bl	8008ccc <xTaskGetSchedulerState>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d102      	bne.n	80078a4 <xQueueGenericSend+0xa4>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d101      	bne.n	80078a8 <xQueueGenericSend+0xa8>
 80078a4:	2301      	movs	r3, #1
 80078a6:	e000      	b.n	80078aa <xQueueGenericSend+0xaa>
 80078a8:	2300      	movs	r3, #0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10b      	bne.n	80078c6 <xQueueGenericSend+0xc6>
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	61fb      	str	r3, [r7, #28]
}
 80078c0:	bf00      	nop
 80078c2:	bf00      	nop
 80078c4:	e7fd      	b.n	80078c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078c6:	f001 ff6f 	bl	80097a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d302      	bcc.n	80078dc <xQueueGenericSend+0xdc>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d129      	bne.n	8007930 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078dc:	683a      	ldr	r2, [r7, #0]
 80078de:	68b9      	ldr	r1, [r7, #8]
 80078e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078e2:	f000 fa91 	bl	8007e08 <prvCopyDataToQueue>
 80078e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d010      	beq.n	8007912 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f2:	3324      	adds	r3, #36	@ 0x24
 80078f4:	4618      	mov	r0, r3
 80078f6:	f001 f829 	bl	800894c <xTaskRemoveFromEventList>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d013      	beq.n	8007928 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007900:	4b3f      	ldr	r3, [pc, #252]	@ (8007a00 <xQueueGenericSend+0x200>)
 8007902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007906:	601a      	str	r2, [r3, #0]
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	e00a      	b.n	8007928 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007914:	2b00      	cmp	r3, #0
 8007916:	d007      	beq.n	8007928 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007918:	4b39      	ldr	r3, [pc, #228]	@ (8007a00 <xQueueGenericSend+0x200>)
 800791a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800791e:	601a      	str	r2, [r3, #0]
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007928:	f001 ff70 	bl	800980c <vPortExitCritical>
				return pdPASS;
 800792c:	2301      	movs	r3, #1
 800792e:	e063      	b.n	80079f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d103      	bne.n	800793e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007936:	f001 ff69 	bl	800980c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800793a:	2300      	movs	r3, #0
 800793c:	e05c      	b.n	80079f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800793e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007940:	2b00      	cmp	r3, #0
 8007942:	d106      	bne.n	8007952 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007944:	f107 0314 	add.w	r3, r7, #20
 8007948:	4618      	mov	r0, r3
 800794a:	f001 f863 	bl	8008a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800794e:	2301      	movs	r3, #1
 8007950:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007952:	f001 ff5b 	bl	800980c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007956:	f000 fdd3 	bl	8008500 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800795a:	f001 ff25 	bl	80097a8 <vPortEnterCritical>
 800795e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007960:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007964:	b25b      	sxtb	r3, r3
 8007966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796a:	d103      	bne.n	8007974 <xQueueGenericSend+0x174>
 800796c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007976:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800797a:	b25b      	sxtb	r3, r3
 800797c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007980:	d103      	bne.n	800798a <xQueueGenericSend+0x18a>
 8007982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800798a:	f001 ff3f 	bl	800980c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800798e:	1d3a      	adds	r2, r7, #4
 8007990:	f107 0314 	add.w	r3, r7, #20
 8007994:	4611      	mov	r1, r2
 8007996:	4618      	mov	r0, r3
 8007998:	f001 f852 	bl	8008a40 <xTaskCheckForTimeOut>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d124      	bne.n	80079ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079a4:	f000 fb28 	bl	8007ff8 <prvIsQueueFull>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d018      	beq.n	80079e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b0:	3310      	adds	r3, #16
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	4611      	mov	r1, r2
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 ff76 	bl	80088a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079be:	f000 fab3 	bl	8007f28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079c2:	f000 fdab 	bl	800851c <xTaskResumeAll>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f47f af7c 	bne.w	80078c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80079ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007a00 <xQueueGenericSend+0x200>)
 80079d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079d4:	601a      	str	r2, [r3, #0]
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	e772      	b.n	80078c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079e2:	f000 faa1 	bl	8007f28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079e6:	f000 fd99 	bl	800851c <xTaskResumeAll>
 80079ea:	e76c      	b.n	80078c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079ee:	f000 fa9b 	bl	8007f28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079f2:	f000 fd93 	bl	800851c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3738      	adds	r7, #56	@ 0x38
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	e000ed04 	.word	0xe000ed04

08007a04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b090      	sub	sp, #64	@ 0x40
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
 8007a10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10b      	bne.n	8007a34 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a2e:	bf00      	nop
 8007a30:	bf00      	nop
 8007a32:	e7fd      	b.n	8007a30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d103      	bne.n	8007a42 <xQueueGenericSendFromISR+0x3e>
 8007a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <xQueueGenericSendFromISR+0x42>
 8007a42:	2301      	movs	r3, #1
 8007a44:	e000      	b.n	8007a48 <xQueueGenericSendFromISR+0x44>
 8007a46:	2300      	movs	r3, #0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10b      	bne.n	8007a64 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a5e:	bf00      	nop
 8007a60:	bf00      	nop
 8007a62:	e7fd      	b.n	8007a60 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d103      	bne.n	8007a72 <xQueueGenericSendFromISR+0x6e>
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d101      	bne.n	8007a76 <xQueueGenericSendFromISR+0x72>
 8007a72:	2301      	movs	r3, #1
 8007a74:	e000      	b.n	8007a78 <xQueueGenericSendFromISR+0x74>
 8007a76:	2300      	movs	r3, #0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10b      	bne.n	8007a94 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a80:	f383 8811 	msr	BASEPRI, r3
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	623b      	str	r3, [r7, #32]
}
 8007a8e:	bf00      	nop
 8007a90:	bf00      	nop
 8007a92:	e7fd      	b.n	8007a90 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a94:	f001 ff68 	bl	8009968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a98:	f3ef 8211 	mrs	r2, BASEPRI
 8007a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	61fa      	str	r2, [r7, #28]
 8007aae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ab0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ab2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d302      	bcc.n	8007ac6 <xQueueGenericSendFromISR+0xc2>
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d12f      	bne.n	8007b26 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007acc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	68b9      	ldr	r1, [r7, #8]
 8007ada:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007adc:	f000 f994 	bl	8007e08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ae0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae8:	d112      	bne.n	8007b10 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d016      	beq.n	8007b20 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af4:	3324      	adds	r3, #36	@ 0x24
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 ff28 	bl	800894c <xTaskRemoveFromEventList>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00e      	beq.n	8007b20 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00b      	beq.n	8007b20 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	601a      	str	r2, [r3, #0]
 8007b0e:	e007      	b.n	8007b20 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007b14:	3301      	adds	r3, #1
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	b25a      	sxtb	r2, r3
 8007b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007b20:	2301      	movs	r3, #1
 8007b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007b24:	e001      	b.n	8007b2a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b26:	2300      	movs	r3, #0
 8007b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b2c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b34:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3740      	adds	r7, #64	@ 0x40
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b08c      	sub	sp, #48	@ 0x30
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10b      	bne.n	8007b72 <xQueueReceive+0x32>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	623b      	str	r3, [r7, #32]
}
 8007b6c:	bf00      	nop
 8007b6e:	bf00      	nop
 8007b70:	e7fd      	b.n	8007b6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d103      	bne.n	8007b80 <xQueueReceive+0x40>
 8007b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <xQueueReceive+0x44>
 8007b80:	2301      	movs	r3, #1
 8007b82:	e000      	b.n	8007b86 <xQueueReceive+0x46>
 8007b84:	2300      	movs	r3, #0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10b      	bne.n	8007ba2 <xQueueReceive+0x62>
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	61fb      	str	r3, [r7, #28]
}
 8007b9c:	bf00      	nop
 8007b9e:	bf00      	nop
 8007ba0:	e7fd      	b.n	8007b9e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ba2:	f001 f893 	bl	8008ccc <xTaskGetSchedulerState>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d102      	bne.n	8007bb2 <xQueueReceive+0x72>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <xQueueReceive+0x76>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e000      	b.n	8007bb8 <xQueueReceive+0x78>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10b      	bne.n	8007bd4 <xQueueReceive+0x94>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	61bb      	str	r3, [r7, #24]
}
 8007bce:	bf00      	nop
 8007bd0:	bf00      	nop
 8007bd2:	e7fd      	b.n	8007bd0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bd4:	f001 fde8 	bl	80097a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bdc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d01f      	beq.n	8007c24 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007be4:	68b9      	ldr	r1, [r7, #8]
 8007be6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007be8:	f000 f978 	bl	8007edc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bee:	1e5a      	subs	r2, r3, #1
 8007bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00f      	beq.n	8007c1c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bfe:	3310      	adds	r3, #16
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 fea3 	bl	800894c <xTaskRemoveFromEventList>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d007      	beq.n	8007c1c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c0c:	4b3c      	ldr	r3, [pc, #240]	@ (8007d00 <xQueueReceive+0x1c0>)
 8007c0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c1c:	f001 fdf6 	bl	800980c <vPortExitCritical>
				return pdPASS;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e069      	b.n	8007cf8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d103      	bne.n	8007c32 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c2a:	f001 fdef 	bl	800980c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	e062      	b.n	8007cf8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d106      	bne.n	8007c46 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c38:	f107 0310 	add.w	r3, r7, #16
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 fee9 	bl	8008a14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c42:	2301      	movs	r3, #1
 8007c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c46:	f001 fde1 	bl	800980c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c4a:	f000 fc59 	bl	8008500 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c4e:	f001 fdab 	bl	80097a8 <vPortEnterCritical>
 8007c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c58:	b25b      	sxtb	r3, r3
 8007c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c5e:	d103      	bne.n	8007c68 <xQueueReceive+0x128>
 8007c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c6e:	b25b      	sxtb	r3, r3
 8007c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c74:	d103      	bne.n	8007c7e <xQueueReceive+0x13e>
 8007c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c7e:	f001 fdc5 	bl	800980c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c82:	1d3a      	adds	r2, r7, #4
 8007c84:	f107 0310 	add.w	r3, r7, #16
 8007c88:	4611      	mov	r1, r2
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 fed8 	bl	8008a40 <xTaskCheckForTimeOut>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d123      	bne.n	8007cde <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c98:	f000 f998 	bl	8007fcc <prvIsQueueEmpty>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d017      	beq.n	8007cd2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca4:	3324      	adds	r3, #36	@ 0x24
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	4611      	mov	r1, r2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f000 fdfc 	bl	80088a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cb2:	f000 f939 	bl	8007f28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cb6:	f000 fc31 	bl	800851c <xTaskResumeAll>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d189      	bne.n	8007bd4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8007d00 <xQueueReceive+0x1c0>)
 8007cc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	e780      	b.n	8007bd4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007cd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cd4:	f000 f928 	bl	8007f28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cd8:	f000 fc20 	bl	800851c <xTaskResumeAll>
 8007cdc:	e77a      	b.n	8007bd4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007cde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ce0:	f000 f922 	bl	8007f28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ce4:	f000 fc1a 	bl	800851c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ce8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cea:	f000 f96f 	bl	8007fcc <prvIsQueueEmpty>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f43f af6f 	beq.w	8007bd4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cf6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3730      	adds	r7, #48	@ 0x30
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	e000ed04 	.word	0xe000ed04

08007d04 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b08e      	sub	sp, #56	@ 0x38
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10b      	bne.n	8007d32 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	623b      	str	r3, [r7, #32]
}
 8007d2c:	bf00      	nop
 8007d2e:	bf00      	nop
 8007d30:	e7fd      	b.n	8007d2e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d103      	bne.n	8007d40 <xQueueReceiveFromISR+0x3c>
 8007d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <xQueueReceiveFromISR+0x40>
 8007d40:	2301      	movs	r3, #1
 8007d42:	e000      	b.n	8007d46 <xQueueReceiveFromISR+0x42>
 8007d44:	2300      	movs	r3, #0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10b      	bne.n	8007d62 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	61fb      	str	r3, [r7, #28]
}
 8007d5c:	bf00      	nop
 8007d5e:	bf00      	nop
 8007d60:	e7fd      	b.n	8007d5e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d62:	f001 fe01 	bl	8009968 <vPortValidateInterruptPriority>
	__asm volatile
 8007d66:	f3ef 8211 	mrs	r2, BASEPRI
 8007d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	61ba      	str	r2, [r7, #24]
 8007d7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007d7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d86:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d02f      	beq.n	8007dee <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d98:	68b9      	ldr	r1, [r7, #8]
 8007d9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d9c:	f000 f89e 	bl	8007edc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da2:	1e5a      	subs	r2, r3, #1
 8007da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007da8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db0:	d112      	bne.n	8007dd8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d016      	beq.n	8007de8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbc:	3310      	adds	r3, #16
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 fdc4 	bl	800894c <xTaskRemoveFromEventList>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00e      	beq.n	8007de8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00b      	beq.n	8007de8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	e007      	b.n	8007de8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ddc:	3301      	adds	r3, #1
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	b25a      	sxtb	r2, r3
 8007de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007de8:	2301      	movs	r3, #1
 8007dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dec:	e001      	b.n	8007df2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007dee:	2300      	movs	r3, #0
 8007df0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	f383 8811 	msr	BASEPRI, r3
}
 8007dfc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3738      	adds	r7, #56	@ 0x38
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e14:	2300      	movs	r3, #0
 8007e16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10d      	bne.n	8007e42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d14d      	bne.n	8007eca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 ff68 	bl	8008d08 <xTaskPriorityDisinherit>
 8007e38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	609a      	str	r2, [r3, #8]
 8007e40:	e043      	b.n	8007eca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d119      	bne.n	8007e7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6858      	ldr	r0, [r3, #4]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e50:	461a      	mov	r2, r3
 8007e52:	68b9      	ldr	r1, [r7, #8]
 8007e54:	f002 f94b 	bl	800a0ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e60:	441a      	add	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d32b      	bcc.n	8007eca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	605a      	str	r2, [r3, #4]
 8007e7a:	e026      	b.n	8007eca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	68d8      	ldr	r0, [r3, #12]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e84:	461a      	mov	r2, r3
 8007e86:	68b9      	ldr	r1, [r7, #8]
 8007e88:	f002 f931 	bl	800a0ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	68da      	ldr	r2, [r3, #12]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e94:	425b      	negs	r3, r3
 8007e96:	441a      	add	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	68da      	ldr	r2, [r3, #12]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d207      	bcs.n	8007eb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	689a      	ldr	r2, [r3, #8]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb0:	425b      	negs	r3, r3
 8007eb2:	441a      	add	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d105      	bne.n	8007eca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d002      	beq.n	8007eca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	1c5a      	adds	r2, r3, #1
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007ed2:	697b      	ldr	r3, [r7, #20]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3718      	adds	r7, #24
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d018      	beq.n	8007f20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68da      	ldr	r2, [r3, #12]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef6:	441a      	add	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68da      	ldr	r2, [r3, #12]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d303      	bcc.n	8007f10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68d9      	ldr	r1, [r3, #12]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f18:	461a      	mov	r2, r3
 8007f1a:	6838      	ldr	r0, [r7, #0]
 8007f1c:	f002 f8e7 	bl	800a0ee <memcpy>
	}
}
 8007f20:	bf00      	nop
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f30:	f001 fc3a 	bl	80097a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f3c:	e011      	b.n	8007f62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d012      	beq.n	8007f6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	3324      	adds	r3, #36	@ 0x24
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 fcfe 	bl	800894c <xTaskRemoveFromEventList>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f56:	f000 fdd7 	bl	8008b08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f5a:	7bfb      	ldrb	r3, [r7, #15]
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	dce9      	bgt.n	8007f3e <prvUnlockQueue+0x16>
 8007f6a:	e000      	b.n	8007f6e <prvUnlockQueue+0x46>
					break;
 8007f6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	22ff      	movs	r2, #255	@ 0xff
 8007f72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007f76:	f001 fc49 	bl	800980c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f7a:	f001 fc15 	bl	80097a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f86:	e011      	b.n	8007fac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d012      	beq.n	8007fb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3310      	adds	r3, #16
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 fcd9 	bl	800894c <xTaskRemoveFromEventList>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007fa0:	f000 fdb2 	bl	8008b08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	dce9      	bgt.n	8007f88 <prvUnlockQueue+0x60>
 8007fb4:	e000      	b.n	8007fb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007fb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	22ff      	movs	r2, #255	@ 0xff
 8007fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007fc0:	f001 fc24 	bl	800980c <vPortExitCritical>
}
 8007fc4:	bf00      	nop
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fd4:	f001 fbe8 	bl	80097a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d102      	bne.n	8007fe6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	60fb      	str	r3, [r7, #12]
 8007fe4:	e001      	b.n	8007fea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fea:	f001 fc0f 	bl	800980c <vPortExitCritical>

	return xReturn;
 8007fee:	68fb      	ldr	r3, [r7, #12]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008000:	f001 fbd2 	bl	80097a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800800c:	429a      	cmp	r2, r3
 800800e:	d102      	bne.n	8008016 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008010:	2301      	movs	r3, #1
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	e001      	b.n	800801a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008016:	2300      	movs	r3, #0
 8008018:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800801a:	f001 fbf7 	bl	800980c <vPortExitCritical>

	return xReturn;
 800801e:	68fb      	ldr	r3, [r7, #12]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008032:	2300      	movs	r3, #0
 8008034:	60fb      	str	r3, [r7, #12]
 8008036:	e014      	b.n	8008062 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008038:	4a0f      	ldr	r2, [pc, #60]	@ (8008078 <vQueueAddToRegistry+0x50>)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10b      	bne.n	800805c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008044:	490c      	ldr	r1, [pc, #48]	@ (8008078 <vQueueAddToRegistry+0x50>)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800804e:	4a0a      	ldr	r2, [pc, #40]	@ (8008078 <vQueueAddToRegistry+0x50>)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	00db      	lsls	r3, r3, #3
 8008054:	4413      	add	r3, r2
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800805a:	e006      	b.n	800806a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	3301      	adds	r3, #1
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2b07      	cmp	r3, #7
 8008066:	d9e7      	bls.n	8008038 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008068:	bf00      	nop
 800806a:	bf00      	nop
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	20000f54 	.word	0x20000f54

0800807c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800808c:	f001 fb8c 	bl	80097a8 <vPortEnterCritical>
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008096:	b25b      	sxtb	r3, r3
 8008098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809c:	d103      	bne.n	80080a6 <vQueueWaitForMessageRestricted+0x2a>
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080ac:	b25b      	sxtb	r3, r3
 80080ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b2:	d103      	bne.n	80080bc <vQueueWaitForMessageRestricted+0x40>
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080bc:	f001 fba6 	bl	800980c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d106      	bne.n	80080d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	3324      	adds	r3, #36	@ 0x24
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	68b9      	ldr	r1, [r7, #8]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 fc0f 	bl	80088f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80080d6:	6978      	ldr	r0, [r7, #20]
 80080d8:	f7ff ff26 	bl	8007f28 <prvUnlockQueue>
	}
 80080dc:	bf00      	nop
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b08e      	sub	sp, #56	@ 0x38
 80080e8:	af04      	add	r7, sp, #16
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
 80080f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10b      	bne.n	8008110 <xTaskCreateStatic+0x2c>
	__asm volatile
 80080f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fc:	f383 8811 	msr	BASEPRI, r3
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	623b      	str	r3, [r7, #32]
}
 800810a:	bf00      	nop
 800810c:	bf00      	nop
 800810e:	e7fd      	b.n	800810c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10b      	bne.n	800812e <xTaskCreateStatic+0x4a>
	__asm volatile
 8008116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	61fb      	str	r3, [r7, #28]
}
 8008128:	bf00      	nop
 800812a:	bf00      	nop
 800812c:	e7fd      	b.n	800812a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800812e:	235c      	movs	r3, #92	@ 0x5c
 8008130:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	2b5c      	cmp	r3, #92	@ 0x5c
 8008136:	d00b      	beq.n	8008150 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	61bb      	str	r3, [r7, #24]
}
 800814a:	bf00      	nop
 800814c:	bf00      	nop
 800814e:	e7fd      	b.n	800814c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008150:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008154:	2b00      	cmp	r3, #0
 8008156:	d01e      	beq.n	8008196 <xTaskCreateStatic+0xb2>
 8008158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800815a:	2b00      	cmp	r3, #0
 800815c:	d01b      	beq.n	8008196 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800815e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008160:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008164:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008166:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816a:	2202      	movs	r2, #2
 800816c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008170:	2300      	movs	r3, #0
 8008172:	9303      	str	r3, [sp, #12]
 8008174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008176:	9302      	str	r3, [sp, #8]
 8008178:	f107 0314 	add.w	r3, r7, #20
 800817c:	9301      	str	r3, [sp, #4]
 800817e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	68b9      	ldr	r1, [r7, #8]
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 f850 	bl	800822e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800818e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008190:	f000 f8de 	bl	8008350 <prvAddNewTaskToReadyList>
 8008194:	e001      	b.n	800819a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008196:	2300      	movs	r3, #0
 8008198:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800819a:	697b      	ldr	r3, [r7, #20]
	}
 800819c:	4618      	mov	r0, r3
 800819e:	3728      	adds	r7, #40	@ 0x28
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08c      	sub	sp, #48	@ 0x30
 80081a8:	af04      	add	r7, sp, #16
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	603b      	str	r3, [r7, #0]
 80081b0:	4613      	mov	r3, r2
 80081b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80081b4:	88fb      	ldrh	r3, [r7, #6]
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4618      	mov	r0, r3
 80081ba:	f001 fc17 	bl	80099ec <pvPortMalloc>
 80081be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00e      	beq.n	80081e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80081c6:	205c      	movs	r0, #92	@ 0x5c
 80081c8:	f001 fc10 	bl	80099ec <pvPortMalloc>
 80081cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d003      	beq.n	80081dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80081da:	e005      	b.n	80081e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081dc:	6978      	ldr	r0, [r7, #20]
 80081de:	f001 fcd3 	bl	8009b88 <vPortFree>
 80081e2:	e001      	b.n	80081e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081e4:	2300      	movs	r3, #0
 80081e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d017      	beq.n	800821e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081f6:	88fa      	ldrh	r2, [r7, #6]
 80081f8:	2300      	movs	r3, #0
 80081fa:	9303      	str	r3, [sp, #12]
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	9302      	str	r3, [sp, #8]
 8008200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008202:	9301      	str	r3, [sp, #4]
 8008204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	68b9      	ldr	r1, [r7, #8]
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 f80e 	bl	800822e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008212:	69f8      	ldr	r0, [r7, #28]
 8008214:	f000 f89c 	bl	8008350 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008218:	2301      	movs	r3, #1
 800821a:	61bb      	str	r3, [r7, #24]
 800821c:	e002      	b.n	8008224 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800821e:	f04f 33ff 	mov.w	r3, #4294967295
 8008222:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008224:	69bb      	ldr	r3, [r7, #24]
	}
 8008226:	4618      	mov	r0, r3
 8008228:	3720      	adds	r7, #32
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b088      	sub	sp, #32
 8008232:	af00      	add	r7, sp, #0
 8008234:	60f8      	str	r0, [r7, #12]
 8008236:	60b9      	str	r1, [r7, #8]
 8008238:	607a      	str	r2, [r7, #4]
 800823a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800823c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	461a      	mov	r2, r3
 8008246:	21a5      	movs	r1, #165	@ 0xa5
 8008248:	f001 fed5 	bl	8009ff6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800824c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008256:	3b01      	subs	r3, #1
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	f023 0307 	bic.w	r3, r3, #7
 8008264:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	f003 0307 	and.w	r3, r3, #7
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00b      	beq.n	8008288 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	617b      	str	r3, [r7, #20]
}
 8008282:	bf00      	nop
 8008284:	bf00      	nop
 8008286:	e7fd      	b.n	8008284 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d01f      	beq.n	80082ce <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800828e:	2300      	movs	r3, #0
 8008290:	61fb      	str	r3, [r7, #28]
 8008292:	e012      	b.n	80082ba <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	4413      	add	r3, r2
 800829a:	7819      	ldrb	r1, [r3, #0]
 800829c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	4413      	add	r3, r2
 80082a2:	3334      	adds	r3, #52	@ 0x34
 80082a4:	460a      	mov	r2, r1
 80082a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	4413      	add	r3, r2
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d006      	beq.n	80082c2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	3301      	adds	r3, #1
 80082b8:	61fb      	str	r3, [r7, #28]
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	2b0f      	cmp	r3, #15
 80082be:	d9e9      	bls.n	8008294 <prvInitialiseNewTask+0x66>
 80082c0:	e000      	b.n	80082c4 <prvInitialiseNewTask+0x96>
			{
				break;
 80082c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80082c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80082cc:	e003      	b.n	80082d6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d8:	2b37      	cmp	r3, #55	@ 0x37
 80082da:	d901      	bls.n	80082e0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80082dc:	2337      	movs	r3, #55	@ 0x37
 80082de:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80082e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082e4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80082e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082ea:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80082ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ee:	2200      	movs	r2, #0
 80082f0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f4:	3304      	adds	r3, #4
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7ff f8a8 	bl	800744c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fe:	3318      	adds	r3, #24
 8008300:	4618      	mov	r0, r3
 8008302:	f7ff f8a3 	bl	800744c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800830a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800830c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008314:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800831a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800831c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831e:	2200      	movs	r2, #0
 8008320:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	68f9      	ldr	r1, [r7, #12]
 800832e:	69b8      	ldr	r0, [r7, #24]
 8008330:	f001 f908 	bl	8009544 <pxPortInitialiseStack>
 8008334:	4602      	mov	r2, r0
 8008336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008338:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800833a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800833c:	2b00      	cmp	r3, #0
 800833e:	d002      	beq.n	8008346 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008346:	bf00      	nop
 8008348:	3720      	adds	r7, #32
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
	...

08008350 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008358:	f001 fa26 	bl	80097a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800835c:	4b2d      	ldr	r3, [pc, #180]	@ (8008414 <prvAddNewTaskToReadyList+0xc4>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3301      	adds	r3, #1
 8008362:	4a2c      	ldr	r2, [pc, #176]	@ (8008414 <prvAddNewTaskToReadyList+0xc4>)
 8008364:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008366:	4b2c      	ldr	r3, [pc, #176]	@ (8008418 <prvAddNewTaskToReadyList+0xc8>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d109      	bne.n	8008382 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800836e:	4a2a      	ldr	r2, [pc, #168]	@ (8008418 <prvAddNewTaskToReadyList+0xc8>)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008374:	4b27      	ldr	r3, [pc, #156]	@ (8008414 <prvAddNewTaskToReadyList+0xc4>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d110      	bne.n	800839e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800837c:	f000 fbe8 	bl	8008b50 <prvInitialiseTaskLists>
 8008380:	e00d      	b.n	800839e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008382:	4b26      	ldr	r3, [pc, #152]	@ (800841c <prvAddNewTaskToReadyList+0xcc>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d109      	bne.n	800839e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800838a:	4b23      	ldr	r3, [pc, #140]	@ (8008418 <prvAddNewTaskToReadyList+0xc8>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008394:	429a      	cmp	r2, r3
 8008396:	d802      	bhi.n	800839e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008398:	4a1f      	ldr	r2, [pc, #124]	@ (8008418 <prvAddNewTaskToReadyList+0xc8>)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800839e:	4b20      	ldr	r3, [pc, #128]	@ (8008420 <prvAddNewTaskToReadyList+0xd0>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3301      	adds	r3, #1
 80083a4:	4a1e      	ldr	r2, [pc, #120]	@ (8008420 <prvAddNewTaskToReadyList+0xd0>)
 80083a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80083a8:	4b1d      	ldr	r3, [pc, #116]	@ (8008420 <prvAddNewTaskToReadyList+0xd0>)
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083b4:	4b1b      	ldr	r3, [pc, #108]	@ (8008424 <prvAddNewTaskToReadyList+0xd4>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d903      	bls.n	80083c4 <prvAddNewTaskToReadyList+0x74>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c0:	4a18      	ldr	r2, [pc, #96]	@ (8008424 <prvAddNewTaskToReadyList+0xd4>)
 80083c2:	6013      	str	r3, [r2, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c8:	4613      	mov	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4413      	add	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4a15      	ldr	r2, [pc, #84]	@ (8008428 <prvAddNewTaskToReadyList+0xd8>)
 80083d2:	441a      	add	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	3304      	adds	r3, #4
 80083d8:	4619      	mov	r1, r3
 80083da:	4610      	mov	r0, r2
 80083dc:	f7ff f843 	bl	8007466 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083e0:	f001 fa14 	bl	800980c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80083e4:	4b0d      	ldr	r3, [pc, #52]	@ (800841c <prvAddNewTaskToReadyList+0xcc>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00e      	beq.n	800840a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008418 <prvAddNewTaskToReadyList+0xc8>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d207      	bcs.n	800840a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80083fa:	4b0c      	ldr	r3, [pc, #48]	@ (800842c <prvAddNewTaskToReadyList+0xdc>)
 80083fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008400:	601a      	str	r2, [r3, #0]
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800840a:	bf00      	nop
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	20001468 	.word	0x20001468
 8008418:	20000f94 	.word	0x20000f94
 800841c:	20001474 	.word	0x20001474
 8008420:	20001484 	.word	0x20001484
 8008424:	20001470 	.word	0x20001470
 8008428:	20000f98 	.word	0x20000f98
 800842c:	e000ed04 	.word	0xe000ed04

08008430 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b08a      	sub	sp, #40	@ 0x28
 8008434:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008436:	2300      	movs	r3, #0
 8008438:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800843a:	2300      	movs	r3, #0
 800843c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800843e:	463a      	mov	r2, r7
 8008440:	1d39      	adds	r1, r7, #4
 8008442:	f107 0308 	add.w	r3, r7, #8
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe ffac 	bl	80073a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	9202      	str	r2, [sp, #8]
 8008454:	9301      	str	r3, [sp, #4]
 8008456:	2300      	movs	r3, #0
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	2300      	movs	r3, #0
 800845c:	460a      	mov	r2, r1
 800845e:	4922      	ldr	r1, [pc, #136]	@ (80084e8 <vTaskStartScheduler+0xb8>)
 8008460:	4822      	ldr	r0, [pc, #136]	@ (80084ec <vTaskStartScheduler+0xbc>)
 8008462:	f7ff fe3f 	bl	80080e4 <xTaskCreateStatic>
 8008466:	4603      	mov	r3, r0
 8008468:	4a21      	ldr	r2, [pc, #132]	@ (80084f0 <vTaskStartScheduler+0xc0>)
 800846a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800846c:	4b20      	ldr	r3, [pc, #128]	@ (80084f0 <vTaskStartScheduler+0xc0>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d002      	beq.n	800847a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008474:	2301      	movs	r3, #1
 8008476:	617b      	str	r3, [r7, #20]
 8008478:	e001      	b.n	800847e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800847a:	2300      	movs	r3, #0
 800847c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d102      	bne.n	800848a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008484:	f000 fd04 	bl	8008e90 <xTimerCreateTimerTask>
 8008488:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d116      	bne.n	80084be <vTaskStartScheduler+0x8e>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	613b      	str	r3, [r7, #16]
}
 80084a2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80084a4:	4b13      	ldr	r3, [pc, #76]	@ (80084f4 <vTaskStartScheduler+0xc4>)
 80084a6:	f04f 32ff 	mov.w	r2, #4294967295
 80084aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80084ac:	4b12      	ldr	r3, [pc, #72]	@ (80084f8 <vTaskStartScheduler+0xc8>)
 80084ae:	2201      	movs	r2, #1
 80084b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80084b2:	4b12      	ldr	r3, [pc, #72]	@ (80084fc <vTaskStartScheduler+0xcc>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80084b8:	f001 f8d2 	bl	8009660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80084bc:	e00f      	b.n	80084de <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c4:	d10b      	bne.n	80084de <vTaskStartScheduler+0xae>
	__asm volatile
 80084c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	60fb      	str	r3, [r7, #12]
}
 80084d8:	bf00      	nop
 80084da:	bf00      	nop
 80084dc:	e7fd      	b.n	80084da <vTaskStartScheduler+0xaa>
}
 80084de:	bf00      	nop
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	0800ac84 	.word	0x0800ac84
 80084ec:	08008b21 	.word	0x08008b21
 80084f0:	2000148c 	.word	0x2000148c
 80084f4:	20001488 	.word	0x20001488
 80084f8:	20001474 	.word	0x20001474
 80084fc:	2000146c 	.word	0x2000146c

08008500 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008500:	b480      	push	{r7}
 8008502:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008504:	4b04      	ldr	r3, [pc, #16]	@ (8008518 <vTaskSuspendAll+0x18>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	3301      	adds	r3, #1
 800850a:	4a03      	ldr	r2, [pc, #12]	@ (8008518 <vTaskSuspendAll+0x18>)
 800850c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800850e:	bf00      	nop
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr
 8008518:	20001490 	.word	0x20001490

0800851c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008522:	2300      	movs	r3, #0
 8008524:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008526:	2300      	movs	r3, #0
 8008528:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800852a:	4b42      	ldr	r3, [pc, #264]	@ (8008634 <xTaskResumeAll+0x118>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10b      	bne.n	800854a <xTaskResumeAll+0x2e>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	603b      	str	r3, [r7, #0]
}
 8008544:	bf00      	nop
 8008546:	bf00      	nop
 8008548:	e7fd      	b.n	8008546 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800854a:	f001 f92d 	bl	80097a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800854e:	4b39      	ldr	r3, [pc, #228]	@ (8008634 <xTaskResumeAll+0x118>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	3b01      	subs	r3, #1
 8008554:	4a37      	ldr	r2, [pc, #220]	@ (8008634 <xTaskResumeAll+0x118>)
 8008556:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008558:	4b36      	ldr	r3, [pc, #216]	@ (8008634 <xTaskResumeAll+0x118>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d162      	bne.n	8008626 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008560:	4b35      	ldr	r3, [pc, #212]	@ (8008638 <xTaskResumeAll+0x11c>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d05e      	beq.n	8008626 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008568:	e02f      	b.n	80085ca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800856a:	4b34      	ldr	r3, [pc, #208]	@ (800863c <xTaskResumeAll+0x120>)
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	3318      	adds	r3, #24
 8008576:	4618      	mov	r0, r3
 8008578:	f7fe ffd2 	bl	8007520 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	3304      	adds	r3, #4
 8008580:	4618      	mov	r0, r3
 8008582:	f7fe ffcd 	bl	8007520 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800858a:	4b2d      	ldr	r3, [pc, #180]	@ (8008640 <xTaskResumeAll+0x124>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	429a      	cmp	r2, r3
 8008590:	d903      	bls.n	800859a <xTaskResumeAll+0x7e>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008596:	4a2a      	ldr	r2, [pc, #168]	@ (8008640 <xTaskResumeAll+0x124>)
 8008598:	6013      	str	r3, [r2, #0]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800859e:	4613      	mov	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4a27      	ldr	r2, [pc, #156]	@ (8008644 <xTaskResumeAll+0x128>)
 80085a8:	441a      	add	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	3304      	adds	r3, #4
 80085ae:	4619      	mov	r1, r3
 80085b0:	4610      	mov	r0, r2
 80085b2:	f7fe ff58 	bl	8007466 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ba:	4b23      	ldr	r3, [pc, #140]	@ (8008648 <xTaskResumeAll+0x12c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d302      	bcc.n	80085ca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80085c4:	4b21      	ldr	r3, [pc, #132]	@ (800864c <xTaskResumeAll+0x130>)
 80085c6:	2201      	movs	r2, #1
 80085c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085ca:	4b1c      	ldr	r3, [pc, #112]	@ (800863c <xTaskResumeAll+0x120>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1cb      	bne.n	800856a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d001      	beq.n	80085dc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80085d8:	f000 fb58 	bl	8008c8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80085dc:	4b1c      	ldr	r3, [pc, #112]	@ (8008650 <xTaskResumeAll+0x134>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d010      	beq.n	800860a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80085e8:	f000 f846 	bl	8008678 <xTaskIncrementTick>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d002      	beq.n	80085f8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80085f2:	4b16      	ldr	r3, [pc, #88]	@ (800864c <xTaskResumeAll+0x130>)
 80085f4:	2201      	movs	r2, #1
 80085f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	3b01      	subs	r3, #1
 80085fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1f1      	bne.n	80085e8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008604:	4b12      	ldr	r3, [pc, #72]	@ (8008650 <xTaskResumeAll+0x134>)
 8008606:	2200      	movs	r2, #0
 8008608:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800860a:	4b10      	ldr	r3, [pc, #64]	@ (800864c <xTaskResumeAll+0x130>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d009      	beq.n	8008626 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008612:	2301      	movs	r3, #1
 8008614:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008616:	4b0f      	ldr	r3, [pc, #60]	@ (8008654 <xTaskResumeAll+0x138>)
 8008618:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800861c:	601a      	str	r2, [r3, #0]
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008626:	f001 f8f1 	bl	800980c <vPortExitCritical>

	return xAlreadyYielded;
 800862a:	68bb      	ldr	r3, [r7, #8]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	20001490 	.word	0x20001490
 8008638:	20001468 	.word	0x20001468
 800863c:	20001428 	.word	0x20001428
 8008640:	20001470 	.word	0x20001470
 8008644:	20000f98 	.word	0x20000f98
 8008648:	20000f94 	.word	0x20000f94
 800864c:	2000147c 	.word	0x2000147c
 8008650:	20001478 	.word	0x20001478
 8008654:	e000ed04 	.word	0xe000ed04

08008658 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800865e:	4b05      	ldr	r3, [pc, #20]	@ (8008674 <xTaskGetTickCount+0x1c>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008664:	687b      	ldr	r3, [r7, #4]
}
 8008666:	4618      	mov	r0, r3
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	2000146c 	.word	0x2000146c

08008678 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800867e:	2300      	movs	r3, #0
 8008680:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008682:	4b4f      	ldr	r3, [pc, #316]	@ (80087c0 <xTaskIncrementTick+0x148>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	f040 8090 	bne.w	80087ac <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800868c:	4b4d      	ldr	r3, [pc, #308]	@ (80087c4 <xTaskIncrementTick+0x14c>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3301      	adds	r3, #1
 8008692:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008694:	4a4b      	ldr	r2, [pc, #300]	@ (80087c4 <xTaskIncrementTick+0x14c>)
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d121      	bne.n	80086e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80086a0:	4b49      	ldr	r3, [pc, #292]	@ (80087c8 <xTaskIncrementTick+0x150>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00b      	beq.n	80086c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	603b      	str	r3, [r7, #0]
}
 80086bc:	bf00      	nop
 80086be:	bf00      	nop
 80086c0:	e7fd      	b.n	80086be <xTaskIncrementTick+0x46>
 80086c2:	4b41      	ldr	r3, [pc, #260]	@ (80087c8 <xTaskIncrementTick+0x150>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	60fb      	str	r3, [r7, #12]
 80086c8:	4b40      	ldr	r3, [pc, #256]	@ (80087cc <xTaskIncrementTick+0x154>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a3e      	ldr	r2, [pc, #248]	@ (80087c8 <xTaskIncrementTick+0x150>)
 80086ce:	6013      	str	r3, [r2, #0]
 80086d0:	4a3e      	ldr	r2, [pc, #248]	@ (80087cc <xTaskIncrementTick+0x154>)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6013      	str	r3, [r2, #0]
 80086d6:	4b3e      	ldr	r3, [pc, #248]	@ (80087d0 <xTaskIncrementTick+0x158>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3301      	adds	r3, #1
 80086dc:	4a3c      	ldr	r2, [pc, #240]	@ (80087d0 <xTaskIncrementTick+0x158>)
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	f000 fad4 	bl	8008c8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80086e4:	4b3b      	ldr	r3, [pc, #236]	@ (80087d4 <xTaskIncrementTick+0x15c>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	693a      	ldr	r2, [r7, #16]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d349      	bcc.n	8008782 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086ee:	4b36      	ldr	r3, [pc, #216]	@ (80087c8 <xTaskIncrementTick+0x150>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d104      	bne.n	8008702 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086f8:	4b36      	ldr	r3, [pc, #216]	@ (80087d4 <xTaskIncrementTick+0x15c>)
 80086fa:	f04f 32ff 	mov.w	r2, #4294967295
 80086fe:	601a      	str	r2, [r3, #0]
					break;
 8008700:	e03f      	b.n	8008782 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008702:	4b31      	ldr	r3, [pc, #196]	@ (80087c8 <xTaskIncrementTick+0x150>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	429a      	cmp	r2, r3
 8008718:	d203      	bcs.n	8008722 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800871a:	4a2e      	ldr	r2, [pc, #184]	@ (80087d4 <xTaskIncrementTick+0x15c>)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008720:	e02f      	b.n	8008782 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	3304      	adds	r3, #4
 8008726:	4618      	mov	r0, r3
 8008728:	f7fe fefa 	bl	8007520 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008730:	2b00      	cmp	r3, #0
 8008732:	d004      	beq.n	800873e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	3318      	adds	r3, #24
 8008738:	4618      	mov	r0, r3
 800873a:	f7fe fef1 	bl	8007520 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008742:	4b25      	ldr	r3, [pc, #148]	@ (80087d8 <xTaskIncrementTick+0x160>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	429a      	cmp	r2, r3
 8008748:	d903      	bls.n	8008752 <xTaskIncrementTick+0xda>
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800874e:	4a22      	ldr	r2, [pc, #136]	@ (80087d8 <xTaskIncrementTick+0x160>)
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008756:	4613      	mov	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4413      	add	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4a1f      	ldr	r2, [pc, #124]	@ (80087dc <xTaskIncrementTick+0x164>)
 8008760:	441a      	add	r2, r3
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	3304      	adds	r3, #4
 8008766:	4619      	mov	r1, r3
 8008768:	4610      	mov	r0, r2
 800876a:	f7fe fe7c 	bl	8007466 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008772:	4b1b      	ldr	r3, [pc, #108]	@ (80087e0 <xTaskIncrementTick+0x168>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008778:	429a      	cmp	r2, r3
 800877a:	d3b8      	bcc.n	80086ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800877c:	2301      	movs	r3, #1
 800877e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008780:	e7b5      	b.n	80086ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008782:	4b17      	ldr	r3, [pc, #92]	@ (80087e0 <xTaskIncrementTick+0x168>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008788:	4914      	ldr	r1, [pc, #80]	@ (80087dc <xTaskIncrementTick+0x164>)
 800878a:	4613      	mov	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4413      	add	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	440b      	add	r3, r1
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d901      	bls.n	800879e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800879a:	2301      	movs	r3, #1
 800879c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800879e:	4b11      	ldr	r3, [pc, #68]	@ (80087e4 <xTaskIncrementTick+0x16c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d007      	beq.n	80087b6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80087a6:	2301      	movs	r3, #1
 80087a8:	617b      	str	r3, [r7, #20]
 80087aa:	e004      	b.n	80087b6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80087ac:	4b0e      	ldr	r3, [pc, #56]	@ (80087e8 <xTaskIncrementTick+0x170>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3301      	adds	r3, #1
 80087b2:	4a0d      	ldr	r2, [pc, #52]	@ (80087e8 <xTaskIncrementTick+0x170>)
 80087b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80087b6:	697b      	ldr	r3, [r7, #20]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3718      	adds	r7, #24
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	20001490 	.word	0x20001490
 80087c4:	2000146c 	.word	0x2000146c
 80087c8:	20001420 	.word	0x20001420
 80087cc:	20001424 	.word	0x20001424
 80087d0:	20001480 	.word	0x20001480
 80087d4:	20001488 	.word	0x20001488
 80087d8:	20001470 	.word	0x20001470
 80087dc:	20000f98 	.word	0x20000f98
 80087e0:	20000f94 	.word	0x20000f94
 80087e4:	2000147c 	.word	0x2000147c
 80087e8:	20001478 	.word	0x20001478

080087ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80087f2:	4b28      	ldr	r3, [pc, #160]	@ (8008894 <vTaskSwitchContext+0xa8>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80087fa:	4b27      	ldr	r3, [pc, #156]	@ (8008898 <vTaskSwitchContext+0xac>)
 80087fc:	2201      	movs	r2, #1
 80087fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008800:	e042      	b.n	8008888 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008802:	4b25      	ldr	r3, [pc, #148]	@ (8008898 <vTaskSwitchContext+0xac>)
 8008804:	2200      	movs	r2, #0
 8008806:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008808:	4b24      	ldr	r3, [pc, #144]	@ (800889c <vTaskSwitchContext+0xb0>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	60fb      	str	r3, [r7, #12]
 800880e:	e011      	b.n	8008834 <vTaskSwitchContext+0x48>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10b      	bne.n	800882e <vTaskSwitchContext+0x42>
	__asm volatile
 8008816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	607b      	str	r3, [r7, #4]
}
 8008828:	bf00      	nop
 800882a:	bf00      	nop
 800882c:	e7fd      	b.n	800882a <vTaskSwitchContext+0x3e>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3b01      	subs	r3, #1
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	491a      	ldr	r1, [pc, #104]	@ (80088a0 <vTaskSwitchContext+0xb4>)
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	4613      	mov	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	440b      	add	r3, r1
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d0e3      	beq.n	8008810 <vTaskSwitchContext+0x24>
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	4613      	mov	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4a13      	ldr	r2, [pc, #76]	@ (80088a0 <vTaskSwitchContext+0xb4>)
 8008854:	4413      	add	r3, r2
 8008856:	60bb      	str	r3, [r7, #8]
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	605a      	str	r2, [r3, #4]
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	3308      	adds	r3, #8
 800886a:	429a      	cmp	r2, r3
 800886c:	d104      	bne.n	8008878 <vTaskSwitchContext+0x8c>
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	685a      	ldr	r2, [r3, #4]
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	605a      	str	r2, [r3, #4]
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	4a09      	ldr	r2, [pc, #36]	@ (80088a4 <vTaskSwitchContext+0xb8>)
 8008880:	6013      	str	r3, [r2, #0]
 8008882:	4a06      	ldr	r2, [pc, #24]	@ (800889c <vTaskSwitchContext+0xb0>)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6013      	str	r3, [r2, #0]
}
 8008888:	bf00      	nop
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	20001490 	.word	0x20001490
 8008898:	2000147c 	.word	0x2000147c
 800889c:	20001470 	.word	0x20001470
 80088a0:	20000f98 	.word	0x20000f98
 80088a4:	20000f94 	.word	0x20000f94

080088a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10b      	bne.n	80088d0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80088b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088bc:	f383 8811 	msr	BASEPRI, r3
 80088c0:	f3bf 8f6f 	isb	sy
 80088c4:	f3bf 8f4f 	dsb	sy
 80088c8:	60fb      	str	r3, [r7, #12]
}
 80088ca:	bf00      	nop
 80088cc:	bf00      	nop
 80088ce:	e7fd      	b.n	80088cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80088d0:	4b07      	ldr	r3, [pc, #28]	@ (80088f0 <vTaskPlaceOnEventList+0x48>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3318      	adds	r3, #24
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7fe fde8 	bl	80074ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80088de:	2101      	movs	r1, #1
 80088e0:	6838      	ldr	r0, [r7, #0]
 80088e2:	f000 fa81 	bl	8008de8 <prvAddCurrentTaskToDelayedList>
}
 80088e6:	bf00      	nop
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	20000f94 	.word	0x20000f94

080088f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10b      	bne.n	800891e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	617b      	str	r3, [r7, #20]
}
 8008918:	bf00      	nop
 800891a:	bf00      	nop
 800891c:	e7fd      	b.n	800891a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800891e:	4b0a      	ldr	r3, [pc, #40]	@ (8008948 <vTaskPlaceOnEventListRestricted+0x54>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3318      	adds	r3, #24
 8008924:	4619      	mov	r1, r3
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f7fe fd9d 	bl	8007466 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d002      	beq.n	8008938 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008932:	f04f 33ff 	mov.w	r3, #4294967295
 8008936:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008938:	6879      	ldr	r1, [r7, #4]
 800893a:	68b8      	ldr	r0, [r7, #8]
 800893c:	f000 fa54 	bl	8008de8 <prvAddCurrentTaskToDelayedList>
	}
 8008940:	bf00      	nop
 8008942:	3718      	adds	r7, #24
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	20000f94 	.word	0x20000f94

0800894c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10b      	bne.n	800897a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008966:	f383 8811 	msr	BASEPRI, r3
 800896a:	f3bf 8f6f 	isb	sy
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	60fb      	str	r3, [r7, #12]
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop
 8008978:	e7fd      	b.n	8008976 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	3318      	adds	r3, #24
 800897e:	4618      	mov	r0, r3
 8008980:	f7fe fdce 	bl	8007520 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008984:	4b1d      	ldr	r3, [pc, #116]	@ (80089fc <xTaskRemoveFromEventList+0xb0>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d11d      	bne.n	80089c8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	3304      	adds	r3, #4
 8008990:	4618      	mov	r0, r3
 8008992:	f7fe fdc5 	bl	8007520 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800899a:	4b19      	ldr	r3, [pc, #100]	@ (8008a00 <xTaskRemoveFromEventList+0xb4>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d903      	bls.n	80089aa <xTaskRemoveFromEventList+0x5e>
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a6:	4a16      	ldr	r2, [pc, #88]	@ (8008a00 <xTaskRemoveFromEventList+0xb4>)
 80089a8:	6013      	str	r3, [r2, #0]
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ae:	4613      	mov	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4a13      	ldr	r2, [pc, #76]	@ (8008a04 <xTaskRemoveFromEventList+0xb8>)
 80089b8:	441a      	add	r2, r3
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	3304      	adds	r3, #4
 80089be:	4619      	mov	r1, r3
 80089c0:	4610      	mov	r0, r2
 80089c2:	f7fe fd50 	bl	8007466 <vListInsertEnd>
 80089c6:	e005      	b.n	80089d4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	3318      	adds	r3, #24
 80089cc:	4619      	mov	r1, r3
 80089ce:	480e      	ldr	r0, [pc, #56]	@ (8008a08 <xTaskRemoveFromEventList+0xbc>)
 80089d0:	f7fe fd49 	bl	8007466 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089d8:	4b0c      	ldr	r3, [pc, #48]	@ (8008a0c <xTaskRemoveFromEventList+0xc0>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089de:	429a      	cmp	r2, r3
 80089e0:	d905      	bls.n	80089ee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80089e2:	2301      	movs	r3, #1
 80089e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80089e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008a10 <xTaskRemoveFromEventList+0xc4>)
 80089e8:	2201      	movs	r2, #1
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	e001      	b.n	80089f2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80089ee:	2300      	movs	r3, #0
 80089f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80089f2:	697b      	ldr	r3, [r7, #20]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3718      	adds	r7, #24
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	20001490 	.word	0x20001490
 8008a00:	20001470 	.word	0x20001470
 8008a04:	20000f98 	.word	0x20000f98
 8008a08:	20001428 	.word	0x20001428
 8008a0c:	20000f94 	.word	0x20000f94
 8008a10:	2000147c 	.word	0x2000147c

08008a14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a1c:	4b06      	ldr	r3, [pc, #24]	@ (8008a38 <vTaskInternalSetTimeOutState+0x24>)
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008a24:	4b05      	ldr	r3, [pc, #20]	@ (8008a3c <vTaskInternalSetTimeOutState+0x28>)
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	605a      	str	r2, [r3, #4]
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr
 8008a38:	20001480 	.word	0x20001480
 8008a3c:	2000146c 	.word	0x2000146c

08008a40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b088      	sub	sp, #32
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d10b      	bne.n	8008a68 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	613b      	str	r3, [r7, #16]
}
 8008a62:	bf00      	nop
 8008a64:	bf00      	nop
 8008a66:	e7fd      	b.n	8008a64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10b      	bne.n	8008a86 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	60fb      	str	r3, [r7, #12]
}
 8008a80:	bf00      	nop
 8008a82:	bf00      	nop
 8008a84:	e7fd      	b.n	8008a82 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008a86:	f000 fe8f 	bl	80097a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8008b00 <xTaskCheckForTimeOut+0xc0>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa2:	d102      	bne.n	8008aaa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	61fb      	str	r3, [r7, #28]
 8008aa8:	e023      	b.n	8008af2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	4b15      	ldr	r3, [pc, #84]	@ (8008b04 <xTaskCheckForTimeOut+0xc4>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d007      	beq.n	8008ac6 <xTaskCheckForTimeOut+0x86>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	69ba      	ldr	r2, [r7, #24]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d302      	bcc.n	8008ac6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	61fb      	str	r3, [r7, #28]
 8008ac4:	e015      	b.n	8008af2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d20b      	bcs.n	8008ae8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	1ad2      	subs	r2, r2, r3
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7ff ff99 	bl	8008a14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	61fb      	str	r3, [r7, #28]
 8008ae6:	e004      	b.n	8008af2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	2200      	movs	r2, #0
 8008aec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008aee:	2301      	movs	r3, #1
 8008af0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008af2:	f000 fe8b 	bl	800980c <vPortExitCritical>

	return xReturn;
 8008af6:	69fb      	ldr	r3, [r7, #28]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3720      	adds	r7, #32
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	2000146c 	.word	0x2000146c
 8008b04:	20001480 	.word	0x20001480

08008b08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b08:	b480      	push	{r7}
 8008b0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b0c:	4b03      	ldr	r3, [pc, #12]	@ (8008b1c <vTaskMissedYield+0x14>)
 8008b0e:	2201      	movs	r2, #1
 8008b10:	601a      	str	r2, [r3, #0]
}
 8008b12:	bf00      	nop
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	2000147c 	.word	0x2000147c

08008b20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008b28:	f000 f852 	bl	8008bd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b2c:	4b06      	ldr	r3, [pc, #24]	@ (8008b48 <prvIdleTask+0x28>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d9f9      	bls.n	8008b28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008b34:	4b05      	ldr	r3, [pc, #20]	@ (8008b4c <prvIdleTask+0x2c>)
 8008b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008b44:	e7f0      	b.n	8008b28 <prvIdleTask+0x8>
 8008b46:	bf00      	nop
 8008b48:	20000f98 	.word	0x20000f98
 8008b4c:	e000ed04 	.word	0xe000ed04

08008b50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b56:	2300      	movs	r3, #0
 8008b58:	607b      	str	r3, [r7, #4]
 8008b5a:	e00c      	b.n	8008b76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4a12      	ldr	r2, [pc, #72]	@ (8008bb0 <prvInitialiseTaskLists+0x60>)
 8008b68:	4413      	add	r3, r2
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fe fc4e 	bl	800740c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	3301      	adds	r3, #1
 8008b74:	607b      	str	r3, [r7, #4]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2b37      	cmp	r3, #55	@ 0x37
 8008b7a:	d9ef      	bls.n	8008b5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b7c:	480d      	ldr	r0, [pc, #52]	@ (8008bb4 <prvInitialiseTaskLists+0x64>)
 8008b7e:	f7fe fc45 	bl	800740c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b82:	480d      	ldr	r0, [pc, #52]	@ (8008bb8 <prvInitialiseTaskLists+0x68>)
 8008b84:	f7fe fc42 	bl	800740c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b88:	480c      	ldr	r0, [pc, #48]	@ (8008bbc <prvInitialiseTaskLists+0x6c>)
 8008b8a:	f7fe fc3f 	bl	800740c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b8e:	480c      	ldr	r0, [pc, #48]	@ (8008bc0 <prvInitialiseTaskLists+0x70>)
 8008b90:	f7fe fc3c 	bl	800740c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b94:	480b      	ldr	r0, [pc, #44]	@ (8008bc4 <prvInitialiseTaskLists+0x74>)
 8008b96:	f7fe fc39 	bl	800740c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8008bc8 <prvInitialiseTaskLists+0x78>)
 8008b9c:	4a05      	ldr	r2, [pc, #20]	@ (8008bb4 <prvInitialiseTaskLists+0x64>)
 8008b9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8008bcc <prvInitialiseTaskLists+0x7c>)
 8008ba2:	4a05      	ldr	r2, [pc, #20]	@ (8008bb8 <prvInitialiseTaskLists+0x68>)
 8008ba4:	601a      	str	r2, [r3, #0]
}
 8008ba6:	bf00      	nop
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20000f98 	.word	0x20000f98
 8008bb4:	200013f8 	.word	0x200013f8
 8008bb8:	2000140c 	.word	0x2000140c
 8008bbc:	20001428 	.word	0x20001428
 8008bc0:	2000143c 	.word	0x2000143c
 8008bc4:	20001454 	.word	0x20001454
 8008bc8:	20001420 	.word	0x20001420
 8008bcc:	20001424 	.word	0x20001424

08008bd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008bd6:	e019      	b.n	8008c0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008bd8:	f000 fde6 	bl	80097a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bdc:	4b10      	ldr	r3, [pc, #64]	@ (8008c20 <prvCheckTasksWaitingTermination+0x50>)
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	3304      	adds	r3, #4
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fe fc99 	bl	8007520 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008bee:	4b0d      	ldr	r3, [pc, #52]	@ (8008c24 <prvCheckTasksWaitingTermination+0x54>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8008c24 <prvCheckTasksWaitingTermination+0x54>)
 8008bf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8008c28 <prvCheckTasksWaitingTermination+0x58>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8008c28 <prvCheckTasksWaitingTermination+0x58>)
 8008c00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c02:	f000 fe03 	bl	800980c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f810 	bl	8008c2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c0c:	4b06      	ldr	r3, [pc, #24]	@ (8008c28 <prvCheckTasksWaitingTermination+0x58>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1e1      	bne.n	8008bd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	2000143c 	.word	0x2000143c
 8008c24:	20001468 	.word	0x20001468
 8008c28:	20001450 	.word	0x20001450

08008c2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d108      	bne.n	8008c50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 ffa0 	bl	8009b88 <vPortFree>
				vPortFree( pxTCB );
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 ff9d 	bl	8009b88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c4e:	e019      	b.n	8008c84 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d103      	bne.n	8008c62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 ff94 	bl	8009b88 <vPortFree>
	}
 8008c60:	e010      	b.n	8008c84 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d00b      	beq.n	8008c84 <prvDeleteTCB+0x58>
	__asm volatile
 8008c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	60fb      	str	r3, [r7, #12]
}
 8008c7e:	bf00      	nop
 8008c80:	bf00      	nop
 8008c82:	e7fd      	b.n	8008c80 <prvDeleteTCB+0x54>
	}
 8008c84:	bf00      	nop
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c92:	4b0c      	ldr	r3, [pc, #48]	@ (8008cc4 <prvResetNextTaskUnblockTime+0x38>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d104      	bne.n	8008ca6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008cc8 <prvResetNextTaskUnblockTime+0x3c>)
 8008c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ca4:	e008      	b.n	8008cb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ca6:	4b07      	ldr	r3, [pc, #28]	@ (8008cc4 <prvResetNextTaskUnblockTime+0x38>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	4a04      	ldr	r2, [pc, #16]	@ (8008cc8 <prvResetNextTaskUnblockTime+0x3c>)
 8008cb6:	6013      	str	r3, [r2, #0]
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr
 8008cc4:	20001420 	.word	0x20001420
 8008cc8:	20001488 	.word	0x20001488

08008ccc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8008d00 <xTaskGetSchedulerState+0x34>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d102      	bne.n	8008ce0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	607b      	str	r3, [r7, #4]
 8008cde:	e008      	b.n	8008cf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ce0:	4b08      	ldr	r3, [pc, #32]	@ (8008d04 <xTaskGetSchedulerState+0x38>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d102      	bne.n	8008cee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ce8:	2302      	movs	r3, #2
 8008cea:	607b      	str	r3, [r7, #4]
 8008cec:	e001      	b.n	8008cf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008cf2:	687b      	ldr	r3, [r7, #4]
	}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	20001474 	.word	0x20001474
 8008d04:	20001490 	.word	0x20001490

08008d08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d14:	2300      	movs	r3, #0
 8008d16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d058      	beq.n	8008dd0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d1e:	4b2f      	ldr	r3, [pc, #188]	@ (8008ddc <xTaskPriorityDisinherit+0xd4>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d00b      	beq.n	8008d40 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2c:	f383 8811 	msr	BASEPRI, r3
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	60fb      	str	r3, [r7, #12]
}
 8008d3a:	bf00      	nop
 8008d3c:	bf00      	nop
 8008d3e:	e7fd      	b.n	8008d3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10b      	bne.n	8008d60 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d4c:	f383 8811 	msr	BASEPRI, r3
 8008d50:	f3bf 8f6f 	isb	sy
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	60bb      	str	r3, [r7, #8]
}
 8008d5a:	bf00      	nop
 8008d5c:	bf00      	nop
 8008d5e:	e7fd      	b.n	8008d5c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d64:	1e5a      	subs	r2, r3, #1
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d02c      	beq.n	8008dd0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d128      	bne.n	8008dd0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	3304      	adds	r3, #4
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fe fbcc 	bl	8007520 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d94:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008da0:	4b0f      	ldr	r3, [pc, #60]	@ (8008de0 <xTaskPriorityDisinherit+0xd8>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d903      	bls.n	8008db0 <xTaskPriorityDisinherit+0xa8>
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dac:	4a0c      	ldr	r2, [pc, #48]	@ (8008de0 <xTaskPriorityDisinherit+0xd8>)
 8008dae:	6013      	str	r3, [r2, #0]
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008db4:	4613      	mov	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4a09      	ldr	r2, [pc, #36]	@ (8008de4 <xTaskPriorityDisinherit+0xdc>)
 8008dbe:	441a      	add	r2, r3
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	f7fe fb4d 	bl	8007466 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008dd0:	697b      	ldr	r3, [r7, #20]
	}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	20000f94 	.word	0x20000f94
 8008de0:	20001470 	.word	0x20001470
 8008de4:	20000f98 	.word	0x20000f98

08008de8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008df2:	4b21      	ldr	r3, [pc, #132]	@ (8008e78 <prvAddCurrentTaskToDelayedList+0x90>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008df8:	4b20      	ldr	r3, [pc, #128]	@ (8008e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe fb8e 	bl	8007520 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0a:	d10a      	bne.n	8008e22 <prvAddCurrentTaskToDelayedList+0x3a>
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d007      	beq.n	8008e22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e12:	4b1a      	ldr	r3, [pc, #104]	@ (8008e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3304      	adds	r3, #4
 8008e18:	4619      	mov	r1, r3
 8008e1a:	4819      	ldr	r0, [pc, #100]	@ (8008e80 <prvAddCurrentTaskToDelayedList+0x98>)
 8008e1c:	f7fe fb23 	bl	8007466 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e20:	e026      	b.n	8008e70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4413      	add	r3, r2
 8008e28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e2a:	4b14      	ldr	r3, [pc, #80]	@ (8008e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d209      	bcs.n	8008e4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e3a:	4b12      	ldr	r3, [pc, #72]	@ (8008e84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8008e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	3304      	adds	r3, #4
 8008e44:	4619      	mov	r1, r3
 8008e46:	4610      	mov	r0, r2
 8008e48:	f7fe fb31 	bl	80074ae <vListInsert>
}
 8008e4c:	e010      	b.n	8008e70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8008e88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	4b0a      	ldr	r3, [pc, #40]	@ (8008e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	3304      	adds	r3, #4
 8008e58:	4619      	mov	r1, r3
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	f7fe fb27 	bl	80074ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e60:	4b0a      	ldr	r3, [pc, #40]	@ (8008e8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d202      	bcs.n	8008e70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008e6a:	4a08      	ldr	r2, [pc, #32]	@ (8008e8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	6013      	str	r3, [r2, #0]
}
 8008e70:	bf00      	nop
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	2000146c 	.word	0x2000146c
 8008e7c:	20000f94 	.word	0x20000f94
 8008e80:	20001454 	.word	0x20001454
 8008e84:	20001424 	.word	0x20001424
 8008e88:	20001420 	.word	0x20001420
 8008e8c:	20001488 	.word	0x20001488

08008e90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b08a      	sub	sp, #40	@ 0x28
 8008e94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e96:	2300      	movs	r3, #0
 8008e98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008e9a:	f000 fb13 	bl	80094c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8008f14 <xTimerCreateTimerTask+0x84>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d021      	beq.n	8008eea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008eae:	1d3a      	adds	r2, r7, #4
 8008eb0:	f107 0108 	add.w	r1, r7, #8
 8008eb4:	f107 030c 	add.w	r3, r7, #12
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7fe fa8d 	bl	80073d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008ebe:	6879      	ldr	r1, [r7, #4]
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	9202      	str	r2, [sp, #8]
 8008ec6:	9301      	str	r3, [sp, #4]
 8008ec8:	2302      	movs	r3, #2
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	2300      	movs	r3, #0
 8008ece:	460a      	mov	r2, r1
 8008ed0:	4911      	ldr	r1, [pc, #68]	@ (8008f18 <xTimerCreateTimerTask+0x88>)
 8008ed2:	4812      	ldr	r0, [pc, #72]	@ (8008f1c <xTimerCreateTimerTask+0x8c>)
 8008ed4:	f7ff f906 	bl	80080e4 <xTaskCreateStatic>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	4a11      	ldr	r2, [pc, #68]	@ (8008f20 <xTimerCreateTimerTask+0x90>)
 8008edc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008ede:	4b10      	ldr	r3, [pc, #64]	@ (8008f20 <xTimerCreateTimerTask+0x90>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10b      	bne.n	8008f08 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	613b      	str	r3, [r7, #16]
}
 8008f02:	bf00      	nop
 8008f04:	bf00      	nop
 8008f06:	e7fd      	b.n	8008f04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008f08:	697b      	ldr	r3, [r7, #20]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	200014c4 	.word	0x200014c4
 8008f18:	0800ac8c 	.word	0x0800ac8c
 8008f1c:	0800905d 	.word	0x0800905d
 8008f20:	200014c8 	.word	0x200014c8

08008f24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b08a      	sub	sp, #40	@ 0x28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	607a      	str	r2, [r7, #4]
 8008f30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f32:	2300      	movs	r3, #0
 8008f34:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10b      	bne.n	8008f54 <xTimerGenericCommand+0x30>
	__asm volatile
 8008f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f40:	f383 8811 	msr	BASEPRI, r3
 8008f44:	f3bf 8f6f 	isb	sy
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	623b      	str	r3, [r7, #32]
}
 8008f4e:	bf00      	nop
 8008f50:	bf00      	nop
 8008f52:	e7fd      	b.n	8008f50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f54:	4b19      	ldr	r3, [pc, #100]	@ (8008fbc <xTimerGenericCommand+0x98>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d02a      	beq.n	8008fb2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2b05      	cmp	r3, #5
 8008f6c:	dc18      	bgt.n	8008fa0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f6e:	f7ff fead 	bl	8008ccc <xTaskGetSchedulerState>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d109      	bne.n	8008f8c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f78:	4b10      	ldr	r3, [pc, #64]	@ (8008fbc <xTimerGenericCommand+0x98>)
 8008f7a:	6818      	ldr	r0, [r3, #0]
 8008f7c:	f107 0110 	add.w	r1, r7, #16
 8008f80:	2300      	movs	r3, #0
 8008f82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f84:	f7fe fc3c 	bl	8007800 <xQueueGenericSend>
 8008f88:	6278      	str	r0, [r7, #36]	@ 0x24
 8008f8a:	e012      	b.n	8008fb2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8008fbc <xTimerGenericCommand+0x98>)
 8008f8e:	6818      	ldr	r0, [r3, #0]
 8008f90:	f107 0110 	add.w	r1, r7, #16
 8008f94:	2300      	movs	r3, #0
 8008f96:	2200      	movs	r2, #0
 8008f98:	f7fe fc32 	bl	8007800 <xQueueGenericSend>
 8008f9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008f9e:	e008      	b.n	8008fb2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008fa0:	4b06      	ldr	r3, [pc, #24]	@ (8008fbc <xTimerGenericCommand+0x98>)
 8008fa2:	6818      	ldr	r0, [r3, #0]
 8008fa4:	f107 0110 	add.w	r1, r7, #16
 8008fa8:	2300      	movs	r3, #0
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	f7fe fd2a 	bl	8007a04 <xQueueGenericSendFromISR>
 8008fb0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3728      	adds	r7, #40	@ 0x28
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	200014c4 	.word	0x200014c4

08008fc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b088      	sub	sp, #32
 8008fc4:	af02      	add	r7, sp, #8
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fca:	4b23      	ldr	r3, [pc, #140]	@ (8009058 <prvProcessExpiredTimer+0x98>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fe faa1 	bl	8007520 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fe4:	f003 0304 	and.w	r3, r3, #4
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d023      	beq.n	8009034 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	699a      	ldr	r2, [r3, #24]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	18d1      	adds	r1, r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	683a      	ldr	r2, [r7, #0]
 8008ff8:	6978      	ldr	r0, [r7, #20]
 8008ffa:	f000 f8d5 	bl	80091a8 <prvInsertTimerInActiveList>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d020      	beq.n	8009046 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009004:	2300      	movs	r3, #0
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	2300      	movs	r3, #0
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	2100      	movs	r1, #0
 800900e:	6978      	ldr	r0, [r7, #20]
 8009010:	f7ff ff88 	bl	8008f24 <xTimerGenericCommand>
 8009014:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d114      	bne.n	8009046 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800901c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009020:	f383 8811 	msr	BASEPRI, r3
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	60fb      	str	r3, [r7, #12]
}
 800902e:	bf00      	nop
 8009030:	bf00      	nop
 8009032:	e7fd      	b.n	8009030 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800903a:	f023 0301 	bic.w	r3, r3, #1
 800903e:	b2da      	uxtb	r2, r3
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	6978      	ldr	r0, [r7, #20]
 800904c:	4798      	blx	r3
}
 800904e:	bf00      	nop
 8009050:	3718      	adds	r7, #24
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	200014bc 	.word	0x200014bc

0800905c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009064:	f107 0308 	add.w	r3, r7, #8
 8009068:	4618      	mov	r0, r3
 800906a:	f000 f859 	bl	8009120 <prvGetNextExpireTime>
 800906e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	4619      	mov	r1, r3
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f000 f805 	bl	8009084 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800907a:	f000 f8d7 	bl	800922c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800907e:	bf00      	nop
 8009080:	e7f0      	b.n	8009064 <prvTimerTask+0x8>
	...

08009084 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800908e:	f7ff fa37 	bl	8008500 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009092:	f107 0308 	add.w	r3, r7, #8
 8009096:	4618      	mov	r0, r3
 8009098:	f000 f866 	bl	8009168 <prvSampleTimeNow>
 800909c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d130      	bne.n	8009106 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10a      	bne.n	80090c0 <prvProcessTimerOrBlockTask+0x3c>
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d806      	bhi.n	80090c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80090b2:	f7ff fa33 	bl	800851c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80090b6:	68f9      	ldr	r1, [r7, #12]
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7ff ff81 	bl	8008fc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80090be:	e024      	b.n	800910a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d008      	beq.n	80090d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80090c6:	4b13      	ldr	r3, [pc, #76]	@ (8009114 <prvProcessTimerOrBlockTask+0x90>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d101      	bne.n	80090d4 <prvProcessTimerOrBlockTask+0x50>
 80090d0:	2301      	movs	r3, #1
 80090d2:	e000      	b.n	80090d6 <prvProcessTimerOrBlockTask+0x52>
 80090d4:	2300      	movs	r3, #0
 80090d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80090d8:	4b0f      	ldr	r3, [pc, #60]	@ (8009118 <prvProcessTimerOrBlockTask+0x94>)
 80090da:	6818      	ldr	r0, [r3, #0]
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	4619      	mov	r1, r3
 80090e6:	f7fe ffc9 	bl	800807c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80090ea:	f7ff fa17 	bl	800851c <xTaskResumeAll>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10a      	bne.n	800910a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80090f4:	4b09      	ldr	r3, [pc, #36]	@ (800911c <prvProcessTimerOrBlockTask+0x98>)
 80090f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	f3bf 8f6f 	isb	sy
}
 8009104:	e001      	b.n	800910a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009106:	f7ff fa09 	bl	800851c <xTaskResumeAll>
}
 800910a:	bf00      	nop
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	200014c0 	.word	0x200014c0
 8009118:	200014c4 	.word	0x200014c4
 800911c:	e000ed04 	.word	0xe000ed04

08009120 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009128:	4b0e      	ldr	r3, [pc, #56]	@ (8009164 <prvGetNextExpireTime+0x44>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <prvGetNextExpireTime+0x16>
 8009132:	2201      	movs	r2, #1
 8009134:	e000      	b.n	8009138 <prvGetNextExpireTime+0x18>
 8009136:	2200      	movs	r2, #0
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d105      	bne.n	8009150 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009144:	4b07      	ldr	r3, [pc, #28]	@ (8009164 <prvGetNextExpireTime+0x44>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	60fb      	str	r3, [r7, #12]
 800914e:	e001      	b.n	8009154 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009150:	2300      	movs	r3, #0
 8009152:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009154:	68fb      	ldr	r3, [r7, #12]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3714      	adds	r7, #20
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	200014bc 	.word	0x200014bc

08009168 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009170:	f7ff fa72 	bl	8008658 <xTaskGetTickCount>
 8009174:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009176:	4b0b      	ldr	r3, [pc, #44]	@ (80091a4 <prvSampleTimeNow+0x3c>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	429a      	cmp	r2, r3
 800917e:	d205      	bcs.n	800918c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009180:	f000 f93a 	bl	80093f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	e002      	b.n	8009192 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009192:	4a04      	ldr	r2, [pc, #16]	@ (80091a4 <prvSampleTimeNow+0x3c>)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009198:	68fb      	ldr	r3, [r7, #12]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	200014cc 	.word	0x200014cc

080091a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
 80091b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80091b6:	2300      	movs	r3, #0
 80091b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d812      	bhi.n	80091f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	1ad2      	subs	r2, r2, r3
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d302      	bcc.n	80091e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80091dc:	2301      	movs	r3, #1
 80091de:	617b      	str	r3, [r7, #20]
 80091e0:	e01b      	b.n	800921a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80091e2:	4b10      	ldr	r3, [pc, #64]	@ (8009224 <prvInsertTimerInActiveList+0x7c>)
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	3304      	adds	r3, #4
 80091ea:	4619      	mov	r1, r3
 80091ec:	4610      	mov	r0, r2
 80091ee:	f7fe f95e 	bl	80074ae <vListInsert>
 80091f2:	e012      	b.n	800921a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d206      	bcs.n	800920a <prvInsertTimerInActiveList+0x62>
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	429a      	cmp	r2, r3
 8009202:	d302      	bcc.n	800920a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009204:	2301      	movs	r3, #1
 8009206:	617b      	str	r3, [r7, #20]
 8009208:	e007      	b.n	800921a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800920a:	4b07      	ldr	r3, [pc, #28]	@ (8009228 <prvInsertTimerInActiveList+0x80>)
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3304      	adds	r3, #4
 8009212:	4619      	mov	r1, r3
 8009214:	4610      	mov	r0, r2
 8009216:	f7fe f94a 	bl	80074ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800921a:	697b      	ldr	r3, [r7, #20]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3718      	adds	r7, #24
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	200014c0 	.word	0x200014c0
 8009228:	200014bc 	.word	0x200014bc

0800922c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b08e      	sub	sp, #56	@ 0x38
 8009230:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009232:	e0ce      	b.n	80093d2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	da19      	bge.n	800926e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800923a:	1d3b      	adds	r3, r7, #4
 800923c:	3304      	adds	r3, #4
 800923e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10b      	bne.n	800925e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	61fb      	str	r3, [r7, #28]
}
 8009258:	bf00      	nop
 800925a:	bf00      	nop
 800925c:	e7fd      	b.n	800925a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800925e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009264:	6850      	ldr	r0, [r2, #4]
 8009266:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009268:	6892      	ldr	r2, [r2, #8]
 800926a:	4611      	mov	r1, r2
 800926c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	f2c0 80ae 	blt.w	80093d2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800927a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d004      	beq.n	800928c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009284:	3304      	adds	r3, #4
 8009286:	4618      	mov	r0, r3
 8009288:	f7fe f94a 	bl	8007520 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800928c:	463b      	mov	r3, r7
 800928e:	4618      	mov	r0, r3
 8009290:	f7ff ff6a 	bl	8009168 <prvSampleTimeNow>
 8009294:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b09      	cmp	r3, #9
 800929a:	f200 8097 	bhi.w	80093cc <prvProcessReceivedCommands+0x1a0>
 800929e:	a201      	add	r2, pc, #4	@ (adr r2, 80092a4 <prvProcessReceivedCommands+0x78>)
 80092a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a4:	080092cd 	.word	0x080092cd
 80092a8:	080092cd 	.word	0x080092cd
 80092ac:	080092cd 	.word	0x080092cd
 80092b0:	08009343 	.word	0x08009343
 80092b4:	08009357 	.word	0x08009357
 80092b8:	080093a3 	.word	0x080093a3
 80092bc:	080092cd 	.word	0x080092cd
 80092c0:	080092cd 	.word	0x080092cd
 80092c4:	08009343 	.word	0x08009343
 80092c8:	08009357 	.word	0x08009357
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092d2:	f043 0301 	orr.w	r3, r3, #1
 80092d6:	b2da      	uxtb	r2, r3
 80092d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80092de:	68ba      	ldr	r2, [r7, #8]
 80092e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e2:	699b      	ldr	r3, [r3, #24]
 80092e4:	18d1      	adds	r1, r2, r3
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092ec:	f7ff ff5c 	bl	80091a8 <prvInsertTimerInActiveList>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d06c      	beq.n	80093d0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f8:	6a1b      	ldr	r3, [r3, #32]
 80092fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009300:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009304:	f003 0304 	and.w	r3, r3, #4
 8009308:	2b00      	cmp	r3, #0
 800930a:	d061      	beq.n	80093d0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	441a      	add	r2, r3
 8009314:	2300      	movs	r3, #0
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	2300      	movs	r3, #0
 800931a:	2100      	movs	r1, #0
 800931c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800931e:	f7ff fe01 	bl	8008f24 <xTimerGenericCommand>
 8009322:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009324:	6a3b      	ldr	r3, [r7, #32]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d152      	bne.n	80093d0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800932a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	61bb      	str	r3, [r7, #24]
}
 800933c:	bf00      	nop
 800933e:	bf00      	nop
 8009340:	e7fd      	b.n	800933e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009344:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009348:	f023 0301 	bic.w	r3, r3, #1
 800934c:	b2da      	uxtb	r2, r3
 800934e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009350:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009354:	e03d      	b.n	80093d2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009358:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800935c:	f043 0301 	orr.w	r3, r3, #1
 8009360:	b2da      	uxtb	r2, r3
 8009362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009364:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800936e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10b      	bne.n	800938e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800937a:	f383 8811 	msr	BASEPRI, r3
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	617b      	str	r3, [r7, #20]
}
 8009388:	bf00      	nop
 800938a:	bf00      	nop
 800938c:	e7fd      	b.n	800938a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800938e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009390:	699a      	ldr	r2, [r3, #24]
 8009392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009394:	18d1      	adds	r1, r2, r3
 8009396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800939a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800939c:	f7ff ff04 	bl	80091a8 <prvInsertTimerInActiveList>
					break;
 80093a0:	e017      	b.n	80093d2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80093a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093a8:	f003 0302 	and.w	r3, r3, #2
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d103      	bne.n	80093b8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80093b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093b2:	f000 fbe9 	bl	8009b88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80093b6:	e00c      	b.n	80093d2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093be:	f023 0301 	bic.w	r3, r3, #1
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80093ca:	e002      	b.n	80093d2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80093cc:	bf00      	nop
 80093ce:	e000      	b.n	80093d2 <prvProcessReceivedCommands+0x1a6>
					break;
 80093d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093d2:	4b08      	ldr	r3, [pc, #32]	@ (80093f4 <prvProcessReceivedCommands+0x1c8>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	1d39      	adds	r1, r7, #4
 80093d8:	2200      	movs	r2, #0
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fe fbb0 	bl	8007b40 <xQueueReceive>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f47f af26 	bne.w	8009234 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80093e8:	bf00      	nop
 80093ea:	bf00      	nop
 80093ec:	3730      	adds	r7, #48	@ 0x30
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	200014c4 	.word	0x200014c4

080093f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b088      	sub	sp, #32
 80093fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093fe:	e049      	b.n	8009494 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009400:	4b2e      	ldr	r3, [pc, #184]	@ (80094bc <prvSwitchTimerLists+0xc4>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800940a:	4b2c      	ldr	r3, [pc, #176]	@ (80094bc <prvSwitchTimerLists+0xc4>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	3304      	adds	r3, #4
 8009418:	4618      	mov	r0, r3
 800941a:	f7fe f881 	bl	8007520 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800942c:	f003 0304 	and.w	r3, r3, #4
 8009430:	2b00      	cmp	r3, #0
 8009432:	d02f      	beq.n	8009494 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	4413      	add	r3, r2
 800943c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	429a      	cmp	r2, r3
 8009444:	d90e      	bls.n	8009464 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009452:	4b1a      	ldr	r3, [pc, #104]	@ (80094bc <prvSwitchTimerLists+0xc4>)
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	3304      	adds	r3, #4
 800945a:	4619      	mov	r1, r3
 800945c:	4610      	mov	r0, r2
 800945e:	f7fe f826 	bl	80074ae <vListInsert>
 8009462:	e017      	b.n	8009494 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009464:	2300      	movs	r3, #0
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	2300      	movs	r3, #0
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	2100      	movs	r1, #0
 800946e:	68f8      	ldr	r0, [r7, #12]
 8009470:	f7ff fd58 	bl	8008f24 <xTimerGenericCommand>
 8009474:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d10b      	bne.n	8009494 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800947c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009480:	f383 8811 	msr	BASEPRI, r3
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	603b      	str	r3, [r7, #0]
}
 800948e:	bf00      	nop
 8009490:	bf00      	nop
 8009492:	e7fd      	b.n	8009490 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009494:	4b09      	ldr	r3, [pc, #36]	@ (80094bc <prvSwitchTimerLists+0xc4>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1b0      	bne.n	8009400 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800949e:	4b07      	ldr	r3, [pc, #28]	@ (80094bc <prvSwitchTimerLists+0xc4>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80094a4:	4b06      	ldr	r3, [pc, #24]	@ (80094c0 <prvSwitchTimerLists+0xc8>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a04      	ldr	r2, [pc, #16]	@ (80094bc <prvSwitchTimerLists+0xc4>)
 80094aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80094ac:	4a04      	ldr	r2, [pc, #16]	@ (80094c0 <prvSwitchTimerLists+0xc8>)
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	6013      	str	r3, [r2, #0]
}
 80094b2:	bf00      	nop
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	200014bc 	.word	0x200014bc
 80094c0:	200014c0 	.word	0x200014c0

080094c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80094ca:	f000 f96d 	bl	80097a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80094ce:	4b15      	ldr	r3, [pc, #84]	@ (8009524 <prvCheckForValidListAndQueue+0x60>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d120      	bne.n	8009518 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80094d6:	4814      	ldr	r0, [pc, #80]	@ (8009528 <prvCheckForValidListAndQueue+0x64>)
 80094d8:	f7fd ff98 	bl	800740c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80094dc:	4813      	ldr	r0, [pc, #76]	@ (800952c <prvCheckForValidListAndQueue+0x68>)
 80094de:	f7fd ff95 	bl	800740c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80094e2:	4b13      	ldr	r3, [pc, #76]	@ (8009530 <prvCheckForValidListAndQueue+0x6c>)
 80094e4:	4a10      	ldr	r2, [pc, #64]	@ (8009528 <prvCheckForValidListAndQueue+0x64>)
 80094e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80094e8:	4b12      	ldr	r3, [pc, #72]	@ (8009534 <prvCheckForValidListAndQueue+0x70>)
 80094ea:	4a10      	ldr	r2, [pc, #64]	@ (800952c <prvCheckForValidListAndQueue+0x68>)
 80094ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80094ee:	2300      	movs	r3, #0
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	4b11      	ldr	r3, [pc, #68]	@ (8009538 <prvCheckForValidListAndQueue+0x74>)
 80094f4:	4a11      	ldr	r2, [pc, #68]	@ (800953c <prvCheckForValidListAndQueue+0x78>)
 80094f6:	2110      	movs	r1, #16
 80094f8:	200a      	movs	r0, #10
 80094fa:	f7fe f8a5 	bl	8007648 <xQueueGenericCreateStatic>
 80094fe:	4603      	mov	r3, r0
 8009500:	4a08      	ldr	r2, [pc, #32]	@ (8009524 <prvCheckForValidListAndQueue+0x60>)
 8009502:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009504:	4b07      	ldr	r3, [pc, #28]	@ (8009524 <prvCheckForValidListAndQueue+0x60>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d005      	beq.n	8009518 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800950c:	4b05      	ldr	r3, [pc, #20]	@ (8009524 <prvCheckForValidListAndQueue+0x60>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	490b      	ldr	r1, [pc, #44]	@ (8009540 <prvCheckForValidListAndQueue+0x7c>)
 8009512:	4618      	mov	r0, r3
 8009514:	f7fe fd88 	bl	8008028 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009518:	f000 f978 	bl	800980c <vPortExitCritical>
}
 800951c:	bf00      	nop
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	200014c4 	.word	0x200014c4
 8009528:	20001494 	.word	0x20001494
 800952c:	200014a8 	.word	0x200014a8
 8009530:	200014bc 	.word	0x200014bc
 8009534:	200014c0 	.word	0x200014c0
 8009538:	20001570 	.word	0x20001570
 800953c:	200014d0 	.word	0x200014d0
 8009540:	0800ac94 	.word	0x0800ac94

08009544 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	3b04      	subs	r3, #4
 8009554:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800955c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	3b04      	subs	r3, #4
 8009562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	f023 0201 	bic.w	r2, r3, #1
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3b04      	subs	r3, #4
 8009572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009574:	4a0c      	ldr	r2, [pc, #48]	@ (80095a8 <pxPortInitialiseStack+0x64>)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	3b14      	subs	r3, #20
 800957e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	3b04      	subs	r3, #4
 800958a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f06f 0202 	mvn.w	r2, #2
 8009592:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	3b20      	subs	r3, #32
 8009598:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800959a:	68fb      	ldr	r3, [r7, #12]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3714      	adds	r7, #20
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	080095ad 	.word	0x080095ad

080095ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80095b2:	2300      	movs	r3, #0
 80095b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80095b6:	4b13      	ldr	r3, [pc, #76]	@ (8009604 <prvTaskExitError+0x58>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095be:	d00b      	beq.n	80095d8 <prvTaskExitError+0x2c>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	60fb      	str	r3, [r7, #12]
}
 80095d2:	bf00      	nop
 80095d4:	bf00      	nop
 80095d6:	e7fd      	b.n	80095d4 <prvTaskExitError+0x28>
	__asm volatile
 80095d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095dc:	f383 8811 	msr	BASEPRI, r3
 80095e0:	f3bf 8f6f 	isb	sy
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	60bb      	str	r3, [r7, #8]
}
 80095ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80095ec:	bf00      	nop
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d0fc      	beq.n	80095ee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80095f4:	bf00      	nop
 80095f6:	bf00      	nop
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	2000000c 	.word	0x2000000c
	...

08009610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009610:	4b07      	ldr	r3, [pc, #28]	@ (8009630 <pxCurrentTCBConst2>)
 8009612:	6819      	ldr	r1, [r3, #0]
 8009614:	6808      	ldr	r0, [r1, #0]
 8009616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961a:	f380 8809 	msr	PSP, r0
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	f04f 0000 	mov.w	r0, #0
 8009626:	f380 8811 	msr	BASEPRI, r0
 800962a:	4770      	bx	lr
 800962c:	f3af 8000 	nop.w

08009630 <pxCurrentTCBConst2>:
 8009630:	20000f94 	.word	0x20000f94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009634:	bf00      	nop
 8009636:	bf00      	nop

08009638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009638:	4808      	ldr	r0, [pc, #32]	@ (800965c <prvPortStartFirstTask+0x24>)
 800963a:	6800      	ldr	r0, [r0, #0]
 800963c:	6800      	ldr	r0, [r0, #0]
 800963e:	f380 8808 	msr	MSP, r0
 8009642:	f04f 0000 	mov.w	r0, #0
 8009646:	f380 8814 	msr	CONTROL, r0
 800964a:	b662      	cpsie	i
 800964c:	b661      	cpsie	f
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	df00      	svc	0
 8009658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800965a:	bf00      	nop
 800965c:	e000ed08 	.word	0xe000ed08

08009660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009666:	4b47      	ldr	r3, [pc, #284]	@ (8009784 <xPortStartScheduler+0x124>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a47      	ldr	r2, [pc, #284]	@ (8009788 <xPortStartScheduler+0x128>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d10b      	bne.n	8009688 <xPortStartScheduler+0x28>
	__asm volatile
 8009670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	60fb      	str	r3, [r7, #12]
}
 8009682:	bf00      	nop
 8009684:	bf00      	nop
 8009686:	e7fd      	b.n	8009684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009688:	4b3e      	ldr	r3, [pc, #248]	@ (8009784 <xPortStartScheduler+0x124>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a3f      	ldr	r2, [pc, #252]	@ (800978c <xPortStartScheduler+0x12c>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d10b      	bne.n	80096aa <xPortStartScheduler+0x4a>
	__asm volatile
 8009692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009696:	f383 8811 	msr	BASEPRI, r3
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	613b      	str	r3, [r7, #16]
}
 80096a4:	bf00      	nop
 80096a6:	bf00      	nop
 80096a8:	e7fd      	b.n	80096a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80096aa:	4b39      	ldr	r3, [pc, #228]	@ (8009790 <xPortStartScheduler+0x130>)
 80096ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	22ff      	movs	r2, #255	@ 0xff
 80096ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80096c4:	78fb      	ldrb	r3, [r7, #3]
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80096cc:	b2da      	uxtb	r2, r3
 80096ce:	4b31      	ldr	r3, [pc, #196]	@ (8009794 <xPortStartScheduler+0x134>)
 80096d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80096d2:	4b31      	ldr	r3, [pc, #196]	@ (8009798 <xPortStartScheduler+0x138>)
 80096d4:	2207      	movs	r2, #7
 80096d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80096d8:	e009      	b.n	80096ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80096da:	4b2f      	ldr	r3, [pc, #188]	@ (8009798 <xPortStartScheduler+0x138>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	3b01      	subs	r3, #1
 80096e0:	4a2d      	ldr	r2, [pc, #180]	@ (8009798 <xPortStartScheduler+0x138>)
 80096e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80096e4:	78fb      	ldrb	r3, [r7, #3]
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	005b      	lsls	r3, r3, #1
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80096ee:	78fb      	ldrb	r3, [r7, #3]
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096f6:	2b80      	cmp	r3, #128	@ 0x80
 80096f8:	d0ef      	beq.n	80096da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80096fa:	4b27      	ldr	r3, [pc, #156]	@ (8009798 <xPortStartScheduler+0x138>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f1c3 0307 	rsb	r3, r3, #7
 8009702:	2b04      	cmp	r3, #4
 8009704:	d00b      	beq.n	800971e <xPortStartScheduler+0xbe>
	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	60bb      	str	r3, [r7, #8]
}
 8009718:	bf00      	nop
 800971a:	bf00      	nop
 800971c:	e7fd      	b.n	800971a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800971e:	4b1e      	ldr	r3, [pc, #120]	@ (8009798 <xPortStartScheduler+0x138>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	021b      	lsls	r3, r3, #8
 8009724:	4a1c      	ldr	r2, [pc, #112]	@ (8009798 <xPortStartScheduler+0x138>)
 8009726:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009728:	4b1b      	ldr	r3, [pc, #108]	@ (8009798 <xPortStartScheduler+0x138>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009730:	4a19      	ldr	r2, [pc, #100]	@ (8009798 <xPortStartScheduler+0x138>)
 8009732:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	b2da      	uxtb	r2, r3
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800973c:	4b17      	ldr	r3, [pc, #92]	@ (800979c <xPortStartScheduler+0x13c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a16      	ldr	r2, [pc, #88]	@ (800979c <xPortStartScheduler+0x13c>)
 8009742:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009746:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009748:	4b14      	ldr	r3, [pc, #80]	@ (800979c <xPortStartScheduler+0x13c>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a13      	ldr	r2, [pc, #76]	@ (800979c <xPortStartScheduler+0x13c>)
 800974e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009752:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009754:	f000 f8da 	bl	800990c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009758:	4b11      	ldr	r3, [pc, #68]	@ (80097a0 <xPortStartScheduler+0x140>)
 800975a:	2200      	movs	r2, #0
 800975c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800975e:	f000 f8f9 	bl	8009954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009762:	4b10      	ldr	r3, [pc, #64]	@ (80097a4 <xPortStartScheduler+0x144>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a0f      	ldr	r2, [pc, #60]	@ (80097a4 <xPortStartScheduler+0x144>)
 8009768:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800976c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800976e:	f7ff ff63 	bl	8009638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009772:	f7ff f83b 	bl	80087ec <vTaskSwitchContext>
	prvTaskExitError();
 8009776:	f7ff ff19 	bl	80095ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3718      	adds	r7, #24
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	e000ed00 	.word	0xe000ed00
 8009788:	410fc271 	.word	0x410fc271
 800978c:	410fc270 	.word	0x410fc270
 8009790:	e000e400 	.word	0xe000e400
 8009794:	200015c0 	.word	0x200015c0
 8009798:	200015c4 	.word	0x200015c4
 800979c:	e000ed20 	.word	0xe000ed20
 80097a0:	2000000c 	.word	0x2000000c
 80097a4:	e000ef34 	.word	0xe000ef34

080097a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	607b      	str	r3, [r7, #4]
}
 80097c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80097c2:	4b10      	ldr	r3, [pc, #64]	@ (8009804 <vPortEnterCritical+0x5c>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	3301      	adds	r3, #1
 80097c8:	4a0e      	ldr	r2, [pc, #56]	@ (8009804 <vPortEnterCritical+0x5c>)
 80097ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80097cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009804 <vPortEnterCritical+0x5c>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d110      	bne.n	80097f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80097d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009808 <vPortEnterCritical+0x60>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00b      	beq.n	80097f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e2:	f383 8811 	msr	BASEPRI, r3
 80097e6:	f3bf 8f6f 	isb	sy
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	603b      	str	r3, [r7, #0]
}
 80097f0:	bf00      	nop
 80097f2:	bf00      	nop
 80097f4:	e7fd      	b.n	80097f2 <vPortEnterCritical+0x4a>
	}
}
 80097f6:	bf00      	nop
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	2000000c 	.word	0x2000000c
 8009808:	e000ed04 	.word	0xe000ed04

0800980c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009812:	4b12      	ldr	r3, [pc, #72]	@ (800985c <vPortExitCritical+0x50>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10b      	bne.n	8009832 <vPortExitCritical+0x26>
	__asm volatile
 800981a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	607b      	str	r3, [r7, #4]
}
 800982c:	bf00      	nop
 800982e:	bf00      	nop
 8009830:	e7fd      	b.n	800982e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009832:	4b0a      	ldr	r3, [pc, #40]	@ (800985c <vPortExitCritical+0x50>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	3b01      	subs	r3, #1
 8009838:	4a08      	ldr	r2, [pc, #32]	@ (800985c <vPortExitCritical+0x50>)
 800983a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800983c:	4b07      	ldr	r3, [pc, #28]	@ (800985c <vPortExitCritical+0x50>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d105      	bne.n	8009850 <vPortExitCritical+0x44>
 8009844:	2300      	movs	r3, #0
 8009846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	f383 8811 	msr	BASEPRI, r3
}
 800984e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	2000000c 	.word	0x2000000c

08009860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009860:	f3ef 8009 	mrs	r0, PSP
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	4b15      	ldr	r3, [pc, #84]	@ (80098c0 <pxCurrentTCBConst>)
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	f01e 0f10 	tst.w	lr, #16
 8009870:	bf08      	it	eq
 8009872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987a:	6010      	str	r0, [r2, #0]
 800987c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009880:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009884:	f380 8811 	msr	BASEPRI, r0
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f7fe ffac 	bl	80087ec <vTaskSwitchContext>
 8009894:	f04f 0000 	mov.w	r0, #0
 8009898:	f380 8811 	msr	BASEPRI, r0
 800989c:	bc09      	pop	{r0, r3}
 800989e:	6819      	ldr	r1, [r3, #0]
 80098a0:	6808      	ldr	r0, [r1, #0]
 80098a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a6:	f01e 0f10 	tst.w	lr, #16
 80098aa:	bf08      	it	eq
 80098ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80098b0:	f380 8809 	msr	PSP, r0
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	f3af 8000 	nop.w

080098c0 <pxCurrentTCBConst>:
 80098c0:	20000f94 	.word	0x20000f94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80098c4:	bf00      	nop
 80098c6:	bf00      	nop

080098c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	607b      	str	r3, [r7, #4]
}
 80098e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80098e2:	f7fe fec9 	bl	8008678 <xTaskIncrementTick>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d003      	beq.n	80098f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80098ec:	4b06      	ldr	r3, [pc, #24]	@ (8009908 <xPortSysTickHandler+0x40>)
 80098ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098f2:	601a      	str	r2, [r3, #0]
 80098f4:	2300      	movs	r3, #0
 80098f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	f383 8811 	msr	BASEPRI, r3
}
 80098fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009900:	bf00      	nop
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	e000ed04 	.word	0xe000ed04

0800990c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800990c:	b480      	push	{r7}
 800990e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009910:	4b0b      	ldr	r3, [pc, #44]	@ (8009940 <vPortSetupTimerInterrupt+0x34>)
 8009912:	2200      	movs	r2, #0
 8009914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009916:	4b0b      	ldr	r3, [pc, #44]	@ (8009944 <vPortSetupTimerInterrupt+0x38>)
 8009918:	2200      	movs	r2, #0
 800991a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800991c:	4b0a      	ldr	r3, [pc, #40]	@ (8009948 <vPortSetupTimerInterrupt+0x3c>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a0a      	ldr	r2, [pc, #40]	@ (800994c <vPortSetupTimerInterrupt+0x40>)
 8009922:	fba2 2303 	umull	r2, r3, r2, r3
 8009926:	099b      	lsrs	r3, r3, #6
 8009928:	4a09      	ldr	r2, [pc, #36]	@ (8009950 <vPortSetupTimerInterrupt+0x44>)
 800992a:	3b01      	subs	r3, #1
 800992c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800992e:	4b04      	ldr	r3, [pc, #16]	@ (8009940 <vPortSetupTimerInterrupt+0x34>)
 8009930:	2207      	movs	r2, #7
 8009932:	601a      	str	r2, [r3, #0]
}
 8009934:	bf00      	nop
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	e000e010 	.word	0xe000e010
 8009944:	e000e018 	.word	0xe000e018
 8009948:	20000000 	.word	0x20000000
 800994c:	10624dd3 	.word	0x10624dd3
 8009950:	e000e014 	.word	0xe000e014

08009954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009954:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009964 <vPortEnableVFP+0x10>
 8009958:	6801      	ldr	r1, [r0, #0]
 800995a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800995e:	6001      	str	r1, [r0, #0]
 8009960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009962:	bf00      	nop
 8009964:	e000ed88 	.word	0xe000ed88

08009968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800996e:	f3ef 8305 	mrs	r3, IPSR
 8009972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2b0f      	cmp	r3, #15
 8009978:	d915      	bls.n	80099a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800997a:	4a18      	ldr	r2, [pc, #96]	@ (80099dc <vPortValidateInterruptPriority+0x74>)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	4413      	add	r3, r2
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009984:	4b16      	ldr	r3, [pc, #88]	@ (80099e0 <vPortValidateInterruptPriority+0x78>)
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	7afa      	ldrb	r2, [r7, #11]
 800998a:	429a      	cmp	r2, r3
 800998c:	d20b      	bcs.n	80099a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	607b      	str	r3, [r7, #4]
}
 80099a0:	bf00      	nop
 80099a2:	bf00      	nop
 80099a4:	e7fd      	b.n	80099a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80099a6:	4b0f      	ldr	r3, [pc, #60]	@ (80099e4 <vPortValidateInterruptPriority+0x7c>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80099ae:	4b0e      	ldr	r3, [pc, #56]	@ (80099e8 <vPortValidateInterruptPriority+0x80>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d90b      	bls.n	80099ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80099b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ba:	f383 8811 	msr	BASEPRI, r3
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f3bf 8f4f 	dsb	sy
 80099c6:	603b      	str	r3, [r7, #0]
}
 80099c8:	bf00      	nop
 80099ca:	bf00      	nop
 80099cc:	e7fd      	b.n	80099ca <vPortValidateInterruptPriority+0x62>
	}
 80099ce:	bf00      	nop
 80099d0:	3714      	adds	r7, #20
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	e000e3f0 	.word	0xe000e3f0
 80099e0:	200015c0 	.word	0x200015c0
 80099e4:	e000ed0c 	.word	0xe000ed0c
 80099e8:	200015c4 	.word	0x200015c4

080099ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b08a      	sub	sp, #40	@ 0x28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80099f4:	2300      	movs	r3, #0
 80099f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80099f8:	f7fe fd82 	bl	8008500 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80099fc:	4b5c      	ldr	r3, [pc, #368]	@ (8009b70 <pvPortMalloc+0x184>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a04:	f000 f924 	bl	8009c50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a08:	4b5a      	ldr	r3, [pc, #360]	@ (8009b74 <pvPortMalloc+0x188>)
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4013      	ands	r3, r2
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f040 8095 	bne.w	8009b40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d01e      	beq.n	8009a5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009a1c:	2208      	movs	r2, #8
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4413      	add	r3, r2
 8009a22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f003 0307 	and.w	r3, r3, #7
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d015      	beq.n	8009a5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f023 0307 	bic.w	r3, r3, #7
 8009a34:	3308      	adds	r3, #8
 8009a36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f003 0307 	and.w	r3, r3, #7
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00b      	beq.n	8009a5a <pvPortMalloc+0x6e>
	__asm volatile
 8009a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	617b      	str	r3, [r7, #20]
}
 8009a54:	bf00      	nop
 8009a56:	bf00      	nop
 8009a58:	e7fd      	b.n	8009a56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d06f      	beq.n	8009b40 <pvPortMalloc+0x154>
 8009a60:	4b45      	ldr	r3, [pc, #276]	@ (8009b78 <pvPortMalloc+0x18c>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d86a      	bhi.n	8009b40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a6a:	4b44      	ldr	r3, [pc, #272]	@ (8009b7c <pvPortMalloc+0x190>)
 8009a6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009a6e:	4b43      	ldr	r3, [pc, #268]	@ (8009b7c <pvPortMalloc+0x190>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a74:	e004      	b.n	8009a80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d903      	bls.n	8009a92 <pvPortMalloc+0xa6>
 8009a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1f1      	bne.n	8009a76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a92:	4b37      	ldr	r3, [pc, #220]	@ (8009b70 <pvPortMalloc+0x184>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d051      	beq.n	8009b40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a9c:	6a3b      	ldr	r3, [r7, #32]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2208      	movs	r2, #8
 8009aa2:	4413      	add	r3, r2
 8009aa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	6a3b      	ldr	r3, [r7, #32]
 8009aac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab0:	685a      	ldr	r2, [r3, #4]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	1ad2      	subs	r2, r2, r3
 8009ab6:	2308      	movs	r3, #8
 8009ab8:	005b      	lsls	r3, r3, #1
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d920      	bls.n	8009b00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	f003 0307 	and.w	r3, r3, #7
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00b      	beq.n	8009ae8 <pvPortMalloc+0xfc>
	__asm volatile
 8009ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	613b      	str	r3, [r7, #16]
}
 8009ae2:	bf00      	nop
 8009ae4:	bf00      	nop
 8009ae6:	e7fd      	b.n	8009ae4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	1ad2      	subs	r2, r2, r3
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009afa:	69b8      	ldr	r0, [r7, #24]
 8009afc:	f000 f90a 	bl	8009d14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b00:	4b1d      	ldr	r3, [pc, #116]	@ (8009b78 <pvPortMalloc+0x18c>)
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	1ad3      	subs	r3, r2, r3
 8009b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8009b78 <pvPortMalloc+0x18c>)
 8009b0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8009b78 <pvPortMalloc+0x18c>)
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	4b1b      	ldr	r3, [pc, #108]	@ (8009b80 <pvPortMalloc+0x194>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d203      	bcs.n	8009b22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b1a:	4b17      	ldr	r3, [pc, #92]	@ (8009b78 <pvPortMalloc+0x18c>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a18      	ldr	r2, [pc, #96]	@ (8009b80 <pvPortMalloc+0x194>)
 8009b20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b24:	685a      	ldr	r2, [r3, #4]
 8009b26:	4b13      	ldr	r3, [pc, #76]	@ (8009b74 <pvPortMalloc+0x188>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b32:	2200      	movs	r2, #0
 8009b34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009b36:	4b13      	ldr	r3, [pc, #76]	@ (8009b84 <pvPortMalloc+0x198>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	4a11      	ldr	r2, [pc, #68]	@ (8009b84 <pvPortMalloc+0x198>)
 8009b3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b40:	f7fe fcec 	bl	800851c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	f003 0307 	and.w	r3, r3, #7
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00b      	beq.n	8009b66 <pvPortMalloc+0x17a>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	60fb      	str	r3, [r7, #12]
}
 8009b60:	bf00      	nop
 8009b62:	bf00      	nop
 8009b64:	e7fd      	b.n	8009b62 <pvPortMalloc+0x176>
	return pvReturn;
 8009b66:	69fb      	ldr	r3, [r7, #28]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3728      	adds	r7, #40	@ 0x28
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	20002188 	.word	0x20002188
 8009b74:	2000219c 	.word	0x2000219c
 8009b78:	2000218c 	.word	0x2000218c
 8009b7c:	20002180 	.word	0x20002180
 8009b80:	20002190 	.word	0x20002190
 8009b84:	20002194 	.word	0x20002194

08009b88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b086      	sub	sp, #24
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d04f      	beq.n	8009c3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b9a:	2308      	movs	r3, #8
 8009b9c:	425b      	negs	r3, r3
 8009b9e:	697a      	ldr	r2, [r7, #20]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	685a      	ldr	r2, [r3, #4]
 8009bac:	4b25      	ldr	r3, [pc, #148]	@ (8009c44 <vPortFree+0xbc>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10b      	bne.n	8009bce <vPortFree+0x46>
	__asm volatile
 8009bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	60fb      	str	r3, [r7, #12]
}
 8009bc8:	bf00      	nop
 8009bca:	bf00      	nop
 8009bcc:	e7fd      	b.n	8009bca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00b      	beq.n	8009bee <vPortFree+0x66>
	__asm volatile
 8009bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bda:	f383 8811 	msr	BASEPRI, r3
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f3bf 8f4f 	dsb	sy
 8009be6:	60bb      	str	r3, [r7, #8]
}
 8009be8:	bf00      	nop
 8009bea:	bf00      	nop
 8009bec:	e7fd      	b.n	8009bea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	685a      	ldr	r2, [r3, #4]
 8009bf2:	4b14      	ldr	r3, [pc, #80]	@ (8009c44 <vPortFree+0xbc>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d01e      	beq.n	8009c3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d11a      	bne.n	8009c3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	685a      	ldr	r2, [r3, #4]
 8009c08:	4b0e      	ldr	r3, [pc, #56]	@ (8009c44 <vPortFree+0xbc>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	43db      	mvns	r3, r3
 8009c0e:	401a      	ands	r2, r3
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c14:	f7fe fc74 	bl	8008500 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c48 <vPortFree+0xc0>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4413      	add	r3, r2
 8009c22:	4a09      	ldr	r2, [pc, #36]	@ (8009c48 <vPortFree+0xc0>)
 8009c24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c26:	6938      	ldr	r0, [r7, #16]
 8009c28:	f000 f874 	bl	8009d14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009c2c:	4b07      	ldr	r3, [pc, #28]	@ (8009c4c <vPortFree+0xc4>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3301      	adds	r3, #1
 8009c32:	4a06      	ldr	r2, [pc, #24]	@ (8009c4c <vPortFree+0xc4>)
 8009c34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009c36:	f7fe fc71 	bl	800851c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c3a:	bf00      	nop
 8009c3c:	3718      	adds	r7, #24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	2000219c 	.word	0x2000219c
 8009c48:	2000218c 	.word	0x2000218c
 8009c4c:	20002198 	.word	0x20002198

08009c50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c56:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009c5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c5c:	4b27      	ldr	r3, [pc, #156]	@ (8009cfc <prvHeapInit+0xac>)
 8009c5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f003 0307 	and.w	r3, r3, #7
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00c      	beq.n	8009c84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	3307      	adds	r3, #7
 8009c6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f023 0307 	bic.w	r3, r3, #7
 8009c76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8009cfc <prvHeapInit+0xac>)
 8009c80:	4413      	add	r3, r2
 8009c82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c88:	4a1d      	ldr	r2, [pc, #116]	@ (8009d00 <prvHeapInit+0xb0>)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8009d00 <prvHeapInit+0xb0>)
 8009c90:	2200      	movs	r2, #0
 8009c92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	4413      	add	r3, r2
 8009c9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009c9c:	2208      	movs	r2, #8
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	1a9b      	subs	r3, r3, r2
 8009ca2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f023 0307 	bic.w	r3, r3, #7
 8009caa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	4a15      	ldr	r2, [pc, #84]	@ (8009d04 <prvHeapInit+0xb4>)
 8009cb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009cb2:	4b14      	ldr	r3, [pc, #80]	@ (8009d04 <prvHeapInit+0xb4>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009cba:	4b12      	ldr	r3, [pc, #72]	@ (8009d04 <prvHeapInit+0xb4>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	1ad2      	subs	r2, r2, r3
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8009d04 <prvHeapInit+0xb4>)
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8009d08 <prvHeapInit+0xb8>)
 8009cde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	4a09      	ldr	r2, [pc, #36]	@ (8009d0c <prvHeapInit+0xbc>)
 8009ce6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ce8:	4b09      	ldr	r3, [pc, #36]	@ (8009d10 <prvHeapInit+0xc0>)
 8009cea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009cee:	601a      	str	r2, [r3, #0]
}
 8009cf0:	bf00      	nop
 8009cf2:	3714      	adds	r7, #20
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr
 8009cfc:	200015c8 	.word	0x200015c8
 8009d00:	20002180 	.word	0x20002180
 8009d04:	20002188 	.word	0x20002188
 8009d08:	20002190 	.word	0x20002190
 8009d0c:	2000218c 	.word	0x2000218c
 8009d10:	2000219c 	.word	0x2000219c

08009d14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d1c:	4b28      	ldr	r3, [pc, #160]	@ (8009dc0 <prvInsertBlockIntoFreeList+0xac>)
 8009d1e:	60fb      	str	r3, [r7, #12]
 8009d20:	e002      	b.n	8009d28 <prvInsertBlockIntoFreeList+0x14>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	60fb      	str	r3, [r7, #12]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d8f7      	bhi.n	8009d22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d108      	bne.n	8009d56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	685a      	ldr	r2, [r3, #4]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	441a      	add	r2, r3
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	441a      	add	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d118      	bne.n	8009d9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	4b15      	ldr	r3, [pc, #84]	@ (8009dc4 <prvInsertBlockIntoFreeList+0xb0>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d00d      	beq.n	8009d92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	685a      	ldr	r2, [r3, #4]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	441a      	add	r2, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	601a      	str	r2, [r3, #0]
 8009d90:	e008      	b.n	8009da4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009d92:	4b0c      	ldr	r3, [pc, #48]	@ (8009dc4 <prvInsertBlockIntoFreeList+0xb0>)
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	601a      	str	r2, [r3, #0]
 8009d9a:	e003      	b.n	8009da4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d002      	beq.n	8009db2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009db2:	bf00      	nop
 8009db4:	3714      	adds	r7, #20
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	20002180 	.word	0x20002180
 8009dc4:	20002188 	.word	0x20002188

08009dc8 <std>:
 8009dc8:	2300      	movs	r3, #0
 8009dca:	b510      	push	{r4, lr}
 8009dcc:	4604      	mov	r4, r0
 8009dce:	e9c0 3300 	strd	r3, r3, [r0]
 8009dd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009dd6:	6083      	str	r3, [r0, #8]
 8009dd8:	8181      	strh	r1, [r0, #12]
 8009dda:	6643      	str	r3, [r0, #100]	@ 0x64
 8009ddc:	81c2      	strh	r2, [r0, #14]
 8009dde:	6183      	str	r3, [r0, #24]
 8009de0:	4619      	mov	r1, r3
 8009de2:	2208      	movs	r2, #8
 8009de4:	305c      	adds	r0, #92	@ 0x5c
 8009de6:	f000 f906 	bl	8009ff6 <memset>
 8009dea:	4b0d      	ldr	r3, [pc, #52]	@ (8009e20 <std+0x58>)
 8009dec:	6263      	str	r3, [r4, #36]	@ 0x24
 8009dee:	4b0d      	ldr	r3, [pc, #52]	@ (8009e24 <std+0x5c>)
 8009df0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009df2:	4b0d      	ldr	r3, [pc, #52]	@ (8009e28 <std+0x60>)
 8009df4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009df6:	4b0d      	ldr	r3, [pc, #52]	@ (8009e2c <std+0x64>)
 8009df8:	6323      	str	r3, [r4, #48]	@ 0x30
 8009dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8009e30 <std+0x68>)
 8009dfc:	6224      	str	r4, [r4, #32]
 8009dfe:	429c      	cmp	r4, r3
 8009e00:	d006      	beq.n	8009e10 <std+0x48>
 8009e02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009e06:	4294      	cmp	r4, r2
 8009e08:	d002      	beq.n	8009e10 <std+0x48>
 8009e0a:	33d0      	adds	r3, #208	@ 0xd0
 8009e0c:	429c      	cmp	r4, r3
 8009e0e:	d105      	bne.n	8009e1c <std+0x54>
 8009e10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e18:	f000 b966 	b.w	800a0e8 <__retarget_lock_init_recursive>
 8009e1c:	bd10      	pop	{r4, pc}
 8009e1e:	bf00      	nop
 8009e20:	08009f71 	.word	0x08009f71
 8009e24:	08009f93 	.word	0x08009f93
 8009e28:	08009fcb 	.word	0x08009fcb
 8009e2c:	08009fef 	.word	0x08009fef
 8009e30:	200021a0 	.word	0x200021a0

08009e34 <stdio_exit_handler>:
 8009e34:	4a02      	ldr	r2, [pc, #8]	@ (8009e40 <stdio_exit_handler+0xc>)
 8009e36:	4903      	ldr	r1, [pc, #12]	@ (8009e44 <stdio_exit_handler+0x10>)
 8009e38:	4803      	ldr	r0, [pc, #12]	@ (8009e48 <stdio_exit_handler+0x14>)
 8009e3a:	f000 b869 	b.w	8009f10 <_fwalk_sglue>
 8009e3e:	bf00      	nop
 8009e40:	20000010 	.word	0x20000010
 8009e44:	0800a9a1 	.word	0x0800a9a1
 8009e48:	20000020 	.word	0x20000020

08009e4c <cleanup_stdio>:
 8009e4c:	6841      	ldr	r1, [r0, #4]
 8009e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8009e80 <cleanup_stdio+0x34>)
 8009e50:	4299      	cmp	r1, r3
 8009e52:	b510      	push	{r4, lr}
 8009e54:	4604      	mov	r4, r0
 8009e56:	d001      	beq.n	8009e5c <cleanup_stdio+0x10>
 8009e58:	f000 fda2 	bl	800a9a0 <_fflush_r>
 8009e5c:	68a1      	ldr	r1, [r4, #8]
 8009e5e:	4b09      	ldr	r3, [pc, #36]	@ (8009e84 <cleanup_stdio+0x38>)
 8009e60:	4299      	cmp	r1, r3
 8009e62:	d002      	beq.n	8009e6a <cleanup_stdio+0x1e>
 8009e64:	4620      	mov	r0, r4
 8009e66:	f000 fd9b 	bl	800a9a0 <_fflush_r>
 8009e6a:	68e1      	ldr	r1, [r4, #12]
 8009e6c:	4b06      	ldr	r3, [pc, #24]	@ (8009e88 <cleanup_stdio+0x3c>)
 8009e6e:	4299      	cmp	r1, r3
 8009e70:	d004      	beq.n	8009e7c <cleanup_stdio+0x30>
 8009e72:	4620      	mov	r0, r4
 8009e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e78:	f000 bd92 	b.w	800a9a0 <_fflush_r>
 8009e7c:	bd10      	pop	{r4, pc}
 8009e7e:	bf00      	nop
 8009e80:	200021a0 	.word	0x200021a0
 8009e84:	20002208 	.word	0x20002208
 8009e88:	20002270 	.word	0x20002270

08009e8c <global_stdio_init.part.0>:
 8009e8c:	b510      	push	{r4, lr}
 8009e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8009ebc <global_stdio_init.part.0+0x30>)
 8009e90:	4c0b      	ldr	r4, [pc, #44]	@ (8009ec0 <global_stdio_init.part.0+0x34>)
 8009e92:	4a0c      	ldr	r2, [pc, #48]	@ (8009ec4 <global_stdio_init.part.0+0x38>)
 8009e94:	601a      	str	r2, [r3, #0]
 8009e96:	4620      	mov	r0, r4
 8009e98:	2200      	movs	r2, #0
 8009e9a:	2104      	movs	r1, #4
 8009e9c:	f7ff ff94 	bl	8009dc8 <std>
 8009ea0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	2109      	movs	r1, #9
 8009ea8:	f7ff ff8e 	bl	8009dc8 <std>
 8009eac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009eb0:	2202      	movs	r2, #2
 8009eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eb6:	2112      	movs	r1, #18
 8009eb8:	f7ff bf86 	b.w	8009dc8 <std>
 8009ebc:	200022d8 	.word	0x200022d8
 8009ec0:	200021a0 	.word	0x200021a0
 8009ec4:	08009e35 	.word	0x08009e35

08009ec8 <__sfp_lock_acquire>:
 8009ec8:	4801      	ldr	r0, [pc, #4]	@ (8009ed0 <__sfp_lock_acquire+0x8>)
 8009eca:	f000 b90e 	b.w	800a0ea <__retarget_lock_acquire_recursive>
 8009ece:	bf00      	nop
 8009ed0:	200022e1 	.word	0x200022e1

08009ed4 <__sfp_lock_release>:
 8009ed4:	4801      	ldr	r0, [pc, #4]	@ (8009edc <__sfp_lock_release+0x8>)
 8009ed6:	f000 b909 	b.w	800a0ec <__retarget_lock_release_recursive>
 8009eda:	bf00      	nop
 8009edc:	200022e1 	.word	0x200022e1

08009ee0 <__sinit>:
 8009ee0:	b510      	push	{r4, lr}
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	f7ff fff0 	bl	8009ec8 <__sfp_lock_acquire>
 8009ee8:	6a23      	ldr	r3, [r4, #32]
 8009eea:	b11b      	cbz	r3, 8009ef4 <__sinit+0x14>
 8009eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ef0:	f7ff bff0 	b.w	8009ed4 <__sfp_lock_release>
 8009ef4:	4b04      	ldr	r3, [pc, #16]	@ (8009f08 <__sinit+0x28>)
 8009ef6:	6223      	str	r3, [r4, #32]
 8009ef8:	4b04      	ldr	r3, [pc, #16]	@ (8009f0c <__sinit+0x2c>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1f5      	bne.n	8009eec <__sinit+0xc>
 8009f00:	f7ff ffc4 	bl	8009e8c <global_stdio_init.part.0>
 8009f04:	e7f2      	b.n	8009eec <__sinit+0xc>
 8009f06:	bf00      	nop
 8009f08:	08009e4d 	.word	0x08009e4d
 8009f0c:	200022d8 	.word	0x200022d8

08009f10 <_fwalk_sglue>:
 8009f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f14:	4607      	mov	r7, r0
 8009f16:	4688      	mov	r8, r1
 8009f18:	4614      	mov	r4, r2
 8009f1a:	2600      	movs	r6, #0
 8009f1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f20:	f1b9 0901 	subs.w	r9, r9, #1
 8009f24:	d505      	bpl.n	8009f32 <_fwalk_sglue+0x22>
 8009f26:	6824      	ldr	r4, [r4, #0]
 8009f28:	2c00      	cmp	r4, #0
 8009f2a:	d1f7      	bne.n	8009f1c <_fwalk_sglue+0xc>
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f32:	89ab      	ldrh	r3, [r5, #12]
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d907      	bls.n	8009f48 <_fwalk_sglue+0x38>
 8009f38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	d003      	beq.n	8009f48 <_fwalk_sglue+0x38>
 8009f40:	4629      	mov	r1, r5
 8009f42:	4638      	mov	r0, r7
 8009f44:	47c0      	blx	r8
 8009f46:	4306      	orrs	r6, r0
 8009f48:	3568      	adds	r5, #104	@ 0x68
 8009f4a:	e7e9      	b.n	8009f20 <_fwalk_sglue+0x10>

08009f4c <iprintf>:
 8009f4c:	b40f      	push	{r0, r1, r2, r3}
 8009f4e:	b507      	push	{r0, r1, r2, lr}
 8009f50:	4906      	ldr	r1, [pc, #24]	@ (8009f6c <iprintf+0x20>)
 8009f52:	ab04      	add	r3, sp, #16
 8009f54:	6808      	ldr	r0, [r1, #0]
 8009f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f5a:	6881      	ldr	r1, [r0, #8]
 8009f5c:	9301      	str	r3, [sp, #4]
 8009f5e:	f000 f9f7 	bl	800a350 <_vfiprintf_r>
 8009f62:	b003      	add	sp, #12
 8009f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f68:	b004      	add	sp, #16
 8009f6a:	4770      	bx	lr
 8009f6c:	2000001c 	.word	0x2000001c

08009f70 <__sread>:
 8009f70:	b510      	push	{r4, lr}
 8009f72:	460c      	mov	r4, r1
 8009f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f78:	f000 f868 	bl	800a04c <_read_r>
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	bfab      	itete	ge
 8009f80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009f82:	89a3      	ldrhlt	r3, [r4, #12]
 8009f84:	181b      	addge	r3, r3, r0
 8009f86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009f8a:	bfac      	ite	ge
 8009f8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009f8e:	81a3      	strhlt	r3, [r4, #12]
 8009f90:	bd10      	pop	{r4, pc}

08009f92 <__swrite>:
 8009f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f96:	461f      	mov	r7, r3
 8009f98:	898b      	ldrh	r3, [r1, #12]
 8009f9a:	05db      	lsls	r3, r3, #23
 8009f9c:	4605      	mov	r5, r0
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	4616      	mov	r6, r2
 8009fa2:	d505      	bpl.n	8009fb0 <__swrite+0x1e>
 8009fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fa8:	2302      	movs	r3, #2
 8009faa:	2200      	movs	r2, #0
 8009fac:	f000 f83c 	bl	800a028 <_lseek_r>
 8009fb0:	89a3      	ldrh	r3, [r4, #12]
 8009fb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009fba:	81a3      	strh	r3, [r4, #12]
 8009fbc:	4632      	mov	r2, r6
 8009fbe:	463b      	mov	r3, r7
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc6:	f000 b853 	b.w	800a070 <_write_r>

08009fca <__sseek>:
 8009fca:	b510      	push	{r4, lr}
 8009fcc:	460c      	mov	r4, r1
 8009fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fd2:	f000 f829 	bl	800a028 <_lseek_r>
 8009fd6:	1c43      	adds	r3, r0, #1
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	bf15      	itete	ne
 8009fdc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009fde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009fe2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009fe6:	81a3      	strheq	r3, [r4, #12]
 8009fe8:	bf18      	it	ne
 8009fea:	81a3      	strhne	r3, [r4, #12]
 8009fec:	bd10      	pop	{r4, pc}

08009fee <__sclose>:
 8009fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff2:	f000 b809 	b.w	800a008 <_close_r>

08009ff6 <memset>:
 8009ff6:	4402      	add	r2, r0
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d100      	bne.n	800a000 <memset+0xa>
 8009ffe:	4770      	bx	lr
 800a000:	f803 1b01 	strb.w	r1, [r3], #1
 800a004:	e7f9      	b.n	8009ffa <memset+0x4>
	...

0800a008 <_close_r>:
 800a008:	b538      	push	{r3, r4, r5, lr}
 800a00a:	4d06      	ldr	r5, [pc, #24]	@ (800a024 <_close_r+0x1c>)
 800a00c:	2300      	movs	r3, #0
 800a00e:	4604      	mov	r4, r0
 800a010:	4608      	mov	r0, r1
 800a012:	602b      	str	r3, [r5, #0]
 800a014:	f7f7 fb4e 	bl	80016b4 <_close>
 800a018:	1c43      	adds	r3, r0, #1
 800a01a:	d102      	bne.n	800a022 <_close_r+0x1a>
 800a01c:	682b      	ldr	r3, [r5, #0]
 800a01e:	b103      	cbz	r3, 800a022 <_close_r+0x1a>
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	bd38      	pop	{r3, r4, r5, pc}
 800a024:	200022dc 	.word	0x200022dc

0800a028 <_lseek_r>:
 800a028:	b538      	push	{r3, r4, r5, lr}
 800a02a:	4d07      	ldr	r5, [pc, #28]	@ (800a048 <_lseek_r+0x20>)
 800a02c:	4604      	mov	r4, r0
 800a02e:	4608      	mov	r0, r1
 800a030:	4611      	mov	r1, r2
 800a032:	2200      	movs	r2, #0
 800a034:	602a      	str	r2, [r5, #0]
 800a036:	461a      	mov	r2, r3
 800a038:	f7f7 fb63 	bl	8001702 <_lseek>
 800a03c:	1c43      	adds	r3, r0, #1
 800a03e:	d102      	bne.n	800a046 <_lseek_r+0x1e>
 800a040:	682b      	ldr	r3, [r5, #0]
 800a042:	b103      	cbz	r3, 800a046 <_lseek_r+0x1e>
 800a044:	6023      	str	r3, [r4, #0]
 800a046:	bd38      	pop	{r3, r4, r5, pc}
 800a048:	200022dc 	.word	0x200022dc

0800a04c <_read_r>:
 800a04c:	b538      	push	{r3, r4, r5, lr}
 800a04e:	4d07      	ldr	r5, [pc, #28]	@ (800a06c <_read_r+0x20>)
 800a050:	4604      	mov	r4, r0
 800a052:	4608      	mov	r0, r1
 800a054:	4611      	mov	r1, r2
 800a056:	2200      	movs	r2, #0
 800a058:	602a      	str	r2, [r5, #0]
 800a05a:	461a      	mov	r2, r3
 800a05c:	f7f7 faf1 	bl	8001642 <_read>
 800a060:	1c43      	adds	r3, r0, #1
 800a062:	d102      	bne.n	800a06a <_read_r+0x1e>
 800a064:	682b      	ldr	r3, [r5, #0]
 800a066:	b103      	cbz	r3, 800a06a <_read_r+0x1e>
 800a068:	6023      	str	r3, [r4, #0]
 800a06a:	bd38      	pop	{r3, r4, r5, pc}
 800a06c:	200022dc 	.word	0x200022dc

0800a070 <_write_r>:
 800a070:	b538      	push	{r3, r4, r5, lr}
 800a072:	4d07      	ldr	r5, [pc, #28]	@ (800a090 <_write_r+0x20>)
 800a074:	4604      	mov	r4, r0
 800a076:	4608      	mov	r0, r1
 800a078:	4611      	mov	r1, r2
 800a07a:	2200      	movs	r2, #0
 800a07c:	602a      	str	r2, [r5, #0]
 800a07e:	461a      	mov	r2, r3
 800a080:	f7f7 fafc 	bl	800167c <_write>
 800a084:	1c43      	adds	r3, r0, #1
 800a086:	d102      	bne.n	800a08e <_write_r+0x1e>
 800a088:	682b      	ldr	r3, [r5, #0]
 800a08a:	b103      	cbz	r3, 800a08e <_write_r+0x1e>
 800a08c:	6023      	str	r3, [r4, #0]
 800a08e:	bd38      	pop	{r3, r4, r5, pc}
 800a090:	200022dc 	.word	0x200022dc

0800a094 <__errno>:
 800a094:	4b01      	ldr	r3, [pc, #4]	@ (800a09c <__errno+0x8>)
 800a096:	6818      	ldr	r0, [r3, #0]
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	2000001c 	.word	0x2000001c

0800a0a0 <__libc_init_array>:
 800a0a0:	b570      	push	{r4, r5, r6, lr}
 800a0a2:	4d0d      	ldr	r5, [pc, #52]	@ (800a0d8 <__libc_init_array+0x38>)
 800a0a4:	4c0d      	ldr	r4, [pc, #52]	@ (800a0dc <__libc_init_array+0x3c>)
 800a0a6:	1b64      	subs	r4, r4, r5
 800a0a8:	10a4      	asrs	r4, r4, #2
 800a0aa:	2600      	movs	r6, #0
 800a0ac:	42a6      	cmp	r6, r4
 800a0ae:	d109      	bne.n	800a0c4 <__libc_init_array+0x24>
 800a0b0:	4d0b      	ldr	r5, [pc, #44]	@ (800a0e0 <__libc_init_array+0x40>)
 800a0b2:	4c0c      	ldr	r4, [pc, #48]	@ (800a0e4 <__libc_init_array+0x44>)
 800a0b4:	f000 fdc4 	bl	800ac40 <_init>
 800a0b8:	1b64      	subs	r4, r4, r5
 800a0ba:	10a4      	asrs	r4, r4, #2
 800a0bc:	2600      	movs	r6, #0
 800a0be:	42a6      	cmp	r6, r4
 800a0c0:	d105      	bne.n	800a0ce <__libc_init_array+0x2e>
 800a0c2:	bd70      	pop	{r4, r5, r6, pc}
 800a0c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0c8:	4798      	blx	r3
 800a0ca:	3601      	adds	r6, #1
 800a0cc:	e7ee      	b.n	800a0ac <__libc_init_array+0xc>
 800a0ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0d2:	4798      	blx	r3
 800a0d4:	3601      	adds	r6, #1
 800a0d6:	e7f2      	b.n	800a0be <__libc_init_array+0x1e>
 800a0d8:	0800ad5c 	.word	0x0800ad5c
 800a0dc:	0800ad5c 	.word	0x0800ad5c
 800a0e0:	0800ad5c 	.word	0x0800ad5c
 800a0e4:	0800ad60 	.word	0x0800ad60

0800a0e8 <__retarget_lock_init_recursive>:
 800a0e8:	4770      	bx	lr

0800a0ea <__retarget_lock_acquire_recursive>:
 800a0ea:	4770      	bx	lr

0800a0ec <__retarget_lock_release_recursive>:
 800a0ec:	4770      	bx	lr

0800a0ee <memcpy>:
 800a0ee:	440a      	add	r2, r1
 800a0f0:	4291      	cmp	r1, r2
 800a0f2:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0f6:	d100      	bne.n	800a0fa <memcpy+0xc>
 800a0f8:	4770      	bx	lr
 800a0fa:	b510      	push	{r4, lr}
 800a0fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a100:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a104:	4291      	cmp	r1, r2
 800a106:	d1f9      	bne.n	800a0fc <memcpy+0xe>
 800a108:	bd10      	pop	{r4, pc}
	...

0800a10c <_free_r>:
 800a10c:	b538      	push	{r3, r4, r5, lr}
 800a10e:	4605      	mov	r5, r0
 800a110:	2900      	cmp	r1, #0
 800a112:	d041      	beq.n	800a198 <_free_r+0x8c>
 800a114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a118:	1f0c      	subs	r4, r1, #4
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	bfb8      	it	lt
 800a11e:	18e4      	addlt	r4, r4, r3
 800a120:	f000 f8e0 	bl	800a2e4 <__malloc_lock>
 800a124:	4a1d      	ldr	r2, [pc, #116]	@ (800a19c <_free_r+0x90>)
 800a126:	6813      	ldr	r3, [r2, #0]
 800a128:	b933      	cbnz	r3, 800a138 <_free_r+0x2c>
 800a12a:	6063      	str	r3, [r4, #4]
 800a12c:	6014      	str	r4, [r2, #0]
 800a12e:	4628      	mov	r0, r5
 800a130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a134:	f000 b8dc 	b.w	800a2f0 <__malloc_unlock>
 800a138:	42a3      	cmp	r3, r4
 800a13a:	d908      	bls.n	800a14e <_free_r+0x42>
 800a13c:	6820      	ldr	r0, [r4, #0]
 800a13e:	1821      	adds	r1, r4, r0
 800a140:	428b      	cmp	r3, r1
 800a142:	bf01      	itttt	eq
 800a144:	6819      	ldreq	r1, [r3, #0]
 800a146:	685b      	ldreq	r3, [r3, #4]
 800a148:	1809      	addeq	r1, r1, r0
 800a14a:	6021      	streq	r1, [r4, #0]
 800a14c:	e7ed      	b.n	800a12a <_free_r+0x1e>
 800a14e:	461a      	mov	r2, r3
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	b10b      	cbz	r3, 800a158 <_free_r+0x4c>
 800a154:	42a3      	cmp	r3, r4
 800a156:	d9fa      	bls.n	800a14e <_free_r+0x42>
 800a158:	6811      	ldr	r1, [r2, #0]
 800a15a:	1850      	adds	r0, r2, r1
 800a15c:	42a0      	cmp	r0, r4
 800a15e:	d10b      	bne.n	800a178 <_free_r+0x6c>
 800a160:	6820      	ldr	r0, [r4, #0]
 800a162:	4401      	add	r1, r0
 800a164:	1850      	adds	r0, r2, r1
 800a166:	4283      	cmp	r3, r0
 800a168:	6011      	str	r1, [r2, #0]
 800a16a:	d1e0      	bne.n	800a12e <_free_r+0x22>
 800a16c:	6818      	ldr	r0, [r3, #0]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	6053      	str	r3, [r2, #4]
 800a172:	4408      	add	r0, r1
 800a174:	6010      	str	r0, [r2, #0]
 800a176:	e7da      	b.n	800a12e <_free_r+0x22>
 800a178:	d902      	bls.n	800a180 <_free_r+0x74>
 800a17a:	230c      	movs	r3, #12
 800a17c:	602b      	str	r3, [r5, #0]
 800a17e:	e7d6      	b.n	800a12e <_free_r+0x22>
 800a180:	6820      	ldr	r0, [r4, #0]
 800a182:	1821      	adds	r1, r4, r0
 800a184:	428b      	cmp	r3, r1
 800a186:	bf04      	itt	eq
 800a188:	6819      	ldreq	r1, [r3, #0]
 800a18a:	685b      	ldreq	r3, [r3, #4]
 800a18c:	6063      	str	r3, [r4, #4]
 800a18e:	bf04      	itt	eq
 800a190:	1809      	addeq	r1, r1, r0
 800a192:	6021      	streq	r1, [r4, #0]
 800a194:	6054      	str	r4, [r2, #4]
 800a196:	e7ca      	b.n	800a12e <_free_r+0x22>
 800a198:	bd38      	pop	{r3, r4, r5, pc}
 800a19a:	bf00      	nop
 800a19c:	200022e8 	.word	0x200022e8

0800a1a0 <sbrk_aligned>:
 800a1a0:	b570      	push	{r4, r5, r6, lr}
 800a1a2:	4e0f      	ldr	r6, [pc, #60]	@ (800a1e0 <sbrk_aligned+0x40>)
 800a1a4:	460c      	mov	r4, r1
 800a1a6:	6831      	ldr	r1, [r6, #0]
 800a1a8:	4605      	mov	r5, r0
 800a1aa:	b911      	cbnz	r1, 800a1b2 <sbrk_aligned+0x12>
 800a1ac:	f000 fcb4 	bl	800ab18 <_sbrk_r>
 800a1b0:	6030      	str	r0, [r6, #0]
 800a1b2:	4621      	mov	r1, r4
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	f000 fcaf 	bl	800ab18 <_sbrk_r>
 800a1ba:	1c43      	adds	r3, r0, #1
 800a1bc:	d103      	bne.n	800a1c6 <sbrk_aligned+0x26>
 800a1be:	f04f 34ff 	mov.w	r4, #4294967295
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	bd70      	pop	{r4, r5, r6, pc}
 800a1c6:	1cc4      	adds	r4, r0, #3
 800a1c8:	f024 0403 	bic.w	r4, r4, #3
 800a1cc:	42a0      	cmp	r0, r4
 800a1ce:	d0f8      	beq.n	800a1c2 <sbrk_aligned+0x22>
 800a1d0:	1a21      	subs	r1, r4, r0
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	f000 fca0 	bl	800ab18 <_sbrk_r>
 800a1d8:	3001      	adds	r0, #1
 800a1da:	d1f2      	bne.n	800a1c2 <sbrk_aligned+0x22>
 800a1dc:	e7ef      	b.n	800a1be <sbrk_aligned+0x1e>
 800a1de:	bf00      	nop
 800a1e0:	200022e4 	.word	0x200022e4

0800a1e4 <_malloc_r>:
 800a1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1e8:	1ccd      	adds	r5, r1, #3
 800a1ea:	f025 0503 	bic.w	r5, r5, #3
 800a1ee:	3508      	adds	r5, #8
 800a1f0:	2d0c      	cmp	r5, #12
 800a1f2:	bf38      	it	cc
 800a1f4:	250c      	movcc	r5, #12
 800a1f6:	2d00      	cmp	r5, #0
 800a1f8:	4606      	mov	r6, r0
 800a1fa:	db01      	blt.n	800a200 <_malloc_r+0x1c>
 800a1fc:	42a9      	cmp	r1, r5
 800a1fe:	d904      	bls.n	800a20a <_malloc_r+0x26>
 800a200:	230c      	movs	r3, #12
 800a202:	6033      	str	r3, [r6, #0]
 800a204:	2000      	movs	r0, #0
 800a206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a20a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a2e0 <_malloc_r+0xfc>
 800a20e:	f000 f869 	bl	800a2e4 <__malloc_lock>
 800a212:	f8d8 3000 	ldr.w	r3, [r8]
 800a216:	461c      	mov	r4, r3
 800a218:	bb44      	cbnz	r4, 800a26c <_malloc_r+0x88>
 800a21a:	4629      	mov	r1, r5
 800a21c:	4630      	mov	r0, r6
 800a21e:	f7ff ffbf 	bl	800a1a0 <sbrk_aligned>
 800a222:	1c43      	adds	r3, r0, #1
 800a224:	4604      	mov	r4, r0
 800a226:	d158      	bne.n	800a2da <_malloc_r+0xf6>
 800a228:	f8d8 4000 	ldr.w	r4, [r8]
 800a22c:	4627      	mov	r7, r4
 800a22e:	2f00      	cmp	r7, #0
 800a230:	d143      	bne.n	800a2ba <_malloc_r+0xd6>
 800a232:	2c00      	cmp	r4, #0
 800a234:	d04b      	beq.n	800a2ce <_malloc_r+0xea>
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	4639      	mov	r1, r7
 800a23a:	4630      	mov	r0, r6
 800a23c:	eb04 0903 	add.w	r9, r4, r3
 800a240:	f000 fc6a 	bl	800ab18 <_sbrk_r>
 800a244:	4581      	cmp	r9, r0
 800a246:	d142      	bne.n	800a2ce <_malloc_r+0xea>
 800a248:	6821      	ldr	r1, [r4, #0]
 800a24a:	1a6d      	subs	r5, r5, r1
 800a24c:	4629      	mov	r1, r5
 800a24e:	4630      	mov	r0, r6
 800a250:	f7ff ffa6 	bl	800a1a0 <sbrk_aligned>
 800a254:	3001      	adds	r0, #1
 800a256:	d03a      	beq.n	800a2ce <_malloc_r+0xea>
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	442b      	add	r3, r5
 800a25c:	6023      	str	r3, [r4, #0]
 800a25e:	f8d8 3000 	ldr.w	r3, [r8]
 800a262:	685a      	ldr	r2, [r3, #4]
 800a264:	bb62      	cbnz	r2, 800a2c0 <_malloc_r+0xdc>
 800a266:	f8c8 7000 	str.w	r7, [r8]
 800a26a:	e00f      	b.n	800a28c <_malloc_r+0xa8>
 800a26c:	6822      	ldr	r2, [r4, #0]
 800a26e:	1b52      	subs	r2, r2, r5
 800a270:	d420      	bmi.n	800a2b4 <_malloc_r+0xd0>
 800a272:	2a0b      	cmp	r2, #11
 800a274:	d917      	bls.n	800a2a6 <_malloc_r+0xc2>
 800a276:	1961      	adds	r1, r4, r5
 800a278:	42a3      	cmp	r3, r4
 800a27a:	6025      	str	r5, [r4, #0]
 800a27c:	bf18      	it	ne
 800a27e:	6059      	strne	r1, [r3, #4]
 800a280:	6863      	ldr	r3, [r4, #4]
 800a282:	bf08      	it	eq
 800a284:	f8c8 1000 	streq.w	r1, [r8]
 800a288:	5162      	str	r2, [r4, r5]
 800a28a:	604b      	str	r3, [r1, #4]
 800a28c:	4630      	mov	r0, r6
 800a28e:	f000 f82f 	bl	800a2f0 <__malloc_unlock>
 800a292:	f104 000b 	add.w	r0, r4, #11
 800a296:	1d23      	adds	r3, r4, #4
 800a298:	f020 0007 	bic.w	r0, r0, #7
 800a29c:	1ac2      	subs	r2, r0, r3
 800a29e:	bf1c      	itt	ne
 800a2a0:	1a1b      	subne	r3, r3, r0
 800a2a2:	50a3      	strne	r3, [r4, r2]
 800a2a4:	e7af      	b.n	800a206 <_malloc_r+0x22>
 800a2a6:	6862      	ldr	r2, [r4, #4]
 800a2a8:	42a3      	cmp	r3, r4
 800a2aa:	bf0c      	ite	eq
 800a2ac:	f8c8 2000 	streq.w	r2, [r8]
 800a2b0:	605a      	strne	r2, [r3, #4]
 800a2b2:	e7eb      	b.n	800a28c <_malloc_r+0xa8>
 800a2b4:	4623      	mov	r3, r4
 800a2b6:	6864      	ldr	r4, [r4, #4]
 800a2b8:	e7ae      	b.n	800a218 <_malloc_r+0x34>
 800a2ba:	463c      	mov	r4, r7
 800a2bc:	687f      	ldr	r7, [r7, #4]
 800a2be:	e7b6      	b.n	800a22e <_malloc_r+0x4a>
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	42a3      	cmp	r3, r4
 800a2c6:	d1fb      	bne.n	800a2c0 <_malloc_r+0xdc>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	6053      	str	r3, [r2, #4]
 800a2cc:	e7de      	b.n	800a28c <_malloc_r+0xa8>
 800a2ce:	230c      	movs	r3, #12
 800a2d0:	6033      	str	r3, [r6, #0]
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	f000 f80c 	bl	800a2f0 <__malloc_unlock>
 800a2d8:	e794      	b.n	800a204 <_malloc_r+0x20>
 800a2da:	6005      	str	r5, [r0, #0]
 800a2dc:	e7d6      	b.n	800a28c <_malloc_r+0xa8>
 800a2de:	bf00      	nop
 800a2e0:	200022e8 	.word	0x200022e8

0800a2e4 <__malloc_lock>:
 800a2e4:	4801      	ldr	r0, [pc, #4]	@ (800a2ec <__malloc_lock+0x8>)
 800a2e6:	f7ff bf00 	b.w	800a0ea <__retarget_lock_acquire_recursive>
 800a2ea:	bf00      	nop
 800a2ec:	200022e0 	.word	0x200022e0

0800a2f0 <__malloc_unlock>:
 800a2f0:	4801      	ldr	r0, [pc, #4]	@ (800a2f8 <__malloc_unlock+0x8>)
 800a2f2:	f7ff befb 	b.w	800a0ec <__retarget_lock_release_recursive>
 800a2f6:	bf00      	nop
 800a2f8:	200022e0 	.word	0x200022e0

0800a2fc <__sfputc_r>:
 800a2fc:	6893      	ldr	r3, [r2, #8]
 800a2fe:	3b01      	subs	r3, #1
 800a300:	2b00      	cmp	r3, #0
 800a302:	b410      	push	{r4}
 800a304:	6093      	str	r3, [r2, #8]
 800a306:	da08      	bge.n	800a31a <__sfputc_r+0x1e>
 800a308:	6994      	ldr	r4, [r2, #24]
 800a30a:	42a3      	cmp	r3, r4
 800a30c:	db01      	blt.n	800a312 <__sfputc_r+0x16>
 800a30e:	290a      	cmp	r1, #10
 800a310:	d103      	bne.n	800a31a <__sfputc_r+0x1e>
 800a312:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a316:	f000 bb6b 	b.w	800a9f0 <__swbuf_r>
 800a31a:	6813      	ldr	r3, [r2, #0]
 800a31c:	1c58      	adds	r0, r3, #1
 800a31e:	6010      	str	r0, [r2, #0]
 800a320:	7019      	strb	r1, [r3, #0]
 800a322:	4608      	mov	r0, r1
 800a324:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <__sfputs_r>:
 800a32a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a32c:	4606      	mov	r6, r0
 800a32e:	460f      	mov	r7, r1
 800a330:	4614      	mov	r4, r2
 800a332:	18d5      	adds	r5, r2, r3
 800a334:	42ac      	cmp	r4, r5
 800a336:	d101      	bne.n	800a33c <__sfputs_r+0x12>
 800a338:	2000      	movs	r0, #0
 800a33a:	e007      	b.n	800a34c <__sfputs_r+0x22>
 800a33c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a340:	463a      	mov	r2, r7
 800a342:	4630      	mov	r0, r6
 800a344:	f7ff ffda 	bl	800a2fc <__sfputc_r>
 800a348:	1c43      	adds	r3, r0, #1
 800a34a:	d1f3      	bne.n	800a334 <__sfputs_r+0xa>
 800a34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a350 <_vfiprintf_r>:
 800a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a354:	460d      	mov	r5, r1
 800a356:	b09d      	sub	sp, #116	@ 0x74
 800a358:	4614      	mov	r4, r2
 800a35a:	4698      	mov	r8, r3
 800a35c:	4606      	mov	r6, r0
 800a35e:	b118      	cbz	r0, 800a368 <_vfiprintf_r+0x18>
 800a360:	6a03      	ldr	r3, [r0, #32]
 800a362:	b90b      	cbnz	r3, 800a368 <_vfiprintf_r+0x18>
 800a364:	f7ff fdbc 	bl	8009ee0 <__sinit>
 800a368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a36a:	07d9      	lsls	r1, r3, #31
 800a36c:	d405      	bmi.n	800a37a <_vfiprintf_r+0x2a>
 800a36e:	89ab      	ldrh	r3, [r5, #12]
 800a370:	059a      	lsls	r2, r3, #22
 800a372:	d402      	bmi.n	800a37a <_vfiprintf_r+0x2a>
 800a374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a376:	f7ff feb8 	bl	800a0ea <__retarget_lock_acquire_recursive>
 800a37a:	89ab      	ldrh	r3, [r5, #12]
 800a37c:	071b      	lsls	r3, r3, #28
 800a37e:	d501      	bpl.n	800a384 <_vfiprintf_r+0x34>
 800a380:	692b      	ldr	r3, [r5, #16]
 800a382:	b99b      	cbnz	r3, 800a3ac <_vfiprintf_r+0x5c>
 800a384:	4629      	mov	r1, r5
 800a386:	4630      	mov	r0, r6
 800a388:	f000 fb70 	bl	800aa6c <__swsetup_r>
 800a38c:	b170      	cbz	r0, 800a3ac <_vfiprintf_r+0x5c>
 800a38e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a390:	07dc      	lsls	r4, r3, #31
 800a392:	d504      	bpl.n	800a39e <_vfiprintf_r+0x4e>
 800a394:	f04f 30ff 	mov.w	r0, #4294967295
 800a398:	b01d      	add	sp, #116	@ 0x74
 800a39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39e:	89ab      	ldrh	r3, [r5, #12]
 800a3a0:	0598      	lsls	r0, r3, #22
 800a3a2:	d4f7      	bmi.n	800a394 <_vfiprintf_r+0x44>
 800a3a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3a6:	f7ff fea1 	bl	800a0ec <__retarget_lock_release_recursive>
 800a3aa:	e7f3      	b.n	800a394 <_vfiprintf_r+0x44>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3b0:	2320      	movs	r3, #32
 800a3b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a3b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3ba:	2330      	movs	r3, #48	@ 0x30
 800a3bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a56c <_vfiprintf_r+0x21c>
 800a3c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a3c4:	f04f 0901 	mov.w	r9, #1
 800a3c8:	4623      	mov	r3, r4
 800a3ca:	469a      	mov	sl, r3
 800a3cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3d0:	b10a      	cbz	r2, 800a3d6 <_vfiprintf_r+0x86>
 800a3d2:	2a25      	cmp	r2, #37	@ 0x25
 800a3d4:	d1f9      	bne.n	800a3ca <_vfiprintf_r+0x7a>
 800a3d6:	ebba 0b04 	subs.w	fp, sl, r4
 800a3da:	d00b      	beq.n	800a3f4 <_vfiprintf_r+0xa4>
 800a3dc:	465b      	mov	r3, fp
 800a3de:	4622      	mov	r2, r4
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f7ff ffa1 	bl	800a32a <__sfputs_r>
 800a3e8:	3001      	adds	r0, #1
 800a3ea:	f000 80a7 	beq.w	800a53c <_vfiprintf_r+0x1ec>
 800a3ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3f0:	445a      	add	r2, fp
 800a3f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 809f 	beq.w	800a53c <_vfiprintf_r+0x1ec>
 800a3fe:	2300      	movs	r3, #0
 800a400:	f04f 32ff 	mov.w	r2, #4294967295
 800a404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a408:	f10a 0a01 	add.w	sl, sl, #1
 800a40c:	9304      	str	r3, [sp, #16]
 800a40e:	9307      	str	r3, [sp, #28]
 800a410:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a414:	931a      	str	r3, [sp, #104]	@ 0x68
 800a416:	4654      	mov	r4, sl
 800a418:	2205      	movs	r2, #5
 800a41a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a41e:	4853      	ldr	r0, [pc, #332]	@ (800a56c <_vfiprintf_r+0x21c>)
 800a420:	f7f5 fed6 	bl	80001d0 <memchr>
 800a424:	9a04      	ldr	r2, [sp, #16]
 800a426:	b9d8      	cbnz	r0, 800a460 <_vfiprintf_r+0x110>
 800a428:	06d1      	lsls	r1, r2, #27
 800a42a:	bf44      	itt	mi
 800a42c:	2320      	movmi	r3, #32
 800a42e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a432:	0713      	lsls	r3, r2, #28
 800a434:	bf44      	itt	mi
 800a436:	232b      	movmi	r3, #43	@ 0x2b
 800a438:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a43c:	f89a 3000 	ldrb.w	r3, [sl]
 800a440:	2b2a      	cmp	r3, #42	@ 0x2a
 800a442:	d015      	beq.n	800a470 <_vfiprintf_r+0x120>
 800a444:	9a07      	ldr	r2, [sp, #28]
 800a446:	4654      	mov	r4, sl
 800a448:	2000      	movs	r0, #0
 800a44a:	f04f 0c0a 	mov.w	ip, #10
 800a44e:	4621      	mov	r1, r4
 800a450:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a454:	3b30      	subs	r3, #48	@ 0x30
 800a456:	2b09      	cmp	r3, #9
 800a458:	d94b      	bls.n	800a4f2 <_vfiprintf_r+0x1a2>
 800a45a:	b1b0      	cbz	r0, 800a48a <_vfiprintf_r+0x13a>
 800a45c:	9207      	str	r2, [sp, #28]
 800a45e:	e014      	b.n	800a48a <_vfiprintf_r+0x13a>
 800a460:	eba0 0308 	sub.w	r3, r0, r8
 800a464:	fa09 f303 	lsl.w	r3, r9, r3
 800a468:	4313      	orrs	r3, r2
 800a46a:	9304      	str	r3, [sp, #16]
 800a46c:	46a2      	mov	sl, r4
 800a46e:	e7d2      	b.n	800a416 <_vfiprintf_r+0xc6>
 800a470:	9b03      	ldr	r3, [sp, #12]
 800a472:	1d19      	adds	r1, r3, #4
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	9103      	str	r1, [sp, #12]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	bfbb      	ittet	lt
 800a47c:	425b      	neglt	r3, r3
 800a47e:	f042 0202 	orrlt.w	r2, r2, #2
 800a482:	9307      	strge	r3, [sp, #28]
 800a484:	9307      	strlt	r3, [sp, #28]
 800a486:	bfb8      	it	lt
 800a488:	9204      	strlt	r2, [sp, #16]
 800a48a:	7823      	ldrb	r3, [r4, #0]
 800a48c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a48e:	d10a      	bne.n	800a4a6 <_vfiprintf_r+0x156>
 800a490:	7863      	ldrb	r3, [r4, #1]
 800a492:	2b2a      	cmp	r3, #42	@ 0x2a
 800a494:	d132      	bne.n	800a4fc <_vfiprintf_r+0x1ac>
 800a496:	9b03      	ldr	r3, [sp, #12]
 800a498:	1d1a      	adds	r2, r3, #4
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	9203      	str	r2, [sp, #12]
 800a49e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a4a2:	3402      	adds	r4, #2
 800a4a4:	9305      	str	r3, [sp, #20]
 800a4a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a57c <_vfiprintf_r+0x22c>
 800a4aa:	7821      	ldrb	r1, [r4, #0]
 800a4ac:	2203      	movs	r2, #3
 800a4ae:	4650      	mov	r0, sl
 800a4b0:	f7f5 fe8e 	bl	80001d0 <memchr>
 800a4b4:	b138      	cbz	r0, 800a4c6 <_vfiprintf_r+0x176>
 800a4b6:	9b04      	ldr	r3, [sp, #16]
 800a4b8:	eba0 000a 	sub.w	r0, r0, sl
 800a4bc:	2240      	movs	r2, #64	@ 0x40
 800a4be:	4082      	lsls	r2, r0
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	3401      	adds	r4, #1
 800a4c4:	9304      	str	r3, [sp, #16]
 800a4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4ca:	4829      	ldr	r0, [pc, #164]	@ (800a570 <_vfiprintf_r+0x220>)
 800a4cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a4d0:	2206      	movs	r2, #6
 800a4d2:	f7f5 fe7d 	bl	80001d0 <memchr>
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	d03f      	beq.n	800a55a <_vfiprintf_r+0x20a>
 800a4da:	4b26      	ldr	r3, [pc, #152]	@ (800a574 <_vfiprintf_r+0x224>)
 800a4dc:	bb1b      	cbnz	r3, 800a526 <_vfiprintf_r+0x1d6>
 800a4de:	9b03      	ldr	r3, [sp, #12]
 800a4e0:	3307      	adds	r3, #7
 800a4e2:	f023 0307 	bic.w	r3, r3, #7
 800a4e6:	3308      	adds	r3, #8
 800a4e8:	9303      	str	r3, [sp, #12]
 800a4ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4ec:	443b      	add	r3, r7
 800a4ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4f0:	e76a      	b.n	800a3c8 <_vfiprintf_r+0x78>
 800a4f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4f6:	460c      	mov	r4, r1
 800a4f8:	2001      	movs	r0, #1
 800a4fa:	e7a8      	b.n	800a44e <_vfiprintf_r+0xfe>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	3401      	adds	r4, #1
 800a500:	9305      	str	r3, [sp, #20]
 800a502:	4619      	mov	r1, r3
 800a504:	f04f 0c0a 	mov.w	ip, #10
 800a508:	4620      	mov	r0, r4
 800a50a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a50e:	3a30      	subs	r2, #48	@ 0x30
 800a510:	2a09      	cmp	r2, #9
 800a512:	d903      	bls.n	800a51c <_vfiprintf_r+0x1cc>
 800a514:	2b00      	cmp	r3, #0
 800a516:	d0c6      	beq.n	800a4a6 <_vfiprintf_r+0x156>
 800a518:	9105      	str	r1, [sp, #20]
 800a51a:	e7c4      	b.n	800a4a6 <_vfiprintf_r+0x156>
 800a51c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a520:	4604      	mov	r4, r0
 800a522:	2301      	movs	r3, #1
 800a524:	e7f0      	b.n	800a508 <_vfiprintf_r+0x1b8>
 800a526:	ab03      	add	r3, sp, #12
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	462a      	mov	r2, r5
 800a52c:	4b12      	ldr	r3, [pc, #72]	@ (800a578 <_vfiprintf_r+0x228>)
 800a52e:	a904      	add	r1, sp, #16
 800a530:	4630      	mov	r0, r6
 800a532:	f3af 8000 	nop.w
 800a536:	4607      	mov	r7, r0
 800a538:	1c78      	adds	r0, r7, #1
 800a53a:	d1d6      	bne.n	800a4ea <_vfiprintf_r+0x19a>
 800a53c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a53e:	07d9      	lsls	r1, r3, #31
 800a540:	d405      	bmi.n	800a54e <_vfiprintf_r+0x1fe>
 800a542:	89ab      	ldrh	r3, [r5, #12]
 800a544:	059a      	lsls	r2, r3, #22
 800a546:	d402      	bmi.n	800a54e <_vfiprintf_r+0x1fe>
 800a548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a54a:	f7ff fdcf 	bl	800a0ec <__retarget_lock_release_recursive>
 800a54e:	89ab      	ldrh	r3, [r5, #12]
 800a550:	065b      	lsls	r3, r3, #25
 800a552:	f53f af1f 	bmi.w	800a394 <_vfiprintf_r+0x44>
 800a556:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a558:	e71e      	b.n	800a398 <_vfiprintf_r+0x48>
 800a55a:	ab03      	add	r3, sp, #12
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	462a      	mov	r2, r5
 800a560:	4b05      	ldr	r3, [pc, #20]	@ (800a578 <_vfiprintf_r+0x228>)
 800a562:	a904      	add	r1, sp, #16
 800a564:	4630      	mov	r0, r6
 800a566:	f000 f879 	bl	800a65c <_printf_i>
 800a56a:	e7e4      	b.n	800a536 <_vfiprintf_r+0x1e6>
 800a56c:	0800ad20 	.word	0x0800ad20
 800a570:	0800ad2a 	.word	0x0800ad2a
 800a574:	00000000 	.word	0x00000000
 800a578:	0800a32b 	.word	0x0800a32b
 800a57c:	0800ad26 	.word	0x0800ad26

0800a580 <_printf_common>:
 800a580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a584:	4616      	mov	r6, r2
 800a586:	4698      	mov	r8, r3
 800a588:	688a      	ldr	r2, [r1, #8]
 800a58a:	690b      	ldr	r3, [r1, #16]
 800a58c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a590:	4293      	cmp	r3, r2
 800a592:	bfb8      	it	lt
 800a594:	4613      	movlt	r3, r2
 800a596:	6033      	str	r3, [r6, #0]
 800a598:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a59c:	4607      	mov	r7, r0
 800a59e:	460c      	mov	r4, r1
 800a5a0:	b10a      	cbz	r2, 800a5a6 <_printf_common+0x26>
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	6033      	str	r3, [r6, #0]
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	0699      	lsls	r1, r3, #26
 800a5aa:	bf42      	ittt	mi
 800a5ac:	6833      	ldrmi	r3, [r6, #0]
 800a5ae:	3302      	addmi	r3, #2
 800a5b0:	6033      	strmi	r3, [r6, #0]
 800a5b2:	6825      	ldr	r5, [r4, #0]
 800a5b4:	f015 0506 	ands.w	r5, r5, #6
 800a5b8:	d106      	bne.n	800a5c8 <_printf_common+0x48>
 800a5ba:	f104 0a19 	add.w	sl, r4, #25
 800a5be:	68e3      	ldr	r3, [r4, #12]
 800a5c0:	6832      	ldr	r2, [r6, #0]
 800a5c2:	1a9b      	subs	r3, r3, r2
 800a5c4:	42ab      	cmp	r3, r5
 800a5c6:	dc26      	bgt.n	800a616 <_printf_common+0x96>
 800a5c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a5cc:	6822      	ldr	r2, [r4, #0]
 800a5ce:	3b00      	subs	r3, #0
 800a5d0:	bf18      	it	ne
 800a5d2:	2301      	movne	r3, #1
 800a5d4:	0692      	lsls	r2, r2, #26
 800a5d6:	d42b      	bmi.n	800a630 <_printf_common+0xb0>
 800a5d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a5dc:	4641      	mov	r1, r8
 800a5de:	4638      	mov	r0, r7
 800a5e0:	47c8      	blx	r9
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	d01e      	beq.n	800a624 <_printf_common+0xa4>
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	6922      	ldr	r2, [r4, #16]
 800a5ea:	f003 0306 	and.w	r3, r3, #6
 800a5ee:	2b04      	cmp	r3, #4
 800a5f0:	bf02      	ittt	eq
 800a5f2:	68e5      	ldreq	r5, [r4, #12]
 800a5f4:	6833      	ldreq	r3, [r6, #0]
 800a5f6:	1aed      	subeq	r5, r5, r3
 800a5f8:	68a3      	ldr	r3, [r4, #8]
 800a5fa:	bf0c      	ite	eq
 800a5fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a600:	2500      	movne	r5, #0
 800a602:	4293      	cmp	r3, r2
 800a604:	bfc4      	itt	gt
 800a606:	1a9b      	subgt	r3, r3, r2
 800a608:	18ed      	addgt	r5, r5, r3
 800a60a:	2600      	movs	r6, #0
 800a60c:	341a      	adds	r4, #26
 800a60e:	42b5      	cmp	r5, r6
 800a610:	d11a      	bne.n	800a648 <_printf_common+0xc8>
 800a612:	2000      	movs	r0, #0
 800a614:	e008      	b.n	800a628 <_printf_common+0xa8>
 800a616:	2301      	movs	r3, #1
 800a618:	4652      	mov	r2, sl
 800a61a:	4641      	mov	r1, r8
 800a61c:	4638      	mov	r0, r7
 800a61e:	47c8      	blx	r9
 800a620:	3001      	adds	r0, #1
 800a622:	d103      	bne.n	800a62c <_printf_common+0xac>
 800a624:	f04f 30ff 	mov.w	r0, #4294967295
 800a628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a62c:	3501      	adds	r5, #1
 800a62e:	e7c6      	b.n	800a5be <_printf_common+0x3e>
 800a630:	18e1      	adds	r1, r4, r3
 800a632:	1c5a      	adds	r2, r3, #1
 800a634:	2030      	movs	r0, #48	@ 0x30
 800a636:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a63a:	4422      	add	r2, r4
 800a63c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a640:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a644:	3302      	adds	r3, #2
 800a646:	e7c7      	b.n	800a5d8 <_printf_common+0x58>
 800a648:	2301      	movs	r3, #1
 800a64a:	4622      	mov	r2, r4
 800a64c:	4641      	mov	r1, r8
 800a64e:	4638      	mov	r0, r7
 800a650:	47c8      	blx	r9
 800a652:	3001      	adds	r0, #1
 800a654:	d0e6      	beq.n	800a624 <_printf_common+0xa4>
 800a656:	3601      	adds	r6, #1
 800a658:	e7d9      	b.n	800a60e <_printf_common+0x8e>
	...

0800a65c <_printf_i>:
 800a65c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a660:	7e0f      	ldrb	r7, [r1, #24]
 800a662:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a664:	2f78      	cmp	r7, #120	@ 0x78
 800a666:	4691      	mov	r9, r2
 800a668:	4680      	mov	r8, r0
 800a66a:	460c      	mov	r4, r1
 800a66c:	469a      	mov	sl, r3
 800a66e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a672:	d807      	bhi.n	800a684 <_printf_i+0x28>
 800a674:	2f62      	cmp	r7, #98	@ 0x62
 800a676:	d80a      	bhi.n	800a68e <_printf_i+0x32>
 800a678:	2f00      	cmp	r7, #0
 800a67a:	f000 80d1 	beq.w	800a820 <_printf_i+0x1c4>
 800a67e:	2f58      	cmp	r7, #88	@ 0x58
 800a680:	f000 80b8 	beq.w	800a7f4 <_printf_i+0x198>
 800a684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a688:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a68c:	e03a      	b.n	800a704 <_printf_i+0xa8>
 800a68e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a692:	2b15      	cmp	r3, #21
 800a694:	d8f6      	bhi.n	800a684 <_printf_i+0x28>
 800a696:	a101      	add	r1, pc, #4	@ (adr r1, 800a69c <_printf_i+0x40>)
 800a698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a69c:	0800a6f5 	.word	0x0800a6f5
 800a6a0:	0800a709 	.word	0x0800a709
 800a6a4:	0800a685 	.word	0x0800a685
 800a6a8:	0800a685 	.word	0x0800a685
 800a6ac:	0800a685 	.word	0x0800a685
 800a6b0:	0800a685 	.word	0x0800a685
 800a6b4:	0800a709 	.word	0x0800a709
 800a6b8:	0800a685 	.word	0x0800a685
 800a6bc:	0800a685 	.word	0x0800a685
 800a6c0:	0800a685 	.word	0x0800a685
 800a6c4:	0800a685 	.word	0x0800a685
 800a6c8:	0800a807 	.word	0x0800a807
 800a6cc:	0800a733 	.word	0x0800a733
 800a6d0:	0800a7c1 	.word	0x0800a7c1
 800a6d4:	0800a685 	.word	0x0800a685
 800a6d8:	0800a685 	.word	0x0800a685
 800a6dc:	0800a829 	.word	0x0800a829
 800a6e0:	0800a685 	.word	0x0800a685
 800a6e4:	0800a733 	.word	0x0800a733
 800a6e8:	0800a685 	.word	0x0800a685
 800a6ec:	0800a685 	.word	0x0800a685
 800a6f0:	0800a7c9 	.word	0x0800a7c9
 800a6f4:	6833      	ldr	r3, [r6, #0]
 800a6f6:	1d1a      	adds	r2, r3, #4
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	6032      	str	r2, [r6, #0]
 800a6fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a700:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a704:	2301      	movs	r3, #1
 800a706:	e09c      	b.n	800a842 <_printf_i+0x1e6>
 800a708:	6833      	ldr	r3, [r6, #0]
 800a70a:	6820      	ldr	r0, [r4, #0]
 800a70c:	1d19      	adds	r1, r3, #4
 800a70e:	6031      	str	r1, [r6, #0]
 800a710:	0606      	lsls	r6, r0, #24
 800a712:	d501      	bpl.n	800a718 <_printf_i+0xbc>
 800a714:	681d      	ldr	r5, [r3, #0]
 800a716:	e003      	b.n	800a720 <_printf_i+0xc4>
 800a718:	0645      	lsls	r5, r0, #25
 800a71a:	d5fb      	bpl.n	800a714 <_printf_i+0xb8>
 800a71c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a720:	2d00      	cmp	r5, #0
 800a722:	da03      	bge.n	800a72c <_printf_i+0xd0>
 800a724:	232d      	movs	r3, #45	@ 0x2d
 800a726:	426d      	negs	r5, r5
 800a728:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a72c:	4858      	ldr	r0, [pc, #352]	@ (800a890 <_printf_i+0x234>)
 800a72e:	230a      	movs	r3, #10
 800a730:	e011      	b.n	800a756 <_printf_i+0xfa>
 800a732:	6821      	ldr	r1, [r4, #0]
 800a734:	6833      	ldr	r3, [r6, #0]
 800a736:	0608      	lsls	r0, r1, #24
 800a738:	f853 5b04 	ldr.w	r5, [r3], #4
 800a73c:	d402      	bmi.n	800a744 <_printf_i+0xe8>
 800a73e:	0649      	lsls	r1, r1, #25
 800a740:	bf48      	it	mi
 800a742:	b2ad      	uxthmi	r5, r5
 800a744:	2f6f      	cmp	r7, #111	@ 0x6f
 800a746:	4852      	ldr	r0, [pc, #328]	@ (800a890 <_printf_i+0x234>)
 800a748:	6033      	str	r3, [r6, #0]
 800a74a:	bf14      	ite	ne
 800a74c:	230a      	movne	r3, #10
 800a74e:	2308      	moveq	r3, #8
 800a750:	2100      	movs	r1, #0
 800a752:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a756:	6866      	ldr	r6, [r4, #4]
 800a758:	60a6      	str	r6, [r4, #8]
 800a75a:	2e00      	cmp	r6, #0
 800a75c:	db05      	blt.n	800a76a <_printf_i+0x10e>
 800a75e:	6821      	ldr	r1, [r4, #0]
 800a760:	432e      	orrs	r6, r5
 800a762:	f021 0104 	bic.w	r1, r1, #4
 800a766:	6021      	str	r1, [r4, #0]
 800a768:	d04b      	beq.n	800a802 <_printf_i+0x1a6>
 800a76a:	4616      	mov	r6, r2
 800a76c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a770:	fb03 5711 	mls	r7, r3, r1, r5
 800a774:	5dc7      	ldrb	r7, [r0, r7]
 800a776:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a77a:	462f      	mov	r7, r5
 800a77c:	42bb      	cmp	r3, r7
 800a77e:	460d      	mov	r5, r1
 800a780:	d9f4      	bls.n	800a76c <_printf_i+0x110>
 800a782:	2b08      	cmp	r3, #8
 800a784:	d10b      	bne.n	800a79e <_printf_i+0x142>
 800a786:	6823      	ldr	r3, [r4, #0]
 800a788:	07df      	lsls	r7, r3, #31
 800a78a:	d508      	bpl.n	800a79e <_printf_i+0x142>
 800a78c:	6923      	ldr	r3, [r4, #16]
 800a78e:	6861      	ldr	r1, [r4, #4]
 800a790:	4299      	cmp	r1, r3
 800a792:	bfde      	ittt	le
 800a794:	2330      	movle	r3, #48	@ 0x30
 800a796:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a79a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a79e:	1b92      	subs	r2, r2, r6
 800a7a0:	6122      	str	r2, [r4, #16]
 800a7a2:	f8cd a000 	str.w	sl, [sp]
 800a7a6:	464b      	mov	r3, r9
 800a7a8:	aa03      	add	r2, sp, #12
 800a7aa:	4621      	mov	r1, r4
 800a7ac:	4640      	mov	r0, r8
 800a7ae:	f7ff fee7 	bl	800a580 <_printf_common>
 800a7b2:	3001      	adds	r0, #1
 800a7b4:	d14a      	bne.n	800a84c <_printf_i+0x1f0>
 800a7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ba:	b004      	add	sp, #16
 800a7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c0:	6823      	ldr	r3, [r4, #0]
 800a7c2:	f043 0320 	orr.w	r3, r3, #32
 800a7c6:	6023      	str	r3, [r4, #0]
 800a7c8:	4832      	ldr	r0, [pc, #200]	@ (800a894 <_printf_i+0x238>)
 800a7ca:	2778      	movs	r7, #120	@ 0x78
 800a7cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a7d0:	6823      	ldr	r3, [r4, #0]
 800a7d2:	6831      	ldr	r1, [r6, #0]
 800a7d4:	061f      	lsls	r7, r3, #24
 800a7d6:	f851 5b04 	ldr.w	r5, [r1], #4
 800a7da:	d402      	bmi.n	800a7e2 <_printf_i+0x186>
 800a7dc:	065f      	lsls	r7, r3, #25
 800a7de:	bf48      	it	mi
 800a7e0:	b2ad      	uxthmi	r5, r5
 800a7e2:	6031      	str	r1, [r6, #0]
 800a7e4:	07d9      	lsls	r1, r3, #31
 800a7e6:	bf44      	itt	mi
 800a7e8:	f043 0320 	orrmi.w	r3, r3, #32
 800a7ec:	6023      	strmi	r3, [r4, #0]
 800a7ee:	b11d      	cbz	r5, 800a7f8 <_printf_i+0x19c>
 800a7f0:	2310      	movs	r3, #16
 800a7f2:	e7ad      	b.n	800a750 <_printf_i+0xf4>
 800a7f4:	4826      	ldr	r0, [pc, #152]	@ (800a890 <_printf_i+0x234>)
 800a7f6:	e7e9      	b.n	800a7cc <_printf_i+0x170>
 800a7f8:	6823      	ldr	r3, [r4, #0]
 800a7fa:	f023 0320 	bic.w	r3, r3, #32
 800a7fe:	6023      	str	r3, [r4, #0]
 800a800:	e7f6      	b.n	800a7f0 <_printf_i+0x194>
 800a802:	4616      	mov	r6, r2
 800a804:	e7bd      	b.n	800a782 <_printf_i+0x126>
 800a806:	6833      	ldr	r3, [r6, #0]
 800a808:	6825      	ldr	r5, [r4, #0]
 800a80a:	6961      	ldr	r1, [r4, #20]
 800a80c:	1d18      	adds	r0, r3, #4
 800a80e:	6030      	str	r0, [r6, #0]
 800a810:	062e      	lsls	r6, r5, #24
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	d501      	bpl.n	800a81a <_printf_i+0x1be>
 800a816:	6019      	str	r1, [r3, #0]
 800a818:	e002      	b.n	800a820 <_printf_i+0x1c4>
 800a81a:	0668      	lsls	r0, r5, #25
 800a81c:	d5fb      	bpl.n	800a816 <_printf_i+0x1ba>
 800a81e:	8019      	strh	r1, [r3, #0]
 800a820:	2300      	movs	r3, #0
 800a822:	6123      	str	r3, [r4, #16]
 800a824:	4616      	mov	r6, r2
 800a826:	e7bc      	b.n	800a7a2 <_printf_i+0x146>
 800a828:	6833      	ldr	r3, [r6, #0]
 800a82a:	1d1a      	adds	r2, r3, #4
 800a82c:	6032      	str	r2, [r6, #0]
 800a82e:	681e      	ldr	r6, [r3, #0]
 800a830:	6862      	ldr	r2, [r4, #4]
 800a832:	2100      	movs	r1, #0
 800a834:	4630      	mov	r0, r6
 800a836:	f7f5 fccb 	bl	80001d0 <memchr>
 800a83a:	b108      	cbz	r0, 800a840 <_printf_i+0x1e4>
 800a83c:	1b80      	subs	r0, r0, r6
 800a83e:	6060      	str	r0, [r4, #4]
 800a840:	6863      	ldr	r3, [r4, #4]
 800a842:	6123      	str	r3, [r4, #16]
 800a844:	2300      	movs	r3, #0
 800a846:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a84a:	e7aa      	b.n	800a7a2 <_printf_i+0x146>
 800a84c:	6923      	ldr	r3, [r4, #16]
 800a84e:	4632      	mov	r2, r6
 800a850:	4649      	mov	r1, r9
 800a852:	4640      	mov	r0, r8
 800a854:	47d0      	blx	sl
 800a856:	3001      	adds	r0, #1
 800a858:	d0ad      	beq.n	800a7b6 <_printf_i+0x15a>
 800a85a:	6823      	ldr	r3, [r4, #0]
 800a85c:	079b      	lsls	r3, r3, #30
 800a85e:	d413      	bmi.n	800a888 <_printf_i+0x22c>
 800a860:	68e0      	ldr	r0, [r4, #12]
 800a862:	9b03      	ldr	r3, [sp, #12]
 800a864:	4298      	cmp	r0, r3
 800a866:	bfb8      	it	lt
 800a868:	4618      	movlt	r0, r3
 800a86a:	e7a6      	b.n	800a7ba <_printf_i+0x15e>
 800a86c:	2301      	movs	r3, #1
 800a86e:	4632      	mov	r2, r6
 800a870:	4649      	mov	r1, r9
 800a872:	4640      	mov	r0, r8
 800a874:	47d0      	blx	sl
 800a876:	3001      	adds	r0, #1
 800a878:	d09d      	beq.n	800a7b6 <_printf_i+0x15a>
 800a87a:	3501      	adds	r5, #1
 800a87c:	68e3      	ldr	r3, [r4, #12]
 800a87e:	9903      	ldr	r1, [sp, #12]
 800a880:	1a5b      	subs	r3, r3, r1
 800a882:	42ab      	cmp	r3, r5
 800a884:	dcf2      	bgt.n	800a86c <_printf_i+0x210>
 800a886:	e7eb      	b.n	800a860 <_printf_i+0x204>
 800a888:	2500      	movs	r5, #0
 800a88a:	f104 0619 	add.w	r6, r4, #25
 800a88e:	e7f5      	b.n	800a87c <_printf_i+0x220>
 800a890:	0800ad31 	.word	0x0800ad31
 800a894:	0800ad42 	.word	0x0800ad42

0800a898 <__sflush_r>:
 800a898:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a0:	0716      	lsls	r6, r2, #28
 800a8a2:	4605      	mov	r5, r0
 800a8a4:	460c      	mov	r4, r1
 800a8a6:	d454      	bmi.n	800a952 <__sflush_r+0xba>
 800a8a8:	684b      	ldr	r3, [r1, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	dc02      	bgt.n	800a8b4 <__sflush_r+0x1c>
 800a8ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	dd48      	ble.n	800a946 <__sflush_r+0xae>
 800a8b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8b6:	2e00      	cmp	r6, #0
 800a8b8:	d045      	beq.n	800a946 <__sflush_r+0xae>
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8c0:	682f      	ldr	r7, [r5, #0]
 800a8c2:	6a21      	ldr	r1, [r4, #32]
 800a8c4:	602b      	str	r3, [r5, #0]
 800a8c6:	d030      	beq.n	800a92a <__sflush_r+0x92>
 800a8c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8ca:	89a3      	ldrh	r3, [r4, #12]
 800a8cc:	0759      	lsls	r1, r3, #29
 800a8ce:	d505      	bpl.n	800a8dc <__sflush_r+0x44>
 800a8d0:	6863      	ldr	r3, [r4, #4]
 800a8d2:	1ad2      	subs	r2, r2, r3
 800a8d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8d6:	b10b      	cbz	r3, 800a8dc <__sflush_r+0x44>
 800a8d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8da:	1ad2      	subs	r2, r2, r3
 800a8dc:	2300      	movs	r3, #0
 800a8de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8e0:	6a21      	ldr	r1, [r4, #32]
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	47b0      	blx	r6
 800a8e6:	1c43      	adds	r3, r0, #1
 800a8e8:	89a3      	ldrh	r3, [r4, #12]
 800a8ea:	d106      	bne.n	800a8fa <__sflush_r+0x62>
 800a8ec:	6829      	ldr	r1, [r5, #0]
 800a8ee:	291d      	cmp	r1, #29
 800a8f0:	d82b      	bhi.n	800a94a <__sflush_r+0xb2>
 800a8f2:	4a2a      	ldr	r2, [pc, #168]	@ (800a99c <__sflush_r+0x104>)
 800a8f4:	40ca      	lsrs	r2, r1
 800a8f6:	07d6      	lsls	r6, r2, #31
 800a8f8:	d527      	bpl.n	800a94a <__sflush_r+0xb2>
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	6062      	str	r2, [r4, #4]
 800a8fe:	04d9      	lsls	r1, r3, #19
 800a900:	6922      	ldr	r2, [r4, #16]
 800a902:	6022      	str	r2, [r4, #0]
 800a904:	d504      	bpl.n	800a910 <__sflush_r+0x78>
 800a906:	1c42      	adds	r2, r0, #1
 800a908:	d101      	bne.n	800a90e <__sflush_r+0x76>
 800a90a:	682b      	ldr	r3, [r5, #0]
 800a90c:	b903      	cbnz	r3, 800a910 <__sflush_r+0x78>
 800a90e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a910:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a912:	602f      	str	r7, [r5, #0]
 800a914:	b1b9      	cbz	r1, 800a946 <__sflush_r+0xae>
 800a916:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a91a:	4299      	cmp	r1, r3
 800a91c:	d002      	beq.n	800a924 <__sflush_r+0x8c>
 800a91e:	4628      	mov	r0, r5
 800a920:	f7ff fbf4 	bl	800a10c <_free_r>
 800a924:	2300      	movs	r3, #0
 800a926:	6363      	str	r3, [r4, #52]	@ 0x34
 800a928:	e00d      	b.n	800a946 <__sflush_r+0xae>
 800a92a:	2301      	movs	r3, #1
 800a92c:	4628      	mov	r0, r5
 800a92e:	47b0      	blx	r6
 800a930:	4602      	mov	r2, r0
 800a932:	1c50      	adds	r0, r2, #1
 800a934:	d1c9      	bne.n	800a8ca <__sflush_r+0x32>
 800a936:	682b      	ldr	r3, [r5, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d0c6      	beq.n	800a8ca <__sflush_r+0x32>
 800a93c:	2b1d      	cmp	r3, #29
 800a93e:	d001      	beq.n	800a944 <__sflush_r+0xac>
 800a940:	2b16      	cmp	r3, #22
 800a942:	d11e      	bne.n	800a982 <__sflush_r+0xea>
 800a944:	602f      	str	r7, [r5, #0]
 800a946:	2000      	movs	r0, #0
 800a948:	e022      	b.n	800a990 <__sflush_r+0xf8>
 800a94a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a94e:	b21b      	sxth	r3, r3
 800a950:	e01b      	b.n	800a98a <__sflush_r+0xf2>
 800a952:	690f      	ldr	r7, [r1, #16]
 800a954:	2f00      	cmp	r7, #0
 800a956:	d0f6      	beq.n	800a946 <__sflush_r+0xae>
 800a958:	0793      	lsls	r3, r2, #30
 800a95a:	680e      	ldr	r6, [r1, #0]
 800a95c:	bf08      	it	eq
 800a95e:	694b      	ldreq	r3, [r1, #20]
 800a960:	600f      	str	r7, [r1, #0]
 800a962:	bf18      	it	ne
 800a964:	2300      	movne	r3, #0
 800a966:	eba6 0807 	sub.w	r8, r6, r7
 800a96a:	608b      	str	r3, [r1, #8]
 800a96c:	f1b8 0f00 	cmp.w	r8, #0
 800a970:	dde9      	ble.n	800a946 <__sflush_r+0xae>
 800a972:	6a21      	ldr	r1, [r4, #32]
 800a974:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a976:	4643      	mov	r3, r8
 800a978:	463a      	mov	r2, r7
 800a97a:	4628      	mov	r0, r5
 800a97c:	47b0      	blx	r6
 800a97e:	2800      	cmp	r0, #0
 800a980:	dc08      	bgt.n	800a994 <__sflush_r+0xfc>
 800a982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a98a:	81a3      	strh	r3, [r4, #12]
 800a98c:	f04f 30ff 	mov.w	r0, #4294967295
 800a990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a994:	4407      	add	r7, r0
 800a996:	eba8 0800 	sub.w	r8, r8, r0
 800a99a:	e7e7      	b.n	800a96c <__sflush_r+0xd4>
 800a99c:	20400001 	.word	0x20400001

0800a9a0 <_fflush_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	690b      	ldr	r3, [r1, #16]
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	b913      	cbnz	r3, 800a9b0 <_fflush_r+0x10>
 800a9aa:	2500      	movs	r5, #0
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	bd38      	pop	{r3, r4, r5, pc}
 800a9b0:	b118      	cbz	r0, 800a9ba <_fflush_r+0x1a>
 800a9b2:	6a03      	ldr	r3, [r0, #32]
 800a9b4:	b90b      	cbnz	r3, 800a9ba <_fflush_r+0x1a>
 800a9b6:	f7ff fa93 	bl	8009ee0 <__sinit>
 800a9ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d0f3      	beq.n	800a9aa <_fflush_r+0xa>
 800a9c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9c4:	07d0      	lsls	r0, r2, #31
 800a9c6:	d404      	bmi.n	800a9d2 <_fflush_r+0x32>
 800a9c8:	0599      	lsls	r1, r3, #22
 800a9ca:	d402      	bmi.n	800a9d2 <_fflush_r+0x32>
 800a9cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9ce:	f7ff fb8c 	bl	800a0ea <__retarget_lock_acquire_recursive>
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	4621      	mov	r1, r4
 800a9d6:	f7ff ff5f 	bl	800a898 <__sflush_r>
 800a9da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9dc:	07da      	lsls	r2, r3, #31
 800a9de:	4605      	mov	r5, r0
 800a9e0:	d4e4      	bmi.n	800a9ac <_fflush_r+0xc>
 800a9e2:	89a3      	ldrh	r3, [r4, #12]
 800a9e4:	059b      	lsls	r3, r3, #22
 800a9e6:	d4e1      	bmi.n	800a9ac <_fflush_r+0xc>
 800a9e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9ea:	f7ff fb7f 	bl	800a0ec <__retarget_lock_release_recursive>
 800a9ee:	e7dd      	b.n	800a9ac <_fflush_r+0xc>

0800a9f0 <__swbuf_r>:
 800a9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f2:	460e      	mov	r6, r1
 800a9f4:	4614      	mov	r4, r2
 800a9f6:	4605      	mov	r5, r0
 800a9f8:	b118      	cbz	r0, 800aa02 <__swbuf_r+0x12>
 800a9fa:	6a03      	ldr	r3, [r0, #32]
 800a9fc:	b90b      	cbnz	r3, 800aa02 <__swbuf_r+0x12>
 800a9fe:	f7ff fa6f 	bl	8009ee0 <__sinit>
 800aa02:	69a3      	ldr	r3, [r4, #24]
 800aa04:	60a3      	str	r3, [r4, #8]
 800aa06:	89a3      	ldrh	r3, [r4, #12]
 800aa08:	071a      	lsls	r2, r3, #28
 800aa0a:	d501      	bpl.n	800aa10 <__swbuf_r+0x20>
 800aa0c:	6923      	ldr	r3, [r4, #16]
 800aa0e:	b943      	cbnz	r3, 800aa22 <__swbuf_r+0x32>
 800aa10:	4621      	mov	r1, r4
 800aa12:	4628      	mov	r0, r5
 800aa14:	f000 f82a 	bl	800aa6c <__swsetup_r>
 800aa18:	b118      	cbz	r0, 800aa22 <__swbuf_r+0x32>
 800aa1a:	f04f 37ff 	mov.w	r7, #4294967295
 800aa1e:	4638      	mov	r0, r7
 800aa20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa22:	6823      	ldr	r3, [r4, #0]
 800aa24:	6922      	ldr	r2, [r4, #16]
 800aa26:	1a98      	subs	r0, r3, r2
 800aa28:	6963      	ldr	r3, [r4, #20]
 800aa2a:	b2f6      	uxtb	r6, r6
 800aa2c:	4283      	cmp	r3, r0
 800aa2e:	4637      	mov	r7, r6
 800aa30:	dc05      	bgt.n	800aa3e <__swbuf_r+0x4e>
 800aa32:	4621      	mov	r1, r4
 800aa34:	4628      	mov	r0, r5
 800aa36:	f7ff ffb3 	bl	800a9a0 <_fflush_r>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	d1ed      	bne.n	800aa1a <__swbuf_r+0x2a>
 800aa3e:	68a3      	ldr	r3, [r4, #8]
 800aa40:	3b01      	subs	r3, #1
 800aa42:	60a3      	str	r3, [r4, #8]
 800aa44:	6823      	ldr	r3, [r4, #0]
 800aa46:	1c5a      	adds	r2, r3, #1
 800aa48:	6022      	str	r2, [r4, #0]
 800aa4a:	701e      	strb	r6, [r3, #0]
 800aa4c:	6962      	ldr	r2, [r4, #20]
 800aa4e:	1c43      	adds	r3, r0, #1
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d004      	beq.n	800aa5e <__swbuf_r+0x6e>
 800aa54:	89a3      	ldrh	r3, [r4, #12]
 800aa56:	07db      	lsls	r3, r3, #31
 800aa58:	d5e1      	bpl.n	800aa1e <__swbuf_r+0x2e>
 800aa5a:	2e0a      	cmp	r6, #10
 800aa5c:	d1df      	bne.n	800aa1e <__swbuf_r+0x2e>
 800aa5e:	4621      	mov	r1, r4
 800aa60:	4628      	mov	r0, r5
 800aa62:	f7ff ff9d 	bl	800a9a0 <_fflush_r>
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d0d9      	beq.n	800aa1e <__swbuf_r+0x2e>
 800aa6a:	e7d6      	b.n	800aa1a <__swbuf_r+0x2a>

0800aa6c <__swsetup_r>:
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	4b29      	ldr	r3, [pc, #164]	@ (800ab14 <__swsetup_r+0xa8>)
 800aa70:	4605      	mov	r5, r0
 800aa72:	6818      	ldr	r0, [r3, #0]
 800aa74:	460c      	mov	r4, r1
 800aa76:	b118      	cbz	r0, 800aa80 <__swsetup_r+0x14>
 800aa78:	6a03      	ldr	r3, [r0, #32]
 800aa7a:	b90b      	cbnz	r3, 800aa80 <__swsetup_r+0x14>
 800aa7c:	f7ff fa30 	bl	8009ee0 <__sinit>
 800aa80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa84:	0719      	lsls	r1, r3, #28
 800aa86:	d422      	bmi.n	800aace <__swsetup_r+0x62>
 800aa88:	06da      	lsls	r2, r3, #27
 800aa8a:	d407      	bmi.n	800aa9c <__swsetup_r+0x30>
 800aa8c:	2209      	movs	r2, #9
 800aa8e:	602a      	str	r2, [r5, #0]
 800aa90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa94:	81a3      	strh	r3, [r4, #12]
 800aa96:	f04f 30ff 	mov.w	r0, #4294967295
 800aa9a:	e033      	b.n	800ab04 <__swsetup_r+0x98>
 800aa9c:	0758      	lsls	r0, r3, #29
 800aa9e:	d512      	bpl.n	800aac6 <__swsetup_r+0x5a>
 800aaa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aaa2:	b141      	cbz	r1, 800aab6 <__swsetup_r+0x4a>
 800aaa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aaa8:	4299      	cmp	r1, r3
 800aaaa:	d002      	beq.n	800aab2 <__swsetup_r+0x46>
 800aaac:	4628      	mov	r0, r5
 800aaae:	f7ff fb2d 	bl	800a10c <_free_r>
 800aab2:	2300      	movs	r3, #0
 800aab4:	6363      	str	r3, [r4, #52]	@ 0x34
 800aab6:	89a3      	ldrh	r3, [r4, #12]
 800aab8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aabc:	81a3      	strh	r3, [r4, #12]
 800aabe:	2300      	movs	r3, #0
 800aac0:	6063      	str	r3, [r4, #4]
 800aac2:	6923      	ldr	r3, [r4, #16]
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	89a3      	ldrh	r3, [r4, #12]
 800aac8:	f043 0308 	orr.w	r3, r3, #8
 800aacc:	81a3      	strh	r3, [r4, #12]
 800aace:	6923      	ldr	r3, [r4, #16]
 800aad0:	b94b      	cbnz	r3, 800aae6 <__swsetup_r+0x7a>
 800aad2:	89a3      	ldrh	r3, [r4, #12]
 800aad4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aadc:	d003      	beq.n	800aae6 <__swsetup_r+0x7a>
 800aade:	4621      	mov	r1, r4
 800aae0:	4628      	mov	r0, r5
 800aae2:	f000 f84f 	bl	800ab84 <__smakebuf_r>
 800aae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaea:	f013 0201 	ands.w	r2, r3, #1
 800aaee:	d00a      	beq.n	800ab06 <__swsetup_r+0x9a>
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	60a2      	str	r2, [r4, #8]
 800aaf4:	6962      	ldr	r2, [r4, #20]
 800aaf6:	4252      	negs	r2, r2
 800aaf8:	61a2      	str	r2, [r4, #24]
 800aafa:	6922      	ldr	r2, [r4, #16]
 800aafc:	b942      	cbnz	r2, 800ab10 <__swsetup_r+0xa4>
 800aafe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab02:	d1c5      	bne.n	800aa90 <__swsetup_r+0x24>
 800ab04:	bd38      	pop	{r3, r4, r5, pc}
 800ab06:	0799      	lsls	r1, r3, #30
 800ab08:	bf58      	it	pl
 800ab0a:	6962      	ldrpl	r2, [r4, #20]
 800ab0c:	60a2      	str	r2, [r4, #8]
 800ab0e:	e7f4      	b.n	800aafa <__swsetup_r+0x8e>
 800ab10:	2000      	movs	r0, #0
 800ab12:	e7f7      	b.n	800ab04 <__swsetup_r+0x98>
 800ab14:	2000001c 	.word	0x2000001c

0800ab18 <_sbrk_r>:
 800ab18:	b538      	push	{r3, r4, r5, lr}
 800ab1a:	4d06      	ldr	r5, [pc, #24]	@ (800ab34 <_sbrk_r+0x1c>)
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	4604      	mov	r4, r0
 800ab20:	4608      	mov	r0, r1
 800ab22:	602b      	str	r3, [r5, #0]
 800ab24:	f7f6 fdfa 	bl	800171c <_sbrk>
 800ab28:	1c43      	adds	r3, r0, #1
 800ab2a:	d102      	bne.n	800ab32 <_sbrk_r+0x1a>
 800ab2c:	682b      	ldr	r3, [r5, #0]
 800ab2e:	b103      	cbz	r3, 800ab32 <_sbrk_r+0x1a>
 800ab30:	6023      	str	r3, [r4, #0]
 800ab32:	bd38      	pop	{r3, r4, r5, pc}
 800ab34:	200022dc 	.word	0x200022dc

0800ab38 <__swhatbuf_r>:
 800ab38:	b570      	push	{r4, r5, r6, lr}
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab40:	2900      	cmp	r1, #0
 800ab42:	b096      	sub	sp, #88	@ 0x58
 800ab44:	4615      	mov	r5, r2
 800ab46:	461e      	mov	r6, r3
 800ab48:	da0d      	bge.n	800ab66 <__swhatbuf_r+0x2e>
 800ab4a:	89a3      	ldrh	r3, [r4, #12]
 800ab4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ab50:	f04f 0100 	mov.w	r1, #0
 800ab54:	bf14      	ite	ne
 800ab56:	2340      	movne	r3, #64	@ 0x40
 800ab58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ab5c:	2000      	movs	r0, #0
 800ab5e:	6031      	str	r1, [r6, #0]
 800ab60:	602b      	str	r3, [r5, #0]
 800ab62:	b016      	add	sp, #88	@ 0x58
 800ab64:	bd70      	pop	{r4, r5, r6, pc}
 800ab66:	466a      	mov	r2, sp
 800ab68:	f000 f848 	bl	800abfc <_fstat_r>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	dbec      	blt.n	800ab4a <__swhatbuf_r+0x12>
 800ab70:	9901      	ldr	r1, [sp, #4]
 800ab72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ab76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ab7a:	4259      	negs	r1, r3
 800ab7c:	4159      	adcs	r1, r3
 800ab7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab82:	e7eb      	b.n	800ab5c <__swhatbuf_r+0x24>

0800ab84 <__smakebuf_r>:
 800ab84:	898b      	ldrh	r3, [r1, #12]
 800ab86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab88:	079d      	lsls	r5, r3, #30
 800ab8a:	4606      	mov	r6, r0
 800ab8c:	460c      	mov	r4, r1
 800ab8e:	d507      	bpl.n	800aba0 <__smakebuf_r+0x1c>
 800ab90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ab94:	6023      	str	r3, [r4, #0]
 800ab96:	6123      	str	r3, [r4, #16]
 800ab98:	2301      	movs	r3, #1
 800ab9a:	6163      	str	r3, [r4, #20]
 800ab9c:	b003      	add	sp, #12
 800ab9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aba0:	ab01      	add	r3, sp, #4
 800aba2:	466a      	mov	r2, sp
 800aba4:	f7ff ffc8 	bl	800ab38 <__swhatbuf_r>
 800aba8:	9f00      	ldr	r7, [sp, #0]
 800abaa:	4605      	mov	r5, r0
 800abac:	4639      	mov	r1, r7
 800abae:	4630      	mov	r0, r6
 800abb0:	f7ff fb18 	bl	800a1e4 <_malloc_r>
 800abb4:	b948      	cbnz	r0, 800abca <__smakebuf_r+0x46>
 800abb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abba:	059a      	lsls	r2, r3, #22
 800abbc:	d4ee      	bmi.n	800ab9c <__smakebuf_r+0x18>
 800abbe:	f023 0303 	bic.w	r3, r3, #3
 800abc2:	f043 0302 	orr.w	r3, r3, #2
 800abc6:	81a3      	strh	r3, [r4, #12]
 800abc8:	e7e2      	b.n	800ab90 <__smakebuf_r+0xc>
 800abca:	89a3      	ldrh	r3, [r4, #12]
 800abcc:	6020      	str	r0, [r4, #0]
 800abce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abd2:	81a3      	strh	r3, [r4, #12]
 800abd4:	9b01      	ldr	r3, [sp, #4]
 800abd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800abda:	b15b      	cbz	r3, 800abf4 <__smakebuf_r+0x70>
 800abdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abe0:	4630      	mov	r0, r6
 800abe2:	f000 f81d 	bl	800ac20 <_isatty_r>
 800abe6:	b128      	cbz	r0, 800abf4 <__smakebuf_r+0x70>
 800abe8:	89a3      	ldrh	r3, [r4, #12]
 800abea:	f023 0303 	bic.w	r3, r3, #3
 800abee:	f043 0301 	orr.w	r3, r3, #1
 800abf2:	81a3      	strh	r3, [r4, #12]
 800abf4:	89a3      	ldrh	r3, [r4, #12]
 800abf6:	431d      	orrs	r5, r3
 800abf8:	81a5      	strh	r5, [r4, #12]
 800abfa:	e7cf      	b.n	800ab9c <__smakebuf_r+0x18>

0800abfc <_fstat_r>:
 800abfc:	b538      	push	{r3, r4, r5, lr}
 800abfe:	4d07      	ldr	r5, [pc, #28]	@ (800ac1c <_fstat_r+0x20>)
 800ac00:	2300      	movs	r3, #0
 800ac02:	4604      	mov	r4, r0
 800ac04:	4608      	mov	r0, r1
 800ac06:	4611      	mov	r1, r2
 800ac08:	602b      	str	r3, [r5, #0]
 800ac0a:	f7f6 fd5f 	bl	80016cc <_fstat>
 800ac0e:	1c43      	adds	r3, r0, #1
 800ac10:	d102      	bne.n	800ac18 <_fstat_r+0x1c>
 800ac12:	682b      	ldr	r3, [r5, #0]
 800ac14:	b103      	cbz	r3, 800ac18 <_fstat_r+0x1c>
 800ac16:	6023      	str	r3, [r4, #0]
 800ac18:	bd38      	pop	{r3, r4, r5, pc}
 800ac1a:	bf00      	nop
 800ac1c:	200022dc 	.word	0x200022dc

0800ac20 <_isatty_r>:
 800ac20:	b538      	push	{r3, r4, r5, lr}
 800ac22:	4d06      	ldr	r5, [pc, #24]	@ (800ac3c <_isatty_r+0x1c>)
 800ac24:	2300      	movs	r3, #0
 800ac26:	4604      	mov	r4, r0
 800ac28:	4608      	mov	r0, r1
 800ac2a:	602b      	str	r3, [r5, #0]
 800ac2c:	f7f6 fd5e 	bl	80016ec <_isatty>
 800ac30:	1c43      	adds	r3, r0, #1
 800ac32:	d102      	bne.n	800ac3a <_isatty_r+0x1a>
 800ac34:	682b      	ldr	r3, [r5, #0]
 800ac36:	b103      	cbz	r3, 800ac3a <_isatty_r+0x1a>
 800ac38:	6023      	str	r3, [r4, #0]
 800ac3a:	bd38      	pop	{r3, r4, r5, pc}
 800ac3c:	200022dc 	.word	0x200022dc

0800ac40 <_init>:
 800ac40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac42:	bf00      	nop
 800ac44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac46:	bc08      	pop	{r3}
 800ac48:	469e      	mov	lr, r3
 800ac4a:	4770      	bx	lr

0800ac4c <_fini>:
 800ac4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac4e:	bf00      	nop
 800ac50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac52:	bc08      	pop	{r3}
 800ac54:	469e      	mov	lr, r3
 800ac56:	4770      	bx	lr
