
hw1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d24  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08008eb4  08008eb4  00009eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fa4  08008fa4  0000a010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008fa4  08008fa4  00009fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fac  08008fac  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fac  08008fac  00009fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008fb0  08008fb0  00009fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08008fb4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002090  20000010  08008fc4  0000a010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020a0  08008fc4  0000a0a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000213d9  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004319  00000000  00000000  0002b419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d88  00000000  00000000  0002f738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016e6  00000000  00000000  000314c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004401  00000000  00000000  00032ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020271  00000000  00000000  00036fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd764  00000000  00000000  00057218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015497c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007eb8  00000000  00000000  001549c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0015c878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e9c 	.word	0x08008e9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008e9c 	.word	0x08008e9c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 fffa 	bl	80014fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f861 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 fa29 	bl	8000960 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800050e:	f000 f8bf 	bl	8000690 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000512:	f000 f8f5 	bl	8000700 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000516:	f000 f931 	bl	800077c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800051a:	f000 f955 	bl	80007c8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800051e:	f000 f991 	bl	8000844 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000522:	f000 f9bf 	bl	80008a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000526:	f000 f9ed 	bl	8000904 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800052a:	f004 fbc1 	bl	8004cb0 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  ledMutex = osMutexNew(NULL);  // 創建 Mutex，保護 LED2
 800052e:	2000      	movs	r0, #0
 8000530:	f004 fe72 	bl	8005218 <osMutexNew>
 8000534:	4603      	mov	r3, r0
 8000536:	4a19      	ldr	r2, [pc, #100]	@ (800059c <main+0xa0>)
 8000538:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  buttonQueue = osMessageQueueNew(1, sizeof(uint8_t), NULL);
 800053a:	2200      	movs	r2, #0
 800053c:	2101      	movs	r1, #1
 800053e:	2001      	movs	r0, #1
 8000540:	f004 ff78 	bl	8005434 <osMessageQueueNew>
 8000544:	4603      	mov	r3, r0
 8000546:	4a16      	ldr	r2, [pc, #88]	@ (80005a0 <main+0xa4>)
 8000548:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  osTimerId_t timerHandle;
  timerHandle = osTimerNew(TimerCallback, osTimerPeriodic, NULL, NULL);
 800054a:	2300      	movs	r3, #0
 800054c:	2200      	movs	r2, #0
 800054e:	2101      	movs	r1, #1
 8000550:	4814      	ldr	r0, [pc, #80]	@ (80005a4 <main+0xa8>)
 8000552:	f004 fdb7 	bl	80050c4 <osTimerNew>
 8000556:	6078      	str	r0, [r7, #4]
  osTimerStart(timerHandle, 10000);
 8000558:	f242 7110 	movw	r1, #10000	@ 0x2710
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f004 fe2d 	bl	80051bc <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000562:	4a11      	ldr	r2, [pc, #68]	@ (80005a8 <main+0xac>)
 8000564:	2100      	movs	r1, #0
 8000566:	4811      	ldr	r0, [pc, #68]	@ (80005ac <main+0xb0>)
 8000568:	f004 fbec 	bl	8004d44 <osThreadNew>
 800056c:	4603      	mov	r3, r0
 800056e:	4a10      	ldr	r2, [pc, #64]	@ (80005b0 <main+0xb4>)
 8000570:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000572:	4a10      	ldr	r2, [pc, #64]	@ (80005b4 <main+0xb8>)
 8000574:	2100      	movs	r1, #0
 8000576:	4810      	ldr	r0, [pc, #64]	@ (80005b8 <main+0xbc>)
 8000578:	f004 fbe4 	bl	8004d44 <osThreadNew>
 800057c:	4603      	mov	r3, r0
 800057e:	4a0f      	ldr	r2, [pc, #60]	@ (80005bc <main+0xc0>)
 8000580:	6013      	str	r3, [r2, #0]

  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 8000582:	4a0f      	ldr	r2, [pc, #60]	@ (80005c0 <main+0xc4>)
 8000584:	2100      	movs	r1, #0
 8000586:	480f      	ldr	r0, [pc, #60]	@ (80005c4 <main+0xc8>)
 8000588:	f004 fbdc 	bl	8004d44 <osThreadNew>
 800058c:	4603      	mov	r3, r0
 800058e:	4a0e      	ldr	r2, [pc, #56]	@ (80005c8 <main+0xcc>)
 8000590:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000592:	f004 fbb1 	bl	8004cf8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000596:	bf00      	nop
 8000598:	e7fd      	b.n	8000596 <main+0x9a>
 800059a:	bf00      	nop
 800059c:	20000764 	.word	0x20000764
 80005a0:	20000760 	.word	0x20000760
 80005a4:	08000cc5 	.word	0x08000cc5
 80005a8:	08008ef0 	.word	0x08008ef0
 80005ac:	08000d59 	.word	0x08000d59
 80005b0:	20000754 	.word	0x20000754
 80005b4:	08008f14 	.word	0x08008f14
 80005b8:	08000d89 	.word	0x08000d89
 80005bc:	20000758 	.word	0x20000758
 80005c0:	08008f38 	.word	0x08008f38
 80005c4:	08000de1 	.word	0x08000de1
 80005c8:	2000075c 	.word	0x2000075c

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b096      	sub	sp, #88	@ 0x58
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2244      	movs	r2, #68	@ 0x44
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f008 fc24 	bl	8008e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005f2:	f001 fec9 	bl	8002388 <HAL_PWREx_ControlVoltageScaling>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005fc:	f000 fc38 	bl	8000e70 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000600:	f001 fea4 	bl	800234c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000604:	4b21      	ldr	r3, [pc, #132]	@ (800068c <SystemClock_Config+0xc0>)
 8000606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800060a:	4a20      	ldr	r2, [pc, #128]	@ (800068c <SystemClock_Config+0xc0>)
 800060c:	f023 0318 	bic.w	r3, r3, #24
 8000610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000614:	2314      	movs	r3, #20
 8000616:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000624:	2360      	movs	r3, #96	@ 0x60
 8000626:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800062c:	2301      	movs	r3, #1
 800062e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000634:	2328      	movs	r3, #40	@ 0x28
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000638:	2307      	movs	r3, #7
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4618      	mov	r0, r3
 800064a:	f001 ffbf 	bl	80025cc <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000654:	f000 fc0c 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2303      	movs	r3, #3
 800065e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	2104      	movs	r1, #4
 8000670:	4618      	mov	r0, r3
 8000672:	f002 fb87 	bl	8002d84 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800067c:	f000 fbf8 	bl	8000e70 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000680:	f003 f88e 	bl	80037a0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000684:	bf00      	nop
 8000686:	3758      	adds	r7, #88	@ 0x58
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40021000 	.word	0x40021000

08000690 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 8000696:	4a19      	ldr	r2, [pc, #100]	@ (80006fc <MX_DFSDM1_Init+0x6c>)
 8000698:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800069a:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 800069c:	2201      	movs	r2, #1
 800069e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006a0:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006a6:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006a8:	2202      	movs	r2, #2
 80006aa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006be:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006c0:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006c8:	2204      	movs	r2, #4
 80006ca:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006d8:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006da:	2200      	movs	r2, #0
 80006dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80006de:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <MX_DFSDM1_Init+0x68>)
 80006e6:	f001 f8b3 	bl	8001850 <HAL_DFSDM_ChannelInit>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80006f0:	f000 fbbe 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000002c 	.word	0x2000002c
 80006fc:	40016020 	.word	0x40016020

08000700 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000706:	4a1c      	ldr	r2, [pc, #112]	@ (8000778 <MX_I2C2_Init+0x78>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <MX_I2C2_Init+0x74>)
 800070c:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000710:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000712:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <MX_I2C2_Init+0x74>)
 800071a:	2201      	movs	r2, #1
 800071c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071e:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000724:	4b13      	ldr	r3, [pc, #76]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800072a:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <MX_I2C2_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000730:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000736:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800073c:	480d      	ldr	r0, [pc, #52]	@ (8000774 <MX_I2C2_Init+0x74>)
 800073e:	f001 fb9f 	bl	8001e80 <HAL_I2C_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000748:	f000 fb92 	bl	8000e70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800074c:	2100      	movs	r1, #0
 800074e:	4809      	ldr	r0, [pc, #36]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000750:	f001 fc31 	bl	8001fb6 <HAL_I2CEx_ConfigAnalogFilter>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800075a:	f000 fb89 	bl	8000e70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800075e:	2100      	movs	r1, #0
 8000760:	4804      	ldr	r0, [pc, #16]	@ (8000774 <MX_I2C2_Init+0x74>)
 8000762:	f001 fc73 	bl	800204c <HAL_I2CEx_ConfigDigitalFilter>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800076c:	f000 fb80 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000064 	.word	0x20000064
 8000778:	40005800 	.word	0x40005800

0800077c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_QUADSPI_Init+0x44>)
 8000782:	4a10      	ldr	r2, [pc, #64]	@ (80007c4 <MX_QUADSPI_Init+0x48>)
 8000784:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_QUADSPI_Init+0x44>)
 8000788:	2202      	movs	r2, #2
 800078a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_QUADSPI_Init+0x44>)
 800078e:	2204      	movs	r2, #4
 8000790:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <MX_QUADSPI_Init+0x44>)
 8000794:	2210      	movs	r2, #16
 8000796:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_QUADSPI_Init+0x44>)
 800079a:	2217      	movs	r2, #23
 800079c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <MX_QUADSPI_Init+0x44>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_QUADSPI_Init+0x44>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_QUADSPI_Init+0x44>)
 80007ac:	f001 fe52 	bl	8002454 <HAL_QSPI_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007b6:	f000 fb5b 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000b8 	.word	0x200000b8
 80007c4:	a0001000 	.word	0xa0001000

080007c8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <MX_SPI3_Init+0x74>)
 80007ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000840 <MX_SPI3_Init+0x78>)
 80007d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <MX_SPI3_Init+0x74>)
 80007d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007da:	4b18      	ldr	r3, [pc, #96]	@ (800083c <MX_SPI3_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007e0:	4b16      	ldr	r3, [pc, #88]	@ (800083c <MX_SPI3_Init+0x74>)
 80007e2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80007e6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_SPI3_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ee:	4b13      	ldr	r3, [pc, #76]	@ (800083c <MX_SPI3_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_SPI3_Init+0x74>)
 80007f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007fa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_SPI3_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_SPI3_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_SPI3_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_SPI3_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_SPI3_Init+0x74>)
 8000816:	2207      	movs	r2, #7
 8000818:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <MX_SPI3_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_SPI3_Init+0x74>)
 8000822:	2208      	movs	r2, #8
 8000824:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_SPI3_Init+0x74>)
 8000828:	f003 f99c 	bl	8003b64 <HAL_SPI_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000832:	f000 fb1d 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200000fc 	.word	0x200000fc
 8000840:	40003c00 	.word	0x40003c00

08000844 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_USART1_UART_Init+0x58>)
 800084a:	4a15      	ldr	r2, [pc, #84]	@ (80008a0 <MX_USART1_UART_Init+0x5c>)
 800084c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <MX_USART1_UART_Init+0x58>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_USART1_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_USART1_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_USART1_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_USART1_UART_Init+0x58>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_USART1_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_USART1_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <MX_USART1_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_USART1_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_USART1_UART_Init+0x58>)
 8000888:	f003 fa0f 	bl	8003caa <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000892:	f000 faed 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000160 	.word	0x20000160
 80008a0:	40013800 	.word	0x40013800

080008a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a8:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008aa:	4a15      	ldr	r2, [pc, #84]	@ (8000900 <MX_USART3_UART_Init+0x5c>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ae:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008e8:	f003 f9df 	bl	8003caa <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008f2:	f000 fabd 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200001e8 	.word	0x200001e8
 8000900:	40004800 	.word	0x40004800

08000904 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000908:	4b14      	ldr	r3, [pc, #80]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800090e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	2206      	movs	r2, #6
 8000914:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000918:	2202      	movs	r2, #2
 800091a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800091c:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091e:	2202      	movs	r2, #2
 8000920:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000922:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000928:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000934:	4b09      	ldr	r3, [pc, #36]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800093a:	4b08      	ldr	r3, [pc, #32]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	@ (800095c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000948:	f001 fbcc 	bl	80020e4 <HAL_PCD_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000952:	f000 fa8d 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000270 	.word	0x20000270

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	@ 0x28
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000976:	4bbd      	ldr	r3, [pc, #756]	@ (8000c6c <MX_GPIO_Init+0x30c>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097a:	4abc      	ldr	r2, [pc, #752]	@ (8000c6c <MX_GPIO_Init+0x30c>)
 800097c:	f043 0310 	orr.w	r3, r3, #16
 8000980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000982:	4bba      	ldr	r3, [pc, #744]	@ (8000c6c <MX_GPIO_Init+0x30c>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000986:	f003 0310 	and.w	r3, r3, #16
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4bb7      	ldr	r3, [pc, #732]	@ (8000c6c <MX_GPIO_Init+0x30c>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000992:	4ab6      	ldr	r2, [pc, #728]	@ (8000c6c <MX_GPIO_Init+0x30c>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800099a:	4bb4      	ldr	r3, [pc, #720]	@ (8000c6c <MX_GPIO_Init+0x30c>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4bb1      	ldr	r3, [pc, #708]	@ (8000c6c <MX_GPIO_Init+0x30c>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4ab0      	ldr	r2, [pc, #704]	@ (8000c6c <MX_GPIO_Init+0x30c>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b2:	4bae      	ldr	r3, [pc, #696]	@ (8000c6c <MX_GPIO_Init+0x30c>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	4bab      	ldr	r3, [pc, #684]	@ (8000c6c <MX_GPIO_Init+0x30c>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	4aaa      	ldr	r2, [pc, #680]	@ (8000c6c <MX_GPIO_Init+0x30c>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ca:	4ba8      	ldr	r3, [pc, #672]	@ (8000c6c <MX_GPIO_Init+0x30c>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d6:	4ba5      	ldr	r3, [pc, #660]	@ (8000c6c <MX_GPIO_Init+0x30c>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	4aa4      	ldr	r2, [pc, #656]	@ (8000c6c <MX_GPIO_Init+0x30c>)
 80009dc:	f043 0308 	orr.w	r3, r3, #8
 80009e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e2:	4ba2      	ldr	r3, [pc, #648]	@ (8000c6c <MX_GPIO_Init+0x30c>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	f003 0308 	and.w	r3, r3, #8
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80009f4:	489e      	ldr	r0, [pc, #632]	@ (8000c70 <MX_GPIO_Init+0x310>)
 80009f6:	f001 f9f9 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a04:	f001 f9f2 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000a0e:	4899      	ldr	r0, [pc, #612]	@ (8000c74 <MX_GPIO_Init+0x314>)
 8000a10:	f001 f9ec 	bl	8001dec <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000a1a:	4897      	ldr	r0, [pc, #604]	@ (8000c78 <MX_GPIO_Init+0x318>)
 8000a1c:	f001 f9e6 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a26:	4894      	ldr	r0, [pc, #592]	@ (8000c78 <MX_GPIO_Init+0x318>)
 8000a28:	f001 f9e0 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000a32:	4892      	ldr	r0, [pc, #584]	@ (8000c7c <MX_GPIO_Init+0x31c>)
 8000a34:	f001 f9da 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2120      	movs	r1, #32
 8000a3c:	488d      	ldr	r0, [pc, #564]	@ (8000c74 <MX_GPIO_Init+0x314>)
 8000a3e:	f001 f9d5 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2101      	movs	r1, #1
 8000a46:	488a      	ldr	r0, [pc, #552]	@ (8000c70 <MX_GPIO_Init+0x310>)
 8000a48:	f001 f9d0 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a4c:	f240 1315 	movw	r3, #277	@ 0x115
 8000a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4882      	ldr	r0, [pc, #520]	@ (8000c70 <MX_GPIO_Init+0x310>)
 8000a66:	f000 ffff 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a6a:	236a      	movs	r3, #106	@ 0x6a
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	487c      	ldr	r0, [pc, #496]	@ (8000c70 <MX_GPIO_Init+0x310>)
 8000a80:	f000 fff2 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000a84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a8a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4878      	ldr	r0, [pc, #480]	@ (8000c7c <MX_GPIO_Init+0x31c>)
 8000a9c:	f000 ffe4 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000aa0:	233f      	movs	r3, #63	@ 0x3f
 8000aa2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000aa4:	230b      	movs	r3, #11
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4872      	ldr	r0, [pc, #456]	@ (8000c7c <MX_GPIO_Init+0x31c>)
 8000ab4:	f000 ffd8 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad6:	f000 ffc7 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000ada:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af6:	f000 ffb7 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000afa:	2308      	movs	r3, #8
 8000afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b18:	f000 ffa6 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b1c:	2310      	movs	r3, #16
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b20:	230b      	movs	r3, #11
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b32:	f000 ff99 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000b36:	23e0      	movs	r3, #224	@ 0xe0
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b46:	2305      	movs	r3, #5
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b54:	f000 ff88 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4841      	ldr	r0, [pc, #260]	@ (8000c74 <MX_GPIO_Init+0x314>)
 8000b6e:	f000 ff7b 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b72:	2302      	movs	r3, #2
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b76:	230b      	movs	r3, #11
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	483b      	ldr	r0, [pc, #236]	@ (8000c74 <MX_GPIO_Init+0x314>)
 8000b86:	f000 ff6f 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b8a:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000b8e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4834      	ldr	r0, [pc, #208]	@ (8000c74 <MX_GPIO_Init+0x314>)
 8000ba4:	f000 ff60 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000ba8:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000bac:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	482e      	ldr	r0, [pc, #184]	@ (8000c78 <MX_GPIO_Init+0x318>)
 8000bc0:	f000 ff52 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000bc4:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4826      	ldr	r0, [pc, #152]	@ (8000c78 <MX_GPIO_Init+0x318>)
 8000bde:	f000 ff43 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000be2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4820      	ldr	r0, [pc, #128]	@ (8000c7c <MX_GPIO_Init+0x31c>)
 8000bfc:	f000 ff34 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c00:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c06:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4819      	ldr	r0, [pc, #100]	@ (8000c7c <MX_GPIO_Init+0x31c>)
 8000c18:	f000 ff26 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c2c:	2305      	movs	r3, #5
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	4810      	ldr	r0, [pc, #64]	@ (8000c78 <MX_GPIO_Init+0x318>)
 8000c38:	f000 ff16 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c3c:	2378      	movs	r3, #120	@ 0x78
 8000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4c:	2307      	movs	r3, #7
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	4808      	ldr	r0, [pc, #32]	@ (8000c78 <MX_GPIO_Init+0x318>)
 8000c58:	f000 ff06 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c5c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c62:	2312      	movs	r3, #18
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e00a      	b.n	8000c80 <MX_GPIO_Init+0x320>
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	48001000 	.word	0x48001000
 8000c74:	48000400 	.word	0x48000400
 8000c78:	48000c00 	.word	0x48000c00
 8000c7c:	48000800 	.word	0x48000800
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c86:	2304      	movs	r3, #4
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480b      	ldr	r0, [pc, #44]	@ (8000cc0 <MX_GPIO_Init+0x360>)
 8000c92:	f000 fee9 	bl	8001a68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2105      	movs	r1, #5
 8000c9a:	2017      	movs	r0, #23
 8000c9c:	f000 fda1 	bl	80017e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ca0:	2017      	movs	r0, #23
 8000ca2:	f000 fdba 	bl	800181a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2105      	movs	r1, #5
 8000caa:	2028      	movs	r0, #40	@ 0x28
 8000cac:	f000 fd99 	bl	80017e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cb0:	2028      	movs	r0, #40	@ 0x28
 8000cb2:	f000 fdb2 	bl	800181a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	@ 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	48000400 	.word	0x48000400

08000cc4 <TimerCallback>:

/* USER CODE BEGIN 4 */
void TimerCallback(void *argument)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
    osThreadFlagsSet(myTask02Handle, 0x01);  // 設置旗標，通知 Task_2 執行
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <TimerCallback+0x1c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f004 f8f6 	bl	8004ec4 <osThreadFlagsSet>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000758 	.word	0x20000758

08000ce4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	80fb      	strh	r3, [r7, #6]
    static uint32_t pressTime = 0;
    uint32_t releaseTime;
    uint8_t buttonEvent = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	72fb      	strb	r3, [r7, #11]

    if (GPIO_Pin == BUTTON_EXTI13_Pin)
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cf8:	d124      	bne.n	8000d44 <HAL_GPIO_EXTI_Callback+0x60>
    {
        if (HAL_GPIO_ReadPin(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin) == GPIO_PIN_RESET)  // 按鈕被按下 (下降沿)
 8000cfa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cfe:	4813      	ldr	r0, [pc, #76]	@ (8000d4c <HAL_GPIO_EXTI_Callback+0x68>)
 8000d00:	f001 f85c 	bl	8001dbc <HAL_GPIO_ReadPin>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d105      	bne.n	8000d16 <HAL_GPIO_EXTI_Callback+0x32>
        {
            pressTime = HAL_GetTick();  // 記錄按下時間 (ms)
 8000d0a:	f000 fc5f 	bl	80015cc <HAL_GetTick>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a0f      	ldr	r2, [pc, #60]	@ (8000d50 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000d12:	6013      	str	r3, [r2, #0]
                buttonEvent = 1;  // 短按
            }
            osMessageQueuePut(buttonQueue, &buttonEvent, 0, 0);  // 傳遞按鍵事件
        }
    }
}
 8000d14:	e016      	b.n	8000d44 <HAL_GPIO_EXTI_Callback+0x60>
            releaseTime = HAL_GetTick();
 8000d16:	f000 fc59 	bl	80015cc <HAL_GetTick>
 8000d1a:	60f8      	str	r0, [r7, #12]
            if ((releaseTime - pressTime) >= 1000)  // 長按 1 秒以上
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d28:	d302      	bcc.n	8000d30 <HAL_GPIO_EXTI_Callback+0x4c>
                buttonEvent = 2;  // 長按
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	72fb      	strb	r3, [r7, #11]
 8000d2e:	e001      	b.n	8000d34 <HAL_GPIO_EXTI_Callback+0x50>
                buttonEvent = 1;  // 短按
 8000d30:	2301      	movs	r3, #1
 8000d32:	72fb      	strb	r3, [r7, #11]
            osMessageQueuePut(buttonQueue, &buttonEvent, 0, 0);  // 傳遞按鍵事件
 8000d34:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <HAL_GPIO_EXTI_Callback+0x70>)
 8000d36:	6818      	ldr	r0, [r3, #0]
 8000d38:	f107 010b 	add.w	r1, r7, #11
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f004 fbec 	bl	800551c <osMessageQueuePut>
}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	48000800 	.word	0x48000800
 8000d50:	20000768 	.word	0x20000768
 8000d54:	20000760 	.word	0x20000760

08000d58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	HAL_GPIO_WritePin(GPIOC, LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);  // 開機時關閉 LED4
 8000d60:	2200      	movs	r2, #0
 8000d62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d66:	4806      	ldr	r0, [pc, #24]	@ (8000d80 <StartDefaultTask+0x28>)
 8000d68:	f001 f840 	bl	8001dec <HAL_GPIO_WritePin>
	osThreadTerminate(defaultTaskHandle);  // 關閉這個 Task，避免影響其他 Task
 8000d6c:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <StartDefaultTask+0x2c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f004 f879 	bl	8004e68 <osThreadTerminate>
  /* USER CODE END 5 */
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	48000800 	.word	0x48000800
 8000d84:	20000754 	.word	0x20000754

08000d88 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	for (;;)
	{
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);  // wait for timer trigger
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d94:	2100      	movs	r1, #0
 8000d96:	2001      	movs	r0, #1
 8000d98:	f004 f8e2 	bl	8004f60 <osThreadFlagsWait>

		osMutexAcquire(ledMutex, osWaitForever);  // 確保不與 Task_1 衝突
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <StartTask02+0x50>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000da4:	4618      	mov	r0, r3
 8000da6:	f004 fabd 	bl	8005324 <osMutexAcquire>

		for (int i = 0; i < 40; i++)  // 10Hz 閃爍 2 秒
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	e00a      	b.n	8000dc6 <StartTask02+0x3e>
		{
			HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000db0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000db4:	4809      	ldr	r0, [pc, #36]	@ (8000ddc <StartTask02+0x54>)
 8000db6:	f001 f831 	bl	8001e1c <HAL_GPIO_TogglePin>
			osDelay(50);
 8000dba:	2032      	movs	r0, #50	@ 0x32
 8000dbc:	f004 f951 	bl	8005062 <osDelay>
		for (int i = 0; i < 40; i++)  // 10Hz 閃爍 2 秒
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2b27      	cmp	r3, #39	@ 0x27
 8000dca:	ddf1      	ble.n	8000db0 <StartTask02+0x28>
		}

		osMutexRelease(ledMutex);  // 釋放 Mutex
 8000dcc:	4b02      	ldr	r3, [pc, #8]	@ (8000dd8 <StartTask02+0x50>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f004 faf2 	bl	80053ba <osMutexRelease>
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);  // wait for timer trigger
 8000dd6:	e7db      	b.n	8000d90 <StartTask02+0x8>
 8000dd8:	20000764 	.word	0x20000764
 8000ddc:	48000400 	.word	0x48000400

08000de0 <StartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
	uint8_t buttonEvent;
  /* Infinite loop */
	for (;;)
	{
		osMessageQueueGet(buttonQueue, &buttonEvent, NULL, osWaitForever);  // 等待按鈕訊號
 8000de8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e64 <StartTask01+0x84>)
 8000dea:	6818      	ldr	r0, [r3, #0]
 8000dec:	f107 010f 	add.w	r1, r7, #15
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000df4:	2200      	movs	r2, #0
 8000df6:	f004 fbf1 	bl	80055dc <osMessageQueueGet>
		osMutexAcquire(ledMutex, osWaitForever);  // 確保 LED2 不會被其他 Task 影響
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8000e68 <StartTask01+0x88>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e02:	4618      	mov	r0, r3
 8000e04:	f004 fa8e 	bl	8005324 <osMutexAcquire>

		if (buttonEvent == 1)  // 短按：1Hz 閃爍 5 秒
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d112      	bne.n	8000e34 <StartTask01+0x54>
		{
			for (int i = 0; i < 10; i++)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	e00b      	b.n	8000e2c <StartTask01+0x4c>
			{
				HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000e14:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e18:	4814      	ldr	r0, [pc, #80]	@ (8000e6c <StartTask01+0x8c>)
 8000e1a:	f000 ffff 	bl	8001e1c <HAL_GPIO_TogglePin>
				osDelay(500);
 8000e1e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e22:	f004 f91e 	bl	8005062 <osDelay>
			for (int i = 0; i < 10; i++)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	2b09      	cmp	r3, #9
 8000e30:	ddf0      	ble.n	8000e14 <StartTask01+0x34>
 8000e32:	e010      	b.n	8000e56 <StartTask01+0x76>
			}
		}
		else   // 長按：10Hz 閃爍 5 秒
		{
			for (int i = 0; i < 100; i++)
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	e00a      	b.n	8000e50 <StartTask01+0x70>
			{
				HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000e3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e3e:	480b      	ldr	r0, [pc, #44]	@ (8000e6c <StartTask01+0x8c>)
 8000e40:	f000 ffec 	bl	8001e1c <HAL_GPIO_TogglePin>
				osDelay(50);
 8000e44:	2032      	movs	r0, #50	@ 0x32
 8000e46:	f004 f90c 	bl	8005062 <osDelay>
			for (int i = 0; i < 100; i++)
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	2b63      	cmp	r3, #99	@ 0x63
 8000e54:	ddf1      	ble.n	8000e3a <StartTask01+0x5a>
			}
		}

		osMutexRelease(ledMutex);  // 釋放 Mutex
 8000e56:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <StartTask01+0x88>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f004 faad 	bl	80053ba <osMutexRelease>
		osMessageQueueGet(buttonQueue, &buttonEvent, NULL, osWaitForever);  // 等待按鈕訊號
 8000e60:	e7c2      	b.n	8000de8 <StartTask01+0x8>
 8000e62:	bf00      	nop
 8000e64:	20000760 	.word	0x20000760
 8000e68:	20000764 	.word	0x20000764
 8000e6c:	48000400 	.word	0x48000400

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <Error_Handler+0x8>

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <HAL_MspInit+0x4c>)
 8000e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e86:	4a10      	ldr	r2, [pc, #64]	@ (8000ec8 <HAL_MspInit+0x4c>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <HAL_MspInit+0x4c>)
 8000e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <HAL_MspInit+0x4c>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <HAL_MspInit+0x4c>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ea6:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <HAL_MspInit+0x4c>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	210f      	movs	r1, #15
 8000eb6:	f06f 0001 	mvn.w	r0, #1
 8000eba:	f000 fc92 	bl	80017e2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40021000 	.word	0x40021000

08000ecc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0ac      	sub	sp, #176	@ 0xb0
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2288      	movs	r2, #136	@ 0x88
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f007 ff9b 	bl	8008e28 <memset>
  if(DFSDM1_Init == 0)
 8000ef2:	4b25      	ldr	r3, [pc, #148]	@ (8000f88 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d142      	bne.n	8000f80 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000efa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000efe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f002 f95e 	bl	80031cc <HAL_RCCEx_PeriphCLKConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000f16:	f7ff ffab 	bl	8000e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f8c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8000f8c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f24:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f26:	4b19      	ldr	r3, [pc, #100]	@ (8000f8c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f32:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f36:	4a15      	ldr	r2, [pc, #84]	@ (8000f8c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f38:	f043 0310 	orr.w	r3, r3, #16
 8000f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f3e:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f42:	f003 0310 	and.w	r3, r3, #16
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000f4a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000f4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f64:	2306      	movs	r3, #6
 8000f66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f6a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4807      	ldr	r0, [pc, #28]	@ (8000f90 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000f72:	f000 fd79 	bl	8001a68 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000f76:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	4a02      	ldr	r2, [pc, #8]	@ (8000f88 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f7e:	6013      	str	r3, [r2, #0]
  }

}
 8000f80:	bf00      	nop
 8000f82:	37b0      	adds	r7, #176	@ 0xb0
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	2000076c 	.word	0x2000076c
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	48001000 	.word	0x48001000

08000f94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0ac      	sub	sp, #176	@ 0xb0
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2288      	movs	r2, #136	@ 0x88
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f007 ff37 	bl	8008e28 <memset>
  if(hi2c->Instance==I2C2)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a21      	ldr	r2, [pc, #132]	@ (8001044 <HAL_I2C_MspInit+0xb0>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d13b      	bne.n	800103c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000fc4:	2380      	movs	r3, #128	@ 0x80
 8000fc6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 f8fb 	bl	80031cc <HAL_RCCEx_PeriphCLKConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fdc:	f7ff ff48 	bl	8000e70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe0:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <HAL_I2C_MspInit+0xb4>)
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe4:	4a18      	ldr	r2, [pc, #96]	@ (8001048 <HAL_I2C_MspInit+0xb4>)
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fec:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <HAL_I2C_MspInit+0xb4>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000ff8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ffc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001000:	2312      	movs	r3, #18
 8001002:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001006:	2301      	movs	r3, #1
 8001008:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001012:	2304      	movs	r3, #4
 8001014:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001018:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800101c:	4619      	mov	r1, r3
 800101e:	480b      	ldr	r0, [pc, #44]	@ (800104c <HAL_I2C_MspInit+0xb8>)
 8001020:	f000 fd22 	bl	8001a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <HAL_I2C_MspInit+0xb4>)
 8001026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001028:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <HAL_I2C_MspInit+0xb4>)
 800102a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800102e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001030:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <HAL_I2C_MspInit+0xb4>)
 8001032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001034:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800103c:	bf00      	nop
 800103e:	37b0      	adds	r7, #176	@ 0xb0
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40005800 	.word	0x40005800
 8001048:	40021000 	.word	0x40021000
 800104c:	48000400 	.word	0x48000400

08001050 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	@ 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a17      	ldr	r2, [pc, #92]	@ (80010cc <HAL_QSPI_MspInit+0x7c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d128      	bne.n	80010c4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001072:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <HAL_QSPI_MspInit+0x80>)
 8001074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001076:	4a16      	ldr	r2, [pc, #88]	@ (80010d0 <HAL_QSPI_MspInit+0x80>)
 8001078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800107c:	6513      	str	r3, [r2, #80]	@ 0x50
 800107e:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <HAL_QSPI_MspInit+0x80>)
 8001080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800108a:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <HAL_QSPI_MspInit+0x80>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	4a10      	ldr	r2, [pc, #64]	@ (80010d0 <HAL_QSPI_MspInit+0x80>)
 8001090:	f043 0310 	orr.w	r3, r3, #16
 8001094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001096:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <HAL_QSPI_MspInit+0x80>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109a:	f003 0310 	and.w	r3, r3, #16
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80010a2:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80010a6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010b4:	230a      	movs	r3, #10
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	4805      	ldr	r0, [pc, #20]	@ (80010d4 <HAL_QSPI_MspInit+0x84>)
 80010c0:	f000 fcd2 	bl	8001a68 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	@ 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	a0001000 	.word	0xa0001000
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48001000 	.word	0x48001000

080010d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	@ 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a17      	ldr	r2, [pc, #92]	@ (8001154 <HAL_SPI_MspInit+0x7c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d128      	bne.n	800114c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010fa:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <HAL_SPI_MspInit+0x80>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fe:	4a16      	ldr	r2, [pc, #88]	@ (8001158 <HAL_SPI_MspInit+0x80>)
 8001100:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001104:	6593      	str	r3, [r2, #88]	@ 0x58
 8001106:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <HAL_SPI_MspInit+0x80>)
 8001108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001112:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <HAL_SPI_MspInit+0x80>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a10      	ldr	r2, [pc, #64]	@ (8001158 <HAL_SPI_MspInit+0x80>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <HAL_SPI_MspInit+0x80>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800112a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800113c:	2306      	movs	r3, #6
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4805      	ldr	r0, [pc, #20]	@ (800115c <HAL_SPI_MspInit+0x84>)
 8001148:	f000 fc8e 	bl	8001a68 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800114c:	bf00      	nop
 800114e:	3728      	adds	r7, #40	@ 0x28
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40003c00 	.word	0x40003c00
 8001158:	40021000 	.word	0x40021000
 800115c:	48000800 	.word	0x48000800

08001160 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0ae      	sub	sp, #184	@ 0xb8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	2288      	movs	r2, #136	@ 0x88
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f007 fe51 	bl	8008e28 <memset>
  if(huart->Instance==USART1)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a42      	ldr	r2, [pc, #264]	@ (8001294 <HAL_UART_MspInit+0x134>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d13b      	bne.n	8001208 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001190:	2301      	movs	r3, #1
 8001192:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001194:	2300      	movs	r3, #0
 8001196:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	4618      	mov	r0, r3
 800119e:	f002 f815 	bl	80031cc <HAL_RCCEx_PeriphCLKConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011a8:	f7ff fe62 	bl	8000e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001298 <HAL_UART_MspInit+0x138>)
 80011ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b0:	4a39      	ldr	r2, [pc, #228]	@ (8001298 <HAL_UART_MspInit+0x138>)
 80011b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80011b8:	4b37      	ldr	r3, [pc, #220]	@ (8001298 <HAL_UART_MspInit+0x138>)
 80011ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011c0:	61bb      	str	r3, [r7, #24]
 80011c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c4:	4b34      	ldr	r3, [pc, #208]	@ (8001298 <HAL_UART_MspInit+0x138>)
 80011c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c8:	4a33      	ldr	r2, [pc, #204]	@ (8001298 <HAL_UART_MspInit+0x138>)
 80011ca:	f043 0302 	orr.w	r3, r3, #2
 80011ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d0:	4b31      	ldr	r3, [pc, #196]	@ (8001298 <HAL_UART_MspInit+0x138>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80011dc:	23c0      	movs	r3, #192	@ 0xc0
 80011de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011f4:	2307      	movs	r3, #7
 80011f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011fe:	4619      	mov	r1, r3
 8001200:	4826      	ldr	r0, [pc, #152]	@ (800129c <HAL_UART_MspInit+0x13c>)
 8001202:	f000 fc31 	bl	8001a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001206:	e040      	b.n	800128a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a24      	ldr	r2, [pc, #144]	@ (80012a0 <HAL_UART_MspInit+0x140>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d13b      	bne.n	800128a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001212:	2304      	movs	r3, #4
 8001214:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001216:	2300      	movs	r3, #0
 8001218:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4618      	mov	r0, r3
 8001220:	f001 ffd4 	bl	80031cc <HAL_RCCEx_PeriphCLKConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800122a:	f7ff fe21 	bl	8000e70 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800122e:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <HAL_UART_MspInit+0x138>)
 8001230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001232:	4a19      	ldr	r2, [pc, #100]	@ (8001298 <HAL_UART_MspInit+0x138>)
 8001234:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001238:	6593      	str	r3, [r2, #88]	@ 0x58
 800123a:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <HAL_UART_MspInit+0x138>)
 800123c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001246:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <HAL_UART_MspInit+0x138>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124a:	4a13      	ldr	r2, [pc, #76]	@ (8001298 <HAL_UART_MspInit+0x138>)
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001252:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <HAL_UART_MspInit+0x138>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800125e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001262:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001278:	2307      	movs	r3, #7
 800127a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001282:	4619      	mov	r1, r3
 8001284:	4807      	ldr	r0, [pc, #28]	@ (80012a4 <HAL_UART_MspInit+0x144>)
 8001286:	f000 fbef 	bl	8001a68 <HAL_GPIO_Init>
}
 800128a:	bf00      	nop
 800128c:	37b8      	adds	r7, #184	@ 0xb8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40013800 	.word	0x40013800
 8001298:	40021000 	.word	0x40021000
 800129c:	48000400 	.word	0x48000400
 80012a0:	40004800 	.word	0x40004800
 80012a4:	48000c00 	.word	0x48000c00

080012a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b0ac      	sub	sp, #176	@ 0xb0
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2288      	movs	r2, #136	@ 0x88
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f007 fdad 	bl	8008e28 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012d6:	d17c      	bne.n	80013d2 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012dc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80012de:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80012e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80012ea:	2301      	movs	r3, #1
 80012ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80012ee:	2318      	movs	r3, #24
 80012f0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80012f2:	2307      	movs	r3, #7
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80012f6:	2302      	movs	r3, #2
 80012f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80012fe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001302:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4618      	mov	r0, r3
 800130a:	f001 ff5f 	bl	80031cc <HAL_RCCEx_PeriphCLKConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001314:	f7ff fdac 	bl	8000e70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	4b30      	ldr	r3, [pc, #192]	@ (80013dc <HAL_PCD_MspInit+0x134>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131c:	4a2f      	ldr	r2, [pc, #188]	@ (80013dc <HAL_PCD_MspInit+0x134>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001324:	4b2d      	ldr	r3, [pc, #180]	@ (80013dc <HAL_PCD_MspInit+0x134>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001330:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001334:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001348:	4619      	mov	r1, r3
 800134a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800134e:	f000 fb8b 	bl	8001a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001352:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001356:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800136c:	230a      	movs	r3, #10
 800136e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001376:	4619      	mov	r1, r3
 8001378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800137c:	f000 fb74 	bl	8001a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001380:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <HAL_PCD_MspInit+0x134>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001384:	4a15      	ldr	r2, [pc, #84]	@ (80013dc <HAL_PCD_MspInit+0x134>)
 8001386:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800138a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138c:	4b13      	ldr	r3, [pc, #76]	@ (80013dc <HAL_PCD_MspInit+0x134>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001390:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001398:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <HAL_PCD_MspInit+0x134>)
 800139a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d114      	bne.n	80013ce <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013a4:	4b0d      	ldr	r3, [pc, #52]	@ (80013dc <HAL_PCD_MspInit+0x134>)
 80013a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a8:	4a0c      	ldr	r2, [pc, #48]	@ (80013dc <HAL_PCD_MspInit+0x134>)
 80013aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80013b0:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <HAL_PCD_MspInit+0x134>)
 80013b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80013bc:	f001 f83a 	bl	8002434 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_PCD_MspInit+0x134>)
 80013c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c4:	4a05      	ldr	r2, [pc, #20]	@ (80013dc <HAL_PCD_MspInit+0x134>)
 80013c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013ca:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80013cc:	e001      	b.n	80013d2 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80013ce:	f001 f831 	bl	8002434 <HAL_PWREx_EnableVddUSB>
}
 80013d2:	bf00      	nop
 80013d4:	37b0      	adds	r7, #176	@ 0xb0
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <NMI_Handler+0x4>

080013e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <MemManage_Handler+0x4>

080013f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <UsageFault_Handler+0x4>

08001408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800141a:	f000 f8c3 	bl	80015a4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800141e:	f006 f8d1 	bl	80075c4 <xTaskGetSchedulerState>
 8001422:	4603      	mov	r3, r0
 8001424:	2b01      	cmp	r3, #1
 8001426:	d001      	beq.n	800142c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001428:	f007 fa7e 	bl	8008928 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}

08001430 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001434:	2020      	movs	r0, #32
 8001436:	f000 fd0b 	bl	8001e50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800143a:	2040      	movs	r0, #64	@ 0x40
 800143c:	f000 fd08 	bl	8001e50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001440:	2080      	movs	r0, #128	@ 0x80
 8001442:	f000 fd05 	bl	8001e50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001446:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800144a:	f000 fd01 	bl	8001e50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}

08001452 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001456:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800145a:	f000 fcf9 	bl	8001e50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800145e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001462:	f000 fcf5 	bl	8001e50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001466:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800146a:	f000 fcf1 	bl	8001e50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800146e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001472:	f000 fced 	bl	8001e50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001476:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800147a:	f000 fce9 	bl	8001e50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001488:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <SystemInit+0x20>)
 800148a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800148e:	4a05      	ldr	r2, [pc, #20]	@ (80014a4 <SystemInit+0x20>)
 8001490:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001494:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014ac:	f7ff ffea 	bl	8001484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b0:	480c      	ldr	r0, [pc, #48]	@ (80014e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80014b2:	490d      	ldr	r1, [pc, #52]	@ (80014e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014b4:	4a0d      	ldr	r2, [pc, #52]	@ (80014ec <LoopForever+0xe>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014c8:	4c0a      	ldr	r4, [pc, #40]	@ (80014f4 <LoopForever+0x16>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014d6:	f007 fcaf 	bl	8008e38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014da:	f7ff f80f 	bl	80004fc <main>

080014de <LoopForever>:

LoopForever:
    b LoopForever
 80014de:	e7fe      	b.n	80014de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014ec:	08008fb4 	.word	0x08008fb4
  ldr r2, =_sbss
 80014f0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014f4:	200020a0 	.word	0x200020a0

080014f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC1_2_IRQHandler>

080014fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001504:	2003      	movs	r0, #3
 8001506:	f000 f961 	bl	80017cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800150a:	200f      	movs	r0, #15
 800150c:	f000 f80e 	bl	800152c <HAL_InitTick>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	71fb      	strb	r3, [r7, #7]
 800151a:	e001      	b.n	8001520 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800151c:	f7ff fcae 	bl	8000e7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001520:	79fb      	ldrb	r3, [r7, #7]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001538:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <HAL_InitTick+0x6c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d023      	beq.n	8001588 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001540:	4b16      	ldr	r3, [pc, #88]	@ (800159c <HAL_InitTick+0x70>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <HAL_InitTick+0x6c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800154e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f96d 	bl	8001836 <HAL_SYSTICK_Config>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10f      	bne.n	8001582 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b0f      	cmp	r3, #15
 8001566:	d809      	bhi.n	800157c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001568:	2200      	movs	r2, #0
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001570:	f000 f937 	bl	80017e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001574:	4a0a      	ldr	r2, [pc, #40]	@ (80015a0 <HAL_InitTick+0x74>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e007      	b.n	800158c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	e004      	b.n	800158c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	73fb      	strb	r3, [r7, #15]
 8001586:	e001      	b.n	800158c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000008 	.word	0x20000008
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000004 	.word	0x20000004

080015a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <HAL_IncTick+0x20>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <HAL_IncTick+0x24>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	4a04      	ldr	r2, [pc, #16]	@ (80015c8 <HAL_IncTick+0x24>)
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000008 	.word	0x20000008
 80015c8:	20000770 	.word	0x20000770

080015cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return uwTick;
 80015d0:	4b03      	ldr	r3, [pc, #12]	@ (80015e0 <HAL_GetTick+0x14>)
 80015d2:	681b      	ldr	r3, [r3, #0]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000770 	.word	0x20000770

080015e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ec:	f7ff ffee 	bl	80015cc <HAL_GetTick>
 80015f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015fc:	d005      	beq.n	800160a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <HAL_Delay+0x44>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4413      	add	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800160a:	bf00      	nop
 800160c:	f7ff ffde 	bl	80015cc <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	429a      	cmp	r2, r3
 800161a:	d8f7      	bhi.n	800160c <HAL_Delay+0x28>
  {
  }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000008 	.word	0x20000008

0800162c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001648:	4013      	ands	r3, r2
 800164a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001654:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800165c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165e:	4a04      	ldr	r2, [pc, #16]	@ (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	60d3      	str	r3, [r2, #12]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001678:	4b04      	ldr	r3, [pc, #16]	@ (800168c <__NVIC_GetPriorityGrouping+0x18>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	f003 0307 	and.w	r3, r3, #7
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	db0b      	blt.n	80016ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	f003 021f 	and.w	r2, r3, #31
 80016a8:	4907      	ldr	r1, [pc, #28]	@ (80016c8 <__NVIC_EnableIRQ+0x38>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	095b      	lsrs	r3, r3, #5
 80016b0:	2001      	movs	r0, #1
 80016b2:	fa00 f202 	lsl.w	r2, r0, r2
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000e100 	.word	0xe000e100

080016cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	db0a      	blt.n	80016f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	490c      	ldr	r1, [pc, #48]	@ (8001718 <__NVIC_SetPriority+0x4c>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	0112      	lsls	r2, r2, #4
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	440b      	add	r3, r1
 80016f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f4:	e00a      	b.n	800170c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4908      	ldr	r1, [pc, #32]	@ (800171c <__NVIC_SetPriority+0x50>)
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	3b04      	subs	r3, #4
 8001704:	0112      	lsls	r2, r2, #4
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	440b      	add	r3, r1
 800170a:	761a      	strb	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000e100 	.word	0xe000e100
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	@ 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f1c3 0307 	rsb	r3, r3, #7
 800173a:	2b04      	cmp	r3, #4
 800173c:	bf28      	it	cs
 800173e:	2304      	movcs	r3, #4
 8001740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3304      	adds	r3, #4
 8001746:	2b06      	cmp	r3, #6
 8001748:	d902      	bls.n	8001750 <NVIC_EncodePriority+0x30>
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3b03      	subs	r3, #3
 800174e:	e000      	b.n	8001752 <NVIC_EncodePriority+0x32>
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	401a      	ands	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001768:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	43d9      	mvns	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	4313      	orrs	r3, r2
         );
}
 800177a:	4618      	mov	r0, r3
 800177c:	3724      	adds	r7, #36	@ 0x24
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001798:	d301      	bcc.n	800179e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179a:	2301      	movs	r3, #1
 800179c:	e00f      	b.n	80017be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800179e:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <SysTick_Config+0x40>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017a6:	210f      	movs	r1, #15
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017ac:	f7ff ff8e 	bl	80016cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b0:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <SysTick_Config+0x40>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017b6:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <SysTick_Config+0x40>)
 80017b8:	2207      	movs	r2, #7
 80017ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	e000e010 	.word	0xe000e010

080017cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ff29 	bl	800162c <__NVIC_SetPriorityGrouping>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017f4:	f7ff ff3e 	bl	8001674 <__NVIC_GetPriorityGrouping>
 80017f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	6978      	ldr	r0, [r7, #20]
 8001800:	f7ff ff8e 	bl	8001720 <NVIC_EncodePriority>
 8001804:	4602      	mov	r2, r0
 8001806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff5d 	bl	80016cc <__NVIC_SetPriority>
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff31 	bl	8001690 <__NVIC_EnableIRQ>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ffa2 	bl	8001788 <SysTick_Config>
 8001844:	4603      	mov	r3, r0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e0ac      	b.n	80019bc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f8b2 	bl	80019d0 <DFSDM_GetChannelFromInstance>
 800186c:	4603      	mov	r3, r0
 800186e:	4a55      	ldr	r2, [pc, #340]	@ (80019c4 <HAL_DFSDM_ChannelInit+0x174>)
 8001870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e09f      	b.n	80019bc <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff fb25 	bl	8000ecc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001882:	4b51      	ldr	r3, [pc, #324]	@ (80019c8 <HAL_DFSDM_ChannelInit+0x178>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	3301      	adds	r3, #1
 8001888:	4a4f      	ldr	r2, [pc, #316]	@ (80019c8 <HAL_DFSDM_ChannelInit+0x178>)
 800188a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800188c:	4b4e      	ldr	r3, [pc, #312]	@ (80019c8 <HAL_DFSDM_ChannelInit+0x178>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d125      	bne.n	80018e0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001894:	4b4d      	ldr	r3, [pc, #308]	@ (80019cc <HAL_DFSDM_ChannelInit+0x17c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a4c      	ldr	r2, [pc, #304]	@ (80019cc <HAL_DFSDM_ChannelInit+0x17c>)
 800189a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800189e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80018a0:	4b4a      	ldr	r3, [pc, #296]	@ (80019cc <HAL_DFSDM_ChannelInit+0x17c>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	4948      	ldr	r1, [pc, #288]	@ (80019cc <HAL_DFSDM_ChannelInit+0x17c>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80018ae:	4b47      	ldr	r3, [pc, #284]	@ (80019cc <HAL_DFSDM_ChannelInit+0x17c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a46      	ldr	r2, [pc, #280]	@ (80019cc <HAL_DFSDM_ChannelInit+0x17c>)
 80018b4:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80018b8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	791b      	ldrb	r3, [r3, #4]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d108      	bne.n	80018d4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80018c2:	4b42      	ldr	r3, [pc, #264]	@ (80019cc <HAL_DFSDM_ChannelInit+0x17c>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	041b      	lsls	r3, r3, #16
 80018ce:	493f      	ldr	r1, [pc, #252]	@ (80019cc <HAL_DFSDM_ChannelInit+0x17c>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80018d4:	4b3d      	ldr	r3, [pc, #244]	@ (80019cc <HAL_DFSDM_ChannelInit+0x17c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a3c      	ldr	r2, [pc, #240]	@ (80019cc <HAL_DFSDM_ChannelInit+0x17c>)
 80018da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80018de:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80018ee:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80018fe:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001904:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 020f 	bic.w	r2, r2, #15
 800191c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6819      	ldr	r1, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001944:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6899      	ldr	r1, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001954:	3b01      	subs	r3, #1
 8001956:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f002 0207 	and.w	r2, r2, #7
 8001970:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6859      	ldr	r1, [r3, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800199c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f810 	bl	80019d0 <DFSDM_GetChannelFromInstance>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4904      	ldr	r1, [pc, #16]	@ (80019c4 <HAL_DFSDM_ChannelInit+0x174>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000778 	.word	0x20000778
 80019c8:	20000774 	.word	0x20000774
 80019cc:	40016000 	.word	0x40016000

080019d0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a1c      	ldr	r2, [pc, #112]	@ (8001a4c <DFSDM_GetChannelFromInstance+0x7c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d102      	bne.n	80019e6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	e02b      	b.n	8001a3e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a19      	ldr	r2, [pc, #100]	@ (8001a50 <DFSDM_GetChannelFromInstance+0x80>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d102      	bne.n	80019f4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80019ee:	2301      	movs	r3, #1
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	e024      	b.n	8001a3e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a17      	ldr	r2, [pc, #92]	@ (8001a54 <DFSDM_GetChannelFromInstance+0x84>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d102      	bne.n	8001a02 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80019fc:	2302      	movs	r3, #2
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	e01d      	b.n	8001a3e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a14      	ldr	r2, [pc, #80]	@ (8001a58 <DFSDM_GetChannelFromInstance+0x88>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d102      	bne.n	8001a10 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	e016      	b.n	8001a3e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a12      	ldr	r2, [pc, #72]	@ (8001a5c <DFSDM_GetChannelFromInstance+0x8c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d102      	bne.n	8001a1e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001a18:	2305      	movs	r3, #5
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	e00f      	b.n	8001a3e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a0f      	ldr	r2, [pc, #60]	@ (8001a60 <DFSDM_GetChannelFromInstance+0x90>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d102      	bne.n	8001a2c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001a26:	2306      	movs	r3, #6
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	e008      	b.n	8001a3e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a64 <DFSDM_GetChannelFromInstance+0x94>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d102      	bne.n	8001a3a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001a34:	2307      	movs	r3, #7
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	e001      	b.n	8001a3e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	40016000 	.word	0x40016000
 8001a50:	40016020 	.word	0x40016020
 8001a54:	40016040 	.word	0x40016040
 8001a58:	40016080 	.word	0x40016080
 8001a5c:	400160a0 	.word	0x400160a0
 8001a60:	400160c0 	.word	0x400160c0
 8001a64:	400160e0 	.word	0x400160e0

08001a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a76:	e17f      	b.n	8001d78 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	4013      	ands	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8171 	beq.w	8001d72 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d005      	beq.n	8001aa8 <HAL_GPIO_Init+0x40>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d130      	bne.n	8001b0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ade:	2201      	movs	r2, #1
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	091b      	lsrs	r3, r3, #4
 8001af4:	f003 0201 	and.w	r2, r3, #1
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d118      	bne.n	8001b48 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	08db      	lsrs	r3, r3, #3
 8001b32:	f003 0201 	and.w	r2, r3, #1
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d017      	beq.n	8001b84 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d123      	bne.n	8001bd8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	08da      	lsrs	r2, r3, #3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3208      	adds	r2, #8
 8001b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	08da      	lsrs	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3208      	adds	r2, #8
 8001bd2:	6939      	ldr	r1, [r7, #16]
 8001bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0203 	and.w	r2, r3, #3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80ac 	beq.w	8001d72 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1a:	4b5f      	ldr	r3, [pc, #380]	@ (8001d98 <HAL_GPIO_Init+0x330>)
 8001c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c1e:	4a5e      	ldr	r2, [pc, #376]	@ (8001d98 <HAL_GPIO_Init+0x330>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c26:	4b5c      	ldr	r3, [pc, #368]	@ (8001d98 <HAL_GPIO_Init+0x330>)
 8001c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c32:	4a5a      	ldr	r2, [pc, #360]	@ (8001d9c <HAL_GPIO_Init+0x334>)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c5c:	d025      	beq.n	8001caa <HAL_GPIO_Init+0x242>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4f      	ldr	r2, [pc, #316]	@ (8001da0 <HAL_GPIO_Init+0x338>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d01f      	beq.n	8001ca6 <HAL_GPIO_Init+0x23e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4e      	ldr	r2, [pc, #312]	@ (8001da4 <HAL_GPIO_Init+0x33c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d019      	beq.n	8001ca2 <HAL_GPIO_Init+0x23a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4d      	ldr	r2, [pc, #308]	@ (8001da8 <HAL_GPIO_Init+0x340>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d013      	beq.n	8001c9e <HAL_GPIO_Init+0x236>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4c      	ldr	r2, [pc, #304]	@ (8001dac <HAL_GPIO_Init+0x344>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00d      	beq.n	8001c9a <HAL_GPIO_Init+0x232>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4b      	ldr	r2, [pc, #300]	@ (8001db0 <HAL_GPIO_Init+0x348>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d007      	beq.n	8001c96 <HAL_GPIO_Init+0x22e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4a      	ldr	r2, [pc, #296]	@ (8001db4 <HAL_GPIO_Init+0x34c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d101      	bne.n	8001c92 <HAL_GPIO_Init+0x22a>
 8001c8e:	2306      	movs	r3, #6
 8001c90:	e00c      	b.n	8001cac <HAL_GPIO_Init+0x244>
 8001c92:	2307      	movs	r3, #7
 8001c94:	e00a      	b.n	8001cac <HAL_GPIO_Init+0x244>
 8001c96:	2305      	movs	r3, #5
 8001c98:	e008      	b.n	8001cac <HAL_GPIO_Init+0x244>
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	e006      	b.n	8001cac <HAL_GPIO_Init+0x244>
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e004      	b.n	8001cac <HAL_GPIO_Init+0x244>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e002      	b.n	8001cac <HAL_GPIO_Init+0x244>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_GPIO_Init+0x244>
 8001caa:	2300      	movs	r3, #0
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	f002 0203 	and.w	r2, r2, #3
 8001cb2:	0092      	lsls	r2, r2, #2
 8001cb4:	4093      	lsls	r3, r2
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cbc:	4937      	ldr	r1, [pc, #220]	@ (8001d9c <HAL_GPIO_Init+0x334>)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cca:	4b3b      	ldr	r3, [pc, #236]	@ (8001db8 <HAL_GPIO_Init+0x350>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cee:	4a32      	ldr	r2, [pc, #200]	@ (8001db8 <HAL_GPIO_Init+0x350>)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cf4:	4b30      	ldr	r3, [pc, #192]	@ (8001db8 <HAL_GPIO_Init+0x350>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d18:	4a27      	ldr	r2, [pc, #156]	@ (8001db8 <HAL_GPIO_Init+0x350>)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d1e:	4b26      	ldr	r3, [pc, #152]	@ (8001db8 <HAL_GPIO_Init+0x350>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d42:	4a1d      	ldr	r2, [pc, #116]	@ (8001db8 <HAL_GPIO_Init+0x350>)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d48:	4b1b      	ldr	r3, [pc, #108]	@ (8001db8 <HAL_GPIO_Init+0x350>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d6c:	4a12      	ldr	r2, [pc, #72]	@ (8001db8 <HAL_GPIO_Init+0x350>)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	3301      	adds	r3, #1
 8001d76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f47f ae78 	bne.w	8001a78 <HAL_GPIO_Init+0x10>
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	371c      	adds	r7, #28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40010000 	.word	0x40010000
 8001da0:	48000400 	.word	0x48000400
 8001da4:	48000800 	.word	0x48000800
 8001da8:	48000c00 	.word	0x48000c00
 8001dac:	48001000 	.word	0x48001000
 8001db0:	48001400 	.word	0x48001400
 8001db4:	48001800 	.word	0x48001800
 8001db8:	40010400 	.word	0x40010400

08001dbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	887b      	ldrh	r3, [r7, #2]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
 8001dd8:	e001      	b.n	8001dde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dfc:	787b      	ldrb	r3, [r7, #1]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e02:	887a      	ldrh	r2, [r7, #2]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e08:	e002      	b.n	8001e10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e0a:	887a      	ldrh	r2, [r7, #2]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4013      	ands	r3, r2
 8001e34:	041a      	lsls	r2, r3, #16
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	43d9      	mvns	r1, r3
 8001e3a:	887b      	ldrh	r3, [r7, #2]
 8001e3c:	400b      	ands	r3, r1
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	619a      	str	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e5a:	4b08      	ldr	r3, [pc, #32]	@ (8001e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d006      	beq.n	8001e74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e66:	4a05      	ldr	r2, [pc, #20]	@ (8001e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe ff38 	bl	8000ce4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40010400 	.word	0x40010400

08001e80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e08d      	b.n	8001fae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d106      	bne.n	8001eac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff f874 	bl	8000f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2224      	movs	r2, #36	@ 0x24
 8001eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ed0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ee0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d107      	bne.n	8001efa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	e006      	b.n	8001f08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d108      	bne.n	8001f22 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	e007      	b.n	8001f32 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691a      	ldr	r2, [r3, #16]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69d9      	ldr	r1, [r3, #28]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1a      	ldr	r2, [r3, #32]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	d138      	bne.n	800203e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e032      	b.n	8002040 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2224      	movs	r2, #36	@ 0x24
 8001fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0201 	bic.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002008:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6819      	ldr	r1, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0201 	orr.w	r2, r2, #1
 8002028:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	e000      	b.n	8002040 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800203e:	2302      	movs	r3, #2
  }
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b20      	cmp	r3, #32
 8002060:	d139      	bne.n	80020d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800206c:	2302      	movs	r3, #2
 800206e:	e033      	b.n	80020d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2224      	movs	r2, #36	@ 0x24
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800209e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0201 	orr.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e000      	b.n	80020d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020d6:	2302      	movs	r3, #2
  }
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e101      	b.n	80022fa <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d106      	bne.n	8002110 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff f8cc 	bl	80012a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2203      	movs	r2, #3
 8002114:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f002 fb10 	bl	8004748 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	7c1a      	ldrb	r2, [r3, #16]
 8002130:	f88d 2000 	strb.w	r2, [sp]
 8002134:	3304      	adds	r3, #4
 8002136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002138:	f002 fad9 	bl	80046ee <USB_CoreInit>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d005      	beq.n	800214e <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2202      	movs	r2, #2
 8002146:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e0d5      	b.n	80022fa <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2100      	movs	r1, #0
 8002154:	4618      	mov	r0, r3
 8002156:	f002 fb08 	bl	800476a <USB_SetCurrentMode>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0c6      	b.n	80022fa <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800216c:	2300      	movs	r3, #0
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	e04a      	b.n	8002208 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	3315      	adds	r3, #21
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	3314      	adds	r3, #20
 8002196:	7bfa      	ldrb	r2, [r7, #15]
 8002198:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	b298      	uxth	r0, r3
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	332e      	adds	r3, #46	@ 0x2e
 80021ae:	4602      	mov	r2, r0
 80021b0:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	3318      	adds	r3, #24
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	331c      	adds	r3, #28
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	3320      	adds	r3, #32
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021ee:	7bfa      	ldrb	r2, [r7, #15]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	3324      	adds	r3, #36	@ 0x24
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	3301      	adds	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	791b      	ldrb	r3, [r3, #4]
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	429a      	cmp	r2, r3
 8002210:	d3af      	bcc.n	8002172 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]
 8002216:	e044      	b.n	80022a2 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002218:	7bfa      	ldrb	r2, [r7, #15]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800222e:	7bfa      	ldrb	r2, [r7, #15]
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4413      	add	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002240:	7bfa      	ldrb	r2, [r7, #15]
 8002242:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800225a:	7bfa      	ldrb	r2, [r7, #15]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	3301      	adds	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	791b      	ldrb	r3, [r3, #4]
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d3b5      	bcc.n	8002218 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	7c1a      	ldrb	r2, [r3, #16]
 80022b4:	f88d 2000 	strb.w	r2, [sp]
 80022b8:	3304      	adds	r3, #4
 80022ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022bc:	f002 faa2 	bl	8004804 <USB_DevInit>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2202      	movs	r2, #2
 80022ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e013      	b.n	80022fa <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7b1b      	ldrb	r3, [r3, #12]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d102      	bne.n	80022ee <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f80a 	bl	8002302 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f002 fc47 	bl	8004b86 <USB_DevDisconnect>

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002302:	b480      	push	{r7}
 8002304:	b085      	sub	sp, #20
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002334:	f043 0303 	orr.w	r3, r3, #3
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002350:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a04      	ldr	r2, [pc, #16]	@ (8002368 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40007000 	.word	0x40007000

0800236c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002370:	4b04      	ldr	r3, [pc, #16]	@ (8002384 <HAL_PWREx_GetVoltageRange+0x18>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40007000 	.word	0x40007000

08002388 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002396:	d130      	bne.n	80023fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002398:	4b23      	ldr	r3, [pc, #140]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023a4:	d038      	beq.n	8002418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a6:	4b20      	ldr	r3, [pc, #128]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023b6:	4b1d      	ldr	r3, [pc, #116]	@ (800242c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2232      	movs	r2, #50	@ 0x32
 80023bc:	fb02 f303 	mul.w	r3, r2, r3
 80023c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002430 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	0c9b      	lsrs	r3, r3, #18
 80023c8:	3301      	adds	r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023cc:	e002      	b.n	80023d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023d4:	4b14      	ldr	r3, [pc, #80]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023e0:	d102      	bne.n	80023e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f2      	bne.n	80023ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023f4:	d110      	bne.n	8002418 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e00f      	b.n	800241a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002406:	d007      	beq.n	8002418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002408:	4b07      	ldr	r3, [pc, #28]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002410:	4a05      	ldr	r2, [pc, #20]	@ (8002428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002412:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002416:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40007000 	.word	0x40007000
 800242c:	20000000 	.word	0x20000000
 8002430:	431bde83 	.word	0x431bde83

08002434 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002438:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <HAL_PWREx_EnableVddUSB+0x1c>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a04      	ldr	r2, [pc, #16]	@ (8002450 <HAL_PWREx_EnableVddUSB+0x1c>)
 800243e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002442:	6053      	str	r3, [r2, #4]
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40007000 	.word	0x40007000

08002454 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af02      	add	r7, sp, #8
 800245a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800245c:	f7ff f8b6 	bl	80015cc <HAL_GetTick>
 8002460:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e063      	b.n	8002534 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10b      	bne.n	8002490 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7fe fde5 	bl	8001050 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002486:	f241 3188 	movw	r1, #5000	@ 0x1388
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f858 	bl	8002540 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	3b01      	subs	r3, #1
 80024a0:	021a      	lsls	r2, r3, #8
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	2120      	movs	r1, #32
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f850 	bl	800255c <QSPI_WaitFlagStateUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80024c0:	7afb      	ldrb	r3, [r7, #11]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d131      	bne.n	800252a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80024d0:	f023 0310 	bic.w	r3, r3, #16
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6852      	ldr	r2, [r2, #4]
 80024d8:	0611      	lsls	r1, r2, #24
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68d2      	ldr	r2, [r2, #12]
 80024de:	4311      	orrs	r1, r2
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	430b      	orrs	r3, r1
 80024e6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	4b13      	ldr	r3, [pc, #76]	@ (800253c <HAL_QSPI_Init+0xe8>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6912      	ldr	r2, [r2, #16]
 80024f6:	0411      	lsls	r1, r2, #16
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6952      	ldr	r2, [r2, #20]
 80024fc:	4311      	orrs	r1, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6992      	ldr	r2, [r2, #24]
 8002502:	4311      	orrs	r1, r2
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	430b      	orrs	r3, r1
 800250a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8002532:	7afb      	ldrb	r3, [r7, #11]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	ffe0f8fe 	.word	0xffe0f8fe

08002540 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	4613      	mov	r3, r2
 800256a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800256c:	e01a      	b.n	80025a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002574:	d016      	beq.n	80025a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002576:	f7ff f829 	bl	80015cc <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	429a      	cmp	r2, r3
 8002584:	d302      	bcc.n	800258c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10b      	bne.n	80025a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2204      	movs	r2, #4
 8002590:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002598:	f043 0201 	orr.w	r2, r3, #1
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e00e      	b.n	80025c2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	bf14      	ite	ne
 80025b2:	2301      	movne	r3, #1
 80025b4:	2300      	moveq	r3, #0
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d1d6      	bne.n	800256e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e3ca      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025de:	4b97      	ldr	r3, [pc, #604]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025e8:	4b94      	ldr	r3, [pc, #592]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0310 	and.w	r3, r3, #16
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80e4 	beq.w	80027c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d007      	beq.n	8002616 <HAL_RCC_OscConfig+0x4a>
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b0c      	cmp	r3, #12
 800260a:	f040 808b 	bne.w	8002724 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2b01      	cmp	r3, #1
 8002612:	f040 8087 	bne.w	8002724 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002616:	4b89      	ldr	r3, [pc, #548]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_RCC_OscConfig+0x62>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e3a2      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1a      	ldr	r2, [r3, #32]
 8002632:	4b82      	ldr	r3, [pc, #520]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d004      	beq.n	8002648 <HAL_RCC_OscConfig+0x7c>
 800263e:	4b7f      	ldr	r3, [pc, #508]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002646:	e005      	b.n	8002654 <HAL_RCC_OscConfig+0x88>
 8002648:	4b7c      	ldr	r3, [pc, #496]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800264a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800264e:	091b      	lsrs	r3, r3, #4
 8002650:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002654:	4293      	cmp	r3, r2
 8002656:	d223      	bcs.n	80026a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4618      	mov	r0, r3
 800265e:	f000 fd55 	bl	800310c <RCC_SetFlashLatencyFromMSIRange>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e383      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800266c:	4b73      	ldr	r3, [pc, #460]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a72      	ldr	r2, [pc, #456]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002672:	f043 0308 	orr.w	r3, r3, #8
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	4b70      	ldr	r3, [pc, #448]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	496d      	ldr	r1, [pc, #436]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800268a:	4b6c      	ldr	r3, [pc, #432]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	4968      	ldr	r1, [pc, #416]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
 800269e:	e025      	b.n	80026ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a0:	4b66      	ldr	r3, [pc, #408]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a65      	ldr	r2, [pc, #404]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80026a6:	f043 0308 	orr.w	r3, r3, #8
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b63      	ldr	r3, [pc, #396]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4960      	ldr	r1, [pc, #384]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026be:	4b5f      	ldr	r3, [pc, #380]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	495b      	ldr	r1, [pc, #364]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 fd15 	bl	800310c <RCC_SetFlashLatencyFromMSIRange>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e343      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026ec:	f000 fc4a 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b52      	ldr	r3, [pc, #328]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	091b      	lsrs	r3, r3, #4
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	4950      	ldr	r1, [pc, #320]	@ (8002840 <HAL_RCC_OscConfig+0x274>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
 8002708:	4a4e      	ldr	r2, [pc, #312]	@ (8002844 <HAL_RCC_OscConfig+0x278>)
 800270a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800270c:	4b4e      	ldr	r3, [pc, #312]	@ (8002848 <HAL_RCC_OscConfig+0x27c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f7fe ff0b 	bl	800152c <HAL_InitTick>
 8002716:	4603      	mov	r3, r0
 8002718:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d052      	beq.n	80027c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	e327      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d032      	beq.n	8002792 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800272c:	4b43      	ldr	r3, [pc, #268]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a42      	ldr	r2, [pc, #264]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002738:	f7fe ff48 	bl	80015cc <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002740:	f7fe ff44 	bl	80015cc <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e310      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002752:	4b3a      	ldr	r3, [pc, #232]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800275e:	4b37      	ldr	r3, [pc, #220]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a36      	ldr	r2, [pc, #216]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002764:	f043 0308 	orr.w	r3, r3, #8
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b34      	ldr	r3, [pc, #208]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	4931      	ldr	r1, [pc, #196]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800277c:	4b2f      	ldr	r3, [pc, #188]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	021b      	lsls	r3, r3, #8
 800278a:	492c      	ldr	r1, [pc, #176]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
 8002790:	e01a      	b.n	80027c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002792:	4b2a      	ldr	r3, [pc, #168]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a29      	ldr	r2, [pc, #164]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800279e:	f7fe ff15 	bl	80015cc <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027a6:	f7fe ff11 	bl	80015cc <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e2dd      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027b8:	4b20      	ldr	r3, [pc, #128]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f0      	bne.n	80027a6 <HAL_RCC_OscConfig+0x1da>
 80027c4:	e000      	b.n	80027c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d074      	beq.n	80028be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d005      	beq.n	80027e6 <HAL_RCC_OscConfig+0x21a>
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	2b0c      	cmp	r3, #12
 80027de:	d10e      	bne.n	80027fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d10b      	bne.n	80027fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e6:	4b15      	ldr	r3, [pc, #84]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d064      	beq.n	80028bc <HAL_RCC_OscConfig+0x2f0>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d160      	bne.n	80028bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e2ba      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002806:	d106      	bne.n	8002816 <HAL_RCC_OscConfig+0x24a>
 8002808:	4b0c      	ldr	r3, [pc, #48]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a0b      	ldr	r2, [pc, #44]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800280e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	e026      	b.n	8002864 <HAL_RCC_OscConfig+0x298>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800281e:	d115      	bne.n	800284c <HAL_RCC_OscConfig+0x280>
 8002820:	4b06      	ldr	r3, [pc, #24]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a05      	ldr	r2, [pc, #20]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002826:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	4b03      	ldr	r3, [pc, #12]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a02      	ldr	r2, [pc, #8]	@ (800283c <HAL_RCC_OscConfig+0x270>)
 8002832:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	e014      	b.n	8002864 <HAL_RCC_OscConfig+0x298>
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
 8002840:	08008f5c 	.word	0x08008f5c
 8002844:	20000000 	.word	0x20000000
 8002848:	20000004 	.word	0x20000004
 800284c:	4ba0      	ldr	r3, [pc, #640]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a9f      	ldr	r2, [pc, #636]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b9d      	ldr	r3, [pc, #628]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a9c      	ldr	r2, [pc, #624]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 800285e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d013      	beq.n	8002894 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7fe feae 	bl	80015cc <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002874:	f7fe feaa 	bl	80015cc <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	@ 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e276      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002886:	4b92      	ldr	r3, [pc, #584]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0x2a8>
 8002892:	e014      	b.n	80028be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7fe fe9a 	bl	80015cc <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800289c:	f7fe fe96 	bl	80015cc <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	@ 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e262      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ae:	4b88      	ldr	r3, [pc, #544]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x2d0>
 80028ba:	e000      	b.n	80028be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d060      	beq.n	800298c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_OscConfig+0x310>
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	2b0c      	cmp	r3, #12
 80028d4:	d119      	bne.n	800290a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d116      	bne.n	800290a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028dc:	4b7c      	ldr	r3, [pc, #496]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_OscConfig+0x328>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e23f      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f4:	4b76      	ldr	r3, [pc, #472]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	061b      	lsls	r3, r3, #24
 8002902:	4973      	ldr	r1, [pc, #460]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002908:	e040      	b.n	800298c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d023      	beq.n	800295a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002912:	4b6f      	ldr	r3, [pc, #444]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a6e      	ldr	r2, [pc, #440]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002918:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800291c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291e:	f7fe fe55 	bl	80015cc <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002926:	f7fe fe51 	bl	80015cc <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e21d      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002938:	4b65      	ldr	r3, [pc, #404]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b62      	ldr	r3, [pc, #392]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	061b      	lsls	r3, r3, #24
 8002952:	495f      	ldr	r1, [pc, #380]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
 8002958:	e018      	b.n	800298c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002966:	f7fe fe31 	bl	80015cc <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296e:	f7fe fe2d 	bl	80015cc <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e1f9      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002980:	4b53      	ldr	r3, [pc, #332]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f0      	bne.n	800296e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d03c      	beq.n	8002a12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01c      	beq.n	80029da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 80029a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029a6:	4a4a      	ldr	r2, [pc, #296]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7fe fe0c 	bl	80015cc <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b8:	f7fe fe08 	bl	80015cc <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e1d4      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029ca:	4b41      	ldr	r3, [pc, #260]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 80029cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0ef      	beq.n	80029b8 <HAL_RCC_OscConfig+0x3ec>
 80029d8:	e01b      	b.n	8002a12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029da:	4b3d      	ldr	r3, [pc, #244]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 80029dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029e0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ea:	f7fe fdef 	bl	80015cc <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f2:	f7fe fdeb 	bl	80015cc <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e1b7      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a04:	4b32      	ldr	r3, [pc, #200]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1ef      	bne.n	80029f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 80a6 	beq.w	8002b6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a20:	2300      	movs	r3, #0
 8002a22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a24:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10d      	bne.n	8002a4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a30:	4b27      	ldr	r3, [pc, #156]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a34:	4a26      	ldr	r2, [pc, #152]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a3c:	4b24      	ldr	r3, [pc, #144]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a4c:	4b21      	ldr	r3, [pc, #132]	@ (8002ad4 <HAL_RCC_OscConfig+0x508>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d118      	bne.n	8002a8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a58:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad4 <HAL_RCC_OscConfig+0x508>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ad4 <HAL_RCC_OscConfig+0x508>)
 8002a5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a64:	f7fe fdb2 	bl	80015cc <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6c:	f7fe fdae 	bl	80015cc <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e17a      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ad4 <HAL_RCC_OscConfig+0x508>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d108      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4d8>
 8002a92:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a98:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002aa2:	e029      	b.n	8002af8 <HAL_RCC_OscConfig+0x52c>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b05      	cmp	r3, #5
 8002aaa:	d115      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x50c>
 8002aac:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab2:	4a07      	ldr	r2, [pc, #28]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002ab4:	f043 0304 	orr.w	r3, r3, #4
 8002ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002abc:	4b04      	ldr	r3, [pc, #16]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac2:	4a03      	ldr	r2, [pc, #12]	@ (8002ad0 <HAL_RCC_OscConfig+0x504>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002acc:	e014      	b.n	8002af8 <HAL_RCC_OscConfig+0x52c>
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40007000 	.word	0x40007000
 8002ad8:	4b9c      	ldr	r3, [pc, #624]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ade:	4a9b      	ldr	r2, [pc, #620]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ae8:	4b98      	ldr	r3, [pc, #608]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aee:	4a97      	ldr	r2, [pc, #604]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002af0:	f023 0304 	bic.w	r3, r3, #4
 8002af4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d016      	beq.n	8002b2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7fe fd64 	bl	80015cc <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7fe fd60 	bl	80015cc <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e12a      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b1e:	4b8b      	ldr	r3, [pc, #556]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0ed      	beq.n	8002b08 <HAL_RCC_OscConfig+0x53c>
 8002b2c:	e015      	b.n	8002b5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fd4d 	bl	80015cc <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b34:	e00a      	b.n	8002b4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b36:	f7fe fd49 	bl	80015cc <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e113      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b4c:	4b7f      	ldr	r3, [pc, #508]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1ed      	bne.n	8002b36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b5a:	7ffb      	ldrb	r3, [r7, #31]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d105      	bne.n	8002b6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b60:	4b7a      	ldr	r3, [pc, #488]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b64:	4a79      	ldr	r2, [pc, #484]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002b66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b6a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80fe 	beq.w	8002d72 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	f040 80d0 	bne.w	8002d20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b80:	4b72      	ldr	r3, [pc, #456]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f003 0203 	and.w	r2, r3, #3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d130      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d127      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d11f      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bc0:	2a07      	cmp	r2, #7
 8002bc2:	bf14      	ite	ne
 8002bc4:	2201      	movne	r2, #1
 8002bc6:	2200      	moveq	r2, #0
 8002bc8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d113      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd8:	085b      	lsrs	r3, r3, #1
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d109      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bec:	085b      	lsrs	r3, r3, #1
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d06e      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	2b0c      	cmp	r3, #12
 8002bfa:	d069      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bfc:	4b53      	ldr	r3, [pc, #332]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d105      	bne.n	8002c14 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c08:	4b50      	ldr	r3, [pc, #320]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0ad      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c18:	4b4c      	ldr	r3, [pc, #304]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a4b      	ldr	r2, [pc, #300]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002c1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c22:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c24:	f7fe fcd2 	bl	80015cc <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2c:	f7fe fcce 	bl	80015cc <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e09a      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c3e:	4b43      	ldr	r3, [pc, #268]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c4a:	4b40      	ldr	r3, [pc, #256]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	4b40      	ldr	r3, [pc, #256]	@ (8002d50 <HAL_RCC_OscConfig+0x784>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c5a:	3a01      	subs	r2, #1
 8002c5c:	0112      	lsls	r2, r2, #4
 8002c5e:	4311      	orrs	r1, r2
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c64:	0212      	lsls	r2, r2, #8
 8002c66:	4311      	orrs	r1, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c6c:	0852      	lsrs	r2, r2, #1
 8002c6e:	3a01      	subs	r2, #1
 8002c70:	0552      	lsls	r2, r2, #21
 8002c72:	4311      	orrs	r1, r2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c78:	0852      	lsrs	r2, r2, #1
 8002c7a:	3a01      	subs	r2, #1
 8002c7c:	0652      	lsls	r2, r2, #25
 8002c7e:	4311      	orrs	r1, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c84:	0912      	lsrs	r2, r2, #4
 8002c86:	0452      	lsls	r2, r2, #17
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	4930      	ldr	r1, [pc, #192]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c90:	4b2e      	ldr	r3, [pc, #184]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a2d      	ldr	r2, [pc, #180]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002c96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002ca2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ca6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ca8:	f7fe fc90 	bl	80015cc <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7fe fc8c 	bl	80015cc <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e058      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc2:	4b22      	ldr	r3, [pc, #136]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cce:	e050      	b.n	8002d72 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e04f      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d148      	bne.n	8002d72 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a19      	ldr	r2, [pc, #100]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002ce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cec:	4b17      	ldr	r3, [pc, #92]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4a16      	ldr	r2, [pc, #88]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002cf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cf6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cf8:	f7fe fc68 	bl	80015cc <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d00:	f7fe fc64 	bl	80015cc <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e030      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d12:	4b0e      	ldr	r3, [pc, #56]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0x734>
 8002d1e:	e028      	b.n	8002d72 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2b0c      	cmp	r3, #12
 8002d24:	d023      	beq.n	8002d6e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d26:	4b09      	ldr	r3, [pc, #36]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a08      	ldr	r2, [pc, #32]	@ (8002d4c <HAL_RCC_OscConfig+0x780>)
 8002d2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d32:	f7fe fc4b 	bl	80015cc <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d38:	e00c      	b.n	8002d54 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3a:	f7fe fc47 	bl	80015cc <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d905      	bls.n	8002d54 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e013      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d54:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <HAL_RCC_OscConfig+0x7b0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1ec      	bne.n	8002d3a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d60:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <HAL_RCC_OscConfig+0x7b0>)
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	4905      	ldr	r1, [pc, #20]	@ (8002d7c <HAL_RCC_OscConfig+0x7b0>)
 8002d66:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <HAL_RCC_OscConfig+0x7b4>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60cb      	str	r3, [r1, #12]
 8002d6c:	e001      	b.n	8002d72 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3720      	adds	r7, #32
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	feeefffc 	.word	0xfeeefffc

08002d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0e7      	b.n	8002f68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d98:	4b75      	ldr	r3, [pc, #468]	@ (8002f70 <HAL_RCC_ClockConfig+0x1ec>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d910      	bls.n	8002dc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b72      	ldr	r3, [pc, #456]	@ (8002f70 <HAL_RCC_ClockConfig+0x1ec>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 0207 	bic.w	r2, r3, #7
 8002dae:	4970      	ldr	r1, [pc, #448]	@ (8002f70 <HAL_RCC_ClockConfig+0x1ec>)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db6:	4b6e      	ldr	r3, [pc, #440]	@ (8002f70 <HAL_RCC_ClockConfig+0x1ec>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0cf      	b.n	8002f68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d010      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	4b66      	ldr	r3, [pc, #408]	@ (8002f74 <HAL_RCC_ClockConfig+0x1f0>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d908      	bls.n	8002df6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de4:	4b63      	ldr	r3, [pc, #396]	@ (8002f74 <HAL_RCC_ClockConfig+0x1f0>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4960      	ldr	r1, [pc, #384]	@ (8002f74 <HAL_RCC_ClockConfig+0x1f0>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d04c      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d107      	bne.n	8002e1a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e0a:	4b5a      	ldr	r3, [pc, #360]	@ (8002f74 <HAL_RCC_ClockConfig+0x1f0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d121      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e0a6      	b.n	8002f68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e22:	4b54      	ldr	r3, [pc, #336]	@ (8002f74 <HAL_RCC_ClockConfig+0x1f0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d115      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e09a      	b.n	8002f68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d107      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e3a:	4b4e      	ldr	r3, [pc, #312]	@ (8002f74 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e08e      	b.n	8002f68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f74 <HAL_RCC_ClockConfig+0x1f0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e086      	b.n	8002f68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e5a:	4b46      	ldr	r3, [pc, #280]	@ (8002f74 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f023 0203 	bic.w	r2, r3, #3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	4943      	ldr	r1, [pc, #268]	@ (8002f74 <HAL_RCC_ClockConfig+0x1f0>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e6c:	f7fe fbae 	bl	80015cc <HAL_GetTick>
 8002e70:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	e00a      	b.n	8002e8a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e74:	f7fe fbaa 	bl	80015cc <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e06e      	b.n	8002f68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8a:	4b3a      	ldr	r3, [pc, #232]	@ (8002f74 <HAL_RCC_ClockConfig+0x1f0>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 020c 	and.w	r2, r3, #12
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d1eb      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d010      	beq.n	8002eca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	4b31      	ldr	r3, [pc, #196]	@ (8002f74 <HAL_RCC_ClockConfig+0x1f0>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d208      	bcs.n	8002eca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb8:	4b2e      	ldr	r3, [pc, #184]	@ (8002f74 <HAL_RCC_ClockConfig+0x1f0>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	492b      	ldr	r1, [pc, #172]	@ (8002f74 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eca:	4b29      	ldr	r3, [pc, #164]	@ (8002f70 <HAL_RCC_ClockConfig+0x1ec>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d210      	bcs.n	8002efa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed8:	4b25      	ldr	r3, [pc, #148]	@ (8002f70 <HAL_RCC_ClockConfig+0x1ec>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f023 0207 	bic.w	r2, r3, #7
 8002ee0:	4923      	ldr	r1, [pc, #140]	@ (8002f70 <HAL_RCC_ClockConfig+0x1ec>)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee8:	4b21      	ldr	r3, [pc, #132]	@ (8002f70 <HAL_RCC_ClockConfig+0x1ec>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d001      	beq.n	8002efa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e036      	b.n	8002f68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d008      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f06:	4b1b      	ldr	r3, [pc, #108]	@ (8002f74 <HAL_RCC_ClockConfig+0x1f0>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	4918      	ldr	r1, [pc, #96]	@ (8002f74 <HAL_RCC_ClockConfig+0x1f0>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d009      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f24:	4b13      	ldr	r3, [pc, #76]	@ (8002f74 <HAL_RCC_ClockConfig+0x1f0>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4910      	ldr	r1, [pc, #64]	@ (8002f74 <HAL_RCC_ClockConfig+0x1f0>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f38:	f000 f824 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f74 <HAL_RCC_ClockConfig+0x1f0>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	091b      	lsrs	r3, r3, #4
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	490b      	ldr	r1, [pc, #44]	@ (8002f78 <HAL_RCC_ClockConfig+0x1f4>)
 8002f4a:	5ccb      	ldrb	r3, [r1, r3]
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
 8002f54:	4a09      	ldr	r2, [pc, #36]	@ (8002f7c <HAL_RCC_ClockConfig+0x1f8>)
 8002f56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f58:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <HAL_RCC_ClockConfig+0x1fc>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe fae5 	bl	800152c <HAL_InitTick>
 8002f62:	4603      	mov	r3, r0
 8002f64:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f66:	7afb      	ldrb	r3, [r7, #11]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40022000 	.word	0x40022000
 8002f74:	40021000 	.word	0x40021000
 8002f78:	08008f5c 	.word	0x08008f5c
 8002f7c:	20000000 	.word	0x20000000
 8002f80:	20000004 	.word	0x20000004

08002f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b089      	sub	sp, #36	@ 0x24
 8002f88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f92:	4b3e      	ldr	r3, [pc, #248]	@ (800308c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800308c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	2b0c      	cmp	r3, #12
 8002fb0:	d121      	bne.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d11e      	bne.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fb8:	4b34      	ldr	r3, [pc, #208]	@ (800308c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fc4:	4b31      	ldr	r3, [pc, #196]	@ (800308c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fca:	0a1b      	lsrs	r3, r3, #8
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	e005      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fd4:	4b2d      	ldr	r3, [pc, #180]	@ (800308c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fe0:	4a2b      	ldr	r2, [pc, #172]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10d      	bne.n	800300c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ff4:	e00a      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d102      	bne.n	8003002 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ffc:	4b25      	ldr	r3, [pc, #148]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ffe:	61bb      	str	r3, [r7, #24]
 8003000:	e004      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	2b08      	cmp	r3, #8
 8003006:	d101      	bne.n	800300c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003008:	4b23      	ldr	r3, [pc, #140]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x114>)
 800300a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b0c      	cmp	r3, #12
 8003010:	d134      	bne.n	800307c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003012:	4b1e      	ldr	r3, [pc, #120]	@ (800308c <HAL_RCC_GetSysClockFreq+0x108>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d003      	beq.n	800302a <HAL_RCC_GetSysClockFreq+0xa6>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b03      	cmp	r3, #3
 8003026:	d003      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0xac>
 8003028:	e005      	b.n	8003036 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800302a:	4b1a      	ldr	r3, [pc, #104]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x110>)
 800302c:	617b      	str	r3, [r7, #20]
      break;
 800302e:	e005      	b.n	800303c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003030:	4b19      	ldr	r3, [pc, #100]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x114>)
 8003032:	617b      	str	r3, [r7, #20]
      break;
 8003034:	e002      	b.n	800303c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	617b      	str	r3, [r7, #20]
      break;
 800303a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800303c:	4b13      	ldr	r3, [pc, #76]	@ (800308c <HAL_RCC_GetSysClockFreq+0x108>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	3301      	adds	r3, #1
 8003048:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800304a:	4b10      	ldr	r3, [pc, #64]	@ (800308c <HAL_RCC_GetSysClockFreq+0x108>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	0a1b      	lsrs	r3, r3, #8
 8003050:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	fb03 f202 	mul.w	r2, r3, r2
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003060:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003062:	4b0a      	ldr	r3, [pc, #40]	@ (800308c <HAL_RCC_GetSysClockFreq+0x108>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	0e5b      	lsrs	r3, r3, #25
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	3301      	adds	r3, #1
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	fbb2 f3f3 	udiv	r3, r2, r3
 800307a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800307c:	69bb      	ldr	r3, [r7, #24]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3724      	adds	r7, #36	@ 0x24
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40021000 	.word	0x40021000
 8003090:	08008f74 	.word	0x08008f74
 8003094:	00f42400 	.word	0x00f42400
 8003098:	007a1200 	.word	0x007a1200

0800309c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a0:	4b03      	ldr	r3, [pc, #12]	@ (80030b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	20000000 	.word	0x20000000

080030b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030b8:	f7ff fff0 	bl	800309c <HAL_RCC_GetHCLKFreq>
 80030bc:	4602      	mov	r2, r0
 80030be:	4b06      	ldr	r3, [pc, #24]	@ (80030d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	4904      	ldr	r1, [pc, #16]	@ (80030dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80030ca:	5ccb      	ldrb	r3, [r1, r3]
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021000 	.word	0x40021000
 80030dc:	08008f6c 	.word	0x08008f6c

080030e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030e4:	f7ff ffda 	bl	800309c <HAL_RCC_GetHCLKFreq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	0adb      	lsrs	r3, r3, #11
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	4904      	ldr	r1, [pc, #16]	@ (8003108 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030f6:	5ccb      	ldrb	r3, [r1, r3]
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003100:	4618      	mov	r0, r3
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40021000 	.word	0x40021000
 8003108:	08008f6c 	.word	0x08008f6c

0800310c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003114:	2300      	movs	r3, #0
 8003116:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003118:	4b2a      	ldr	r3, [pc, #168]	@ (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800311a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003124:	f7ff f922 	bl	800236c <HAL_PWREx_GetVoltageRange>
 8003128:	6178      	str	r0, [r7, #20]
 800312a:	e014      	b.n	8003156 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800312c:	4b25      	ldr	r3, [pc, #148]	@ (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003130:	4a24      	ldr	r2, [pc, #144]	@ (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003136:	6593      	str	r3, [r2, #88]	@ 0x58
 8003138:	4b22      	ldr	r3, [pc, #136]	@ (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800313a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003144:	f7ff f912 	bl	800236c <HAL_PWREx_GetVoltageRange>
 8003148:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800314a:	4b1e      	ldr	r3, [pc, #120]	@ (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314e:	4a1d      	ldr	r2, [pc, #116]	@ (80031c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003150:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003154:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800315c:	d10b      	bne.n	8003176 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b80      	cmp	r3, #128	@ 0x80
 8003162:	d919      	bls.n	8003198 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2ba0      	cmp	r3, #160	@ 0xa0
 8003168:	d902      	bls.n	8003170 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800316a:	2302      	movs	r3, #2
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	e013      	b.n	8003198 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003170:	2301      	movs	r3, #1
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	e010      	b.n	8003198 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b80      	cmp	r3, #128	@ 0x80
 800317a:	d902      	bls.n	8003182 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800317c:	2303      	movs	r3, #3
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	e00a      	b.n	8003198 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b80      	cmp	r3, #128	@ 0x80
 8003186:	d102      	bne.n	800318e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003188:	2302      	movs	r3, #2
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	e004      	b.n	8003198 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b70      	cmp	r3, #112	@ 0x70
 8003192:	d101      	bne.n	8003198 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003194:	2301      	movs	r3, #1
 8003196:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003198:	4b0b      	ldr	r3, [pc, #44]	@ (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f023 0207 	bic.w	r2, r3, #7
 80031a0:	4909      	ldr	r1, [pc, #36]	@ (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031a8:	4b07      	ldr	r3, [pc, #28]	@ (80031c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d001      	beq.n	80031ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40022000 	.word	0x40022000

080031cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031d4:	2300      	movs	r3, #0
 80031d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031d8:	2300      	movs	r3, #0
 80031da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d041      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80031f0:	d02a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80031f6:	d824      	bhi.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031fc:	d008      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003202:	d81e      	bhi.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003208:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800320c:	d010      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800320e:	e018      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003210:	4b86      	ldr	r3, [pc, #536]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4a85      	ldr	r2, [pc, #532]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003216:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800321a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800321c:	e015      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3304      	adds	r3, #4
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f000 facb 	bl	80037c0 <RCCEx_PLLSAI1_Config>
 800322a:	4603      	mov	r3, r0
 800322c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800322e:	e00c      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3320      	adds	r3, #32
 8003234:	2100      	movs	r1, #0
 8003236:	4618      	mov	r0, r3
 8003238:	f000 fbb6 	bl	80039a8 <RCCEx_PLLSAI2_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003240:	e003      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	74fb      	strb	r3, [r7, #19]
      break;
 8003246:	e000      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003248:	bf00      	nop
    }

    if(ret == HAL_OK)
 800324a:	7cfb      	ldrb	r3, [r7, #19]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10b      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003250:	4b76      	ldr	r3, [pc, #472]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003256:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800325e:	4973      	ldr	r1, [pc, #460]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003266:	e001      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003268:	7cfb      	ldrb	r3, [r7, #19]
 800326a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d041      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800327c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003280:	d02a      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003282:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003286:	d824      	bhi.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003288:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800328c:	d008      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800328e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003292:	d81e      	bhi.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00a      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003298:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800329c:	d010      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800329e:	e018      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032a0:	4b62      	ldr	r3, [pc, #392]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4a61      	ldr	r2, [pc, #388]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ac:	e015      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3304      	adds	r3, #4
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fa83 	bl	80037c0 <RCCEx_PLLSAI1_Config>
 80032ba:	4603      	mov	r3, r0
 80032bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032be:	e00c      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3320      	adds	r3, #32
 80032c4:	2100      	movs	r1, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fb6e 	bl	80039a8 <RCCEx_PLLSAI2_Config>
 80032cc:	4603      	mov	r3, r0
 80032ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032d0:	e003      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	74fb      	strb	r3, [r7, #19]
      break;
 80032d6:	e000      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032da:	7cfb      	ldrb	r3, [r7, #19]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10b      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032e0:	4b52      	ldr	r3, [pc, #328]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032ee:	494f      	ldr	r1, [pc, #316]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032f6:	e001      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80a0 	beq.w	800344a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800330e:	4b47      	ldr	r3, [pc, #284]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800331e:	2300      	movs	r3, #0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00d      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003324:	4b41      	ldr	r3, [pc, #260]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003328:	4a40      	ldr	r2, [pc, #256]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800332e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003330:	4b3e      	ldr	r3, [pc, #248]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800333c:	2301      	movs	r3, #1
 800333e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003340:	4b3b      	ldr	r3, [pc, #236]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a3a      	ldr	r2, [pc, #232]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800334a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800334c:	f7fe f93e 	bl	80015cc <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003352:	e009      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003354:	f7fe f93a 	bl	80015cc <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d902      	bls.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	74fb      	strb	r3, [r7, #19]
        break;
 8003366:	e005      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003368:	4b31      	ldr	r3, [pc, #196]	@ (8003430 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0ef      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d15c      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800337a:	4b2c      	ldr	r3, [pc, #176]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003380:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003384:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01f      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	429a      	cmp	r2, r3
 8003396:	d019      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003398:	4b24      	ldr	r3, [pc, #144]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033a4:	4b21      	ldr	r3, [pc, #132]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033aa:	4a20      	ldr	r2, [pc, #128]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033b4:	4b1d      	ldr	r3, [pc, #116]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ba:	4a1c      	ldr	r2, [pc, #112]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033c4:	4a19      	ldr	r2, [pc, #100]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d016      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d6:	f7fe f8f9 	bl	80015cc <HAL_GetTick>
 80033da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033dc:	e00b      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033de:	f7fe f8f5 	bl	80015cc <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d902      	bls.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	74fb      	strb	r3, [r7, #19]
            break;
 80033f4:	e006      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f6:	4b0d      	ldr	r3, [pc, #52]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0ec      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003404:	7cfb      	ldrb	r3, [r7, #19]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10c      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800340a:	4b08      	ldr	r3, [pc, #32]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003410:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800341a:	4904      	ldr	r1, [pc, #16]	@ (800342c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003422:	e009      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003424:	7cfb      	ldrb	r3, [r7, #19]
 8003426:	74bb      	strb	r3, [r7, #18]
 8003428:	e006      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800342a:	bf00      	nop
 800342c:	40021000 	.word	0x40021000
 8003430:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003438:	7c7b      	ldrb	r3, [r7, #17]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d105      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343e:	4b9e      	ldr	r3, [pc, #632]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003442:	4a9d      	ldr	r2, [pc, #628]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003444:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003448:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003456:	4b98      	ldr	r3, [pc, #608]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345c:	f023 0203 	bic.w	r2, r3, #3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003464:	4994      	ldr	r1, [pc, #592]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003478:	4b8f      	ldr	r3, [pc, #572]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800347e:	f023 020c 	bic.w	r2, r3, #12
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003486:	498c      	ldr	r1, [pc, #560]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800349a:	4b87      	ldr	r3, [pc, #540]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a8:	4983      	ldr	r1, [pc, #524]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034bc:	4b7e      	ldr	r3, [pc, #504]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ca:	497b      	ldr	r1, [pc, #492]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034de:	4b76      	ldr	r3, [pc, #472]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ec:	4972      	ldr	r1, [pc, #456]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003500:	4b6d      	ldr	r3, [pc, #436]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003506:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350e:	496a      	ldr	r1, [pc, #424]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003522:	4b65      	ldr	r3, [pc, #404]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003528:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003530:	4961      	ldr	r1, [pc, #388]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003544:	4b5c      	ldr	r3, [pc, #368]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003552:	4959      	ldr	r1, [pc, #356]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003566:	4b54      	ldr	r3, [pc, #336]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003574:	4950      	ldr	r1, [pc, #320]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003588:	4b4b      	ldr	r3, [pc, #300]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003596:	4948      	ldr	r1, [pc, #288]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035aa:	4b43      	ldr	r3, [pc, #268]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b8:	493f      	ldr	r1, [pc, #252]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d028      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035cc:	4b3a      	ldr	r3, [pc, #232]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035da:	4937      	ldr	r1, [pc, #220]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035ea:	d106      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ec:	4b32      	ldr	r3, [pc, #200]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4a31      	ldr	r2, [pc, #196]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035f6:	60d3      	str	r3, [r2, #12]
 80035f8:	e011      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003602:	d10c      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	2101      	movs	r1, #1
 800360a:	4618      	mov	r0, r3
 800360c:	f000 f8d8 	bl	80037c0 <RCCEx_PLLSAI1_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800361a:	7cfb      	ldrb	r3, [r7, #19]
 800361c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d028      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800362a:	4b23      	ldr	r3, [pc, #140]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003630:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003638:	491f      	ldr	r1, [pc, #124]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363a:	4313      	orrs	r3, r2
 800363c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003644:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003648:	d106      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800364a:	4b1b      	ldr	r3, [pc, #108]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	4a1a      	ldr	r2, [pc, #104]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003650:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003654:	60d3      	str	r3, [r2, #12]
 8003656:	e011      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003660:	d10c      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3304      	adds	r3, #4
 8003666:	2101      	movs	r1, #1
 8003668:	4618      	mov	r0, r3
 800366a:	f000 f8a9 	bl	80037c0 <RCCEx_PLLSAI1_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003672:	7cfb      	ldrb	r3, [r7, #19]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d02b      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003688:	4b0b      	ldr	r3, [pc, #44]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003696:	4908      	ldr	r1, [pc, #32]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036a6:	d109      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a8:	4b03      	ldr	r3, [pc, #12]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4a02      	ldr	r2, [pc, #8]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036b2:	60d3      	str	r3, [r2, #12]
 80036b4:	e014      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3304      	adds	r3, #4
 80036ca:	2101      	movs	r1, #1
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 f877 	bl	80037c0 <RCCEx_PLLSAI1_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036d6:	7cfb      	ldrb	r3, [r7, #19]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d02f      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036ec:	4b2b      	ldr	r3, [pc, #172]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036fa:	4928      	ldr	r1, [pc, #160]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800370a:	d10d      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	2102      	movs	r1, #2
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f854 	bl	80037c0 <RCCEx_PLLSAI1_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800371c:	7cfb      	ldrb	r3, [r7, #19]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d014      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003722:	7cfb      	ldrb	r3, [r7, #19]
 8003724:	74bb      	strb	r3, [r7, #18]
 8003726:	e011      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800372c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003730:	d10c      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3320      	adds	r3, #32
 8003736:	2102      	movs	r1, #2
 8003738:	4618      	mov	r0, r3
 800373a:	f000 f935 	bl	80039a8 <RCCEx_PLLSAI2_Config>
 800373e:	4603      	mov	r3, r0
 8003740:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003742:	7cfb      	ldrb	r3, [r7, #19]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003748:	7cfb      	ldrb	r3, [r7, #19]
 800374a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003758:	4b10      	ldr	r3, [pc, #64]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003766:	490d      	ldr	r1, [pc, #52]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00b      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800377a:	4b08      	ldr	r3, [pc, #32]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800377c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003780:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800378a:	4904      	ldr	r1, [pc, #16]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003792:	7cbb      	ldrb	r3, [r7, #18]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40021000 	.word	0x40021000

080037a0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80037a4:	4b05      	ldr	r3, [pc, #20]	@ (80037bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a04      	ldr	r2, [pc, #16]	@ (80037bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80037aa:	f043 0304 	orr.w	r3, r3, #4
 80037ae:	6013      	str	r3, [r2, #0]
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000

080037c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ce:	4b75      	ldr	r3, [pc, #468]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d018      	beq.n	800380c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037da:	4b72      	ldr	r3, [pc, #456]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f003 0203 	and.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d10d      	bne.n	8003806 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
       ||
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d009      	beq.n	8003806 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037f2:	4b6c      	ldr	r3, [pc, #432]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	091b      	lsrs	r3, r3, #4
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
       ||
 8003802:	429a      	cmp	r2, r3
 8003804:	d047      	beq.n	8003896 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	73fb      	strb	r3, [r7, #15]
 800380a:	e044      	b.n	8003896 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d018      	beq.n	8003846 <RCCEx_PLLSAI1_Config+0x86>
 8003814:	2b03      	cmp	r3, #3
 8003816:	d825      	bhi.n	8003864 <RCCEx_PLLSAI1_Config+0xa4>
 8003818:	2b01      	cmp	r3, #1
 800381a:	d002      	beq.n	8003822 <RCCEx_PLLSAI1_Config+0x62>
 800381c:	2b02      	cmp	r3, #2
 800381e:	d009      	beq.n	8003834 <RCCEx_PLLSAI1_Config+0x74>
 8003820:	e020      	b.n	8003864 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003822:	4b60      	ldr	r3, [pc, #384]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d11d      	bne.n	800386a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003832:	e01a      	b.n	800386a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003834:	4b5b      	ldr	r3, [pc, #364]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800383c:	2b00      	cmp	r3, #0
 800383e:	d116      	bne.n	800386e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003844:	e013      	b.n	800386e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003846:	4b57      	ldr	r3, [pc, #348]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10f      	bne.n	8003872 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003852:	4b54      	ldr	r3, [pc, #336]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003862:	e006      	b.n	8003872 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
      break;
 8003868:	e004      	b.n	8003874 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800386a:	bf00      	nop
 800386c:	e002      	b.n	8003874 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800386e:	bf00      	nop
 8003870:	e000      	b.n	8003874 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003872:	bf00      	nop
    }

    if(status == HAL_OK)
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10d      	bne.n	8003896 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800387a:	4b4a      	ldr	r3, [pc, #296]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6819      	ldr	r1, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	3b01      	subs	r3, #1
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	430b      	orrs	r3, r1
 8003890:	4944      	ldr	r1, [pc, #272]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003892:	4313      	orrs	r3, r2
 8003894:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d17d      	bne.n	8003998 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800389c:	4b41      	ldr	r3, [pc, #260]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a40      	ldr	r2, [pc, #256]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a8:	f7fd fe90 	bl	80015cc <HAL_GetTick>
 80038ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038ae:	e009      	b.n	80038c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038b0:	f7fd fe8c 	bl	80015cc <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d902      	bls.n	80038c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	73fb      	strb	r3, [r7, #15]
        break;
 80038c2:	e005      	b.n	80038d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038c4:	4b37      	ldr	r3, [pc, #220]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1ef      	bne.n	80038b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d160      	bne.n	8003998 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d111      	bne.n	8003900 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038dc:	4b31      	ldr	r3, [pc, #196]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80038e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6892      	ldr	r2, [r2, #8]
 80038ec:	0211      	lsls	r1, r2, #8
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68d2      	ldr	r2, [r2, #12]
 80038f2:	0912      	lsrs	r2, r2, #4
 80038f4:	0452      	lsls	r2, r2, #17
 80038f6:	430a      	orrs	r2, r1
 80038f8:	492a      	ldr	r1, [pc, #168]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	610b      	str	r3, [r1, #16]
 80038fe:	e027      	b.n	8003950 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d112      	bne.n	800392c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003906:	4b27      	ldr	r3, [pc, #156]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800390e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6892      	ldr	r2, [r2, #8]
 8003916:	0211      	lsls	r1, r2, #8
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6912      	ldr	r2, [r2, #16]
 800391c:	0852      	lsrs	r2, r2, #1
 800391e:	3a01      	subs	r2, #1
 8003920:	0552      	lsls	r2, r2, #21
 8003922:	430a      	orrs	r2, r1
 8003924:	491f      	ldr	r1, [pc, #124]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003926:	4313      	orrs	r3, r2
 8003928:	610b      	str	r3, [r1, #16]
 800392a:	e011      	b.n	8003950 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800392c:	4b1d      	ldr	r3, [pc, #116]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003934:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6892      	ldr	r2, [r2, #8]
 800393c:	0211      	lsls	r1, r2, #8
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6952      	ldr	r2, [r2, #20]
 8003942:	0852      	lsrs	r2, r2, #1
 8003944:	3a01      	subs	r2, #1
 8003946:	0652      	lsls	r2, r2, #25
 8003948:	430a      	orrs	r2, r1
 800394a:	4916      	ldr	r1, [pc, #88]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394c:	4313      	orrs	r3, r2
 800394e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003950:	4b14      	ldr	r3, [pc, #80]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a13      	ldr	r2, [pc, #76]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003956:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800395a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395c:	f7fd fe36 	bl	80015cc <HAL_GetTick>
 8003960:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003962:	e009      	b.n	8003978 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003964:	f7fd fe32 	bl	80015cc <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d902      	bls.n	8003978 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	73fb      	strb	r3, [r7, #15]
          break;
 8003976:	e005      	b.n	8003984 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003978:	4b0a      	ldr	r3, [pc, #40]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0ef      	beq.n	8003964 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800398a:	4b06      	ldr	r3, [pc, #24]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	4904      	ldr	r1, [pc, #16]	@ (80039a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003994:	4313      	orrs	r3, r2
 8003996:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003998:	7bfb      	ldrb	r3, [r7, #15]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40021000 	.word	0x40021000

080039a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d018      	beq.n	80039f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039c2:	4b67      	ldr	r3, [pc, #412]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f003 0203 	and.w	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d10d      	bne.n	80039ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
       ||
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039da:	4b61      	ldr	r3, [pc, #388]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	091b      	lsrs	r3, r3, #4
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
       ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d047      	beq.n	8003a7e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
 80039f2:	e044      	b.n	8003a7e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d018      	beq.n	8003a2e <RCCEx_PLLSAI2_Config+0x86>
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d825      	bhi.n	8003a4c <RCCEx_PLLSAI2_Config+0xa4>
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d002      	beq.n	8003a0a <RCCEx_PLLSAI2_Config+0x62>
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d009      	beq.n	8003a1c <RCCEx_PLLSAI2_Config+0x74>
 8003a08:	e020      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a0a:	4b55      	ldr	r3, [pc, #340]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d11d      	bne.n	8003a52 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a1a:	e01a      	b.n	8003a52 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a1c:	4b50      	ldr	r3, [pc, #320]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d116      	bne.n	8003a56 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a2c:	e013      	b.n	8003a56 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a2e:	4b4c      	ldr	r3, [pc, #304]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10f      	bne.n	8003a5a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a3a:	4b49      	ldr	r3, [pc, #292]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a4a:	e006      	b.n	8003a5a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a50:	e004      	b.n	8003a5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a52:	bf00      	nop
 8003a54:	e002      	b.n	8003a5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a56:	bf00      	nop
 8003a58:	e000      	b.n	8003a5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10d      	bne.n	8003a7e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a62:	4b3f      	ldr	r3, [pc, #252]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6819      	ldr	r1, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	430b      	orrs	r3, r1
 8003a78:	4939      	ldr	r1, [pc, #228]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d167      	bne.n	8003b54 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a84:	4b36      	ldr	r3, [pc, #216]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a35      	ldr	r2, [pc, #212]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a90:	f7fd fd9c 	bl	80015cc <HAL_GetTick>
 8003a94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a96:	e009      	b.n	8003aac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a98:	f7fd fd98 	bl	80015cc <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d902      	bls.n	8003aac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	73fb      	strb	r3, [r7, #15]
        break;
 8003aaa:	e005      	b.n	8003ab8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aac:	4b2c      	ldr	r3, [pc, #176]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1ef      	bne.n	8003a98 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d14a      	bne.n	8003b54 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d111      	bne.n	8003ae8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ac4:	4b26      	ldr	r3, [pc, #152]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003acc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6892      	ldr	r2, [r2, #8]
 8003ad4:	0211      	lsls	r1, r2, #8
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68d2      	ldr	r2, [r2, #12]
 8003ada:	0912      	lsrs	r2, r2, #4
 8003adc:	0452      	lsls	r2, r2, #17
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	491f      	ldr	r1, [pc, #124]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	614b      	str	r3, [r1, #20]
 8003ae6:	e011      	b.n	8003b0c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003af0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6892      	ldr	r2, [r2, #8]
 8003af8:	0211      	lsls	r1, r2, #8
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6912      	ldr	r2, [r2, #16]
 8003afe:	0852      	lsrs	r2, r2, #1
 8003b00:	3a01      	subs	r2, #1
 8003b02:	0652      	lsls	r2, r2, #25
 8003b04:	430a      	orrs	r2, r1
 8003b06:	4916      	ldr	r1, [pc, #88]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b0c:	4b14      	ldr	r3, [pc, #80]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a13      	ldr	r2, [pc, #76]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b18:	f7fd fd58 	bl	80015cc <HAL_GetTick>
 8003b1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b1e:	e009      	b.n	8003b34 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b20:	f7fd fd54 	bl	80015cc <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d902      	bls.n	8003b34 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	73fb      	strb	r3, [r7, #15]
          break;
 8003b32:	e005      	b.n	8003b40 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b34:	4b0a      	ldr	r3, [pc, #40]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0ef      	beq.n	8003b20 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b46:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	4904      	ldr	r1, [pc, #16]	@ (8003b60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000

08003b64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e095      	b.n	8003ca2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d108      	bne.n	8003b90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b86:	d009      	beq.n	8003b9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	61da      	str	r2, [r3, #28]
 8003b8e:	e005      	b.n	8003b9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fd fa8e 	bl	80010d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bdc:	d902      	bls.n	8003be4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	e002      	b.n	8003bea <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003be4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003be8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003bf2:	d007      	beq.n	8003c04 <HAL_SPI_Init+0xa0>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bfc:	d002      	beq.n	8003c04 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c46:	ea42 0103 	orr.w	r1, r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	0c1b      	lsrs	r3, r3, #16
 8003c60:	f003 0204 	and.w	r2, r3, #4
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003c80:	ea42 0103 	orr.w	r1, r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e040      	b.n	8003d3e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7fd fa47 	bl	8001160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2224      	movs	r2, #36	@ 0x24
 8003cd6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0201 	bic.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fae1 	bl	80042b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f826 	bl	8003d48 <UART_SetConfig>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e01b      	b.n	8003d3e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d14:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d24:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f042 0201 	orr.w	r2, r2, #1
 8003d34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fb60 	bl	80043fc <UART_CheckIdleState>
 8003d3c:	4603      	mov	r3, r0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d4c:	b08a      	sub	sp, #40	@ 0x28
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	431a      	orrs	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	4ba4      	ldr	r3, [pc, #656]	@ (8004008 <UART_SetConfig+0x2c0>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	6812      	ldr	r2, [r2, #0]
 8003d7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a99      	ldr	r2, [pc, #612]	@ (800400c <UART_SetConfig+0x2c4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d004      	beq.n	8003db4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db0:	4313      	orrs	r3, r2
 8003db2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a90      	ldr	r2, [pc, #576]	@ (8004010 <UART_SetConfig+0x2c8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d126      	bne.n	8003e20 <UART_SetConfig+0xd8>
 8003dd2:	4b90      	ldr	r3, [pc, #576]	@ (8004014 <UART_SetConfig+0x2cc>)
 8003dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d81b      	bhi.n	8003e18 <UART_SetConfig+0xd0>
 8003de0:	a201      	add	r2, pc, #4	@ (adr r2, 8003de8 <UART_SetConfig+0xa0>)
 8003de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de6:	bf00      	nop
 8003de8:	08003df9 	.word	0x08003df9
 8003dec:	08003e09 	.word	0x08003e09
 8003df0:	08003e01 	.word	0x08003e01
 8003df4:	08003e11 	.word	0x08003e11
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dfe:	e116      	b.n	800402e <UART_SetConfig+0x2e6>
 8003e00:	2302      	movs	r3, #2
 8003e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e06:	e112      	b.n	800402e <UART_SetConfig+0x2e6>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e0e:	e10e      	b.n	800402e <UART_SetConfig+0x2e6>
 8003e10:	2308      	movs	r3, #8
 8003e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e16:	e10a      	b.n	800402e <UART_SetConfig+0x2e6>
 8003e18:	2310      	movs	r3, #16
 8003e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e1e:	e106      	b.n	800402e <UART_SetConfig+0x2e6>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a7c      	ldr	r2, [pc, #496]	@ (8004018 <UART_SetConfig+0x2d0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d138      	bne.n	8003e9c <UART_SetConfig+0x154>
 8003e2a:	4b7a      	ldr	r3, [pc, #488]	@ (8004014 <UART_SetConfig+0x2cc>)
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e30:	f003 030c 	and.w	r3, r3, #12
 8003e34:	2b0c      	cmp	r3, #12
 8003e36:	d82d      	bhi.n	8003e94 <UART_SetConfig+0x14c>
 8003e38:	a201      	add	r2, pc, #4	@ (adr r2, 8003e40 <UART_SetConfig+0xf8>)
 8003e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3e:	bf00      	nop
 8003e40:	08003e75 	.word	0x08003e75
 8003e44:	08003e95 	.word	0x08003e95
 8003e48:	08003e95 	.word	0x08003e95
 8003e4c:	08003e95 	.word	0x08003e95
 8003e50:	08003e85 	.word	0x08003e85
 8003e54:	08003e95 	.word	0x08003e95
 8003e58:	08003e95 	.word	0x08003e95
 8003e5c:	08003e95 	.word	0x08003e95
 8003e60:	08003e7d 	.word	0x08003e7d
 8003e64:	08003e95 	.word	0x08003e95
 8003e68:	08003e95 	.word	0x08003e95
 8003e6c:	08003e95 	.word	0x08003e95
 8003e70:	08003e8d 	.word	0x08003e8d
 8003e74:	2300      	movs	r3, #0
 8003e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e7a:	e0d8      	b.n	800402e <UART_SetConfig+0x2e6>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e82:	e0d4      	b.n	800402e <UART_SetConfig+0x2e6>
 8003e84:	2304      	movs	r3, #4
 8003e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e8a:	e0d0      	b.n	800402e <UART_SetConfig+0x2e6>
 8003e8c:	2308      	movs	r3, #8
 8003e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e92:	e0cc      	b.n	800402e <UART_SetConfig+0x2e6>
 8003e94:	2310      	movs	r3, #16
 8003e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e9a:	e0c8      	b.n	800402e <UART_SetConfig+0x2e6>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a5e      	ldr	r2, [pc, #376]	@ (800401c <UART_SetConfig+0x2d4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d125      	bne.n	8003ef2 <UART_SetConfig+0x1aa>
 8003ea6:	4b5b      	ldr	r3, [pc, #364]	@ (8004014 <UART_SetConfig+0x2cc>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003eb0:	2b30      	cmp	r3, #48	@ 0x30
 8003eb2:	d016      	beq.n	8003ee2 <UART_SetConfig+0x19a>
 8003eb4:	2b30      	cmp	r3, #48	@ 0x30
 8003eb6:	d818      	bhi.n	8003eea <UART_SetConfig+0x1a2>
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d00a      	beq.n	8003ed2 <UART_SetConfig+0x18a>
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d814      	bhi.n	8003eea <UART_SetConfig+0x1a2>
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <UART_SetConfig+0x182>
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d008      	beq.n	8003eda <UART_SetConfig+0x192>
 8003ec8:	e00f      	b.n	8003eea <UART_SetConfig+0x1a2>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ed0:	e0ad      	b.n	800402e <UART_SetConfig+0x2e6>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ed8:	e0a9      	b.n	800402e <UART_SetConfig+0x2e6>
 8003eda:	2304      	movs	r3, #4
 8003edc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee0:	e0a5      	b.n	800402e <UART_SetConfig+0x2e6>
 8003ee2:	2308      	movs	r3, #8
 8003ee4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee8:	e0a1      	b.n	800402e <UART_SetConfig+0x2e6>
 8003eea:	2310      	movs	r3, #16
 8003eec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ef0:	e09d      	b.n	800402e <UART_SetConfig+0x2e6>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a4a      	ldr	r2, [pc, #296]	@ (8004020 <UART_SetConfig+0x2d8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d125      	bne.n	8003f48 <UART_SetConfig+0x200>
 8003efc:	4b45      	ldr	r3, [pc, #276]	@ (8004014 <UART_SetConfig+0x2cc>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f02:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f06:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f08:	d016      	beq.n	8003f38 <UART_SetConfig+0x1f0>
 8003f0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f0c:	d818      	bhi.n	8003f40 <UART_SetConfig+0x1f8>
 8003f0e:	2b80      	cmp	r3, #128	@ 0x80
 8003f10:	d00a      	beq.n	8003f28 <UART_SetConfig+0x1e0>
 8003f12:	2b80      	cmp	r3, #128	@ 0x80
 8003f14:	d814      	bhi.n	8003f40 <UART_SetConfig+0x1f8>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <UART_SetConfig+0x1d8>
 8003f1a:	2b40      	cmp	r3, #64	@ 0x40
 8003f1c:	d008      	beq.n	8003f30 <UART_SetConfig+0x1e8>
 8003f1e:	e00f      	b.n	8003f40 <UART_SetConfig+0x1f8>
 8003f20:	2300      	movs	r3, #0
 8003f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f26:	e082      	b.n	800402e <UART_SetConfig+0x2e6>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f2e:	e07e      	b.n	800402e <UART_SetConfig+0x2e6>
 8003f30:	2304      	movs	r3, #4
 8003f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f36:	e07a      	b.n	800402e <UART_SetConfig+0x2e6>
 8003f38:	2308      	movs	r3, #8
 8003f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f3e:	e076      	b.n	800402e <UART_SetConfig+0x2e6>
 8003f40:	2310      	movs	r3, #16
 8003f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f46:	e072      	b.n	800402e <UART_SetConfig+0x2e6>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a35      	ldr	r2, [pc, #212]	@ (8004024 <UART_SetConfig+0x2dc>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d12a      	bne.n	8003fa8 <UART_SetConfig+0x260>
 8003f52:	4b30      	ldr	r3, [pc, #192]	@ (8004014 <UART_SetConfig+0x2cc>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f60:	d01a      	beq.n	8003f98 <UART_SetConfig+0x250>
 8003f62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f66:	d81b      	bhi.n	8003fa0 <UART_SetConfig+0x258>
 8003f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f6c:	d00c      	beq.n	8003f88 <UART_SetConfig+0x240>
 8003f6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f72:	d815      	bhi.n	8003fa0 <UART_SetConfig+0x258>
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <UART_SetConfig+0x238>
 8003f78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f7c:	d008      	beq.n	8003f90 <UART_SetConfig+0x248>
 8003f7e:	e00f      	b.n	8003fa0 <UART_SetConfig+0x258>
 8003f80:	2300      	movs	r3, #0
 8003f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f86:	e052      	b.n	800402e <UART_SetConfig+0x2e6>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f8e:	e04e      	b.n	800402e <UART_SetConfig+0x2e6>
 8003f90:	2304      	movs	r3, #4
 8003f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f96:	e04a      	b.n	800402e <UART_SetConfig+0x2e6>
 8003f98:	2308      	movs	r3, #8
 8003f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f9e:	e046      	b.n	800402e <UART_SetConfig+0x2e6>
 8003fa0:	2310      	movs	r3, #16
 8003fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fa6:	e042      	b.n	800402e <UART_SetConfig+0x2e6>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a17      	ldr	r2, [pc, #92]	@ (800400c <UART_SetConfig+0x2c4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d13a      	bne.n	8004028 <UART_SetConfig+0x2e0>
 8003fb2:	4b18      	ldr	r3, [pc, #96]	@ (8004014 <UART_SetConfig+0x2cc>)
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003fbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fc0:	d01a      	beq.n	8003ff8 <UART_SetConfig+0x2b0>
 8003fc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fc6:	d81b      	bhi.n	8004000 <UART_SetConfig+0x2b8>
 8003fc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fcc:	d00c      	beq.n	8003fe8 <UART_SetConfig+0x2a0>
 8003fce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fd2:	d815      	bhi.n	8004000 <UART_SetConfig+0x2b8>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <UART_SetConfig+0x298>
 8003fd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fdc:	d008      	beq.n	8003ff0 <UART_SetConfig+0x2a8>
 8003fde:	e00f      	b.n	8004000 <UART_SetConfig+0x2b8>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fe6:	e022      	b.n	800402e <UART_SetConfig+0x2e6>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fee:	e01e      	b.n	800402e <UART_SetConfig+0x2e6>
 8003ff0:	2304      	movs	r3, #4
 8003ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ff6:	e01a      	b.n	800402e <UART_SetConfig+0x2e6>
 8003ff8:	2308      	movs	r3, #8
 8003ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ffe:	e016      	b.n	800402e <UART_SetConfig+0x2e6>
 8004000:	2310      	movs	r3, #16
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004006:	e012      	b.n	800402e <UART_SetConfig+0x2e6>
 8004008:	efff69f3 	.word	0xefff69f3
 800400c:	40008000 	.word	0x40008000
 8004010:	40013800 	.word	0x40013800
 8004014:	40021000 	.word	0x40021000
 8004018:	40004400 	.word	0x40004400
 800401c:	40004800 	.word	0x40004800
 8004020:	40004c00 	.word	0x40004c00
 8004024:	40005000 	.word	0x40005000
 8004028:	2310      	movs	r3, #16
 800402a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a9f      	ldr	r2, [pc, #636]	@ (80042b0 <UART_SetConfig+0x568>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d17a      	bne.n	800412e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004038:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800403c:	2b08      	cmp	r3, #8
 800403e:	d824      	bhi.n	800408a <UART_SetConfig+0x342>
 8004040:	a201      	add	r2, pc, #4	@ (adr r2, 8004048 <UART_SetConfig+0x300>)
 8004042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004046:	bf00      	nop
 8004048:	0800406d 	.word	0x0800406d
 800404c:	0800408b 	.word	0x0800408b
 8004050:	08004075 	.word	0x08004075
 8004054:	0800408b 	.word	0x0800408b
 8004058:	0800407b 	.word	0x0800407b
 800405c:	0800408b 	.word	0x0800408b
 8004060:	0800408b 	.word	0x0800408b
 8004064:	0800408b 	.word	0x0800408b
 8004068:	08004083 	.word	0x08004083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800406c:	f7ff f822 	bl	80030b4 <HAL_RCC_GetPCLK1Freq>
 8004070:	61f8      	str	r0, [r7, #28]
        break;
 8004072:	e010      	b.n	8004096 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004074:	4b8f      	ldr	r3, [pc, #572]	@ (80042b4 <UART_SetConfig+0x56c>)
 8004076:	61fb      	str	r3, [r7, #28]
        break;
 8004078:	e00d      	b.n	8004096 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800407a:	f7fe ff83 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 800407e:	61f8      	str	r0, [r7, #28]
        break;
 8004080:	e009      	b.n	8004096 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004086:	61fb      	str	r3, [r7, #28]
        break;
 8004088:	e005      	b.n	8004096 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004094:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80fb 	beq.w	8004294 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	4413      	add	r3, r2
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d305      	bcc.n	80040ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040b4:	69fa      	ldr	r2, [r7, #28]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d903      	bls.n	80040c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040c0:	e0e8      	b.n	8004294 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	2200      	movs	r2, #0
 80040c6:	461c      	mov	r4, r3
 80040c8:	4615      	mov	r5, r2
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	022b      	lsls	r3, r5, #8
 80040d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80040d8:	0222      	lsls	r2, r4, #8
 80040da:	68f9      	ldr	r1, [r7, #12]
 80040dc:	6849      	ldr	r1, [r1, #4]
 80040de:	0849      	lsrs	r1, r1, #1
 80040e0:	2000      	movs	r0, #0
 80040e2:	4688      	mov	r8, r1
 80040e4:	4681      	mov	r9, r0
 80040e6:	eb12 0a08 	adds.w	sl, r2, r8
 80040ea:	eb43 0b09 	adc.w	fp, r3, r9
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	603b      	str	r3, [r7, #0]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040fc:	4650      	mov	r0, sl
 80040fe:	4659      	mov	r1, fp
 8004100:	f7fc f866 	bl	80001d0 <__aeabi_uldivmod>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4613      	mov	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004112:	d308      	bcc.n	8004126 <UART_SetConfig+0x3de>
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800411a:	d204      	bcs.n	8004126 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	60da      	str	r2, [r3, #12]
 8004124:	e0b6      	b.n	8004294 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800412c:	e0b2      	b.n	8004294 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004136:	d15e      	bne.n	80041f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004138:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800413c:	2b08      	cmp	r3, #8
 800413e:	d828      	bhi.n	8004192 <UART_SetConfig+0x44a>
 8004140:	a201      	add	r2, pc, #4	@ (adr r2, 8004148 <UART_SetConfig+0x400>)
 8004142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004146:	bf00      	nop
 8004148:	0800416d 	.word	0x0800416d
 800414c:	08004175 	.word	0x08004175
 8004150:	0800417d 	.word	0x0800417d
 8004154:	08004193 	.word	0x08004193
 8004158:	08004183 	.word	0x08004183
 800415c:	08004193 	.word	0x08004193
 8004160:	08004193 	.word	0x08004193
 8004164:	08004193 	.word	0x08004193
 8004168:	0800418b 	.word	0x0800418b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800416c:	f7fe ffa2 	bl	80030b4 <HAL_RCC_GetPCLK1Freq>
 8004170:	61f8      	str	r0, [r7, #28]
        break;
 8004172:	e014      	b.n	800419e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004174:	f7fe ffb4 	bl	80030e0 <HAL_RCC_GetPCLK2Freq>
 8004178:	61f8      	str	r0, [r7, #28]
        break;
 800417a:	e010      	b.n	800419e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800417c:	4b4d      	ldr	r3, [pc, #308]	@ (80042b4 <UART_SetConfig+0x56c>)
 800417e:	61fb      	str	r3, [r7, #28]
        break;
 8004180:	e00d      	b.n	800419e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004182:	f7fe feff 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 8004186:	61f8      	str	r0, [r7, #28]
        break;
 8004188:	e009      	b.n	800419e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800418a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800418e:	61fb      	str	r3, [r7, #28]
        break;
 8004190:	e005      	b.n	800419e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800419c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d077      	beq.n	8004294 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	005a      	lsls	r2, r3, #1
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	085b      	lsrs	r3, r3, #1
 80041ae:	441a      	add	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	2b0f      	cmp	r3, #15
 80041be:	d916      	bls.n	80041ee <UART_SetConfig+0x4a6>
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041c6:	d212      	bcs.n	80041ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	f023 030f 	bic.w	r3, r3, #15
 80041d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	b29a      	uxth	r2, r3
 80041de:	8afb      	ldrh	r3, [r7, #22]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	8afa      	ldrh	r2, [r7, #22]
 80041ea:	60da      	str	r2, [r3, #12]
 80041ec:	e052      	b.n	8004294 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80041f4:	e04e      	b.n	8004294 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d827      	bhi.n	800424e <UART_SetConfig+0x506>
 80041fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004204 <UART_SetConfig+0x4bc>)
 8004200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004204:	08004229 	.word	0x08004229
 8004208:	08004231 	.word	0x08004231
 800420c:	08004239 	.word	0x08004239
 8004210:	0800424f 	.word	0x0800424f
 8004214:	0800423f 	.word	0x0800423f
 8004218:	0800424f 	.word	0x0800424f
 800421c:	0800424f 	.word	0x0800424f
 8004220:	0800424f 	.word	0x0800424f
 8004224:	08004247 	.word	0x08004247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004228:	f7fe ff44 	bl	80030b4 <HAL_RCC_GetPCLK1Freq>
 800422c:	61f8      	str	r0, [r7, #28]
        break;
 800422e:	e014      	b.n	800425a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004230:	f7fe ff56 	bl	80030e0 <HAL_RCC_GetPCLK2Freq>
 8004234:	61f8      	str	r0, [r7, #28]
        break;
 8004236:	e010      	b.n	800425a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004238:	4b1e      	ldr	r3, [pc, #120]	@ (80042b4 <UART_SetConfig+0x56c>)
 800423a:	61fb      	str	r3, [r7, #28]
        break;
 800423c:	e00d      	b.n	800425a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800423e:	f7fe fea1 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 8004242:	61f8      	str	r0, [r7, #28]
        break;
 8004244:	e009      	b.n	800425a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800424a:	61fb      	str	r3, [r7, #28]
        break;
 800424c:	e005      	b.n	800425a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004258:	bf00      	nop
    }

    if (pclk != 0U)
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d019      	beq.n	8004294 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	085a      	lsrs	r2, r3, #1
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	441a      	add	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004272:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	2b0f      	cmp	r3, #15
 8004278:	d909      	bls.n	800428e <UART_SetConfig+0x546>
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004280:	d205      	bcs.n	800428e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	60da      	str	r2, [r3, #12]
 800428c:	e002      	b.n	8004294 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80042a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3728      	adds	r7, #40	@ 0x28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ae:	bf00      	nop
 80042b0:	40008000 	.word	0x40008000
 80042b4:	00f42400 	.word	0x00f42400

080042b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434c:	f003 0310 	and.w	r3, r3, #16
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01a      	beq.n	80043ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043b6:	d10a      	bne.n	80043ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	605a      	str	r2, [r3, #4]
  }
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b098      	sub	sp, #96	@ 0x60
 8004400:	af02      	add	r7, sp, #8
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800440c:	f7fd f8de 	bl	80015cc <HAL_GetTick>
 8004410:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0308 	and.w	r3, r3, #8
 800441c:	2b08      	cmp	r3, #8
 800441e:	d12e      	bne.n	800447e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004420:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004428:	2200      	movs	r2, #0
 800442a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f88c 	bl	800454c <UART_WaitOnFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d021      	beq.n	800447e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004442:	e853 3f00 	ldrex	r3, [r3]
 8004446:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800444a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800444e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004458:	647b      	str	r3, [r7, #68]	@ 0x44
 800445a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800445e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004460:	e841 2300 	strex	r3, r2, [r1]
 8004464:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e6      	bne.n	800443a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2220      	movs	r2, #32
 8004470:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e062      	b.n	8004544 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b04      	cmp	r3, #4
 800448a:	d149      	bne.n	8004520 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800448c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004494:	2200      	movs	r2, #0
 8004496:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f856 	bl	800454c <UART_WaitOnFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d03c      	beq.n	8004520 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	623b      	str	r3, [r7, #32]
   return(result);
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80044c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e6      	bne.n	80044a6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3308      	adds	r3, #8
 80044de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3308      	adds	r3, #8
 80044f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044f8:	61fa      	str	r2, [r7, #28]
 80044fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	69b9      	ldr	r1, [r7, #24]
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	617b      	str	r3, [r7, #20]
   return(result);
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e5      	bne.n	80044d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e011      	b.n	8004544 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3758      	adds	r7, #88	@ 0x58
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	603b      	str	r3, [r7, #0]
 8004558:	4613      	mov	r3, r2
 800455a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800455c:	e04f      	b.n	80045fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004564:	d04b      	beq.n	80045fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004566:	f7fd f831 	bl	80015cc <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	429a      	cmp	r2, r3
 8004574:	d302      	bcc.n	800457c <UART_WaitOnFlagUntilTimeout+0x30>
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e04e      	b.n	800461e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	d037      	beq.n	80045fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b80      	cmp	r3, #128	@ 0x80
 8004592:	d034      	beq.n	80045fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b40      	cmp	r3, #64	@ 0x40
 8004598:	d031      	beq.n	80045fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	f003 0308 	and.w	r3, r3, #8
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d110      	bne.n	80045ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2208      	movs	r2, #8
 80045ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f838 	bl	8004626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2208      	movs	r2, #8
 80045ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e029      	b.n	800461e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045d8:	d111      	bne.n	80045fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f81e 	bl	8004626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e00f      	b.n	800461e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69da      	ldr	r2, [r3, #28]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	4013      	ands	r3, r2
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	429a      	cmp	r2, r3
 800460c:	bf0c      	ite	eq
 800460e:	2301      	moveq	r3, #1
 8004610:	2300      	movne	r3, #0
 8004612:	b2db      	uxtb	r3, r3
 8004614:	461a      	mov	r2, r3
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	429a      	cmp	r2, r3
 800461a:	d0a0      	beq.n	800455e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004626:	b480      	push	{r7}
 8004628:	b095      	sub	sp, #84	@ 0x54
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004636:	e853 3f00 	ldrex	r3, [r3]
 800463a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800463c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	461a      	mov	r2, r3
 800464a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800464c:	643b      	str	r3, [r7, #64]	@ 0x40
 800464e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004650:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004652:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004654:	e841 2300 	strex	r3, r2, [r1]
 8004658:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800465a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1e6      	bne.n	800462e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3308      	adds	r3, #8
 8004666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	e853 3f00 	ldrex	r3, [r3]
 800466e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f023 0301 	bic.w	r3, r3, #1
 8004676:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3308      	adds	r3, #8
 800467e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004680:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004682:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800468e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e5      	bne.n	8004660 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004698:	2b01      	cmp	r3, #1
 800469a:	d118      	bne.n	80046ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f023 0310 	bic.w	r3, r3, #16
 80046b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ba:	61bb      	str	r3, [r7, #24]
 80046bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046be:	6979      	ldr	r1, [r7, #20]
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	613b      	str	r3, [r7, #16]
   return(result);
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e6      	bne.n	800469c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046e2:	bf00      	nop
 80046e4:	3754      	adds	r7, #84	@ 0x54
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046ee:	b084      	sub	sp, #16
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	f107 001c 	add.w	r0, r7, #28
 80046fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fa69 	bl	8004be4 <USB_CoreReset>
 8004712:	4603      	mov	r3, r0
 8004714:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004716:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004722:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	639a      	str	r2, [r3, #56]	@ 0x38
 800472a:	e005      	b.n	8004738 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004730:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004738:	7bfb      	ldrb	r3, [r7, #15]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004744:	b004      	add	sp, #16
 8004746:	4770      	bx	lr

08004748 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f023 0201 	bic.w	r2, r3, #1
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	460b      	mov	r3, r1
 8004774:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004786:	78fb      	ldrb	r3, [r7, #3]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d115      	bne.n	80047b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004798:	200a      	movs	r0, #10
 800479a:	f7fc ff23 	bl	80015e4 <HAL_Delay>
      ms += 10U;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	330a      	adds	r3, #10
 80047a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 fa0f 	bl	8004bc8 <USB_GetMode>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d01e      	beq.n	80047ee <USB_SetCurrentMode+0x84>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80047b4:	d9f0      	bls.n	8004798 <USB_SetCurrentMode+0x2e>
 80047b6:	e01a      	b.n	80047ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d115      	bne.n	80047ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80047ca:	200a      	movs	r0, #10
 80047cc:	f7fc ff0a 	bl	80015e4 <HAL_Delay>
      ms += 10U;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	330a      	adds	r3, #10
 80047d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f9f6 	bl	8004bc8 <USB_GetMode>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d005      	beq.n	80047ee <USB_SetCurrentMode+0x84>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80047e6:	d9f0      	bls.n	80047ca <USB_SetCurrentMode+0x60>
 80047e8:	e001      	b.n	80047ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e005      	b.n	80047fa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2bc8      	cmp	r3, #200	@ 0xc8
 80047f2:	d101      	bne.n	80047f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004804:	b084      	sub	sp, #16
 8004806:	b580      	push	{r7, lr}
 8004808:	b086      	sub	sp, #24
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800481e:	2300      	movs	r3, #0
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	e009      	b.n	8004838 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	3340      	adds	r3, #64	@ 0x40
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	2200      	movs	r2, #0
 8004830:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	3301      	adds	r3, #1
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	2b0e      	cmp	r3, #14
 800483c:	d9f2      	bls.n	8004824 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800483e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004842:	2b00      	cmp	r3, #0
 8004844:	d11c      	bne.n	8004880 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004854:	f043 0302 	orr.w	r3, r3, #2
 8004858:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	e005      	b.n	800488c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004884:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004892:	461a      	mov	r2, r3
 8004894:	2300      	movs	r3, #0
 8004896:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004898:	2103      	movs	r1, #3
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f95a 	bl	8004b54 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048a0:	2110      	movs	r1, #16
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f8f6 	bl	8004a94 <USB_FlushTxFifo>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f920 	bl	8004af8 <USB_FlushRxFifo>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048c8:	461a      	mov	r2, r3
 80048ca:	2300      	movs	r3, #0
 80048cc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048d4:	461a      	mov	r2, r3
 80048d6:	2300      	movs	r3, #0
 80048d8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048e0:	461a      	mov	r2, r3
 80048e2:	2300      	movs	r3, #0
 80048e4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048e6:	2300      	movs	r3, #0
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	e043      	b.n	8004974 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004902:	d118      	bne.n	8004936 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10a      	bne.n	8004920 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004916:	461a      	mov	r2, r3
 8004918:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	e013      	b.n	8004948 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800492c:	461a      	mov	r2, r3
 800492e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	e008      	b.n	8004948 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004942:	461a      	mov	r2, r3
 8004944:	2300      	movs	r3, #0
 8004946:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004954:	461a      	mov	r2, r3
 8004956:	2300      	movs	r3, #0
 8004958:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004966:	461a      	mov	r2, r3
 8004968:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800496c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	3301      	adds	r3, #1
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004978:	461a      	mov	r2, r3
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4293      	cmp	r3, r2
 800497e:	d3b5      	bcc.n	80048ec <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004980:	2300      	movs	r3, #0
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	e043      	b.n	8004a0e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004998:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800499c:	d118      	bne.n	80049d0 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049b0:	461a      	mov	r2, r3
 80049b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	e013      	b.n	80049e2 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c6:	461a      	mov	r2, r3
 80049c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	e008      	b.n	80049e2 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049dc:	461a      	mov	r2, r3
 80049de:	2300      	movs	r3, #0
 80049e0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ee:	461a      	mov	r2, r3
 80049f0:	2300      	movs	r3, #0
 80049f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a00:	461a      	mov	r2, r3
 8004a02:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a12:	461a      	mov	r2, r3
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d3b5      	bcc.n	8004986 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a2c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004a3a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	f043 0210 	orr.w	r2, r3, #16
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699a      	ldr	r2, [r3, #24]
 8004a4c:	4b10      	ldr	r3, [pc, #64]	@ (8004a90 <USB_DevInit+0x28c>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a54:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d005      	beq.n	8004a68 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	f043 0208 	orr.w	r2, r3, #8
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a68:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d107      	bne.n	8004a80 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a78:	f043 0304 	orr.w	r3, r3, #4
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a8c:	b004      	add	sp, #16
 8004a8e:	4770      	bx	lr
 8004a90:	803c3800 	.word	0x803c3800

08004a94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004aae:	d901      	bls.n	8004ab4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e01b      	b.n	8004aec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	daf2      	bge.n	8004aa2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	019b      	lsls	r3, r3, #6
 8004ac4:	f043 0220 	orr.w	r2, r3, #32
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ad8:	d901      	bls.n	8004ade <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e006      	b.n	8004aec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	d0f0      	beq.n	8004acc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3301      	adds	r3, #1
 8004b08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b10:	d901      	bls.n	8004b16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e018      	b.n	8004b48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	daf2      	bge.n	8004b04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2210      	movs	r2, #16
 8004b26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b34:	d901      	bls.n	8004b3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e006      	b.n	8004b48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0310 	and.w	r3, r3, #16
 8004b42:	2b10      	cmp	r3, #16
 8004b44:	d0f0      	beq.n	8004b28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	68f9      	ldr	r1, [r7, #12]
 8004b70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b74:	4313      	orrs	r3, r2
 8004b76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b085      	sub	sp, #20
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004ba0:	f023 0303 	bic.w	r3, r3, #3
 8004ba4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bb4:	f043 0302 	orr.w	r3, r3, #2
 8004bb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004bfc:	d901      	bls.n	8004c02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e01b      	b.n	8004c3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	daf2      	bge.n	8004bf0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f043 0201 	orr.w	r2, r3, #1
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c26:	d901      	bls.n	8004c2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e006      	b.n	8004c3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d0f0      	beq.n	8004c1a <USB_CoreReset+0x36>

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
	...

08004c48 <__NVIC_SetPriority>:
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	4603      	mov	r3, r0
 8004c50:	6039      	str	r1, [r7, #0]
 8004c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	db0a      	blt.n	8004c72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	490c      	ldr	r1, [pc, #48]	@ (8004c94 <__NVIC_SetPriority+0x4c>)
 8004c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c66:	0112      	lsls	r2, r2, #4
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004c70:	e00a      	b.n	8004c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	4908      	ldr	r1, [pc, #32]	@ (8004c98 <__NVIC_SetPriority+0x50>)
 8004c78:	79fb      	ldrb	r3, [r7, #7]
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	3b04      	subs	r3, #4
 8004c80:	0112      	lsls	r2, r2, #4
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	440b      	add	r3, r1
 8004c86:	761a      	strb	r2, [r3, #24]
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	e000e100 	.word	0xe000e100
 8004c98:	e000ed00 	.word	0xe000ed00

08004c9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	f06f 0004 	mvn.w	r0, #4
 8004ca6:	f7ff ffcf 	bl	8004c48 <__NVIC_SetPriority>
#endif
}
 8004caa:	bf00      	nop
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cb6:	f3ef 8305 	mrs	r3, IPSR
 8004cba:	603b      	str	r3, [r7, #0]
  return(result);
 8004cbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004cc2:	f06f 0305 	mvn.w	r3, #5
 8004cc6:	607b      	str	r3, [r7, #4]
 8004cc8:	e00c      	b.n	8004ce4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004cca:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf4 <osKernelInitialize+0x44>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d105      	bne.n	8004cde <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004cd2:	4b08      	ldr	r3, [pc, #32]	@ (8004cf4 <osKernelInitialize+0x44>)
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	607b      	str	r3, [r7, #4]
 8004cdc:	e002      	b.n	8004ce4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004cde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ce2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ce4:	687b      	ldr	r3, [r7, #4]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	20000798 	.word	0x20000798

08004cf8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cfe:	f3ef 8305 	mrs	r3, IPSR
 8004d02:	603b      	str	r3, [r7, #0]
  return(result);
 8004d04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004d0a:	f06f 0305 	mvn.w	r3, #5
 8004d0e:	607b      	str	r3, [r7, #4]
 8004d10:	e010      	b.n	8004d34 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d12:	4b0b      	ldr	r3, [pc, #44]	@ (8004d40 <osKernelStart+0x48>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d109      	bne.n	8004d2e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004d1a:	f7ff ffbf 	bl	8004c9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004d1e:	4b08      	ldr	r3, [pc, #32]	@ (8004d40 <osKernelStart+0x48>)
 8004d20:	2202      	movs	r2, #2
 8004d22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004d24:	f001 fff0 	bl	8006d08 <vTaskStartScheduler>
      stat = osOK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	607b      	str	r3, [r7, #4]
 8004d2c:	e002      	b.n	8004d34 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004d2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d34:	687b      	ldr	r3, [r7, #4]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000798 	.word	0x20000798

08004d44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08e      	sub	sp, #56	@ 0x38
 8004d48:	af04      	add	r7, sp, #16
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004d50:	2300      	movs	r3, #0
 8004d52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d54:	f3ef 8305 	mrs	r3, IPSR
 8004d58:	617b      	str	r3, [r7, #20]
  return(result);
 8004d5a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d17e      	bne.n	8004e5e <osThreadNew+0x11a>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d07b      	beq.n	8004e5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004d66:	2380      	movs	r3, #128	@ 0x80
 8004d68:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004d6a:	2318      	movs	r3, #24
 8004d6c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004d72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d76:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d045      	beq.n	8004e0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <osThreadNew+0x48>
        name = attr->name;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d008      	beq.n	8004db2 <osThreadNew+0x6e>
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	2b38      	cmp	r3, #56	@ 0x38
 8004da4:	d805      	bhi.n	8004db2 <osThreadNew+0x6e>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <osThreadNew+0x72>
        return (NULL);
 8004db2:	2300      	movs	r3, #0
 8004db4:	e054      	b.n	8004e60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	089b      	lsrs	r3, r3, #2
 8004dc4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00e      	beq.n	8004dec <osThreadNew+0xa8>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b5b      	cmp	r3, #91	@ 0x5b
 8004dd4:	d90a      	bls.n	8004dec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d006      	beq.n	8004dec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <osThreadNew+0xa8>
        mem = 1;
 8004de6:	2301      	movs	r3, #1
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	e010      	b.n	8004e0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10c      	bne.n	8004e0e <osThreadNew+0xca>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d108      	bne.n	8004e0e <osThreadNew+0xca>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d104      	bne.n	8004e0e <osThreadNew+0xca>
          mem = 0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	61bb      	str	r3, [r7, #24]
 8004e08:	e001      	b.n	8004e0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d110      	bne.n	8004e36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e1c:	9202      	str	r2, [sp, #8]
 8004e1e:	9301      	str	r3, [sp, #4]
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	6a3a      	ldr	r2, [r7, #32]
 8004e28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f001 fcb4 	bl	8006798 <xTaskCreateStatic>
 8004e30:	4603      	mov	r3, r0
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	e013      	b.n	8004e5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d110      	bne.n	8004e5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	f107 0310 	add.w	r3, r7, #16
 8004e44:	9301      	str	r3, [sp, #4]
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f001 fd02 	bl	8006858 <xTaskCreate>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d001      	beq.n	8004e5e <osThreadNew+0x11a>
            hTask = NULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004e5e:	693b      	ldr	r3, [r7, #16]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3728      	adds	r7, #40	@ 0x28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e74:	f3ef 8305 	mrs	r3, IPSR
 8004e78:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e7a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8004e80:	f06f 0305 	mvn.w	r3, #5
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	e017      	b.n	8004eb8 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d103      	bne.n	8004e96 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8004e8e:	f06f 0303 	mvn.w	r3, #3
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	e010      	b.n	8004eb8 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8004e96:	6938      	ldr	r0, [r7, #16]
 8004e98:	f001 fece 	bl	8006c38 <eTaskGetState>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d005      	beq.n	8004eb2 <osThreadTerminate+0x4a>
      stat = osOK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8004eaa:	6938      	ldr	r0, [r7, #16]
 8004eac:	f001 fe1a 	bl	8006ae4 <vTaskDelete>
 8004eb0:	e002      	b.n	8004eb8 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8004eb2:	f06f 0302 	mvn.w	r3, #2
 8004eb6:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8004eb8:	697b      	ldr	r3, [r7, #20]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <osThreadFlagsSet+0x1a>
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	da03      	bge.n	8004ee6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8004ede:	f06f 0303 	mvn.w	r3, #3
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	e035      	b.n	8004f52 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8004ee6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004eea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eec:	f3ef 8305 	mrs	r3, IPSR
 8004ef0:	613b      	str	r3, [r7, #16]
  return(result);
 8004ef2:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d01f      	beq.n	8004f38 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8004efc:	f107 0308 	add.w	r3, r7, #8
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	2300      	movs	r3, #0
 8004f04:	2201      	movs	r2, #1
 8004f06:	6839      	ldr	r1, [r7, #0]
 8004f08:	6978      	ldr	r0, [r7, #20]
 8004f0a:	f002 fdfd 	bl	8007b08 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8004f0e:	f107 030c 	add.w	r3, r7, #12
 8004f12:	2200      	movs	r2, #0
 8004f14:	9200      	str	r2, [sp, #0]
 8004f16:	2200      	movs	r2, #0
 8004f18:	2100      	movs	r1, #0
 8004f1a:	6978      	ldr	r0, [r7, #20]
 8004f1c:	f002 fdf4 	bl	8007b08 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d015      	beq.n	8004f52 <osThreadFlagsSet+0x8e>
 8004f26:	4b0d      	ldr	r3, [pc, #52]	@ (8004f5c <osThreadFlagsSet+0x98>)
 8004f28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	e00c      	b.n	8004f52 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8004f38:	2300      	movs	r3, #0
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	6839      	ldr	r1, [r7, #0]
 8004f3e:	6978      	ldr	r0, [r7, #20]
 8004f40:	f002 fd28 	bl	8007994 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8004f44:	f107 030c 	add.w	r3, r7, #12
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	6978      	ldr	r0, [r7, #20]
 8004f4e:	f002 fd21 	bl	8007994 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8004f52:	68fb      	ldr	r3, [r7, #12]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	e000ed04 	.word	0xe000ed04

08004f60 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08c      	sub	sp, #48	@ 0x30
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f6c:	f3ef 8305 	mrs	r3, IPSR
 8004f70:	617b      	str	r3, [r7, #20]
  return(result);
 8004f72:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8004f78:	f06f 0305 	mvn.w	r3, #5
 8004f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f7e:	e06b      	b.n	8005058 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	da03      	bge.n	8004f8e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8004f86:	f06f 0303 	mvn.w	r3, #3
 8004f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f8c:	e064      	b.n	8005058 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <osThreadFlagsWait+0x3e>
      clear = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f9c:	e001      	b.n	8004fa2 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8004faa:	f001 ffc1 	bl	8006f30 <xTaskGetTickCount>
 8004fae:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8004fb0:	f107 0210 	add.w	r2, r7, #16
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fb8:	2000      	movs	r0, #0
 8004fba:	f002 fc91 	bl	80078e0 <xTaskNotifyWait>
 8004fbe:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d137      	bne.n	8005036 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8004fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00c      	beq.n	8004ffa <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d032      	beq.n	8005052 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10f      	bne.n	8005012 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8004ff2:	f06f 0302 	mvn.w	r3, #2
 8004ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8004ff8:	e02e      	b.n	8005058 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d128      	bne.n	8005056 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d103      	bne.n	8005012 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800500a:	f06f 0302 	mvn.w	r3, #2
 800500e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8005010:	e022      	b.n	8005058 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8005012:	f001 ff8d 	bl	8006f30 <xTaskGetTickCount>
 8005016:	4602      	mov	r2, r0
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005022:	429a      	cmp	r2, r3
 8005024:	d902      	bls.n	800502c <osThreadFlagsWait+0xcc>
          tout  = 0;
 8005026:	2300      	movs	r3, #0
 8005028:	627b      	str	r3, [r7, #36]	@ 0x24
 800502a:	e00e      	b.n	800504a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800502c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	627b      	str	r3, [r7, #36]	@ 0x24
 8005034:	e009      	b.n	800504a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d103      	bne.n	8005044 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800503c:	f06f 0302 	mvn.w	r3, #2
 8005040:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005042:	e002      	b.n	800504a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8005044:	f06f 0301 	mvn.w	r3, #1
 8005048:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1af      	bne.n	8004fb0 <osThreadFlagsWait+0x50>
 8005050:	e002      	b.n	8005058 <osThreadFlagsWait+0xf8>
            break;
 8005052:	bf00      	nop
 8005054:	e000      	b.n	8005058 <osThreadFlagsWait+0xf8>
            break;
 8005056:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8005058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800505a:	4618      	mov	r0, r3
 800505c:	3730      	adds	r7, #48	@ 0x30
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005062:	b580      	push	{r7, lr}
 8005064:	b084      	sub	sp, #16
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800506a:	f3ef 8305 	mrs	r3, IPSR
 800506e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005070:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <osDelay+0x1c>
    stat = osErrorISR;
 8005076:	f06f 0305 	mvn.w	r3, #5
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	e007      	b.n	800508e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800507e:	2300      	movs	r3, #0
 8005080:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <osDelay+0x2c>
      vTaskDelay(ticks);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f001 fd9f 	bl	8006bcc <vTaskDelay>
    }
  }

  return (stat);
 800508e:	68fb      	ldr	r3, [r7, #12]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f003 fa5d 	bl	8008560 <pvTimerGetTimerID>
 80050a6:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d005      	beq.n	80050ba <TimerCallback+0x22>
    callb->func (callb->arg);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	6852      	ldr	r2, [r2, #4]
 80050b6:	4610      	mov	r0, r2
 80050b8:	4798      	blx	r3
  }
}
 80050ba:	bf00      	nop
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b08c      	sub	sp, #48	@ 0x30
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	607a      	str	r2, [r7, #4]
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	460b      	mov	r3, r1
 80050d2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050d8:	f3ef 8305 	mrs	r3, IPSR
 80050dc:	613b      	str	r3, [r7, #16]
  return(result);
 80050de:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d163      	bne.n	80051ac <osTimerNew+0xe8>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d060      	beq.n	80051ac <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80050ea:	2008      	movs	r0, #8
 80050ec:	f003 fcae 	bl	8008a4c <pvPortMalloc>
 80050f0:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d059      	beq.n	80051ac <osTimerNew+0xe8>
      callb->func = func;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005104:	7afb      	ldrb	r3, [r7, #11]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d102      	bne.n	8005110 <osTimerNew+0x4c>
        reload = pdFALSE;
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
 800510e:	e001      	b.n	8005114 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8005110:	2301      	movs	r3, #1
 8005112:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8005114:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005118:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800511a:	2300      	movs	r3, #0
 800511c:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01c      	beq.n	800515e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <osTimerNew+0x6e>
          name = attr->name;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d006      	beq.n	8005148 <osTimerNew+0x84>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	2b2b      	cmp	r3, #43	@ 0x2b
 8005140:	d902      	bls.n	8005148 <osTimerNew+0x84>
          mem = 1;
 8005142:	2301      	movs	r3, #1
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	e00c      	b.n	8005162 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d108      	bne.n	8005162 <osTimerNew+0x9e>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d104      	bne.n	8005162 <osTimerNew+0x9e>
            mem = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	61bb      	str	r3, [r7, #24]
 800515c:	e001      	b.n	8005162 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800515e:	2300      	movs	r3, #0
 8005160:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d10c      	bne.n	8005182 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	9301      	str	r3, [sp, #4]
 800516e:	4b12      	ldr	r3, [pc, #72]	@ (80051b8 <osTimerNew+0xf4>)
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	2101      	movs	r1, #1
 8005178:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800517a:	f002 fe64 	bl	8007e46 <xTimerCreateStatic>
 800517e:	6238      	str	r0, [r7, #32]
 8005180:	e00b      	b.n	800519a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d108      	bne.n	800519a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005188:	4b0b      	ldr	r3, [pc, #44]	@ (80051b8 <osTimerNew+0xf4>)
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	2101      	movs	r1, #1
 8005192:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005194:	f002 fe36 	bl	8007e04 <xTimerCreate>
 8005198:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d105      	bne.n	80051ac <osTimerNew+0xe8>
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <osTimerNew+0xe8>
        vPortFree (callb);
 80051a6:	6978      	ldr	r0, [r7, #20]
 80051a8:	f003 fd1e 	bl	8008be8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80051ac:	6a3b      	ldr	r3, [r7, #32]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3728      	adds	r7, #40	@ 0x28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	08005099 	.word	0x08005099

080051bc <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051ca:	f3ef 8305 	mrs	r3, IPSR
 80051ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80051d0:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <osTimerStart+0x22>
    stat = osErrorISR;
 80051d6:	f06f 0305 	mvn.w	r3, #5
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	e017      	b.n	800520e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d103      	bne.n	80051ec <osTimerStart+0x30>
    stat = osErrorParameter;
 80051e4:	f06f 0303 	mvn.w	r3, #3
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	e010      	b.n	800520e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80051ec:	2300      	movs	r3, #0
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	2300      	movs	r3, #0
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	2104      	movs	r1, #4
 80051f6:	6938      	ldr	r0, [r7, #16]
 80051f8:	f002 fea2 	bl	8007f40 <xTimerGenericCommand>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d102      	bne.n	8005208 <osTimerStart+0x4c>
      stat = osOK;
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]
 8005206:	e002      	b.n	800520e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8005208:	f06f 0302 	mvn.w	r3, #2
 800520c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800520e:	697b      	ldr	r3, [r7, #20]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005218:	b580      	push	{r7, lr}
 800521a:	b088      	sub	sp, #32
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005220:	2300      	movs	r3, #0
 8005222:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005224:	f3ef 8305 	mrs	r3, IPSR
 8005228:	60bb      	str	r3, [r7, #8]
  return(result);
 800522a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800522c:	2b00      	cmp	r3, #0
 800522e:	d174      	bne.n	800531a <osMutexNew+0x102>
    if (attr != NULL) {
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <osMutexNew+0x26>
      type = attr->attr_bits;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	61bb      	str	r3, [r7, #24]
 800523c:	e001      	b.n	8005242 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <osMutexNew+0x3a>
      rmtx = 1U;
 800524c:	2301      	movs	r3, #1
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	e001      	b.n	8005256 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005252:	2300      	movs	r3, #0
 8005254:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d15c      	bne.n	800531a <osMutexNew+0x102>
      mem = -1;
 8005260:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005264:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d015      	beq.n	8005298 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d006      	beq.n	8005282 <osMutexNew+0x6a>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	2b4f      	cmp	r3, #79	@ 0x4f
 800527a:	d902      	bls.n	8005282 <osMutexNew+0x6a>
          mem = 1;
 800527c:	2301      	movs	r3, #1
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	e00c      	b.n	800529c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d108      	bne.n	800529c <osMutexNew+0x84>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d104      	bne.n	800529c <osMutexNew+0x84>
            mem = 0;
 8005292:	2300      	movs	r3, #0
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	e001      	b.n	800529c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005298:	2300      	movs	r3, #0
 800529a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d112      	bne.n	80052c8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d007      	beq.n	80052b8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	4619      	mov	r1, r3
 80052ae:	2004      	movs	r0, #4
 80052b0:	f000 fc51 	bl	8005b56 <xQueueCreateMutexStatic>
 80052b4:	61f8      	str	r0, [r7, #28]
 80052b6:	e016      	b.n	80052e6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	4619      	mov	r1, r3
 80052be:	2001      	movs	r0, #1
 80052c0:	f000 fc49 	bl	8005b56 <xQueueCreateMutexStatic>
 80052c4:	61f8      	str	r0, [r7, #28]
 80052c6:	e00e      	b.n	80052e6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d004      	beq.n	80052de <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80052d4:	2004      	movs	r0, #4
 80052d6:	f000 fc26 	bl	8005b26 <xQueueCreateMutex>
 80052da:	61f8      	str	r0, [r7, #28]
 80052dc:	e003      	b.n	80052e6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80052de:	2001      	movs	r0, #1
 80052e0:	f000 fc21 	bl	8005b26 <xQueueCreateMutex>
 80052e4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00c      	beq.n	8005306 <osMutexNew+0xee>
        if (attr != NULL) {
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <osMutexNew+0xe2>
          name = attr->name;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e001      	b.n	80052fe <osMutexNew+0xe6>
        } else {
          name = NULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80052fe:	68f9      	ldr	r1, [r7, #12]
 8005300:	69f8      	ldr	r0, [r7, #28]
 8005302:	f001 f9eb 	bl	80066dc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d006      	beq.n	800531a <osMutexNew+0x102>
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	f043 0301 	orr.w	r3, r3, #1
 8005318:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800531a:	69fb      	ldr	r3, [r7, #28]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3720      	adds	r7, #32
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005342:	f3ef 8305 	mrs	r3, IPSR
 8005346:	60bb      	str	r3, [r7, #8]
  return(result);
 8005348:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800534e:	f06f 0305 	mvn.w	r3, #5
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	e02c      	b.n	80053b0 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d103      	bne.n	8005364 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800535c:	f06f 0303 	mvn.w	r3, #3
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	e025      	b.n	80053b0 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d011      	beq.n	800538e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800536a:	6839      	ldr	r1, [r7, #0]
 800536c:	6938      	ldr	r0, [r7, #16]
 800536e:	f000 fc42 	bl	8005bf6 <xQueueTakeMutexRecursive>
 8005372:	4603      	mov	r3, r0
 8005374:	2b01      	cmp	r3, #1
 8005376:	d01b      	beq.n	80053b0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800537e:	f06f 0301 	mvn.w	r3, #1
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	e014      	b.n	80053b0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005386:	f06f 0302 	mvn.w	r3, #2
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	e010      	b.n	80053b0 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800538e:	6839      	ldr	r1, [r7, #0]
 8005390:	6938      	ldr	r0, [r7, #16]
 8005392:	f000 fee9 	bl	8006168 <xQueueSemaphoreTake>
 8005396:	4603      	mov	r3, r0
 8005398:	2b01      	cmp	r3, #1
 800539a:	d009      	beq.n	80053b0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80053a2:	f06f 0301 	mvn.w	r3, #1
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	e002      	b.n	80053b0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80053aa:	f06f 0302 	mvn.w	r3, #2
 80053ae:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80053b0:	697b      	ldr	r3, [r7, #20]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b086      	sub	sp, #24
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f023 0301 	bic.w	r3, r3, #1
 80053c8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053d6:	f3ef 8305 	mrs	r3, IPSR
 80053da:	60bb      	str	r3, [r7, #8]
  return(result);
 80053dc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <osMutexRelease+0x30>
    stat = osErrorISR;
 80053e2:	f06f 0305 	mvn.w	r3, #5
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	e01f      	b.n	800542a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d103      	bne.n	80053f8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80053f0:	f06f 0303 	mvn.w	r3, #3
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	e018      	b.n	800542a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d009      	beq.n	8005412 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80053fe:	6938      	ldr	r0, [r7, #16]
 8005400:	f000 fbc4 	bl	8005b8c <xQueueGiveMutexRecursive>
 8005404:	4603      	mov	r3, r0
 8005406:	2b01      	cmp	r3, #1
 8005408:	d00f      	beq.n	800542a <osMutexRelease+0x70>
        stat = osErrorResource;
 800540a:	f06f 0302 	mvn.w	r3, #2
 800540e:	617b      	str	r3, [r7, #20]
 8005410:	e00b      	b.n	800542a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005412:	2300      	movs	r3, #0
 8005414:	2200      	movs	r2, #0
 8005416:	2100      	movs	r1, #0
 8005418:	6938      	ldr	r0, [r7, #16]
 800541a:	f000 fc23 	bl	8005c64 <xQueueGenericSend>
 800541e:	4603      	mov	r3, r0
 8005420:	2b01      	cmp	r3, #1
 8005422:	d002      	beq.n	800542a <osMutexRelease+0x70>
        stat = osErrorResource;
 8005424:	f06f 0302 	mvn.w	r3, #2
 8005428:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800542a:	697b      	ldr	r3, [r7, #20]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005434:	b580      	push	{r7, lr}
 8005436:	b08a      	sub	sp, #40	@ 0x28
 8005438:	af02      	add	r7, sp, #8
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005440:	2300      	movs	r3, #0
 8005442:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005444:	f3ef 8305 	mrs	r3, IPSR
 8005448:	613b      	str	r3, [r7, #16]
  return(result);
 800544a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800544c:	2b00      	cmp	r3, #0
 800544e:	d15f      	bne.n	8005510 <osMessageQueueNew+0xdc>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d05c      	beq.n	8005510 <osMessageQueueNew+0xdc>
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d059      	beq.n	8005510 <osMessageQueueNew+0xdc>
    mem = -1;
 800545c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005460:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d029      	beq.n	80054bc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d012      	beq.n	8005496 <osMessageQueueNew+0x62>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	2b4f      	cmp	r3, #79	@ 0x4f
 8005476:	d90e      	bls.n	8005496 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	695a      	ldr	r2, [r3, #20]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	fb01 f303 	mul.w	r3, r1, r3
 800548c:	429a      	cmp	r2, r3
 800548e:	d302      	bcc.n	8005496 <osMessageQueueNew+0x62>
        mem = 1;
 8005490:	2301      	movs	r3, #1
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	e014      	b.n	80054c0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d110      	bne.n	80054c0 <osMessageQueueNew+0x8c>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10c      	bne.n	80054c0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d108      	bne.n	80054c0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d104      	bne.n	80054c0 <osMessageQueueNew+0x8c>
          mem = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	61bb      	str	r3, [r7, #24]
 80054ba:	e001      	b.n	80054c0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80054bc:	2300      	movs	r3, #0
 80054be:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d10b      	bne.n	80054de <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	2100      	movs	r1, #0
 80054d0:	9100      	str	r1, [sp, #0]
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 fa31 	bl	800593c <xQueueGenericCreateStatic>
 80054da:	61f8      	str	r0, [r7, #28]
 80054dc:	e008      	b.n	80054f0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d105      	bne.n	80054f0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80054e4:	2200      	movs	r2, #0
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 faa4 	bl	8005a36 <xQueueGenericCreate>
 80054ee:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00c      	beq.n	8005510 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <osMessageQueueNew+0xd0>
        name = attr->name;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	e001      	b.n	8005508 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005504:	2300      	movs	r3, #0
 8005506:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005508:	6979      	ldr	r1, [r7, #20]
 800550a:	69f8      	ldr	r0, [r7, #28]
 800550c:	f001 f8e6 	bl	80066dc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005510:	69fb      	ldr	r3, [r7, #28]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3720      	adds	r7, #32
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	4613      	mov	r3, r2
 800552a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005530:	2300      	movs	r3, #0
 8005532:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005534:	f3ef 8305 	mrs	r3, IPSR
 8005538:	617b      	str	r3, [r7, #20]
  return(result);
 800553a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800553c:	2b00      	cmp	r3, #0
 800553e:	d028      	beq.n	8005592 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <osMessageQueuePut+0x36>
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <osMessageQueuePut+0x36>
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005552:	f06f 0303 	mvn.w	r3, #3
 8005556:	61fb      	str	r3, [r7, #28]
 8005558:	e038      	b.n	80055cc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800555a:	2300      	movs	r3, #0
 800555c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800555e:	f107 0210 	add.w	r2, r7, #16
 8005562:	2300      	movs	r3, #0
 8005564:	68b9      	ldr	r1, [r7, #8]
 8005566:	69b8      	ldr	r0, [r7, #24]
 8005568:	f000 fc7e 	bl	8005e68 <xQueueGenericSendFromISR>
 800556c:	4603      	mov	r3, r0
 800556e:	2b01      	cmp	r3, #1
 8005570:	d003      	beq.n	800557a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005572:	f06f 0302 	mvn.w	r3, #2
 8005576:	61fb      	str	r3, [r7, #28]
 8005578:	e028      	b.n	80055cc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d025      	beq.n	80055cc <osMessageQueuePut+0xb0>
 8005580:	4b15      	ldr	r3, [pc, #84]	@ (80055d8 <osMessageQueuePut+0xbc>)
 8005582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	e01c      	b.n	80055cc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <osMessageQueuePut+0x82>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d103      	bne.n	80055a6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800559e:	f06f 0303 	mvn.w	r3, #3
 80055a2:	61fb      	str	r3, [r7, #28]
 80055a4:	e012      	b.n	80055cc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80055a6:	2300      	movs	r3, #0
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	68b9      	ldr	r1, [r7, #8]
 80055ac:	69b8      	ldr	r0, [r7, #24]
 80055ae:	f000 fb59 	bl	8005c64 <xQueueGenericSend>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d009      	beq.n	80055cc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80055be:	f06f 0301 	mvn.w	r3, #1
 80055c2:	61fb      	str	r3, [r7, #28]
 80055c4:	e002      	b.n	80055cc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80055c6:	f06f 0302 	mvn.w	r3, #2
 80055ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80055cc:	69fb      	ldr	r3, [r7, #28]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3720      	adds	r7, #32
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	e000ed04 	.word	0xe000ed04

080055dc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055f2:	f3ef 8305 	mrs	r3, IPSR
 80055f6:	617b      	str	r3, [r7, #20]
  return(result);
 80055f8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d028      	beq.n	8005650 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d005      	beq.n	8005610 <osMessageQueueGet+0x34>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <osMessageQueueGet+0x34>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005610:	f06f 0303 	mvn.w	r3, #3
 8005614:	61fb      	str	r3, [r7, #28]
 8005616:	e037      	b.n	8005688 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005618:	2300      	movs	r3, #0
 800561a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800561c:	f107 0310 	add.w	r3, r7, #16
 8005620:	461a      	mov	r2, r3
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	69b8      	ldr	r0, [r7, #24]
 8005626:	f000 feaf 	bl	8006388 <xQueueReceiveFromISR>
 800562a:	4603      	mov	r3, r0
 800562c:	2b01      	cmp	r3, #1
 800562e:	d003      	beq.n	8005638 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005630:	f06f 0302 	mvn.w	r3, #2
 8005634:	61fb      	str	r3, [r7, #28]
 8005636:	e027      	b.n	8005688 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d024      	beq.n	8005688 <osMessageQueueGet+0xac>
 800563e:	4b15      	ldr	r3, [pc, #84]	@ (8005694 <osMessageQueueGet+0xb8>)
 8005640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	e01b      	b.n	8005688 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <osMessageQueueGet+0x80>
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d103      	bne.n	8005664 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800565c:	f06f 0303 	mvn.w	r3, #3
 8005660:	61fb      	str	r3, [r7, #28]
 8005662:	e011      	b.n	8005688 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	68b9      	ldr	r1, [r7, #8]
 8005668:	69b8      	ldr	r0, [r7, #24]
 800566a:	f000 fc9b 	bl	8005fa4 <xQueueReceive>
 800566e:	4603      	mov	r3, r0
 8005670:	2b01      	cmp	r3, #1
 8005672:	d009      	beq.n	8005688 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800567a:	f06f 0301 	mvn.w	r3, #1
 800567e:	61fb      	str	r3, [r7, #28]
 8005680:	e002      	b.n	8005688 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005682:	f06f 0302 	mvn.w	r3, #2
 8005686:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005688:	69fb      	ldr	r3, [r7, #28]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3720      	adds	r7, #32
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	e000ed04 	.word	0xe000ed04

08005698 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4a07      	ldr	r2, [pc, #28]	@ (80056c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80056a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	4a06      	ldr	r2, [pc, #24]	@ (80056c8 <vApplicationGetIdleTaskMemory+0x30>)
 80056ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2280      	movs	r2, #128	@ 0x80
 80056b4:	601a      	str	r2, [r3, #0]
}
 80056b6:	bf00      	nop
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	2000079c 	.word	0x2000079c
 80056c8:	200007f8 	.word	0x200007f8

080056cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4a07      	ldr	r2, [pc, #28]	@ (80056f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80056dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	4a06      	ldr	r2, [pc, #24]	@ (80056fc <vApplicationGetTimerTaskMemory+0x30>)
 80056e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056ea:	601a      	str	r2, [r3, #0]
}
 80056ec:	bf00      	nop
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	200009f8 	.word	0x200009f8
 80056fc:	20000a54 	.word	0x20000a54

08005700 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f103 0208 	add.w	r2, r3, #8
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005718:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f103 0208 	add.w	r2, r3, #8
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f103 0208 	add.w	r2, r3, #8
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800575a:	b480      	push	{r7}
 800575c:	b085      	sub	sp, #20
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	601a      	str	r2, [r3, #0]
}
 8005796:	bf00      	nop
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057a2:	b480      	push	{r7}
 80057a4:	b085      	sub	sp, #20
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057b8:	d103      	bne.n	80057c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	e00c      	b.n	80057dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3308      	adds	r3, #8
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	e002      	b.n	80057d0 <vListInsert+0x2e>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d2f6      	bcs.n	80057ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	601a      	str	r2, [r3, #0]
}
 8005808:	bf00      	nop
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6892      	ldr	r2, [r2, #8]
 800582a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6852      	ldr	r2, [r2, #4]
 8005834:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	429a      	cmp	r2, r3
 800583e:	d103      	bne.n	8005848 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	1e5a      	subs	r2, r3, #1
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10b      	bne.n	8005894 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800588e:	bf00      	nop
 8005890:	bf00      	nop
 8005892:	e7fd      	b.n	8005890 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005894:	f002 ffb8 	bl	8008808 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a0:	68f9      	ldr	r1, [r7, #12]
 80058a2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80058a4:	fb01 f303 	mul.w	r3, r1, r3
 80058a8:	441a      	add	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c4:	3b01      	subs	r3, #1
 80058c6:	68f9      	ldr	r1, [r7, #12]
 80058c8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80058ca:	fb01 f303 	mul.w	r3, r1, r3
 80058ce:	441a      	add	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	22ff      	movs	r2, #255	@ 0xff
 80058d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	22ff      	movs	r2, #255	@ 0xff
 80058e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d114      	bne.n	8005914 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d01a      	beq.n	8005928 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3310      	adds	r3, #16
 80058f6:	4618      	mov	r0, r3
 80058f8:	f001 fc94 	bl	8007224 <xTaskRemoveFromEventList>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d012      	beq.n	8005928 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005902:	4b0d      	ldr	r3, [pc, #52]	@ (8005938 <xQueueGenericReset+0xd0>)
 8005904:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	e009      	b.n	8005928 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	3310      	adds	r3, #16
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff fef1 	bl	8005700 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3324      	adds	r3, #36	@ 0x24
 8005922:	4618      	mov	r0, r3
 8005924:	f7ff feec 	bl	8005700 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005928:	f002 ffa0 	bl	800886c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800592c:	2301      	movs	r3, #1
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	e000ed04 	.word	0xe000ed04

0800593c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08e      	sub	sp, #56	@ 0x38
 8005940:	af02      	add	r7, sp, #8
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10b      	bne.n	8005968 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005962:	bf00      	nop
 8005964:	bf00      	nop
 8005966:	e7fd      	b.n	8005964 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10b      	bne.n	8005986 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005980:	bf00      	nop
 8005982:	bf00      	nop
 8005984:	e7fd      	b.n	8005982 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <xQueueGenericCreateStatic+0x56>
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <xQueueGenericCreateStatic+0x5a>
 8005992:	2301      	movs	r3, #1
 8005994:	e000      	b.n	8005998 <xQueueGenericCreateStatic+0x5c>
 8005996:	2300      	movs	r3, #0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10b      	bne.n	80059b4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	623b      	str	r3, [r7, #32]
}
 80059ae:	bf00      	nop
 80059b0:	bf00      	nop
 80059b2:	e7fd      	b.n	80059b0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d102      	bne.n	80059c0 <xQueueGenericCreateStatic+0x84>
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <xQueueGenericCreateStatic+0x88>
 80059c0:	2301      	movs	r3, #1
 80059c2:	e000      	b.n	80059c6 <xQueueGenericCreateStatic+0x8a>
 80059c4:	2300      	movs	r3, #0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10b      	bne.n	80059e2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	61fb      	str	r3, [r7, #28]
}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	e7fd      	b.n	80059de <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80059e2:	2350      	movs	r3, #80	@ 0x50
 80059e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2b50      	cmp	r3, #80	@ 0x50
 80059ea:	d00b      	beq.n	8005a04 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80059ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	61bb      	str	r3, [r7, #24]
}
 80059fe:	bf00      	nop
 8005a00:	bf00      	nop
 8005a02:	e7fd      	b.n	8005a00 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a04:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00d      	beq.n	8005a2c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a18:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	4613      	mov	r3, r2
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f840 	bl	8005aac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3730      	adds	r7, #48	@ 0x30
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b08a      	sub	sp, #40	@ 0x28
 8005a3a:	af02      	add	r7, sp, #8
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	4613      	mov	r3, r2
 8005a42:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10b      	bne.n	8005a62 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	613b      	str	r3, [r7, #16]
}
 8005a5c:	bf00      	nop
 8005a5e:	bf00      	nop
 8005a60:	e7fd      	b.n	8005a5e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	fb02 f303 	mul.w	r3, r2, r3
 8005a6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	3350      	adds	r3, #80	@ 0x50
 8005a70:	4618      	mov	r0, r3
 8005a72:	f002 ffeb 	bl	8008a4c <pvPortMalloc>
 8005a76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d011      	beq.n	8005aa2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	3350      	adds	r3, #80	@ 0x50
 8005a86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a90:	79fa      	ldrb	r2, [r7, #7]
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	4613      	mov	r3, r2
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	68b9      	ldr	r1, [r7, #8]
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 f805 	bl	8005aac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005aa2:	69bb      	ldr	r3, [r7, #24]
	}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3720      	adds	r7, #32
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
 8005ab8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d103      	bne.n	8005ac8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	e002      	b.n	8005ace <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ada:	2101      	movs	r1, #1
 8005adc:	69b8      	ldr	r0, [r7, #24]
 8005ade:	f7ff fec3 	bl	8005868 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	78fa      	ldrb	r2, [r7, #3]
 8005ae6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b082      	sub	sp, #8
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00e      	beq.n	8005b1e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005b12:	2300      	movs	r3, #0
 8005b14:	2200      	movs	r2, #0
 8005b16:	2100      	movs	r1, #0
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f8a3 	bl	8005c64 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005b1e:	bf00      	nop
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b086      	sub	sp, #24
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b30:	2301      	movs	r3, #1
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	2300      	movs	r3, #0
 8005b36:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005b38:	79fb      	ldrb	r3, [r7, #7]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6939      	ldr	r1, [r7, #16]
 8005b3e:	6978      	ldr	r0, [r7, #20]
 8005b40:	f7ff ff79 	bl	8005a36 <xQueueGenericCreate>
 8005b44:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f7ff ffd3 	bl	8005af2 <prvInitialiseMutex>

		return xNewQueue;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
	}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b088      	sub	sp, #32
 8005b5a:	af02      	add	r7, sp, #8
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	6039      	str	r1, [r7, #0]
 8005b60:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b62:	2301      	movs	r3, #1
 8005b64:	617b      	str	r3, [r7, #20]
 8005b66:	2300      	movs	r3, #0
 8005b68:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2200      	movs	r2, #0
 8005b72:	6939      	ldr	r1, [r7, #16]
 8005b74:	6978      	ldr	r0, [r7, #20]
 8005b76:	f7ff fee1 	bl	800593c <xQueueGenericCreateStatic>
 8005b7a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f7ff ffb8 	bl	8005af2 <prvInitialiseMutex>

		return xNewQueue;
 8005b82:	68fb      	ldr	r3, [r7, #12]
	}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005b8c:	b590      	push	{r4, r7, lr}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10b      	bne.n	8005bb6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	60fb      	str	r3, [r7, #12]
}
 8005bb0:	bf00      	nop
 8005bb2:	bf00      	nop
 8005bb4:	e7fd      	b.n	8005bb2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	689c      	ldr	r4, [r3, #8]
 8005bba:	f001 fcf3 	bl	80075a4 <xTaskGetCurrentTaskHandle>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	429c      	cmp	r4, r3
 8005bc2:	d111      	bne.n	8005be8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	1e5a      	subs	r2, r3, #1
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d105      	bne.n	8005be2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2100      	movs	r1, #0
 8005bdc:	6938      	ldr	r0, [r7, #16]
 8005bde:	f000 f841 	bl	8005c64 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005be2:	2301      	movs	r3, #1
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	e001      	b.n	8005bec <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005bec:	697b      	ldr	r3, [r7, #20]
	}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd90      	pop	{r4, r7, pc}

08005bf6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005bf6:	b590      	push	{r4, r7, lr}
 8005bf8:	b087      	sub	sp, #28
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10b      	bne.n	8005c22 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	60fb      	str	r3, [r7, #12]
}
 8005c1c:	bf00      	nop
 8005c1e:	bf00      	nop
 8005c20:	e7fd      	b.n	8005c1e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	689c      	ldr	r4, [r3, #8]
 8005c26:	f001 fcbd 	bl	80075a4 <xTaskGetCurrentTaskHandle>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	429c      	cmp	r4, r3
 8005c2e:	d107      	bne.n	8005c40 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	e00c      	b.n	8005c5a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005c40:	6839      	ldr	r1, [r7, #0]
 8005c42:	6938      	ldr	r0, [r7, #16]
 8005c44:	f000 fa90 	bl	8006168 <xQueueSemaphoreTake>
 8005c48:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d004      	beq.n	8005c5a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005c5a:	697b      	ldr	r3, [r7, #20]
	}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	371c      	adds	r7, #28
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd90      	pop	{r4, r7, pc}

08005c64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08e      	sub	sp, #56	@ 0x38
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c72:	2300      	movs	r3, #0
 8005c74:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10b      	bne.n	8005c98 <xQueueGenericSend+0x34>
	__asm volatile
 8005c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c92:	bf00      	nop
 8005c94:	bf00      	nop
 8005c96:	e7fd      	b.n	8005c94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d103      	bne.n	8005ca6 <xQueueGenericSend+0x42>
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <xQueueGenericSend+0x46>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e000      	b.n	8005cac <xQueueGenericSend+0x48>
 8005caa:	2300      	movs	r3, #0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10b      	bne.n	8005cc8 <xQueueGenericSend+0x64>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005cc2:	bf00      	nop
 8005cc4:	bf00      	nop
 8005cc6:	e7fd      	b.n	8005cc4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d103      	bne.n	8005cd6 <xQueueGenericSend+0x72>
 8005cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d101      	bne.n	8005cda <xQueueGenericSend+0x76>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <xQueueGenericSend+0x78>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10b      	bne.n	8005cf8 <xQueueGenericSend+0x94>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	623b      	str	r3, [r7, #32]
}
 8005cf2:	bf00      	nop
 8005cf4:	bf00      	nop
 8005cf6:	e7fd      	b.n	8005cf4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cf8:	f001 fc64 	bl	80075c4 <xTaskGetSchedulerState>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d102      	bne.n	8005d08 <xQueueGenericSend+0xa4>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <xQueueGenericSend+0xa8>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e000      	b.n	8005d0e <xQueueGenericSend+0xaa>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10b      	bne.n	8005d2a <xQueueGenericSend+0xc6>
	__asm volatile
 8005d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	61fb      	str	r3, [r7, #28]
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop
 8005d28:	e7fd      	b.n	8005d26 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d2a:	f002 fd6d 	bl	8008808 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d302      	bcc.n	8005d40 <xQueueGenericSend+0xdc>
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d129      	bne.n	8005d94 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	68b9      	ldr	r1, [r7, #8]
 8005d44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d46:	f000 fbb9 	bl	80064bc <prvCopyDataToQueue>
 8005d4a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d010      	beq.n	8005d76 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d56:	3324      	adds	r3, #36	@ 0x24
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 fa63 	bl	8007224 <xTaskRemoveFromEventList>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d013      	beq.n	8005d8c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d64:	4b3f      	ldr	r3, [pc, #252]	@ (8005e64 <xQueueGenericSend+0x200>)
 8005d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	e00a      	b.n	8005d8c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d007      	beq.n	8005d8c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d7c:	4b39      	ldr	r3, [pc, #228]	@ (8005e64 <xQueueGenericSend+0x200>)
 8005d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d8c:	f002 fd6e 	bl	800886c <vPortExitCritical>
				return pdPASS;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e063      	b.n	8005e5c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d103      	bne.n	8005da2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d9a:	f002 fd67 	bl	800886c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e05c      	b.n	8005e5c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d106      	bne.n	8005db6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005da8:	f107 0314 	add.w	r3, r7, #20
 8005dac:	4618      	mov	r0, r3
 8005dae:	f001 fa9d 	bl	80072ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005db2:	2301      	movs	r3, #1
 8005db4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005db6:	f002 fd59 	bl	800886c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dba:	f001 f80d 	bl	8006dd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dbe:	f002 fd23 	bl	8008808 <vPortEnterCritical>
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005dc8:	b25b      	sxtb	r3, r3
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dce:	d103      	bne.n	8005dd8 <xQueueGenericSend+0x174>
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dde:	b25b      	sxtb	r3, r3
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005de4:	d103      	bne.n	8005dee <xQueueGenericSend+0x18a>
 8005de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dee:	f002 fd3d 	bl	800886c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005df2:	1d3a      	adds	r2, r7, #4
 8005df4:	f107 0314 	add.w	r3, r7, #20
 8005df8:	4611      	mov	r1, r2
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f001 fa8c 	bl	8007318 <xTaskCheckForTimeOut>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d124      	bne.n	8005e50 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e08:	f000 fc50 	bl	80066ac <prvIsQueueFull>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d018      	beq.n	8005e44 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e14:	3310      	adds	r3, #16
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	4611      	mov	r1, r2
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f001 f9b0 	bl	8007180 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e22:	f000 fbdb 	bl	80065dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e26:	f000 ffe5 	bl	8006df4 <xTaskResumeAll>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f47f af7c 	bne.w	8005d2a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005e32:	4b0c      	ldr	r3, [pc, #48]	@ (8005e64 <xQueueGenericSend+0x200>)
 8005e34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	e772      	b.n	8005d2a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e46:	f000 fbc9 	bl	80065dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e4a:	f000 ffd3 	bl	8006df4 <xTaskResumeAll>
 8005e4e:	e76c      	b.n	8005d2a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e52:	f000 fbc3 	bl	80065dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e56:	f000 ffcd 	bl	8006df4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3738      	adds	r7, #56	@ 0x38
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b090      	sub	sp, #64	@ 0x40
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10b      	bne.n	8005e98 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e92:	bf00      	nop
 8005e94:	bf00      	nop
 8005e96:	e7fd      	b.n	8005e94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d103      	bne.n	8005ea6 <xQueueGenericSendFromISR+0x3e>
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <xQueueGenericSendFromISR+0x42>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e000      	b.n	8005eac <xQueueGenericSendFromISR+0x44>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10b      	bne.n	8005ec8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ec2:	bf00      	nop
 8005ec4:	bf00      	nop
 8005ec6:	e7fd      	b.n	8005ec4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d103      	bne.n	8005ed6 <xQueueGenericSendFromISR+0x6e>
 8005ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d101      	bne.n	8005eda <xQueueGenericSendFromISR+0x72>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <xQueueGenericSendFromISR+0x74>
 8005eda:	2300      	movs	r3, #0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10b      	bne.n	8005ef8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	623b      	str	r3, [r7, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
 8005ef6:	e7fd      	b.n	8005ef4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ef8:	f002 fd66 	bl	80089c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005efc:	f3ef 8211 	mrs	r2, BASEPRI
 8005f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	61fa      	str	r2, [r7, #28]
 8005f12:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f14:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f16:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d302      	bcc.n	8005f2a <xQueueGenericSendFromISR+0xc2>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d12f      	bne.n	8005f8a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	68b9      	ldr	r1, [r7, #8]
 8005f3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005f40:	f000 fabc 	bl	80064bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f44:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005f48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f4c:	d112      	bne.n	8005f74 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d016      	beq.n	8005f84 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f58:	3324      	adds	r3, #36	@ 0x24
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f001 f962 	bl	8007224 <xTaskRemoveFromEventList>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00e      	beq.n	8005f84 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00b      	beq.n	8005f84 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	e007      	b.n	8005f84 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005f78:	3301      	adds	r3, #1
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	b25a      	sxtb	r2, r3
 8005f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005f84:	2301      	movs	r3, #1
 8005f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005f88:	e001      	b.n	8005f8e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f90:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3740      	adds	r7, #64	@ 0x40
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08c      	sub	sp, #48	@ 0x30
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10b      	bne.n	8005fd6 <xQueueReceive+0x32>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	623b      	str	r3, [r7, #32]
}
 8005fd0:	bf00      	nop
 8005fd2:	bf00      	nop
 8005fd4:	e7fd      	b.n	8005fd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d103      	bne.n	8005fe4 <xQueueReceive+0x40>
 8005fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <xQueueReceive+0x44>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e000      	b.n	8005fea <xQueueReceive+0x46>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10b      	bne.n	8006006 <xQueueReceive+0x62>
	__asm volatile
 8005fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	61fb      	str	r3, [r7, #28]
}
 8006000:	bf00      	nop
 8006002:	bf00      	nop
 8006004:	e7fd      	b.n	8006002 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006006:	f001 fadd 	bl	80075c4 <xTaskGetSchedulerState>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d102      	bne.n	8006016 <xQueueReceive+0x72>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <xQueueReceive+0x76>
 8006016:	2301      	movs	r3, #1
 8006018:	e000      	b.n	800601c <xQueueReceive+0x78>
 800601a:	2300      	movs	r3, #0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10b      	bne.n	8006038 <xQueueReceive+0x94>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	61bb      	str	r3, [r7, #24]
}
 8006032:	bf00      	nop
 8006034:	bf00      	nop
 8006036:	e7fd      	b.n	8006034 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006038:	f002 fbe6 	bl	8008808 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800603c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006040:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006044:	2b00      	cmp	r3, #0
 8006046:	d01f      	beq.n	8006088 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006048:	68b9      	ldr	r1, [r7, #8]
 800604a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800604c:	f000 faa0 	bl	8006590 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006052:	1e5a      	subs	r2, r3, #1
 8006054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006056:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00f      	beq.n	8006080 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006062:	3310      	adds	r3, #16
 8006064:	4618      	mov	r0, r3
 8006066:	f001 f8dd 	bl	8007224 <xTaskRemoveFromEventList>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d007      	beq.n	8006080 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006070:	4b3c      	ldr	r3, [pc, #240]	@ (8006164 <xQueueReceive+0x1c0>)
 8006072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006080:	f002 fbf4 	bl	800886c <vPortExitCritical>
				return pdPASS;
 8006084:	2301      	movs	r3, #1
 8006086:	e069      	b.n	800615c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d103      	bne.n	8006096 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800608e:	f002 fbed 	bl	800886c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006092:	2300      	movs	r3, #0
 8006094:	e062      	b.n	800615c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800609c:	f107 0310 	add.w	r3, r7, #16
 80060a0:	4618      	mov	r0, r3
 80060a2:	f001 f923 	bl	80072ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060a6:	2301      	movs	r3, #1
 80060a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060aa:	f002 fbdf 	bl	800886c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060ae:	f000 fe93 	bl	8006dd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060b2:	f002 fba9 	bl	8008808 <vPortEnterCritical>
 80060b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060bc:	b25b      	sxtb	r3, r3
 80060be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060c2:	d103      	bne.n	80060cc <xQueueReceive+0x128>
 80060c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060d2:	b25b      	sxtb	r3, r3
 80060d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060d8:	d103      	bne.n	80060e2 <xQueueReceive+0x13e>
 80060da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060e2:	f002 fbc3 	bl	800886c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060e6:	1d3a      	adds	r2, r7, #4
 80060e8:	f107 0310 	add.w	r3, r7, #16
 80060ec:	4611      	mov	r1, r2
 80060ee:	4618      	mov	r0, r3
 80060f0:	f001 f912 	bl	8007318 <xTaskCheckForTimeOut>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d123      	bne.n	8006142 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060fc:	f000 fac0 	bl	8006680 <prvIsQueueEmpty>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d017      	beq.n	8006136 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006108:	3324      	adds	r3, #36	@ 0x24
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	4611      	mov	r1, r2
 800610e:	4618      	mov	r0, r3
 8006110:	f001 f836 	bl	8007180 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006114:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006116:	f000 fa61 	bl	80065dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800611a:	f000 fe6b 	bl	8006df4 <xTaskResumeAll>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d189      	bne.n	8006038 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006124:	4b0f      	ldr	r3, [pc, #60]	@ (8006164 <xQueueReceive+0x1c0>)
 8006126:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	e780      	b.n	8006038 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006136:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006138:	f000 fa50 	bl	80065dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800613c:	f000 fe5a 	bl	8006df4 <xTaskResumeAll>
 8006140:	e77a      	b.n	8006038 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006142:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006144:	f000 fa4a 	bl	80065dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006148:	f000 fe54 	bl	8006df4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800614c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800614e:	f000 fa97 	bl	8006680 <prvIsQueueEmpty>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	f43f af6f 	beq.w	8006038 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800615a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800615c:	4618      	mov	r0, r3
 800615e:	3730      	adds	r7, #48	@ 0x30
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	e000ed04 	.word	0xe000ed04

08006168 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08e      	sub	sp, #56	@ 0x38
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006172:	2300      	movs	r3, #0
 8006174:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800617a:	2300      	movs	r3, #0
 800617c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800617e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10b      	bne.n	800619c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	623b      	str	r3, [r7, #32]
}
 8006196:	bf00      	nop
 8006198:	bf00      	nop
 800619a:	e7fd      	b.n	8006198 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800619c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800619e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00b      	beq.n	80061bc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	61fb      	str	r3, [r7, #28]
}
 80061b6:	bf00      	nop
 80061b8:	bf00      	nop
 80061ba:	e7fd      	b.n	80061b8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061bc:	f001 fa02 	bl	80075c4 <xTaskGetSchedulerState>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d102      	bne.n	80061cc <xQueueSemaphoreTake+0x64>
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <xQueueSemaphoreTake+0x68>
 80061cc:	2301      	movs	r3, #1
 80061ce:	e000      	b.n	80061d2 <xQueueSemaphoreTake+0x6a>
 80061d0:	2300      	movs	r3, #0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10b      	bne.n	80061ee <xQueueSemaphoreTake+0x86>
	__asm volatile
 80061d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	61bb      	str	r3, [r7, #24]
}
 80061e8:	bf00      	nop
 80061ea:	bf00      	nop
 80061ec:	e7fd      	b.n	80061ea <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061ee:	f002 fb0b 	bl	8008808 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80061f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80061f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d024      	beq.n	8006248 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80061fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006200:	1e5a      	subs	r2, r3, #1
 8006202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006204:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d104      	bne.n	8006218 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800620e:	f001 fb53 	bl	80078b8 <pvTaskIncrementMutexHeldCount>
 8006212:	4602      	mov	r2, r0
 8006214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006216:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00f      	beq.n	8006240 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006222:	3310      	adds	r3, #16
 8006224:	4618      	mov	r0, r3
 8006226:	f000 fffd 	bl	8007224 <xTaskRemoveFromEventList>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d007      	beq.n	8006240 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006230:	4b54      	ldr	r3, [pc, #336]	@ (8006384 <xQueueSemaphoreTake+0x21c>)
 8006232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006240:	f002 fb14 	bl	800886c <vPortExitCritical>
				return pdPASS;
 8006244:	2301      	movs	r3, #1
 8006246:	e098      	b.n	800637a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d112      	bne.n	8006274 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800624e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00b      	beq.n	800626c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	617b      	str	r3, [r7, #20]
}
 8006266:	bf00      	nop
 8006268:	bf00      	nop
 800626a:	e7fd      	b.n	8006268 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800626c:	f002 fafe 	bl	800886c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006270:	2300      	movs	r3, #0
 8006272:	e082      	b.n	800637a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006276:	2b00      	cmp	r3, #0
 8006278:	d106      	bne.n	8006288 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800627a:	f107 030c 	add.w	r3, r7, #12
 800627e:	4618      	mov	r0, r3
 8006280:	f001 f834 	bl	80072ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006284:	2301      	movs	r3, #1
 8006286:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006288:	f002 faf0 	bl	800886c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800628c:	f000 fda4 	bl	8006dd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006290:	f002 faba 	bl	8008808 <vPortEnterCritical>
 8006294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006296:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800629a:	b25b      	sxtb	r3, r3
 800629c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062a0:	d103      	bne.n	80062aa <xQueueSemaphoreTake+0x142>
 80062a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062b0:	b25b      	sxtb	r3, r3
 80062b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062b6:	d103      	bne.n	80062c0 <xQueueSemaphoreTake+0x158>
 80062b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062c0:	f002 fad4 	bl	800886c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062c4:	463a      	mov	r2, r7
 80062c6:	f107 030c 	add.w	r3, r7, #12
 80062ca:	4611      	mov	r1, r2
 80062cc:	4618      	mov	r0, r3
 80062ce:	f001 f823 	bl	8007318 <xTaskCheckForTimeOut>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d132      	bne.n	800633e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062da:	f000 f9d1 	bl	8006680 <prvIsQueueEmpty>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d026      	beq.n	8006332 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d109      	bne.n	8006300 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80062ec:	f002 fa8c 	bl	8008808 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f001 f983 	bl	8007600 <xTaskPriorityInherit>
 80062fa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80062fc:	f002 fab6 	bl	800886c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006302:	3324      	adds	r3, #36	@ 0x24
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	4611      	mov	r1, r2
 8006308:	4618      	mov	r0, r3
 800630a:	f000 ff39 	bl	8007180 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800630e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006310:	f000 f964 	bl	80065dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006314:	f000 fd6e 	bl	8006df4 <xTaskResumeAll>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	f47f af67 	bne.w	80061ee <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006320:	4b18      	ldr	r3, [pc, #96]	@ (8006384 <xQueueSemaphoreTake+0x21c>)
 8006322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	e75d      	b.n	80061ee <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006332:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006334:	f000 f952 	bl	80065dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006338:	f000 fd5c 	bl	8006df4 <xTaskResumeAll>
 800633c:	e757      	b.n	80061ee <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800633e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006340:	f000 f94c 	bl	80065dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006344:	f000 fd56 	bl	8006df4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006348:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800634a:	f000 f999 	bl	8006680 <prvIsQueueEmpty>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	f43f af4c 	beq.w	80061ee <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00d      	beq.n	8006378 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800635c:	f002 fa54 	bl	8008808 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006360:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006362:	f000 f893 	bl	800648c <prvGetDisinheritPriorityAfterTimeout>
 8006366:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800636e:	4618      	mov	r0, r3
 8006370:	f001 fa1e 	bl	80077b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006374:	f002 fa7a 	bl	800886c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006378:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800637a:	4618      	mov	r0, r3
 800637c:	3738      	adds	r7, #56	@ 0x38
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	e000ed04 	.word	0xe000ed04

08006388 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b08e      	sub	sp, #56	@ 0x38
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10b      	bne.n	80063b6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	623b      	str	r3, [r7, #32]
}
 80063b0:	bf00      	nop
 80063b2:	bf00      	nop
 80063b4:	e7fd      	b.n	80063b2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d103      	bne.n	80063c4 <xQueueReceiveFromISR+0x3c>
 80063bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <xQueueReceiveFromISR+0x40>
 80063c4:	2301      	movs	r3, #1
 80063c6:	e000      	b.n	80063ca <xQueueReceiveFromISR+0x42>
 80063c8:	2300      	movs	r3, #0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10b      	bne.n	80063e6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	61fb      	str	r3, [r7, #28]
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	e7fd      	b.n	80063e2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063e6:	f002 faef 	bl	80089c8 <vPortValidateInterruptPriority>
	__asm volatile
 80063ea:	f3ef 8211 	mrs	r2, BASEPRI
 80063ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	61ba      	str	r2, [r7, #24]
 8006400:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006402:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006404:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800640c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640e:	2b00      	cmp	r3, #0
 8006410:	d02f      	beq.n	8006472 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006414:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006418:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006420:	f000 f8b6 	bl	8006590 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006426:	1e5a      	subs	r2, r3, #1
 8006428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800642c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006430:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006434:	d112      	bne.n	800645c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d016      	beq.n	800646c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800643e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006440:	3310      	adds	r3, #16
 8006442:	4618      	mov	r0, r3
 8006444:	f000 feee 	bl	8007224 <xTaskRemoveFromEventList>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00e      	beq.n	800646c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00b      	beq.n	800646c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	e007      	b.n	800646c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800645c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006460:	3301      	adds	r3, #1
 8006462:	b2db      	uxtb	r3, r3
 8006464:	b25a      	sxtb	r2, r3
 8006466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800646c:	2301      	movs	r3, #1
 800646e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006470:	e001      	b.n	8006476 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006472:	2300      	movs	r3, #0
 8006474:	637b      	str	r3, [r7, #52]	@ 0x34
 8006476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006478:	613b      	str	r3, [r7, #16]
	__asm volatile
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f383 8811 	msr	BASEPRI, r3
}
 8006480:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006484:	4618      	mov	r0, r3
 8006486:	3738      	adds	r7, #56	@ 0x38
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006498:	2b00      	cmp	r3, #0
 800649a:	d006      	beq.n	80064aa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	e001      	b.n	80064ae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80064aa:	2300      	movs	r3, #0
 80064ac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80064ae:	68fb      	ldr	r3, [r7, #12]
	}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064c8:	2300      	movs	r3, #0
 80064ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10d      	bne.n	80064f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d14d      	bne.n	800657e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f001 f8f2 	bl	80076d0 <xTaskPriorityDisinherit>
 80064ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	609a      	str	r2, [r3, #8]
 80064f4:	e043      	b.n	800657e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d119      	bne.n	8006530 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6858      	ldr	r0, [r3, #4]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006504:	461a      	mov	r2, r3
 8006506:	68b9      	ldr	r1, [r7, #8]
 8006508:	f002 fcba 	bl	8008e80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006514:	441a      	add	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	429a      	cmp	r2, r3
 8006524:	d32b      	bcc.n	800657e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	605a      	str	r2, [r3, #4]
 800652e:	e026      	b.n	800657e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	68d8      	ldr	r0, [r3, #12]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006538:	461a      	mov	r2, r3
 800653a:	68b9      	ldr	r1, [r7, #8]
 800653c:	f002 fca0 	bl	8008e80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	68da      	ldr	r2, [r3, #12]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006548:	425b      	negs	r3, r3
 800654a:	441a      	add	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	429a      	cmp	r2, r3
 800655a:	d207      	bcs.n	800656c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	689a      	ldr	r2, [r3, #8]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006564:	425b      	negs	r3, r3
 8006566:	441a      	add	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b02      	cmp	r3, #2
 8006570:	d105      	bne.n	800657e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d002      	beq.n	800657e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	3b01      	subs	r3, #1
 800657c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006586:	697b      	ldr	r3, [r7, #20]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d018      	beq.n	80065d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065aa:	441a      	add	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68da      	ldr	r2, [r3, #12]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d303      	bcc.n	80065c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68d9      	ldr	r1, [r3, #12]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065cc:	461a      	mov	r2, r3
 80065ce:	6838      	ldr	r0, [r7, #0]
 80065d0:	f002 fc56 	bl	8008e80 <memcpy>
	}
}
 80065d4:	bf00      	nop
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065e4:	f002 f910 	bl	8008808 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065f0:	e011      	b.n	8006616 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d012      	beq.n	8006620 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3324      	adds	r3, #36	@ 0x24
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fe10 	bl	8007224 <xTaskRemoveFromEventList>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800660a:	f000 fee9 	bl	80073e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	3b01      	subs	r3, #1
 8006612:	b2db      	uxtb	r3, r3
 8006614:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800661a:	2b00      	cmp	r3, #0
 800661c:	dce9      	bgt.n	80065f2 <prvUnlockQueue+0x16>
 800661e:	e000      	b.n	8006622 <prvUnlockQueue+0x46>
					break;
 8006620:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	22ff      	movs	r2, #255	@ 0xff
 8006626:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800662a:	f002 f91f 	bl	800886c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800662e:	f002 f8eb 	bl	8008808 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006638:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800663a:	e011      	b.n	8006660 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d012      	beq.n	800666a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3310      	adds	r3, #16
 8006648:	4618      	mov	r0, r3
 800664a:	f000 fdeb 	bl	8007224 <xTaskRemoveFromEventList>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006654:	f000 fec4 	bl	80073e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006658:	7bbb      	ldrb	r3, [r7, #14]
 800665a:	3b01      	subs	r3, #1
 800665c:	b2db      	uxtb	r3, r3
 800665e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006660:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006664:	2b00      	cmp	r3, #0
 8006666:	dce9      	bgt.n	800663c <prvUnlockQueue+0x60>
 8006668:	e000      	b.n	800666c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800666a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	22ff      	movs	r2, #255	@ 0xff
 8006670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006674:	f002 f8fa 	bl	800886c <vPortExitCritical>
}
 8006678:	bf00      	nop
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006688:	f002 f8be 	bl	8008808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006690:	2b00      	cmp	r3, #0
 8006692:	d102      	bne.n	800669a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006694:	2301      	movs	r3, #1
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	e001      	b.n	800669e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800669a:	2300      	movs	r3, #0
 800669c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800669e:	f002 f8e5 	bl	800886c <vPortExitCritical>

	return xReturn;
 80066a2:	68fb      	ldr	r3, [r7, #12]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066b4:	f002 f8a8 	bl	8008808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d102      	bne.n	80066ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80066c4:	2301      	movs	r3, #1
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	e001      	b.n	80066ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066ca:	2300      	movs	r3, #0
 80066cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066ce:	f002 f8cd 	bl	800886c <vPortExitCritical>

	return xReturn;
 80066d2:	68fb      	ldr	r3, [r7, #12]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3710      	adds	r7, #16
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	e014      	b.n	8006716 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80066ec:	4a0f      	ldr	r2, [pc, #60]	@ (800672c <vQueueAddToRegistry+0x50>)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10b      	bne.n	8006710 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80066f8:	490c      	ldr	r1, [pc, #48]	@ (800672c <vQueueAddToRegistry+0x50>)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006702:	4a0a      	ldr	r2, [pc, #40]	@ (800672c <vQueueAddToRegistry+0x50>)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	00db      	lsls	r3, r3, #3
 8006708:	4413      	add	r3, r2
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800670e:	e006      	b.n	800671e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	3301      	adds	r3, #1
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b07      	cmp	r3, #7
 800671a:	d9e7      	bls.n	80066ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800671c:	bf00      	nop
 800671e:	bf00      	nop
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	20000e54 	.word	0x20000e54

08006730 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006740:	f002 f862 	bl	8008808 <vPortEnterCritical>
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800674a:	b25b      	sxtb	r3, r3
 800674c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006750:	d103      	bne.n	800675a <vQueueWaitForMessageRestricted+0x2a>
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006760:	b25b      	sxtb	r3, r3
 8006762:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006766:	d103      	bne.n	8006770 <vQueueWaitForMessageRestricted+0x40>
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006770:	f002 f87c 	bl	800886c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006778:	2b00      	cmp	r3, #0
 800677a:	d106      	bne.n	800678a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	3324      	adds	r3, #36	@ 0x24
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	68b9      	ldr	r1, [r7, #8]
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fd21 	bl	80071cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800678a:	6978      	ldr	r0, [r7, #20]
 800678c:	f7ff ff26 	bl	80065dc <prvUnlockQueue>
	}
 8006790:	bf00      	nop
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006798:	b580      	push	{r7, lr}
 800679a:	b08e      	sub	sp, #56	@ 0x38
 800679c:	af04      	add	r7, sp, #16
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10b      	bne.n	80067c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	623b      	str	r3, [r7, #32]
}
 80067be:	bf00      	nop
 80067c0:	bf00      	nop
 80067c2:	e7fd      	b.n	80067c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80067c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10b      	bne.n	80067e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	61fb      	str	r3, [r7, #28]
}
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
 80067e0:	e7fd      	b.n	80067de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80067e2:	235c      	movs	r3, #92	@ 0x5c
 80067e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80067ea:	d00b      	beq.n	8006804 <xTaskCreateStatic+0x6c>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	61bb      	str	r3, [r7, #24]
}
 80067fe:	bf00      	nop
 8006800:	bf00      	nop
 8006802:	e7fd      	b.n	8006800 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006804:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01e      	beq.n	800684a <xTaskCreateStatic+0xb2>
 800680c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800680e:	2b00      	cmp	r3, #0
 8006810:	d01b      	beq.n	800684a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006814:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006818:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800681a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800681c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681e:	2202      	movs	r2, #2
 8006820:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006824:	2300      	movs	r3, #0
 8006826:	9303      	str	r3, [sp, #12]
 8006828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682a:	9302      	str	r3, [sp, #8]
 800682c:	f107 0314 	add.w	r3, r7, #20
 8006830:	9301      	str	r3, [sp, #4]
 8006832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	68b9      	ldr	r1, [r7, #8]
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f850 	bl	80068e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006842:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006844:	f000 f8de 	bl	8006a04 <prvAddNewTaskToReadyList>
 8006848:	e001      	b.n	800684e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800684a:	2300      	movs	r3, #0
 800684c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800684e:	697b      	ldr	r3, [r7, #20]
	}
 8006850:	4618      	mov	r0, r3
 8006852:	3728      	adds	r7, #40	@ 0x28
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006858:	b580      	push	{r7, lr}
 800685a:	b08c      	sub	sp, #48	@ 0x30
 800685c:	af04      	add	r7, sp, #16
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	603b      	str	r3, [r7, #0]
 8006864:	4613      	mov	r3, r2
 8006866:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4618      	mov	r0, r3
 800686e:	f002 f8ed 	bl	8008a4c <pvPortMalloc>
 8006872:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00e      	beq.n	8006898 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800687a:	205c      	movs	r0, #92	@ 0x5c
 800687c:	f002 f8e6 	bl	8008a4c <pvPortMalloc>
 8006880:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d003      	beq.n	8006890 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	631a      	str	r2, [r3, #48]	@ 0x30
 800688e:	e005      	b.n	800689c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006890:	6978      	ldr	r0, [r7, #20]
 8006892:	f002 f9a9 	bl	8008be8 <vPortFree>
 8006896:	e001      	b.n	800689c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006898:	2300      	movs	r3, #0
 800689a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d017      	beq.n	80068d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068aa:	88fa      	ldrh	r2, [r7, #6]
 80068ac:	2300      	movs	r3, #0
 80068ae:	9303      	str	r3, [sp, #12]
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	9302      	str	r3, [sp, #8]
 80068b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b6:	9301      	str	r3, [sp, #4]
 80068b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	68b9      	ldr	r1, [r7, #8]
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 f80e 	bl	80068e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068c6:	69f8      	ldr	r0, [r7, #28]
 80068c8:	f000 f89c 	bl	8006a04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068cc:	2301      	movs	r3, #1
 80068ce:	61bb      	str	r3, [r7, #24]
 80068d0:	e002      	b.n	80068d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80068d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80068d8:	69bb      	ldr	r3, [r7, #24]
	}
 80068da:	4618      	mov	r0, r3
 80068dc:	3720      	adds	r7, #32
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b088      	sub	sp, #32
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	60f8      	str	r0, [r7, #12]
 80068ea:	60b9      	str	r1, [r7, #8]
 80068ec:	607a      	str	r2, [r7, #4]
 80068ee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80068f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	461a      	mov	r2, r3
 80068fa:	21a5      	movs	r1, #165	@ 0xa5
 80068fc:	f002 fa94 	bl	8008e28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006902:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800690a:	3b01      	subs	r3, #1
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	f023 0307 	bic.w	r3, r3, #7
 8006918:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	f003 0307 	and.w	r3, r3, #7
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00b      	beq.n	800693c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	617b      	str	r3, [r7, #20]
}
 8006936:	bf00      	nop
 8006938:	bf00      	nop
 800693a:	e7fd      	b.n	8006938 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d01f      	beq.n	8006982 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006942:	2300      	movs	r3, #0
 8006944:	61fb      	str	r3, [r7, #28]
 8006946:	e012      	b.n	800696e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	4413      	add	r3, r2
 800694e:	7819      	ldrb	r1, [r3, #0]
 8006950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	4413      	add	r3, r2
 8006956:	3334      	adds	r3, #52	@ 0x34
 8006958:	460a      	mov	r2, r1
 800695a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	4413      	add	r3, r2
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d006      	beq.n	8006976 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	3301      	adds	r3, #1
 800696c:	61fb      	str	r3, [r7, #28]
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	2b0f      	cmp	r3, #15
 8006972:	d9e9      	bls.n	8006948 <prvInitialiseNewTask+0x66>
 8006974:	e000      	b.n	8006978 <prvInitialiseNewTask+0x96>
			{
				break;
 8006976:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006980:	e003      	b.n	800698a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800698a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698c:	2b37      	cmp	r3, #55	@ 0x37
 800698e:	d901      	bls.n	8006994 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006990:	2337      	movs	r3, #55	@ 0x37
 8006992:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006996:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006998:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800699a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800699e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80069a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a2:	2200      	movs	r2, #0
 80069a4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a8:	3304      	adds	r3, #4
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fe fec8 	bl	8005740 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b2:	3318      	adds	r3, #24
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fe fec3 	bl	8005740 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80069c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d2:	2200      	movs	r2, #0
 80069d4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	68f9      	ldr	r1, [r7, #12]
 80069e2:	69b8      	ldr	r0, [r7, #24]
 80069e4:	f001 fdde 	bl	80085a4 <pxPortInitialiseStack>
 80069e8:	4602      	mov	r2, r0
 80069ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80069ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80069f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069fa:	bf00      	nop
 80069fc:	3720      	adds	r7, #32
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
	...

08006a04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a0c:	f001 fefc 	bl	8008808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a10:	4b2d      	ldr	r3, [pc, #180]	@ (8006ac8 <prvAddNewTaskToReadyList+0xc4>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3301      	adds	r3, #1
 8006a16:	4a2c      	ldr	r2, [pc, #176]	@ (8006ac8 <prvAddNewTaskToReadyList+0xc4>)
 8006a18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a1a:	4b2c      	ldr	r3, [pc, #176]	@ (8006acc <prvAddNewTaskToReadyList+0xc8>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d109      	bne.n	8006a36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a22:	4a2a      	ldr	r2, [pc, #168]	@ (8006acc <prvAddNewTaskToReadyList+0xc8>)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a28:	4b27      	ldr	r3, [pc, #156]	@ (8006ac8 <prvAddNewTaskToReadyList+0xc4>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d110      	bne.n	8006a52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a30:	f000 fcfa 	bl	8007428 <prvInitialiseTaskLists>
 8006a34:	e00d      	b.n	8006a52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a36:	4b26      	ldr	r3, [pc, #152]	@ (8006ad0 <prvAddNewTaskToReadyList+0xcc>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d109      	bne.n	8006a52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a3e:	4b23      	ldr	r3, [pc, #140]	@ (8006acc <prvAddNewTaskToReadyList+0xc8>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d802      	bhi.n	8006a52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8006acc <prvAddNewTaskToReadyList+0xc8>)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a52:	4b20      	ldr	r3, [pc, #128]	@ (8006ad4 <prvAddNewTaskToReadyList+0xd0>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3301      	adds	r3, #1
 8006a58:	4a1e      	ldr	r2, [pc, #120]	@ (8006ad4 <prvAddNewTaskToReadyList+0xd0>)
 8006a5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ad4 <prvAddNewTaskToReadyList+0xd0>)
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a68:	4b1b      	ldr	r3, [pc, #108]	@ (8006ad8 <prvAddNewTaskToReadyList+0xd4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d903      	bls.n	8006a78 <prvAddNewTaskToReadyList+0x74>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a74:	4a18      	ldr	r2, [pc, #96]	@ (8006ad8 <prvAddNewTaskToReadyList+0xd4>)
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4a15      	ldr	r2, [pc, #84]	@ (8006adc <prvAddNewTaskToReadyList+0xd8>)
 8006a86:	441a      	add	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	4610      	mov	r0, r2
 8006a90:	f7fe fe63 	bl	800575a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a94:	f001 feea 	bl	800886c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a98:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad0 <prvAddNewTaskToReadyList+0xcc>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00e      	beq.n	8006abe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8006acc <prvAddNewTaskToReadyList+0xc8>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d207      	bcs.n	8006abe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006aae:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae0 <prvAddNewTaskToReadyList+0xdc>)
 8006ab0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006abe:	bf00      	nop
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20001368 	.word	0x20001368
 8006acc:	20000e94 	.word	0x20000e94
 8006ad0:	20001374 	.word	0x20001374
 8006ad4:	20001384 	.word	0x20001384
 8006ad8:	20001370 	.word	0x20001370
 8006adc:	20000e98 	.word	0x20000e98
 8006ae0:	e000ed04 	.word	0xe000ed04

08006ae4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006aec:	f001 fe8c 	bl	8008808 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d102      	bne.n	8006afc <vTaskDelete+0x18>
 8006af6:	4b2d      	ldr	r3, [pc, #180]	@ (8006bac <vTaskDelete+0xc8>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	e000      	b.n	8006afe <vTaskDelete+0x1a>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	3304      	adds	r3, #4
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7fe fe85 	bl	8005814 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d004      	beq.n	8006b1c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	3318      	adds	r3, #24
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fe fe7c 	bl	8005814 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006b1c:	4b24      	ldr	r3, [pc, #144]	@ (8006bb0 <vTaskDelete+0xcc>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3301      	adds	r3, #1
 8006b22:	4a23      	ldr	r2, [pc, #140]	@ (8006bb0 <vTaskDelete+0xcc>)
 8006b24:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006b26:	4b21      	ldr	r3, [pc, #132]	@ (8006bac <vTaskDelete+0xc8>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d10b      	bne.n	8006b48 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3304      	adds	r3, #4
 8006b34:	4619      	mov	r1, r3
 8006b36:	481f      	ldr	r0, [pc, #124]	@ (8006bb4 <vTaskDelete+0xd0>)
 8006b38:	f7fe fe0f 	bl	800575a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8006bb8 <vTaskDelete+0xd4>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3301      	adds	r3, #1
 8006b42:	4a1d      	ldr	r2, [pc, #116]	@ (8006bb8 <vTaskDelete+0xd4>)
 8006b44:	6013      	str	r3, [r2, #0]
 8006b46:	e009      	b.n	8006b5c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006b48:	4b1c      	ldr	r3, [pc, #112]	@ (8006bbc <vTaskDelete+0xd8>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8006bbc <vTaskDelete+0xd8>)
 8006b50:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 fcd6 	bl	8007504 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006b58:	f000 fd04 	bl	8007564 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8006b5c:	f001 fe86 	bl	800886c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006b60:	4b17      	ldr	r3, [pc, #92]	@ (8006bc0 <vTaskDelete+0xdc>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d01c      	beq.n	8006ba2 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8006b68:	4b10      	ldr	r3, [pc, #64]	@ (8006bac <vTaskDelete+0xc8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d117      	bne.n	8006ba2 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006b72:	4b14      	ldr	r3, [pc, #80]	@ (8006bc4 <vTaskDelete+0xe0>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00b      	beq.n	8006b92 <vTaskDelete+0xae>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	60bb      	str	r3, [r7, #8]
}
 8006b8c:	bf00      	nop
 8006b8e:	bf00      	nop
 8006b90:	e7fd      	b.n	8006b8e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8006b92:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc8 <vTaskDelete+0xe4>)
 8006b94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ba2:	bf00      	nop
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20000e94 	.word	0x20000e94
 8006bb0:	20001384 	.word	0x20001384
 8006bb4:	2000133c 	.word	0x2000133c
 8006bb8:	20001350 	.word	0x20001350
 8006bbc:	20001368 	.word	0x20001368
 8006bc0:	20001374 	.word	0x20001374
 8006bc4:	20001390 	.word	0x20001390
 8006bc8:	e000ed04 	.word	0xe000ed04

08006bcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d018      	beq.n	8006c10 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006bde:	4b14      	ldr	r3, [pc, #80]	@ (8006c30 <vTaskDelay+0x64>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00b      	beq.n	8006bfe <vTaskDelay+0x32>
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	60bb      	str	r3, [r7, #8]
}
 8006bf8:	bf00      	nop
 8006bfa:	bf00      	nop
 8006bfc:	e7fd      	b.n	8006bfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006bfe:	f000 f8eb 	bl	8006dd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c02:	2100      	movs	r1, #0
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 f85f 	bl	8007cc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c0a:	f000 f8f3 	bl	8006df4 <xTaskResumeAll>
 8006c0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d107      	bne.n	8006c26 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006c16:	4b07      	ldr	r3, [pc, #28]	@ (8006c34 <vTaskDelay+0x68>)
 8006c18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c26:	bf00      	nop
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20001390 	.word	0x20001390
 8006c34:	e000ed04 	.word	0xe000ed04

08006c38 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b088      	sub	sp, #32
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10b      	bne.n	8006c62 <eTaskGetState+0x2a>
	__asm volatile
 8006c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	60bb      	str	r3, [r7, #8]
}
 8006c5c:	bf00      	nop
 8006c5e:	bf00      	nop
 8006c60:	e7fd      	b.n	8006c5e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8006c62:	4b24      	ldr	r3, [pc, #144]	@ (8006cf4 <eTaskGetState+0xbc>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d102      	bne.n	8006c72 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	77fb      	strb	r3, [r7, #31]
 8006c70:	e03a      	b.n	8006ce8 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8006c72:	f001 fdc9 	bl	8008808 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8006c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8006cf8 <eTaskGetState+0xc0>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8006c82:	4b1e      	ldr	r3, [pc, #120]	@ (8006cfc <eTaskGetState+0xc4>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8006c88:	f001 fdf0 	bl	800886c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d003      	beq.n	8006c9c <eTaskGetState+0x64>
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d102      	bne.n	8006ca2 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	77fb      	strb	r3, [r7, #31]
 8006ca0:	e022      	b.n	8006ce8 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	4a16      	ldr	r2, [pc, #88]	@ (8006d00 <eTaskGetState+0xc8>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d112      	bne.n	8006cd0 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10b      	bne.n	8006cca <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d102      	bne.n	8006cc4 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	77fb      	strb	r3, [r7, #31]
 8006cc2:	e011      	b.n	8006ce8 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	77fb      	strb	r3, [r7, #31]
 8006cc8:	e00e      	b.n	8006ce8 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8006cca:	2302      	movs	r3, #2
 8006ccc:	77fb      	strb	r3, [r7, #31]
 8006cce:	e00b      	b.n	8006ce8 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8006d04 <eTaskGetState+0xcc>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d002      	beq.n	8006cde <eTaskGetState+0xa6>
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d102      	bne.n	8006ce4 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8006cde:	2304      	movs	r3, #4
 8006ce0:	77fb      	strb	r3, [r7, #31]
 8006ce2:	e001      	b.n	8006ce8 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8006ce8:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006cea:	4618      	mov	r0, r3
 8006cec:	3720      	adds	r7, #32
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20000e94 	.word	0x20000e94
 8006cf8:	20001320 	.word	0x20001320
 8006cfc:	20001324 	.word	0x20001324
 8006d00:	20001354 	.word	0x20001354
 8006d04:	2000133c 	.word	0x2000133c

08006d08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b08a      	sub	sp, #40	@ 0x28
 8006d0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d16:	463a      	mov	r2, r7
 8006d18:	1d39      	adds	r1, r7, #4
 8006d1a:	f107 0308 	add.w	r3, r7, #8
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fe fcba 	bl	8005698 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	9202      	str	r2, [sp, #8]
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	2300      	movs	r3, #0
 8006d34:	460a      	mov	r2, r1
 8006d36:	4922      	ldr	r1, [pc, #136]	@ (8006dc0 <vTaskStartScheduler+0xb8>)
 8006d38:	4822      	ldr	r0, [pc, #136]	@ (8006dc4 <vTaskStartScheduler+0xbc>)
 8006d3a:	f7ff fd2d 	bl	8006798 <xTaskCreateStatic>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	4a21      	ldr	r2, [pc, #132]	@ (8006dc8 <vTaskStartScheduler+0xc0>)
 8006d42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d44:	4b20      	ldr	r3, [pc, #128]	@ (8006dc8 <vTaskStartScheduler+0xc0>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	617b      	str	r3, [r7, #20]
 8006d50:	e001      	b.n	8006d56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d102      	bne.n	8006d62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d5c:	f001 f808 	bl	8007d70 <xTimerCreateTimerTask>
 8006d60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d116      	bne.n	8006d96 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	613b      	str	r3, [r7, #16]
}
 8006d7a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d7c:	4b13      	ldr	r3, [pc, #76]	@ (8006dcc <vTaskStartScheduler+0xc4>)
 8006d7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d84:	4b12      	ldr	r3, [pc, #72]	@ (8006dd0 <vTaskStartScheduler+0xc8>)
 8006d86:	2201      	movs	r2, #1
 8006d88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d8a:	4b12      	ldr	r3, [pc, #72]	@ (8006dd4 <vTaskStartScheduler+0xcc>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d90:	f001 fc96 	bl	80086c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d94:	e00f      	b.n	8006db6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d9c:	d10b      	bne.n	8006db6 <vTaskStartScheduler+0xae>
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	60fb      	str	r3, [r7, #12]
}
 8006db0:	bf00      	nop
 8006db2:	bf00      	nop
 8006db4:	e7fd      	b.n	8006db2 <vTaskStartScheduler+0xaa>
}
 8006db6:	bf00      	nop
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	08008ed8 	.word	0x08008ed8
 8006dc4:	080073f9 	.word	0x080073f9
 8006dc8:	2000138c 	.word	0x2000138c
 8006dcc:	20001388 	.word	0x20001388
 8006dd0:	20001374 	.word	0x20001374
 8006dd4:	2000136c 	.word	0x2000136c

08006dd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006dd8:	b480      	push	{r7}
 8006dda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ddc:	4b04      	ldr	r3, [pc, #16]	@ (8006df0 <vTaskSuspendAll+0x18>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3301      	adds	r3, #1
 8006de2:	4a03      	ldr	r2, [pc, #12]	@ (8006df0 <vTaskSuspendAll+0x18>)
 8006de4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006de6:	bf00      	nop
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	20001390 	.word	0x20001390

08006df4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e02:	4b42      	ldr	r3, [pc, #264]	@ (8006f0c <xTaskResumeAll+0x118>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10b      	bne.n	8006e22 <xTaskResumeAll+0x2e>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	603b      	str	r3, [r7, #0]
}
 8006e1c:	bf00      	nop
 8006e1e:	bf00      	nop
 8006e20:	e7fd      	b.n	8006e1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e22:	f001 fcf1 	bl	8008808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e26:	4b39      	ldr	r3, [pc, #228]	@ (8006f0c <xTaskResumeAll+0x118>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	4a37      	ldr	r2, [pc, #220]	@ (8006f0c <xTaskResumeAll+0x118>)
 8006e2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e30:	4b36      	ldr	r3, [pc, #216]	@ (8006f0c <xTaskResumeAll+0x118>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d162      	bne.n	8006efe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e38:	4b35      	ldr	r3, [pc, #212]	@ (8006f10 <xTaskResumeAll+0x11c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d05e      	beq.n	8006efe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e40:	e02f      	b.n	8006ea2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e42:	4b34      	ldr	r3, [pc, #208]	@ (8006f14 <xTaskResumeAll+0x120>)
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3318      	adds	r3, #24
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fe fce0 	bl	8005814 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3304      	adds	r3, #4
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fe fcdb 	bl	8005814 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e62:	4b2d      	ldr	r3, [pc, #180]	@ (8006f18 <xTaskResumeAll+0x124>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d903      	bls.n	8006e72 <xTaskResumeAll+0x7e>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6e:	4a2a      	ldr	r2, [pc, #168]	@ (8006f18 <xTaskResumeAll+0x124>)
 8006e70:	6013      	str	r3, [r2, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e76:	4613      	mov	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4a27      	ldr	r2, [pc, #156]	@ (8006f1c <xTaskResumeAll+0x128>)
 8006e80:	441a      	add	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3304      	adds	r3, #4
 8006e86:	4619      	mov	r1, r3
 8006e88:	4610      	mov	r0, r2
 8006e8a:	f7fe fc66 	bl	800575a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e92:	4b23      	ldr	r3, [pc, #140]	@ (8006f20 <xTaskResumeAll+0x12c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d302      	bcc.n	8006ea2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006e9c:	4b21      	ldr	r3, [pc, #132]	@ (8006f24 <xTaskResumeAll+0x130>)
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8006f14 <xTaskResumeAll+0x120>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1cb      	bne.n	8006e42 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d001      	beq.n	8006eb4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006eb0:	f000 fb58 	bl	8007564 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8006f28 <xTaskResumeAll+0x134>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d010      	beq.n	8006ee2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ec0:	f000 f846 	bl	8006f50 <xTaskIncrementTick>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d002      	beq.n	8006ed0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006eca:	4b16      	ldr	r3, [pc, #88]	@ (8006f24 <xTaskResumeAll+0x130>)
 8006ecc:	2201      	movs	r2, #1
 8006ece:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1f1      	bne.n	8006ec0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006edc:	4b12      	ldr	r3, [pc, #72]	@ (8006f28 <xTaskResumeAll+0x134>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ee2:	4b10      	ldr	r3, [pc, #64]	@ (8006f24 <xTaskResumeAll+0x130>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d009      	beq.n	8006efe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006eea:	2301      	movs	r3, #1
 8006eec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006eee:	4b0f      	ldr	r3, [pc, #60]	@ (8006f2c <xTaskResumeAll+0x138>)
 8006ef0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006efe:	f001 fcb5 	bl	800886c <vPortExitCritical>

	return xAlreadyYielded;
 8006f02:	68bb      	ldr	r3, [r7, #8]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	20001390 	.word	0x20001390
 8006f10:	20001368 	.word	0x20001368
 8006f14:	20001328 	.word	0x20001328
 8006f18:	20001370 	.word	0x20001370
 8006f1c:	20000e98 	.word	0x20000e98
 8006f20:	20000e94 	.word	0x20000e94
 8006f24:	2000137c 	.word	0x2000137c
 8006f28:	20001378 	.word	0x20001378
 8006f2c:	e000ed04 	.word	0xe000ed04

08006f30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f36:	4b05      	ldr	r3, [pc, #20]	@ (8006f4c <xTaskGetTickCount+0x1c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f3c:	687b      	ldr	r3, [r7, #4]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	2000136c 	.word	0x2000136c

08006f50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f56:	2300      	movs	r3, #0
 8006f58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f5a:	4b4f      	ldr	r3, [pc, #316]	@ (8007098 <xTaskIncrementTick+0x148>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f040 8090 	bne.w	8007084 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f64:	4b4d      	ldr	r3, [pc, #308]	@ (800709c <xTaskIncrementTick+0x14c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f6c:	4a4b      	ldr	r2, [pc, #300]	@ (800709c <xTaskIncrementTick+0x14c>)
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d121      	bne.n	8006fbc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f78:	4b49      	ldr	r3, [pc, #292]	@ (80070a0 <xTaskIncrementTick+0x150>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00b      	beq.n	8006f9a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	603b      	str	r3, [r7, #0]
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop
 8006f98:	e7fd      	b.n	8006f96 <xTaskIncrementTick+0x46>
 8006f9a:	4b41      	ldr	r3, [pc, #260]	@ (80070a0 <xTaskIncrementTick+0x150>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	4b40      	ldr	r3, [pc, #256]	@ (80070a4 <xTaskIncrementTick+0x154>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a3e      	ldr	r2, [pc, #248]	@ (80070a0 <xTaskIncrementTick+0x150>)
 8006fa6:	6013      	str	r3, [r2, #0]
 8006fa8:	4a3e      	ldr	r2, [pc, #248]	@ (80070a4 <xTaskIncrementTick+0x154>)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	4b3e      	ldr	r3, [pc, #248]	@ (80070a8 <xTaskIncrementTick+0x158>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	4a3c      	ldr	r2, [pc, #240]	@ (80070a8 <xTaskIncrementTick+0x158>)
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	f000 fad4 	bl	8007564 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80070ac <xTaskIncrementTick+0x15c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d349      	bcc.n	800705a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fc6:	4b36      	ldr	r3, [pc, #216]	@ (80070a0 <xTaskIncrementTick+0x150>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d104      	bne.n	8006fda <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fd0:	4b36      	ldr	r3, [pc, #216]	@ (80070ac <xTaskIncrementTick+0x15c>)
 8006fd2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006fd6:	601a      	str	r2, [r3, #0]
					break;
 8006fd8:	e03f      	b.n	800705a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fda:	4b31      	ldr	r3, [pc, #196]	@ (80070a0 <xTaskIncrementTick+0x150>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d203      	bcs.n	8006ffa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ff2:	4a2e      	ldr	r2, [pc, #184]	@ (80070ac <xTaskIncrementTick+0x15c>)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ff8:	e02f      	b.n	800705a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe fc08 	bl	8005814 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007008:	2b00      	cmp	r3, #0
 800700a:	d004      	beq.n	8007016 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	3318      	adds	r3, #24
 8007010:	4618      	mov	r0, r3
 8007012:	f7fe fbff 	bl	8005814 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800701a:	4b25      	ldr	r3, [pc, #148]	@ (80070b0 <xTaskIncrementTick+0x160>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	429a      	cmp	r2, r3
 8007020:	d903      	bls.n	800702a <xTaskIncrementTick+0xda>
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007026:	4a22      	ldr	r2, [pc, #136]	@ (80070b0 <xTaskIncrementTick+0x160>)
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4a1f      	ldr	r2, [pc, #124]	@ (80070b4 <xTaskIncrementTick+0x164>)
 8007038:	441a      	add	r2, r3
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	3304      	adds	r3, #4
 800703e:	4619      	mov	r1, r3
 8007040:	4610      	mov	r0, r2
 8007042:	f7fe fb8a 	bl	800575a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800704a:	4b1b      	ldr	r3, [pc, #108]	@ (80070b8 <xTaskIncrementTick+0x168>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007050:	429a      	cmp	r2, r3
 8007052:	d3b8      	bcc.n	8006fc6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007054:	2301      	movs	r3, #1
 8007056:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007058:	e7b5      	b.n	8006fc6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800705a:	4b17      	ldr	r3, [pc, #92]	@ (80070b8 <xTaskIncrementTick+0x168>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007060:	4914      	ldr	r1, [pc, #80]	@ (80070b4 <xTaskIncrementTick+0x164>)
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	440b      	add	r3, r1
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d901      	bls.n	8007076 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007072:	2301      	movs	r3, #1
 8007074:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007076:	4b11      	ldr	r3, [pc, #68]	@ (80070bc <xTaskIncrementTick+0x16c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d007      	beq.n	800708e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800707e:	2301      	movs	r3, #1
 8007080:	617b      	str	r3, [r7, #20]
 8007082:	e004      	b.n	800708e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007084:	4b0e      	ldr	r3, [pc, #56]	@ (80070c0 <xTaskIncrementTick+0x170>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3301      	adds	r3, #1
 800708a:	4a0d      	ldr	r2, [pc, #52]	@ (80070c0 <xTaskIncrementTick+0x170>)
 800708c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800708e:	697b      	ldr	r3, [r7, #20]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20001390 	.word	0x20001390
 800709c:	2000136c 	.word	0x2000136c
 80070a0:	20001320 	.word	0x20001320
 80070a4:	20001324 	.word	0x20001324
 80070a8:	20001380 	.word	0x20001380
 80070ac:	20001388 	.word	0x20001388
 80070b0:	20001370 	.word	0x20001370
 80070b4:	20000e98 	.word	0x20000e98
 80070b8:	20000e94 	.word	0x20000e94
 80070bc:	2000137c 	.word	0x2000137c
 80070c0:	20001378 	.word	0x20001378

080070c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070ca:	4b28      	ldr	r3, [pc, #160]	@ (800716c <vTaskSwitchContext+0xa8>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070d2:	4b27      	ldr	r3, [pc, #156]	@ (8007170 <vTaskSwitchContext+0xac>)
 80070d4:	2201      	movs	r2, #1
 80070d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070d8:	e042      	b.n	8007160 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80070da:	4b25      	ldr	r3, [pc, #148]	@ (8007170 <vTaskSwitchContext+0xac>)
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070e0:	4b24      	ldr	r3, [pc, #144]	@ (8007174 <vTaskSwitchContext+0xb0>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	e011      	b.n	800710c <vTaskSwitchContext+0x48>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10b      	bne.n	8007106 <vTaskSwitchContext+0x42>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	607b      	str	r3, [r7, #4]
}
 8007100:	bf00      	nop
 8007102:	bf00      	nop
 8007104:	e7fd      	b.n	8007102 <vTaskSwitchContext+0x3e>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	3b01      	subs	r3, #1
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	491a      	ldr	r1, [pc, #104]	@ (8007178 <vTaskSwitchContext+0xb4>)
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	4613      	mov	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	440b      	add	r3, r1
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0e3      	beq.n	80070e8 <vTaskSwitchContext+0x24>
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	4613      	mov	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4a13      	ldr	r2, [pc, #76]	@ (8007178 <vTaskSwitchContext+0xb4>)
 800712c:	4413      	add	r3, r2
 800712e:	60bb      	str	r3, [r7, #8]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	605a      	str	r2, [r3, #4]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	3308      	adds	r3, #8
 8007142:	429a      	cmp	r2, r3
 8007144:	d104      	bne.n	8007150 <vTaskSwitchContext+0x8c>
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	605a      	str	r2, [r3, #4]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	4a09      	ldr	r2, [pc, #36]	@ (800717c <vTaskSwitchContext+0xb8>)
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	4a06      	ldr	r2, [pc, #24]	@ (8007174 <vTaskSwitchContext+0xb0>)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6013      	str	r3, [r2, #0]
}
 8007160:	bf00      	nop
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	20001390 	.word	0x20001390
 8007170:	2000137c 	.word	0x2000137c
 8007174:	20001370 	.word	0x20001370
 8007178:	20000e98 	.word	0x20000e98
 800717c:	20000e94 	.word	0x20000e94

08007180 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10b      	bne.n	80071a8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	60fb      	str	r3, [r7, #12]
}
 80071a2:	bf00      	nop
 80071a4:	bf00      	nop
 80071a6:	e7fd      	b.n	80071a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071a8:	4b07      	ldr	r3, [pc, #28]	@ (80071c8 <vTaskPlaceOnEventList+0x48>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3318      	adds	r3, #24
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7fe faf6 	bl	80057a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071b6:	2101      	movs	r1, #1
 80071b8:	6838      	ldr	r0, [r7, #0]
 80071ba:	f000 fd85 	bl	8007cc8 <prvAddCurrentTaskToDelayedList>
}
 80071be:	bf00      	nop
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20000e94 	.word	0x20000e94

080071cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10b      	bne.n	80071f6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	617b      	str	r3, [r7, #20]
}
 80071f0:	bf00      	nop
 80071f2:	bf00      	nop
 80071f4:	e7fd      	b.n	80071f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007220 <vTaskPlaceOnEventListRestricted+0x54>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3318      	adds	r3, #24
 80071fc:	4619      	mov	r1, r3
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f7fe faab 	bl	800575a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d002      	beq.n	8007210 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800720a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800720e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007210:	6879      	ldr	r1, [r7, #4]
 8007212:	68b8      	ldr	r0, [r7, #8]
 8007214:	f000 fd58 	bl	8007cc8 <prvAddCurrentTaskToDelayedList>
	}
 8007218:	bf00      	nop
 800721a:	3718      	adds	r7, #24
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	20000e94 	.word	0x20000e94

08007224 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10b      	bne.n	8007252 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	60fb      	str	r3, [r7, #12]
}
 800724c:	bf00      	nop
 800724e:	bf00      	nop
 8007250:	e7fd      	b.n	800724e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	3318      	adds	r3, #24
 8007256:	4618      	mov	r0, r3
 8007258:	f7fe fadc 	bl	8005814 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800725c:	4b1d      	ldr	r3, [pc, #116]	@ (80072d4 <xTaskRemoveFromEventList+0xb0>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d11d      	bne.n	80072a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	3304      	adds	r3, #4
 8007268:	4618      	mov	r0, r3
 800726a:	f7fe fad3 	bl	8005814 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007272:	4b19      	ldr	r3, [pc, #100]	@ (80072d8 <xTaskRemoveFromEventList+0xb4>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d903      	bls.n	8007282 <xTaskRemoveFromEventList+0x5e>
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727e:	4a16      	ldr	r2, [pc, #88]	@ (80072d8 <xTaskRemoveFromEventList+0xb4>)
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007286:	4613      	mov	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4a13      	ldr	r2, [pc, #76]	@ (80072dc <xTaskRemoveFromEventList+0xb8>)
 8007290:	441a      	add	r2, r3
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	3304      	adds	r3, #4
 8007296:	4619      	mov	r1, r3
 8007298:	4610      	mov	r0, r2
 800729a:	f7fe fa5e 	bl	800575a <vListInsertEnd>
 800729e:	e005      	b.n	80072ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	3318      	adds	r3, #24
 80072a4:	4619      	mov	r1, r3
 80072a6:	480e      	ldr	r0, [pc, #56]	@ (80072e0 <xTaskRemoveFromEventList+0xbc>)
 80072a8:	f7fe fa57 	bl	800575a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072b0:	4b0c      	ldr	r3, [pc, #48]	@ (80072e4 <xTaskRemoveFromEventList+0xc0>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d905      	bls.n	80072c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072ba:	2301      	movs	r3, #1
 80072bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072be:	4b0a      	ldr	r3, [pc, #40]	@ (80072e8 <xTaskRemoveFromEventList+0xc4>)
 80072c0:	2201      	movs	r2, #1
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	e001      	b.n	80072ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80072c6:	2300      	movs	r3, #0
 80072c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80072ca:	697b      	ldr	r3, [r7, #20]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20001390 	.word	0x20001390
 80072d8:	20001370 	.word	0x20001370
 80072dc:	20000e98 	.word	0x20000e98
 80072e0:	20001328 	.word	0x20001328
 80072e4:	20000e94 	.word	0x20000e94
 80072e8:	2000137c 	.word	0x2000137c

080072ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072f4:	4b06      	ldr	r3, [pc, #24]	@ (8007310 <vTaskInternalSetTimeOutState+0x24>)
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80072fc:	4b05      	ldr	r3, [pc, #20]	@ (8007314 <vTaskInternalSetTimeOutState+0x28>)
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	605a      	str	r2, [r3, #4]
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	20001380 	.word	0x20001380
 8007314:	2000136c 	.word	0x2000136c

08007318 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b088      	sub	sp, #32
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10b      	bne.n	8007340 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	613b      	str	r3, [r7, #16]
}
 800733a:	bf00      	nop
 800733c:	bf00      	nop
 800733e:	e7fd      	b.n	800733c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10b      	bne.n	800735e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	60fb      	str	r3, [r7, #12]
}
 8007358:	bf00      	nop
 800735a:	bf00      	nop
 800735c:	e7fd      	b.n	800735a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800735e:	f001 fa53 	bl	8008808 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007362:	4b1d      	ldr	r3, [pc, #116]	@ (80073d8 <xTaskCheckForTimeOut+0xc0>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800737a:	d102      	bne.n	8007382 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800737c:	2300      	movs	r3, #0
 800737e:	61fb      	str	r3, [r7, #28]
 8007380:	e023      	b.n	80073ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	4b15      	ldr	r3, [pc, #84]	@ (80073dc <xTaskCheckForTimeOut+0xc4>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	429a      	cmp	r2, r3
 800738c:	d007      	beq.n	800739e <xTaskCheckForTimeOut+0x86>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	69ba      	ldr	r2, [r7, #24]
 8007394:	429a      	cmp	r2, r3
 8007396:	d302      	bcc.n	800739e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007398:	2301      	movs	r3, #1
 800739a:	61fb      	str	r3, [r7, #28]
 800739c:	e015      	b.n	80073ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d20b      	bcs.n	80073c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	1ad2      	subs	r2, r2, r3
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7ff ff99 	bl	80072ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073ba:	2300      	movs	r3, #0
 80073bc:	61fb      	str	r3, [r7, #28]
 80073be:	e004      	b.n	80073ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073c6:	2301      	movs	r3, #1
 80073c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073ca:	f001 fa4f 	bl	800886c <vPortExitCritical>

	return xReturn;
 80073ce:	69fb      	ldr	r3, [r7, #28]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3720      	adds	r7, #32
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	2000136c 	.word	0x2000136c
 80073dc:	20001380 	.word	0x20001380

080073e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073e0:	b480      	push	{r7}
 80073e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073e4:	4b03      	ldr	r3, [pc, #12]	@ (80073f4 <vTaskMissedYield+0x14>)
 80073e6:	2201      	movs	r2, #1
 80073e8:	601a      	str	r2, [r3, #0]
}
 80073ea:	bf00      	nop
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	2000137c 	.word	0x2000137c

080073f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007400:	f000 f852 	bl	80074a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007404:	4b06      	ldr	r3, [pc, #24]	@ (8007420 <prvIdleTask+0x28>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d9f9      	bls.n	8007400 <prvIdleTask+0x8>
			{
				taskYIELD();
 800740c:	4b05      	ldr	r3, [pc, #20]	@ (8007424 <prvIdleTask+0x2c>)
 800740e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800741c:	e7f0      	b.n	8007400 <prvIdleTask+0x8>
 800741e:	bf00      	nop
 8007420:	20000e98 	.word	0x20000e98
 8007424:	e000ed04 	.word	0xe000ed04

08007428 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800742e:	2300      	movs	r3, #0
 8007430:	607b      	str	r3, [r7, #4]
 8007432:	e00c      	b.n	800744e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	4613      	mov	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4a12      	ldr	r2, [pc, #72]	@ (8007488 <prvInitialiseTaskLists+0x60>)
 8007440:	4413      	add	r3, r2
 8007442:	4618      	mov	r0, r3
 8007444:	f7fe f95c 	bl	8005700 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	3301      	adds	r3, #1
 800744c:	607b      	str	r3, [r7, #4]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b37      	cmp	r3, #55	@ 0x37
 8007452:	d9ef      	bls.n	8007434 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007454:	480d      	ldr	r0, [pc, #52]	@ (800748c <prvInitialiseTaskLists+0x64>)
 8007456:	f7fe f953 	bl	8005700 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800745a:	480d      	ldr	r0, [pc, #52]	@ (8007490 <prvInitialiseTaskLists+0x68>)
 800745c:	f7fe f950 	bl	8005700 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007460:	480c      	ldr	r0, [pc, #48]	@ (8007494 <prvInitialiseTaskLists+0x6c>)
 8007462:	f7fe f94d 	bl	8005700 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007466:	480c      	ldr	r0, [pc, #48]	@ (8007498 <prvInitialiseTaskLists+0x70>)
 8007468:	f7fe f94a 	bl	8005700 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800746c:	480b      	ldr	r0, [pc, #44]	@ (800749c <prvInitialiseTaskLists+0x74>)
 800746e:	f7fe f947 	bl	8005700 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007472:	4b0b      	ldr	r3, [pc, #44]	@ (80074a0 <prvInitialiseTaskLists+0x78>)
 8007474:	4a05      	ldr	r2, [pc, #20]	@ (800748c <prvInitialiseTaskLists+0x64>)
 8007476:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007478:	4b0a      	ldr	r3, [pc, #40]	@ (80074a4 <prvInitialiseTaskLists+0x7c>)
 800747a:	4a05      	ldr	r2, [pc, #20]	@ (8007490 <prvInitialiseTaskLists+0x68>)
 800747c:	601a      	str	r2, [r3, #0]
}
 800747e:	bf00      	nop
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	20000e98 	.word	0x20000e98
 800748c:	200012f8 	.word	0x200012f8
 8007490:	2000130c 	.word	0x2000130c
 8007494:	20001328 	.word	0x20001328
 8007498:	2000133c 	.word	0x2000133c
 800749c:	20001354 	.word	0x20001354
 80074a0:	20001320 	.word	0x20001320
 80074a4:	20001324 	.word	0x20001324

080074a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074ae:	e019      	b.n	80074e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074b0:	f001 f9aa 	bl	8008808 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074b4:	4b10      	ldr	r3, [pc, #64]	@ (80074f8 <prvCheckTasksWaitingTermination+0x50>)
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3304      	adds	r3, #4
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fe f9a7 	bl	8005814 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074c6:	4b0d      	ldr	r3, [pc, #52]	@ (80074fc <prvCheckTasksWaitingTermination+0x54>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	4a0b      	ldr	r2, [pc, #44]	@ (80074fc <prvCheckTasksWaitingTermination+0x54>)
 80074ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007500 <prvCheckTasksWaitingTermination+0x58>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3b01      	subs	r3, #1
 80074d6:	4a0a      	ldr	r2, [pc, #40]	@ (8007500 <prvCheckTasksWaitingTermination+0x58>)
 80074d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074da:	f001 f9c7 	bl	800886c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f810 	bl	8007504 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074e4:	4b06      	ldr	r3, [pc, #24]	@ (8007500 <prvCheckTasksWaitingTermination+0x58>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1e1      	bne.n	80074b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074ec:	bf00      	nop
 80074ee:	bf00      	nop
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	2000133c 	.word	0x2000133c
 80074fc:	20001368 	.word	0x20001368
 8007500:	20001350 	.word	0x20001350

08007504 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007512:	2b00      	cmp	r3, #0
 8007514:	d108      	bne.n	8007528 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751a:	4618      	mov	r0, r3
 800751c:	f001 fb64 	bl	8008be8 <vPortFree>
				vPortFree( pxTCB );
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 fb61 	bl	8008be8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007526:	e019      	b.n	800755c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800752e:	2b01      	cmp	r3, #1
 8007530:	d103      	bne.n	800753a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f001 fb58 	bl	8008be8 <vPortFree>
	}
 8007538:	e010      	b.n	800755c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007540:	2b02      	cmp	r3, #2
 8007542:	d00b      	beq.n	800755c <prvDeleteTCB+0x58>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	60fb      	str	r3, [r7, #12]
}
 8007556:	bf00      	nop
 8007558:	bf00      	nop
 800755a:	e7fd      	b.n	8007558 <prvDeleteTCB+0x54>
	}
 800755c:	bf00      	nop
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800756a:	4b0c      	ldr	r3, [pc, #48]	@ (800759c <prvResetNextTaskUnblockTime+0x38>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d104      	bne.n	800757e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007574:	4b0a      	ldr	r3, [pc, #40]	@ (80075a0 <prvResetNextTaskUnblockTime+0x3c>)
 8007576:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800757a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800757c:	e008      	b.n	8007590 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800757e:	4b07      	ldr	r3, [pc, #28]	@ (800759c <prvResetNextTaskUnblockTime+0x38>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	4a04      	ldr	r2, [pc, #16]	@ (80075a0 <prvResetNextTaskUnblockTime+0x3c>)
 800758e:	6013      	str	r3, [r2, #0]
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	20001320 	.word	0x20001320
 80075a0:	20001388 	.word	0x20001388

080075a4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80075aa:	4b05      	ldr	r3, [pc, #20]	@ (80075c0 <xTaskGetCurrentTaskHandle+0x1c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	607b      	str	r3, [r7, #4]

		return xReturn;
 80075b0:	687b      	ldr	r3, [r7, #4]
	}
 80075b2:	4618      	mov	r0, r3
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	20000e94 	.word	0x20000e94

080075c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075ca:	4b0b      	ldr	r3, [pc, #44]	@ (80075f8 <xTaskGetSchedulerState+0x34>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d102      	bne.n	80075d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075d2:	2301      	movs	r3, #1
 80075d4:	607b      	str	r3, [r7, #4]
 80075d6:	e008      	b.n	80075ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075d8:	4b08      	ldr	r3, [pc, #32]	@ (80075fc <xTaskGetSchedulerState+0x38>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d102      	bne.n	80075e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075e0:	2302      	movs	r3, #2
 80075e2:	607b      	str	r3, [r7, #4]
 80075e4:	e001      	b.n	80075ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075e6:	2300      	movs	r3, #0
 80075e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075ea:	687b      	ldr	r3, [r7, #4]
	}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr
 80075f8:	20001374 	.word	0x20001374
 80075fc:	20001390 	.word	0x20001390

08007600 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800760c:	2300      	movs	r3, #0
 800760e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d051      	beq.n	80076ba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800761a:	4b2a      	ldr	r3, [pc, #168]	@ (80076c4 <xTaskPriorityInherit+0xc4>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007620:	429a      	cmp	r2, r3
 8007622:	d241      	bcs.n	80076a8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	2b00      	cmp	r3, #0
 800762a:	db06      	blt.n	800763a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800762c:	4b25      	ldr	r3, [pc, #148]	@ (80076c4 <xTaskPriorityInherit+0xc4>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007632:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	6959      	ldr	r1, [r3, #20]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007642:	4613      	mov	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4a1f      	ldr	r2, [pc, #124]	@ (80076c8 <xTaskPriorityInherit+0xc8>)
 800764c:	4413      	add	r3, r2
 800764e:	4299      	cmp	r1, r3
 8007650:	d122      	bne.n	8007698 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	3304      	adds	r3, #4
 8007656:	4618      	mov	r0, r3
 8007658:	f7fe f8dc 	bl	8005814 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800765c:	4b19      	ldr	r3, [pc, #100]	@ (80076c4 <xTaskPriorityInherit+0xc4>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800766a:	4b18      	ldr	r3, [pc, #96]	@ (80076cc <xTaskPriorityInherit+0xcc>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	429a      	cmp	r2, r3
 8007670:	d903      	bls.n	800767a <xTaskPriorityInherit+0x7a>
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007676:	4a15      	ldr	r2, [pc, #84]	@ (80076cc <xTaskPriorityInherit+0xcc>)
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800767e:	4613      	mov	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4a10      	ldr	r2, [pc, #64]	@ (80076c8 <xTaskPriorityInherit+0xc8>)
 8007688:	441a      	add	r2, r3
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	3304      	adds	r3, #4
 800768e:	4619      	mov	r1, r3
 8007690:	4610      	mov	r0, r2
 8007692:	f7fe f862 	bl	800575a <vListInsertEnd>
 8007696:	e004      	b.n	80076a2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007698:	4b0a      	ldr	r3, [pc, #40]	@ (80076c4 <xTaskPriorityInherit+0xc4>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80076a2:	2301      	movs	r3, #1
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	e008      	b.n	80076ba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076ac:	4b05      	ldr	r3, [pc, #20]	@ (80076c4 <xTaskPriorityInherit+0xc4>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d201      	bcs.n	80076ba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80076b6:	2301      	movs	r3, #1
 80076b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076ba:	68fb      	ldr	r3, [r7, #12]
	}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	20000e94 	.word	0x20000e94
 80076c8:	20000e98 	.word	0x20000e98
 80076cc:	20001370 	.word	0x20001370

080076d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076dc:	2300      	movs	r3, #0
 80076de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d058      	beq.n	8007798 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076e6:	4b2f      	ldr	r3, [pc, #188]	@ (80077a4 <xTaskPriorityDisinherit+0xd4>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d00b      	beq.n	8007708 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	60fb      	str	r3, [r7, #12]
}
 8007702:	bf00      	nop
 8007704:	bf00      	nop
 8007706:	e7fd      	b.n	8007704 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10b      	bne.n	8007728 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	60bb      	str	r3, [r7, #8]
}
 8007722:	bf00      	nop
 8007724:	bf00      	nop
 8007726:	e7fd      	b.n	8007724 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800772c:	1e5a      	subs	r2, r3, #1
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800773a:	429a      	cmp	r2, r3
 800773c:	d02c      	beq.n	8007798 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007742:	2b00      	cmp	r3, #0
 8007744:	d128      	bne.n	8007798 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	3304      	adds	r3, #4
 800774a:	4618      	mov	r0, r3
 800774c:	f7fe f862 	bl	8005814 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800775c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007768:	4b0f      	ldr	r3, [pc, #60]	@ (80077a8 <xTaskPriorityDisinherit+0xd8>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	429a      	cmp	r2, r3
 800776e:	d903      	bls.n	8007778 <xTaskPriorityDisinherit+0xa8>
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007774:	4a0c      	ldr	r2, [pc, #48]	@ (80077a8 <xTaskPriorityDisinherit+0xd8>)
 8007776:	6013      	str	r3, [r2, #0]
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800777c:	4613      	mov	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4a09      	ldr	r2, [pc, #36]	@ (80077ac <xTaskPriorityDisinherit+0xdc>)
 8007786:	441a      	add	r2, r3
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	3304      	adds	r3, #4
 800778c:	4619      	mov	r1, r3
 800778e:	4610      	mov	r0, r2
 8007790:	f7fd ffe3 	bl	800575a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007794:	2301      	movs	r3, #1
 8007796:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007798:	697b      	ldr	r3, [r7, #20]
	}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	20000e94 	.word	0x20000e94
 80077a8:	20001370 	.word	0x20001370
 80077ac:	20000e98 	.word	0x20000e98

080077b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80077be:	2301      	movs	r3, #1
 80077c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d06c      	beq.n	80078a2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10b      	bne.n	80077e8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80077d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	60fb      	str	r3, [r7, #12]
}
 80077e2:	bf00      	nop
 80077e4:	bf00      	nop
 80077e6:	e7fd      	b.n	80077e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077ec:	683a      	ldr	r2, [r7, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d902      	bls.n	80077f8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	61fb      	str	r3, [r7, #28]
 80077f6:	e002      	b.n	80077fe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077fc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007802:	69fa      	ldr	r2, [r7, #28]
 8007804:	429a      	cmp	r2, r3
 8007806:	d04c      	beq.n	80078a2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	429a      	cmp	r2, r3
 8007810:	d147      	bne.n	80078a2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007812:	4b26      	ldr	r3, [pc, #152]	@ (80078ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69ba      	ldr	r2, [r7, #24]
 8007818:	429a      	cmp	r2, r3
 800781a:	d10b      	bne.n	8007834 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	60bb      	str	r3, [r7, #8]
}
 800782e:	bf00      	nop
 8007830:	bf00      	nop
 8007832:	e7fd      	b.n	8007830 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007838:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	69fa      	ldr	r2, [r7, #28]
 800783e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	2b00      	cmp	r3, #0
 8007846:	db04      	blt.n	8007852 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	6959      	ldr	r1, [r3, #20]
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	4613      	mov	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	4413      	add	r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4a13      	ldr	r2, [pc, #76]	@ (80078b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007862:	4413      	add	r3, r2
 8007864:	4299      	cmp	r1, r3
 8007866:	d11c      	bne.n	80078a2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	3304      	adds	r3, #4
 800786c:	4618      	mov	r0, r3
 800786e:	f7fd ffd1 	bl	8005814 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007876:	4b0f      	ldr	r3, [pc, #60]	@ (80078b4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	429a      	cmp	r2, r3
 800787c:	d903      	bls.n	8007886 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007882:	4a0c      	ldr	r2, [pc, #48]	@ (80078b4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007884:	6013      	str	r3, [r2, #0]
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800788a:	4613      	mov	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4a07      	ldr	r2, [pc, #28]	@ (80078b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007894:	441a      	add	r2, r3
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	3304      	adds	r3, #4
 800789a:	4619      	mov	r1, r3
 800789c:	4610      	mov	r0, r2
 800789e:	f7fd ff5c 	bl	800575a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078a2:	bf00      	nop
 80078a4:	3720      	adds	r7, #32
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	20000e94 	.word	0x20000e94
 80078b0:	20000e98 	.word	0x20000e98
 80078b4:	20001370 	.word	0x20001370

080078b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80078bc:	4b07      	ldr	r3, [pc, #28]	@ (80078dc <pvTaskIncrementMutexHeldCount+0x24>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d004      	beq.n	80078ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80078c4:	4b05      	ldr	r3, [pc, #20]	@ (80078dc <pvTaskIncrementMutexHeldCount+0x24>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078ca:	3201      	adds	r2, #1
 80078cc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80078ce:	4b03      	ldr	r3, [pc, #12]	@ (80078dc <pvTaskIncrementMutexHeldCount+0x24>)
 80078d0:	681b      	ldr	r3, [r3, #0]
	}
 80078d2:	4618      	mov	r0, r3
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	20000e94 	.word	0x20000e94

080078e0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80078ee:	f000 ff8b 	bl	8008808 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80078f2:	4b26      	ldr	r3, [pc, #152]	@ (800798c <xTaskNotifyWait+0xac>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d01a      	beq.n	8007936 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007900:	4b22      	ldr	r3, [pc, #136]	@ (800798c <xTaskNotifyWait+0xac>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	43d2      	mvns	r2, r2
 800790a:	400a      	ands	r2, r1
 800790c:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800790e:	4b1f      	ldr	r3, [pc, #124]	@ (800798c <xTaskNotifyWait+0xac>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00b      	beq.n	8007936 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800791e:	2101      	movs	r1, #1
 8007920:	6838      	ldr	r0, [r7, #0]
 8007922:	f000 f9d1 	bl	8007cc8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007926:	4b1a      	ldr	r3, [pc, #104]	@ (8007990 <xTaskNotifyWait+0xb0>)
 8007928:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800792c:	601a      	str	r2, [r3, #0]
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007936:	f000 ff99 	bl	800886c <vPortExitCritical>

		taskENTER_CRITICAL();
 800793a:	f000 ff65 	bl	8008808 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d004      	beq.n	800794e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007944:	4b11      	ldr	r3, [pc, #68]	@ (800798c <xTaskNotifyWait+0xac>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800794e:	4b0f      	ldr	r3, [pc, #60]	@ (800798c <xTaskNotifyWait+0xac>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b02      	cmp	r3, #2
 800795a:	d002      	beq.n	8007962 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800795c:	2300      	movs	r3, #0
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	e008      	b.n	8007974 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007962:	4b0a      	ldr	r3, [pc, #40]	@ (800798c <xTaskNotifyWait+0xac>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	43d2      	mvns	r2, r2
 800796c:	400a      	ands	r2, r1
 800796e:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 8007970:	2301      	movs	r3, #1
 8007972:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007974:	4b05      	ldr	r3, [pc, #20]	@ (800798c <xTaskNotifyWait+0xac>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 800797e:	f000 ff75 	bl	800886c <vPortExitCritical>

		return xReturn;
 8007982:	697b      	ldr	r3, [r7, #20]
	}
 8007984:	4618      	mov	r0, r3
 8007986:	3718      	adds	r7, #24
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	20000e94 	.word	0x20000e94
 8007990:	e000ed04 	.word	0xe000ed04

08007994 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08a      	sub	sp, #40	@ 0x28
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	603b      	str	r3, [r7, #0]
 80079a0:	4613      	mov	r3, r2
 80079a2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80079a4:	2301      	movs	r3, #1
 80079a6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10b      	bne.n	80079c6 <xTaskGenericNotify+0x32>
	__asm volatile
 80079ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	61bb      	str	r3, [r7, #24]
}
 80079c0:	bf00      	nop
 80079c2:	bf00      	nop
 80079c4:	e7fd      	b.n	80079c2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80079ca:	f000 ff1d 	bl	8008808 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d003      	beq.n	80079dc <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80079d4:	6a3b      	ldr	r3, [r7, #32]
 80079d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80079dc:	6a3b      	ldr	r3, [r7, #32]
 80079de:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80079e2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 80079ec:	79fb      	ldrb	r3, [r7, #7]
 80079ee:	2b04      	cmp	r3, #4
 80079f0:	d827      	bhi.n	8007a42 <xTaskGenericNotify+0xae>
 80079f2:	a201      	add	r2, pc, #4	@ (adr r2, 80079f8 <xTaskGenericNotify+0x64>)
 80079f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f8:	08007a65 	.word	0x08007a65
 80079fc:	08007a0d 	.word	0x08007a0d
 8007a00:	08007a1b 	.word	0x08007a1b
 8007a04:	08007a27 	.word	0x08007a27
 8007a08:	08007a2f 	.word	0x08007a2f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	431a      	orrs	r2, r3
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007a18:	e027      	b.n	8007a6a <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a1e:	1c5a      	adds	r2, r3, #1
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007a24:	e021      	b.n	8007a6a <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007a26:	6a3b      	ldr	r3, [r7, #32]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007a2c:	e01d      	b.n	8007a6a <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007a2e:	7ffb      	ldrb	r3, [r7, #31]
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d003      	beq.n	8007a3c <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007a3a:	e016      	b.n	8007a6a <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8007a40:	e013      	b.n	8007a6a <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a4a:	d00d      	beq.n	8007a68 <xTaskGenericNotify+0xd4>
	__asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	617b      	str	r3, [r7, #20]
}
 8007a5e:	bf00      	nop
 8007a60:	bf00      	nop
 8007a62:	e7fd      	b.n	8007a60 <xTaskGenericNotify+0xcc>
					break;
 8007a64:	bf00      	nop
 8007a66:	e000      	b.n	8007a6a <xTaskGenericNotify+0xd6>

					break;
 8007a68:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007a6a:	7ffb      	ldrb	r3, [r7, #31]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d13b      	bne.n	8007ae8 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	3304      	adds	r3, #4
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fd fecd 	bl	8005814 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8007af8 <xTaskGenericNotify+0x164>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d903      	bls.n	8007a8e <xTaskGenericNotify+0xfa>
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8007af8 <xTaskGenericNotify+0x164>)
 8007a8c:	6013      	str	r3, [r2, #0]
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4a18      	ldr	r2, [pc, #96]	@ (8007afc <xTaskGenericNotify+0x168>)
 8007a9c:	441a      	add	r2, r3
 8007a9e:	6a3b      	ldr	r3, [r7, #32]
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	f7fd fe58 	bl	800575a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00b      	beq.n	8007aca <xTaskGenericNotify+0x136>
	__asm volatile
 8007ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab6:	f383 8811 	msr	BASEPRI, r3
 8007aba:	f3bf 8f6f 	isb	sy
 8007abe:	f3bf 8f4f 	dsb	sy
 8007ac2:	613b      	str	r3, [r7, #16]
}
 8007ac4:	bf00      	nop
 8007ac6:	bf00      	nop
 8007ac8:	e7fd      	b.n	8007ac6 <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ace:	4b0c      	ldr	r3, [pc, #48]	@ (8007b00 <xTaskGenericNotify+0x16c>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d907      	bls.n	8007ae8 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8007b04 <xTaskGenericNotify+0x170>)
 8007ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007ae8:	f000 fec0 	bl	800886c <vPortExitCritical>

		return xReturn;
 8007aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3728      	adds	r7, #40	@ 0x28
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20001370 	.word	0x20001370
 8007afc:	20000e98 	.word	0x20000e98
 8007b00:	20000e94 	.word	0x20000e94
 8007b04:	e000ed04 	.word	0xe000ed04

08007b08 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08e      	sub	sp, #56	@ 0x38
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	603b      	str	r3, [r7, #0]
 8007b14:	4613      	mov	r3, r2
 8007b16:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10b      	bne.n	8007b3a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8007b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b34:	bf00      	nop
 8007b36:	bf00      	nop
 8007b38:	e7fd      	b.n	8007b36 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b3a:	f000 ff45 	bl	80089c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8007b42:	f3ef 8211 	mrs	r2, BASEPRI
 8007b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4a:	f383 8811 	msr	BASEPRI, r3
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f3bf 8f4f 	dsb	sy
 8007b56:	623a      	str	r2, [r7, #32]
 8007b58:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007b5a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d003      	beq.n	8007b6c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b66:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b78:	2202      	movs	r2, #2
 8007b7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8007b7e:	79fb      	ldrb	r3, [r7, #7]
 8007b80:	2b04      	cmp	r3, #4
 8007b82:	d829      	bhi.n	8007bd8 <xTaskGenericNotifyFromISR+0xd0>
 8007b84:	a201      	add	r2, pc, #4	@ (adr r2, 8007b8c <xTaskGenericNotifyFromISR+0x84>)
 8007b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8a:	bf00      	nop
 8007b8c:	08007bfb 	.word	0x08007bfb
 8007b90:	08007ba1 	.word	0x08007ba1
 8007b94:	08007baf 	.word	0x08007baf
 8007b98:	08007bbb 	.word	0x08007bbb
 8007b9c:	08007bc3 	.word	0x08007bc3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007baa:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007bac:	e028      	b.n	8007c00 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bb2:	1c5a      	adds	r2, r3, #1
 8007bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007bb8:	e022      	b.n	8007c00 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007bc0:	e01e      	b.n	8007c00 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007bc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d003      	beq.n	8007bd2 <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007bd0:	e016      	b.n	8007c00 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8007bd6:	e013      	b.n	8007c00 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007be0:	d00d      	beq.n	8007bfe <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	61bb      	str	r3, [r7, #24]
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop
 8007bf8:	e7fd      	b.n	8007bf6 <xTaskGenericNotifyFromISR+0xee>
					break;
 8007bfa:	bf00      	nop
 8007bfc:	e000      	b.n	8007c00 <xTaskGenericNotifyFromISR+0xf8>
					break;
 8007bfe:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007c00:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d147      	bne.n	8007c98 <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00b      	beq.n	8007c28 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8007c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	617b      	str	r3, [r7, #20]
}
 8007c22:	bf00      	nop
 8007c24:	bf00      	nop
 8007c26:	e7fd      	b.n	8007c24 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c28:	4b21      	ldr	r3, [pc, #132]	@ (8007cb0 <xTaskGenericNotifyFromISR+0x1a8>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d11d      	bne.n	8007c6c <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c32:	3304      	adds	r3, #4
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7fd fded 	bl	8005814 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8007cb4 <xTaskGenericNotifyFromISR+0x1ac>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d903      	bls.n	8007c4e <xTaskGenericNotifyFromISR+0x146>
 8007c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8007cb4 <xTaskGenericNotifyFromISR+0x1ac>)
 8007c4c:	6013      	str	r3, [r2, #0]
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c52:	4613      	mov	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4a17      	ldr	r2, [pc, #92]	@ (8007cb8 <xTaskGenericNotifyFromISR+0x1b0>)
 8007c5c:	441a      	add	r2, r3
 8007c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c60:	3304      	adds	r3, #4
 8007c62:	4619      	mov	r1, r3
 8007c64:	4610      	mov	r0, r2
 8007c66:	f7fd fd78 	bl	800575a <vListInsertEnd>
 8007c6a:	e005      	b.n	8007c78 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6e:	3318      	adds	r3, #24
 8007c70:	4619      	mov	r1, r3
 8007c72:	4812      	ldr	r0, [pc, #72]	@ (8007cbc <xTaskGenericNotifyFromISR+0x1b4>)
 8007c74:	f7fd fd71 	bl	800575a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c7c:	4b10      	ldr	r3, [pc, #64]	@ (8007cc0 <xTaskGenericNotifyFromISR+0x1b8>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d908      	bls.n	8007c98 <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007c86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d002      	beq.n	8007c92 <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007c8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c8e:	2201      	movs	r2, #1
 8007c90:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007c92:	4b0c      	ldr	r3, [pc, #48]	@ (8007cc4 <xTaskGenericNotifyFromISR+0x1bc>)
 8007c94:	2201      	movs	r2, #1
 8007c96:	601a      	str	r2, [r3, #0]
 8007c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c9a:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f383 8811 	msr	BASEPRI, r3
}
 8007ca2:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3738      	adds	r7, #56	@ 0x38
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	20001390 	.word	0x20001390
 8007cb4:	20001370 	.word	0x20001370
 8007cb8:	20000e98 	.word	0x20000e98
 8007cbc:	20001328 	.word	0x20001328
 8007cc0:	20000e94 	.word	0x20000e94
 8007cc4:	2000137c 	.word	0x2000137c

08007cc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cd2:	4b21      	ldr	r3, [pc, #132]	@ (8007d58 <prvAddCurrentTaskToDelayedList+0x90>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cd8:	4b20      	ldr	r3, [pc, #128]	@ (8007d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	3304      	adds	r3, #4
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fd fd98 	bl	8005814 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cea:	d10a      	bne.n	8007d02 <prvAddCurrentTaskToDelayedList+0x3a>
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d007      	beq.n	8007d02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8007d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4819      	ldr	r0, [pc, #100]	@ (8007d60 <prvAddCurrentTaskToDelayedList+0x98>)
 8007cfc:	f7fd fd2d 	bl	800575a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d00:	e026      	b.n	8007d50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4413      	add	r3, r2
 8007d08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d0a:	4b14      	ldr	r3, [pc, #80]	@ (8007d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d209      	bcs.n	8007d2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d1a:	4b12      	ldr	r3, [pc, #72]	@ (8007d64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8007d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3304      	adds	r3, #4
 8007d24:	4619      	mov	r1, r3
 8007d26:	4610      	mov	r0, r2
 8007d28:	f7fd fd3b 	bl	80057a2 <vListInsert>
}
 8007d2c:	e010      	b.n	8007d50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8007d68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4b0a      	ldr	r3, [pc, #40]	@ (8007d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3304      	adds	r3, #4
 8007d38:	4619      	mov	r1, r3
 8007d3a:	4610      	mov	r0, r2
 8007d3c:	f7fd fd31 	bl	80057a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d40:	4b0a      	ldr	r3, [pc, #40]	@ (8007d6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d202      	bcs.n	8007d50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d4a:	4a08      	ldr	r2, [pc, #32]	@ (8007d6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	6013      	str	r3, [r2, #0]
}
 8007d50:	bf00      	nop
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	2000136c 	.word	0x2000136c
 8007d5c:	20000e94 	.word	0x20000e94
 8007d60:	20001354 	.word	0x20001354
 8007d64:	20001324 	.word	0x20001324
 8007d68:	20001320 	.word	0x20001320
 8007d6c:	20001388 	.word	0x20001388

08007d70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b08a      	sub	sp, #40	@ 0x28
 8007d74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d76:	2300      	movs	r3, #0
 8007d78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d7a:	f000 fbb1 	bl	80084e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8007df4 <xTimerCreateTimerTask+0x84>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d021      	beq.n	8007dca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d86:	2300      	movs	r3, #0
 8007d88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d8e:	1d3a      	adds	r2, r7, #4
 8007d90:	f107 0108 	add.w	r1, r7, #8
 8007d94:	f107 030c 	add.w	r3, r7, #12
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fd fc97 	bl	80056cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d9e:	6879      	ldr	r1, [r7, #4]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	9202      	str	r2, [sp, #8]
 8007da6:	9301      	str	r3, [sp, #4]
 8007da8:	2302      	movs	r3, #2
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	2300      	movs	r3, #0
 8007dae:	460a      	mov	r2, r1
 8007db0:	4911      	ldr	r1, [pc, #68]	@ (8007df8 <xTimerCreateTimerTask+0x88>)
 8007db2:	4812      	ldr	r0, [pc, #72]	@ (8007dfc <xTimerCreateTimerTask+0x8c>)
 8007db4:	f7fe fcf0 	bl	8006798 <xTaskCreateStatic>
 8007db8:	4603      	mov	r3, r0
 8007dba:	4a11      	ldr	r2, [pc, #68]	@ (8007e00 <xTimerCreateTimerTask+0x90>)
 8007dbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007dbe:	4b10      	ldr	r3, [pc, #64]	@ (8007e00 <xTimerCreateTimerTask+0x90>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10b      	bne.n	8007de8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	613b      	str	r3, [r7, #16]
}
 8007de2:	bf00      	nop
 8007de4:	bf00      	nop
 8007de6:	e7fd      	b.n	8007de4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007de8:	697b      	ldr	r3, [r7, #20]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	200013c4 	.word	0x200013c4
 8007df8:	08008ee0 	.word	0x08008ee0
 8007dfc:	08008079 	.word	0x08008079
 8007e00:	200013c8 	.word	0x200013c8

08007e04 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b088      	sub	sp, #32
 8007e08:	af02      	add	r7, sp, #8
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007e12:	202c      	movs	r0, #44	@ 0x2c
 8007e14:	f000 fe1a 	bl	8008a4c <pvPortMalloc>
 8007e18:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00d      	beq.n	8007e3c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	9301      	str	r3, [sp, #4]
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	68b9      	ldr	r1, [r7, #8]
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 f845 	bl	8007ec6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007e3c:	697b      	ldr	r3, [r7, #20]
	}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3718      	adds	r7, #24
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b08a      	sub	sp, #40	@ 0x28
 8007e4a:	af02      	add	r7, sp, #8
 8007e4c:	60f8      	str	r0, [r7, #12]
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	607a      	str	r2, [r7, #4]
 8007e52:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007e54:	232c      	movs	r3, #44	@ 0x2c
 8007e56:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	2b2c      	cmp	r3, #44	@ 0x2c
 8007e5c:	d00b      	beq.n	8007e76 <xTimerCreateStatic+0x30>
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	61bb      	str	r3, [r7, #24]
}
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
 8007e74:	e7fd      	b.n	8007e72 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10b      	bne.n	8007e96 <xTimerCreateStatic+0x50>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	617b      	str	r3, [r7, #20]
}
 8007e90:	bf00      	nop
 8007e92:	bf00      	nop
 8007e94:	e7fd      	b.n	8007e92 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e98:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00d      	beq.n	8007ebc <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	68b9      	ldr	r1, [r7, #8]
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 f805 	bl	8007ec6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007ebc:	69fb      	ldr	r3, [r7, #28]
	}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3720      	adds	r7, #32
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b086      	sub	sp, #24
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	60b9      	str	r1, [r7, #8]
 8007ed0:	607a      	str	r2, [r7, #4]
 8007ed2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10b      	bne.n	8007ef2 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8007eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	617b      	str	r3, [r7, #20]
}
 8007eec:	bf00      	nop
 8007eee:	bf00      	nop
 8007ef0:	e7fd      	b.n	8007eee <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d01e      	beq.n	8007f36 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007ef8:	f000 faf2 	bl	80084e0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f10:	6a3a      	ldr	r2, [r7, #32]
 8007f12:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f16:	3304      	adds	r3, #4
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7fd fc11 	bl	8005740 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d008      	beq.n	8007f36 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f2a:	f043 0304 	orr.w	r3, r3, #4
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007f36:	bf00      	nop
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b08a      	sub	sp, #40	@ 0x28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
 8007f4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10b      	bne.n	8007f70 <xTimerGenericCommand+0x30>
	__asm volatile
 8007f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	623b      	str	r3, [r7, #32]
}
 8007f6a:	bf00      	nop
 8007f6c:	bf00      	nop
 8007f6e:	e7fd      	b.n	8007f6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f70:	4b19      	ldr	r3, [pc, #100]	@ (8007fd8 <xTimerGenericCommand+0x98>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d02a      	beq.n	8007fce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2b05      	cmp	r3, #5
 8007f88:	dc18      	bgt.n	8007fbc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f8a:	f7ff fb1b 	bl	80075c4 <xTaskGetSchedulerState>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d109      	bne.n	8007fa8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f94:	4b10      	ldr	r3, [pc, #64]	@ (8007fd8 <xTimerGenericCommand+0x98>)
 8007f96:	6818      	ldr	r0, [r3, #0]
 8007f98:	f107 0110 	add.w	r1, r7, #16
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fa0:	f7fd fe60 	bl	8005c64 <xQueueGenericSend>
 8007fa4:	6278      	str	r0, [r7, #36]	@ 0x24
 8007fa6:	e012      	b.n	8007fce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8007fd8 <xTimerGenericCommand+0x98>)
 8007faa:	6818      	ldr	r0, [r3, #0]
 8007fac:	f107 0110 	add.w	r1, r7, #16
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f7fd fe56 	bl	8005c64 <xQueueGenericSend>
 8007fb8:	6278      	str	r0, [r7, #36]	@ 0x24
 8007fba:	e008      	b.n	8007fce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007fbc:	4b06      	ldr	r3, [pc, #24]	@ (8007fd8 <xTimerGenericCommand+0x98>)
 8007fbe:	6818      	ldr	r0, [r3, #0]
 8007fc0:	f107 0110 	add.w	r1, r7, #16
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	f7fd ff4e 	bl	8005e68 <xQueueGenericSendFromISR>
 8007fcc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3728      	adds	r7, #40	@ 0x28
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	200013c4 	.word	0x200013c4

08007fdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af02      	add	r7, sp, #8
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fe6:	4b23      	ldr	r3, [pc, #140]	@ (8008074 <prvProcessExpiredTimer+0x98>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fd fc0d 	bl	8005814 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008000:	f003 0304 	and.w	r3, r3, #4
 8008004:	2b00      	cmp	r3, #0
 8008006:	d023      	beq.n	8008050 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	699a      	ldr	r2, [r3, #24]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	18d1      	adds	r1, r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	6978      	ldr	r0, [r7, #20]
 8008016:	f000 f8d5 	bl	80081c4 <prvInsertTimerInActiveList>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d020      	beq.n	8008062 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008020:	2300      	movs	r3, #0
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	2300      	movs	r3, #0
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	2100      	movs	r1, #0
 800802a:	6978      	ldr	r0, [r7, #20]
 800802c:	f7ff ff88 	bl	8007f40 <xTimerGenericCommand>
 8008030:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d114      	bne.n	8008062 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800803c:	f383 8811 	msr	BASEPRI, r3
 8008040:	f3bf 8f6f 	isb	sy
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	60fb      	str	r3, [r7, #12]
}
 800804a:	bf00      	nop
 800804c:	bf00      	nop
 800804e:	e7fd      	b.n	800804c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008056:	f023 0301 	bic.w	r3, r3, #1
 800805a:	b2da      	uxtb	r2, r3
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	6978      	ldr	r0, [r7, #20]
 8008068:	4798      	blx	r3
}
 800806a:	bf00      	nop
 800806c:	3718      	adds	r7, #24
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	200013bc 	.word	0x200013bc

08008078 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008080:	f107 0308 	add.w	r3, r7, #8
 8008084:	4618      	mov	r0, r3
 8008086:	f000 f859 	bl	800813c <prvGetNextExpireTime>
 800808a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	4619      	mov	r1, r3
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f000 f805 	bl	80080a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008096:	f000 f8d7 	bl	8008248 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800809a:	bf00      	nop
 800809c:	e7f0      	b.n	8008080 <prvTimerTask+0x8>
	...

080080a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80080aa:	f7fe fe95 	bl	8006dd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080ae:	f107 0308 	add.w	r3, r7, #8
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 f866 	bl	8008184 <prvSampleTimeNow>
 80080b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d130      	bne.n	8008122 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10a      	bne.n	80080dc <prvProcessTimerOrBlockTask+0x3c>
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d806      	bhi.n	80080dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80080ce:	f7fe fe91 	bl	8006df4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80080d2:	68f9      	ldr	r1, [r7, #12]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7ff ff81 	bl	8007fdc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80080da:	e024      	b.n	8008126 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d008      	beq.n	80080f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80080e2:	4b13      	ldr	r3, [pc, #76]	@ (8008130 <prvProcessTimerOrBlockTask+0x90>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d101      	bne.n	80080f0 <prvProcessTimerOrBlockTask+0x50>
 80080ec:	2301      	movs	r3, #1
 80080ee:	e000      	b.n	80080f2 <prvProcessTimerOrBlockTask+0x52>
 80080f0:	2300      	movs	r3, #0
 80080f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80080f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008134 <prvProcessTimerOrBlockTask+0x94>)
 80080f6:	6818      	ldr	r0, [r3, #0]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	4619      	mov	r1, r3
 8008102:	f7fe fb15 	bl	8006730 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008106:	f7fe fe75 	bl	8006df4 <xTaskResumeAll>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10a      	bne.n	8008126 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008110:	4b09      	ldr	r3, [pc, #36]	@ (8008138 <prvProcessTimerOrBlockTask+0x98>)
 8008112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	f3bf 8f6f 	isb	sy
}
 8008120:	e001      	b.n	8008126 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008122:	f7fe fe67 	bl	8006df4 <xTaskResumeAll>
}
 8008126:	bf00      	nop
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	200013c0 	.word	0x200013c0
 8008134:	200013c4 	.word	0x200013c4
 8008138:	e000ed04 	.word	0xe000ed04

0800813c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008144:	4b0e      	ldr	r3, [pc, #56]	@ (8008180 <prvGetNextExpireTime+0x44>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d101      	bne.n	8008152 <prvGetNextExpireTime+0x16>
 800814e:	2201      	movs	r2, #1
 8008150:	e000      	b.n	8008154 <prvGetNextExpireTime+0x18>
 8008152:	2200      	movs	r2, #0
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d105      	bne.n	800816c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008160:	4b07      	ldr	r3, [pc, #28]	@ (8008180 <prvGetNextExpireTime+0x44>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	60fb      	str	r3, [r7, #12]
 800816a:	e001      	b.n	8008170 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008170:	68fb      	ldr	r3, [r7, #12]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	200013bc 	.word	0x200013bc

08008184 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800818c:	f7fe fed0 	bl	8006f30 <xTaskGetTickCount>
 8008190:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008192:	4b0b      	ldr	r3, [pc, #44]	@ (80081c0 <prvSampleTimeNow+0x3c>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	429a      	cmp	r2, r3
 800819a:	d205      	bcs.n	80081a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800819c:	f000 f93a 	bl	8008414 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	601a      	str	r2, [r3, #0]
 80081a6:	e002      	b.n	80081ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80081ae:	4a04      	ldr	r2, [pc, #16]	@ (80081c0 <prvSampleTimeNow+0x3c>)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80081b4:	68fb      	ldr	r3, [r7, #12]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	200013cc 	.word	0x200013cc

080081c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80081d2:	2300      	movs	r3, #0
 80081d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d812      	bhi.n	8008210 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	1ad2      	subs	r2, r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d302      	bcc.n	80081fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80081f8:	2301      	movs	r3, #1
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	e01b      	b.n	8008236 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80081fe:	4b10      	ldr	r3, [pc, #64]	@ (8008240 <prvInsertTimerInActiveList+0x7c>)
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3304      	adds	r3, #4
 8008206:	4619      	mov	r1, r3
 8008208:	4610      	mov	r0, r2
 800820a:	f7fd faca 	bl	80057a2 <vListInsert>
 800820e:	e012      	b.n	8008236 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	429a      	cmp	r2, r3
 8008216:	d206      	bcs.n	8008226 <prvInsertTimerInActiveList+0x62>
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	429a      	cmp	r2, r3
 800821e:	d302      	bcc.n	8008226 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008220:	2301      	movs	r3, #1
 8008222:	617b      	str	r3, [r7, #20]
 8008224:	e007      	b.n	8008236 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008226:	4b07      	ldr	r3, [pc, #28]	@ (8008244 <prvInsertTimerInActiveList+0x80>)
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	3304      	adds	r3, #4
 800822e:	4619      	mov	r1, r3
 8008230:	4610      	mov	r0, r2
 8008232:	f7fd fab6 	bl	80057a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008236:	697b      	ldr	r3, [r7, #20]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	200013c0 	.word	0x200013c0
 8008244:	200013bc 	.word	0x200013bc

08008248 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b08e      	sub	sp, #56	@ 0x38
 800824c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800824e:	e0ce      	b.n	80083ee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	da19      	bge.n	800828a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008256:	1d3b      	adds	r3, r7, #4
 8008258:	3304      	adds	r3, #4
 800825a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800825c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10b      	bne.n	800827a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	61fb      	str	r3, [r7, #28]
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop
 8008278:	e7fd      	b.n	8008276 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800827a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008280:	6850      	ldr	r0, [r2, #4]
 8008282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008284:	6892      	ldr	r2, [r2, #8]
 8008286:	4611      	mov	r1, r2
 8008288:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b00      	cmp	r3, #0
 800828e:	f2c0 80ae 	blt.w	80083ee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d004      	beq.n	80082a8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800829e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a0:	3304      	adds	r3, #4
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fd fab6 	bl	8005814 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082a8:	463b      	mov	r3, r7
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7ff ff6a 	bl	8008184 <prvSampleTimeNow>
 80082b0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b09      	cmp	r3, #9
 80082b6:	f200 8097 	bhi.w	80083e8 <prvProcessReceivedCommands+0x1a0>
 80082ba:	a201      	add	r2, pc, #4	@ (adr r2, 80082c0 <prvProcessReceivedCommands+0x78>)
 80082bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c0:	080082e9 	.word	0x080082e9
 80082c4:	080082e9 	.word	0x080082e9
 80082c8:	080082e9 	.word	0x080082e9
 80082cc:	0800835f 	.word	0x0800835f
 80082d0:	08008373 	.word	0x08008373
 80082d4:	080083bf 	.word	0x080083bf
 80082d8:	080082e9 	.word	0x080082e9
 80082dc:	080082e9 	.word	0x080082e9
 80082e0:	0800835f 	.word	0x0800835f
 80082e4:	08008373 	.word	0x08008373
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082ee:	f043 0301 	orr.w	r3, r3, #1
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fe:	699b      	ldr	r3, [r3, #24]
 8008300:	18d1      	adds	r1, r2, r3
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008306:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008308:	f7ff ff5c 	bl	80081c4 <prvInsertTimerInActiveList>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d06c      	beq.n	80083ec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008314:	6a1b      	ldr	r3, [r3, #32]
 8008316:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008318:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800831a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008320:	f003 0304 	and.w	r3, r3, #4
 8008324:	2b00      	cmp	r3, #0
 8008326:	d061      	beq.n	80083ec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	441a      	add	r2, r3
 8008330:	2300      	movs	r3, #0
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	2300      	movs	r3, #0
 8008336:	2100      	movs	r1, #0
 8008338:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800833a:	f7ff fe01 	bl	8007f40 <xTimerGenericCommand>
 800833e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d152      	bne.n	80083ec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800834a:	f383 8811 	msr	BASEPRI, r3
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	61bb      	str	r3, [r7, #24]
}
 8008358:	bf00      	nop
 800835a:	bf00      	nop
 800835c:	e7fd      	b.n	800835a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800835e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008360:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008364:	f023 0301 	bic.w	r3, r3, #1
 8008368:	b2da      	uxtb	r2, r3
 800836a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008370:	e03d      	b.n	80083ee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008374:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008378:	f043 0301 	orr.w	r3, r3, #1
 800837c:	b2da      	uxtb	r2, r3
 800837e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008380:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008388:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800838a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10b      	bne.n	80083aa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	617b      	str	r3, [r7, #20]
}
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop
 80083a8:	e7fd      	b.n	80083a6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80083aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ac:	699a      	ldr	r2, [r3, #24]
 80083ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b0:	18d1      	adds	r1, r2, r3
 80083b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083b8:	f7ff ff04 	bl	80081c4 <prvInsertTimerInActiveList>
					break;
 80083bc:	e017      	b.n	80083ee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80083be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083c4:	f003 0302 	and.w	r3, r3, #2
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d103      	bne.n	80083d4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80083cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083ce:	f000 fc0b 	bl	8008be8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80083d2:	e00c      	b.n	80083ee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083da:	f023 0301 	bic.w	r3, r3, #1
 80083de:	b2da      	uxtb	r2, r3
 80083e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80083e6:	e002      	b.n	80083ee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80083e8:	bf00      	nop
 80083ea:	e000      	b.n	80083ee <prvProcessReceivedCommands+0x1a6>
					break;
 80083ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083ee:	4b08      	ldr	r3, [pc, #32]	@ (8008410 <prvProcessReceivedCommands+0x1c8>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	1d39      	adds	r1, r7, #4
 80083f4:	2200      	movs	r2, #0
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fd fdd4 	bl	8005fa4 <xQueueReceive>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f47f af26 	bne.w	8008250 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop
 8008408:	3730      	adds	r7, #48	@ 0x30
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	200013c4 	.word	0x200013c4

08008414 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b088      	sub	sp, #32
 8008418:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800841a:	e049      	b.n	80084b0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800841c:	4b2e      	ldr	r3, [pc, #184]	@ (80084d8 <prvSwitchTimerLists+0xc4>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008426:	4b2c      	ldr	r3, [pc, #176]	@ (80084d8 <prvSwitchTimerLists+0xc4>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	3304      	adds	r3, #4
 8008434:	4618      	mov	r0, r3
 8008436:	f7fd f9ed 	bl	8005814 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008448:	f003 0304 	and.w	r3, r3, #4
 800844c:	2b00      	cmp	r3, #0
 800844e:	d02f      	beq.n	80084b0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	4413      	add	r3, r2
 8008458:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	429a      	cmp	r2, r3
 8008460:	d90e      	bls.n	8008480 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800846e:	4b1a      	ldr	r3, [pc, #104]	@ (80084d8 <prvSwitchTimerLists+0xc4>)
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3304      	adds	r3, #4
 8008476:	4619      	mov	r1, r3
 8008478:	4610      	mov	r0, r2
 800847a:	f7fd f992 	bl	80057a2 <vListInsert>
 800847e:	e017      	b.n	80084b0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008480:	2300      	movs	r3, #0
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	2300      	movs	r3, #0
 8008486:	693a      	ldr	r2, [r7, #16]
 8008488:	2100      	movs	r1, #0
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f7ff fd58 	bl	8007f40 <xTimerGenericCommand>
 8008490:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10b      	bne.n	80084b0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	603b      	str	r3, [r7, #0]
}
 80084aa:	bf00      	nop
 80084ac:	bf00      	nop
 80084ae:	e7fd      	b.n	80084ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084b0:	4b09      	ldr	r3, [pc, #36]	@ (80084d8 <prvSwitchTimerLists+0xc4>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1b0      	bne.n	800841c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80084ba:	4b07      	ldr	r3, [pc, #28]	@ (80084d8 <prvSwitchTimerLists+0xc4>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80084c0:	4b06      	ldr	r3, [pc, #24]	@ (80084dc <prvSwitchTimerLists+0xc8>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a04      	ldr	r2, [pc, #16]	@ (80084d8 <prvSwitchTimerLists+0xc4>)
 80084c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80084c8:	4a04      	ldr	r2, [pc, #16]	@ (80084dc <prvSwitchTimerLists+0xc8>)
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	6013      	str	r3, [r2, #0]
}
 80084ce:	bf00      	nop
 80084d0:	3718      	adds	r7, #24
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	200013bc 	.word	0x200013bc
 80084dc:	200013c0 	.word	0x200013c0

080084e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80084e6:	f000 f98f 	bl	8008808 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80084ea:	4b15      	ldr	r3, [pc, #84]	@ (8008540 <prvCheckForValidListAndQueue+0x60>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d120      	bne.n	8008534 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80084f2:	4814      	ldr	r0, [pc, #80]	@ (8008544 <prvCheckForValidListAndQueue+0x64>)
 80084f4:	f7fd f904 	bl	8005700 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80084f8:	4813      	ldr	r0, [pc, #76]	@ (8008548 <prvCheckForValidListAndQueue+0x68>)
 80084fa:	f7fd f901 	bl	8005700 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80084fe:	4b13      	ldr	r3, [pc, #76]	@ (800854c <prvCheckForValidListAndQueue+0x6c>)
 8008500:	4a10      	ldr	r2, [pc, #64]	@ (8008544 <prvCheckForValidListAndQueue+0x64>)
 8008502:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008504:	4b12      	ldr	r3, [pc, #72]	@ (8008550 <prvCheckForValidListAndQueue+0x70>)
 8008506:	4a10      	ldr	r2, [pc, #64]	@ (8008548 <prvCheckForValidListAndQueue+0x68>)
 8008508:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800850a:	2300      	movs	r3, #0
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	4b11      	ldr	r3, [pc, #68]	@ (8008554 <prvCheckForValidListAndQueue+0x74>)
 8008510:	4a11      	ldr	r2, [pc, #68]	@ (8008558 <prvCheckForValidListAndQueue+0x78>)
 8008512:	2110      	movs	r1, #16
 8008514:	200a      	movs	r0, #10
 8008516:	f7fd fa11 	bl	800593c <xQueueGenericCreateStatic>
 800851a:	4603      	mov	r3, r0
 800851c:	4a08      	ldr	r2, [pc, #32]	@ (8008540 <prvCheckForValidListAndQueue+0x60>)
 800851e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008520:	4b07      	ldr	r3, [pc, #28]	@ (8008540 <prvCheckForValidListAndQueue+0x60>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d005      	beq.n	8008534 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008528:	4b05      	ldr	r3, [pc, #20]	@ (8008540 <prvCheckForValidListAndQueue+0x60>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	490b      	ldr	r1, [pc, #44]	@ (800855c <prvCheckForValidListAndQueue+0x7c>)
 800852e:	4618      	mov	r0, r3
 8008530:	f7fe f8d4 	bl	80066dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008534:	f000 f99a 	bl	800886c <vPortExitCritical>
}
 8008538:	bf00      	nop
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	200013c4 	.word	0x200013c4
 8008544:	20001394 	.word	0x20001394
 8008548:	200013a8 	.word	0x200013a8
 800854c:	200013bc 	.word	0x200013bc
 8008550:	200013c0 	.word	0x200013c0
 8008554:	20001470 	.word	0x20001470
 8008558:	200013d0 	.word	0x200013d0
 800855c:	08008ee8 	.word	0x08008ee8

08008560 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10b      	bne.n	800858a <pvTimerGetTimerID+0x2a>
	__asm volatile
 8008572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	60fb      	str	r3, [r7, #12]
}
 8008584:	bf00      	nop
 8008586:	bf00      	nop
 8008588:	e7fd      	b.n	8008586 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800858a:	f000 f93d 	bl	8008808 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	69db      	ldr	r3, [r3, #28]
 8008592:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008594:	f000 f96a 	bl	800886c <vPortExitCritical>

	return pvReturn;
 8008598:	693b      	ldr	r3, [r7, #16]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	3b04      	subs	r3, #4
 80085b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80085bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	3b04      	subs	r3, #4
 80085c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	f023 0201 	bic.w	r2, r3, #1
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	3b04      	subs	r3, #4
 80085d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085d4:	4a0c      	ldr	r2, [pc, #48]	@ (8008608 <pxPortInitialiseStack+0x64>)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	3b14      	subs	r3, #20
 80085de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	3b04      	subs	r3, #4
 80085ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f06f 0202 	mvn.w	r2, #2
 80085f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	3b20      	subs	r3, #32
 80085f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085fa:	68fb      	ldr	r3, [r7, #12]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr
 8008608:	0800860d 	.word	0x0800860d

0800860c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008612:	2300      	movs	r3, #0
 8008614:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008616:	4b13      	ldr	r3, [pc, #76]	@ (8008664 <prvTaskExitError+0x58>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800861e:	d00b      	beq.n	8008638 <prvTaskExitError+0x2c>
	__asm volatile
 8008620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	60fb      	str	r3, [r7, #12]
}
 8008632:	bf00      	nop
 8008634:	bf00      	nop
 8008636:	e7fd      	b.n	8008634 <prvTaskExitError+0x28>
	__asm volatile
 8008638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	60bb      	str	r3, [r7, #8]
}
 800864a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800864c:	bf00      	nop
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d0fc      	beq.n	800864e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	2000000c 	.word	0x2000000c
	...

08008670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008670:	4b07      	ldr	r3, [pc, #28]	@ (8008690 <pxCurrentTCBConst2>)
 8008672:	6819      	ldr	r1, [r3, #0]
 8008674:	6808      	ldr	r0, [r1, #0]
 8008676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867a:	f380 8809 	msr	PSP, r0
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f04f 0000 	mov.w	r0, #0
 8008686:	f380 8811 	msr	BASEPRI, r0
 800868a:	4770      	bx	lr
 800868c:	f3af 8000 	nop.w

08008690 <pxCurrentTCBConst2>:
 8008690:	20000e94 	.word	0x20000e94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008694:	bf00      	nop
 8008696:	bf00      	nop

08008698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008698:	4808      	ldr	r0, [pc, #32]	@ (80086bc <prvPortStartFirstTask+0x24>)
 800869a:	6800      	ldr	r0, [r0, #0]
 800869c:	6800      	ldr	r0, [r0, #0]
 800869e:	f380 8808 	msr	MSP, r0
 80086a2:	f04f 0000 	mov.w	r0, #0
 80086a6:	f380 8814 	msr	CONTROL, r0
 80086aa:	b662      	cpsie	i
 80086ac:	b661      	cpsie	f
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	df00      	svc	0
 80086b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80086ba:	bf00      	nop
 80086bc:	e000ed08 	.word	0xe000ed08

080086c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80086c6:	4b47      	ldr	r3, [pc, #284]	@ (80087e4 <xPortStartScheduler+0x124>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a47      	ldr	r2, [pc, #284]	@ (80087e8 <xPortStartScheduler+0x128>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d10b      	bne.n	80086e8 <xPortStartScheduler+0x28>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	60fb      	str	r3, [r7, #12]
}
 80086e2:	bf00      	nop
 80086e4:	bf00      	nop
 80086e6:	e7fd      	b.n	80086e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80086e8:	4b3e      	ldr	r3, [pc, #248]	@ (80087e4 <xPortStartScheduler+0x124>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a3f      	ldr	r2, [pc, #252]	@ (80087ec <xPortStartScheduler+0x12c>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d10b      	bne.n	800870a <xPortStartScheduler+0x4a>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	613b      	str	r3, [r7, #16]
}
 8008704:	bf00      	nop
 8008706:	bf00      	nop
 8008708:	e7fd      	b.n	8008706 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800870a:	4b39      	ldr	r3, [pc, #228]	@ (80087f0 <xPortStartScheduler+0x130>)
 800870c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	b2db      	uxtb	r3, r3
 8008714:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	22ff      	movs	r2, #255	@ 0xff
 800871a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	b2db      	uxtb	r3, r3
 8008722:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	b2db      	uxtb	r3, r3
 8008728:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800872c:	b2da      	uxtb	r2, r3
 800872e:	4b31      	ldr	r3, [pc, #196]	@ (80087f4 <xPortStartScheduler+0x134>)
 8008730:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008732:	4b31      	ldr	r3, [pc, #196]	@ (80087f8 <xPortStartScheduler+0x138>)
 8008734:	2207      	movs	r2, #7
 8008736:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008738:	e009      	b.n	800874e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800873a:	4b2f      	ldr	r3, [pc, #188]	@ (80087f8 <xPortStartScheduler+0x138>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3b01      	subs	r3, #1
 8008740:	4a2d      	ldr	r2, [pc, #180]	@ (80087f8 <xPortStartScheduler+0x138>)
 8008742:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008744:	78fb      	ldrb	r3, [r7, #3]
 8008746:	b2db      	uxtb	r3, r3
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	b2db      	uxtb	r3, r3
 800874c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	b2db      	uxtb	r3, r3
 8008752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008756:	2b80      	cmp	r3, #128	@ 0x80
 8008758:	d0ef      	beq.n	800873a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800875a:	4b27      	ldr	r3, [pc, #156]	@ (80087f8 <xPortStartScheduler+0x138>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f1c3 0307 	rsb	r3, r3, #7
 8008762:	2b04      	cmp	r3, #4
 8008764:	d00b      	beq.n	800877e <xPortStartScheduler+0xbe>
	__asm volatile
 8008766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	60bb      	str	r3, [r7, #8]
}
 8008778:	bf00      	nop
 800877a:	bf00      	nop
 800877c:	e7fd      	b.n	800877a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800877e:	4b1e      	ldr	r3, [pc, #120]	@ (80087f8 <xPortStartScheduler+0x138>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	021b      	lsls	r3, r3, #8
 8008784:	4a1c      	ldr	r2, [pc, #112]	@ (80087f8 <xPortStartScheduler+0x138>)
 8008786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008788:	4b1b      	ldr	r3, [pc, #108]	@ (80087f8 <xPortStartScheduler+0x138>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008790:	4a19      	ldr	r2, [pc, #100]	@ (80087f8 <xPortStartScheduler+0x138>)
 8008792:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	b2da      	uxtb	r2, r3
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800879c:	4b17      	ldr	r3, [pc, #92]	@ (80087fc <xPortStartScheduler+0x13c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a16      	ldr	r2, [pc, #88]	@ (80087fc <xPortStartScheduler+0x13c>)
 80087a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80087a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80087a8:	4b14      	ldr	r3, [pc, #80]	@ (80087fc <xPortStartScheduler+0x13c>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a13      	ldr	r2, [pc, #76]	@ (80087fc <xPortStartScheduler+0x13c>)
 80087ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80087b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80087b4:	f000 f8da 	bl	800896c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80087b8:	4b11      	ldr	r3, [pc, #68]	@ (8008800 <xPortStartScheduler+0x140>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80087be:	f000 f8f9 	bl	80089b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80087c2:	4b10      	ldr	r3, [pc, #64]	@ (8008804 <xPortStartScheduler+0x144>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a0f      	ldr	r2, [pc, #60]	@ (8008804 <xPortStartScheduler+0x144>)
 80087c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80087cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087ce:	f7ff ff63 	bl	8008698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087d2:	f7fe fc77 	bl	80070c4 <vTaskSwitchContext>
	prvTaskExitError();
 80087d6:	f7ff ff19 	bl	800860c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3718      	adds	r7, #24
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	e000ed00 	.word	0xe000ed00
 80087e8:	410fc271 	.word	0x410fc271
 80087ec:	410fc270 	.word	0x410fc270
 80087f0:	e000e400 	.word	0xe000e400
 80087f4:	200014c0 	.word	0x200014c0
 80087f8:	200014c4 	.word	0x200014c4
 80087fc:	e000ed20 	.word	0xe000ed20
 8008800:	2000000c 	.word	0x2000000c
 8008804:	e000ef34 	.word	0xe000ef34

08008808 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	607b      	str	r3, [r7, #4]
}
 8008820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008822:	4b10      	ldr	r3, [pc, #64]	@ (8008864 <vPortEnterCritical+0x5c>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3301      	adds	r3, #1
 8008828:	4a0e      	ldr	r2, [pc, #56]	@ (8008864 <vPortEnterCritical+0x5c>)
 800882a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800882c:	4b0d      	ldr	r3, [pc, #52]	@ (8008864 <vPortEnterCritical+0x5c>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d110      	bne.n	8008856 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008834:	4b0c      	ldr	r3, [pc, #48]	@ (8008868 <vPortEnterCritical+0x60>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00b      	beq.n	8008856 <vPortEnterCritical+0x4e>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	603b      	str	r3, [r7, #0]
}
 8008850:	bf00      	nop
 8008852:	bf00      	nop
 8008854:	e7fd      	b.n	8008852 <vPortEnterCritical+0x4a>
	}
}
 8008856:	bf00      	nop
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	2000000c 	.word	0x2000000c
 8008868:	e000ed04 	.word	0xe000ed04

0800886c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008872:	4b12      	ldr	r3, [pc, #72]	@ (80088bc <vPortExitCritical+0x50>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10b      	bne.n	8008892 <vPortExitCritical+0x26>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	607b      	str	r3, [r7, #4]
}
 800888c:	bf00      	nop
 800888e:	bf00      	nop
 8008890:	e7fd      	b.n	800888e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008892:	4b0a      	ldr	r3, [pc, #40]	@ (80088bc <vPortExitCritical+0x50>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	3b01      	subs	r3, #1
 8008898:	4a08      	ldr	r2, [pc, #32]	@ (80088bc <vPortExitCritical+0x50>)
 800889a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800889c:	4b07      	ldr	r3, [pc, #28]	@ (80088bc <vPortExitCritical+0x50>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d105      	bne.n	80088b0 <vPortExitCritical+0x44>
 80088a4:	2300      	movs	r3, #0
 80088a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	f383 8811 	msr	BASEPRI, r3
}
 80088ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	2000000c 	.word	0x2000000c

080088c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088c0:	f3ef 8009 	mrs	r0, PSP
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	4b15      	ldr	r3, [pc, #84]	@ (8008920 <pxCurrentTCBConst>)
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	f01e 0f10 	tst.w	lr, #16
 80088d0:	bf08      	it	eq
 80088d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088da:	6010      	str	r0, [r2, #0]
 80088dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80088e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80088e4:	f380 8811 	msr	BASEPRI, r0
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f7fe fbe8 	bl	80070c4 <vTaskSwitchContext>
 80088f4:	f04f 0000 	mov.w	r0, #0
 80088f8:	f380 8811 	msr	BASEPRI, r0
 80088fc:	bc09      	pop	{r0, r3}
 80088fe:	6819      	ldr	r1, [r3, #0]
 8008900:	6808      	ldr	r0, [r1, #0]
 8008902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008906:	f01e 0f10 	tst.w	lr, #16
 800890a:	bf08      	it	eq
 800890c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008910:	f380 8809 	msr	PSP, r0
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	f3af 8000 	nop.w

08008920 <pxCurrentTCBConst>:
 8008920:	20000e94 	.word	0x20000e94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008924:	bf00      	nop
 8008926:	bf00      	nop

08008928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	607b      	str	r3, [r7, #4]
}
 8008940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008942:	f7fe fb05 	bl	8006f50 <xTaskIncrementTick>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d003      	beq.n	8008954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800894c:	4b06      	ldr	r3, [pc, #24]	@ (8008968 <xPortSysTickHandler+0x40>)
 800894e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	2300      	movs	r3, #0
 8008956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	f383 8811 	msr	BASEPRI, r3
}
 800895e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008960:	bf00      	nop
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	e000ed04 	.word	0xe000ed04

0800896c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800896c:	b480      	push	{r7}
 800896e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008970:	4b0b      	ldr	r3, [pc, #44]	@ (80089a0 <vPortSetupTimerInterrupt+0x34>)
 8008972:	2200      	movs	r2, #0
 8008974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008976:	4b0b      	ldr	r3, [pc, #44]	@ (80089a4 <vPortSetupTimerInterrupt+0x38>)
 8008978:	2200      	movs	r2, #0
 800897a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800897c:	4b0a      	ldr	r3, [pc, #40]	@ (80089a8 <vPortSetupTimerInterrupt+0x3c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a0a      	ldr	r2, [pc, #40]	@ (80089ac <vPortSetupTimerInterrupt+0x40>)
 8008982:	fba2 2303 	umull	r2, r3, r2, r3
 8008986:	099b      	lsrs	r3, r3, #6
 8008988:	4a09      	ldr	r2, [pc, #36]	@ (80089b0 <vPortSetupTimerInterrupt+0x44>)
 800898a:	3b01      	subs	r3, #1
 800898c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800898e:	4b04      	ldr	r3, [pc, #16]	@ (80089a0 <vPortSetupTimerInterrupt+0x34>)
 8008990:	2207      	movs	r2, #7
 8008992:	601a      	str	r2, [r3, #0]
}
 8008994:	bf00      	nop
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	e000e010 	.word	0xe000e010
 80089a4:	e000e018 	.word	0xe000e018
 80089a8:	20000000 	.word	0x20000000
 80089ac:	10624dd3 	.word	0x10624dd3
 80089b0:	e000e014 	.word	0xe000e014

080089b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80089b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80089c4 <vPortEnableVFP+0x10>
 80089b8:	6801      	ldr	r1, [r0, #0]
 80089ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80089be:	6001      	str	r1, [r0, #0]
 80089c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80089c2:	bf00      	nop
 80089c4:	e000ed88 	.word	0xe000ed88

080089c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80089ce:	f3ef 8305 	mrs	r3, IPSR
 80089d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2b0f      	cmp	r3, #15
 80089d8:	d915      	bls.n	8008a06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80089da:	4a18      	ldr	r2, [pc, #96]	@ (8008a3c <vPortValidateInterruptPriority+0x74>)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	4413      	add	r3, r2
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80089e4:	4b16      	ldr	r3, [pc, #88]	@ (8008a40 <vPortValidateInterruptPriority+0x78>)
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	7afa      	ldrb	r2, [r7, #11]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d20b      	bcs.n	8008a06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	607b      	str	r3, [r7, #4]
}
 8008a00:	bf00      	nop
 8008a02:	bf00      	nop
 8008a04:	e7fd      	b.n	8008a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a06:	4b0f      	ldr	r3, [pc, #60]	@ (8008a44 <vPortValidateInterruptPriority+0x7c>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8008a48 <vPortValidateInterruptPriority+0x80>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d90b      	bls.n	8008a2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	603b      	str	r3, [r7, #0]
}
 8008a28:	bf00      	nop
 8008a2a:	bf00      	nop
 8008a2c:	e7fd      	b.n	8008a2a <vPortValidateInterruptPriority+0x62>
	}
 8008a2e:	bf00      	nop
 8008a30:	3714      	adds	r7, #20
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	e000e3f0 	.word	0xe000e3f0
 8008a40:	200014c0 	.word	0x200014c0
 8008a44:	e000ed0c 	.word	0xe000ed0c
 8008a48:	200014c4 	.word	0x200014c4

08008a4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b08a      	sub	sp, #40	@ 0x28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a54:	2300      	movs	r3, #0
 8008a56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a58:	f7fe f9be 	bl	8006dd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8008bd0 <pvPortMalloc+0x184>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a64:	f000 f924 	bl	8008cb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a68:	4b5a      	ldr	r3, [pc, #360]	@ (8008bd4 <pvPortMalloc+0x188>)
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4013      	ands	r3, r2
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f040 8095 	bne.w	8008ba0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d01e      	beq.n	8008aba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008a7c:	2208      	movs	r2, #8
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4413      	add	r3, r2
 8008a82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f003 0307 	and.w	r3, r3, #7
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d015      	beq.n	8008aba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f023 0307 	bic.w	r3, r3, #7
 8008a94:	3308      	adds	r3, #8
 8008a96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f003 0307 	and.w	r3, r3, #7
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00b      	beq.n	8008aba <pvPortMalloc+0x6e>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	617b      	str	r3, [r7, #20]
}
 8008ab4:	bf00      	nop
 8008ab6:	bf00      	nop
 8008ab8:	e7fd      	b.n	8008ab6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d06f      	beq.n	8008ba0 <pvPortMalloc+0x154>
 8008ac0:	4b45      	ldr	r3, [pc, #276]	@ (8008bd8 <pvPortMalloc+0x18c>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d86a      	bhi.n	8008ba0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008aca:	4b44      	ldr	r3, [pc, #272]	@ (8008bdc <pvPortMalloc+0x190>)
 8008acc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ace:	4b43      	ldr	r3, [pc, #268]	@ (8008bdc <pvPortMalloc+0x190>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ad4:	e004      	b.n	8008ae0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d903      	bls.n	8008af2 <pvPortMalloc+0xa6>
 8008aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1f1      	bne.n	8008ad6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008af2:	4b37      	ldr	r3, [pc, #220]	@ (8008bd0 <pvPortMalloc+0x184>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d051      	beq.n	8008ba0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2208      	movs	r2, #8
 8008b02:	4413      	add	r3, r2
 8008b04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	6a3b      	ldr	r3, [r7, #32]
 8008b0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	1ad2      	subs	r2, r2, r3
 8008b16:	2308      	movs	r3, #8
 8008b18:	005b      	lsls	r3, r3, #1
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d920      	bls.n	8008b60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4413      	add	r3, r2
 8008b24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	f003 0307 	and.w	r3, r3, #7
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <pvPortMalloc+0xfc>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	613b      	str	r3, [r7, #16]
}
 8008b42:	bf00      	nop
 8008b44:	bf00      	nop
 8008b46:	e7fd      	b.n	8008b44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	1ad2      	subs	r2, r2, r3
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b5a:	69b8      	ldr	r0, [r7, #24]
 8008b5c:	f000 f90a 	bl	8008d74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b60:	4b1d      	ldr	r3, [pc, #116]	@ (8008bd8 <pvPortMalloc+0x18c>)
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8008bd8 <pvPortMalloc+0x18c>)
 8008b6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8008bd8 <pvPortMalloc+0x18c>)
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	4b1b      	ldr	r3, [pc, #108]	@ (8008be0 <pvPortMalloc+0x194>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d203      	bcs.n	8008b82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b7a:	4b17      	ldr	r3, [pc, #92]	@ (8008bd8 <pvPortMalloc+0x18c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a18      	ldr	r2, [pc, #96]	@ (8008be0 <pvPortMalloc+0x194>)
 8008b80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	4b13      	ldr	r3, [pc, #76]	@ (8008bd4 <pvPortMalloc+0x188>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b92:	2200      	movs	r2, #0
 8008b94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b96:	4b13      	ldr	r3, [pc, #76]	@ (8008be4 <pvPortMalloc+0x198>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	4a11      	ldr	r2, [pc, #68]	@ (8008be4 <pvPortMalloc+0x198>)
 8008b9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ba0:	f7fe f928 	bl	8006df4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	f003 0307 	and.w	r3, r3, #7
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00b      	beq.n	8008bc6 <pvPortMalloc+0x17a>
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	60fb      	str	r3, [r7, #12]
}
 8008bc0:	bf00      	nop
 8008bc2:	bf00      	nop
 8008bc4:	e7fd      	b.n	8008bc2 <pvPortMalloc+0x176>
	return pvReturn;
 8008bc6:	69fb      	ldr	r3, [r7, #28]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3728      	adds	r7, #40	@ 0x28
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	20002088 	.word	0x20002088
 8008bd4:	2000209c 	.word	0x2000209c
 8008bd8:	2000208c 	.word	0x2000208c
 8008bdc:	20002080 	.word	0x20002080
 8008be0:	20002090 	.word	0x20002090
 8008be4:	20002094 	.word	0x20002094

08008be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d04f      	beq.n	8008c9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008bfa:	2308      	movs	r3, #8
 8008bfc:	425b      	negs	r3, r3
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	4413      	add	r3, r2
 8008c02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	4b25      	ldr	r3, [pc, #148]	@ (8008ca4 <vPortFree+0xbc>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4013      	ands	r3, r2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10b      	bne.n	8008c2e <vPortFree+0x46>
	__asm volatile
 8008c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	60fb      	str	r3, [r7, #12]
}
 8008c28:	bf00      	nop
 8008c2a:	bf00      	nop
 8008c2c:	e7fd      	b.n	8008c2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00b      	beq.n	8008c4e <vPortFree+0x66>
	__asm volatile
 8008c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	60bb      	str	r3, [r7, #8]
}
 8008c48:	bf00      	nop
 8008c4a:	bf00      	nop
 8008c4c:	e7fd      	b.n	8008c4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	4b14      	ldr	r3, [pc, #80]	@ (8008ca4 <vPortFree+0xbc>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4013      	ands	r3, r2
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d01e      	beq.n	8008c9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d11a      	bne.n	8008c9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	4b0e      	ldr	r3, [pc, #56]	@ (8008ca4 <vPortFree+0xbc>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	43db      	mvns	r3, r3
 8008c6e:	401a      	ands	r2, r3
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c74:	f7fe f8b0 	bl	8006dd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ca8 <vPortFree+0xc0>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4413      	add	r3, r2
 8008c82:	4a09      	ldr	r2, [pc, #36]	@ (8008ca8 <vPortFree+0xc0>)
 8008c84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c86:	6938      	ldr	r0, [r7, #16]
 8008c88:	f000 f874 	bl	8008d74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c8c:	4b07      	ldr	r3, [pc, #28]	@ (8008cac <vPortFree+0xc4>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3301      	adds	r3, #1
 8008c92:	4a06      	ldr	r2, [pc, #24]	@ (8008cac <vPortFree+0xc4>)
 8008c94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c96:	f7fe f8ad 	bl	8006df4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c9a:	bf00      	nop
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	2000209c 	.word	0x2000209c
 8008ca8:	2000208c 	.word	0x2000208c
 8008cac:	20002098 	.word	0x20002098

08008cb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008cb6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008cba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008cbc:	4b27      	ldr	r3, [pc, #156]	@ (8008d5c <prvHeapInit+0xac>)
 8008cbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f003 0307 	and.w	r3, r3, #7
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00c      	beq.n	8008ce4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3307      	adds	r3, #7
 8008cce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f023 0307 	bic.w	r3, r3, #7
 8008cd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	4a1f      	ldr	r2, [pc, #124]	@ (8008d5c <prvHeapInit+0xac>)
 8008ce0:	4413      	add	r3, r2
 8008ce2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8008d60 <prvHeapInit+0xb0>)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008cee:	4b1c      	ldr	r3, [pc, #112]	@ (8008d60 <prvHeapInit+0xb0>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008cfc:	2208      	movs	r2, #8
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	1a9b      	subs	r3, r3, r2
 8008d02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f023 0307 	bic.w	r3, r3, #7
 8008d0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	4a15      	ldr	r2, [pc, #84]	@ (8008d64 <prvHeapInit+0xb4>)
 8008d10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d12:	4b14      	ldr	r3, [pc, #80]	@ (8008d64 <prvHeapInit+0xb4>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2200      	movs	r2, #0
 8008d18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d1a:	4b12      	ldr	r3, [pc, #72]	@ (8008d64 <prvHeapInit+0xb4>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	1ad2      	subs	r2, r2, r3
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d30:	4b0c      	ldr	r3, [pc, #48]	@ (8008d64 <prvHeapInit+0xb4>)
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8008d68 <prvHeapInit+0xb8>)
 8008d3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	4a09      	ldr	r2, [pc, #36]	@ (8008d6c <prvHeapInit+0xbc>)
 8008d46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d48:	4b09      	ldr	r3, [pc, #36]	@ (8008d70 <prvHeapInit+0xc0>)
 8008d4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008d4e:	601a      	str	r2, [r3, #0]
}
 8008d50:	bf00      	nop
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr
 8008d5c:	200014c8 	.word	0x200014c8
 8008d60:	20002080 	.word	0x20002080
 8008d64:	20002088 	.word	0x20002088
 8008d68:	20002090 	.word	0x20002090
 8008d6c:	2000208c 	.word	0x2000208c
 8008d70:	2000209c 	.word	0x2000209c

08008d74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d7c:	4b28      	ldr	r3, [pc, #160]	@ (8008e20 <prvInsertBlockIntoFreeList+0xac>)
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	e002      	b.n	8008d88 <prvInsertBlockIntoFreeList+0x14>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d8f7      	bhi.n	8008d82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d108      	bne.n	8008db6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	441a      	add	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	441a      	add	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d118      	bne.n	8008dfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	4b15      	ldr	r3, [pc, #84]	@ (8008e24 <prvInsertBlockIntoFreeList+0xb0>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d00d      	beq.n	8008df2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685a      	ldr	r2, [r3, #4]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	441a      	add	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	601a      	str	r2, [r3, #0]
 8008df0:	e008      	b.n	8008e04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008df2:	4b0c      	ldr	r3, [pc, #48]	@ (8008e24 <prvInsertBlockIntoFreeList+0xb0>)
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	601a      	str	r2, [r3, #0]
 8008dfa:	e003      	b.n	8008e04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d002      	beq.n	8008e12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e12:	bf00      	nop
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	20002080 	.word	0x20002080
 8008e24:	20002088 	.word	0x20002088

08008e28 <memset>:
 8008e28:	4402      	add	r2, r0
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d100      	bne.n	8008e32 <memset+0xa>
 8008e30:	4770      	bx	lr
 8008e32:	f803 1b01 	strb.w	r1, [r3], #1
 8008e36:	e7f9      	b.n	8008e2c <memset+0x4>

08008e38 <__libc_init_array>:
 8008e38:	b570      	push	{r4, r5, r6, lr}
 8008e3a:	4d0d      	ldr	r5, [pc, #52]	@ (8008e70 <__libc_init_array+0x38>)
 8008e3c:	4c0d      	ldr	r4, [pc, #52]	@ (8008e74 <__libc_init_array+0x3c>)
 8008e3e:	1b64      	subs	r4, r4, r5
 8008e40:	10a4      	asrs	r4, r4, #2
 8008e42:	2600      	movs	r6, #0
 8008e44:	42a6      	cmp	r6, r4
 8008e46:	d109      	bne.n	8008e5c <__libc_init_array+0x24>
 8008e48:	4d0b      	ldr	r5, [pc, #44]	@ (8008e78 <__libc_init_array+0x40>)
 8008e4a:	4c0c      	ldr	r4, [pc, #48]	@ (8008e7c <__libc_init_array+0x44>)
 8008e4c:	f000 f826 	bl	8008e9c <_init>
 8008e50:	1b64      	subs	r4, r4, r5
 8008e52:	10a4      	asrs	r4, r4, #2
 8008e54:	2600      	movs	r6, #0
 8008e56:	42a6      	cmp	r6, r4
 8008e58:	d105      	bne.n	8008e66 <__libc_init_array+0x2e>
 8008e5a:	bd70      	pop	{r4, r5, r6, pc}
 8008e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e60:	4798      	blx	r3
 8008e62:	3601      	adds	r6, #1
 8008e64:	e7ee      	b.n	8008e44 <__libc_init_array+0xc>
 8008e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e6a:	4798      	blx	r3
 8008e6c:	3601      	adds	r6, #1
 8008e6e:	e7f2      	b.n	8008e56 <__libc_init_array+0x1e>
 8008e70:	08008fac 	.word	0x08008fac
 8008e74:	08008fac 	.word	0x08008fac
 8008e78:	08008fac 	.word	0x08008fac
 8008e7c:	08008fb0 	.word	0x08008fb0

08008e80 <memcpy>:
 8008e80:	440a      	add	r2, r1
 8008e82:	4291      	cmp	r1, r2
 8008e84:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008e88:	d100      	bne.n	8008e8c <memcpy+0xc>
 8008e8a:	4770      	bx	lr
 8008e8c:	b510      	push	{r4, lr}
 8008e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e96:	4291      	cmp	r1, r2
 8008e98:	d1f9      	bne.n	8008e8e <memcpy+0xe>
 8008e9a:	bd10      	pop	{r4, pc}

08008e9c <_init>:
 8008e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9e:	bf00      	nop
 8008ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ea2:	bc08      	pop	{r3}
 8008ea4:	469e      	mov	lr, r3
 8008ea6:	4770      	bx	lr

08008ea8 <_fini>:
 8008ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eaa:	bf00      	nop
 8008eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eae:	bc08      	pop	{r3}
 8008eb0:	469e      	mov	lr, r3
 8008eb2:	4770      	bx	lr
