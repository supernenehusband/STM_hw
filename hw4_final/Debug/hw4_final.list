
hw4_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bda4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800bf34  0800bf34  0000cf34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c124  0800c124  0000e0b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c124  0800c124  0000d124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c12c  0800c12c  0000e0b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c12c  0800c12c  0000d12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c130  0800c130  0000d130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b8  20000000  0800c134  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d9c  200000b8  0800c1ec  0000e0b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e54  0800c1ec  0000ee54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e0b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dbc1  00000000  00000000  0000e0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000660b  00000000  00000000  0003bca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002988  00000000  00000000  000422b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000202d  00000000  00000000  00044c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031b14  00000000  00000000  00046c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033d06  00000000  00000000  00078781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001155e7  00000000  00000000  000ac487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c1a6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b9e8  00000000  00000000  001c1ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001cd49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bf1c 	.word	0x0800bf1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	0800bf1c 	.word	0x0800bf1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2f>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000600:	bf24      	itt	cs
 8000602:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000606:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800060a:	d90d      	bls.n	8000628 <__aeabi_d2f+0x30>
 800060c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000610:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000614:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000618:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800061c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000620:	bf08      	it	eq
 8000622:	f020 0001 	biceq.w	r0, r0, #1
 8000626:	4770      	bx	lr
 8000628:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800062c:	d121      	bne.n	8000672 <__aeabi_d2f+0x7a>
 800062e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000632:	bfbc      	itt	lt
 8000634:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000638:	4770      	bxlt	lr
 800063a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000642:	f1c2 0218 	rsb	r2, r2, #24
 8000646:	f1c2 0c20 	rsb	ip, r2, #32
 800064a:	fa10 f30c 	lsls.w	r3, r0, ip
 800064e:	fa20 f002 	lsr.w	r0, r0, r2
 8000652:	bf18      	it	ne
 8000654:	f040 0001 	orrne.w	r0, r0, #1
 8000658:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800065c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000660:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000664:	ea40 000c 	orr.w	r0, r0, ip
 8000668:	fa23 f302 	lsr.w	r3, r3, r2
 800066c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000670:	e7cc      	b.n	800060c <__aeabi_d2f+0x14>
 8000672:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000676:	d107      	bne.n	8000688 <__aeabi_d2f+0x90>
 8000678:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800067c:	bf1e      	ittt	ne
 800067e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000682:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000686:	4770      	bxne	lr
 8000688:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800068c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000690:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop

08000698 <__aeabi_uldivmod>:
 8000698:	b953      	cbnz	r3, 80006b0 <__aeabi_uldivmod+0x18>
 800069a:	b94a      	cbnz	r2, 80006b0 <__aeabi_uldivmod+0x18>
 800069c:	2900      	cmp	r1, #0
 800069e:	bf08      	it	eq
 80006a0:	2800      	cmpeq	r0, #0
 80006a2:	bf1c      	itt	ne
 80006a4:	f04f 31ff 	movne.w	r1, #4294967295
 80006a8:	f04f 30ff 	movne.w	r0, #4294967295
 80006ac:	f000 b988 	b.w	80009c0 <__aeabi_idiv0>
 80006b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b8:	f000 f806 	bl	80006c8 <__udivmoddi4>
 80006bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c4:	b004      	add	sp, #16
 80006c6:	4770      	bx	lr

080006c8 <__udivmoddi4>:
 80006c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006cc:	9d08      	ldr	r5, [sp, #32]
 80006ce:	468e      	mov	lr, r1
 80006d0:	4604      	mov	r4, r0
 80006d2:	4688      	mov	r8, r1
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d14a      	bne.n	800076e <__udivmoddi4+0xa6>
 80006d8:	428a      	cmp	r2, r1
 80006da:	4617      	mov	r7, r2
 80006dc:	d962      	bls.n	80007a4 <__udivmoddi4+0xdc>
 80006de:	fab2 f682 	clz	r6, r2
 80006e2:	b14e      	cbz	r6, 80006f8 <__udivmoddi4+0x30>
 80006e4:	f1c6 0320 	rsb	r3, r6, #32
 80006e8:	fa01 f806 	lsl.w	r8, r1, r6
 80006ec:	fa20 f303 	lsr.w	r3, r0, r3
 80006f0:	40b7      	lsls	r7, r6
 80006f2:	ea43 0808 	orr.w	r8, r3, r8
 80006f6:	40b4      	lsls	r4, r6
 80006f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006fc:	fa1f fc87 	uxth.w	ip, r7
 8000700:	fbb8 f1fe 	udiv	r1, r8, lr
 8000704:	0c23      	lsrs	r3, r4, #16
 8000706:	fb0e 8811 	mls	r8, lr, r1, r8
 800070a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800070e:	fb01 f20c 	mul.w	r2, r1, ip
 8000712:	429a      	cmp	r2, r3
 8000714:	d909      	bls.n	800072a <__udivmoddi4+0x62>
 8000716:	18fb      	adds	r3, r7, r3
 8000718:	f101 30ff 	add.w	r0, r1, #4294967295
 800071c:	f080 80ea 	bcs.w	80008f4 <__udivmoddi4+0x22c>
 8000720:	429a      	cmp	r2, r3
 8000722:	f240 80e7 	bls.w	80008f4 <__udivmoddi4+0x22c>
 8000726:	3902      	subs	r1, #2
 8000728:	443b      	add	r3, r7
 800072a:	1a9a      	subs	r2, r3, r2
 800072c:	b2a3      	uxth	r3, r4
 800072e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000732:	fb0e 2210 	mls	r2, lr, r0, r2
 8000736:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800073a:	fb00 fc0c 	mul.w	ip, r0, ip
 800073e:	459c      	cmp	ip, r3
 8000740:	d909      	bls.n	8000756 <__udivmoddi4+0x8e>
 8000742:	18fb      	adds	r3, r7, r3
 8000744:	f100 32ff 	add.w	r2, r0, #4294967295
 8000748:	f080 80d6 	bcs.w	80008f8 <__udivmoddi4+0x230>
 800074c:	459c      	cmp	ip, r3
 800074e:	f240 80d3 	bls.w	80008f8 <__udivmoddi4+0x230>
 8000752:	443b      	add	r3, r7
 8000754:	3802      	subs	r0, #2
 8000756:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800075a:	eba3 030c 	sub.w	r3, r3, ip
 800075e:	2100      	movs	r1, #0
 8000760:	b11d      	cbz	r5, 800076a <__udivmoddi4+0xa2>
 8000762:	40f3      	lsrs	r3, r6
 8000764:	2200      	movs	r2, #0
 8000766:	e9c5 3200 	strd	r3, r2, [r5]
 800076a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800076e:	428b      	cmp	r3, r1
 8000770:	d905      	bls.n	800077e <__udivmoddi4+0xb6>
 8000772:	b10d      	cbz	r5, 8000778 <__udivmoddi4+0xb0>
 8000774:	e9c5 0100 	strd	r0, r1, [r5]
 8000778:	2100      	movs	r1, #0
 800077a:	4608      	mov	r0, r1
 800077c:	e7f5      	b.n	800076a <__udivmoddi4+0xa2>
 800077e:	fab3 f183 	clz	r1, r3
 8000782:	2900      	cmp	r1, #0
 8000784:	d146      	bne.n	8000814 <__udivmoddi4+0x14c>
 8000786:	4573      	cmp	r3, lr
 8000788:	d302      	bcc.n	8000790 <__udivmoddi4+0xc8>
 800078a:	4282      	cmp	r2, r0
 800078c:	f200 8105 	bhi.w	800099a <__udivmoddi4+0x2d2>
 8000790:	1a84      	subs	r4, r0, r2
 8000792:	eb6e 0203 	sbc.w	r2, lr, r3
 8000796:	2001      	movs	r0, #1
 8000798:	4690      	mov	r8, r2
 800079a:	2d00      	cmp	r5, #0
 800079c:	d0e5      	beq.n	800076a <__udivmoddi4+0xa2>
 800079e:	e9c5 4800 	strd	r4, r8, [r5]
 80007a2:	e7e2      	b.n	800076a <__udivmoddi4+0xa2>
 80007a4:	2a00      	cmp	r2, #0
 80007a6:	f000 8090 	beq.w	80008ca <__udivmoddi4+0x202>
 80007aa:	fab2 f682 	clz	r6, r2
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	f040 80a4 	bne.w	80008fc <__udivmoddi4+0x234>
 80007b4:	1a8a      	subs	r2, r1, r2
 80007b6:	0c03      	lsrs	r3, r0, #16
 80007b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007bc:	b280      	uxth	r0, r0
 80007be:	b2bc      	uxth	r4, r7
 80007c0:	2101      	movs	r1, #1
 80007c2:	fbb2 fcfe 	udiv	ip, r2, lr
 80007c6:	fb0e 221c 	mls	r2, lr, ip, r2
 80007ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007ce:	fb04 f20c 	mul.w	r2, r4, ip
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d907      	bls.n	80007e6 <__udivmoddi4+0x11e>
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80007dc:	d202      	bcs.n	80007e4 <__udivmoddi4+0x11c>
 80007de:	429a      	cmp	r2, r3
 80007e0:	f200 80e0 	bhi.w	80009a4 <__udivmoddi4+0x2dc>
 80007e4:	46c4      	mov	ip, r8
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	fbb3 f2fe 	udiv	r2, r3, lr
 80007ec:	fb0e 3312 	mls	r3, lr, r2, r3
 80007f0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80007f4:	fb02 f404 	mul.w	r4, r2, r4
 80007f8:	429c      	cmp	r4, r3
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0x144>
 80007fc:	18fb      	adds	r3, r7, r3
 80007fe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0x142>
 8000804:	429c      	cmp	r4, r3
 8000806:	f200 80ca 	bhi.w	800099e <__udivmoddi4+0x2d6>
 800080a:	4602      	mov	r2, r0
 800080c:	1b1b      	subs	r3, r3, r4
 800080e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000812:	e7a5      	b.n	8000760 <__udivmoddi4+0x98>
 8000814:	f1c1 0620 	rsb	r6, r1, #32
 8000818:	408b      	lsls	r3, r1
 800081a:	fa22 f706 	lsr.w	r7, r2, r6
 800081e:	431f      	orrs	r7, r3
 8000820:	fa0e f401 	lsl.w	r4, lr, r1
 8000824:	fa20 f306 	lsr.w	r3, r0, r6
 8000828:	fa2e fe06 	lsr.w	lr, lr, r6
 800082c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000830:	4323      	orrs	r3, r4
 8000832:	fa00 f801 	lsl.w	r8, r0, r1
 8000836:	fa1f fc87 	uxth.w	ip, r7
 800083a:	fbbe f0f9 	udiv	r0, lr, r9
 800083e:	0c1c      	lsrs	r4, r3, #16
 8000840:	fb09 ee10 	mls	lr, r9, r0, lr
 8000844:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000848:	fb00 fe0c 	mul.w	lr, r0, ip
 800084c:	45a6      	cmp	lr, r4
 800084e:	fa02 f201 	lsl.w	r2, r2, r1
 8000852:	d909      	bls.n	8000868 <__udivmoddi4+0x1a0>
 8000854:	193c      	adds	r4, r7, r4
 8000856:	f100 3aff 	add.w	sl, r0, #4294967295
 800085a:	f080 809c 	bcs.w	8000996 <__udivmoddi4+0x2ce>
 800085e:	45a6      	cmp	lr, r4
 8000860:	f240 8099 	bls.w	8000996 <__udivmoddi4+0x2ce>
 8000864:	3802      	subs	r0, #2
 8000866:	443c      	add	r4, r7
 8000868:	eba4 040e 	sub.w	r4, r4, lr
 800086c:	fa1f fe83 	uxth.w	lr, r3
 8000870:	fbb4 f3f9 	udiv	r3, r4, r9
 8000874:	fb09 4413 	mls	r4, r9, r3, r4
 8000878:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800087c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000880:	45a4      	cmp	ip, r4
 8000882:	d908      	bls.n	8000896 <__udivmoddi4+0x1ce>
 8000884:	193c      	adds	r4, r7, r4
 8000886:	f103 3eff 	add.w	lr, r3, #4294967295
 800088a:	f080 8082 	bcs.w	8000992 <__udivmoddi4+0x2ca>
 800088e:	45a4      	cmp	ip, r4
 8000890:	d97f      	bls.n	8000992 <__udivmoddi4+0x2ca>
 8000892:	3b02      	subs	r3, #2
 8000894:	443c      	add	r4, r7
 8000896:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800089a:	eba4 040c 	sub.w	r4, r4, ip
 800089e:	fba0 ec02 	umull	lr, ip, r0, r2
 80008a2:	4564      	cmp	r4, ip
 80008a4:	4673      	mov	r3, lr
 80008a6:	46e1      	mov	r9, ip
 80008a8:	d362      	bcc.n	8000970 <__udivmoddi4+0x2a8>
 80008aa:	d05f      	beq.n	800096c <__udivmoddi4+0x2a4>
 80008ac:	b15d      	cbz	r5, 80008c6 <__udivmoddi4+0x1fe>
 80008ae:	ebb8 0203 	subs.w	r2, r8, r3
 80008b2:	eb64 0409 	sbc.w	r4, r4, r9
 80008b6:	fa04 f606 	lsl.w	r6, r4, r6
 80008ba:	fa22 f301 	lsr.w	r3, r2, r1
 80008be:	431e      	orrs	r6, r3
 80008c0:	40cc      	lsrs	r4, r1
 80008c2:	e9c5 6400 	strd	r6, r4, [r5]
 80008c6:	2100      	movs	r1, #0
 80008c8:	e74f      	b.n	800076a <__udivmoddi4+0xa2>
 80008ca:	fbb1 fcf2 	udiv	ip, r1, r2
 80008ce:	0c01      	lsrs	r1, r0, #16
 80008d0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80008d4:	b280      	uxth	r0, r0
 80008d6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80008da:	463b      	mov	r3, r7
 80008dc:	4638      	mov	r0, r7
 80008de:	463c      	mov	r4, r7
 80008e0:	46b8      	mov	r8, r7
 80008e2:	46be      	mov	lr, r7
 80008e4:	2620      	movs	r6, #32
 80008e6:	fbb1 f1f7 	udiv	r1, r1, r7
 80008ea:	eba2 0208 	sub.w	r2, r2, r8
 80008ee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80008f2:	e766      	b.n	80007c2 <__udivmoddi4+0xfa>
 80008f4:	4601      	mov	r1, r0
 80008f6:	e718      	b.n	800072a <__udivmoddi4+0x62>
 80008f8:	4610      	mov	r0, r2
 80008fa:	e72c      	b.n	8000756 <__udivmoddi4+0x8e>
 80008fc:	f1c6 0220 	rsb	r2, r6, #32
 8000900:	fa2e f302 	lsr.w	r3, lr, r2
 8000904:	40b7      	lsls	r7, r6
 8000906:	40b1      	lsls	r1, r6
 8000908:	fa20 f202 	lsr.w	r2, r0, r2
 800090c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000910:	430a      	orrs	r2, r1
 8000912:	fbb3 f8fe 	udiv	r8, r3, lr
 8000916:	b2bc      	uxth	r4, r7
 8000918:	fb0e 3318 	mls	r3, lr, r8, r3
 800091c:	0c11      	lsrs	r1, r2, #16
 800091e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000922:	fb08 f904 	mul.w	r9, r8, r4
 8000926:	40b0      	lsls	r0, r6
 8000928:	4589      	cmp	r9, r1
 800092a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800092e:	b280      	uxth	r0, r0
 8000930:	d93e      	bls.n	80009b0 <__udivmoddi4+0x2e8>
 8000932:	1879      	adds	r1, r7, r1
 8000934:	f108 3cff 	add.w	ip, r8, #4294967295
 8000938:	d201      	bcs.n	800093e <__udivmoddi4+0x276>
 800093a:	4589      	cmp	r9, r1
 800093c:	d81f      	bhi.n	800097e <__udivmoddi4+0x2b6>
 800093e:	eba1 0109 	sub.w	r1, r1, r9
 8000942:	fbb1 f9fe 	udiv	r9, r1, lr
 8000946:	fb09 f804 	mul.w	r8, r9, r4
 800094a:	fb0e 1119 	mls	r1, lr, r9, r1
 800094e:	b292      	uxth	r2, r2
 8000950:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000954:	4542      	cmp	r2, r8
 8000956:	d229      	bcs.n	80009ac <__udivmoddi4+0x2e4>
 8000958:	18ba      	adds	r2, r7, r2
 800095a:	f109 31ff 	add.w	r1, r9, #4294967295
 800095e:	d2c4      	bcs.n	80008ea <__udivmoddi4+0x222>
 8000960:	4542      	cmp	r2, r8
 8000962:	d2c2      	bcs.n	80008ea <__udivmoddi4+0x222>
 8000964:	f1a9 0102 	sub.w	r1, r9, #2
 8000968:	443a      	add	r2, r7
 800096a:	e7be      	b.n	80008ea <__udivmoddi4+0x222>
 800096c:	45f0      	cmp	r8, lr
 800096e:	d29d      	bcs.n	80008ac <__udivmoddi4+0x1e4>
 8000970:	ebbe 0302 	subs.w	r3, lr, r2
 8000974:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000978:	3801      	subs	r0, #1
 800097a:	46e1      	mov	r9, ip
 800097c:	e796      	b.n	80008ac <__udivmoddi4+0x1e4>
 800097e:	eba7 0909 	sub.w	r9, r7, r9
 8000982:	4449      	add	r1, r9
 8000984:	f1a8 0c02 	sub.w	ip, r8, #2
 8000988:	fbb1 f9fe 	udiv	r9, r1, lr
 800098c:	fb09 f804 	mul.w	r8, r9, r4
 8000990:	e7db      	b.n	800094a <__udivmoddi4+0x282>
 8000992:	4673      	mov	r3, lr
 8000994:	e77f      	b.n	8000896 <__udivmoddi4+0x1ce>
 8000996:	4650      	mov	r0, sl
 8000998:	e766      	b.n	8000868 <__udivmoddi4+0x1a0>
 800099a:	4608      	mov	r0, r1
 800099c:	e6fd      	b.n	800079a <__udivmoddi4+0xd2>
 800099e:	443b      	add	r3, r7
 80009a0:	3a02      	subs	r2, #2
 80009a2:	e733      	b.n	800080c <__udivmoddi4+0x144>
 80009a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009a8:	443b      	add	r3, r7
 80009aa:	e71c      	b.n	80007e6 <__udivmoddi4+0x11e>
 80009ac:	4649      	mov	r1, r9
 80009ae:	e79c      	b.n	80008ea <__udivmoddi4+0x222>
 80009b0:	eba1 0109 	sub.w	r1, r1, r9
 80009b4:	46c4      	mov	ip, r8
 80009b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ba:	fb09 f804 	mul.w	r8, r9, r4
 80009be:	e7c4      	b.n	800094a <__udivmoddi4+0x282>

080009c0 <__aeabi_idiv0>:
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 80009c4:	b5b0      	push	{r4, r5, r7, lr}
 80009c6:	b08a      	sub	sp, #40	@ 0x28
 80009c8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 80009ca:	4b4e      	ldr	r3, [pc, #312]	@ (8000b04 <MX_BlueNRG_MS_Init+0x140>)
 80009cc:	617b      	str	r3, [r7, #20]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 80009ce:	f000 f8ad 	bl	8000b2c <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f002 fa0a 	bl	8002dec <BSP_PB_GetState>
 80009d8:	4603      	mov	r3, r0
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b4a      	ldr	r3, [pc, #296]	@ (8000b08 <MX_BlueNRG_MS_Init+0x144>)
 80009de:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 80009e0:	2100      	movs	r1, #0
 80009e2:	484a      	ldr	r0, [pc, #296]	@ (8000b0c <MX_BlueNRG_MS_Init+0x148>)
 80009e4:	f008 fd06 	bl	80093f4 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 80009e8:	1dba      	adds	r2, r7, #6
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	4611      	mov	r1, r2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f008 fb74 	bl	80090de <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 80009f6:	f008 fbb4 	bl	8009162 <hci_reset>
  HAL_Delay(100);
 80009fa:	2064      	movs	r0, #100	@ 0x64
 80009fc:	f002 fe3c 	bl	8003678 <HAL_Delay>

  PRINTF("HWver %d\nFWver %d\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000a00:	7a3b      	ldrb	r3, [r7, #8]
 8000a02:	2b30      	cmp	r3, #48	@ 0x30
 8000a04:	d902      	bls.n	8000a0c <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 8000a06:	4b42      	ldr	r3, [pc, #264]	@ (8000b10 <MX_BlueNRG_MS_Init+0x14c>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 8000a0c:	f107 0209 	add.w	r2, r7, #9
 8000a10:	4b40      	ldr	r3, [pc, #256]	@ (8000b14 <MX_BlueNRG_MS_Init+0x150>)
 8000a12:	2106      	movs	r1, #6
 8000a14:	2080      	movs	r0, #128	@ 0x80
 8000a16:	f008 fadc 	bl	8008fd2 <aci_hal_read_config_data>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	613b      	str	r3, [r7, #16]

  if (ret) {
    PRINTF("Read Static Random address failed.\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8000a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b14 <MX_BlueNRG_MS_Init+0x150>)
 8000a20:	795b      	ldrb	r3, [r3, #5]
 8000a22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000a26:	2bc0      	cmp	r3, #192	@ 0xc0
 8000a28:	d001      	beq.n	8000a2e <MX_BlueNRG_MS_Init+0x6a>
    PRINTF("Static Random address not well formed.\n");
    while(1);
 8000a2a:	bf00      	nop
 8000a2c:	e7fd      	b.n	8000a2a <MX_BlueNRG_MS_Init+0x66>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8000a2e:	f008 f89c 	bl	8008b6a <aci_gatt_init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	613b      	str	r3, [r7, #16]
  if(ret){
    PRINTF("GATT_Init failed.\n");
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 8000a36:	4b36      	ldr	r3, [pc, #216]	@ (8000b10 <MX_BlueNRG_MS_Init+0x14c>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d110      	bne.n	8000a60 <MX_BlueNRG_MS_Init+0x9c>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000a3e:	f107 020e 	add.w	r2, r7, #14
 8000a42:	f107 030a 	add.w	r3, r7, #10
 8000a46:	9301      	str	r3, [sp, #4]
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	2207      	movs	r2, #7
 8000a52:	2100      	movs	r1, #0
 8000a54:	2001      	movs	r0, #1
 8000a56:	f007 fe5c 	bl	8008712 <aci_gap_init_IDB05A1>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	e00a      	b.n	8000a76 <MX_BlueNRG_MS_Init+0xb2>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000a60:	f107 030a 	add.w	r3, r7, #10
 8000a64:	f107 020c 	add.w	r2, r7, #12
 8000a68:	f107 010e 	add.w	r1, r7, #14
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f007 fea0 	bl	80087b2 <aci_gap_init_IDB04A1>
 8000a72:	4603      	mov	r3, r0
 8000a74:	613b      	str	r3, [r7, #16]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("GAP_Init failed.\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000a76:	89fc      	ldrh	r4, [r7, #14]
 8000a78:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8000a7a:	6978      	ldr	r0, [r7, #20]
 8000a7c:	f7ff fba8 	bl	80001d0 <strlen>
 8000a80:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	4629      	mov	r1, r5
 8000a8e:	4620      	mov	r0, r4
 8000a90:	f008 f9e2 	bl	8008e58 <aci_gatt_update_char_value>
 8000a94:	4603      	mov	r3, r0
 8000a96:	613b      	str	r3, [r7, #16]
  if (ret) {
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_BlueNRG_MS_Init+0xde>
    PRINTF("aci_gatt_update_char_value failed.\n");
    while(1);
 8000a9e:	bf00      	nop
 8000aa0:	e7fd      	b.n	8000a9e <MX_BlueNRG_MS_Init+0xda>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	9303      	str	r3, [sp, #12]
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b18 <MX_BlueNRG_MS_Init+0x154>)
 8000aa8:	9302      	str	r3, [sp, #8]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	9301      	str	r3, [sp, #4]
 8000aae:	2310      	movs	r3, #16
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f007 ffae 	bl	8008a1a <aci_gap_set_auth_requirement>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	613b      	str	r3, [r7, #16]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_BlueNRG_MS_Init+0x108>
    PRINTF("aci_gap_set_authentication_requirement failed.\n");
    while(1);
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <MX_BlueNRG_MS_Init+0x104>
  }

  PRINTF("BLE Stack Initialized\n");

  ret = Add_HWServW2ST_Service();
 8000acc:	f000 fa30 	bl	8000f30 <Add_HWServW2ST_Service>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_BlueNRG_MS_Init+0x11a>
    PRINTF("BlueMS HW service added successfully.\n");
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
 8000ada:	bf00      	nop
 8000adc:	e7fd      	b.n	8000ada <MX_BlueNRG_MS_Init+0x116>
  }

  ret = Add_SWServW2ST_Service();
 8000ade:	f000 faf9 	bl	80010d4 <Add_SWServW2ST_Service>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	613b      	str	r3, [r7, #16]
  if(ret == BLE_STATUS_SUCCESS) {
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_BlueNRG_MS_Init+0x12c>
     PRINTF("BlueMS SW service added successfully.\n");
  } else {
     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
     while(1);
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <MX_BlueNRG_MS_Init+0x128>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8000af0:	2104      	movs	r1, #4
 8000af2:	2001      	movs	r0, #1
 8000af4:	f008 fac2 	bl	800907c <aci_hal_set_tx_power_level>
 8000af8:	4603      	mov	r3, r0
 8000afa:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8000afc:	bf00      	nop
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bdb0      	pop	{r4, r5, r7, pc}
 8000b04:	0800bf34 	.word	0x0800bf34
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	08001699 	.word	0x08001699
 8000b10:	200000d4 	.word	0x200000d4
 8000b14:	200000d8 	.word	0x200000d8
 8000b18:	0001e240 	.word	0x0001e240

08000b1c <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 8000b20:	f000 f810 	bl	8000b44 <User_Process>
  hci_user_evt_proc();
 8000b24:	f008 fde0 	bl	80096e8 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000b30:	2101      	movs	r1, #1
 8000b32:	2000      	movs	r0, #0
 8000b34:	f002 f906 	bl	8002d44 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f002 f89b 	bl	8002c74 <BSP_LED_Init>

//  BSP_COM_Init(COM1);
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  if (set_connectable)
 8000b4a:	4b34      	ldr	r3, [pc, #208]	@ (8000c1c <User_Process+0xd8>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d004      	beq.n	8000b5e <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 8000b54:	f000 fd2c 	bl	80015b0 <Set_DeviceConnectable>
    set_connectable = FALSE;
 8000b58:	4b30      	ldr	r3, [pc, #192]	@ (8000c1c <User_Process+0xd8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f002 f89a 	bl	8002c98 <BSP_LED_Toggle>

    if (connected)
 8000b64:	4b2e      	ldr	r3, [pc, #184]	@ (8000c20 <User_Process+0xdc>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d052      	beq.n	8000c12 <User_Process+0xce>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 8000b6c:	f002 fd78 	bl	8003660 <HAL_GetTick>
 8000b70:	4603      	mov	r3, r0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f00a f9a6 	bl	800aec4 <srand>

      /* Update emulated Environmental data */
      Set_Random_Environmental_Values(&data_t, &data_p);
 8000b78:	f107 0208 	add.w	r2, r7, #8
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	4611      	mov	r1, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f85a 	bl	8000c3c <Set_Random_Environmental_Values>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8000b88:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b8c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8000c24 <User_Process+0xe0>
 8000b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b94:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8000b98:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b9c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000ba0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ba8:	ee17 3a90 	vmov	r3, s15
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	4619      	mov	r1, r3
 8000bb0:	ee16 0a90 	vmov	r0, s13
 8000bb4:	f000 fcb6 	bl	8001524 <BlueMS_Environmental_Update>

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
//      Set_Random_Motion_Values(counter);
      int16_t acc_data[3];
      BSP_ACCELERO_AccGetXYZ(acc_data);
 8000bb8:	463b      	mov	r3, r7
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 fd0c 	bl	80035d8 <BSP_ACCELERO_AccGetXYZ>

      x_axes.AXIS_X = acc_data[0];
 8000bc0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <User_Process+0xe4>)
 8000bc8:	601a      	str	r2, [r3, #0]
      x_axes.AXIS_Y = acc_data[1];
 8000bca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <User_Process+0xe4>)
 8000bd2:	605a      	str	r2, [r3, #4]
      x_axes.AXIS_Z = acc_data[2];
 8000bd4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <User_Process+0xe4>)
 8000bdc:	609a      	str	r2, [r3, #8]

      Acc_Update(&x_axes, &g_axes, &m_axes);
 8000bde:	4a13      	ldr	r2, [pc, #76]	@ (8000c2c <User_Process+0xe8>)
 8000be0:	4913      	ldr	r1, [pc, #76]	@ (8000c30 <User_Process+0xec>)
 8000be2:	4811      	ldr	r0, [pc, #68]	@ (8000c28 <User_Process+0xe4>)
 8000be4:	f000 fb06 	bl	80011f4 <Acc_Update>

      Quat_Update(&q_axes);
 8000be8:	4812      	ldr	r0, [pc, #72]	@ (8000c34 <User_Process+0xf0>)
 8000bea:	f000 fb8d 	bl	8001308 <Quat_Update>

      counter ++;
 8000bee:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <User_Process+0xf4>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	4a10      	ldr	r2, [pc, #64]	@ (8000c38 <User_Process+0xf4>)
 8000bf6:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <User_Process+0xf4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b28      	cmp	r3, #40	@ 0x28
 8000bfe:	d104      	bne.n	8000c0a <User_Process+0xc6>
        counter = 0;
 8000c00:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <User_Process+0xf4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 8000c06:	f000 f899 	bl	8000d3c <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 8000c0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c0e:	f002 fd33 	bl	8003678 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000001 	.word	0x20000001
 8000c20:	20000114 	.word	0x20000114
 8000c24:	42c80000 	.word	0x42c80000
 8000c28:	20000118 	.word	0x20000118
 8000c2c:	20000130 	.word	0x20000130
 8000c30:	20000124 	.word	0x20000124
 8000c34:	2000013c 	.word	0x2000013c
 8000c38:	200000e0 	.word	0x200000e0

08000c3c <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 8000c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c40:	b084      	sub	sp, #16
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 8000c48:	f00a f96a 	bl	800af20 <rand>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	17da      	asrs	r2, r3, #31
 8000c50:	469a      	mov	sl, r3
 8000c52:	4693      	mov	fp, r2
 8000c54:	4652      	mov	r2, sl
 8000c56:	465b      	mov	r3, fp
 8000c58:	f04f 0000 	mov.w	r0, #0
 8000c5c:	f04f 0100 	mov.w	r1, #0
 8000c60:	0099      	lsls	r1, r3, #2
 8000c62:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000c66:	0090      	lsls	r0, r2, #2
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	eb12 010a 	adds.w	r1, r2, sl
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	eb43 030b 	adc.w	r3, r3, fp
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000c7c:	f04f 0300 	mov.w	r3, #0
 8000c80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c84:	f7ff fd08 	bl	8000698 <__aeabi_uldivmod>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4610      	mov	r0, r2
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f7ff fc7c 	bl	800058c <__aeabi_ul2d>
 8000c94:	f04f 0200 	mov.w	r2, #0
 8000c98:	4b26      	ldr	r3, [pc, #152]	@ (8000d34 <Set_Random_Environmental_Values+0xf8>)
 8000c9a:	f7ff faf7 	bl	800028c <__adddf3>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	4610      	mov	r0, r2
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f7ff fca7 	bl	80005f8 <__aeabi_d2f>
 8000caa:	4602      	mov	r2, r0
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8000cb0:	f00a f936 	bl	800af20 <rand>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	17da      	asrs	r2, r3, #31
 8000cb8:	4698      	mov	r8, r3
 8000cba:	4691      	mov	r9, r2
 8000cbc:	4642      	mov	r2, r8
 8000cbe:	464b      	mov	r3, r9
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	f04f 0100 	mov.w	r1, #0
 8000cc8:	0099      	lsls	r1, r3, #2
 8000cca:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000cce:	0090      	lsls	r0, r2, #2
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	eb12 0408 	adds.w	r4, r2, r8
 8000cd8:	eb43 0509 	adc.w	r5, r3, r9
 8000cdc:	f04f 0200 	mov.w	r2, #0
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	012b      	lsls	r3, r5, #4
 8000ce6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000cea:	0122      	lsls	r2, r4, #4
 8000cec:	4614      	mov	r4, r2
 8000cee:	461d      	mov	r5, r3
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	f7ff fccc 	bl	8000698 <__aeabi_uldivmod>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
 8000d04:	4610      	mov	r0, r2
 8000d06:	4619      	mov	r1, r3
 8000d08:	f7ff fc40 	bl	800058c <__aeabi_ul2d>
 8000d0c:	f04f 0200 	mov.w	r2, #0
 8000d10:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <Set_Random_Environmental_Values+0xfc>)
 8000d12:	f7ff fabb 	bl	800028c <__adddf3>
 8000d16:	4602      	mov	r2, r0
 8000d18:	460b      	mov	r3, r1
 8000d1a:	4610      	mov	r0, r2
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f7ff fc6b 	bl	80005f8 <__aeabi_d2f>
 8000d22:	4602      	mov	r2, r0
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	601a      	str	r2, [r3, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000d32:	bf00      	nop
 8000d34:	403b0000 	.word	0x403b0000
 8000d38:	408f4000 	.word	0x408f4000

08000d3c <Reset_Motion_Values>:
 * @brief  Reset values for all motion sensor data
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8000d40:	4b6e      	ldr	r3, [pc, #440]	@ (8000efc <Reset_Motion_Values+0x1c0>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b6e      	ldr	r3, [pc, #440]	@ (8000f00 <Reset_Motion_Values+0x1c4>)
 8000d46:	fb83 1302 	smull	r1, r3, r3, r2
 8000d4a:	11d9      	asrs	r1, r3, #7
 8000d4c:	17d3      	asrs	r3, r2, #31
 8000d4e:	1acb      	subs	r3, r1, r3
 8000d50:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000d54:	fb01 f303 	mul.w	r3, r1, r3
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d103      	bne.n	8000d66 <Reset_Motion_Values+0x2a>
 8000d5e:	4b67      	ldr	r3, [pc, #412]	@ (8000efc <Reset_Motion_Values+0x1c0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	425b      	negs	r3, r3
 8000d64:	e000      	b.n	8000d68 <Reset_Motion_Values+0x2c>
 8000d66:	230a      	movs	r3, #10
 8000d68:	4a64      	ldr	r2, [pc, #400]	@ (8000efc <Reset_Motion_Values+0x1c0>)
 8000d6a:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8000d6c:	4b63      	ldr	r3, [pc, #396]	@ (8000efc <Reset_Motion_Values+0x1c0>)
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	4b63      	ldr	r3, [pc, #396]	@ (8000f00 <Reset_Motion_Values+0x1c4>)
 8000d72:	fb83 1302 	smull	r1, r3, r3, r2
 8000d76:	11d9      	asrs	r1, r3, #7
 8000d78:	17d3      	asrs	r3, r2, #31
 8000d7a:	1acb      	subs	r3, r1, r3
 8000d7c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000d80:	fb01 f303 	mul.w	r3, r1, r3
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d103      	bne.n	8000d92 <Reset_Motion_Values+0x56>
 8000d8a:	4b5c      	ldr	r3, [pc, #368]	@ (8000efc <Reset_Motion_Values+0x1c0>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	425b      	negs	r3, r3
 8000d90:	e001      	b.n	8000d96 <Reset_Motion_Values+0x5a>
 8000d92:	f06f 0309 	mvn.w	r3, #9
 8000d96:	4a59      	ldr	r2, [pc, #356]	@ (8000efc <Reset_Motion_Values+0x1c0>)
 8000d98:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8000d9a:	4b58      	ldr	r3, [pc, #352]	@ (8000efc <Reset_Motion_Values+0x1c0>)
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	4b58      	ldr	r3, [pc, #352]	@ (8000f00 <Reset_Motion_Values+0x1c4>)
 8000da0:	fb83 1302 	smull	r1, r3, r3, r2
 8000da4:	11d9      	asrs	r1, r3, #7
 8000da6:	17d3      	asrs	r3, r2, #31
 8000da8:	1acb      	subs	r3, r1, r3
 8000daa:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000dae:	fb01 f303 	mul.w	r3, r1, r3
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d103      	bne.n	8000dc0 <Reset_Motion_Values+0x84>
 8000db8:	4b50      	ldr	r3, [pc, #320]	@ (8000efc <Reset_Motion_Values+0x1c0>)
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	425b      	negs	r3, r3
 8000dbe:	e000      	b.n	8000dc2 <Reset_Motion_Values+0x86>
 8000dc0:	230a      	movs	r3, #10
 8000dc2:	4a4e      	ldr	r2, [pc, #312]	@ (8000efc <Reset_Motion_Values+0x1c0>)
 8000dc4:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8000dc6:	4b4f      	ldr	r3, [pc, #316]	@ (8000f04 <Reset_Motion_Values+0x1c8>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4b4d      	ldr	r3, [pc, #308]	@ (8000f00 <Reset_Motion_Values+0x1c4>)
 8000dcc:	fb83 1302 	smull	r1, r3, r3, r2
 8000dd0:	11d9      	asrs	r1, r3, #7
 8000dd2:	17d3      	asrs	r3, r2, #31
 8000dd4:	1acb      	subs	r3, r1, r3
 8000dd6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000dda:	fb01 f303 	mul.w	r3, r1, r3
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d103      	bne.n	8000dec <Reset_Motion_Values+0xb0>
 8000de4:	4b47      	ldr	r3, [pc, #284]	@ (8000f04 <Reset_Motion_Values+0x1c8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	425b      	negs	r3, r3
 8000dea:	e000      	b.n	8000dee <Reset_Motion_Values+0xb2>
 8000dec:	2364      	movs	r3, #100	@ 0x64
 8000dee:	4a45      	ldr	r2, [pc, #276]	@ (8000f04 <Reset_Motion_Values+0x1c8>)
 8000df0:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8000df2:	4b44      	ldr	r3, [pc, #272]	@ (8000f04 <Reset_Motion_Values+0x1c8>)
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	4b42      	ldr	r3, [pc, #264]	@ (8000f00 <Reset_Motion_Values+0x1c4>)
 8000df8:	fb83 1302 	smull	r1, r3, r3, r2
 8000dfc:	11d9      	asrs	r1, r3, #7
 8000dfe:	17d3      	asrs	r3, r2, #31
 8000e00:	1acb      	subs	r3, r1, r3
 8000e02:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000e06:	fb01 f303 	mul.w	r3, r1, r3
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d103      	bne.n	8000e18 <Reset_Motion_Values+0xdc>
 8000e10:	4b3c      	ldr	r3, [pc, #240]	@ (8000f04 <Reset_Motion_Values+0x1c8>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	425b      	negs	r3, r3
 8000e16:	e001      	b.n	8000e1c <Reset_Motion_Values+0xe0>
 8000e18:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8000e1c:	4a39      	ldr	r2, [pc, #228]	@ (8000f04 <Reset_Motion_Values+0x1c8>)
 8000e1e:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8000e20:	4b38      	ldr	r3, [pc, #224]	@ (8000f04 <Reset_Motion_Values+0x1c8>)
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	4b36      	ldr	r3, [pc, #216]	@ (8000f00 <Reset_Motion_Values+0x1c4>)
 8000e26:	fb83 1302 	smull	r1, r3, r3, r2
 8000e2a:	11d9      	asrs	r1, r3, #7
 8000e2c:	17d3      	asrs	r3, r2, #31
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000e34:	fb01 f303 	mul.w	r3, r1, r3
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d103      	bne.n	8000e46 <Reset_Motion_Values+0x10a>
 8000e3e:	4b31      	ldr	r3, [pc, #196]	@ (8000f04 <Reset_Motion_Values+0x1c8>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	425b      	negs	r3, r3
 8000e44:	e000      	b.n	8000e48 <Reset_Motion_Values+0x10c>
 8000e46:	2364      	movs	r3, #100	@ 0x64
 8000e48:	4a2e      	ldr	r2, [pc, #184]	@ (8000f04 <Reset_Motion_Values+0x1c8>)
 8000e4a:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f04 <Reset_Motion_Values+0x1c8>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b2b      	ldr	r3, [pc, #172]	@ (8000f00 <Reset_Motion_Values+0x1c4>)
 8000e52:	fb83 1302 	smull	r1, r3, r3, r2
 8000e56:	11d9      	asrs	r1, r3, #7
 8000e58:	17d3      	asrs	r3, r2, #31
 8000e5a:	1acb      	subs	r3, r1, r3
 8000e5c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000e60:	fb01 f303 	mul.w	r3, r1, r3
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d103      	bne.n	8000e72 <Reset_Motion_Values+0x136>
 8000e6a:	4b27      	ldr	r3, [pc, #156]	@ (8000f08 <Reset_Motion_Values+0x1cc>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	425b      	negs	r3, r3
 8000e70:	e000      	b.n	8000e74 <Reset_Motion_Values+0x138>
 8000e72:	2303      	movs	r3, #3
 8000e74:	4a24      	ldr	r2, [pc, #144]	@ (8000f08 <Reset_Motion_Values+0x1cc>)
 8000e76:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8000e78:	4b22      	ldr	r3, [pc, #136]	@ (8000f04 <Reset_Motion_Values+0x1c8>)
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	4b20      	ldr	r3, [pc, #128]	@ (8000f00 <Reset_Motion_Values+0x1c4>)
 8000e7e:	fb83 1302 	smull	r1, r3, r3, r2
 8000e82:	11d9      	asrs	r1, r3, #7
 8000e84:	17d3      	asrs	r3, r2, #31
 8000e86:	1acb      	subs	r3, r1, r3
 8000e88:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000e8c:	fb01 f303 	mul.w	r3, r1, r3
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d103      	bne.n	8000e9e <Reset_Motion_Values+0x162>
 8000e96:	4b1c      	ldr	r3, [pc, #112]	@ (8000f08 <Reset_Motion_Values+0x1cc>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	425b      	negs	r3, r3
 8000e9c:	e001      	b.n	8000ea2 <Reset_Motion_Values+0x166>
 8000e9e:	f06f 0302 	mvn.w	r3, #2
 8000ea2:	4a19      	ldr	r2, [pc, #100]	@ (8000f08 <Reset_Motion_Values+0x1cc>)
 8000ea4:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <Reset_Motion_Values+0x1c8>)
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <Reset_Motion_Values+0x1c4>)
 8000eac:	fb83 1302 	smull	r1, r3, r3, r2
 8000eb0:	11d9      	asrs	r1, r3, #7
 8000eb2:	17d3      	asrs	r3, r2, #31
 8000eb4:	1acb      	subs	r3, r1, r3
 8000eb6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000eba:	fb01 f303 	mul.w	r3, r1, r3
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d103      	bne.n	8000ecc <Reset_Motion_Values+0x190>
 8000ec4:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <Reset_Motion_Values+0x1cc>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	425b      	negs	r3, r3
 8000eca:	e000      	b.n	8000ece <Reset_Motion_Values+0x192>
 8000ecc:	2303      	movs	r3, #3
 8000ece:	4a0e      	ldr	r2, [pc, #56]	@ (8000f08 <Reset_Motion_Values+0x1cc>)
 8000ed0:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <Reset_Motion_Values+0x1d0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	425b      	negs	r3, r3
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	@ (8000f0c <Reset_Motion_Values+0x1d0>)
 8000eda:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8000edc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <Reset_Motion_Values+0x1d0>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	425b      	negs	r3, r3
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <Reset_Motion_Values+0x1d0>)
 8000ee4:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <Reset_Motion_Values+0x1d0>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	425b      	negs	r3, r3
 8000eec:	4a07      	ldr	r2, [pc, #28]	@ (8000f0c <Reset_Motion_Values+0x1d0>)
 8000eee:	6093      	str	r3, [r2, #8]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000118 	.word	0x20000118
 8000f00:	10624dd3 	.word	0x10624dd3
 8000f04:	20000124 	.word	0x20000124
 8000f08:	20000130 	.word	0x20000130
 8000f0c:	2000013c 	.word	0x2000013c

08000f10 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8000f1a:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <BSP_PB_Callback+0x1c>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	701a      	strb	r2, [r3, #0]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	200000de 	.word	0x200000de

08000f30 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void) //TODO: modify from this
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b08d      	sub	sp, #52	@ 0x34
 8000f34:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8000f36:	231b      	movs	r3, #27
 8000f38:	713b      	strb	r3, [r7, #4]
 8000f3a:	23c5      	movs	r3, #197	@ 0xc5
 8000f3c:	717b      	strb	r3, [r7, #5]
 8000f3e:	23d5      	movs	r3, #213	@ 0xd5
 8000f40:	71bb      	strb	r3, [r7, #6]
 8000f42:	23a5      	movs	r3, #165	@ 0xa5
 8000f44:	71fb      	strb	r3, [r7, #7]
 8000f46:	2302      	movs	r3, #2
 8000f48:	723b      	strb	r3, [r7, #8]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	727b      	strb	r3, [r7, #9]
 8000f4e:	23b4      	movs	r3, #180	@ 0xb4
 8000f50:	72bb      	strb	r3, [r7, #10]
 8000f52:	239a      	movs	r3, #154	@ 0x9a
 8000f54:	72fb      	strb	r3, [r7, #11]
 8000f56:	23e1      	movs	r3, #225	@ 0xe1
 8000f58:	733b      	strb	r3, [r7, #12]
 8000f5a:	2311      	movs	r3, #17
 8000f5c:	737b      	strb	r3, [r7, #13]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	73bb      	strb	r3, [r7, #14]
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]
 8000f66:	2300      	movs	r3, #0
 8000f68:	743b      	strb	r3, [r7, #16]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	747b      	strb	r3, [r7, #17]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	74bb      	strb	r3, [r7, #18]
 8000f72:	2300      	movs	r3, #0
 8000f74:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8000f76:	4b52      	ldr	r3, [pc, #328]	@ (80010c0 <Add_HWServW2ST_Service+0x190>)
 8000f78:	461c      	mov	r4, r3
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8000f82:	4b50      	ldr	r3, [pc, #320]	@ (80010c4 <Add_HWServW2ST_Service+0x194>)
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2310      	movs	r3, #16
 8000f88:	2201      	movs	r2, #1
 8000f8a:	494d      	ldr	r1, [pc, #308]	@ (80010c0 <Add_HWServW2ST_Service+0x190>)
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	f007 fe0f 	bl	8008bb0 <aci_gatt_add_serv>
 8000f92:	4603      	mov	r3, r0
 8000f94:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8000f96:	7dfb      	ldrb	r3, [r7, #23]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 8000f9c:	2347      	movs	r3, #71	@ 0x47
 8000f9e:	e08a      	b.n	80010b6 <Add_HWServW2ST_Service+0x186>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8000fa0:	231b      	movs	r3, #27
 8000fa2:	713b      	strb	r3, [r7, #4]
 8000fa4:	23c5      	movs	r3, #197	@ 0xc5
 8000fa6:	717b      	strb	r3, [r7, #5]
 8000fa8:	23d5      	movs	r3, #213	@ 0xd5
 8000faa:	71bb      	strb	r3, [r7, #6]
 8000fac:	23a5      	movs	r3, #165	@ 0xa5
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	723b      	strb	r3, [r7, #8]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	727b      	strb	r3, [r7, #9]
 8000fb8:	2336      	movs	r3, #54	@ 0x36
 8000fba:	72bb      	strb	r3, [r7, #10]
 8000fbc:	23ac      	movs	r3, #172	@ 0xac
 8000fbe:	72fb      	strb	r3, [r7, #11]
 8000fc0:	23e1      	movs	r3, #225	@ 0xe1
 8000fc2:	733b      	strb	r3, [r7, #12]
 8000fc4:	2311      	movs	r3, #17
 8000fc6:	737b      	strb	r3, [r7, #13]
 8000fc8:	2301      	movs	r3, #1
 8000fca:	73bb      	strb	r3, [r7, #14]
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	743b      	strb	r3, [r7, #16]
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	747b      	strb	r3, [r7, #17]
 8000fd8:	2300      	movs	r3, #0
 8000fda:	74bb      	strb	r3, [r7, #18]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 8000fe0:	7cbb      	ldrb	r3, [r7, #18]
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 8000fea:	7cbb      	ldrb	r3, [r7, #18]
 8000fec:	f043 0310 	orr.w	r3, r3, #16
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8000ff4:	4b34      	ldr	r3, [pc, #208]	@ (80010c8 <Add_HWServW2ST_Service+0x198>)
 8000ff6:	461c      	mov	r4, r3
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ffc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001000:	4b30      	ldr	r3, [pc, #192]	@ (80010c4 <Add_HWServW2ST_Service+0x194>)
 8001002:	8818      	ldrh	r0, [r3, #0]
 8001004:	4b31      	ldr	r3, [pc, #196]	@ (80010cc <Add_HWServW2ST_Service+0x19c>)
 8001006:	9305      	str	r3, [sp, #20]
 8001008:	2300      	movs	r3, #0
 800100a:	9304      	str	r3, [sp, #16]
 800100c:	2310      	movs	r3, #16
 800100e:	9303      	str	r3, [sp, #12]
 8001010:	2304      	movs	r3, #4
 8001012:	9302      	str	r3, [sp, #8]
 8001014:	2300      	movs	r3, #0
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	2312      	movs	r3, #18
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2308      	movs	r3, #8
 800101e:	4a2a      	ldr	r2, [pc, #168]	@ (80010c8 <Add_HWServW2ST_Service+0x198>)
 8001020:	2102      	movs	r1, #2
 8001022:	f007 fe4e 	bl	8008cc2 <aci_gatt_add_char>
 8001026:	4603      	mov	r3, r0
 8001028:	75fb      	strb	r3, [r7, #23]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800102a:	7dfb      	ldrb	r3, [r7, #23]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <Add_HWServW2ST_Service+0x104>
    return BLE_STATUS_ERROR;
 8001030:	2347      	movs	r3, #71	@ 0x47
 8001032:	e040      	b.n	80010b6 <Add_HWServW2ST_Service+0x186>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8001034:	231b      	movs	r3, #27
 8001036:	713b      	strb	r3, [r7, #4]
 8001038:	23c5      	movs	r3, #197	@ 0xc5
 800103a:	717b      	strb	r3, [r7, #5]
 800103c:	23d5      	movs	r3, #213	@ 0xd5
 800103e:	71bb      	strb	r3, [r7, #6]
 8001040:	23a5      	movs	r3, #165	@ 0xa5
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	2302      	movs	r3, #2
 8001046:	723b      	strb	r3, [r7, #8]
 8001048:	2300      	movs	r3, #0
 800104a:	727b      	strb	r3, [r7, #9]
 800104c:	2336      	movs	r3, #54	@ 0x36
 800104e:	72bb      	strb	r3, [r7, #10]
 8001050:	23ac      	movs	r3, #172	@ 0xac
 8001052:	72fb      	strb	r3, [r7, #11]
 8001054:	23e1      	movs	r3, #225	@ 0xe1
 8001056:	733b      	strb	r3, [r7, #12]
 8001058:	2311      	movs	r3, #17
 800105a:	737b      	strb	r3, [r7, #13]
 800105c:	2301      	movs	r3, #1
 800105e:	73bb      	strb	r3, [r7, #14]
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	2300      	movs	r3, #0
 8001066:	743b      	strb	r3, [r7, #16]
 8001068:	2300      	movs	r3, #0
 800106a:	747b      	strb	r3, [r7, #17]
 800106c:	23e0      	movs	r3, #224	@ 0xe0
 800106e:	74bb      	strb	r3, [r7, #18]
 8001070:	2300      	movs	r3, #0
 8001072:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001074:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <Add_HWServW2ST_Service+0x198>)
 8001076:	461c      	mov	r4, r3
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800107c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 8001080:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <Add_HWServW2ST_Service+0x194>)
 8001082:	8818      	ldrh	r0, [r3, #0]
 8001084:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <Add_HWServW2ST_Service+0x1a0>)
 8001086:	9305      	str	r3, [sp, #20]
 8001088:	2300      	movs	r3, #0
 800108a:	9304      	str	r3, [sp, #16]
 800108c:	2310      	movs	r3, #16
 800108e:	9303      	str	r3, [sp, #12]
 8001090:	2304      	movs	r3, #4
 8001092:	9302      	str	r3, [sp, #8]
 8001094:	2300      	movs	r3, #0
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	2310      	movs	r3, #16
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2314      	movs	r3, #20
 800109e:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <Add_HWServW2ST_Service+0x198>)
 80010a0:	2102      	movs	r1, #2
 80010a2:	f007 fe0e 	bl	8008cc2 <aci_gatt_add_char>
 80010a6:	4603      	mov	r3, r0
 80010a8:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <Add_HWServW2ST_Service+0x184>
    return BLE_STATUS_ERROR;
 80010b0:	2347      	movs	r3, #71	@ 0x47
 80010b2:	e000      	b.n	80010b6 <Add_HWServW2ST_Service+0x186>

  return BLE_STATUS_SUCCESS;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	371c      	adds	r7, #28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd90      	pop	{r4, r7, pc}
 80010be:	bf00      	nop
 80010c0:	200000f0 	.word	0x200000f0
 80010c4:	200000e4 	.word	0x200000e4
 80010c8:	20000100 	.word	0x20000100
 80010cc:	200000e6 	.word	0x200000e6
 80010d0:	200000e8 	.word	0x200000e8

080010d4 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b08d      	sub	sp, #52	@ 0x34
 80010d8:	af06      	add	r7, sp, #24
  tBleStatus ret;
  int32_t NumberOfRecords=1;
 80010da:	2301      	movs	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 80010de:	231b      	movs	r3, #27
 80010e0:	703b      	strb	r3, [r7, #0]
 80010e2:	23c5      	movs	r3, #197	@ 0xc5
 80010e4:	707b      	strb	r3, [r7, #1]
 80010e6:	23d5      	movs	r3, #213	@ 0xd5
 80010e8:	70bb      	strb	r3, [r7, #2]
 80010ea:	23a5      	movs	r3, #165	@ 0xa5
 80010ec:	70fb      	strb	r3, [r7, #3]
 80010ee:	2302      	movs	r3, #2
 80010f0:	713b      	strb	r3, [r7, #4]
 80010f2:	2300      	movs	r3, #0
 80010f4:	717b      	strb	r3, [r7, #5]
 80010f6:	23b4      	movs	r3, #180	@ 0xb4
 80010f8:	71bb      	strb	r3, [r7, #6]
 80010fa:	239a      	movs	r3, #154	@ 0x9a
 80010fc:	71fb      	strb	r3, [r7, #7]
 80010fe:	23e1      	movs	r3, #225	@ 0xe1
 8001100:	723b      	strb	r3, [r7, #8]
 8001102:	2311      	movs	r3, #17
 8001104:	727b      	strb	r3, [r7, #9]
 8001106:	2302      	movs	r3, #2
 8001108:	72bb      	strb	r3, [r7, #10]
 800110a:	2300      	movs	r3, #0
 800110c:	72fb      	strb	r3, [r7, #11]
 800110e:	2300      	movs	r3, #0
 8001110:	733b      	strb	r3, [r7, #12]
 8001112:	2300      	movs	r3, #0
 8001114:	737b      	strb	r3, [r7, #13]
 8001116:	2300      	movs	r3, #0
 8001118:	73bb      	strb	r3, [r7, #14]
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800111e:	4b31      	ldr	r3, [pc, #196]	@ (80011e4 <Add_SWServW2ST_Service+0x110>)
 8001120:	461c      	mov	r4, r3
 8001122:	463b      	mov	r3, r7
 8001124:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001126:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	461a      	mov	r2, r3
 8001130:	0052      	lsls	r2, r2, #1
 8001132:	4413      	add	r3, r2
 8001134:	b2db      	uxtb	r3, r3
 8001136:	3301      	adds	r3, #1
 8001138:	b2db      	uxtb	r3, r3
 800113a:	4a2b      	ldr	r2, [pc, #172]	@ (80011e8 <Add_SWServW2ST_Service+0x114>)
 800113c:	9200      	str	r2, [sp, #0]
 800113e:	2201      	movs	r2, #1
 8001140:	4928      	ldr	r1, [pc, #160]	@ (80011e4 <Add_SWServW2ST_Service+0x110>)
 8001142:	2002      	movs	r0, #2
 8001144:	f007 fd34 	bl	8008bb0 <aci_gatt_add_serv>
 8001148:	4603      	mov	r3, r0
 800114a:	74fb      	strb	r3, [r7, #19]
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 800114c:	7cfb      	ldrb	r3, [r7, #19]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d13f      	bne.n	80011d2 <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8001152:	231b      	movs	r3, #27
 8001154:	703b      	strb	r3, [r7, #0]
 8001156:	23c5      	movs	r3, #197	@ 0xc5
 8001158:	707b      	strb	r3, [r7, #1]
 800115a:	23d5      	movs	r3, #213	@ 0xd5
 800115c:	70bb      	strb	r3, [r7, #2]
 800115e:	23a5      	movs	r3, #165	@ 0xa5
 8001160:	70fb      	strb	r3, [r7, #3]
 8001162:	2302      	movs	r3, #2
 8001164:	713b      	strb	r3, [r7, #4]
 8001166:	2300      	movs	r3, #0
 8001168:	717b      	strb	r3, [r7, #5]
 800116a:	2336      	movs	r3, #54	@ 0x36
 800116c:	71bb      	strb	r3, [r7, #6]
 800116e:	23ac      	movs	r3, #172	@ 0xac
 8001170:	71fb      	strb	r3, [r7, #7]
 8001172:	23e1      	movs	r3, #225	@ 0xe1
 8001174:	723b      	strb	r3, [r7, #8]
 8001176:	2311      	movs	r3, #17
 8001178:	727b      	strb	r3, [r7, #9]
 800117a:	2301      	movs	r3, #1
 800117c:	72bb      	strb	r3, [r7, #10]
 800117e:	2300      	movs	r3, #0
 8001180:	72fb      	strb	r3, [r7, #11]
 8001182:	2300      	movs	r3, #0
 8001184:	733b      	strb	r3, [r7, #12]
 8001186:	2301      	movs	r3, #1
 8001188:	737b      	strb	r3, [r7, #13]
 800118a:	2300      	movs	r3, #0
 800118c:	73bb      	strb	r3, [r7, #14]
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8001192:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <Add_SWServW2ST_Service+0x118>)
 8001194:	461c      	mov	r4, r3
 8001196:	463b      	mov	r3, r7
 8001198:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800119a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 800119e:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <Add_SWServW2ST_Service+0x114>)
 80011a0:	8818      	ldrh	r0, [r3, #0]
 80011a2:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <Add_SWServW2ST_Service+0x11c>)
 80011a4:	9305      	str	r3, [sp, #20]
 80011a6:	2300      	movs	r3, #0
 80011a8:	9304      	str	r3, [sp, #16]
 80011aa:	2310      	movs	r3, #16
 80011ac:	9303      	str	r3, [sp, #12]
 80011ae:	2304      	movs	r3, #4
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	2300      	movs	r3, #0
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	2310      	movs	r3, #16
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2308      	movs	r3, #8
 80011bc:	4a0b      	ldr	r2, [pc, #44]	@ (80011ec <Add_SWServW2ST_Service+0x118>)
 80011be:	2102      	movs	r1, #2
 80011c0:	f007 fd7f 	bl	8008cc2 <aci_gatt_add_char>
 80011c4:	4603      	mov	r3, r0
 80011c6:	74fb      	strb	r3, [r7, #19]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80011c8:	7cfb      	ldrb	r3, [r7, #19]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d103      	bne.n	80011d6 <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e003      	b.n	80011da <Add_SWServW2ST_Service+0x106>
    goto fail;
 80011d2:	bf00      	nop
 80011d4:	e000      	b.n	80011d8 <Add_SWServW2ST_Service+0x104>
    goto fail;
 80011d6:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 80011d8:	2347      	movs	r3, #71	@ 0x47
}
 80011da:	4618      	mov	r0, r3
 80011dc:	371c      	adds	r7, #28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd90      	pop	{r4, r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000f0 	.word	0x200000f0
 80011e8:	200000ea 	.word	0x200000ea
 80011ec:	20000100 	.word	0x20000100
 80011f0:	200000ec 	.word	0x200000ec

080011f4 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08c      	sub	sp, #48	@ 0x30
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8001200:	f002 fa2e 	bl	8003660 <HAL_GetTick>
 8001204:	4603      	mov	r3, r0
 8001206:	08db      	lsrs	r3, r3, #3
 8001208:	b2db      	uxtb	r3, r3
 800120a:	743b      	strb	r3, [r7, #16]
 800120c:	f002 fa28 	bl	8003660 <HAL_GetTick>
 8001210:	4603      	mov	r3, r0
 8001212:	0adb      	lsrs	r3, r3, #11
 8001214:	b2db      	uxtb	r3, r3
 8001216:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	425b      	negs	r3, r3
 8001220:	b2db      	uxtb	r3, r3
 8001222:	74bb      	strb	r3, [r7, #18]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	425b      	negs	r3, r3
 800122a:	121b      	asrs	r3, r3, #8
 800122c:	b2db      	uxtb	r3, r3
 800122e:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	753b      	strb	r3, [r7, #20]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	121b      	asrs	r3, r3, #8
 800123e:	b2db      	uxtb	r3, r3
 8001240:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	425b      	negs	r3, r3
 800124a:	b2db      	uxtb	r3, r3
 800124c:	75bb      	strb	r3, [r7, #22]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	425b      	negs	r3, r3
 8001254:	121b      	asrs	r3, r3, #8
 8001256:	b2db      	uxtb	r3, r3
 8001258:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	763b      	strb	r3, [r7, #24]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	121b      	asrs	r3, r3, #8
 8001268:	b2db      	uxtb	r3, r3
 800126a:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	76bb      	strb	r3, [r7, #26]
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	121b      	asrs	r3, r3, #8
 800127a:	b2db      	uxtb	r3, r3
 800127c:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	773b      	strb	r3, [r7, #28]
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	121b      	asrs	r3, r3, #8
 800128c:	b2db      	uxtb	r3, r3
 800128e:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	77bb      	strb	r3, [r7, #30]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	121b      	asrs	r3, r3, #8
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	f887 3020 	strb.w	r3, [r7, #32]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	121b      	asrs	r3, r3, #8
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	121b      	asrs	r3, r3, #8
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <Acc_Update+0x10c>)
 80012d0:	8818      	ldrh	r0, [r3, #0]
 80012d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <Acc_Update+0x110>)
 80012d4:	8819      	ldrh	r1, [r3, #0]
 80012d6:	f107 0310 	add.w	r3, r7, #16
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2314      	movs	r3, #20
 80012de:	2200      	movs	r2, #0
 80012e0:	f007 fdba 	bl	8008e58 <aci_gatt_update_char_value>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 80012ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <Acc_Update+0x102>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 80012f2:	2347      	movs	r3, #71	@ 0x47
 80012f4:	e000      	b.n	80012f8 <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3728      	adds	r7, #40	@ 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200000e4 	.word	0x200000e4
 8001304:	200000e8 	.word	0x200000e8

08001308 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af02      	add	r7, sp, #8
 800130e:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8001310:	f002 f9a6 	bl	8003660 <HAL_GetTick>
 8001314:	4603      	mov	r3, r0
 8001316:	08db      	lsrs	r3, r3, #3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	733b      	strb	r3, [r7, #12]
 800131c:	f002 f9a0 	bl	8003660 <HAL_GetTick>
 8001320:	4603      	mov	r3, r0
 8001322:	0adb      	lsrs	r3, r3, #11
 8001324:	b2db      	uxtb	r3, r3
 8001326:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	73bb      	strb	r3, [r7, #14]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	121b      	asrs	r3, r3, #8
 8001336:	b2db      	uxtb	r3, r3
 8001338:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	743b      	strb	r3, [r7, #16]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	121b      	asrs	r3, r3, #8
 8001348:	b2db      	uxtb	r3, r3
 800134a:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	74bb      	strb	r3, [r7, #18]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	121b      	asrs	r3, r3, #8
 800135a:	b2db      	uxtb	r3, r3
 800135c:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 800135e:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <Quat_Update+0x84>)
 8001360:	8818      	ldrh	r0, [r3, #0]
 8001362:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <Quat_Update+0x88>)
 8001364:	8819      	ldrh	r1, [r3, #0]
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2308      	movs	r3, #8
 800136e:	2200      	movs	r2, #0
 8001370:	f007 fd72 	bl	8008e58 <aci_gatt_update_char_value>
 8001374:	4603      	mov	r3, r0
 8001376:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <Quat_Update+0x7a>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
 800137e:	2347      	movs	r3, #71	@ 0x47
 8001380:	e000      	b.n	8001384 <Quat_Update+0x7c>
  }

  return BLE_STATUS_SUCCESS;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200000ea 	.word	0x200000ea
 8001390:	200000ec 	.word	0x200000ec

08001394 <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 8001394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001398:	b08e      	sub	sp, #56	@ 0x38
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 80013a0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80013a2:	4b57      	ldr	r3, [pc, #348]	@ (8001500 <Read_Request_CB+0x16c>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d105      	bne.n	80013b8 <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 80013ac:	4a55      	ldr	r2, [pc, #340]	@ (8001504 <Read_Request_CB+0x170>)
 80013ae:	4956      	ldr	r1, [pc, #344]	@ (8001508 <Read_Request_CB+0x174>)
 80013b0:	4856      	ldr	r0, [pc, #344]	@ (800150c <Read_Request_CB+0x178>)
 80013b2:	f7ff ff1f 	bl	80011f4 <Acc_Update>
 80013b6:	e091      	b.n	80014dc <Read_Request_CB+0x148>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 80013b8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80013ba:	4b55      	ldr	r3, [pc, #340]	@ (8001510 <Read_Request_CB+0x17c>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	3301      	adds	r3, #1
 80013c0:	429a      	cmp	r2, r3
 80013c2:	f040 808b 	bne.w	80014dc <Read_Request_CB+0x148>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 80013c6:	f009 fdab 	bl	800af20 <rand>
 80013ca:	4603      	mov	r3, r0
 80013cc:	17da      	asrs	r2, r3, #31
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	61fa      	str	r2, [r7, #28]
 80013d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013d6:	f04f 0000 	mov.w	r0, #0
 80013da:	f04f 0100 	mov.w	r1, #0
 80013de:	0099      	lsls	r1, r3, #2
 80013e0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80013e4:	0090      	lsls	r0, r2, #2
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	69b9      	ldr	r1, [r7, #24]
 80013ec:	1851      	adds	r1, r2, r1
 80013ee:	6139      	str	r1, [r7, #16]
 80013f0:	69f9      	ldr	r1, [r7, #28]
 80013f2:	eb43 0101 	adc.w	r1, r3, r1
 80013f6:	6179      	str	r1, [r7, #20]
 80013f8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001404:	f7ff f948 	bl	8000698 <__aeabi_uldivmod>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	f7ff f8bc 	bl	800058c <__aeabi_ul2d>
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	4b3e      	ldr	r3, [pc, #248]	@ (8001514 <Read_Request_CB+0x180>)
 800141a:	f7fe ff37 	bl	800028c <__adddf3>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f7ff f8e7 	bl	80005f8 <__aeabi_d2f>
 800142a:	4603      	mov	r3, r0
 800142c:	637b      	str	r3, [r7, #52]	@ 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 800142e:	f009 fd77 	bl	800af20 <rand>
 8001432:	4603      	mov	r3, r0
 8001434:	17da      	asrs	r2, r3, #31
 8001436:	4698      	mov	r8, r3
 8001438:	4691      	mov	r9, r2
 800143a:	4642      	mov	r2, r8
 800143c:	464b      	mov	r3, r9
 800143e:	1891      	adds	r1, r2, r2
 8001440:	6039      	str	r1, [r7, #0]
 8001442:	415b      	adcs	r3, r3
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800144a:	eb12 0408 	adds.w	r4, r2, r8
 800144e:	eb43 0509 	adc.w	r5, r3, r9
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	f04f 0300 	mov.w	r3, #0
 800145a:	016b      	lsls	r3, r5, #5
 800145c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001460:	0162      	lsls	r2, r4, #5
 8001462:	eb14 0a02 	adds.w	sl, r4, r2
 8001466:	eb45 0b03 	adc.w	fp, r5, r3
 800146a:	eb1a 0308 	adds.w	r3, sl, r8
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	eb4b 0309 	adc.w	r3, fp, r9
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001482:	f7ff f909 	bl	8000698 <__aeabi_uldivmod>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff f87d 	bl	800058c <__aeabi_ul2d>
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	4b20      	ldr	r3, [pc, #128]	@ (8001518 <Read_Request_CB+0x184>)
 8001498:	f7fe fef8 	bl	800028c <__adddf3>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f7ff f8a8 	bl	80005f8 <__aeabi_d2f>
 80014a8:	4603      	mov	r3, r0
 80014aa:	633b      	str	r3, [r7, #48]	@ 0x30
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 80014ac:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80014b0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800151c <Read_Request_CB+0x188>
 80014b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80014bc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80014c0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014cc:	ee17 3a90 	vmov	r3, s15
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	4619      	mov	r1, r3
 80014d4:	ee16 0a90 	vmov	r0, s13
 80014d8:	f000 f824 	bl	8001524 <BlueMS_Environmental_Update>
  }

  if(connection_handle !=0)
 80014dc:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <Read_Request_CB+0x18c>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d007      	beq.n	80014f4 <Read_Request_CB+0x160>
  {
    ret = aci_gatt_allow_read(connection_handle);
 80014e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <Read_Request_CB+0x18c>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f007 fd45 	bl	8008f78 <aci_gatt_allow_read>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 80014f4:	bf00      	nop
 80014f6:	3738      	adds	r7, #56	@ 0x38
 80014f8:	46bd      	mov	sp, r7
 80014fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014fe:	bf00      	nop
 8001500:	200000e8 	.word	0x200000e8
 8001504:	20000130 	.word	0x20000130
 8001508:	20000124 	.word	0x20000124
 800150c:	20000118 	.word	0x20000118
 8001510:	200000e6 	.word	0x200000e6
 8001514:	403b0000 	.word	0x403b0000
 8001518:	408f4000 	.word	0x408f4000
 800151c:	42c80000 	.word	0x42c80000
 8001520:	20000110 	.word	0x20000110

08001524 <BlueMS_Environmental_Update>:

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af02      	add	r7, sp, #8
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8001530:	f002 f896 	bl	8003660 <HAL_GetTick>
 8001534:	4603      	mov	r3, r0
 8001536:	08db      	lsrs	r3, r3, #3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	733b      	strb	r3, [r7, #12]
 800153c:	f002 f890 	bl	8003660 <HAL_GetTick>
 8001540:	4603      	mov	r3, r0
 8001542:	0adb      	lsrs	r3, r3, #11
 8001544:	b2db      	uxtb	r3, r3
 8001546:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	73bb      	strb	r3, [r7, #14]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	121b      	asrs	r3, r3, #8
 8001552:	b2db      	uxtb	r3, r3
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	141b      	asrs	r3, r3, #16
 800155a:	b2db      	uxtb	r3, r3
 800155c:	743b      	strb	r3, [r7, #16]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	161b      	asrs	r3, r3, #24
 8001562:	b2db      	uxtb	r3, r3
 8001564:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	74bb      	strb	r3, [r7, #18]
 800156c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001570:	121b      	asrs	r3, r3, #8
 8001572:	b21b      	sxth	r3, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8001578:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <BlueMS_Environmental_Update+0x84>)
 800157a:	8818      	ldrh	r0, [r3, #0]
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <BlueMS_Environmental_Update+0x88>)
 800157e:	8819      	ldrh	r1, [r3, #0]
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2308      	movs	r3, #8
 8001588:	2200      	movs	r2, #0
 800158a:	f007 fc65 	bl	8008e58 <aci_gatt_update_char_value>
 800158e:	4603      	mov	r3, r0
 8001590:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8001592:	7dfb      	ldrb	r3, [r7, #23]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <BlueMS_Environmental_Update+0x78>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
 8001598:	2347      	movs	r3, #71	@ 0x47
 800159a:	e000      	b.n	800159e <BlueMS_Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200000e4 	.word	0x200000e4
 80015ac:	200000e6 	.word	0x200000e6

080015b0 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b092      	sub	sp, #72	@ 0x48
 80015b4:	af08      	add	r7, sp, #32
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 80015b6:	4a36      	ldr	r2, [pc, #216]	@ (8001690 <Set_DeviceConnectable+0xe0>)
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015c0:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 80015c4:	2302      	movs	r3, #2
 80015c6:	703b      	strb	r3, [r7, #0]
 80015c8:	230a      	movs	r3, #10
 80015ca:	707b      	strb	r3, [r7, #1]
 80015cc:	2300      	movs	r3, #0
 80015ce:	70bb      	strb	r3, [r7, #2]
 80015d0:	2308      	movs	r3, #8
 80015d2:	70fb      	strb	r3, [r7, #3]
 80015d4:	2309      	movs	r3, #9
 80015d6:	713b      	strb	r3, [r7, #4]
 80015d8:	2342      	movs	r3, #66	@ 0x42
 80015da:	717b      	strb	r3, [r7, #5]
 80015dc:	236c      	movs	r3, #108	@ 0x6c
 80015de:	71bb      	strb	r3, [r7, #6]
 80015e0:	2375      	movs	r3, #117	@ 0x75
 80015e2:	71fb      	strb	r3, [r7, #7]
 80015e4:	2365      	movs	r3, #101	@ 0x65
 80015e6:	723b      	strb	r3, [r7, #8]
 80015e8:	234e      	movs	r3, #78	@ 0x4e
 80015ea:	727b      	strb	r3, [r7, #9]
 80015ec:	2352      	movs	r3, #82	@ 0x52
 80015ee:	72bb      	strb	r3, [r7, #10]
 80015f0:	2347      	movs	r3, #71	@ 0x47
 80015f2:	72fb      	strb	r3, [r7, #11]
 80015f4:	230d      	movs	r3, #13
 80015f6:	733b      	strb	r3, [r7, #12]
 80015f8:	23ff      	movs	r3, #255	@ 0xff
 80015fa:	737b      	strb	r3, [r7, #13]
 80015fc:	2301      	movs	r3, #1
 80015fe:	73bb      	strb	r3, [r7, #14]
 8001600:	2380      	movs	r3, #128	@ 0x80
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	2300      	movs	r3, #0
 8001606:	743b      	strb	r3, [r7, #16]
 8001608:	23f4      	movs	r3, #244	@ 0xf4
 800160a:	747b      	strb	r3, [r7, #17]
 800160c:	2300      	movs	r3, #0
 800160e:	74bb      	strb	r3, [r7, #18]
 8001610:	2300      	movs	r3, #0
 8001612:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8001614:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <Set_DeviceConnectable+0xe4>)
 8001616:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8001618:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 800161a:	4b1e      	ldr	r3, [pc, #120]	@ (8001694 <Set_DeviceConnectable+0xe4>)
 800161c:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 800161e:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8001620:	4b1c      	ldr	r3, [pc, #112]	@ (8001694 <Set_DeviceConnectable+0xe4>)
 8001622:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8001624:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8001626:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <Set_DeviceConnectable+0xe4>)
 8001628:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 800162a:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 800162c:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <Set_DeviceConnectable+0xe4>)
 800162e:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8001630:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 8001632:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <Set_DeviceConnectable+0xe4>)
 8001634:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 8001636:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8001638:	7cbb      	ldrb	r3, [r7, #18]
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	b2db      	uxtb	r3, r3
 8001640:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_resp_data(0, NULL);
 8001642:	2100      	movs	r1, #0
 8001644:	2000      	movs	r0, #0
 8001646:	f007 fdf8 	bl	800923a <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 800164a:	2300      	movs	r3, #0
 800164c:	9306      	str	r3, [sp, #24]
 800164e:	2300      	movs	r3, #0
 8001650:	9305      	str	r3, [sp, #20]
 8001652:	2300      	movs	r3, #0
 8001654:	9304      	str	r3, [sp, #16]
 8001656:	2300      	movs	r3, #0
 8001658:	9303      	str	r3, [sp, #12]
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	9302      	str	r3, [sp, #8]
 8001660:	2308      	movs	r3, #8
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	2300      	movs	r3, #0
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	2301      	movs	r3, #1
 800166a:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 800166e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8001672:	2000      	movs	r0, #0
 8001674:	f007 f8e7 	bl	8008846 <aci_gap_set_discoverable>
 8001678:	4603      	mov	r3, r0
 800167a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 800167e:	463b      	mov	r3, r7
 8001680:	4619      	mov	r1, r3
 8001682:	201a      	movs	r0, #26
 8001684:	f007 fa20 	bl	8008ac8 <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8001688:	bf00      	nop
 800168a:	3728      	adds	r7, #40	@ 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	0800bf3c 	.word	0x0800bf3c
 8001694:	200000d8 	.word	0x200000d8

08001698 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	@ 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	3301      	adds	r3, #1
 80016a8:	623b      	str	r3, [r7, #32]

  if(hci_pckt->type != HCI_EVENT_PKT)
 80016aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d14a      	bne.n	8001748 <user_notify+0xb0>
    return;

  switch(event_pckt->evt){
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2bff      	cmp	r3, #255	@ 0xff
 80016b8:	d01f      	beq.n	80016fa <user_notify+0x62>
 80016ba:	2bff      	cmp	r3, #255	@ 0xff
 80016bc:	dc49      	bgt.n	8001752 <user_notify+0xba>
 80016be:	2b05      	cmp	r3, #5
 80016c0:	d002      	beq.n	80016c8 <user_notify+0x30>
 80016c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80016c4:	d003      	beq.n	80016ce <user_notify+0x36>
 80016c6:	e044      	b.n	8001752 <user_notify+0xba>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 80016c8:	f000 f846 	bl	8001758 <GAP_DisconnectionComplete_CB>
    }
    break;
 80016cc:	e041      	b.n	8001752 <user_notify+0xba>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80016ce:	6a3b      	ldr	r3, [r7, #32]
 80016d0:	3302      	adds	r3, #2
 80016d2:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d137      	bne.n	800174c <user_notify+0xb4>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	3301      	adds	r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1d5a      	adds	r2, r3, #5
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	4619      	mov	r1, r3
 80016f0:	4610      	mov	r0, r2
 80016f2:	f000 f847 	bl	8001784 <GAP_ConnectionComplete_CB>
        }
        break;
 80016f6:	bf00      	nop
      }
    }
    break;
 80016f8:	e028      	b.n	800174c <user_notify+0xb4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 80016fa:	6a3b      	ldr	r3, [r7, #32]
 80016fc:	3302      	adds	r3, #2
 80016fe:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode){
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	b29b      	uxth	r3, r3
 8001706:	f640 4213 	movw	r2, #3091	@ 0xc13
 800170a:	4293      	cmp	r3, r2
 800170c:	d00d      	beq.n	800172a <user_notify+0x92>
 800170e:	f640 4214 	movw	r2, #3092	@ 0xc14
 8001712:	4293      	cmp	r3, r2
 8001714:	d11c      	bne.n	8001750 <user_notify+0xb8>

      case EVT_BLUE_GATT_READ_PERMIT_REQ:
        {
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3302      	adds	r3, #2
 800171a:	61bb      	str	r3, [r7, #24]
          Read_Request_CB(pr->attr_handle);
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	885b      	ldrh	r3, [r3, #2]
 8001720:	b29b      	uxth	r3, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fe36 	bl	8001394 <Read_Request_CB>
        }
        break;
 8001728:	e00d      	b.n	8001746 <user_notify+0xae>
      case EVT_BLUE_GATT_WRITE_PERMIT_REQ:
      	  {
      		evt_gatt_write_permit_req *pr = (void*)blue_evt->data;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3302      	adds	r3, #2
 800172e:	617b      	str	r3, [r7, #20]
      		Attribute_Modified_CB(pr->attr_handle, pr->data_length, pr->data);
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	885b      	ldrh	r3, [r3, #2]
 8001734:	b298      	uxth	r0, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	7919      	ldrb	r1, [r3, #4]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	3305      	adds	r3, #5
 800173e:	461a      	mov	r2, r3
 8001740:	f000 fa70 	bl	8001c24 <Attribute_Modified_CB>

      	  }
      	  break;
 8001744:	bf00      	nop
      }



    }
    break;
 8001746:	e003      	b.n	8001750 <user_notify+0xb8>
    return;
 8001748:	bf00      	nop
 800174a:	e002      	b.n	8001752 <user_notify+0xba>
    break;
 800174c:	bf00      	nop
 800174e:	e000      	b.n	8001752 <user_notify+0xba>
    break;
 8001750:	bf00      	nop
  }
}
 8001752:	3728      	adds	r7, #40	@ 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  connected = FALSE;
 800175c:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <GAP_DisconnectionComplete_CB+0x20>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8001762:	4b06      	ldr	r3, [pc, #24]	@ (800177c <GAP_DisconnectionComplete_CB+0x24>)
 8001764:	2201      	movs	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8001768:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <GAP_DisconnectionComplete_CB+0x28>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	20000114 	.word	0x20000114
 800177c:	20000001 	.word	0x20000001
 8001780:	20000112 	.word	0x20000112

08001784 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8001790:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <GAP_ConnectionComplete_CB+0x38>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8001796:	4a0a      	ldr	r2, [pc, #40]	@ (80017c0 <GAP_ConnectionComplete_CB+0x3c>)
 8001798:	887b      	ldrh	r3, [r7, #2]
 800179a:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 800179c:	2305      	movs	r3, #5
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	e002      	b.n	80017a8 <GAP_ConnectionComplete_CB+0x24>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f9      	bne.n	80017a2 <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\n", addr[0]);
}
 80017ae:	bf00      	nop
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	20000114 	.word	0x20000114
 80017c0:	20000110 	.word	0x20000110

080017c4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017cc:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <HCI_TL_SPI_Init+0x88>)
 80017ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d0:	4a1e      	ldr	r2, [pc, #120]	@ (800184c <HCI_TL_SPI_Init+0x88>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d8:	4b1c      	ldr	r3, [pc, #112]	@ (800184c <HCI_TL_SPI_Init+0x88>)
 80017da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80017e4:	2340      	movs	r3, #64	@ 0x40
 80017e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	4619      	mov	r1, r3
 80017f8:	4815      	ldr	r0, [pc, #84]	@ (8001850 <HCI_TL_SPI_Init+0x8c>)
 80017fa:	f002 f9ad 	bl	8003b58 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80017fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001804:	2301      	movs	r3, #1
 8001806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	4619      	mov	r1, r3
 8001816:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800181a:	f002 f99d 	bl	8003b58 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800181e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	4619      	mov	r1, r3
 8001836:	4807      	ldr	r0, [pc, #28]	@ (8001854 <HCI_TL_SPI_Init+0x90>)
 8001838:	f002 f98e 	bl	8003b58 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 800183c:	f001 fc84 	bl	8003148 <BSP_SPI3_Init>
 8001840:	4603      	mov	r3, r0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3720      	adds	r7, #32
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
 8001850:	48001000 	.word	0x48001000
 8001854:	48000c00 	.word	0x48000c00

08001858 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 800185c:	2140      	movs	r1, #64	@ 0x40
 800185e:	4808      	ldr	r0, [pc, #32]	@ (8001880 <HCI_TL_SPI_DeInit+0x28>)
 8001860:	f002 fb24 	bl	8003eac <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001864:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001868:	4806      	ldr	r0, [pc, #24]	@ (8001884 <HCI_TL_SPI_DeInit+0x2c>)
 800186a:	f002 fb1f 	bl	8003eac <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800186e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001876:	f002 fb19 	bl	8003eac <HAL_GPIO_DeInit>
  return 0;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	bd80      	pop	{r7, pc}
 8001880:	48001000 	.word	0x48001000
 8001884:	48000c00 	.word	0x48000c00

08001888 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800188c:	2201      	movs	r2, #1
 800188e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001892:	480d      	ldr	r0, [pc, #52]	@ (80018c8 <HCI_TL_SPI_Reset+0x40>)
 8001894:	f002 fc16 	bl	80040c4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800189e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018a2:	f002 fc0f 	bl	80040c4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80018a6:	2005      	movs	r0, #5
 80018a8:	f001 fee6 	bl	8003678 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80018ac:	2201      	movs	r2, #1
 80018ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b6:	f002 fc05 	bl	80040c4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80018ba:	2005      	movs	r0, #5
 80018bc:	f001 fedc 	bl	8003678 <HAL_Delay>
  return 0;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	48000c00 	.word	0x48000c00

080018cc <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80018dc:	23ff      	movs	r3, #255	@ 0xff
 80018de:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80018e0:	230b      	movs	r3, #11
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	2300      	movs	r3, #0
 80018e6:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80018e8:	2200      	movs	r2, #0
 80018ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018ee:	4822      	ldr	r0, [pc, #136]	@ (8001978 <HCI_TL_SPI_Receive+0xac>)
 80018f0:	f002 fbe8 	bl	80040c4 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80018f4:	f107 010c 	add.w	r1, r7, #12
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2205      	movs	r2, #5
 80018fe:	4618      	mov	r0, r3
 8001900:	f001 fc52 	bl	80031a8 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8001904:	7b3b      	ldrb	r3, [r7, #12]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d12a      	bne.n	8001960 <HCI_TL_SPI_Receive+0x94>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800190a:	7c3b      	ldrb	r3, [r7, #16]
 800190c:	b21b      	sxth	r3, r3
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	b21a      	sxth	r2, r3
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	b21b      	sxth	r3, r3
 8001916:	4313      	orrs	r3, r2
 8001918:	b21b      	sxth	r3, r3
 800191a:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 800191c:	8bfb      	ldrh	r3, [r7, #30]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d01e      	beq.n	8001960 <HCI_TL_SPI_Receive+0x94>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8001922:	8bfa      	ldrh	r2, [r7, #30]
 8001924:	887b      	ldrh	r3, [r7, #2]
 8001926:	429a      	cmp	r2, r3
 8001928:	d901      	bls.n	800192e <HCI_TL_SPI_Receive+0x62>
        byte_count = size;
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 800192e:	2300      	movs	r3, #0
 8001930:	777b      	strb	r3, [r7, #29]
 8001932:	e010      	b.n	8001956 <HCI_TL_SPI_Receive+0x8a>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8001934:	f107 011b 	add.w	r1, r7, #27
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	2201      	movs	r2, #1
 800193e:	4618      	mov	r0, r3
 8001940:	f001 fc32 	bl	80031a8 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8001944:	7f7b      	ldrb	r3, [r7, #29]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	7efa      	ldrb	r2, [r7, #27]
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8001950:	7f7b      	ldrb	r3, [r7, #29]
 8001952:	3301      	adds	r3, #1
 8001954:	777b      	strb	r3, [r7, #29]
 8001956:	7f7b      	ldrb	r3, [r7, #29]
 8001958:	b29b      	uxth	r3, r3
 800195a:	8bfa      	ldrh	r2, [r7, #30]
 800195c:	429a      	cmp	r2, r3
 800195e:	d8e9      	bhi.n	8001934 <HCI_TL_SPI_Receive+0x68>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001960:	2201      	movs	r2, #1
 8001962:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001966:	4804      	ldr	r0, [pc, #16]	@ (8001978 <HCI_TL_SPI_Receive+0xac>)
 8001968:	f002 fbac 	bl	80040c4 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 800196c:	7f7b      	ldrb	r3, [r7, #29]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3720      	adds	r7, #32
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	48000c00 	.word	0x48000c00

0800197c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001988:	230a      	movs	r3, #10
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	2300      	movs	r3, #0
 800198e:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8001990:	f001 fe66 	bl	8003660 <HAL_GetTick>
 8001994:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019a0:	481c      	ldr	r0, [pc, #112]	@ (8001a14 <HCI_TL_SPI_Send+0x98>)
 80019a2:	f002 fb8f 	bl	80040c4 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80019a6:	f107 0108 	add.w	r1, r7, #8
 80019aa:	f107 0310 	add.w	r3, r7, #16
 80019ae:	2205      	movs	r2, #5
 80019b0:	4618      	mov	r0, r3
 80019b2:	f001 fbf9 	bl	80031a8 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 80019b6:	7a3b      	ldrb	r3, [r7, #8]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d10f      	bne.n	80019dc <HCI_TL_SPI_Send+0x60>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80019bc:	7a7b      	ldrb	r3, [r7, #9]
 80019be:	461a      	mov	r2, r3
 80019c0:	887b      	ldrh	r3, [r7, #2]
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d806      	bhi.n	80019d4 <HCI_TL_SPI_Send+0x58>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 80019c6:	887b      	ldrh	r3, [r7, #2]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4913      	ldr	r1, [pc, #76]	@ (8001a18 <HCI_TL_SPI_Send+0x9c>)
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f001 fbeb 	bl	80031a8 <BSP_SPI3_SendRecv>
 80019d2:	e006      	b.n	80019e2 <HCI_TL_SPI_Send+0x66>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80019d4:	f06f 0301 	mvn.w	r3, #1
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	e002      	b.n	80019e2 <HCI_TL_SPI_Send+0x66>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295
 80019e0:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80019e2:	2201      	movs	r2, #1
 80019e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019e8:	480a      	ldr	r0, [pc, #40]	@ (8001a14 <HCI_TL_SPI_Send+0x98>)
 80019ea:	f002 fb6b 	bl	80040c4 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80019ee:	f001 fe37 	bl	8003660 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	d903      	bls.n	8001a04 <HCI_TL_SPI_Send+0x88>
    {
      result = -3;
 80019fc:	f06f 0302 	mvn.w	r3, #2
 8001a00:	61fb      	str	r3, [r7, #28]
      break;
 8001a02:	e002      	b.n	8001a0a <HCI_TL_SPI_Send+0x8e>
    }
  } while(result < 0);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	dbc5      	blt.n	8001996 <HCI_TL_SPI_Send+0x1a>

  return result;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3720      	adds	r7, #32
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	48000c00 	.word	0x48000c00
 8001a18:	20000150 	.word	0x20000150

08001a1c <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001a20:	2140      	movs	r1, #64	@ 0x40
 8001a22:	4805      	ldr	r0, [pc, #20]	@ (8001a38 <IsDataAvailable+0x1c>)
 8001a24:	f002 fb36 	bl	8004094 <HAL_GPIO_ReadPin>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	bf0c      	ite	eq
 8001a2e:	2301      	moveq	r3, #1
 8001a30:	2300      	movne	r3, #0
 8001a32:	b2db      	uxtb	r3, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	48001000 	.word	0x48001000

08001a3c <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001a42:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <hci_tl_lowlevel_init+0x50>)
 8001a44:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001a46:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <hci_tl_lowlevel_init+0x54>)
 8001a48:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001a4a:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <hci_tl_lowlevel_init+0x58>)
 8001a4c:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001a4e:	4b12      	ldr	r3, [pc, #72]	@ (8001a98 <hci_tl_lowlevel_init+0x5c>)
 8001a50:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001a52:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <hci_tl_lowlevel_init+0x60>)
 8001a54:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001a56:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <hci_tl_lowlevel_init+0x64>)
 8001a58:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f007 fd0b 	bl	8009478 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8001a62:	4910      	ldr	r1, [pc, #64]	@ (8001aa4 <hci_tl_lowlevel_init+0x68>)
 8001a64:	4810      	ldr	r0, [pc, #64]	@ (8001aa8 <hci_tl_lowlevel_init+0x6c>)
 8001a66:	f002 f833 	bl	8003ad0 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001a6a:	4a10      	ldr	r2, [pc, #64]	@ (8001aac <hci_tl_lowlevel_init+0x70>)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	480e      	ldr	r0, [pc, #56]	@ (8001aa8 <hci_tl_lowlevel_init+0x6c>)
 8001a70:	f002 f814 	bl	8003a9c <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2100      	movs	r1, #0
 8001a78:	2017      	movs	r0, #23
 8001a7a:	f001 fed9 	bl	8003830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a7e:	2017      	movs	r0, #23
 8001a80:	f001 fef2 	bl	8003868 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001a84:	bf00      	nop
 8001a86:	3720      	adds	r7, #32
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	080017c5 	.word	0x080017c5
 8001a90:	08001859 	.word	0x08001859
 8001a94:	0800197d 	.word	0x0800197d
 8001a98:	080018cd 	.word	0x080018cd
 8001a9c:	08001889 	.word	0x08001889
 8001aa0:	080031e9 	.word	0x080031e9
 8001aa4:	16000006 	.word	0x16000006
 8001aa8:	20000148 	.word	0x20000148
 8001aac:	08001ab1 	.word	0x08001ab1

08001ab0 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001ab4:	e005      	b.n	8001ac2 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f007 fe42 	bl	8009740 <hci_notify_asynch_evt>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d105      	bne.n	8001ace <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001ac2:	f7ff ffab 	bl	8001a1c <IsDataAvailable>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f4      	bne.n	8001ab6 <hci_tl_lowlevel_isr+0x6>
 8001acc:	e000      	b.n	8001ad0 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001ace:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4a07      	ldr	r2, [pc, #28]	@ (8001b00 <vApplicationGetIdleTaskMemory+0x2c>)
 8001ae4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	4a06      	ldr	r2, [pc, #24]	@ (8001b04 <vApplicationGetIdleTaskMemory+0x30>)
 8001aea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2280      	movs	r2, #128	@ 0x80
 8001af0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000250 	.word	0x20000250
 8001b04:	200002a4 	.word	0x200002a4

08001b08 <Add_Acc_Service>:
//                      GATT_NOTIFY_ATTRIBUTE_WRITE,
//                      16, 1,
//                      &SampleFreqCharHandle);
//}
void Add_Acc_Service(void)
{
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b08b      	sub	sp, #44	@ 0x2c
 8001b0c:	af06      	add	r7, sp, #24
    uint8_t uuid128_base[16] = {
 8001b0e:	4b21      	ldr	r3, [pc, #132]	@ (8001b94 <Add_Acc_Service+0x8c>)
 8001b10:	463c      	mov	r4, r7
 8001b12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0xd5, 0xa5, 0x02, 0x00, 0x36, 0xac, 0xe1, 0x11,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    // UUID for service: 0000AA00-0000-0001-11e1-ac360002a5d5
    uuid128_base[12] = 0x00;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	733b      	strb	r3, [r7, #12]
    uuid128_base[13] = 0xAA;
 8001b1c:	23aa      	movs	r3, #170	@ 0xaa
 8001b1e:	737b      	strb	r3, [r7, #13]
    aci_gatt_add_serv(UUID_TYPE_128, uuid128_base, PRIMARY_SERVICE, 7, &AccServiceHandle);
 8001b20:	4639      	mov	r1, r7
 8001b22:	4b1d      	ldr	r3, [pc, #116]	@ (8001b98 <Add_Acc_Service+0x90>)
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2307      	movs	r3, #7
 8001b28:	2201      	movs	r2, #1
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	f007 f840 	bl	8008bb0 <aci_gatt_add_serv>

    // UUID for ACC characteristic: 00000100-0000-0001-11e1-ac360002a5d5
    uuid128_base[12] = 0x00;
 8001b30:	2300      	movs	r3, #0
 8001b32:	733b      	strb	r3, [r7, #12]
    uuid128_base[13] = 0x01;
 8001b34:	2301      	movs	r3, #1
 8001b36:	737b      	strb	r3, [r7, #13]
    aci_gatt_add_char(
 8001b38:	4b17      	ldr	r3, [pc, #92]	@ (8001b98 <Add_Acc_Service+0x90>)
 8001b3a:	8818      	ldrh	r0, [r3, #0]
 8001b3c:	463a      	mov	r2, r7
 8001b3e:	4b17      	ldr	r3, [pc, #92]	@ (8001b9c <Add_Acc_Service+0x94>)
 8001b40:	9305      	str	r3, [sp, #20]
 8001b42:	2301      	movs	r3, #1
 8001b44:	9304      	str	r3, [sp, #16]
 8001b46:	2310      	movs	r3, #16
 8001b48:	9303      	str	r3, [sp, #12]
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	9302      	str	r3, [sp, #8]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	2312      	movs	r3, #18
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2306      	movs	r3, #6
 8001b58:	2102      	movs	r1, #2
 8001b5a:	f007 f8b2 	bl	8008cc2 <aci_gatt_add_char>
//        CHAR_PROP_WRITE | CHAR_PROP_WRITE_WITHOUT_RESP,
//        ATTR_PERMISSION_NONE,
//        GATT_NOTIFY_ATTRIBUTE_WRITE,
//        16, 1,
//        &SampleFreqCharHandle);
    uuid128_base[12] = 0x01;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	733b      	strb	r3, [r7, #12]
    uuid128_base[13] = 0x01;
 8001b62:	2301      	movs	r3, #1
 8001b64:	737b      	strb	r3, [r7, #13]
    aci_gatt_add_char(
 8001b66:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <Add_Acc_Service+0x90>)
 8001b68:	8818      	ldrh	r0, [r3, #0]
 8001b6a:	463a      	mov	r2, r7
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <Add_Acc_Service+0x98>)
 8001b6e:	9305      	str	r3, [sp, #20]
 8001b70:	2301      	movs	r3, #1
 8001b72:	9304      	str	r3, [sp, #16]
 8001b74:	2310      	movs	r3, #16
 8001b76:	9303      	str	r3, [sp, #12]
 8001b78:	2302      	movs	r3, #2
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	230c      	movs	r3, #12
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2304      	movs	r3, #4
 8001b86:	2102      	movs	r1, #2
 8001b88:	f007 f89b 	bl	8008cc2 <aci_gatt_add_char>
        CHAR_PROP_WRITE | CHAR_PROP_WRITE_WITHOUT_RESP,
        ATTR_PERMISSION_NONE,
		GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP,
        16, 1,
        &SampleFreqCharHandle);
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd90      	pop	{r4, r7, pc}
 8001b94:	0800bf44 	.word	0x0800bf44
 8001b98:	20001bc4 	.word	0x20001bc4
 8001b9c:	20001bc6 	.word	0x20001bc6
 8001ba0:	20001bc8 	.word	0x20001bc8

08001ba4 <Update_Accel_Char>:

void Update_Accel_Char(int16_t *pDataXYZ)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	6078      	str	r0, [r7, #4]
    uint8_t notification[6];
    notification[0] = pDataXYZ[0] & 0xFF;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	723b      	strb	r3, [r7, #8]
    notification[1] = (pDataXYZ[0] >> 8) & 0xFF;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bbc:	121b      	asrs	r3, r3, #8
 8001bbe:	b21b      	sxth	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	727b      	strb	r3, [r7, #9]
    notification[2] = pDataXYZ[1] & 0xFF;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	72bb      	strb	r3, [r7, #10]
    notification[3] = (pDataXYZ[1] >> 8) & 0xFF;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd8:	121b      	asrs	r3, r3, #8
 8001bda:	b21b      	sxth	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	72fb      	strb	r3, [r7, #11]
    notification[4] = pDataXYZ[2] & 0xFF;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3304      	adds	r3, #4
 8001be4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	733b      	strb	r3, [r7, #12]
    notification[5] = (pDataXYZ[2] >> 8) & 0xFF;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3304      	adds	r3, #4
 8001bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf4:	121b      	asrs	r3, r3, #8
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	737b      	strb	r3, [r7, #13]

    aci_gatt_update_char_value(AccServiceHandle, AccCharHandle, 0, 6, notification);
 8001bfc:	4b07      	ldr	r3, [pc, #28]	@ (8001c1c <Update_Accel_Char+0x78>)
 8001bfe:	8818      	ldrh	r0, [r3, #0]
 8001c00:	4b07      	ldr	r3, [pc, #28]	@ (8001c20 <Update_Accel_Char+0x7c>)
 8001c02:	8819      	ldrh	r1, [r3, #0]
 8001c04:	f107 0308 	add.w	r3, r7, #8
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2306      	movs	r3, #6
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f007 f923 	bl	8008e58 <aci_gatt_update_char_value>
}
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20001bc4 	.word	0x20001bc4
 8001c20:	20001bc6 	.word	0x20001bc6

08001c24 <Attribute_Modified_CB>:
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	603a      	str	r2, [r7, #0]
 8001c2e:	80fb      	strh	r3, [r7, #6]
 8001c30:	460b      	mov	r3, r1
 8001c32:	717b      	strb	r3, [r7, #5]
    if (handle == SampleFreqCharHandle + 1) // +1 to reach the value handle
 8001c34:	88fa      	ldrh	r2, [r7, #6]
 8001c36:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <Attribute_Modified_CB+0x68>)
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d121      	bne.n	8001c84 <Attribute_Modified_CB+0x60>
    {
        g_sample_rate = (uint32_t)(att_data[0] | (att_data[1] << 8) | (att_data[2] << 16) | (att_data[3] << 24));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	3302      	adds	r3, #2
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	041b      	lsls	r3, r3, #16
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	3303      	adds	r3, #3
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	061b      	lsls	r3, r3, #24
 8001c62:	4313      	orrs	r3, r2
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b0a      	ldr	r3, [pc, #40]	@ (8001c90 <Attribute_Modified_CB+0x6c>)
 8001c68:	601a      	str	r2, [r3, #0]

        if (g_sample_rate == 0) g_sample_rate = 1; // avoid divide-by-zero later
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <Attribute_Modified_CB+0x6c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <Attribute_Modified_CB+0x54>
 8001c72:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <Attribute_Modified_CB+0x6c>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
        printf("[BLE] Sample rate updated to: %lu\n", g_sample_rate);
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <Attribute_Modified_CB+0x6c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4805      	ldr	r0, [pc, #20]	@ (8001c94 <Attribute_Modified_CB+0x70>)
 8001c80:	f009 fa4e 	bl	800b120 <iprintf>
    }
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20001bc8 	.word	0x20001bc8
 8001c90:	20000004 	.word	0x20000004
 8001c94:	0800bf54 	.word	0x0800bf54

08001c98 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001ca0:	1d39      	adds	r1, r7, #4
 8001ca2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	4803      	ldr	r0, [pc, #12]	@ (8001cb8 <__io_putchar+0x20>)
 8001caa:	f005 fd29 	bl	8007700 <HAL_UART_Transmit>
	return ch;
 8001cae:	687b      	ldr	r3, [r7, #4]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000520 	.word	0x20000520

08001cbc <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8001cbc:	b5b0      	push	{r4, r5, r7, lr}
 8001cbe:	b08e      	sub	sp, #56	@ 0x38
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc2:	f001 fca1 	bl	8003608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc6:	f000 f843 	bl	8001d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cca:	f000 f98f 	bl	8001fec <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001cce:	f000 f8a1 	bl	8001e14 <MX_DFSDM1_Init>
  //MX_I2C2_Init();
  MX_QUADSPI_Init();
 8001cd2:	f000 f8d7 	bl	8001e84 <MX_QUADSPI_Init>
  MX_USART1_UART_Init();
 8001cd6:	f000 f8fb 	bl	8001ed0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001cda:	f000 f929 	bl	8001f30 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001cde:	f000 f957 	bl	8001f90 <MX_USB_OTG_FS_PCD_Init>
  MX_BlueNRG_MS_Init();
 8001ce2:	f7fe fe6f 	bl	80009c4 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8001ce6:	f001 fc37 	bl	8003558 <BSP_ACCELERO_Init>
  Add_Acc_Service();
 8001cea:	f7ff ff0d 	bl	8001b08 <Add_Acc_Service>
  /* definition and creation of defaultTask */
  /*osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);*/

  /* definition and creation of myTaskBLE */
  osThreadStaticDef(myTaskBLE, StartTaskBLE, osPriorityNormal, 0, 512, myTaskBLEBuffer, &myTaskBLEControlBlock);
 8001cee:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <main+0x84>)
 8001cf0:	f107 041c 	add.w	r4, r7, #28
 8001cf4:	461d      	mov	r5, r3
 8001cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cfa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTaskBLEHandle = osThreadCreate(osThread(myTaskBLE), NULL);
 8001d02:	f107 031c 	add.w	r3, r7, #28
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f007 fe9b 	bl	8009a44 <osThreadCreate>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4a0c      	ldr	r2, [pc, #48]	@ (8001d44 <main+0x88>)
 8001d12:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTaskACC */
  osThreadStaticDef(myTaskACC, StartTaskACC, osPriorityNormal, 0, 512, myTaskACCBuffer, &myTaskACCControlBlock);
 8001d14:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <main+0x8c>)
 8001d16:	463c      	mov	r4, r7
 8001d18:	461d      	mov	r5, r3
 8001d1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTaskACCHandle = osThreadCreate(osThread(myTaskACC), NULL);
 8001d26:	463b      	mov	r3, r7
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f007 fe8a 	bl	8009a44 <osThreadCreate>
 8001d30:	4603      	mov	r3, r0
 8001d32:	4a06      	ldr	r2, [pc, #24]	@ (8001d4c <main+0x90>)
 8001d34:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001d36:	f007 fe7e 	bl	8009a36 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d3a:	bf00      	nop
 8001d3c:	e7fd      	b.n	8001d3a <main+0x7e>
 8001d3e:	bf00      	nop
 8001d40:	0800bf84 	.word	0x0800bf84
 8001d44:	20000b14 	.word	0x20000b14
 8001d48:	0800bfac 	.word	0x0800bfac
 8001d4c:	2000136c 	.word	0x2000136c

08001d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b096      	sub	sp, #88	@ 0x58
 8001d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	2244      	movs	r2, #68	@ 0x44
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f009 fa33 	bl	800b1ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d64:	463b      	mov	r3, r7
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d72:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001d76:	f003 f951 	bl	800501c <HAL_PWREx_ControlVoltageScaling>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d80:	f000 fb10 	bl	80023a4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d84:	f003 f92c 	bl	8004fe0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001d88:	4b21      	ldr	r3, [pc, #132]	@ (8001e10 <SystemClock_Config+0xc0>)
 8001d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d8e:	4a20      	ldr	r2, [pc, #128]	@ (8001e10 <SystemClock_Config+0xc0>)
 8001d90:	f023 0318 	bic.w	r3, r3, #24
 8001d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001d98:	2314      	movs	r3, #20
 8001d9a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001da0:	2301      	movs	r3, #1
 8001da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001da8:	2360      	movs	r3, #96	@ 0x60
 8001daa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dac:	2302      	movs	r3, #2
 8001dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001db0:	2301      	movs	r3, #1
 8001db2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001db4:	2301      	movs	r3, #1
 8001db6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001db8:	2328      	movs	r3, #40	@ 0x28
 8001dba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001dbc:	2307      	movs	r3, #7
 8001dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fa47 	bl	8005260 <HAL_RCC_OscConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001dd8:	f000 fae4 	bl	80023a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ddc:	230f      	movs	r3, #15
 8001dde:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de0:	2303      	movs	r3, #3
 8001de2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001df0:	463b      	mov	r3, r7
 8001df2:	2104      	movs	r1, #4
 8001df4:	4618      	mov	r0, r3
 8001df6:	f003 fe0f 	bl	8005a18 <HAL_RCC_ClockConfig>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001e00:	f000 fad0 	bl	80023a4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001e04:	f004 fb48 	bl	8006498 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001e08:	bf00      	nop
 8001e0a:	3758      	adds	r7, #88	@ 0x58
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000

08001e14 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001e18:	4b18      	ldr	r3, [pc, #96]	@ (8001e7c <MX_DFSDM1_Init+0x68>)
 8001e1a:	4a19      	ldr	r2, [pc, #100]	@ (8001e80 <MX_DFSDM1_Init+0x6c>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001e1e:	4b17      	ldr	r3, [pc, #92]	@ (8001e7c <MX_DFSDM1_Init+0x68>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001e24:	4b15      	ldr	r3, [pc, #84]	@ (8001e7c <MX_DFSDM1_Init+0x68>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001e2a:	4b14      	ldr	r3, [pc, #80]	@ (8001e7c <MX_DFSDM1_Init+0x68>)
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001e30:	4b12      	ldr	r3, [pc, #72]	@ (8001e7c <MX_DFSDM1_Init+0x68>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001e36:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <MX_DFSDM1_Init+0x68>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e7c <MX_DFSDM1_Init+0x68>)
 8001e3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e42:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001e44:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <MX_DFSDM1_Init+0x68>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e7c <MX_DFSDM1_Init+0x68>)
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001e50:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <MX_DFSDM1_Init+0x68>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001e56:	4b09      	ldr	r3, [pc, #36]	@ (8001e7c <MX_DFSDM1_Init+0x68>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001e5c:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <MX_DFSDM1_Init+0x68>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001e62:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <MX_DFSDM1_Init+0x68>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001e68:	4804      	ldr	r0, [pc, #16]	@ (8001e7c <MX_DFSDM1_Init+0x68>)
 8001e6a:	f001 fd0b 	bl	8003884 <HAL_DFSDM_ChannelInit>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001e74:	f000 fa96 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	200004a4 	.word	0x200004a4
 8001e80:	40016020 	.word	0x40016020

08001e84 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <MX_QUADSPI_Init+0x44>)
 8001e8a:	4a10      	ldr	r2, [pc, #64]	@ (8001ecc <MX_QUADSPI_Init+0x48>)
 8001e8c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec8 <MX_QUADSPI_Init+0x44>)
 8001e90:	2202      	movs	r2, #2
 8001e92:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001e94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <MX_QUADSPI_Init+0x44>)
 8001e96:	2204      	movs	r2, #4
 8001e98:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec8 <MX_QUADSPI_Init+0x44>)
 8001e9c:	2210      	movs	r2, #16
 8001e9e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001ea0:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <MX_QUADSPI_Init+0x44>)
 8001ea2:	2217      	movs	r2, #23
 8001ea4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001ea6:	4b08      	ldr	r3, [pc, #32]	@ (8001ec8 <MX_QUADSPI_Init+0x44>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001eac:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <MX_QUADSPI_Init+0x44>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001eb2:	4805      	ldr	r0, [pc, #20]	@ (8001ec8 <MX_QUADSPI_Init+0x44>)
 8001eb4:	f003 f918 	bl	80050e8 <HAL_QSPI_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001ebe:	f000 fa71 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200004dc 	.word	0x200004dc
 8001ecc:	a0001000 	.word	0xa0001000

08001ed0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ed4:	4b14      	ldr	r3, [pc, #80]	@ (8001f28 <MX_USART1_UART_Init+0x58>)
 8001ed6:	4a15      	ldr	r2, [pc, #84]	@ (8001f2c <MX_USART1_UART_Init+0x5c>)
 8001ed8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001eda:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <MX_USART1_UART_Init+0x58>)
 8001edc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ee0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee2:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <MX_USART1_UART_Init+0x58>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f28 <MX_USART1_UART_Init+0x58>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eee:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <MX_USART1_UART_Init+0x58>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <MX_USART1_UART_Init+0x58>)
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efa:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <MX_USART1_UART_Init+0x58>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f00:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <MX_USART1_UART_Init+0x58>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f06:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <MX_USART1_UART_Init+0x58>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f0c:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <MX_USART1_UART_Init+0x58>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f12:	4805      	ldr	r0, [pc, #20]	@ (8001f28 <MX_USART1_UART_Init+0x58>)
 8001f14:	f005 fba6 	bl	8007664 <HAL_UART_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f1e:	f000 fa41 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000520 	.word	0x20000520
 8001f2c:	40013800 	.word	0x40013800

08001f30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f34:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f36:	4a15      	ldr	r2, [pc, #84]	@ (8001f8c <MX_USART3_UART_Init+0x5c>)
 8001f38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f3a:	4b13      	ldr	r3, [pc, #76]	@ (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f42:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f48:	4b0f      	ldr	r3, [pc, #60]	@ (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f56:	220c      	movs	r2, #12
 8001f58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f60:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f66:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f72:	4805      	ldr	r0, [pc, #20]	@ (8001f88 <MX_USART3_UART_Init+0x58>)
 8001f74:	f005 fb76 	bl	8007664 <HAL_UART_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f7e:	f000 fa11 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200005a8 	.word	0x200005a8
 8001f8c:	40004800 	.word	0x40004800

08001f90 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f94:	4b14      	ldr	r3, [pc, #80]	@ (8001fe8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f96:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001f9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001f9c:	4b12      	ldr	r3, [pc, #72]	@ (8001fe8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f9e:	2206      	movs	r2, #6
 8001fa0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001fa2:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001faa:	2202      	movs	r2, #2
 8001fac:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001fba:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001fc0:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001fc6:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001fd2:	4805      	ldr	r0, [pc, #20]	@ (8001fe8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fd4:	f002 fed1 	bl	8004d7a <HAL_PCD_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001fde:	f000 f9e1 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000630 	.word	0x20000630

08001fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	@ 0x28
 8001ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	60da      	str	r2, [r3, #12]
 8002000:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002002:	4bbd      	ldr	r3, [pc, #756]	@ (80022f8 <MX_GPIO_Init+0x30c>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002006:	4abc      	ldr	r2, [pc, #752]	@ (80022f8 <MX_GPIO_Init+0x30c>)
 8002008:	f043 0310 	orr.w	r3, r3, #16
 800200c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800200e:	4bba      	ldr	r3, [pc, #744]	@ (80022f8 <MX_GPIO_Init+0x30c>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800201a:	4bb7      	ldr	r3, [pc, #732]	@ (80022f8 <MX_GPIO_Init+0x30c>)
 800201c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201e:	4ab6      	ldr	r2, [pc, #728]	@ (80022f8 <MX_GPIO_Init+0x30c>)
 8002020:	f043 0304 	orr.w	r3, r3, #4
 8002024:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002026:	4bb4      	ldr	r3, [pc, #720]	@ (80022f8 <MX_GPIO_Init+0x30c>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	4bb1      	ldr	r3, [pc, #708]	@ (80022f8 <MX_GPIO_Init+0x30c>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002036:	4ab0      	ldr	r2, [pc, #704]	@ (80022f8 <MX_GPIO_Init+0x30c>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800203e:	4bae      	ldr	r3, [pc, #696]	@ (80022f8 <MX_GPIO_Init+0x30c>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800204a:	4bab      	ldr	r3, [pc, #684]	@ (80022f8 <MX_GPIO_Init+0x30c>)
 800204c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204e:	4aaa      	ldr	r2, [pc, #680]	@ (80022f8 <MX_GPIO_Init+0x30c>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002056:	4ba8      	ldr	r3, [pc, #672]	@ (80022f8 <MX_GPIO_Init+0x30c>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002062:	4ba5      	ldr	r3, [pc, #660]	@ (80022f8 <MX_GPIO_Init+0x30c>)
 8002064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002066:	4aa4      	ldr	r2, [pc, #656]	@ (80022f8 <MX_GPIO_Init+0x30c>)
 8002068:	f043 0308 	orr.w	r3, r3, #8
 800206c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800206e:	4ba2      	ldr	r3, [pc, #648]	@ (80022f8 <MX_GPIO_Init+0x30c>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8002080:	489e      	ldr	r0, [pc, #632]	@ (80022fc <MX_GPIO_Init+0x310>)
 8002082:	f002 f81f 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8002086:	2200      	movs	r2, #0
 8002088:	f248 1104 	movw	r1, #33028	@ 0x8104
 800208c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002090:	f002 f818 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8002094:	2200      	movs	r2, #0
 8002096:	f24b 0114 	movw	r1, #45076	@ 0xb014
 800209a:	4899      	ldr	r0, [pc, #612]	@ (8002300 <MX_GPIO_Init+0x314>)
 800209c:	f002 f812 	bl	80040c4 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80020a0:	2200      	movs	r2, #0
 80020a2:	f241 0181 	movw	r1, #4225	@ 0x1081
 80020a6:	4897      	ldr	r0, [pc, #604]	@ (8002304 <MX_GPIO_Init+0x318>)
 80020a8:	f002 f80c 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80020ac:	2201      	movs	r2, #1
 80020ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020b2:	4894      	ldr	r0, [pc, #592]	@ (8002304 <MX_GPIO_Init+0x318>)
 80020b4:	f002 f806 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80020b8:	2200      	movs	r2, #0
 80020ba:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80020be:	4892      	ldr	r0, [pc, #584]	@ (8002308 <MX_GPIO_Init+0x31c>)
 80020c0:	f002 f800 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80020c4:	2201      	movs	r2, #1
 80020c6:	2120      	movs	r1, #32
 80020c8:	488d      	ldr	r0, [pc, #564]	@ (8002300 <MX_GPIO_Init+0x314>)
 80020ca:	f001 fffb 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80020ce:	2201      	movs	r2, #1
 80020d0:	2101      	movs	r1, #1
 80020d2:	488a      	ldr	r0, [pc, #552]	@ (80022fc <MX_GPIO_Init+0x310>)
 80020d4:	f001 fff6 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80020d8:	f240 1315 	movw	r3, #277	@ 0x115
 80020dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020de:	2301      	movs	r3, #1
 80020e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020ea:	f107 0314 	add.w	r3, r7, #20
 80020ee:	4619      	mov	r1, r3
 80020f0:	4882      	ldr	r0, [pc, #520]	@ (80022fc <MX_GPIO_Init+0x310>)
 80020f2:	f001 fd31 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80020f6:	236a      	movs	r3, #106	@ 0x6a
 80020f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	4619      	mov	r1, r3
 800210a:	487c      	ldr	r0, [pc, #496]	@ (80022fc <MX_GPIO_Init+0x310>)
 800210c:	f001 fd24 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002110:	233f      	movs	r3, #63	@ 0x3f
 8002112:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002114:	230b      	movs	r3, #11
 8002116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	4619      	mov	r1, r3
 8002122:	4879      	ldr	r0, [pc, #484]	@ (8002308 <MX_GPIO_Init+0x31c>)
 8002124:	f001 fd18 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002128:	2303      	movs	r3, #3
 800212a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002134:	2303      	movs	r3, #3
 8002136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002138:	2308      	movs	r3, #8
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	4619      	mov	r1, r3
 8002142:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002146:	f001 fd07 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800214a:	f248 1304 	movw	r3, #33028	@ 0x8104
 800214e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002150:	2301      	movs	r3, #1
 8002152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002158:	2300      	movs	r3, #0
 800215a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	4619      	mov	r1, r3
 8002162:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002166:	f001 fcf7 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800216a:	2308      	movs	r3, #8
 800216c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	2300      	movs	r3, #0
 8002178:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800217a:	2301      	movs	r3, #1
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002188:	f001 fce6 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800218c:	2310      	movs	r3, #16
 800218e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002190:	230b      	movs	r3, #11
 8002192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	4619      	mov	r1, r3
 800219e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a2:	f001 fcd9 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80021a6:	23e0      	movs	r3, #224	@ 0xe0
 80021a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b2:	2303      	movs	r3, #3
 80021b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021b6:	2305      	movs	r3, #5
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021c4:	f001 fcc8 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80021c8:	2301      	movs	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	4848      	ldr	r0, [pc, #288]	@ (8002300 <MX_GPIO_Init+0x314>)
 80021de:	f001 fcbb 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80021e2:	2302      	movs	r3, #2
 80021e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80021e6:	230b      	movs	r3, #11
 80021e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	4842      	ldr	r0, [pc, #264]	@ (8002300 <MX_GPIO_Init+0x314>)
 80021f6:	f001 fcaf 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 80021fa:	f24b 0334 	movw	r3, #45108	@ 0xb034
 80021fe:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002200:	2301      	movs	r3, #1
 8002202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	4619      	mov	r1, r3
 8002212:	483b      	ldr	r0, [pc, #236]	@ (8002300 <MX_GPIO_Init+0x314>)
 8002214:	f001 fca0 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8002218:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 800221c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800221e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	4619      	mov	r1, r3
 800222e:	4835      	ldr	r0, [pc, #212]	@ (8002304 <MX_GPIO_Init+0x318>)
 8002230:	f001 fc92 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8002234:	f243 0381 	movw	r3, #12417	@ 0x3081
 8002238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223a:	2301      	movs	r3, #1
 800223c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	4619      	mov	r1, r3
 800224c:	482d      	ldr	r0, [pc, #180]	@ (8002304 <MX_GPIO_Init+0x318>)
 800224e:	f001 fc83 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002252:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002258:	2301      	movs	r3, #1
 800225a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4619      	mov	r1, r3
 800226a:	4827      	ldr	r0, [pc, #156]	@ (8002308 <MX_GPIO_Init+0x31c>)
 800226c:	f001 fc74 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002270:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002276:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800227a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4619      	mov	r1, r3
 8002286:	4820      	ldr	r0, [pc, #128]	@ (8002308 <MX_GPIO_Init+0x31c>)
 8002288:	f001 fc66 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800228c:	2302      	movs	r3, #2
 800228e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800229c:	2305      	movs	r3, #5
 800229e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	4619      	mov	r1, r3
 80022a6:	4817      	ldr	r0, [pc, #92]	@ (8002304 <MX_GPIO_Init+0x318>)
 80022a8:	f001 fc56 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80022ac:	2378      	movs	r3, #120	@ 0x78
 80022ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022bc:	2307      	movs	r3, #7
 80022be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4619      	mov	r1, r3
 80022c6:	480f      	ldr	r0, [pc, #60]	@ (8002304 <MX_GPIO_Init+0x318>)
 80022c8:	f001 fc46 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80022cc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022d2:	2312      	movs	r3, #18
 80022d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022da:	2303      	movs	r3, #3
 80022dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022de:	2304      	movs	r3, #4
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	4619      	mov	r1, r3
 80022e8:	4805      	ldr	r0, [pc, #20]	@ (8002300 <MX_GPIO_Init+0x314>)
 80022ea:	f001 fc35 	bl	8003b58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2105      	movs	r1, #5
 80022f2:	2017      	movs	r0, #23
 80022f4:	e00a      	b.n	800230c <MX_GPIO_Init+0x320>
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000
 80022fc:	48001000 	.word	0x48001000
 8002300:	48000400 	.word	0x48000400
 8002304:	48000c00 	.word	0x48000c00
 8002308:	48000800 	.word	0x48000800
 800230c:	f001 fa90 	bl	8003830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002310:	2017      	movs	r0, #23
 8002312:	f001 faa9 	bl	8003868 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2105      	movs	r1, #5
 800231a:	2028      	movs	r0, #40	@ 0x28
 800231c:	f001 fa88 	bl	8003830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002320:	2028      	movs	r0, #40	@ 0x28
 8002322:	f001 faa1 	bl	8003868 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002326:	bf00      	nop
 8002328:	3728      	adds	r7, #40	@ 0x28
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop

08002330 <StartTaskBLE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBLE */
void StartTaskBLE(void const * argument)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBLE */
  /* Infinite loop */
	for(;;)
	  {
	      MX_BlueNRG_MS_Process();
 8002338:	f7fe fbf0 	bl	8000b1c <MX_BlueNRG_MS_Process>
 800233c:	e7fc      	b.n	8002338 <StartTaskBLE+0x8>
	...

08002340 <StartTaskACC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskACC */
void StartTaskACC(void const * argument)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]


	  for(;;)
	  {
//		printf("current sampling rate:%d\n", g_sample_rate);
	    BSP_ACCELERO_AccGetXYZ(pDataXYZ); // Read accelerometer
 8002348:	480b      	ldr	r0, [pc, #44]	@ (8002378 <StartTaskACC+0x38>)
 800234a:	f001 f945 	bl	80035d8 <BSP_ACCELERO_AccGetXYZ>
	    Update_Accel_Char(pDataXYZ); // Update BLE characteristic
 800234e:	480a      	ldr	r0, [pc, #40]	@ (8002378 <StartTaskACC+0x38>)
 8002350:	f7ff fc28 	bl	8001ba4 <Update_Accel_Char>

        if (g_sample_rate > 0)
 8002354:	4b09      	ldr	r3, [pc, #36]	@ (800237c <StartTaskACC+0x3c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d009      	beq.n	8002370 <StartTaskACC+0x30>
            osDelay(1000 / g_sample_rate); // according to sampling rate
 800235c:	4b07      	ldr	r3, [pc, #28]	@ (800237c <StartTaskACC+0x3c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002364:	fbb2 f3f3 	udiv	r3, r2, r3
 8002368:	4618      	mov	r0, r3
 800236a:	f007 fbb7 	bl	8009adc <osDelay>
 800236e:	e7eb      	b.n	8002348 <StartTaskACC+0x8>
        else
	        osDelay(100); // default if invalid
 8002370:	2064      	movs	r0, #100	@ 0x64
 8002372:	f007 fbb3 	bl	8009adc <osDelay>
	    BSP_ACCELERO_AccGetXYZ(pDataXYZ); // Read accelerometer
 8002376:	e7e7      	b.n	8002348 <StartTaskACC+0x8>
 8002378:	20001bcc 	.word	0x20001bcc
 800237c:	20000004 	.word	0x20000004

08002380 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a04      	ldr	r2, [pc, #16]	@ (80023a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d101      	bne.n	8002396 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002392:	f001 f951 	bl	8003638 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40001000 	.word	0x40001000

080023a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a8:	b672      	cpsid	i
}
 80023aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <Error_Handler+0x8>

080023b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b6:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <HAL_MspInit+0x4c>)
 80023b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ba:	4a10      	ldr	r2, [pc, #64]	@ (80023fc <HAL_MspInit+0x4c>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80023c2:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <HAL_MspInit+0x4c>)
 80023c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	607b      	str	r3, [r7, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <HAL_MspInit+0x4c>)
 80023d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d2:	4a0a      	ldr	r2, [pc, #40]	@ (80023fc <HAL_MspInit+0x4c>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80023da:	4b08      	ldr	r3, [pc, #32]	@ (80023fc <HAL_MspInit+0x4c>)
 80023dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	210f      	movs	r1, #15
 80023ea:	f06f 0001 	mvn.w	r0, #1
 80023ee:	f001 fa1f 	bl	8003830 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000

08002400 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b0ac      	sub	sp, #176	@ 0xb0
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	2288      	movs	r2, #136	@ 0x88
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f008 fed2 	bl	800b1ca <memset>
  if(DFSDM1_Init == 0)
 8002426:	4b25      	ldr	r3, [pc, #148]	@ (80024bc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d142      	bne.n	80024b4 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800242e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002432:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4618      	mov	r0, r3
 8002440:	f003 fd40 	bl	8005ec4 <HAL_RCCEx_PeriphCLKConfig>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800244a:	f7ff ffab 	bl	80023a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800244e:	4b1c      	ldr	r3, [pc, #112]	@ (80024c0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002452:	4a1b      	ldr	r2, [pc, #108]	@ (80024c0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002454:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002458:	6613      	str	r3, [r2, #96]	@ 0x60
 800245a:	4b19      	ldr	r3, [pc, #100]	@ (80024c0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800245c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800245e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002466:	4b16      	ldr	r3, [pc, #88]	@ (80024c0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	4a15      	ldr	r2, [pc, #84]	@ (80024c0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800246c:	f043 0310 	orr.w	r3, r3, #16
 8002470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002472:	4b13      	ldr	r3, [pc, #76]	@ (80024c0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800247e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8002482:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002498:	2306      	movs	r3, #6
 800249a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800249e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024a2:	4619      	mov	r1, r3
 80024a4:	4807      	ldr	r0, [pc, #28]	@ (80024c4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80024a6:	f001 fb57 	bl	8003b58 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80024aa:	4b04      	ldr	r3, [pc, #16]	@ (80024bc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	3301      	adds	r3, #1
 80024b0:	4a02      	ldr	r2, [pc, #8]	@ (80024bc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80024b2:	6013      	str	r3, [r2, #0]
  }

}
 80024b4:	bf00      	nop
 80024b6:	37b0      	adds	r7, #176	@ 0xb0
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20001bd4 	.word	0x20001bd4
 80024c0:	40021000 	.word	0x40021000
 80024c4:	48001000 	.word	0x48001000

080024c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b0ac      	sub	sp, #176	@ 0xb0
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	2288      	movs	r2, #136	@ 0x88
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f008 fe6e 	bl	800b1ca <memset>
  if(hi2c->Instance==I2C2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a21      	ldr	r2, [pc, #132]	@ (8002578 <HAL_I2C_MspInit+0xb0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d13b      	bne.n	8002570 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80024f8:	2380      	movs	r3, #128	@ 0x80
 80024fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80024fc:	2300      	movs	r3, #0
 80024fe:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	4618      	mov	r0, r3
 8002506:	f003 fcdd 	bl	8005ec4 <HAL_RCCEx_PeriphCLKConfig>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002510:	f7ff ff48 	bl	80023a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002514:	4b19      	ldr	r3, [pc, #100]	@ (800257c <HAL_I2C_MspInit+0xb4>)
 8002516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002518:	4a18      	ldr	r2, [pc, #96]	@ (800257c <HAL_I2C_MspInit+0xb4>)
 800251a:	f043 0302 	orr.w	r3, r3, #2
 800251e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002520:	4b16      	ldr	r3, [pc, #88]	@ (800257c <HAL_I2C_MspInit+0xb4>)
 8002522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800252c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002530:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002534:	2312      	movs	r3, #18
 8002536:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800253a:	2301      	movs	r3, #1
 800253c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002540:	2303      	movs	r3, #3
 8002542:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002546:	2304      	movs	r3, #4
 8002548:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002550:	4619      	mov	r1, r3
 8002552:	480b      	ldr	r0, [pc, #44]	@ (8002580 <HAL_I2C_MspInit+0xb8>)
 8002554:	f001 fb00 	bl	8003b58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002558:	4b08      	ldr	r3, [pc, #32]	@ (800257c <HAL_I2C_MspInit+0xb4>)
 800255a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255c:	4a07      	ldr	r2, [pc, #28]	@ (800257c <HAL_I2C_MspInit+0xb4>)
 800255e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002562:	6593      	str	r3, [r2, #88]	@ 0x58
 8002564:	4b05      	ldr	r3, [pc, #20]	@ (800257c <HAL_I2C_MspInit+0xb4>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002568:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002570:	bf00      	nop
 8002572:	37b0      	adds	r7, #176	@ 0xb0
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40005800 	.word	0x40005800
 800257c:	40021000 	.word	0x40021000
 8002580:	48000400 	.word	0x48000400

08002584 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0b      	ldr	r2, [pc, #44]	@ (80025c0 <HAL_I2C_MspDeInit+0x3c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d10f      	bne.n	80025b6 <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C2_MspDeInit 0 */

    /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002596:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <HAL_I2C_MspDeInit+0x40>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259a:	4a0a      	ldr	r2, [pc, #40]	@ (80025c4 <HAL_I2C_MspDeInit+0x40>)
 800259c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80025a0:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80025a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025a6:	4808      	ldr	r0, [pc, #32]	@ (80025c8 <HAL_I2C_MspDeInit+0x44>)
 80025a8:	f001 fc80 	bl	8003eac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80025ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80025b0:	4805      	ldr	r0, [pc, #20]	@ (80025c8 <HAL_I2C_MspDeInit+0x44>)
 80025b2:	f001 fc7b 	bl	8003eac <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C2_MspDeInit 1 */

    /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40005800 	.word	0x40005800
 80025c4:	40021000 	.word	0x40021000
 80025c8:	48000400 	.word	0x48000400

080025cc <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	@ 0x28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a17      	ldr	r2, [pc, #92]	@ (8002648 <HAL_QSPI_MspInit+0x7c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d128      	bne.n	8002640 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80025ee:	4b17      	ldr	r3, [pc, #92]	@ (800264c <HAL_QSPI_MspInit+0x80>)
 80025f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025f2:	4a16      	ldr	r2, [pc, #88]	@ (800264c <HAL_QSPI_MspInit+0x80>)
 80025f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80025fa:	4b14      	ldr	r3, [pc, #80]	@ (800264c <HAL_QSPI_MspInit+0x80>)
 80025fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002606:	4b11      	ldr	r3, [pc, #68]	@ (800264c <HAL_QSPI_MspInit+0x80>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260a:	4a10      	ldr	r2, [pc, #64]	@ (800264c <HAL_QSPI_MspInit+0x80>)
 800260c:	f043 0310 	orr.w	r3, r3, #16
 8002610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002612:	4b0e      	ldr	r3, [pc, #56]	@ (800264c <HAL_QSPI_MspInit+0x80>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800261e:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002622:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002624:	2302      	movs	r3, #2
 8002626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262c:	2303      	movs	r3, #3
 800262e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002630:	230a      	movs	r3, #10
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	4619      	mov	r1, r3
 800263a:	4805      	ldr	r0, [pc, #20]	@ (8002650 <HAL_QSPI_MspInit+0x84>)
 800263c:	f001 fa8c 	bl	8003b58 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002640:	bf00      	nop
 8002642:	3728      	adds	r7, #40	@ 0x28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	a0001000 	.word	0xa0001000
 800264c:	40021000 	.word	0x40021000
 8002650:	48001000 	.word	0x48001000

08002654 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b0ae      	sub	sp, #184	@ 0xb8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800266c:	f107 031c 	add.w	r3, r7, #28
 8002670:	2288      	movs	r2, #136	@ 0x88
 8002672:	2100      	movs	r1, #0
 8002674:	4618      	mov	r0, r3
 8002676:	f008 fda8 	bl	800b1ca <memset>
  if(huart->Instance==USART1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a42      	ldr	r2, [pc, #264]	@ (8002788 <HAL_UART_MspInit+0x134>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d13b      	bne.n	80026fc <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002684:	2301      	movs	r3, #1
 8002686:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002688:	2300      	movs	r3, #0
 800268a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800268c:	f107 031c 	add.w	r3, r7, #28
 8002690:	4618      	mov	r0, r3
 8002692:	f003 fc17 	bl	8005ec4 <HAL_RCCEx_PeriphCLKConfig>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800269c:	f7ff fe82 	bl	80023a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026a0:	4b3a      	ldr	r3, [pc, #232]	@ (800278c <HAL_UART_MspInit+0x138>)
 80026a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a4:	4a39      	ldr	r2, [pc, #228]	@ (800278c <HAL_UART_MspInit+0x138>)
 80026a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80026ac:	4b37      	ldr	r3, [pc, #220]	@ (800278c <HAL_UART_MspInit+0x138>)
 80026ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026b4:	61bb      	str	r3, [r7, #24]
 80026b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b8:	4b34      	ldr	r3, [pc, #208]	@ (800278c <HAL_UART_MspInit+0x138>)
 80026ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026bc:	4a33      	ldr	r2, [pc, #204]	@ (800278c <HAL_UART_MspInit+0x138>)
 80026be:	f043 0302 	orr.w	r3, r3, #2
 80026c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026c4:	4b31      	ldr	r3, [pc, #196]	@ (800278c <HAL_UART_MspInit+0x138>)
 80026c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80026d0:	23c0      	movs	r3, #192	@ 0xc0
 80026d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e2:	2303      	movs	r3, #3
 80026e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026e8:	2307      	movs	r3, #7
 80026ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80026f2:	4619      	mov	r1, r3
 80026f4:	4826      	ldr	r0, [pc, #152]	@ (8002790 <HAL_UART_MspInit+0x13c>)
 80026f6:	f001 fa2f 	bl	8003b58 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80026fa:	e040      	b.n	800277e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a24      	ldr	r2, [pc, #144]	@ (8002794 <HAL_UART_MspInit+0x140>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d13b      	bne.n	800277e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002706:	2304      	movs	r3, #4
 8002708:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800270a:	2300      	movs	r3, #0
 800270c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800270e:	f107 031c 	add.w	r3, r7, #28
 8002712:	4618      	mov	r0, r3
 8002714:	f003 fbd6 	bl	8005ec4 <HAL_RCCEx_PeriphCLKConfig>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800271e:	f7ff fe41 	bl	80023a4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002722:	4b1a      	ldr	r3, [pc, #104]	@ (800278c <HAL_UART_MspInit+0x138>)
 8002724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002726:	4a19      	ldr	r2, [pc, #100]	@ (800278c <HAL_UART_MspInit+0x138>)
 8002728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800272c:	6593      	str	r3, [r2, #88]	@ 0x58
 800272e:	4b17      	ldr	r3, [pc, #92]	@ (800278c <HAL_UART_MspInit+0x138>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002732:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800273a:	4b14      	ldr	r3, [pc, #80]	@ (800278c <HAL_UART_MspInit+0x138>)
 800273c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273e:	4a13      	ldr	r2, [pc, #76]	@ (800278c <HAL_UART_MspInit+0x138>)
 8002740:	f043 0308 	orr.w	r3, r3, #8
 8002744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002746:	4b11      	ldr	r3, [pc, #68]	@ (800278c <HAL_UART_MspInit+0x138>)
 8002748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002752:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002756:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275a:	2302      	movs	r3, #2
 800275c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002766:	2303      	movs	r3, #3
 8002768:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800276c:	2307      	movs	r3, #7
 800276e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002772:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002776:	4619      	mov	r1, r3
 8002778:	4807      	ldr	r0, [pc, #28]	@ (8002798 <HAL_UART_MspInit+0x144>)
 800277a:	f001 f9ed 	bl	8003b58 <HAL_GPIO_Init>
}
 800277e:	bf00      	nop
 8002780:	37b8      	adds	r7, #184	@ 0xb8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40013800 	.word	0x40013800
 800278c:	40021000 	.word	0x40021000
 8002790:	48000400 	.word	0x48000400
 8002794:	40004800 	.word	0x40004800
 8002798:	48000c00 	.word	0x48000c00

0800279c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b0ac      	sub	sp, #176	@ 0xb0
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	2288      	movs	r2, #136	@ 0x88
 80027ba:	2100      	movs	r1, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	f008 fd04 	bl	800b1ca <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027ca:	d17c      	bne.n	80028c6 <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80027cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80027d2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80027d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80027da:	2301      	movs	r3, #1
 80027dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80027de:	2301      	movs	r3, #1
 80027e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80027e2:	2318      	movs	r3, #24
 80027e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80027e6:	2307      	movs	r3, #7
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80027ea:	2302      	movs	r3, #2
 80027ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80027ee:	2302      	movs	r3, #2
 80027f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80027f2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80027f6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	4618      	mov	r0, r3
 80027fe:	f003 fb61 	bl	8005ec4 <HAL_RCCEx_PeriphCLKConfig>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002808:	f7ff fdcc 	bl	80023a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280c:	4b30      	ldr	r3, [pc, #192]	@ (80028d0 <HAL_PCD_MspInit+0x134>)
 800280e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002810:	4a2f      	ldr	r2, [pc, #188]	@ (80028d0 <HAL_PCD_MspInit+0x134>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002818:	4b2d      	ldr	r3, [pc, #180]	@ (80028d0 <HAL_PCD_MspInit+0x134>)
 800281a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002824:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002828:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800282c:	2300      	movs	r3, #0
 800282e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002838:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800283c:	4619      	mov	r1, r3
 800283e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002842:	f001 f989 	bl	8003b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002846:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800284a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284e:	2302      	movs	r3, #2
 8002850:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285a:	2303      	movs	r3, #3
 800285c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002860:	230a      	movs	r3, #10
 8002862:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002866:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800286a:	4619      	mov	r1, r3
 800286c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002870:	f001 f972 	bl	8003b58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002874:	4b16      	ldr	r3, [pc, #88]	@ (80028d0 <HAL_PCD_MspInit+0x134>)
 8002876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002878:	4a15      	ldr	r2, [pc, #84]	@ (80028d0 <HAL_PCD_MspInit+0x134>)
 800287a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800287e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002880:	4b13      	ldr	r3, [pc, #76]	@ (80028d0 <HAL_PCD_MspInit+0x134>)
 8002882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002884:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800288c:	4b10      	ldr	r3, [pc, #64]	@ (80028d0 <HAL_PCD_MspInit+0x134>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d114      	bne.n	80028c2 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002898:	4b0d      	ldr	r3, [pc, #52]	@ (80028d0 <HAL_PCD_MspInit+0x134>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289c:	4a0c      	ldr	r2, [pc, #48]	@ (80028d0 <HAL_PCD_MspInit+0x134>)
 800289e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80028a4:	4b0a      	ldr	r3, [pc, #40]	@ (80028d0 <HAL_PCD_MspInit+0x134>)
 80028a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80028b0:	f002 fc0a 	bl	80050c8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b4:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <HAL_PCD_MspInit+0x134>)
 80028b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b8:	4a05      	ldr	r2, [pc, #20]	@ (80028d0 <HAL_PCD_MspInit+0x134>)
 80028ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028be:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80028c0:	e001      	b.n	80028c6 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80028c2:	f002 fc01 	bl	80050c8 <HAL_PWREx_EnableVddUSB>
}
 80028c6:	bf00      	nop
 80028c8:	37b0      	adds	r7, #176	@ 0xb0
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000

080028d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08e      	sub	sp, #56	@ 0x38
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80028e2:	4b34      	ldr	r3, [pc, #208]	@ (80029b4 <HAL_InitTick+0xe0>)
 80028e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e6:	4a33      	ldr	r2, [pc, #204]	@ (80029b4 <HAL_InitTick+0xe0>)
 80028e8:	f043 0310 	orr.w	r3, r3, #16
 80028ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80028ee:	4b31      	ldr	r3, [pc, #196]	@ (80029b4 <HAL_InitTick+0xe0>)
 80028f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028fa:	f107 0210 	add.w	r2, r7, #16
 80028fe:	f107 0314 	add.w	r3, r7, #20
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f003 fa4b 	bl	8005da0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800290e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d103      	bne.n	800291c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002914:	f003 fa18 	bl	8005d48 <HAL_RCC_GetPCLK1Freq>
 8002918:	6378      	str	r0, [r7, #52]	@ 0x34
 800291a:	e004      	b.n	8002926 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800291c:	f003 fa14 	bl	8005d48 <HAL_RCC_GetPCLK1Freq>
 8002920:	4603      	mov	r3, r0
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002928:	4a23      	ldr	r2, [pc, #140]	@ (80029b8 <HAL_InitTick+0xe4>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	0c9b      	lsrs	r3, r3, #18
 8002930:	3b01      	subs	r3, #1
 8002932:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002934:	4b21      	ldr	r3, [pc, #132]	@ (80029bc <HAL_InitTick+0xe8>)
 8002936:	4a22      	ldr	r2, [pc, #136]	@ (80029c0 <HAL_InitTick+0xec>)
 8002938:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800293a:	4b20      	ldr	r3, [pc, #128]	@ (80029bc <HAL_InitTick+0xe8>)
 800293c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002940:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002942:	4a1e      	ldr	r2, [pc, #120]	@ (80029bc <HAL_InitTick+0xe8>)
 8002944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002946:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002948:	4b1c      	ldr	r3, [pc, #112]	@ (80029bc <HAL_InitTick+0xe8>)
 800294a:	2200      	movs	r2, #0
 800294c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800294e:	4b1b      	ldr	r3, [pc, #108]	@ (80029bc <HAL_InitTick+0xe8>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002954:	4b19      	ldr	r3, [pc, #100]	@ (80029bc <HAL_InitTick+0xe8>)
 8002956:	2200      	movs	r2, #0
 8002958:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800295a:	4818      	ldr	r0, [pc, #96]	@ (80029bc <HAL_InitTick+0xe8>)
 800295c:	f004 fbbc 	bl	80070d8 <HAL_TIM_Base_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002966:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800296a:	2b00      	cmp	r3, #0
 800296c:	d11b      	bne.n	80029a6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800296e:	4813      	ldr	r0, [pc, #76]	@ (80029bc <HAL_InitTick+0xe8>)
 8002970:	f004 fc14 	bl	800719c <HAL_TIM_Base_Start_IT>
 8002974:	4603      	mov	r3, r0
 8002976:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800297a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800297e:	2b00      	cmp	r3, #0
 8002980:	d111      	bne.n	80029a6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002982:	2036      	movs	r0, #54	@ 0x36
 8002984:	f000 ff70 	bl	8003868 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b0f      	cmp	r3, #15
 800298c:	d808      	bhi.n	80029a0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800298e:	2200      	movs	r2, #0
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	2036      	movs	r0, #54	@ 0x36
 8002994:	f000 ff4c 	bl	8003830 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002998:	4a0a      	ldr	r2, [pc, #40]	@ (80029c4 <HAL_InitTick+0xf0>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e002      	b.n	80029a6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80029a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3738      	adds	r7, #56	@ 0x38
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000
 80029b8:	431bde83 	.word	0x431bde83
 80029bc:	20001bd8 	.word	0x20001bd8
 80029c0:	40001000 	.word	0x40001000
 80029c4:	20000050 	.word	0x20000050

080029c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029cc:	bf00      	nop
 80029ce:	e7fd      	b.n	80029cc <NMI_Handler+0x4>

080029d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029d4:	bf00      	nop
 80029d6:	e7fd      	b.n	80029d4 <HardFault_Handler+0x4>

080029d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029dc:	bf00      	nop
 80029de:	e7fd      	b.n	80029dc <MemManage_Handler+0x4>

080029e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029e4:	bf00      	nop
 80029e6:	e7fd      	b.n	80029e4 <BusFault_Handler+0x4>

080029e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <UsageFault_Handler+0x4>

080029f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002a04:	2020      	movs	r0, #32
 8002a06:	f001 fb8f 	bl	8004128 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8002a0a:	4806      	ldr	r0, [pc, #24]	@ (8002a24 <EXTI9_5_IRQHandler+0x24>)
 8002a0c:	f001 f874 	bl	8003af8 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002a10:	2080      	movs	r0, #128	@ 0x80
 8002a12:	f001 fb89 	bl	8004128 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002a16:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002a1a:	f001 fb85 	bl	8004128 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000148 	.word	0x20000148

08002a28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002a2c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002a30:	f001 fb7a 	bl	8004128 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002a34:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002a38:	f001 fb76 	bl	8004128 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8002a3c:	4806      	ldr	r0, [pc, #24]	@ (8002a58 <EXTI15_10_IRQHandler+0x30>)
 8002a3e:	f001 f85b 	bl	8003af8 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002a42:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002a46:	f001 fb6f 	bl	8004128 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002a4a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002a4e:	f001 fb6b 	bl	8004128 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000014 	.word	0x20000014

08002a5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a60:	4802      	ldr	r0, [pc, #8]	@ (8002a6c <TIM6_DAC_IRQHandler+0x10>)
 8002a62:	f004 fc0b 	bl	800727c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20001bd8 	.word	0x20001bd8

08002a70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return 1;
 8002a74:	2301      	movs	r3, #1
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <_kill>:

int _kill(int pid, int sig)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a8a:	f008 fbed 	bl	800b268 <__errno>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2216      	movs	r2, #22
 8002a92:	601a      	str	r2, [r3, #0]
  return -1;
 8002a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <_exit>:

void _exit (int status)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ffe7 	bl	8002a80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ab2:	bf00      	nop
 8002ab4:	e7fd      	b.n	8002ab2 <_exit+0x12>

08002ab6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b086      	sub	sp, #24
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	e00a      	b.n	8002ade <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ac8:	f3af 8000 	nop.w
 8002acc:	4601      	mov	r1, r0
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	60ba      	str	r2, [r7, #8]
 8002ad4:	b2ca      	uxtb	r2, r1
 8002ad6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	3301      	adds	r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	dbf0      	blt.n	8002ac8 <_read+0x12>
  }

  return len;
 8002ae6:	687b      	ldr	r3, [r7, #4]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	e009      	b.n	8002b16 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	60ba      	str	r2, [r7, #8]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff f8c4 	bl	8001c98 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	3301      	adds	r3, #1
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	dbf1      	blt.n	8002b02 <_write+0x12>
  }
  return len;
 8002b1e:	687b      	ldr	r3, [r7, #4]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_close>:

int _close(int file)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b50:	605a      	str	r2, [r3, #4]
  return 0;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <_isatty>:

int _isatty(int file)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b68:	2301      	movs	r3, #1
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b085      	sub	sp, #20
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b98:	4a14      	ldr	r2, [pc, #80]	@ (8002bec <_sbrk+0x5c>)
 8002b9a:	4b15      	ldr	r3, [pc, #84]	@ (8002bf0 <_sbrk+0x60>)
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ba4:	4b13      	ldr	r3, [pc, #76]	@ (8002bf4 <_sbrk+0x64>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d102      	bne.n	8002bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bac:	4b11      	ldr	r3, [pc, #68]	@ (8002bf4 <_sbrk+0x64>)
 8002bae:	4a12      	ldr	r2, [pc, #72]	@ (8002bf8 <_sbrk+0x68>)
 8002bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bb2:	4b10      	ldr	r3, [pc, #64]	@ (8002bf4 <_sbrk+0x64>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d207      	bcs.n	8002bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bc0:	f008 fb52 	bl	800b268 <__errno>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	220c      	movs	r2, #12
 8002bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bca:	f04f 33ff 	mov.w	r3, #4294967295
 8002bce:	e009      	b.n	8002be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bd0:	4b08      	ldr	r3, [pc, #32]	@ (8002bf4 <_sbrk+0x64>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bd6:	4b07      	ldr	r3, [pc, #28]	@ (8002bf4 <_sbrk+0x64>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	4a05      	ldr	r2, [pc, #20]	@ (8002bf4 <_sbrk+0x64>)
 8002be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002be2:	68fb      	ldr	r3, [r7, #12]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20018000 	.word	0x20018000
 8002bf0:	00000400 	.word	0x00000400
 8002bf4:	20001c24 	.word	0x20001c24
 8002bf8:	20002e58 	.word	0x20002e58

08002bfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c00:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <SystemInit+0x20>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c06:	4a05      	ldr	r2, [pc, #20]	@ (8002c1c <SystemInit+0x20>)
 8002c08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c24:	f7ff ffea 	bl	8002bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c28:	480c      	ldr	r0, [pc, #48]	@ (8002c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8002c2a:	490d      	ldr	r1, [pc, #52]	@ (8002c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c64 <LoopForever+0xe>)
  movs r3, #0
 8002c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c30:	e002      	b.n	8002c38 <LoopCopyDataInit>

08002c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c36:	3304      	adds	r3, #4

08002c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c3c:	d3f9      	bcc.n	8002c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c40:	4c0a      	ldr	r4, [pc, #40]	@ (8002c6c <LoopForever+0x16>)
  movs r3, #0
 8002c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c44:	e001      	b.n	8002c4a <LoopFillZerobss>

08002c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c48:	3204      	adds	r2, #4

08002c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c4c:	d3fb      	bcc.n	8002c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c4e:	f008 fb11 	bl	800b274 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c52:	f7ff f833 	bl	8001cbc <main>

08002c56 <LoopForever>:

LoopForever:
    b LoopForever
 8002c56:	e7fe      	b.n	8002c56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c60:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8002c64:	0800c134 	.word	0x0800c134
  ldr r2, =_sbss
 8002c68:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8002c6c:	20002e54 	.word	0x20002e54

08002c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c70:	e7fe      	b.n	8002c70 <ADC1_2_IRQHandler>
	...

08002c74 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	4a04      	ldr	r2, [pc, #16]	@ (8002c94 <BSP_LED_Init+0x20>)
 8002c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c86:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	0800c030 	.word	0x0800c030

08002c98 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	4a06      	ldr	r2, [pc, #24]	@ (8002cc0 <BSP_LED_Toggle+0x28>)
 8002ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002caa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002cae:	4611      	mov	r1, r2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f001 fa1f 	bl	80040f4 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	2000000c 	.word	0x2000000c

08002cc4 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cca:	4b1c      	ldr	r3, [pc, #112]	@ (8002d3c <LED_USER_GPIO_Init+0x78>)
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cce:	4a1b      	ldr	r2, [pc, #108]	@ (8002d3c <LED_USER_GPIO_Init+0x78>)
 8002cd0:	f043 0302 	orr.w	r3, r3, #2
 8002cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cd6:	4b19      	ldr	r3, [pc, #100]	@ (8002d3c <LED_USER_GPIO_Init+0x78>)
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce2:	f107 030c 	add.w	r3, r7, #12
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	609a      	str	r2, [r3, #8]
 8002cee:	60da      	str	r2, [r3, #12]
 8002cf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf2:	4b12      	ldr	r3, [pc, #72]	@ (8002d3c <LED_USER_GPIO_Init+0x78>)
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf6:	4a11      	ldr	r2, [pc, #68]	@ (8002d3c <LED_USER_GPIO_Init+0x78>)
 8002cf8:	f043 0302 	orr.w	r3, r3, #2
 8002cfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8002d3c <LED_USER_GPIO_Init+0x78>)
 8002d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	607b      	str	r3, [r7, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d10:	480b      	ldr	r0, [pc, #44]	@ (8002d40 <LED_USER_GPIO_Init+0x7c>)
 8002d12:	f001 f9d7 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8002d16:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8002d28:	f107 030c 	add.w	r3, r7, #12
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4804      	ldr	r0, [pc, #16]	@ (8002d40 <LED_USER_GPIO_Init+0x7c>)
 8002d30:	f000 ff12 	bl	8003b58 <HAL_GPIO_Init>

}
 8002d34:	bf00      	nop
 8002d36:	3720      	adds	r7, #32
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	48000400 	.word	0x48000400

08002d44 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	460a      	mov	r2, r1
 8002d4e:	71fb      	strb	r3, [r7, #7]
 8002d50:	4613      	mov	r3, r2
 8002d52:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8002dd8 <BSP_PB_Init+0x94>)
 8002d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d60:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8002d62:	79bb      	ldrb	r3, [r7, #6]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d132      	bne.n	8002dce <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002ddc <BSP_PB_Init+0x98>)
 8002d6e:	441a      	add	r2, r3
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	491b      	ldr	r1, [pc, #108]	@ (8002de0 <BSP_PB_Init+0x9c>)
 8002d74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	f000 fea8 	bl	8003ad0 <HAL_EXTI_GetHandle>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002d86:	f06f 0303 	mvn.w	r3, #3
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	e01f      	b.n	8002dce <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4a12      	ldr	r2, [pc, #72]	@ (8002ddc <BSP_PB_Init+0x98>)
 8002d94:	1898      	adds	r0, r3, r2
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	4a12      	ldr	r2, [pc, #72]	@ (8002de4 <BSP_PB_Init+0xa0>)
 8002d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2100      	movs	r1, #0
 8002da2:	f000 fe7b 	bl	8003a9c <HAL_EXTI_RegisterCallback>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002dac:	f06f 0303 	mvn.w	r3, #3
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	e00c      	b.n	8002dce <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002db4:	2028      	movs	r0, #40	@ 0x28
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	4a0b      	ldr	r2, [pc, #44]	@ (8002de8 <BSP_PB_Init+0xa4>)
 8002dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f000 fd35 	bl	8003830 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002dc6:	2328      	movs	r3, #40	@ 0x28
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 fd4d 	bl	8003868 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8002dce:	68fb      	ldr	r3, [r7, #12]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	0800c034 	.word	0x0800c034
 8002ddc:	20000014 	.word	0x20000014
 8002de0:	0800c038 	.word	0x0800c038
 8002de4:	0800c03c 	.word	0x0800c03c
 8002de8:	0800c040 	.word	0x0800c040

08002dec <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	4a09      	ldr	r2, [pc, #36]	@ (8002e20 <BSP_PB_GetState+0x34>)
 8002dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f001 f945 	bl	8004094 <HAL_GPIO_ReadPin>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000010 	.word	0x20000010

08002e24 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f7fe f871 	bl	8000f10 <BSP_PB_Callback>
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e3a:	4b19      	ldr	r3, [pc, #100]	@ (8002ea0 <BUTTON_USER_GPIO_Init+0x6c>)
 8002e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3e:	4a18      	ldr	r2, [pc, #96]	@ (8002ea0 <BUTTON_USER_GPIO_Init+0x6c>)
 8002e40:	f043 0304 	orr.w	r3, r3, #4
 8002e44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e46:	4b16      	ldr	r3, [pc, #88]	@ (8002ea0 <BUTTON_USER_GPIO_Init+0x6c>)
 8002e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e52:	f107 030c 	add.w	r3, r7, #12
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	609a      	str	r2, [r3, #8]
 8002e5e:	60da      	str	r2, [r3, #12]
 8002e60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e62:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea0 <BUTTON_USER_GPIO_Init+0x6c>)
 8002e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e66:	4a0e      	ldr	r2, [pc, #56]	@ (8002ea0 <BUTTON_USER_GPIO_Init+0x6c>)
 8002e68:	f043 0304 	orr.w	r3, r3, #4
 8002e6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea0 <BUTTON_USER_GPIO_Init+0x6c>)
 8002e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	607b      	str	r3, [r7, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8002e7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e80:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002e84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8002e8a:	f107 030c 	add.w	r3, r7, #12
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4804      	ldr	r0, [pc, #16]	@ (8002ea4 <BUTTON_USER_GPIO_Init+0x70>)
 8002e92:	f000 fe61 	bl	8003b58 <HAL_GPIO_Init>

}
 8002e96:	bf00      	nop
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	48000800 	.word	0x48000800

08002ea8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002eac:	4802      	ldr	r0, [pc, #8]	@ (8002eb8 <SENSOR_IO_Init+0x10>)
 8002eae:	f000 f85b 	bl	8002f68 <I2Cx_Init>
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20001c28 	.word	0x20001c28

08002ebc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	71bb      	strb	r3, [r7, #6]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002ece:	79bb      	ldrb	r3, [r7, #6]
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	79f9      	ldrb	r1, [r7, #7]
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	1d7b      	adds	r3, r7, #5
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	2301      	movs	r3, #1
 8002ede:	4803      	ldr	r0, [pc, #12]	@ (8002eec <SENSOR_IO_Write+0x30>)
 8002ee0:	f000 f8f5 	bl	80030ce <I2Cx_WriteMultiple>
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20001c28 	.word	0x20001c28

08002ef0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	460a      	mov	r2, r1
 8002efa:	71fb      	strb	r3, [r7, #7]
 8002efc:	4613      	mov	r3, r2
 8002efe:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002f04:	79bb      	ldrb	r3, [r7, #6]
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	79f9      	ldrb	r1, [r7, #7]
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	9301      	str	r3, [sp, #4]
 8002f0e:	f107 030f 	add.w	r3, r7, #15
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	2301      	movs	r3, #1
 8002f16:	4804      	ldr	r0, [pc, #16]	@ (8002f28 <SENSOR_IO_Read+0x38>)
 8002f18:	f000 f8ac 	bl	8003074 <I2Cx_ReadMultiple>

  return read_value;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20001c28 	.word	0x20001c28

08002f2c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	603a      	str	r2, [r7, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	4603      	mov	r3, r0
 8002f38:	71fb      	strb	r3, [r7, #7]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	71bb      	strb	r3, [r7, #6]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002f42:	79bb      	ldrb	r3, [r7, #6]
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	79f9      	ldrb	r1, [r7, #7]
 8002f48:	88bb      	ldrh	r3, [r7, #4]
 8002f4a:	9301      	str	r3, [sp, #4]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	2301      	movs	r3, #1
 8002f52:	4804      	ldr	r0, [pc, #16]	@ (8002f64 <SENSOR_IO_ReadMultiple+0x38>)
 8002f54:	f000 f88e 	bl	8003074 <I2Cx_ReadMultiple>
 8002f58:	4603      	mov	r3, r0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20001c28 	.word	0x20001c28

08002f68 <I2Cx_Init>:
 * @brief  Initializes I2C HAL.
 * @param  i2c_handler  I2C handler
 * @retval None
 */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance = DISCOVERY_I2Cx;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a12      	ldr	r2, [pc, #72]	@ (8002fbc <I2Cx_Init+0x54>)
 8002f74:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing = DISCOVERY_I2Cx_TIMING;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a11      	ldr	r2, [pc, #68]	@ (8002fc0 <I2Cx_Init+0x58>)
 8002f7a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1 = 0;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2 = 0;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f80f 	bl	8002fc4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f001 f8e1 	bl	800416e <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 8002fac:	2100      	movs	r1, #0
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f001 fe98 	bl	8004ce4 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40005800 	.word	0x40005800
 8002fc0:	00702681 	.word	0x00702681

08002fc4 <I2Cx_MspInit>:



static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	@ 0x28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002fcc:	4b27      	ldr	r3, [pc, #156]	@ (800306c <I2Cx_MspInit+0xa8>)
 8002fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd0:	4a26      	ldr	r2, [pc, #152]	@ (800306c <I2Cx_MspInit+0xa8>)
 8002fd2:	f043 0302 	orr.w	r3, r3, #2
 8002fd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fd8:	4b24      	ldr	r3, [pc, #144]	@ (800306c <I2Cx_MspInit+0xa8>)
 8002fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002fe4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002fe8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002fea:	2312      	movs	r3, #18
 8002fec:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ffa:	f107 0314 	add.w	r3, r7, #20
 8002ffe:	4619      	mov	r1, r3
 8003000:	481b      	ldr	r0, [pc, #108]	@ (8003070 <I2Cx_MspInit+0xac>)
 8003002:	f000 fda9 	bl	8003b58 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003006:	f107 0314 	add.w	r3, r7, #20
 800300a:	4619      	mov	r1, r3
 800300c:	4818      	ldr	r0, [pc, #96]	@ (8003070 <I2Cx_MspInit+0xac>)
 800300e:	f000 fda3 	bl	8003b58 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8003012:	4b16      	ldr	r3, [pc, #88]	@ (800306c <I2Cx_MspInit+0xa8>)
 8003014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003016:	4a15      	ldr	r2, [pc, #84]	@ (800306c <I2Cx_MspInit+0xa8>)
 8003018:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800301c:	6593      	str	r3, [r2, #88]	@ 0x58
 800301e:	4b13      	ldr	r3, [pc, #76]	@ (800306c <I2Cx_MspInit+0xa8>)
 8003020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800302a:	4b10      	ldr	r3, [pc, #64]	@ (800306c <I2Cx_MspInit+0xa8>)
 800302c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302e:	4a0f      	ldr	r2, [pc, #60]	@ (800306c <I2Cx_MspInit+0xa8>)
 8003030:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003034:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003036:	4b0d      	ldr	r3, [pc, #52]	@ (800306c <I2Cx_MspInit+0xa8>)
 8003038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303a:	4a0c      	ldr	r2, [pc, #48]	@ (800306c <I2Cx_MspInit+0xa8>)
 800303c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003040:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003042:	2200      	movs	r2, #0
 8003044:	210f      	movs	r1, #15
 8003046:	2021      	movs	r0, #33	@ 0x21
 8003048:	f000 fbf2 	bl	8003830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800304c:	2021      	movs	r0, #33	@ 0x21
 800304e:	f000 fc0b 	bl	8003868 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003052:	2200      	movs	r2, #0
 8003054:	210f      	movs	r1, #15
 8003056:	2022      	movs	r0, #34	@ 0x22
 8003058:	f000 fbea 	bl	8003830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800305c:	2022      	movs	r0, #34	@ 0x22
 800305e:	f000 fc03 	bl	8003868 <HAL_NVIC_EnableIRQ>
}
 8003062:	bf00      	nop
 8003064:	3728      	adds	r7, #40	@ 0x28
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	48000400 	.word	0x48000400

08003074 <I2Cx_ReadMultiple>:
 * @param  Buffer  Pointer to data buffer
 * @param  Length  Length of the data
 * @retval HAL status
 */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	@ 0x28
 8003078:	af04      	add	r7, sp, #16
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	4608      	mov	r0, r1
 800307e:	4611      	mov	r1, r2
 8003080:	461a      	mov	r2, r3
 8003082:	4603      	mov	r3, r0
 8003084:	72fb      	strb	r3, [r7, #11]
 8003086:	460b      	mov	r3, r1
 8003088:	813b      	strh	r3, [r7, #8]
 800308a:	4613      	mov	r3, r2
 800308c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003092:	7afb      	ldrb	r3, [r7, #11]
 8003094:	b299      	uxth	r1, r3
 8003096:	88f8      	ldrh	r0, [r7, #6]
 8003098:	893a      	ldrh	r2, [r7, #8]
 800309a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800309e:	9302      	str	r3, [sp, #8]
 80030a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80030a2:	9301      	str	r3, [sp, #4]
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	4603      	mov	r3, r0
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f001 fa3e 	bl	800452c <HAL_I2C_Mem_Read>
 80030b0:	4603      	mov	r3, r0
 80030b2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d004      	beq.n	80030c4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80030ba:	7afb      	ldrb	r3, [r7, #11]
 80030bc:	4619      	mov	r1, r3
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f832 	bl	8003128 <I2Cx_Error>
  }
  return status;
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <I2Cx_WriteMultiple>:
 * @param  Buffer  The target register value to be written
 * @param  Length  buffer size to be written
 * @retval HAL status
 */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b08a      	sub	sp, #40	@ 0x28
 80030d2:	af04      	add	r7, sp, #16
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	4608      	mov	r0, r1
 80030d8:	4611      	mov	r1, r2
 80030da:	461a      	mov	r2, r3
 80030dc:	4603      	mov	r3, r0
 80030de:	72fb      	strb	r3, [r7, #11]
 80030e0:	460b      	mov	r3, r1
 80030e2:	813b      	strh	r3, [r7, #8]
 80030e4:	4613      	mov	r3, r2
 80030e6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80030ec:	7afb      	ldrb	r3, [r7, #11]
 80030ee:	b299      	uxth	r1, r3
 80030f0:	88f8      	ldrh	r0, [r7, #6]
 80030f2:	893a      	ldrh	r2, [r7, #8]
 80030f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030f8:	9302      	str	r3, [sp, #8]
 80030fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80030fc:	9301      	str	r3, [sp, #4]
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	4603      	mov	r3, r0
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f001 f8fd 	bl	8004304 <HAL_I2C_Mem_Write>
 800310a:	4603      	mov	r3, r0
 800310c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 800310e:	7dfb      	ldrb	r3, [r7, #23]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d004      	beq.n	800311e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003114:	7afb      	ldrb	r3, [r7, #11]
 8003116:	4619      	mov	r1, r3
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f805 	bl	8003128 <I2Cx_Error>
  }
  return status;
 800311e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <I2Cx_Error>:
 * @param  i2c_handler  I2C handler
 * @param  Addr  I2C Address
 * @retval None
 */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f001 f8b5 	bl	80042a4 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff ff14 	bl	8002f68 <I2Cx_Init>
}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800314e:	2300      	movs	r3, #0
 8003150:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8003152:	4b12      	ldr	r3, [pc, #72]	@ (800319c <BSP_SPI3_Init+0x54>)
 8003154:	4a12      	ldr	r2, [pc, #72]	@ (80031a0 <BSP_SPI3_Init+0x58>)
 8003156:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 8003158:	4b12      	ldr	r3, [pc, #72]	@ (80031a4 <BSP_SPI3_Init+0x5c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	4911      	ldr	r1, [pc, #68]	@ (80031a4 <BSP_SPI3_Init+0x5c>)
 8003160:	600a      	str	r2, [r1, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d114      	bne.n	8003190 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 8003166:	480d      	ldr	r0, [pc, #52]	@ (800319c <BSP_SPI3_Init+0x54>)
 8003168:	f003 fe44 	bl	8006df4 <HAL_SPI_GetState>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10e      	bne.n	8003190 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 8003172:	480a      	ldr	r0, [pc, #40]	@ (800319c <BSP_SPI3_Init+0x54>)
 8003174:	f000 f882 	bl	800327c <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d108      	bne.n	8003190 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 800317e:	4807      	ldr	r0, [pc, #28]	@ (800319c <BSP_SPI3_Init+0x54>)
 8003180:	f000 f83a 	bl	80031f8 <MX_SPI3_Init>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800318a:	f06f 0307 	mvn.w	r3, #7
 800318e:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8003190:	687b      	ldr	r3, [r7, #4]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20001c7c 	.word	0x20001c7c
 80031a0:	40003c00 	.word	0x40003c00
 80031a4:	20001ce0 	.word	0x20001ce0

080031a8 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	4613      	mov	r3, r2
 80031b4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80031c0:	9200      	str	r2, [sp, #0]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	68f9      	ldr	r1, [r7, #12]
 80031c6:	4807      	ldr	r0, [pc, #28]	@ (80031e4 <BSP_SPI3_SendRecv+0x3c>)
 80031c8:	f003 fbf5 	bl	80069b6 <HAL_SPI_TransmitReceive>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80031d2:	f06f 0305 	mvn.w	r3, #5
 80031d6:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80031d8:	697b      	ldr	r3, [r7, #20]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20001c7c 	.word	0x20001c7c

080031e8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80031ec:	f000 fa38 	bl	8003660 <HAL_GetTick>
 80031f0:	4603      	mov	r3, r0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a1c      	ldr	r2, [pc, #112]	@ (8003278 <MX_SPI3_Init+0x80>)
 8003208:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003210:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800321e:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003232:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2207      	movs	r2, #7
 8003250:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2208      	movs	r2, #8
 800325c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f003 fafc 	bl	800685c <HAL_SPI_Init>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40003c00 	.word	0x40003c00

0800327c <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	@ 0x28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003284:	4b27      	ldr	r3, [pc, #156]	@ (8003324 <SPI3_MspInit+0xa8>)
 8003286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003288:	4a26      	ldr	r2, [pc, #152]	@ (8003324 <SPI3_MspInit+0xa8>)
 800328a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800328e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003290:	4b24      	ldr	r3, [pc, #144]	@ (8003324 <SPI3_MspInit+0xa8>)
 8003292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003294:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800329c:	4b21      	ldr	r3, [pc, #132]	@ (8003324 <SPI3_MspInit+0xa8>)
 800329e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a0:	4a20      	ldr	r2, [pc, #128]	@ (8003324 <SPI3_MspInit+0xa8>)
 80032a2:	f043 0304 	orr.w	r3, r3, #4
 80032a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003324 <SPI3_MspInit+0xa8>)
 80032aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 80032b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ba:	2302      	movs	r3, #2
 80032bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c2:	2303      	movs	r3, #3
 80032c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 80032c6:	2306      	movs	r3, #6
 80032c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 80032ca:	f107 0314 	add.w	r3, r7, #20
 80032ce:	4619      	mov	r1, r3
 80032d0:	4815      	ldr	r0, [pc, #84]	@ (8003328 <SPI3_MspInit+0xac>)
 80032d2:	f000 fc41 	bl	8003b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 80032d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80032da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032dc:	2302      	movs	r3, #2
 80032de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e4:	2303      	movs	r3, #3
 80032e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 80032e8:	2306      	movs	r3, #6
 80032ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 80032ec:	f107 0314 	add.w	r3, r7, #20
 80032f0:	4619      	mov	r1, r3
 80032f2:	480d      	ldr	r0, [pc, #52]	@ (8003328 <SPI3_MspInit+0xac>)
 80032f4:	f000 fc30 	bl	8003b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 80032f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fe:	2302      	movs	r3, #2
 8003300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003306:	2303      	movs	r3, #3
 8003308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 800330a:	2306      	movs	r3, #6
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800330e:	f107 0314 	add.w	r3, r7, #20
 8003312:	4619      	mov	r1, r3
 8003314:	4804      	ldr	r0, [pc, #16]	@ (8003328 <SPI3_MspInit+0xac>)
 8003316:	f000 fc1f 	bl	8003b58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 800331a:	bf00      	nop
 800331c:	3728      	adds	r7, #40	@ 0x28
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40021000 	.word	0x40021000
 8003328:	48000800 	.word	0x48000800

0800332c <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003336:	2300      	movs	r3, #0
 8003338:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800333a:	2110      	movs	r1, #16
 800333c:	20d4      	movs	r0, #212	@ 0xd4
 800333e:	f7ff fdd7 	bl	8002ef0 <SENSOR_IO_Read>
 8003342:	4603      	mov	r3, r0
 8003344:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003346:	88fb      	ldrh	r3, [r7, #6]
 8003348:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800334a:	7bbb      	ldrb	r3, [r7, #14]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003352:	7bba      	ldrb	r2, [r7, #14]
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	4313      	orrs	r3, r2
 8003358:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800335a:	7bbb      	ldrb	r3, [r7, #14]
 800335c:	461a      	mov	r2, r3
 800335e:	2110      	movs	r1, #16
 8003360:	20d4      	movs	r0, #212	@ 0xd4
 8003362:	f7ff fdab 	bl	8002ebc <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003366:	2112      	movs	r1, #18
 8003368:	20d4      	movs	r0, #212	@ 0xd4
 800336a:	f7ff fdc1 	bl	8002ef0 <SENSOR_IO_Read>
 800336e:	4603      	mov	r3, r0
 8003370:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	b29b      	uxth	r3, r3
 8003378:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800337a:	7bbb      	ldrb	r3, [r7, #14]
 800337c:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8003380:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003382:	7bba      	ldrb	r2, [r7, #14]
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	4313      	orrs	r3, r2
 8003388:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800338a:	7bbb      	ldrb	r3, [r7, #14]
 800338c:	461a      	mov	r2, r3
 800338e:	2112      	movs	r1, #18
 8003390:	20d4      	movs	r0, #212	@ 0xd4
 8003392:	f7ff fd93 	bl	8002ebc <SENSOR_IO_Write>
}
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80033a4:	2300      	movs	r3, #0
 80033a6:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80033a8:	2110      	movs	r1, #16
 80033aa:	20d4      	movs	r0, #212	@ 0xd4
 80033ac:	f7ff fda0 	bl	8002ef0 <SENSOR_IO_Read>
 80033b0:	4603      	mov	r3, r0
 80033b2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	461a      	mov	r2, r3
 80033c0:	2110      	movs	r1, #16
 80033c2:	20d4      	movs	r0, #212	@ 0xd4
 80033c4:	f7ff fd7a 	bl	8002ebc <SENSOR_IO_Write>
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80033d4:	f7ff fd68 	bl	8002ea8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80033d8:	210f      	movs	r1, #15
 80033da:	20d4      	movs	r0, #212	@ 0xd4
 80033dc:	f7ff fd88 	bl	8002ef0 <SENSOR_IO_Read>
 80033e0:	4603      	mov	r3, r0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b084      	sub	sp, #16
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	4603      	mov	r3, r0
 80033ee:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80033f0:	2300      	movs	r3, #0
 80033f2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80033f4:	2115      	movs	r1, #21
 80033f6:	20d4      	movs	r0, #212	@ 0xd4
 80033f8:	f7ff fd7a 	bl	8002ef0 <SENSOR_IO_Read>
 80033fc:	4603      	mov	r3, r0
 80033fe:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	f023 0310 	bic.w	r3, r3, #16
 8003406:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003408:	88fb      	ldrh	r3, [r7, #6]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	f043 0310 	orr.w	r3, r3, #16
 8003414:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8003416:	7bfb      	ldrb	r3, [r7, #15]
 8003418:	461a      	mov	r2, r3
 800341a:	2115      	movs	r1, #21
 800341c:	20d4      	movs	r0, #212	@ 0xd4
 800341e:	f7ff fd4d 	bl	8002ebc <SENSOR_IO_Write>
}
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003434:	2300      	movs	r3, #0
 8003436:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003442:	2110      	movs	r1, #16
 8003444:	20d4      	movs	r0, #212	@ 0xd4
 8003446:	f7ff fd53 	bl	8002ef0 <SENSOR_IO_Read>
 800344a:	4603      	mov	r3, r0
 800344c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800344e:	f107 0208 	add.w	r2, r7, #8
 8003452:	2306      	movs	r3, #6
 8003454:	2128      	movs	r1, #40	@ 0x28
 8003456:	20d4      	movs	r0, #212	@ 0xd4
 8003458:	f7ff fd68 	bl	8002f2c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800345c:	2300      	movs	r3, #0
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	e01a      	b.n	8003498 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003462:	7ffb      	ldrb	r3, [r7, #31]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	3301      	adds	r3, #1
 8003468:	3320      	adds	r3, #32
 800346a:	443b      	add	r3, r7
 800346c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	b29b      	uxth	r3, r3
 8003474:	7ffa      	ldrb	r2, [r7, #31]
 8003476:	0052      	lsls	r2, r2, #1
 8003478:	3220      	adds	r2, #32
 800347a:	443a      	add	r2, r7
 800347c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8003480:	4413      	add	r3, r2
 8003482:	b29a      	uxth	r2, r3
 8003484:	7ffb      	ldrb	r3, [r7, #31]
 8003486:	b212      	sxth	r2, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	3320      	adds	r3, #32
 800348c:	443b      	add	r3, r7
 800348e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003492:	7ffb      	ldrb	r3, [r7, #31]
 8003494:	3301      	adds	r3, #1
 8003496:	77fb      	strb	r3, [r7, #31]
 8003498:	7ffb      	ldrb	r3, [r7, #31]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d9e1      	bls.n	8003462 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800349e:	7dfb      	ldrb	r3, [r7, #23]
 80034a0:	f003 030c 	and.w	r3, r3, #12
 80034a4:	2b0c      	cmp	r3, #12
 80034a6:	d829      	bhi.n	80034fc <LSM6DSL_AccReadXYZ+0xd0>
 80034a8:	a201      	add	r2, pc, #4	@ (adr r2, 80034b0 <LSM6DSL_AccReadXYZ+0x84>)
 80034aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ae:	bf00      	nop
 80034b0:	080034e5 	.word	0x080034e5
 80034b4:	080034fd 	.word	0x080034fd
 80034b8:	080034fd 	.word	0x080034fd
 80034bc:	080034fd 	.word	0x080034fd
 80034c0:	080034f7 	.word	0x080034f7
 80034c4:	080034fd 	.word	0x080034fd
 80034c8:	080034fd 	.word	0x080034fd
 80034cc:	080034fd 	.word	0x080034fd
 80034d0:	080034eb 	.word	0x080034eb
 80034d4:	080034fd 	.word	0x080034fd
 80034d8:	080034fd 	.word	0x080034fd
 80034dc:	080034fd 	.word	0x080034fd
 80034e0:	080034f1 	.word	0x080034f1
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80034e4:	4b18      	ldr	r3, [pc, #96]	@ (8003548 <LSM6DSL_AccReadXYZ+0x11c>)
 80034e6:	61bb      	str	r3, [r7, #24]
    break;
 80034e8:	e008      	b.n	80034fc <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80034ea:	4b18      	ldr	r3, [pc, #96]	@ (800354c <LSM6DSL_AccReadXYZ+0x120>)
 80034ec:	61bb      	str	r3, [r7, #24]
    break;
 80034ee:	e005      	b.n	80034fc <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80034f0:	4b17      	ldr	r3, [pc, #92]	@ (8003550 <LSM6DSL_AccReadXYZ+0x124>)
 80034f2:	61bb      	str	r3, [r7, #24]
    break;
 80034f4:	e002      	b.n	80034fc <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80034f6:	4b17      	ldr	r3, [pc, #92]	@ (8003554 <LSM6DSL_AccReadXYZ+0x128>)
 80034f8:	61bb      	str	r3, [r7, #24]
    break;    
 80034fa:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80034fc:	2300      	movs	r3, #0
 80034fe:	77fb      	strb	r3, [r7, #31]
 8003500:	e01a      	b.n	8003538 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003502:	7ffb      	ldrb	r3, [r7, #31]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	3320      	adds	r3, #32
 8003508:	443b      	add	r3, r7
 800350a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800350e:	ee07 3a90 	vmov	s15, r3
 8003512:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003516:	edd7 7a06 	vldr	s15, [r7, #24]
 800351a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351e:	7ffb      	ldrb	r3, [r7, #31]
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800352a:	ee17 2a90 	vmov	r2, s15
 800352e:	b212      	sxth	r2, r2
 8003530:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003532:	7ffb      	ldrb	r3, [r7, #31]
 8003534:	3301      	adds	r3, #1
 8003536:	77fb      	strb	r3, [r7, #31]
 8003538:	7ffb      	ldrb	r3, [r7, #31]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d9e1      	bls.n	8003502 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 800353e:	bf00      	nop
 8003540:	bf00      	nop
 8003542:	3720      	adds	r7, #32
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	3d79db23 	.word	0x3d79db23
 800354c:	3df9db23 	.word	0x3df9db23
 8003550:	3e79db23 	.word	0x3e79db23
 8003554:	3ef9db23 	.word	0x3ef9db23

08003558 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003562:	2300      	movs	r3, #0
 8003564:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8003566:	4b1a      	ldr	r3, [pc, #104]	@ (80035d0 <BSP_ACCELERO_Init+0x78>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4798      	blx	r3
 800356c:	4603      	mov	r3, r0
 800356e:	2b6a      	cmp	r3, #106	@ 0x6a
 8003570:	d002      	beq.n	8003578 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	73fb      	strb	r3, [r7, #15]
 8003576:	e025      	b.n	80035c4 <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8003578:	4b16      	ldr	r3, [pc, #88]	@ (80035d4 <BSP_ACCELERO_Init+0x7c>)
 800357a:	4a15      	ldr	r2, [pc, #84]	@ (80035d0 <BSP_ACCELERO_Init+0x78>)
 800357c:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800357e:	2330      	movs	r3, #48	@ 0x30
 8003580:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8003586:	2300      	movs	r3, #0
 8003588:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800358a:	2340      	movs	r3, #64	@ 0x40
 800358c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8003592:	2300      	movs	r3, #0
 8003594:	72fb      	strb	r3, [r7, #11]

    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8003596:	797a      	ldrb	r2, [r7, #5]
 8003598:	7abb      	ldrb	r3, [r7, #10]
 800359a:	4313      	orrs	r3, r2
 800359c:	b2db      	uxtb	r3, r3
 800359e:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80035a0:	7a3b      	ldrb	r3, [r7, #8]
 80035a2:	f043 0304 	orr.w	r3, r3, #4
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	b21b      	sxth	r3, r3
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	b21a      	sxth	r2, r3
 80035ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	b21b      	sxth	r3, r3
 80035b6:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80035b8:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <BSP_ACCELERO_Init+0x7c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	89ba      	ldrh	r2, [r7, #12]
 80035c0:	4610      	mov	r0, r2
 80035c2:	4798      	blx	r3
  }

  return ret;
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	2000001c 	.word	0x2000001c
 80035d4:	20001ce4 	.word	0x20001ce4

080035d8 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80035e0:	4b08      	ldr	r3, [pc, #32]	@ (8003604 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d009      	beq.n	80035fc <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80035e8:	4b06      	ldr	r3, [pc, #24]	@ (8003604 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d004      	beq.n	80035fc <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80035f2:	4b04      	ldr	r3, [pc, #16]	@ (8003604 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	4798      	blx	r3
    }
  }
}
 80035fc:	bf00      	nop
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	20001ce4 	.word	0x20001ce4

08003608 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003612:	2003      	movs	r0, #3
 8003614:	f000 f901 	bl	800381a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003618:	200f      	movs	r0, #15
 800361a:	f7ff f95b 	bl	80028d4 <HAL_InitTick>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	71fb      	strb	r3, [r7, #7]
 8003628:	e001      	b.n	800362e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800362a:	f7fe fec1 	bl	80023b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800362e:	79fb      	ldrb	r3, [r7, #7]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800363c:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <HAL_IncTick+0x20>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	4b06      	ldr	r3, [pc, #24]	@ (800365c <HAL_IncTick+0x24>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4413      	add	r3, r2
 8003648:	4a04      	ldr	r2, [pc, #16]	@ (800365c <HAL_IncTick+0x24>)
 800364a:	6013      	str	r3, [r2, #0]
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20000054 	.word	0x20000054
 800365c:	20001ce8 	.word	0x20001ce8

08003660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return uwTick;
 8003664:	4b03      	ldr	r3, [pc, #12]	@ (8003674 <HAL_GetTick+0x14>)
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20001ce8 	.word	0x20001ce8

08003678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003680:	f7ff ffee 	bl	8003660 <HAL_GetTick>
 8003684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003690:	d005      	beq.n	800369e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003692:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <HAL_Delay+0x44>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800369e:	bf00      	nop
 80036a0:	f7ff ffde 	bl	8003660 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d8f7      	bhi.n	80036a0 <HAL_Delay+0x28>
  {
  }
}
 80036b0:	bf00      	nop
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20000054 	.word	0x20000054

080036c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003704 <__NVIC_SetPriorityGrouping+0x44>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036dc:	4013      	ands	r3, r2
 80036de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036f2:	4a04      	ldr	r2, [pc, #16]	@ (8003704 <__NVIC_SetPriorityGrouping+0x44>)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	60d3      	str	r3, [r2, #12]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	e000ed00 	.word	0xe000ed00

08003708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800370c:	4b04      	ldr	r3, [pc, #16]	@ (8003720 <__NVIC_GetPriorityGrouping+0x18>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	0a1b      	lsrs	r3, r3, #8
 8003712:	f003 0307 	and.w	r3, r3, #7
}
 8003716:	4618      	mov	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800372e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003732:	2b00      	cmp	r3, #0
 8003734:	db0b      	blt.n	800374e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	f003 021f 	and.w	r2, r3, #31
 800373c:	4907      	ldr	r1, [pc, #28]	@ (800375c <__NVIC_EnableIRQ+0x38>)
 800373e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	2001      	movs	r0, #1
 8003746:	fa00 f202 	lsl.w	r2, r0, r2
 800374a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	e000e100 	.word	0xe000e100

08003760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	6039      	str	r1, [r7, #0]
 800376a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800376c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003770:	2b00      	cmp	r3, #0
 8003772:	db0a      	blt.n	800378a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	b2da      	uxtb	r2, r3
 8003778:	490c      	ldr	r1, [pc, #48]	@ (80037ac <__NVIC_SetPriority+0x4c>)
 800377a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377e:	0112      	lsls	r2, r2, #4
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	440b      	add	r3, r1
 8003784:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003788:	e00a      	b.n	80037a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	b2da      	uxtb	r2, r3
 800378e:	4908      	ldr	r1, [pc, #32]	@ (80037b0 <__NVIC_SetPriority+0x50>)
 8003790:	79fb      	ldrb	r3, [r7, #7]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	3b04      	subs	r3, #4
 8003798:	0112      	lsls	r2, r2, #4
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	440b      	add	r3, r1
 800379e:	761a      	strb	r2, [r3, #24]
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	e000e100 	.word	0xe000e100
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b089      	sub	sp, #36	@ 0x24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f1c3 0307 	rsb	r3, r3, #7
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	bf28      	it	cs
 80037d2:	2304      	movcs	r3, #4
 80037d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	3304      	adds	r3, #4
 80037da:	2b06      	cmp	r3, #6
 80037dc:	d902      	bls.n	80037e4 <NVIC_EncodePriority+0x30>
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3b03      	subs	r3, #3
 80037e2:	e000      	b.n	80037e6 <NVIC_EncodePriority+0x32>
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e8:	f04f 32ff 	mov.w	r2, #4294967295
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43da      	mvns	r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	401a      	ands	r2, r3
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	fa01 f303 	lsl.w	r3, r1, r3
 8003806:	43d9      	mvns	r1, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800380c:	4313      	orrs	r3, r2
         );
}
 800380e:	4618      	mov	r0, r3
 8003810:	3724      	adds	r7, #36	@ 0x24
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff ff4c 	bl	80036c0 <__NVIC_SetPriorityGrouping>
}
 8003828:	bf00      	nop
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003842:	f7ff ff61 	bl	8003708 <__NVIC_GetPriorityGrouping>
 8003846:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	6978      	ldr	r0, [r7, #20]
 800384e:	f7ff ffb1 	bl	80037b4 <NVIC_EncodePriority>
 8003852:	4602      	mov	r2, r0
 8003854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003858:	4611      	mov	r1, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff ff80 	bl	8003760 <__NVIC_SetPriority>
}
 8003860:	bf00      	nop
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff ff54 	bl	8003724 <__NVIC_EnableIRQ>
}
 800387c:	bf00      	nop
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e0ac      	b.n	80039f0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f000 f8b2 	bl	8003a04 <DFSDM_GetChannelFromInstance>
 80038a0:	4603      	mov	r3, r0
 80038a2:	4a55      	ldr	r2, [pc, #340]	@ (80039f8 <HAL_DFSDM_ChannelInit+0x174>)
 80038a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e09f      	b.n	80039f0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fe fda5 	bl	8002400 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80038b6:	4b51      	ldr	r3, [pc, #324]	@ (80039fc <HAL_DFSDM_ChannelInit+0x178>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3301      	adds	r3, #1
 80038bc:	4a4f      	ldr	r2, [pc, #316]	@ (80039fc <HAL_DFSDM_ChannelInit+0x178>)
 80038be:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80038c0:	4b4e      	ldr	r3, [pc, #312]	@ (80039fc <HAL_DFSDM_ChannelInit+0x178>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d125      	bne.n	8003914 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80038c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003a00 <HAL_DFSDM_ChannelInit+0x17c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a4c      	ldr	r2, [pc, #304]	@ (8003a00 <HAL_DFSDM_ChannelInit+0x17c>)
 80038ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80038d2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80038d4:	4b4a      	ldr	r3, [pc, #296]	@ (8003a00 <HAL_DFSDM_ChannelInit+0x17c>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4948      	ldr	r1, [pc, #288]	@ (8003a00 <HAL_DFSDM_ChannelInit+0x17c>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80038e2:	4b47      	ldr	r3, [pc, #284]	@ (8003a00 <HAL_DFSDM_ChannelInit+0x17c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a46      	ldr	r2, [pc, #280]	@ (8003a00 <HAL_DFSDM_ChannelInit+0x17c>)
 80038e8:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80038ec:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	791b      	ldrb	r3, [r3, #4]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d108      	bne.n	8003908 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80038f6:	4b42      	ldr	r3, [pc, #264]	@ (8003a00 <HAL_DFSDM_ChannelInit+0x17c>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	3b01      	subs	r3, #1
 8003900:	041b      	lsls	r3, r3, #16
 8003902:	493f      	ldr	r1, [pc, #252]	@ (8003a00 <HAL_DFSDM_ChannelInit+0x17c>)
 8003904:	4313      	orrs	r3, r2
 8003906:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003908:	4b3d      	ldr	r3, [pc, #244]	@ (8003a00 <HAL_DFSDM_ChannelInit+0x17c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a00 <HAL_DFSDM_ChannelInit+0x17c>)
 800390e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003912:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003922:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6819      	ldr	r1, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003932:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003938:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 020f 	bic.w	r2, r2, #15
 8003950:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6819      	ldr	r1, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003978:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6899      	ldr	r1, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003988:	3b01      	subs	r3, #1
 800398a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f002 0207 	and.w	r2, r2, #7
 80039a4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6859      	ldr	r1, [r3, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80039d0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 f810 	bl	8003a04 <DFSDM_GetChannelFromInstance>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4904      	ldr	r1, [pc, #16]	@ (80039f8 <HAL_DFSDM_ChannelInit+0x174>)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20001cf0 	.word	0x20001cf0
 80039fc:	20001cec 	.word	0x20001cec
 8003a00:	40016000 	.word	0x40016000

08003a04 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a1c      	ldr	r2, [pc, #112]	@ (8003a80 <DFSDM_GetChannelFromInstance+0x7c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d102      	bne.n	8003a1a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	e02b      	b.n	8003a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a19      	ldr	r2, [pc, #100]	@ (8003a84 <DFSDM_GetChannelFromInstance+0x80>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d102      	bne.n	8003a28 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003a22:	2301      	movs	r3, #1
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	e024      	b.n	8003a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a17      	ldr	r2, [pc, #92]	@ (8003a88 <DFSDM_GetChannelFromInstance+0x84>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d102      	bne.n	8003a36 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003a30:	2302      	movs	r3, #2
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	e01d      	b.n	8003a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a14      	ldr	r2, [pc, #80]	@ (8003a8c <DFSDM_GetChannelFromInstance+0x88>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d102      	bne.n	8003a44 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003a3e:	2304      	movs	r3, #4
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	e016      	b.n	8003a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a12      	ldr	r2, [pc, #72]	@ (8003a90 <DFSDM_GetChannelFromInstance+0x8c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d102      	bne.n	8003a52 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003a4c:	2305      	movs	r3, #5
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	e00f      	b.n	8003a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a0f      	ldr	r2, [pc, #60]	@ (8003a94 <DFSDM_GetChannelFromInstance+0x90>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d102      	bne.n	8003a60 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003a5a:	2306      	movs	r3, #6
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	e008      	b.n	8003a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a0d      	ldr	r2, [pc, #52]	@ (8003a98 <DFSDM_GetChannelFromInstance+0x94>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d102      	bne.n	8003a6e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003a68:	2307      	movs	r3, #7
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e001      	b.n	8003a72 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003a72:	68fb      	ldr	r3, [r7, #12]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	40016000 	.word	0x40016000
 8003a84:	40016020 	.word	0x40016020
 8003a88:	40016040 	.word	0x40016040
 8003a8c:	40016080 	.word	0x40016080
 8003a90:	400160a0 	.word	0x400160a0
 8003a94:	400160c0 	.word	0x400160c0
 8003a98:	400160e0 	.word	0x400160e0

08003a9c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003aae:	7afb      	ldrb	r3, [r7, #11]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d103      	bne.n	8003abc <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	605a      	str	r2, [r3, #4]
      break;
 8003aba:	e002      	b.n	8003ac2 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	75fb      	strb	r3, [r7, #23]
      break;
 8003ac0:	bf00      	nop
  }

  return status;
 8003ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e003      	b.n	8003aec <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003aea:	2300      	movs	r3, #0
  }
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	0c1b      	lsrs	r3, r3, #16
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	2201      	movs	r2, #1
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	4b0c      	ldr	r3, [pc, #48]	@ (8003b54 <HAL_EXTI_IRQHandler+0x5c>)
 8003b22:	4413      	add	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d009      	beq.n	8003b4a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	4798      	blx	r3
    }
  }
}
 8003b4a:	bf00      	nop
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40010414 	.word	0x40010414

08003b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b66:	e17f      	b.n	8003e68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	fa01 f303 	lsl.w	r3, r1, r3
 8003b74:	4013      	ands	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 8171 	beq.w	8003e62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d005      	beq.n	8003b98 <HAL_GPIO_Init+0x40>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 0303 	and.w	r3, r3, #3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d130      	bne.n	8003bfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	2203      	movs	r2, #3
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4013      	ands	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bce:	2201      	movs	r2, #1
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	091b      	lsrs	r3, r3, #4
 8003be4:	f003 0201 	and.w	r2, r3, #1
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	d118      	bne.n	8003c38 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	43db      	mvns	r3, r3
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	08db      	lsrs	r3, r3, #3
 8003c22:	f003 0201 	and.w	r2, r3, #1
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d017      	beq.n	8003c74 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	2203      	movs	r2, #3
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	43db      	mvns	r3, r3
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d123      	bne.n	8003cc8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	08da      	lsrs	r2, r3, #3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3208      	adds	r2, #8
 8003c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	220f      	movs	r2, #15
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	08da      	lsrs	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3208      	adds	r2, #8
 8003cc2:	6939      	ldr	r1, [r7, #16]
 8003cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	2203      	movs	r2, #3
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 0203 	and.w	r2, r3, #3
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 80ac 	beq.w	8003e62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d0a:	4b5f      	ldr	r3, [pc, #380]	@ (8003e88 <HAL_GPIO_Init+0x330>)
 8003d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d0e:	4a5e      	ldr	r2, [pc, #376]	@ (8003e88 <HAL_GPIO_Init+0x330>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d16:	4b5c      	ldr	r3, [pc, #368]	@ (8003e88 <HAL_GPIO_Init+0x330>)
 8003d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d22:	4a5a      	ldr	r2, [pc, #360]	@ (8003e8c <HAL_GPIO_Init+0x334>)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	089b      	lsrs	r3, r3, #2
 8003d28:	3302      	adds	r3, #2
 8003d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	220f      	movs	r2, #15
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4013      	ands	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d4c:	d025      	beq.n	8003d9a <HAL_GPIO_Init+0x242>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a4f      	ldr	r2, [pc, #316]	@ (8003e90 <HAL_GPIO_Init+0x338>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d01f      	beq.n	8003d96 <HAL_GPIO_Init+0x23e>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a4e      	ldr	r2, [pc, #312]	@ (8003e94 <HAL_GPIO_Init+0x33c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d019      	beq.n	8003d92 <HAL_GPIO_Init+0x23a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a4d      	ldr	r2, [pc, #308]	@ (8003e98 <HAL_GPIO_Init+0x340>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <HAL_GPIO_Init+0x236>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a4c      	ldr	r2, [pc, #304]	@ (8003e9c <HAL_GPIO_Init+0x344>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00d      	beq.n	8003d8a <HAL_GPIO_Init+0x232>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a4b      	ldr	r2, [pc, #300]	@ (8003ea0 <HAL_GPIO_Init+0x348>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d007      	beq.n	8003d86 <HAL_GPIO_Init+0x22e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a4a      	ldr	r2, [pc, #296]	@ (8003ea4 <HAL_GPIO_Init+0x34c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d101      	bne.n	8003d82 <HAL_GPIO_Init+0x22a>
 8003d7e:	2306      	movs	r3, #6
 8003d80:	e00c      	b.n	8003d9c <HAL_GPIO_Init+0x244>
 8003d82:	2307      	movs	r3, #7
 8003d84:	e00a      	b.n	8003d9c <HAL_GPIO_Init+0x244>
 8003d86:	2305      	movs	r3, #5
 8003d88:	e008      	b.n	8003d9c <HAL_GPIO_Init+0x244>
 8003d8a:	2304      	movs	r3, #4
 8003d8c:	e006      	b.n	8003d9c <HAL_GPIO_Init+0x244>
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e004      	b.n	8003d9c <HAL_GPIO_Init+0x244>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e002      	b.n	8003d9c <HAL_GPIO_Init+0x244>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <HAL_GPIO_Init+0x244>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	f002 0203 	and.w	r2, r2, #3
 8003da2:	0092      	lsls	r2, r2, #2
 8003da4:	4093      	lsls	r3, r2
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dac:	4937      	ldr	r1, [pc, #220]	@ (8003e8c <HAL_GPIO_Init+0x334>)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	089b      	lsrs	r3, r3, #2
 8003db2:	3302      	adds	r3, #2
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dba:	4b3b      	ldr	r3, [pc, #236]	@ (8003ea8 <HAL_GPIO_Init+0x350>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dde:	4a32      	ldr	r2, [pc, #200]	@ (8003ea8 <HAL_GPIO_Init+0x350>)
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003de4:	4b30      	ldr	r3, [pc, #192]	@ (8003ea8 <HAL_GPIO_Init+0x350>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	43db      	mvns	r3, r3
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4013      	ands	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e08:	4a27      	ldr	r2, [pc, #156]	@ (8003ea8 <HAL_GPIO_Init+0x350>)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e0e:	4b26      	ldr	r3, [pc, #152]	@ (8003ea8 <HAL_GPIO_Init+0x350>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	43db      	mvns	r3, r3
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e32:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea8 <HAL_GPIO_Init+0x350>)
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea8 <HAL_GPIO_Init+0x350>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4013      	ands	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e5c:	4a12      	ldr	r2, [pc, #72]	@ (8003ea8 <HAL_GPIO_Init+0x350>)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	3301      	adds	r3, #1
 8003e66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f47f ae78 	bne.w	8003b68 <HAL_GPIO_Init+0x10>
  }
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	40010000 	.word	0x40010000
 8003e90:	48000400 	.word	0x48000400
 8003e94:	48000800 	.word	0x48000800
 8003e98:	48000c00 	.word	0x48000c00
 8003e9c:	48001000 	.word	0x48001000
 8003ea0:	48001400 	.word	0x48001400
 8003ea4:	48001800 	.word	0x48001800
 8003ea8:	40010400 	.word	0x40010400

08003eac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003eba:	e0cd      	b.n	8004058 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80c0 	beq.w	8004052 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003ed2:	4a68      	ldr	r2, [pc, #416]	@ (8004074 <HAL_GPIO_DeInit+0x1c8>)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	089b      	lsrs	r3, r3, #2
 8003ed8:	3302      	adds	r3, #2
 8003eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ede:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	220f      	movs	r2, #15
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003efa:	d025      	beq.n	8003f48 <HAL_GPIO_DeInit+0x9c>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a5e      	ldr	r2, [pc, #376]	@ (8004078 <HAL_GPIO_DeInit+0x1cc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d01f      	beq.n	8003f44 <HAL_GPIO_DeInit+0x98>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a5d      	ldr	r2, [pc, #372]	@ (800407c <HAL_GPIO_DeInit+0x1d0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d019      	beq.n	8003f40 <HAL_GPIO_DeInit+0x94>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a5c      	ldr	r2, [pc, #368]	@ (8004080 <HAL_GPIO_DeInit+0x1d4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d013      	beq.n	8003f3c <HAL_GPIO_DeInit+0x90>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a5b      	ldr	r2, [pc, #364]	@ (8004084 <HAL_GPIO_DeInit+0x1d8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00d      	beq.n	8003f38 <HAL_GPIO_DeInit+0x8c>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a5a      	ldr	r2, [pc, #360]	@ (8004088 <HAL_GPIO_DeInit+0x1dc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d007      	beq.n	8003f34 <HAL_GPIO_DeInit+0x88>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a59      	ldr	r2, [pc, #356]	@ (800408c <HAL_GPIO_DeInit+0x1e0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d101      	bne.n	8003f30 <HAL_GPIO_DeInit+0x84>
 8003f2c:	2306      	movs	r3, #6
 8003f2e:	e00c      	b.n	8003f4a <HAL_GPIO_DeInit+0x9e>
 8003f30:	2307      	movs	r3, #7
 8003f32:	e00a      	b.n	8003f4a <HAL_GPIO_DeInit+0x9e>
 8003f34:	2305      	movs	r3, #5
 8003f36:	e008      	b.n	8003f4a <HAL_GPIO_DeInit+0x9e>
 8003f38:	2304      	movs	r3, #4
 8003f3a:	e006      	b.n	8003f4a <HAL_GPIO_DeInit+0x9e>
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e004      	b.n	8003f4a <HAL_GPIO_DeInit+0x9e>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e002      	b.n	8003f4a <HAL_GPIO_DeInit+0x9e>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <HAL_GPIO_DeInit+0x9e>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	f002 0203 	and.w	r2, r2, #3
 8003f50:	0092      	lsls	r2, r2, #2
 8003f52:	4093      	lsls	r3, r2
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d132      	bne.n	8003fc0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003f5a:	4b4d      	ldr	r3, [pc, #308]	@ (8004090 <HAL_GPIO_DeInit+0x1e4>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	43db      	mvns	r3, r3
 8003f62:	494b      	ldr	r1, [pc, #300]	@ (8004090 <HAL_GPIO_DeInit+0x1e4>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003f68:	4b49      	ldr	r3, [pc, #292]	@ (8004090 <HAL_GPIO_DeInit+0x1e4>)
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	4947      	ldr	r1, [pc, #284]	@ (8004090 <HAL_GPIO_DeInit+0x1e4>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003f76:	4b46      	ldr	r3, [pc, #280]	@ (8004090 <HAL_GPIO_DeInit+0x1e4>)
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	4944      	ldr	r1, [pc, #272]	@ (8004090 <HAL_GPIO_DeInit+0x1e4>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003f84:	4b42      	ldr	r3, [pc, #264]	@ (8004090 <HAL_GPIO_DeInit+0x1e4>)
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	4940      	ldr	r1, [pc, #256]	@ (8004090 <HAL_GPIO_DeInit+0x1e4>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	220f      	movs	r2, #15
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003fa2:	4a34      	ldr	r2, [pc, #208]	@ (8004074 <HAL_GPIO_DeInit+0x1c8>)
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	089b      	lsrs	r3, r3, #2
 8003fa8:	3302      	adds	r3, #2
 8003faa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	43da      	mvns	r2, r3
 8003fb2:	4830      	ldr	r0, [pc, #192]	@ (8004074 <HAL_GPIO_DeInit+0x1c8>)
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	089b      	lsrs	r3, r3, #2
 8003fb8:	400a      	ands	r2, r1
 8003fba:	3302      	adds	r3, #2
 8003fbc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	2103      	movs	r1, #3
 8003fca:	fa01 f303 	lsl.w	r3, r1, r3
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	08da      	lsrs	r2, r3, #3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3208      	adds	r2, #8
 8003fdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	220f      	movs	r2, #15
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	08d2      	lsrs	r2, r2, #3
 8003ff4:	4019      	ands	r1, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3208      	adds	r2, #8
 8003ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	2103      	movs	r1, #3
 8004008:	fa01 f303 	lsl.w	r3, r1, r3
 800400c:	43db      	mvns	r3, r3
 800400e:	401a      	ands	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	2101      	movs	r1, #1
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	fa01 f303 	lsl.w	r3, r1, r3
 8004020:	43db      	mvns	r3, r3
 8004022:	401a      	ands	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	2103      	movs	r1, #3
 8004032:	fa01 f303 	lsl.w	r3, r1, r3
 8004036:	43db      	mvns	r3, r3
 8004038:	401a      	ands	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004042:	2101      	movs	r1, #1
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	fa01 f303 	lsl.w	r3, r1, r3
 800404a:	43db      	mvns	r3, r3
 800404c:	401a      	ands	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	3301      	adds	r3, #1
 8004056:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	f47f af2b 	bne.w	8003ebc <HAL_GPIO_DeInit+0x10>
  }
}
 8004066:	bf00      	nop
 8004068:	bf00      	nop
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	40010000 	.word	0x40010000
 8004078:	48000400 	.word	0x48000400
 800407c:	48000800 	.word	0x48000800
 8004080:	48000c00 	.word	0x48000c00
 8004084:	48001000 	.word	0x48001000
 8004088:	48001400 	.word	0x48001400
 800408c:	48001800 	.word	0x48001800
 8004090:	40010400 	.word	0x40010400

08004094 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	887b      	ldrh	r3, [r7, #2]
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040ac:	2301      	movs	r3, #1
 80040ae:	73fb      	strb	r3, [r7, #15]
 80040b0:	e001      	b.n	80040b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040b2:	2300      	movs	r3, #0
 80040b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	807b      	strh	r3, [r7, #2]
 80040d0:	4613      	mov	r3, r2
 80040d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040d4:	787b      	ldrb	r3, [r7, #1]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040da:	887a      	ldrh	r2, [r7, #2]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040e0:	e002      	b.n	80040e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040e2:	887a      	ldrh	r2, [r7, #2]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004106:	887a      	ldrh	r2, [r7, #2]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4013      	ands	r3, r2
 800410c:	041a      	lsls	r2, r3, #16
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	43d9      	mvns	r1, r3
 8004112:	887b      	ldrh	r3, [r7, #2]
 8004114:	400b      	ands	r3, r1
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	619a      	str	r2, [r3, #24]
}
 800411c:	bf00      	nop
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004132:	4b08      	ldr	r3, [pc, #32]	@ (8004154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	88fb      	ldrh	r3, [r7, #6]
 8004138:	4013      	ands	r3, r2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d006      	beq.n	800414c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800413e:	4a05      	ldr	r2, [pc, #20]	@ (8004154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004140:	88fb      	ldrh	r3, [r7, #6]
 8004142:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	4618      	mov	r0, r3
 8004148:	f000 f806 	bl	8004158 <HAL_GPIO_EXTI_Callback>
  }
}
 800414c:	bf00      	nop
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40010400 	.word	0x40010400

08004158 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e08d      	b.n	800429c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d106      	bne.n	800419a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7fe f997 	bl	80024c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2224      	movs	r2, #36	@ 0x24
 800419e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0201 	bic.w	r2, r2, #1
 80041b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041be:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041ce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d107      	bne.n	80041e8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041e4:	609a      	str	r2, [r3, #8]
 80041e6:	e006      	b.n	80041f6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80041f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d108      	bne.n	8004210 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800420c:	605a      	str	r2, [r3, #4]
 800420e:	e007      	b.n	8004220 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800421e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6812      	ldr	r2, [r2, #0]
 800422a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800422e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004232:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004242:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69d9      	ldr	r1, [r3, #28]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1a      	ldr	r2, [r3, #32]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0201 	orr.w	r2, r2, #1
 800427c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e021      	b.n	80042fa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2224      	movs	r2, #36	@ 0x24
 80042ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fe f958 	bl	8002584 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af02      	add	r7, sp, #8
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	4608      	mov	r0, r1
 800430e:	4611      	mov	r1, r2
 8004310:	461a      	mov	r2, r3
 8004312:	4603      	mov	r3, r0
 8004314:	817b      	strh	r3, [r7, #10]
 8004316:	460b      	mov	r3, r1
 8004318:	813b      	strh	r3, [r7, #8]
 800431a:	4613      	mov	r3, r2
 800431c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b20      	cmp	r3, #32
 8004328:	f040 80f9 	bne.w	800451e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_I2C_Mem_Write+0x34>
 8004332:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004334:	2b00      	cmp	r3, #0
 8004336:	d105      	bne.n	8004344 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800433e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e0ed      	b.n	8004520 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <HAL_I2C_Mem_Write+0x4e>
 800434e:	2302      	movs	r3, #2
 8004350:	e0e6      	b.n	8004520 <HAL_I2C_Mem_Write+0x21c>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800435a:	f7ff f981 	bl	8003660 <HAL_GetTick>
 800435e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	2319      	movs	r3, #25
 8004366:	2201      	movs	r2, #1
 8004368:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 fac3 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0d1      	b.n	8004520 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2221      	movs	r2, #33	@ 0x21
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2240      	movs	r2, #64	@ 0x40
 8004388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a3a      	ldr	r2, [r7, #32]
 8004396:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800439c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043a4:	88f8      	ldrh	r0, [r7, #6]
 80043a6:	893a      	ldrh	r2, [r7, #8]
 80043a8:	8979      	ldrh	r1, [r7, #10]
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	4603      	mov	r3, r0
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f9d3 	bl	8004760 <I2C_RequestMemoryWrite>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0a9      	b.n	8004520 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2bff      	cmp	r3, #255	@ 0xff
 80043d4:	d90e      	bls.n	80043f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	22ff      	movs	r2, #255	@ 0xff
 80043da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	8979      	ldrh	r1, [r7, #10]
 80043e4:	2300      	movs	r3, #0
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 fc47 	bl	8004c80 <I2C_TransferConfig>
 80043f2:	e00f      	b.n	8004414 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004402:	b2da      	uxtb	r2, r3
 8004404:	8979      	ldrh	r1, [r7, #10]
 8004406:	2300      	movs	r3, #0
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 fc36 	bl	8004c80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 fac6 	bl	80049aa <I2C_WaitOnTXISFlagUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e07b      	b.n	8004520 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	781a      	ldrb	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d034      	beq.n	80044cc <HAL_I2C_Mem_Write+0x1c8>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004466:	2b00      	cmp	r3, #0
 8004468:	d130      	bne.n	80044cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004470:	2200      	movs	r2, #0
 8004472:	2180      	movs	r1, #128	@ 0x80
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 fa3f 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e04d      	b.n	8004520 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004488:	b29b      	uxth	r3, r3
 800448a:	2bff      	cmp	r3, #255	@ 0xff
 800448c:	d90e      	bls.n	80044ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	22ff      	movs	r2, #255	@ 0xff
 8004492:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004498:	b2da      	uxtb	r2, r3
 800449a:	8979      	ldrh	r1, [r7, #10]
 800449c:	2300      	movs	r3, #0
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fbeb 	bl	8004c80 <I2C_TransferConfig>
 80044aa:	e00f      	b.n	80044cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	8979      	ldrh	r1, [r7, #10]
 80044be:	2300      	movs	r3, #0
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 fbda 	bl	8004c80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d19e      	bne.n	8004414 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 faac 	bl	8004a38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e01a      	b.n	8004520 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2220      	movs	r2, #32
 80044f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6859      	ldr	r1, [r3, #4]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004528 <HAL_I2C_Mem_Write+0x224>)
 80044fe:	400b      	ands	r3, r1
 8004500:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2220      	movs	r2, #32
 8004506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	e000      	b.n	8004520 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800451e:	2302      	movs	r3, #2
  }
}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	fe00e800 	.word	0xfe00e800

0800452c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af02      	add	r7, sp, #8
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	4608      	mov	r0, r1
 8004536:	4611      	mov	r1, r2
 8004538:	461a      	mov	r2, r3
 800453a:	4603      	mov	r3, r0
 800453c:	817b      	strh	r3, [r7, #10]
 800453e:	460b      	mov	r3, r1
 8004540:	813b      	strh	r3, [r7, #8]
 8004542:	4613      	mov	r3, r2
 8004544:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b20      	cmp	r3, #32
 8004550:	f040 80fd 	bne.w	800474e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_I2C_Mem_Read+0x34>
 800455a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800455c:	2b00      	cmp	r3, #0
 800455e:	d105      	bne.n	800456c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004566:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e0f1      	b.n	8004750 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_I2C_Mem_Read+0x4e>
 8004576:	2302      	movs	r3, #2
 8004578:	e0ea      	b.n	8004750 <HAL_I2C_Mem_Read+0x224>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004582:	f7ff f86d 	bl	8003660 <HAL_GetTick>
 8004586:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	2319      	movs	r3, #25
 800458e:	2201      	movs	r2, #1
 8004590:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 f9af 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0d5      	b.n	8004750 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2222      	movs	r2, #34	@ 0x22
 80045a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2240      	movs	r2, #64	@ 0x40
 80045b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a3a      	ldr	r2, [r7, #32]
 80045be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80045c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045cc:	88f8      	ldrh	r0, [r7, #6]
 80045ce:	893a      	ldrh	r2, [r7, #8]
 80045d0:	8979      	ldrh	r1, [r7, #10]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	9301      	str	r3, [sp, #4]
 80045d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	4603      	mov	r3, r0
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f913 	bl	8004808 <I2C_RequestMemoryRead>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0ad      	b.n	8004750 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2bff      	cmp	r3, #255	@ 0xff
 80045fc:	d90e      	bls.n	800461c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2201      	movs	r2, #1
 8004602:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004608:	b2da      	uxtb	r2, r3
 800460a:	8979      	ldrh	r1, [r7, #10]
 800460c:	4b52      	ldr	r3, [pc, #328]	@ (8004758 <HAL_I2C_Mem_Read+0x22c>)
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 fb33 	bl	8004c80 <I2C_TransferConfig>
 800461a:	e00f      	b.n	800463c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800462a:	b2da      	uxtb	r2, r3
 800462c:	8979      	ldrh	r1, [r7, #10]
 800462e:	4b4a      	ldr	r3, [pc, #296]	@ (8004758 <HAL_I2C_Mem_Read+0x22c>)
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 fb22 	bl	8004c80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004642:	2200      	movs	r2, #0
 8004644:	2104      	movs	r1, #4
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f956 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e07c      	b.n	8004750 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d034      	beq.n	80046fc <HAL_I2C_Mem_Read+0x1d0>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004696:	2b00      	cmp	r3, #0
 8004698:	d130      	bne.n	80046fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a0:	2200      	movs	r2, #0
 80046a2:	2180      	movs	r1, #128	@ 0x80
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f927 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e04d      	b.n	8004750 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2bff      	cmp	r3, #255	@ 0xff
 80046bc:	d90e      	bls.n	80046dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	8979      	ldrh	r1, [r7, #10]
 80046cc:	2300      	movs	r3, #0
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 fad3 	bl	8004c80 <I2C_TransferConfig>
 80046da:	e00f      	b.n	80046fc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	8979      	ldrh	r1, [r7, #10]
 80046ee:	2300      	movs	r3, #0
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 fac2 	bl	8004c80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d19a      	bne.n	800463c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 f994 	bl	8004a38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e01a      	b.n	8004750 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2220      	movs	r2, #32
 8004720:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6859      	ldr	r1, [r3, #4]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	4b0b      	ldr	r3, [pc, #44]	@ (800475c <HAL_I2C_Mem_Read+0x230>)
 800472e:	400b      	ands	r3, r1
 8004730:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	e000      	b.n	8004750 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800474e:	2302      	movs	r3, #2
  }
}
 8004750:	4618      	mov	r0, r3
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	80002400 	.word	0x80002400
 800475c:	fe00e800 	.word	0xfe00e800

08004760 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af02      	add	r7, sp, #8
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	4608      	mov	r0, r1
 800476a:	4611      	mov	r1, r2
 800476c:	461a      	mov	r2, r3
 800476e:	4603      	mov	r3, r0
 8004770:	817b      	strh	r3, [r7, #10]
 8004772:	460b      	mov	r3, r1
 8004774:	813b      	strh	r3, [r7, #8]
 8004776:	4613      	mov	r3, r2
 8004778:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800477a:	88fb      	ldrh	r3, [r7, #6]
 800477c:	b2da      	uxtb	r2, r3
 800477e:	8979      	ldrh	r1, [r7, #10]
 8004780:	4b20      	ldr	r3, [pc, #128]	@ (8004804 <I2C_RequestMemoryWrite+0xa4>)
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 fa79 	bl	8004c80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800478e:	69fa      	ldr	r2, [r7, #28]
 8004790:	69b9      	ldr	r1, [r7, #24]
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 f909 	bl	80049aa <I2C_WaitOnTXISFlagUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e02c      	b.n	80047fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047a2:	88fb      	ldrh	r3, [r7, #6]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d105      	bne.n	80047b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047a8:	893b      	ldrh	r3, [r7, #8]
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80047b2:	e015      	b.n	80047e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047b4:	893b      	ldrh	r3, [r7, #8]
 80047b6:	0a1b      	lsrs	r3, r3, #8
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	69b9      	ldr	r1, [r7, #24]
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 f8ef 	bl	80049aa <I2C_WaitOnTXISFlagUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e012      	b.n	80047fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047d6:	893b      	ldrh	r3, [r7, #8]
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2200      	movs	r2, #0
 80047e8:	2180      	movs	r1, #128	@ 0x80
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 f884 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	80002000 	.word	0x80002000

08004808 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af02      	add	r7, sp, #8
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	4608      	mov	r0, r1
 8004812:	4611      	mov	r1, r2
 8004814:	461a      	mov	r2, r3
 8004816:	4603      	mov	r3, r0
 8004818:	817b      	strh	r3, [r7, #10]
 800481a:	460b      	mov	r3, r1
 800481c:	813b      	strh	r3, [r7, #8]
 800481e:	4613      	mov	r3, r2
 8004820:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004822:	88fb      	ldrh	r3, [r7, #6]
 8004824:	b2da      	uxtb	r2, r3
 8004826:	8979      	ldrh	r1, [r7, #10]
 8004828:	4b20      	ldr	r3, [pc, #128]	@ (80048ac <I2C_RequestMemoryRead+0xa4>)
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	2300      	movs	r3, #0
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 fa26 	bl	8004c80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004834:	69fa      	ldr	r2, [r7, #28]
 8004836:	69b9      	ldr	r1, [r7, #24]
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 f8b6 	bl	80049aa <I2C_WaitOnTXISFlagUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e02c      	b.n	80048a2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d105      	bne.n	800485a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800484e:	893b      	ldrh	r3, [r7, #8]
 8004850:	b2da      	uxtb	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	629a      	str	r2, [r3, #40]	@ 0x28
 8004858:	e015      	b.n	8004886 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800485a:	893b      	ldrh	r3, [r7, #8]
 800485c:	0a1b      	lsrs	r3, r3, #8
 800485e:	b29b      	uxth	r3, r3
 8004860:	b2da      	uxtb	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004868:	69fa      	ldr	r2, [r7, #28]
 800486a:	69b9      	ldr	r1, [r7, #24]
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 f89c 	bl	80049aa <I2C_WaitOnTXISFlagUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e012      	b.n	80048a2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800487c:	893b      	ldrh	r3, [r7, #8]
 800487e:	b2da      	uxtb	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	2200      	movs	r2, #0
 800488e:	2140      	movs	r1, #64	@ 0x40
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 f831 	bl	80048f8 <I2C_WaitOnFlagUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	80002000 	.word	0x80002000

080048b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d103      	bne.n	80048ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2200      	movs	r2, #0
 80048cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d007      	beq.n	80048ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699a      	ldr	r2, [r3, #24]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	619a      	str	r2, [r3, #24]
  }
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	4613      	mov	r3, r2
 8004906:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004908:	e03b      	b.n	8004982 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	6839      	ldr	r1, [r7, #0]
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 f8d6 	bl	8004ac0 <I2C_IsErrorOccurred>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e041      	b.n	80049a2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004924:	d02d      	beq.n	8004982 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004926:	f7fe fe9b 	bl	8003660 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d302      	bcc.n	800493c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d122      	bne.n	8004982 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	4013      	ands	r3, r2
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	429a      	cmp	r2, r3
 800494a:	bf0c      	ite	eq
 800494c:	2301      	moveq	r3, #1
 800494e:	2300      	movne	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	461a      	mov	r2, r3
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	429a      	cmp	r2, r3
 8004958:	d113      	bne.n	8004982 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800495e:	f043 0220 	orr.w	r2, r3, #32
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e00f      	b.n	80049a2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699a      	ldr	r2, [r3, #24]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4013      	ands	r3, r2
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	429a      	cmp	r2, r3
 8004990:	bf0c      	ite	eq
 8004992:	2301      	moveq	r3, #1
 8004994:	2300      	movne	r3, #0
 8004996:	b2db      	uxtb	r3, r3
 8004998:	461a      	mov	r2, r3
 800499a:	79fb      	ldrb	r3, [r7, #7]
 800499c:	429a      	cmp	r2, r3
 800499e:	d0b4      	beq.n	800490a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b084      	sub	sp, #16
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049b6:	e033      	b.n	8004a20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	68b9      	ldr	r1, [r7, #8]
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f87f 	bl	8004ac0 <I2C_IsErrorOccurred>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e031      	b.n	8004a30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d2:	d025      	beq.n	8004a20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d4:	f7fe fe44 	bl	8003660 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d302      	bcc.n	80049ea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d11a      	bne.n	8004a20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d013      	beq.n	8004a20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fc:	f043 0220 	orr.w	r2, r3, #32
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e007      	b.n	8004a30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d1c4      	bne.n	80049b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a44:	e02f      	b.n	8004aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 f838 	bl	8004ac0 <I2C_IsErrorOccurred>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e02d      	b.n	8004ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a5a:	f7fe fe01 	bl	8003660 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d302      	bcc.n	8004a70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d11a      	bne.n	8004aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	d013      	beq.n	8004aa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a82:	f043 0220 	orr.w	r2, r3, #32
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e007      	b.n	8004ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	f003 0320 	and.w	r3, r3, #32
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d1c8      	bne.n	8004a46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08a      	sub	sp, #40	@ 0x28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004ada:	2300      	movs	r3, #0
 8004adc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	f003 0310 	and.w	r3, r3, #16
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d068      	beq.n	8004bbe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2210      	movs	r2, #16
 8004af2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004af4:	e049      	b.n	8004b8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afc:	d045      	beq.n	8004b8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004afe:	f7fe fdaf 	bl	8003660 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d302      	bcc.n	8004b14 <I2C_IsErrorOccurred+0x54>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d13a      	bne.n	8004b8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b36:	d121      	bne.n	8004b7c <I2C_IsErrorOccurred+0xbc>
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b3e:	d01d      	beq.n	8004b7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004b40:	7cfb      	ldrb	r3, [r7, #19]
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	d01a      	beq.n	8004b7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004b56:	f7fe fd83 	bl	8003660 <HAL_GetTick>
 8004b5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b5c:	e00e      	b.n	8004b7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004b5e:	f7fe fd7f 	bl	8003660 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b19      	cmp	r3, #25
 8004b6a:	d907      	bls.n	8004b7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	f043 0320 	orr.w	r3, r3, #32
 8004b72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004b7a:	e006      	b.n	8004b8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d1e9      	bne.n	8004b5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	d003      	beq.n	8004ba0 <I2C_IsErrorOccurred+0xe0>
 8004b98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0aa      	beq.n	8004af6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d103      	bne.n	8004bb0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2220      	movs	r2, #32
 8004bae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	f043 0304 	orr.w	r3, r3, #4
 8004bb6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00b      	beq.n	8004be8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004be0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00b      	beq.n	8004c0a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	f043 0308 	orr.w	r3, r3, #8
 8004bf8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00b      	beq.n	8004c2c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	f043 0302 	orr.w	r3, r3, #2
 8004c1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01c      	beq.n	8004c6e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f7ff fe3b 	bl	80048b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6859      	ldr	r1, [r3, #4]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	4b0d      	ldr	r3, [pc, #52]	@ (8004c7c <I2C_IsErrorOccurred+0x1bc>)
 8004c46:	400b      	ands	r3, r1
 8004c48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	431a      	orrs	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004c6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3728      	adds	r7, #40	@ 0x28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	fe00e800 	.word	0xfe00e800

08004c80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	607b      	str	r3, [r7, #4]
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	817b      	strh	r3, [r7, #10]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c92:	897b      	ldrh	r3, [r7, #10]
 8004c94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c98:	7a7b      	ldrb	r3, [r7, #9]
 8004c9a:	041b      	lsls	r3, r3, #16
 8004c9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ca0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	0d5b      	lsrs	r3, r3, #21
 8004cba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004cbe:	4b08      	ldr	r3, [pc, #32]	@ (8004ce0 <I2C_TransferConfig+0x60>)
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	43db      	mvns	r3, r3
 8004cc4:	ea02 0103 	and.w	r1, r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004cd2:	bf00      	nop
 8004cd4:	371c      	adds	r7, #28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	03ff63ff 	.word	0x03ff63ff

08004ce4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d138      	bne.n	8004d6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e032      	b.n	8004d6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2224      	movs	r2, #36	@ 0x24
 8004d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0201 	bic.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6819      	ldr	r1, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e000      	b.n	8004d6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d6c:	2302      	movs	r3, #2
  }
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b086      	sub	sp, #24
 8004d7e:	af02      	add	r7, sp, #8
 8004d80:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e101      	b.n	8004f90 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d106      	bne.n	8004da6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7fd fcfb 	bl	800279c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2203      	movs	r2, #3
 8004daa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f003 fa2b 	bl	8008214 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	7c1a      	ldrb	r2, [r3, #16]
 8004dc6:	f88d 2000 	strb.w	r2, [sp]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dce:	f003 f9f4 	bl	80081ba <USB_CoreInit>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e0d5      	b.n	8004f90 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2100      	movs	r1, #0
 8004dea:	4618      	mov	r0, r3
 8004dec:	f003 fa23 	bl	8008236 <USB_SetCurrentMode>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2202      	movs	r2, #2
 8004dfa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e0c6      	b.n	8004f90 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e02:	2300      	movs	r3, #0
 8004e04:	73fb      	strb	r3, [r7, #15]
 8004e06:	e04a      	b.n	8004e9e <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e08:	7bfa      	ldrb	r2, [r7, #15]
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	3315      	adds	r3, #21
 8004e18:	2201      	movs	r2, #1
 8004e1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e1c:	7bfa      	ldrb	r2, [r7, #15]
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	4613      	mov	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	4413      	add	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	3314      	adds	r3, #20
 8004e2c:	7bfa      	ldrb	r2, [r7, #15]
 8004e2e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e30:	7bfa      	ldrb	r2, [r7, #15]
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	b298      	uxth	r0, r3
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	332e      	adds	r3, #46	@ 0x2e
 8004e44:	4602      	mov	r2, r0
 8004e46:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e48:	7bfa      	ldrb	r2, [r7, #15]
 8004e4a:	6879      	ldr	r1, [r7, #4]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	3318      	adds	r3, #24
 8004e58:	2200      	movs	r2, #0
 8004e5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e5c:	7bfa      	ldrb	r2, [r7, #15]
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	331c      	adds	r3, #28
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e70:	7bfa      	ldrb	r2, [r7, #15]
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	4613      	mov	r3, r2
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	4413      	add	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	3320      	adds	r3, #32
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e84:	7bfa      	ldrb	r2, [r7, #15]
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	3324      	adds	r3, #36	@ 0x24
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	73fb      	strb	r3, [r7, #15]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	791b      	ldrb	r3, [r3, #4]
 8004ea2:	7bfa      	ldrb	r2, [r7, #15]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d3af      	bcc.n	8004e08 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	73fb      	strb	r3, [r7, #15]
 8004eac:	e044      	b.n	8004f38 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004eae:	7bfa      	ldrb	r2, [r7, #15]
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	440b      	add	r3, r1
 8004ebc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ec4:	7bfa      	ldrb	r2, [r7, #15]
 8004ec6:	6879      	ldr	r1, [r7, #4]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	4413      	add	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	440b      	add	r3, r1
 8004ed2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004ed6:	7bfa      	ldrb	r2, [r7, #15]
 8004ed8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004eda:	7bfa      	ldrb	r2, [r7, #15]
 8004edc:	6879      	ldr	r1, [r7, #4]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	440b      	add	r3, r1
 8004ee8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004eec:	2200      	movs	r2, #0
 8004eee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ef0:	7bfa      	ldrb	r2, [r7, #15]
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f06:	7bfa      	ldrb	r2, [r7, #15]
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f1c:	7bfa      	ldrb	r2, [r7, #15]
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	4613      	mov	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	4413      	add	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	3301      	adds	r3, #1
 8004f36:	73fb      	strb	r3, [r7, #15]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	791b      	ldrb	r3, [r3, #4]
 8004f3c:	7bfa      	ldrb	r2, [r7, #15]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d3b5      	bcc.n	8004eae <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6818      	ldr	r0, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	7c1a      	ldrb	r2, [r3, #16]
 8004f4a:	f88d 2000 	strb.w	r2, [sp]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f52:	f003 f9bd 	bl	80082d0 <USB_DevInit>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e013      	b.n	8004f90 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	7b1b      	ldrb	r3, [r3, #12]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d102      	bne.n	8004f84 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f80a 	bl	8004f98 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f003 fb62 	bl	8008652 <USB_DevDisconnect>

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fca:	f043 0303 	orr.w	r3, r3, #3
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fe4:	4b05      	ldr	r3, [pc, #20]	@ (8004ffc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a04      	ldr	r2, [pc, #16]	@ (8004ffc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004fea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fee:	6013      	str	r3, [r2, #0]
}
 8004ff0:	bf00      	nop
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40007000 	.word	0x40007000

08005000 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005004:	4b04      	ldr	r3, [pc, #16]	@ (8005018 <HAL_PWREx_GetVoltageRange+0x18>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800500c:	4618      	mov	r0, r3
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40007000 	.word	0x40007000

0800501c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800502a:	d130      	bne.n	800508e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800502c:	4b23      	ldr	r3, [pc, #140]	@ (80050bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005038:	d038      	beq.n	80050ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800503a:	4b20      	ldr	r3, [pc, #128]	@ (80050bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005042:	4a1e      	ldr	r2, [pc, #120]	@ (80050bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005044:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005048:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800504a:	4b1d      	ldr	r3, [pc, #116]	@ (80050c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2232      	movs	r2, #50	@ 0x32
 8005050:	fb02 f303 	mul.w	r3, r2, r3
 8005054:	4a1b      	ldr	r2, [pc, #108]	@ (80050c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005056:	fba2 2303 	umull	r2, r3, r2, r3
 800505a:	0c9b      	lsrs	r3, r3, #18
 800505c:	3301      	adds	r3, #1
 800505e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005060:	e002      	b.n	8005068 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3b01      	subs	r3, #1
 8005066:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005068:	4b14      	ldr	r3, [pc, #80]	@ (80050bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005074:	d102      	bne.n	800507c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1f2      	bne.n	8005062 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800507c:	4b0f      	ldr	r3, [pc, #60]	@ (80050bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005084:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005088:	d110      	bne.n	80050ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e00f      	b.n	80050ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800508e:	4b0b      	ldr	r3, [pc, #44]	@ (80050bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800509a:	d007      	beq.n	80050ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800509c:	4b07      	ldr	r3, [pc, #28]	@ (80050bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050a4:	4a05      	ldr	r2, [pc, #20]	@ (80050bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	40007000 	.word	0x40007000
 80050c0:	20000008 	.word	0x20000008
 80050c4:	431bde83 	.word	0x431bde83

080050c8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80050cc:	4b05      	ldr	r3, [pc, #20]	@ (80050e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	4a04      	ldr	r2, [pc, #16]	@ (80050e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80050d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050d6:	6053      	str	r3, [r2, #4]
}
 80050d8:	bf00      	nop
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40007000 	.word	0x40007000

080050e8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80050f0:	f7fe fab6 	bl	8003660 <HAL_GetTick>
 80050f4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e063      	b.n	80051c8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10b      	bne.n	8005124 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7fd fa59 	bl	80025cc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800511a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f858 	bl	80051d4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	3b01      	subs	r3, #1
 8005134:	021a      	lsls	r2, r3, #8
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	2120      	movs	r1, #32
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f850 	bl	80051f0 <QSPI_WaitFlagStateUntilTimeout>
 8005150:	4603      	mov	r3, r0
 8005152:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005154:	7afb      	ldrb	r3, [r7, #11]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d131      	bne.n	80051be <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005164:	f023 0310 	bic.w	r3, r3, #16
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6852      	ldr	r2, [r2, #4]
 800516c:	0611      	lsls	r1, r2, #24
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	68d2      	ldr	r2, [r2, #12]
 8005172:	4311      	orrs	r1, r2
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6812      	ldr	r2, [r2, #0]
 8005178:	430b      	orrs	r3, r1
 800517a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	4b13      	ldr	r3, [pc, #76]	@ (80051d0 <HAL_QSPI_Init+0xe8>)
 8005184:	4013      	ands	r3, r2
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6912      	ldr	r2, [r2, #16]
 800518a:	0411      	lsls	r1, r2, #16
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6952      	ldr	r2, [r2, #20]
 8005190:	4311      	orrs	r1, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6992      	ldr	r2, [r2, #24]
 8005196:	4311      	orrs	r1, r2
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6812      	ldr	r2, [r2, #0]
 800519c:	430b      	orrs	r3, r1
 800519e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80051c6:	7afb      	ldrb	r3, [r7, #11]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	ffe0f8fe 	.word	0xffe0f8fe

080051d4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	603b      	str	r3, [r7, #0]
 80051fc:	4613      	mov	r3, r2
 80051fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005200:	e01a      	b.n	8005238 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005208:	d016      	beq.n	8005238 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520a:	f7fe fa29 	bl	8003660 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	429a      	cmp	r2, r3
 8005218:	d302      	bcc.n	8005220 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2204      	movs	r2, #4
 8005224:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800522c:	f043 0201 	orr.w	r2, r3, #1
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e00e      	b.n	8005256 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	4013      	ands	r3, r2
 8005242:	2b00      	cmp	r3, #0
 8005244:	bf14      	ite	ne
 8005246:	2301      	movne	r3, #1
 8005248:	2300      	moveq	r3, #0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	429a      	cmp	r2, r3
 8005252:	d1d6      	bne.n	8005202 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e3ca      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005272:	4b97      	ldr	r3, [pc, #604]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 030c 	and.w	r3, r3, #12
 800527a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800527c:	4b94      	ldr	r3, [pc, #592]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0310 	and.w	r3, r3, #16
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 80e4 	beq.w	800545c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d007      	beq.n	80052aa <HAL_RCC_OscConfig+0x4a>
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b0c      	cmp	r3, #12
 800529e:	f040 808b 	bne.w	80053b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	f040 8087 	bne.w	80053b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052aa:	4b89      	ldr	r3, [pc, #548]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <HAL_RCC_OscConfig+0x62>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e3a2      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1a      	ldr	r2, [r3, #32]
 80052c6:	4b82      	ldr	r3, [pc, #520]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d004      	beq.n	80052dc <HAL_RCC_OscConfig+0x7c>
 80052d2:	4b7f      	ldr	r3, [pc, #508]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052da:	e005      	b.n	80052e8 <HAL_RCC_OscConfig+0x88>
 80052dc:	4b7c      	ldr	r3, [pc, #496]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 80052de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052e2:	091b      	lsrs	r3, r3, #4
 80052e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d223      	bcs.n	8005334 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fd87 	bl	8005e04 <RCC_SetFlashLatencyFromMSIRange>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e383      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005300:	4b73      	ldr	r3, [pc, #460]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a72      	ldr	r2, [pc, #456]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 8005306:	f043 0308 	orr.w	r3, r3, #8
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	4b70      	ldr	r3, [pc, #448]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	496d      	ldr	r1, [pc, #436]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 800531a:	4313      	orrs	r3, r2
 800531c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800531e:	4b6c      	ldr	r3, [pc, #432]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	021b      	lsls	r3, r3, #8
 800532c:	4968      	ldr	r1, [pc, #416]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 800532e:	4313      	orrs	r3, r2
 8005330:	604b      	str	r3, [r1, #4]
 8005332:	e025      	b.n	8005380 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005334:	4b66      	ldr	r3, [pc, #408]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a65      	ldr	r2, [pc, #404]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 800533a:	f043 0308 	orr.w	r3, r3, #8
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	4b63      	ldr	r3, [pc, #396]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	4960      	ldr	r1, [pc, #384]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 800534e:	4313      	orrs	r3, r2
 8005350:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005352:	4b5f      	ldr	r3, [pc, #380]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	495b      	ldr	r1, [pc, #364]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 8005362:	4313      	orrs	r3, r2
 8005364:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d109      	bne.n	8005380 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fd47 	bl	8005e04 <RCC_SetFlashLatencyFromMSIRange>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e343      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005380:	f000 fc4a 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8005384:	4602      	mov	r2, r0
 8005386:	4b52      	ldr	r3, [pc, #328]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	091b      	lsrs	r3, r3, #4
 800538c:	f003 030f 	and.w	r3, r3, #15
 8005390:	4950      	ldr	r1, [pc, #320]	@ (80054d4 <HAL_RCC_OscConfig+0x274>)
 8005392:	5ccb      	ldrb	r3, [r1, r3]
 8005394:	f003 031f 	and.w	r3, r3, #31
 8005398:	fa22 f303 	lsr.w	r3, r2, r3
 800539c:	4a4e      	ldr	r2, [pc, #312]	@ (80054d8 <HAL_RCC_OscConfig+0x278>)
 800539e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80053a0:	4b4e      	ldr	r3, [pc, #312]	@ (80054dc <HAL_RCC_OscConfig+0x27c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fd fa95 	bl	80028d4 <HAL_InitTick>
 80053aa:	4603      	mov	r3, r0
 80053ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d052      	beq.n	800545a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	e327      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d032      	beq.n	8005426 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80053c0:	4b43      	ldr	r3, [pc, #268]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a42      	ldr	r2, [pc, #264]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053cc:	f7fe f948 	bl	8003660 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053d4:	f7fe f944 	bl	8003660 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e310      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053e6:	4b3a      	ldr	r3, [pc, #232]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0f0      	beq.n	80053d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053f2:	4b37      	ldr	r3, [pc, #220]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a36      	ldr	r2, [pc, #216]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 80053f8:	f043 0308 	orr.w	r3, r3, #8
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	4b34      	ldr	r3, [pc, #208]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	4931      	ldr	r1, [pc, #196]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 800540c:	4313      	orrs	r3, r2
 800540e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005410:	4b2f      	ldr	r3, [pc, #188]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	492c      	ldr	r1, [pc, #176]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 8005420:	4313      	orrs	r3, r2
 8005422:	604b      	str	r3, [r1, #4]
 8005424:	e01a      	b.n	800545c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005426:	4b2a      	ldr	r3, [pc, #168]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a29      	ldr	r2, [pc, #164]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 800542c:	f023 0301 	bic.w	r3, r3, #1
 8005430:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005432:	f7fe f915 	bl	8003660 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800543a:	f7fe f911 	bl	8003660 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e2dd      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800544c:	4b20      	ldr	r3, [pc, #128]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1f0      	bne.n	800543a <HAL_RCC_OscConfig+0x1da>
 8005458:	e000      	b.n	800545c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800545a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d074      	beq.n	8005552 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	2b08      	cmp	r3, #8
 800546c:	d005      	beq.n	800547a <HAL_RCC_OscConfig+0x21a>
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	2b0c      	cmp	r3, #12
 8005472:	d10e      	bne.n	8005492 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2b03      	cmp	r3, #3
 8005478:	d10b      	bne.n	8005492 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800547a:	4b15      	ldr	r3, [pc, #84]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d064      	beq.n	8005550 <HAL_RCC_OscConfig+0x2f0>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d160      	bne.n	8005550 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e2ba      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800549a:	d106      	bne.n	80054aa <HAL_RCC_OscConfig+0x24a>
 800549c:	4b0c      	ldr	r3, [pc, #48]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a0b      	ldr	r2, [pc, #44]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 80054a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	e026      	b.n	80054f8 <HAL_RCC_OscConfig+0x298>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054b2:	d115      	bne.n	80054e0 <HAL_RCC_OscConfig+0x280>
 80054b4:	4b06      	ldr	r3, [pc, #24]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a05      	ldr	r2, [pc, #20]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 80054ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	4b03      	ldr	r3, [pc, #12]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a02      	ldr	r2, [pc, #8]	@ (80054d0 <HAL_RCC_OscConfig+0x270>)
 80054c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054ca:	6013      	str	r3, [r2, #0]
 80054cc:	e014      	b.n	80054f8 <HAL_RCC_OscConfig+0x298>
 80054ce:	bf00      	nop
 80054d0:	40021000 	.word	0x40021000
 80054d4:	0800bfe8 	.word	0x0800bfe8
 80054d8:	20000008 	.word	0x20000008
 80054dc:	20000050 	.word	0x20000050
 80054e0:	4ba0      	ldr	r3, [pc, #640]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a9f      	ldr	r2, [pc, #636]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 80054e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054ea:	6013      	str	r3, [r2, #0]
 80054ec:	4b9d      	ldr	r3, [pc, #628]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a9c      	ldr	r2, [pc, #624]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 80054f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d013      	beq.n	8005528 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005500:	f7fe f8ae 	bl	8003660 <HAL_GetTick>
 8005504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005508:	f7fe f8aa 	bl	8003660 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b64      	cmp	r3, #100	@ 0x64
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e276      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800551a:	4b92      	ldr	r3, [pc, #584]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0f0      	beq.n	8005508 <HAL_RCC_OscConfig+0x2a8>
 8005526:	e014      	b.n	8005552 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005528:	f7fe f89a 	bl	8003660 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005530:	f7fe f896 	bl	8003660 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b64      	cmp	r3, #100	@ 0x64
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e262      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005542:	4b88      	ldr	r3, [pc, #544]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f0      	bne.n	8005530 <HAL_RCC_OscConfig+0x2d0>
 800554e:	e000      	b.n	8005552 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d060      	beq.n	8005620 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	2b04      	cmp	r3, #4
 8005562:	d005      	beq.n	8005570 <HAL_RCC_OscConfig+0x310>
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	2b0c      	cmp	r3, #12
 8005568:	d119      	bne.n	800559e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2b02      	cmp	r3, #2
 800556e:	d116      	bne.n	800559e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005570:	4b7c      	ldr	r3, [pc, #496]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <HAL_RCC_OscConfig+0x328>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e23f      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005588:	4b76      	ldr	r3, [pc, #472]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	061b      	lsls	r3, r3, #24
 8005596:	4973      	ldr	r1, [pc, #460]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 8005598:	4313      	orrs	r3, r2
 800559a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800559c:	e040      	b.n	8005620 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d023      	beq.n	80055ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055a6:	4b6f      	ldr	r3, [pc, #444]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a6e      	ldr	r2, [pc, #440]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 80055ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b2:	f7fe f855 	bl	8003660 <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ba:	f7fe f851 	bl	8003660 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e21d      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055cc:	4b65      	ldr	r3, [pc, #404]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0f0      	beq.n	80055ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d8:	4b62      	ldr	r3, [pc, #392]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	061b      	lsls	r3, r3, #24
 80055e6:	495f      	ldr	r1, [pc, #380]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	604b      	str	r3, [r1, #4]
 80055ec:	e018      	b.n	8005620 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ee:	4b5d      	ldr	r3, [pc, #372]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a5c      	ldr	r2, [pc, #368]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 80055f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fa:	f7fe f831 	bl	8003660 <HAL_GetTick>
 80055fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005602:	f7fe f82d 	bl	8003660 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e1f9      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005614:	4b53      	ldr	r3, [pc, #332]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1f0      	bne.n	8005602 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b00      	cmp	r3, #0
 800562a:	d03c      	beq.n	80056a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01c      	beq.n	800566e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005634:	4b4b      	ldr	r3, [pc, #300]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 8005636:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800563a:	4a4a      	ldr	r2, [pc, #296]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 800563c:	f043 0301 	orr.w	r3, r3, #1
 8005640:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005644:	f7fe f80c 	bl	8003660 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800564c:	f7fe f808 	bl	8003660 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e1d4      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800565e:	4b41      	ldr	r3, [pc, #260]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 8005660:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0ef      	beq.n	800564c <HAL_RCC_OscConfig+0x3ec>
 800566c:	e01b      	b.n	80056a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800566e:	4b3d      	ldr	r3, [pc, #244]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 8005670:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005674:	4a3b      	ldr	r2, [pc, #236]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 8005676:	f023 0301 	bic.w	r3, r3, #1
 800567a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800567e:	f7fd ffef 	bl	8003660 <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005686:	f7fd ffeb 	bl	8003660 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e1b7      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005698:	4b32      	ldr	r3, [pc, #200]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 800569a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1ef      	bne.n	8005686 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 80a6 	beq.w	8005800 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056b4:	2300      	movs	r3, #0
 80056b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80056b8:	4b2a      	ldr	r3, [pc, #168]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 80056ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10d      	bne.n	80056e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056c4:	4b27      	ldr	r3, [pc, #156]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 80056c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c8:	4a26      	ldr	r2, [pc, #152]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 80056ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80056d0:	4b24      	ldr	r3, [pc, #144]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 80056d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056d8:	60bb      	str	r3, [r7, #8]
 80056da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056dc:	2301      	movs	r3, #1
 80056de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056e0:	4b21      	ldr	r3, [pc, #132]	@ (8005768 <HAL_RCC_OscConfig+0x508>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d118      	bne.n	800571e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056ec:	4b1e      	ldr	r3, [pc, #120]	@ (8005768 <HAL_RCC_OscConfig+0x508>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005768 <HAL_RCC_OscConfig+0x508>)
 80056f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056f8:	f7fd ffb2 	bl	8003660 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005700:	f7fd ffae 	bl	8003660 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e17a      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005712:	4b15      	ldr	r3, [pc, #84]	@ (8005768 <HAL_RCC_OscConfig+0x508>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0f0      	beq.n	8005700 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d108      	bne.n	8005738 <HAL_RCC_OscConfig+0x4d8>
 8005726:	4b0f      	ldr	r3, [pc, #60]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 8005728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800572c:	4a0d      	ldr	r2, [pc, #52]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 800572e:	f043 0301 	orr.w	r3, r3, #1
 8005732:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005736:	e029      	b.n	800578c <HAL_RCC_OscConfig+0x52c>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b05      	cmp	r3, #5
 800573e:	d115      	bne.n	800576c <HAL_RCC_OscConfig+0x50c>
 8005740:	4b08      	ldr	r3, [pc, #32]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 8005742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005746:	4a07      	ldr	r2, [pc, #28]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 8005748:	f043 0304 	orr.w	r3, r3, #4
 800574c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005750:	4b04      	ldr	r3, [pc, #16]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 8005752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005756:	4a03      	ldr	r2, [pc, #12]	@ (8005764 <HAL_RCC_OscConfig+0x504>)
 8005758:	f043 0301 	orr.w	r3, r3, #1
 800575c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005760:	e014      	b.n	800578c <HAL_RCC_OscConfig+0x52c>
 8005762:	bf00      	nop
 8005764:	40021000 	.word	0x40021000
 8005768:	40007000 	.word	0x40007000
 800576c:	4b9c      	ldr	r3, [pc, #624]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005772:	4a9b      	ldr	r2, [pc, #620]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 8005774:	f023 0301 	bic.w	r3, r3, #1
 8005778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800577c:	4b98      	ldr	r3, [pc, #608]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 800577e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005782:	4a97      	ldr	r2, [pc, #604]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 8005784:	f023 0304 	bic.w	r3, r3, #4
 8005788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d016      	beq.n	80057c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005794:	f7fd ff64 	bl	8003660 <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800579a:	e00a      	b.n	80057b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800579c:	f7fd ff60 	bl	8003660 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e12a      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057b2:	4b8b      	ldr	r3, [pc, #556]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 80057b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0ed      	beq.n	800579c <HAL_RCC_OscConfig+0x53c>
 80057c0:	e015      	b.n	80057ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c2:	f7fd ff4d 	bl	8003660 <HAL_GetTick>
 80057c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057c8:	e00a      	b.n	80057e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ca:	f7fd ff49 	bl	8003660 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057d8:	4293      	cmp	r3, r2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e113      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057e0:	4b7f      	ldr	r3, [pc, #508]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 80057e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1ed      	bne.n	80057ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057ee:	7ffb      	ldrb	r3, [r7, #31]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d105      	bne.n	8005800 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057f4:	4b7a      	ldr	r3, [pc, #488]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 80057f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f8:	4a79      	ldr	r2, [pc, #484]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 80057fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057fe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 80fe 	beq.w	8005a06 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580e:	2b02      	cmp	r3, #2
 8005810:	f040 80d0 	bne.w	80059b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005814:	4b72      	ldr	r3, [pc, #456]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f003 0203 	and.w	r2, r3, #3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005824:	429a      	cmp	r2, r3
 8005826:	d130      	bne.n	800588a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005832:	3b01      	subs	r3, #1
 8005834:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005836:	429a      	cmp	r2, r3
 8005838:	d127      	bne.n	800588a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005844:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005846:	429a      	cmp	r2, r3
 8005848:	d11f      	bne.n	800588a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005854:	2a07      	cmp	r2, #7
 8005856:	bf14      	ite	ne
 8005858:	2201      	movne	r2, #1
 800585a:	2200      	moveq	r2, #0
 800585c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800585e:	4293      	cmp	r3, r2
 8005860:	d113      	bne.n	800588a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800586c:	085b      	lsrs	r3, r3, #1
 800586e:	3b01      	subs	r3, #1
 8005870:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005872:	429a      	cmp	r2, r3
 8005874:	d109      	bne.n	800588a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005880:	085b      	lsrs	r3, r3, #1
 8005882:	3b01      	subs	r3, #1
 8005884:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005886:	429a      	cmp	r2, r3
 8005888:	d06e      	beq.n	8005968 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	2b0c      	cmp	r3, #12
 800588e:	d069      	beq.n	8005964 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005890:	4b53      	ldr	r3, [pc, #332]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d105      	bne.n	80058a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800589c:	4b50      	ldr	r3, [pc, #320]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0ad      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80058ac:	4b4c      	ldr	r3, [pc, #304]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a4b      	ldr	r2, [pc, #300]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 80058b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058b8:	f7fd fed2 	bl	8003660 <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058c0:	f7fd fece 	bl	8003660 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e09a      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058d2:	4b43      	ldr	r3, [pc, #268]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f0      	bne.n	80058c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058de:	4b40      	ldr	r3, [pc, #256]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	4b40      	ldr	r3, [pc, #256]	@ (80059e4 <HAL_RCC_OscConfig+0x784>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80058ee:	3a01      	subs	r2, #1
 80058f0:	0112      	lsls	r2, r2, #4
 80058f2:	4311      	orrs	r1, r2
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80058f8:	0212      	lsls	r2, r2, #8
 80058fa:	4311      	orrs	r1, r2
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005900:	0852      	lsrs	r2, r2, #1
 8005902:	3a01      	subs	r2, #1
 8005904:	0552      	lsls	r2, r2, #21
 8005906:	4311      	orrs	r1, r2
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800590c:	0852      	lsrs	r2, r2, #1
 800590e:	3a01      	subs	r2, #1
 8005910:	0652      	lsls	r2, r2, #25
 8005912:	4311      	orrs	r1, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005918:	0912      	lsrs	r2, r2, #4
 800591a:	0452      	lsls	r2, r2, #17
 800591c:	430a      	orrs	r2, r1
 800591e:	4930      	ldr	r1, [pc, #192]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 8005920:	4313      	orrs	r3, r2
 8005922:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005924:	4b2e      	ldr	r3, [pc, #184]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a2d      	ldr	r2, [pc, #180]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 800592a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800592e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005930:	4b2b      	ldr	r3, [pc, #172]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	4a2a      	ldr	r2, [pc, #168]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 8005936:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800593a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800593c:	f7fd fe90 	bl	8003660 <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005944:	f7fd fe8c 	bl	8003660 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e058      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005956:	4b22      	ldr	r3, [pc, #136]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0f0      	beq.n	8005944 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005962:	e050      	b.n	8005a06 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e04f      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005968:	4b1d      	ldr	r3, [pc, #116]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d148      	bne.n	8005a06 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005974:	4b1a      	ldr	r3, [pc, #104]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a19      	ldr	r2, [pc, #100]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 800597a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800597e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005980:	4b17      	ldr	r3, [pc, #92]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	4a16      	ldr	r2, [pc, #88]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 8005986:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800598a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800598c:	f7fd fe68 	bl	8003660 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005994:	f7fd fe64 	bl	8003660 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e030      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059a6:	4b0e      	ldr	r3, [pc, #56]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f0      	beq.n	8005994 <HAL_RCC_OscConfig+0x734>
 80059b2:	e028      	b.n	8005a06 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	2b0c      	cmp	r3, #12
 80059b8:	d023      	beq.n	8005a02 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ba:	4b09      	ldr	r3, [pc, #36]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a08      	ldr	r2, [pc, #32]	@ (80059e0 <HAL_RCC_OscConfig+0x780>)
 80059c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c6:	f7fd fe4b 	bl	8003660 <HAL_GetTick>
 80059ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059cc:	e00c      	b.n	80059e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ce:	f7fd fe47 	bl	8003660 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d905      	bls.n	80059e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e013      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
 80059e0:	40021000 	.word	0x40021000
 80059e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059e8:	4b09      	ldr	r3, [pc, #36]	@ (8005a10 <HAL_RCC_OscConfig+0x7b0>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1ec      	bne.n	80059ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80059f4:	4b06      	ldr	r3, [pc, #24]	@ (8005a10 <HAL_RCC_OscConfig+0x7b0>)
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	4905      	ldr	r1, [pc, #20]	@ (8005a10 <HAL_RCC_OscConfig+0x7b0>)
 80059fa:	4b06      	ldr	r3, [pc, #24]	@ (8005a14 <HAL_RCC_OscConfig+0x7b4>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	60cb      	str	r3, [r1, #12]
 8005a00:	e001      	b.n	8005a06 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e000      	b.n	8005a08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3720      	adds	r7, #32
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40021000 	.word	0x40021000
 8005a14:	feeefffc 	.word	0xfeeefffc

08005a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e0e7      	b.n	8005bfc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a2c:	4b75      	ldr	r3, [pc, #468]	@ (8005c04 <HAL_RCC_ClockConfig+0x1ec>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d910      	bls.n	8005a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3a:	4b72      	ldr	r3, [pc, #456]	@ (8005c04 <HAL_RCC_ClockConfig+0x1ec>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f023 0207 	bic.w	r2, r3, #7
 8005a42:	4970      	ldr	r1, [pc, #448]	@ (8005c04 <HAL_RCC_ClockConfig+0x1ec>)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a4a:	4b6e      	ldr	r3, [pc, #440]	@ (8005c04 <HAL_RCC_ClockConfig+0x1ec>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d001      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0cf      	b.n	8005bfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d010      	beq.n	8005a8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	4b66      	ldr	r3, [pc, #408]	@ (8005c08 <HAL_RCC_ClockConfig+0x1f0>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d908      	bls.n	8005a8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a78:	4b63      	ldr	r3, [pc, #396]	@ (8005c08 <HAL_RCC_ClockConfig+0x1f0>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	4960      	ldr	r1, [pc, #384]	@ (8005c08 <HAL_RCC_ClockConfig+0x1f0>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d04c      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	d107      	bne.n	8005aae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a9e:	4b5a      	ldr	r3, [pc, #360]	@ (8005c08 <HAL_RCC_ClockConfig+0x1f0>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d121      	bne.n	8005aee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e0a6      	b.n	8005bfc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d107      	bne.n	8005ac6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ab6:	4b54      	ldr	r3, [pc, #336]	@ (8005c08 <HAL_RCC_ClockConfig+0x1f0>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d115      	bne.n	8005aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e09a      	b.n	8005bfc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d107      	bne.n	8005ade <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ace:	4b4e      	ldr	r3, [pc, #312]	@ (8005c08 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d109      	bne.n	8005aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e08e      	b.n	8005bfc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ade:	4b4a      	ldr	r3, [pc, #296]	@ (8005c08 <HAL_RCC_ClockConfig+0x1f0>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e086      	b.n	8005bfc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005aee:	4b46      	ldr	r3, [pc, #280]	@ (8005c08 <HAL_RCC_ClockConfig+0x1f0>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f023 0203 	bic.w	r2, r3, #3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	4943      	ldr	r1, [pc, #268]	@ (8005c08 <HAL_RCC_ClockConfig+0x1f0>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b00:	f7fd fdae 	bl	8003660 <HAL_GetTick>
 8005b04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b06:	e00a      	b.n	8005b1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b08:	f7fd fdaa 	bl	8003660 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e06e      	b.n	8005bfc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b1e:	4b3a      	ldr	r3, [pc, #232]	@ (8005c08 <HAL_RCC_ClockConfig+0x1f0>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 020c 	and.w	r2, r3, #12
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d1eb      	bne.n	8005b08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d010      	beq.n	8005b5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	4b31      	ldr	r3, [pc, #196]	@ (8005c08 <HAL_RCC_ClockConfig+0x1f0>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d208      	bcs.n	8005b5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8005c08 <HAL_RCC_ClockConfig+0x1f0>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	492b      	ldr	r1, [pc, #172]	@ (8005c08 <HAL_RCC_ClockConfig+0x1f0>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b5e:	4b29      	ldr	r3, [pc, #164]	@ (8005c04 <HAL_RCC_ClockConfig+0x1ec>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d210      	bcs.n	8005b8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b6c:	4b25      	ldr	r3, [pc, #148]	@ (8005c04 <HAL_RCC_ClockConfig+0x1ec>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f023 0207 	bic.w	r2, r3, #7
 8005b74:	4923      	ldr	r1, [pc, #140]	@ (8005c04 <HAL_RCC_ClockConfig+0x1ec>)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7c:	4b21      	ldr	r3, [pc, #132]	@ (8005c04 <HAL_RCC_ClockConfig+0x1ec>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d001      	beq.n	8005b8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e036      	b.n	8005bfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0304 	and.w	r3, r3, #4
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d008      	beq.n	8005bac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8005c08 <HAL_RCC_ClockConfig+0x1f0>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	4918      	ldr	r1, [pc, #96]	@ (8005c08 <HAL_RCC_ClockConfig+0x1f0>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0308 	and.w	r3, r3, #8
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d009      	beq.n	8005bcc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bb8:	4b13      	ldr	r3, [pc, #76]	@ (8005c08 <HAL_RCC_ClockConfig+0x1f0>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	4910      	ldr	r1, [pc, #64]	@ (8005c08 <HAL_RCC_ClockConfig+0x1f0>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bcc:	f000 f824 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c08 <HAL_RCC_ClockConfig+0x1f0>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	091b      	lsrs	r3, r3, #4
 8005bd8:	f003 030f 	and.w	r3, r3, #15
 8005bdc:	490b      	ldr	r1, [pc, #44]	@ (8005c0c <HAL_RCC_ClockConfig+0x1f4>)
 8005bde:	5ccb      	ldrb	r3, [r1, r3]
 8005be0:	f003 031f 	and.w	r3, r3, #31
 8005be4:	fa22 f303 	lsr.w	r3, r2, r3
 8005be8:	4a09      	ldr	r2, [pc, #36]	@ (8005c10 <HAL_RCC_ClockConfig+0x1f8>)
 8005bea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005bec:	4b09      	ldr	r3, [pc, #36]	@ (8005c14 <HAL_RCC_ClockConfig+0x1fc>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fc fe6f 	bl	80028d4 <HAL_InitTick>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	72fb      	strb	r3, [r7, #11]

  return status;
 8005bfa:	7afb      	ldrb	r3, [r7, #11]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40022000 	.word	0x40022000
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	0800bfe8 	.word	0x0800bfe8
 8005c10:	20000008 	.word	0x20000008
 8005c14:	20000050 	.word	0x20000050

08005c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b089      	sub	sp, #36	@ 0x24
 8005c1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61fb      	str	r3, [r7, #28]
 8005c22:	2300      	movs	r3, #0
 8005c24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c26:	4b3e      	ldr	r3, [pc, #248]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 030c 	and.w	r3, r3, #12
 8005c2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c30:	4b3b      	ldr	r3, [pc, #236]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f003 0303 	and.w	r3, r3, #3
 8005c38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d005      	beq.n	8005c4c <HAL_RCC_GetSysClockFreq+0x34>
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	2b0c      	cmp	r3, #12
 8005c44:	d121      	bne.n	8005c8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d11e      	bne.n	8005c8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c4c:	4b34      	ldr	r3, [pc, #208]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0308 	and.w	r3, r3, #8
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d107      	bne.n	8005c68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c58:	4b31      	ldr	r3, [pc, #196]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c5e:	0a1b      	lsrs	r3, r3, #8
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	61fb      	str	r3, [r7, #28]
 8005c66:	e005      	b.n	8005c74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c68:	4b2d      	ldr	r3, [pc, #180]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	091b      	lsrs	r3, r3, #4
 8005c6e:	f003 030f 	and.w	r3, r3, #15
 8005c72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c74:	4a2b      	ldr	r2, [pc, #172]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10d      	bne.n	8005ca0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c88:	e00a      	b.n	8005ca0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d102      	bne.n	8005c96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c90:	4b25      	ldr	r3, [pc, #148]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c92:	61bb      	str	r3, [r7, #24]
 8005c94:	e004      	b.n	8005ca0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d101      	bne.n	8005ca0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c9c:	4b23      	ldr	r3, [pc, #140]	@ (8005d2c <HAL_RCC_GetSysClockFreq+0x114>)
 8005c9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	2b0c      	cmp	r3, #12
 8005ca4:	d134      	bne.n	8005d10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f003 0303 	and.w	r3, r3, #3
 8005cae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d003      	beq.n	8005cbe <HAL_RCC_GetSysClockFreq+0xa6>
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d003      	beq.n	8005cc4 <HAL_RCC_GetSysClockFreq+0xac>
 8005cbc:	e005      	b.n	8005cca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0x110>)
 8005cc0:	617b      	str	r3, [r7, #20]
      break;
 8005cc2:	e005      	b.n	8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005cc4:	4b19      	ldr	r3, [pc, #100]	@ (8005d2c <HAL_RCC_GetSysClockFreq+0x114>)
 8005cc6:	617b      	str	r3, [r7, #20]
      break;
 8005cc8:	e002      	b.n	8005cd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	617b      	str	r3, [r7, #20]
      break;
 8005cce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cd0:	4b13      	ldr	r3, [pc, #76]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	091b      	lsrs	r3, r3, #4
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	3301      	adds	r3, #1
 8005cdc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005cde:	4b10      	ldr	r3, [pc, #64]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	0a1b      	lsrs	r3, r3, #8
 8005ce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	fb03 f202 	mul.w	r2, r3, r2
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	0e5b      	lsrs	r3, r3, #25
 8005cfc:	f003 0303 	and.w	r3, r3, #3
 8005d00:	3301      	adds	r3, #1
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d10:	69bb      	ldr	r3, [r7, #24]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3724      	adds	r7, #36	@ 0x24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	40021000 	.word	0x40021000
 8005d24:	0800c000 	.word	0x0800c000
 8005d28:	00f42400 	.word	0x00f42400
 8005d2c:	007a1200 	.word	0x007a1200

08005d30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d34:	4b03      	ldr	r3, [pc, #12]	@ (8005d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d36:	681b      	ldr	r3, [r3, #0]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	20000008 	.word	0x20000008

08005d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d4c:	f7ff fff0 	bl	8005d30 <HAL_RCC_GetHCLKFreq>
 8005d50:	4602      	mov	r2, r0
 8005d52:	4b06      	ldr	r3, [pc, #24]	@ (8005d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	0a1b      	lsrs	r3, r3, #8
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	4904      	ldr	r1, [pc, #16]	@ (8005d70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d5e:	5ccb      	ldrb	r3, [r1, r3]
 8005d60:	f003 031f 	and.w	r3, r3, #31
 8005d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40021000 	.word	0x40021000
 8005d70:	0800bff8 	.word	0x0800bff8

08005d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d78:	f7ff ffda 	bl	8005d30 <HAL_RCC_GetHCLKFreq>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	4b06      	ldr	r3, [pc, #24]	@ (8005d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	0adb      	lsrs	r3, r3, #11
 8005d84:	f003 0307 	and.w	r3, r3, #7
 8005d88:	4904      	ldr	r1, [pc, #16]	@ (8005d9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d8a:	5ccb      	ldrb	r3, [r1, r3]
 8005d8c:	f003 031f 	and.w	r3, r3, #31
 8005d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	40021000 	.word	0x40021000
 8005d9c:	0800bff8 	.word	0x0800bff8

08005da0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	220f      	movs	r2, #15
 8005dae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005db0:	4b12      	ldr	r3, [pc, #72]	@ (8005dfc <HAL_RCC_GetClockConfig+0x5c>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f003 0203 	and.w	r2, r3, #3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8005dfc <HAL_RCC_GetClockConfig+0x5c>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8005dfc <HAL_RCC_GetClockConfig+0x5c>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005dd4:	4b09      	ldr	r3, [pc, #36]	@ (8005dfc <HAL_RCC_GetClockConfig+0x5c>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	08db      	lsrs	r3, r3, #3
 8005dda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005de2:	4b07      	ldr	r3, [pc, #28]	@ (8005e00 <HAL_RCC_GetClockConfig+0x60>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0207 	and.w	r2, r3, #7
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	601a      	str	r2, [r3, #0]
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	40021000 	.word	0x40021000
 8005e00:	40022000 	.word	0x40022000

08005e04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e10:	4b2a      	ldr	r3, [pc, #168]	@ (8005ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e1c:	f7ff f8f0 	bl	8005000 <HAL_PWREx_GetVoltageRange>
 8005e20:	6178      	str	r0, [r7, #20]
 8005e22:	e014      	b.n	8005e4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e24:	4b25      	ldr	r3, [pc, #148]	@ (8005ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e28:	4a24      	ldr	r2, [pc, #144]	@ (8005ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e30:	4b22      	ldr	r3, [pc, #136]	@ (8005ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e38:	60fb      	str	r3, [r7, #12]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e3c:	f7ff f8e0 	bl	8005000 <HAL_PWREx_GetVoltageRange>
 8005e40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e42:	4b1e      	ldr	r3, [pc, #120]	@ (8005ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e46:	4a1d      	ldr	r2, [pc, #116]	@ (8005ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e54:	d10b      	bne.n	8005e6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b80      	cmp	r3, #128	@ 0x80
 8005e5a:	d919      	bls.n	8005e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005e60:	d902      	bls.n	8005e68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e62:	2302      	movs	r3, #2
 8005e64:	613b      	str	r3, [r7, #16]
 8005e66:	e013      	b.n	8005e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e68:	2301      	movs	r3, #1
 8005e6a:	613b      	str	r3, [r7, #16]
 8005e6c:	e010      	b.n	8005e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b80      	cmp	r3, #128	@ 0x80
 8005e72:	d902      	bls.n	8005e7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005e74:	2303      	movs	r3, #3
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	e00a      	b.n	8005e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b80      	cmp	r3, #128	@ 0x80
 8005e7e:	d102      	bne.n	8005e86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e80:	2302      	movs	r3, #2
 8005e82:	613b      	str	r3, [r7, #16]
 8005e84:	e004      	b.n	8005e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b70      	cmp	r3, #112	@ 0x70
 8005e8a:	d101      	bne.n	8005e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e90:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f023 0207 	bic.w	r2, r3, #7
 8005e98:	4909      	ldr	r1, [pc, #36]	@ (8005ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005ea0:	4b07      	ldr	r3, [pc, #28]	@ (8005ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d001      	beq.n	8005eb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e000      	b.n	8005eb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	40021000 	.word	0x40021000
 8005ec0:	40022000 	.word	0x40022000

08005ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ecc:	2300      	movs	r3, #0
 8005ece:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d041      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ee4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005ee8:	d02a      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005eea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005eee:	d824      	bhi.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ef0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ef4:	d008      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ef6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005efa:	d81e      	bhi.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00a      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005f00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f04:	d010      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f06:	e018      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f08:	4b86      	ldr	r3, [pc, #536]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	4a85      	ldr	r2, [pc, #532]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f12:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f14:	e015      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3304      	adds	r3, #4
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 facb 	bl	80064b8 <RCCEx_PLLSAI1_Config>
 8005f22:	4603      	mov	r3, r0
 8005f24:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f26:	e00c      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3320      	adds	r3, #32
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fbb6 	bl	80066a0 <RCCEx_PLLSAI2_Config>
 8005f34:	4603      	mov	r3, r0
 8005f36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f38:	e003      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	74fb      	strb	r3, [r7, #19]
      break;
 8005f3e:	e000      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f42:	7cfb      	ldrb	r3, [r7, #19]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10b      	bne.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f48:	4b76      	ldr	r3, [pc, #472]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f4e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f56:	4973      	ldr	r1, [pc, #460]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005f5e:	e001      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f60:	7cfb      	ldrb	r3, [r7, #19]
 8005f62:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d041      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f74:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f78:	d02a      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005f7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f7e:	d824      	bhi.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005f80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f84:	d008      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005f86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f8a:	d81e      	bhi.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00a      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f94:	d010      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005f96:	e018      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f98:	4b62      	ldr	r3, [pc, #392]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	4a61      	ldr	r2, [pc, #388]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fa2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fa4:	e015      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	2100      	movs	r1, #0
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 fa83 	bl	80064b8 <RCCEx_PLLSAI1_Config>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fb6:	e00c      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	3320      	adds	r3, #32
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fb6e 	bl	80066a0 <RCCEx_PLLSAI2_Config>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fc8:	e003      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	74fb      	strb	r3, [r7, #19]
      break;
 8005fce:	e000      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fd2:	7cfb      	ldrb	r3, [r7, #19]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10b      	bne.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005fd8:	4b52      	ldr	r3, [pc, #328]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fde:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fe6:	494f      	ldr	r1, [pc, #316]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005fee:	e001      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff0:	7cfb      	ldrb	r3, [r7, #19]
 8005ff2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 80a0 	beq.w	8006142 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006002:	2300      	movs	r3, #0
 8006004:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006006:	4b47      	ldr	r3, [pc, #284]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800600a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006012:	2301      	movs	r3, #1
 8006014:	e000      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006016:	2300      	movs	r3, #0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00d      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800601c:	4b41      	ldr	r3, [pc, #260]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800601e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006020:	4a40      	ldr	r2, [pc, #256]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006026:	6593      	str	r3, [r2, #88]	@ 0x58
 8006028:	4b3e      	ldr	r3, [pc, #248]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800602a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800602c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006030:	60bb      	str	r3, [r7, #8]
 8006032:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006034:	2301      	movs	r3, #1
 8006036:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006038:	4b3b      	ldr	r3, [pc, #236]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a3a      	ldr	r2, [pc, #232]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800603e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006042:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006044:	f7fd fb0c 	bl	8003660 <HAL_GetTick>
 8006048:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800604a:	e009      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800604c:	f7fd fb08 	bl	8003660 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d902      	bls.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	74fb      	strb	r3, [r7, #19]
        break;
 800605e:	e005      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006060:	4b31      	ldr	r3, [pc, #196]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006068:	2b00      	cmp	r3, #0
 800606a:	d0ef      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800606c:	7cfb      	ldrb	r3, [r7, #19]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d15c      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006072:	4b2c      	ldr	r3, [pc, #176]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006078:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800607c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01f      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	429a      	cmp	r2, r3
 800608e:	d019      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006090:	4b24      	ldr	r3, [pc, #144]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800609a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800609c:	4b21      	ldr	r3, [pc, #132]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800609e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060a2:	4a20      	ldr	r2, [pc, #128]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060bc:	4a19      	ldr	r2, [pc, #100]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d016      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ce:	f7fd fac7 	bl	8003660 <HAL_GetTick>
 80060d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060d4:	e00b      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060d6:	f7fd fac3 	bl	8003660 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d902      	bls.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	74fb      	strb	r3, [r7, #19]
            break;
 80060ec:	e006      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0ec      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80060fc:	7cfb      	ldrb	r3, [r7, #19]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10c      	bne.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006102:	4b08      	ldr	r3, [pc, #32]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006108:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006112:	4904      	ldr	r1, [pc, #16]	@ (8006124 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006114:	4313      	orrs	r3, r2
 8006116:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800611a:	e009      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800611c:	7cfb      	ldrb	r3, [r7, #19]
 800611e:	74bb      	strb	r3, [r7, #18]
 8006120:	e006      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006122:	bf00      	nop
 8006124:	40021000 	.word	0x40021000
 8006128:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612c:	7cfb      	ldrb	r3, [r7, #19]
 800612e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006130:	7c7b      	ldrb	r3, [r7, #17]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d105      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006136:	4b9e      	ldr	r3, [pc, #632]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800613a:	4a9d      	ldr	r2, [pc, #628]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800613c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006140:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800614e:	4b98      	ldr	r3, [pc, #608]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006154:	f023 0203 	bic.w	r2, r3, #3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615c:	4994      	ldr	r1, [pc, #592]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800615e:	4313      	orrs	r3, r2
 8006160:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00a      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006170:	4b8f      	ldr	r3, [pc, #572]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006176:	f023 020c 	bic.w	r2, r3, #12
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800617e:	498c      	ldr	r1, [pc, #560]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006180:	4313      	orrs	r3, r2
 8006182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0304 	and.w	r3, r3, #4
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006192:	4b87      	ldr	r3, [pc, #540]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006198:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a0:	4983      	ldr	r1, [pc, #524]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0308 	and.w	r3, r3, #8
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00a      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061b4:	4b7e      	ldr	r3, [pc, #504]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c2:	497b      	ldr	r1, [pc, #492]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061d6:	4b76      	ldr	r3, [pc, #472]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061e4:	4972      	ldr	r1, [pc, #456]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0320 	and.w	r3, r3, #32
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00a      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061f8:	4b6d      	ldr	r3, [pc, #436]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006206:	496a      	ldr	r1, [pc, #424]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006208:	4313      	orrs	r3, r2
 800620a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800621a:	4b65      	ldr	r3, [pc, #404]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800621c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006220:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006228:	4961      	ldr	r1, [pc, #388]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800622a:	4313      	orrs	r3, r2
 800622c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00a      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800623c:	4b5c      	ldr	r3, [pc, #368]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800623e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006242:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800624a:	4959      	ldr	r1, [pc, #356]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800624c:	4313      	orrs	r3, r2
 800624e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00a      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800625e:	4b54      	ldr	r3, [pc, #336]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006264:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800626c:	4950      	ldr	r1, [pc, #320]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800626e:	4313      	orrs	r3, r2
 8006270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00a      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006280:	4b4b      	ldr	r3, [pc, #300]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006286:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800628e:	4948      	ldr	r1, [pc, #288]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006290:	4313      	orrs	r3, r2
 8006292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062a2:	4b43      	ldr	r3, [pc, #268]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062b0:	493f      	ldr	r1, [pc, #252]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d028      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062c4:	4b3a      	ldr	r3, [pc, #232]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062d2:	4937      	ldr	r1, [pc, #220]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062e2:	d106      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062e4:	4b32      	ldr	r3, [pc, #200]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	4a31      	ldr	r2, [pc, #196]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062ee:	60d3      	str	r3, [r2, #12]
 80062f0:	e011      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062fa:	d10c      	bne.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3304      	adds	r3, #4
 8006300:	2101      	movs	r1, #1
 8006302:	4618      	mov	r0, r3
 8006304:	f000 f8d8 	bl	80064b8 <RCCEx_PLLSAI1_Config>
 8006308:	4603      	mov	r3, r0
 800630a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800630c:	7cfb      	ldrb	r3, [r7, #19]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006312:	7cfb      	ldrb	r3, [r7, #19]
 8006314:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d028      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006322:	4b23      	ldr	r3, [pc, #140]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006328:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006330:	491f      	ldr	r1, [pc, #124]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800633c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006340:	d106      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006342:	4b1b      	ldr	r3, [pc, #108]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	4a1a      	ldr	r2, [pc, #104]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006348:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800634c:	60d3      	str	r3, [r2, #12]
 800634e:	e011      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006354:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006358:	d10c      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	3304      	adds	r3, #4
 800635e:	2101      	movs	r1, #1
 8006360:	4618      	mov	r0, r3
 8006362:	f000 f8a9 	bl	80064b8 <RCCEx_PLLSAI1_Config>
 8006366:	4603      	mov	r3, r0
 8006368:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800636a:	7cfb      	ldrb	r3, [r7, #19]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006370:	7cfb      	ldrb	r3, [r7, #19]
 8006372:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d02b      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006380:	4b0b      	ldr	r3, [pc, #44]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006386:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800638e:	4908      	ldr	r1, [pc, #32]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006390:	4313      	orrs	r3, r2
 8006392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800639a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800639e:	d109      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063a0:	4b03      	ldr	r3, [pc, #12]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	4a02      	ldr	r2, [pc, #8]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063aa:	60d3      	str	r3, [r2, #12]
 80063ac:	e014      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80063ae:	bf00      	nop
 80063b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063bc:	d10c      	bne.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3304      	adds	r3, #4
 80063c2:	2101      	movs	r1, #1
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 f877 	bl	80064b8 <RCCEx_PLLSAI1_Config>
 80063ca:	4603      	mov	r3, r0
 80063cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063ce:	7cfb      	ldrb	r3, [r7, #19]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80063d4:	7cfb      	ldrb	r3, [r7, #19]
 80063d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d02f      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006494 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063f2:	4928      	ldr	r1, [pc, #160]	@ (8006494 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006402:	d10d      	bne.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3304      	adds	r3, #4
 8006408:	2102      	movs	r1, #2
 800640a:	4618      	mov	r0, r3
 800640c:	f000 f854 	bl	80064b8 <RCCEx_PLLSAI1_Config>
 8006410:	4603      	mov	r3, r0
 8006412:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006414:	7cfb      	ldrb	r3, [r7, #19]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d014      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800641a:	7cfb      	ldrb	r3, [r7, #19]
 800641c:	74bb      	strb	r3, [r7, #18]
 800641e:	e011      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006424:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006428:	d10c      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	3320      	adds	r3, #32
 800642e:	2102      	movs	r1, #2
 8006430:	4618      	mov	r0, r3
 8006432:	f000 f935 	bl	80066a0 <RCCEx_PLLSAI2_Config>
 8006436:	4603      	mov	r3, r0
 8006438:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800643a:	7cfb      	ldrb	r3, [r7, #19]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006440:	7cfb      	ldrb	r3, [r7, #19]
 8006442:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00a      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006450:	4b10      	ldr	r3, [pc, #64]	@ (8006494 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006456:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800645e:	490d      	ldr	r1, [pc, #52]	@ (8006494 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006460:	4313      	orrs	r3, r2
 8006462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00b      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006472:	4b08      	ldr	r3, [pc, #32]	@ (8006494 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006478:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006482:	4904      	ldr	r1, [pc, #16]	@ (8006494 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006484:	4313      	orrs	r3, r2
 8006486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800648a:	7cbb      	ldrb	r3, [r7, #18]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	40021000 	.word	0x40021000

08006498 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006498:	b480      	push	{r7}
 800649a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800649c:	4b05      	ldr	r3, [pc, #20]	@ (80064b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a04      	ldr	r2, [pc, #16]	@ (80064b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80064a2:	f043 0304 	orr.w	r3, r3, #4
 80064a6:	6013      	str	r3, [r2, #0]
}
 80064a8:	bf00      	nop
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40021000 	.word	0x40021000

080064b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064c6:	4b75      	ldr	r3, [pc, #468]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d018      	beq.n	8006504 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80064d2:	4b72      	ldr	r3, [pc, #456]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f003 0203 	and.w	r2, r3, #3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d10d      	bne.n	80064fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
       ||
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d009      	beq.n	80064fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80064ea:	4b6c      	ldr	r3, [pc, #432]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	091b      	lsrs	r3, r3, #4
 80064f0:	f003 0307 	and.w	r3, r3, #7
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
       ||
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d047      	beq.n	800658e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	73fb      	strb	r3, [r7, #15]
 8006502:	e044      	b.n	800658e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b03      	cmp	r3, #3
 800650a:	d018      	beq.n	800653e <RCCEx_PLLSAI1_Config+0x86>
 800650c:	2b03      	cmp	r3, #3
 800650e:	d825      	bhi.n	800655c <RCCEx_PLLSAI1_Config+0xa4>
 8006510:	2b01      	cmp	r3, #1
 8006512:	d002      	beq.n	800651a <RCCEx_PLLSAI1_Config+0x62>
 8006514:	2b02      	cmp	r3, #2
 8006516:	d009      	beq.n	800652c <RCCEx_PLLSAI1_Config+0x74>
 8006518:	e020      	b.n	800655c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800651a:	4b60      	ldr	r3, [pc, #384]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d11d      	bne.n	8006562 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800652a:	e01a      	b.n	8006562 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800652c:	4b5b      	ldr	r3, [pc, #364]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006534:	2b00      	cmp	r3, #0
 8006536:	d116      	bne.n	8006566 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800653c:	e013      	b.n	8006566 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800653e:	4b57      	ldr	r3, [pc, #348]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10f      	bne.n	800656a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800654a:	4b54      	ldr	r3, [pc, #336]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d109      	bne.n	800656a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800655a:	e006      	b.n	800656a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	73fb      	strb	r3, [r7, #15]
      break;
 8006560:	e004      	b.n	800656c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006562:	bf00      	nop
 8006564:	e002      	b.n	800656c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006566:	bf00      	nop
 8006568:	e000      	b.n	800656c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800656a:	bf00      	nop
    }

    if(status == HAL_OK)
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10d      	bne.n	800658e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006572:	4b4a      	ldr	r3, [pc, #296]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6819      	ldr	r1, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	3b01      	subs	r3, #1
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	430b      	orrs	r3, r1
 8006588:	4944      	ldr	r1, [pc, #272]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 800658a:	4313      	orrs	r3, r2
 800658c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800658e:	7bfb      	ldrb	r3, [r7, #15]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d17d      	bne.n	8006690 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006594:	4b41      	ldr	r3, [pc, #260]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a40      	ldr	r2, [pc, #256]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 800659a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800659e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065a0:	f7fd f85e 	bl	8003660 <HAL_GetTick>
 80065a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065a6:	e009      	b.n	80065bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065a8:	f7fd f85a 	bl	8003660 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d902      	bls.n	80065bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	73fb      	strb	r3, [r7, #15]
        break;
 80065ba:	e005      	b.n	80065c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065bc:	4b37      	ldr	r3, [pc, #220]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1ef      	bne.n	80065a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d160      	bne.n	8006690 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d111      	bne.n	80065f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065d4:	4b31      	ldr	r3, [pc, #196]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80065dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6892      	ldr	r2, [r2, #8]
 80065e4:	0211      	lsls	r1, r2, #8
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	68d2      	ldr	r2, [r2, #12]
 80065ea:	0912      	lsrs	r2, r2, #4
 80065ec:	0452      	lsls	r2, r2, #17
 80065ee:	430a      	orrs	r2, r1
 80065f0:	492a      	ldr	r1, [pc, #168]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	610b      	str	r3, [r1, #16]
 80065f6:	e027      	b.n	8006648 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d112      	bne.n	8006624 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065fe:	4b27      	ldr	r3, [pc, #156]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006606:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	6892      	ldr	r2, [r2, #8]
 800660e:	0211      	lsls	r1, r2, #8
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6912      	ldr	r2, [r2, #16]
 8006614:	0852      	lsrs	r2, r2, #1
 8006616:	3a01      	subs	r2, #1
 8006618:	0552      	lsls	r2, r2, #21
 800661a:	430a      	orrs	r2, r1
 800661c:	491f      	ldr	r1, [pc, #124]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 800661e:	4313      	orrs	r3, r2
 8006620:	610b      	str	r3, [r1, #16]
 8006622:	e011      	b.n	8006648 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006624:	4b1d      	ldr	r3, [pc, #116]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800662c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	6892      	ldr	r2, [r2, #8]
 8006634:	0211      	lsls	r1, r2, #8
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	6952      	ldr	r2, [r2, #20]
 800663a:	0852      	lsrs	r2, r2, #1
 800663c:	3a01      	subs	r2, #1
 800663e:	0652      	lsls	r2, r2, #25
 8006640:	430a      	orrs	r2, r1
 8006642:	4916      	ldr	r1, [pc, #88]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006644:	4313      	orrs	r3, r2
 8006646:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006648:	4b14      	ldr	r3, [pc, #80]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a13      	ldr	r2, [pc, #76]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 800664e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006652:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006654:	f7fd f804 	bl	8003660 <HAL_GetTick>
 8006658:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800665a:	e009      	b.n	8006670 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800665c:	f7fd f800 	bl	8003660 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d902      	bls.n	8006670 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	73fb      	strb	r3, [r7, #15]
          break;
 800666e:	e005      	b.n	800667c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006670:	4b0a      	ldr	r3, [pc, #40]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0ef      	beq.n	800665c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d106      	bne.n	8006690 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006682:	4b06      	ldr	r3, [pc, #24]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006684:	691a      	ldr	r2, [r3, #16]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	4904      	ldr	r1, [pc, #16]	@ (800669c <RCCEx_PLLSAI1_Config+0x1e4>)
 800668c:	4313      	orrs	r3, r2
 800668e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006690:	7bfb      	ldrb	r3, [r7, #15]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	40021000 	.word	0x40021000

080066a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80066ae:	4b6a      	ldr	r3, [pc, #424]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d018      	beq.n	80066ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80066ba:	4b67      	ldr	r3, [pc, #412]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f003 0203 	and.w	r2, r3, #3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d10d      	bne.n	80066e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
       ||
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80066d2:	4b61      	ldr	r3, [pc, #388]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	091b      	lsrs	r3, r3, #4
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
       ||
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d047      	beq.n	8006776 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	73fb      	strb	r3, [r7, #15]
 80066ea:	e044      	b.n	8006776 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d018      	beq.n	8006726 <RCCEx_PLLSAI2_Config+0x86>
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d825      	bhi.n	8006744 <RCCEx_PLLSAI2_Config+0xa4>
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d002      	beq.n	8006702 <RCCEx_PLLSAI2_Config+0x62>
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d009      	beq.n	8006714 <RCCEx_PLLSAI2_Config+0x74>
 8006700:	e020      	b.n	8006744 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006702:	4b55      	ldr	r3, [pc, #340]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d11d      	bne.n	800674a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006712:	e01a      	b.n	800674a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006714:	4b50      	ldr	r3, [pc, #320]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800671c:	2b00      	cmp	r3, #0
 800671e:	d116      	bne.n	800674e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006724:	e013      	b.n	800674e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006726:	4b4c      	ldr	r3, [pc, #304]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10f      	bne.n	8006752 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006732:	4b49      	ldr	r3, [pc, #292]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d109      	bne.n	8006752 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006742:	e006      	b.n	8006752 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	73fb      	strb	r3, [r7, #15]
      break;
 8006748:	e004      	b.n	8006754 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800674a:	bf00      	nop
 800674c:	e002      	b.n	8006754 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800674e:	bf00      	nop
 8006750:	e000      	b.n	8006754 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006752:	bf00      	nop
    }

    if(status == HAL_OK)
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10d      	bne.n	8006776 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800675a:	4b3f      	ldr	r3, [pc, #252]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6819      	ldr	r1, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	3b01      	subs	r3, #1
 800676c:	011b      	lsls	r3, r3, #4
 800676e:	430b      	orrs	r3, r1
 8006770:	4939      	ldr	r1, [pc, #228]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006772:	4313      	orrs	r3, r2
 8006774:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006776:	7bfb      	ldrb	r3, [r7, #15]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d167      	bne.n	800684c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800677c:	4b36      	ldr	r3, [pc, #216]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a35      	ldr	r2, [pc, #212]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006782:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006788:	f7fc ff6a 	bl	8003660 <HAL_GetTick>
 800678c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800678e:	e009      	b.n	80067a4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006790:	f7fc ff66 	bl	8003660 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b02      	cmp	r3, #2
 800679c:	d902      	bls.n	80067a4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	73fb      	strb	r3, [r7, #15]
        break;
 80067a2:	e005      	b.n	80067b0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80067a4:	4b2c      	ldr	r3, [pc, #176]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1ef      	bne.n	8006790 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d14a      	bne.n	800684c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d111      	bne.n	80067e0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80067bc:	4b26      	ldr	r3, [pc, #152]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80067c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	6892      	ldr	r2, [r2, #8]
 80067cc:	0211      	lsls	r1, r2, #8
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	68d2      	ldr	r2, [r2, #12]
 80067d2:	0912      	lsrs	r2, r2, #4
 80067d4:	0452      	lsls	r2, r2, #17
 80067d6:	430a      	orrs	r2, r1
 80067d8:	491f      	ldr	r1, [pc, #124]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	614b      	str	r3, [r1, #20]
 80067de:	e011      	b.n	8006804 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80067e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80067e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6892      	ldr	r2, [r2, #8]
 80067f0:	0211      	lsls	r1, r2, #8
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6912      	ldr	r2, [r2, #16]
 80067f6:	0852      	lsrs	r2, r2, #1
 80067f8:	3a01      	subs	r2, #1
 80067fa:	0652      	lsls	r2, r2, #25
 80067fc:	430a      	orrs	r2, r1
 80067fe:	4916      	ldr	r1, [pc, #88]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006800:	4313      	orrs	r3, r2
 8006802:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006804:	4b14      	ldr	r3, [pc, #80]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a13      	ldr	r2, [pc, #76]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 800680a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800680e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006810:	f7fc ff26 	bl	8003660 <HAL_GetTick>
 8006814:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006816:	e009      	b.n	800682c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006818:	f7fc ff22 	bl	8003660 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d902      	bls.n	800682c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	73fb      	strb	r3, [r7, #15]
          break;
 800682a:	e005      	b.n	8006838 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800682c:	4b0a      	ldr	r3, [pc, #40]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d0ef      	beq.n	8006818 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d106      	bne.n	800684c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800683e:	4b06      	ldr	r3, [pc, #24]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006840:	695a      	ldr	r2, [r3, #20]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	4904      	ldr	r1, [pc, #16]	@ (8006858 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006848:	4313      	orrs	r3, r2
 800684a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	40021000 	.word	0x40021000

0800685c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e095      	b.n	800699a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006872:	2b00      	cmp	r3, #0
 8006874:	d108      	bne.n	8006888 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800687e:	d009      	beq.n	8006894 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	61da      	str	r2, [r3, #28]
 8006886:	e005      	b.n	8006894 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d106      	bne.n	80068b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f877 	bl	80069a2 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068d4:	d902      	bls.n	80068dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	e002      	b.n	80068e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80068dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80068e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80068ea:	d007      	beq.n	80068fc <HAL_SPI_Init+0xa0>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068f4:	d002      	beq.n	80068fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	431a      	orrs	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800692a:	431a      	orrs	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	69db      	ldr	r3, [r3, #28]
 8006930:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800693e:	ea42 0103 	orr.w	r1, r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006946:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	0c1b      	lsrs	r3, r3, #16
 8006958:	f003 0204 	and.w	r2, r3, #4
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	431a      	orrs	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	431a      	orrs	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006978:	ea42 0103 	orr.w	r1, r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b083      	sub	sp, #12
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b08a      	sub	sp, #40	@ 0x28
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	60f8      	str	r0, [r7, #12]
 80069be:	60b9      	str	r1, [r7, #8]
 80069c0:	607a      	str	r2, [r7, #4]
 80069c2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80069c4:	2301      	movs	r3, #1
 80069c6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069c8:	f7fc fe4a 	bl	8003660 <HAL_GetTick>
 80069cc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80069d4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80069dc:	887b      	ldrh	r3, [r7, #2]
 80069de:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80069e0:	887b      	ldrh	r3, [r7, #2]
 80069e2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80069e4:	7ffb      	ldrb	r3, [r7, #31]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d00c      	beq.n	8006a04 <HAL_SPI_TransmitReceive+0x4e>
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069f0:	d106      	bne.n	8006a00 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d102      	bne.n	8006a00 <HAL_SPI_TransmitReceive+0x4a>
 80069fa:	7ffb      	ldrb	r3, [r7, #31]
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	d001      	beq.n	8006a04 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006a00:	2302      	movs	r3, #2
 8006a02:	e1f3      	b.n	8006dec <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d005      	beq.n	8006a16 <HAL_SPI_TransmitReceive+0x60>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <HAL_SPI_TransmitReceive+0x60>
 8006a10:	887b      	ldrh	r3, [r7, #2]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e1e8      	b.n	8006dec <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d101      	bne.n	8006a28 <HAL_SPI_TransmitReceive+0x72>
 8006a24:	2302      	movs	r3, #2
 8006a26:	e1e1      	b.n	8006dec <HAL_SPI_TransmitReceive+0x436>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b04      	cmp	r3, #4
 8006a3a:	d003      	beq.n	8006a44 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2205      	movs	r2, #5
 8006a40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	887a      	ldrh	r2, [r7, #2]
 8006a54:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	887a      	ldrh	r2, [r7, #2]
 8006a5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	887a      	ldrh	r2, [r7, #2]
 8006a6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	887a      	ldrh	r2, [r7, #2]
 8006a70:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006a86:	d802      	bhi.n	8006a8e <HAL_SPI_TransmitReceive+0xd8>
 8006a88:	8abb      	ldrh	r3, [r7, #20]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d908      	bls.n	8006aa0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006a9c:	605a      	str	r2, [r3, #4]
 8006a9e:	e007      	b.n	8006ab0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006aae:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aba:	2b40      	cmp	r3, #64	@ 0x40
 8006abc:	d007      	beq.n	8006ace <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006acc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ad6:	f240 8083 	bls.w	8006be0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d002      	beq.n	8006ae8 <HAL_SPI_TransmitReceive+0x132>
 8006ae2:	8afb      	ldrh	r3, [r7, #22]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d16f      	bne.n	8006bc8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aec:	881a      	ldrh	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af8:	1c9a      	adds	r2, r3, #2
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	3b01      	subs	r3, #1
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b0c:	e05c      	b.n	8006bc8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d11b      	bne.n	8006b54 <HAL_SPI_TransmitReceive+0x19e>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d016      	beq.n	8006b54 <HAL_SPI_TransmitReceive+0x19e>
 8006b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d113      	bne.n	8006b54 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b30:	881a      	ldrh	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3c:	1c9a      	adds	r2, r3, #2
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d11c      	bne.n	8006b9c <HAL_SPI_TransmitReceive+0x1e6>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d016      	beq.n	8006b9c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b78:	b292      	uxth	r2, r2
 8006b7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b80:	1c9a      	adds	r2, r3, #2
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b9c:	f7fc fd60 	bl	8003660 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d80d      	bhi.n	8006bc8 <HAL_SPI_TransmitReceive+0x212>
 8006bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb2:	d009      	beq.n	8006bc8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e111      	b.n	8006dec <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d19d      	bne.n	8006b0e <HAL_SPI_TransmitReceive+0x158>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d197      	bne.n	8006b0e <HAL_SPI_TransmitReceive+0x158>
 8006bde:	e0e5      	b.n	8006dac <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d003      	beq.n	8006bf0 <HAL_SPI_TransmitReceive+0x23a>
 8006be8:	8afb      	ldrh	r3, [r7, #22]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	f040 80d1 	bne.w	8006d92 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d912      	bls.n	8006c20 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bfe:	881a      	ldrh	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0a:	1c9a      	adds	r2, r3, #2
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	3b02      	subs	r3, #2
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c1e:	e0b8      	b.n	8006d92 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	330c      	adds	r3, #12
 8006c2a:	7812      	ldrb	r2, [r2, #0]
 8006c2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c32:	1c5a      	adds	r2, r3, #1
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c46:	e0a4      	b.n	8006d92 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f003 0302 	and.w	r3, r3, #2
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d134      	bne.n	8006cc0 <HAL_SPI_TransmitReceive+0x30a>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d02f      	beq.n	8006cc0 <HAL_SPI_TransmitReceive+0x30a>
 8006c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d12c      	bne.n	8006cc0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d912      	bls.n	8006c96 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c74:	881a      	ldrh	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c80:	1c9a      	adds	r2, r3, #2
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	3b02      	subs	r3, #2
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c94:	e012      	b.n	8006cbc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	330c      	adds	r3, #12
 8006ca0:	7812      	ldrb	r2, [r2, #0]
 8006ca2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d148      	bne.n	8006d60 <HAL_SPI_TransmitReceive+0x3aa>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d042      	beq.n	8006d60 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d923      	bls.n	8006d2e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf0:	b292      	uxth	r2, r2
 8006cf2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf8:	1c9a      	adds	r2, r3, #2
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	3b02      	subs	r3, #2
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d81f      	bhi.n	8006d5c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006d2a:	605a      	str	r2, [r3, #4]
 8006d2c:	e016      	b.n	8006d5c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f103 020c 	add.w	r2, r3, #12
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3a:	7812      	ldrb	r2, [r2, #0]
 8006d3c:	b2d2      	uxtb	r2, r2
 8006d3e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	3b01      	subs	r3, #1
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d60:	f7fc fc7e 	bl	8003660 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d803      	bhi.n	8006d78 <HAL_SPI_TransmitReceive+0x3c2>
 8006d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d76:	d102      	bne.n	8006d7e <HAL_SPI_TransmitReceive+0x3c8>
 8006d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d109      	bne.n	8006d92 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e02c      	b.n	8006dec <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f47f af55 	bne.w	8006c48 <HAL_SPI_TransmitReceive+0x292>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f47f af4e 	bne.w	8006c48 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dac:	6a3a      	ldr	r2, [r7, #32]
 8006dae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 f94b 	bl	800704c <SPI_EndRxTxTransaction>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d008      	beq.n	8006dce <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e00e      	b.n	8006dec <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e000      	b.n	8006dec <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006dea:	2300      	movs	r3, #0
  }
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3728      	adds	r7, #40	@ 0x28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e02:	b2db      	uxtb	r3, r3
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e20:	f7fc fc1e 	bl	8003660 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e28:	1a9b      	subs	r3, r3, r2
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e30:	f7fc fc16 	bl	8003660 <HAL_GetTick>
 8006e34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e36:	4b39      	ldr	r3, [pc, #228]	@ (8006f1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	015b      	lsls	r3, r3, #5
 8006e3c:	0d1b      	lsrs	r3, r3, #20
 8006e3e:	69fa      	ldr	r2, [r7, #28]
 8006e40:	fb02 f303 	mul.w	r3, r2, r3
 8006e44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e46:	e054      	b.n	8006ef2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4e:	d050      	beq.n	8006ef2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e50:	f7fc fc06 	bl	8003660 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	69fa      	ldr	r2, [r7, #28]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d902      	bls.n	8006e66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d13d      	bne.n	8006ee2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006e74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e7e:	d111      	bne.n	8006ea4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e88:	d004      	beq.n	8006e94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e92:	d107      	bne.n	8006ea4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ea2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eac:	d10f      	bne.n	8006ece <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ecc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e017      	b.n	8006f12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	4013      	ands	r3, r2
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	bf0c      	ite	eq
 8006f02:	2301      	moveq	r3, #1
 8006f04:	2300      	movne	r3, #0
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	461a      	mov	r2, r3
 8006f0a:	79fb      	ldrb	r3, [r7, #7]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d19b      	bne.n	8006e48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3720      	adds	r7, #32
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	20000008 	.word	0x20000008

08006f20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b08a      	sub	sp, #40	@ 0x28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006f32:	f7fc fb95 	bl	8003660 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3a:	1a9b      	subs	r3, r3, r2
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	4413      	add	r3, r2
 8006f40:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006f42:	f7fc fb8d 	bl	8003660 <HAL_GetTick>
 8006f46:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	330c      	adds	r3, #12
 8006f4e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006f50:	4b3d      	ldr	r3, [pc, #244]	@ (8007048 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	4613      	mov	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	00da      	lsls	r2, r3, #3
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	0d1b      	lsrs	r3, r3, #20
 8006f60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f62:	fb02 f303 	mul.w	r3, r2, r3
 8006f66:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006f68:	e060      	b.n	800702c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006f70:	d107      	bne.n	8006f82 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d104      	bne.n	8006f82 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006f80:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f88:	d050      	beq.n	800702c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f8a:	f7fc fb69 	bl	8003660 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d902      	bls.n	8006fa0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d13d      	bne.n	800701c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006fae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fb8:	d111      	bne.n	8006fde <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fc2:	d004      	beq.n	8006fce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fcc:	d107      	bne.n	8006fde <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fdc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fe6:	d10f      	bne.n	8007008 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007006:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e010      	b.n	800703e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007022:	2300      	movs	r3, #0
 8007024:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	3b01      	subs	r3, #1
 800702a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689a      	ldr	r2, [r3, #8]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	4013      	ands	r3, r2
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	429a      	cmp	r2, r3
 800703a:	d196      	bne.n	8006f6a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3728      	adds	r7, #40	@ 0x28
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20000008 	.word	0x20000008

0800704c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af02      	add	r7, sp, #8
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2200      	movs	r2, #0
 8007060:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f7ff ff5b 	bl	8006f20 <SPI_WaitFifoStateUntilTimeout>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d007      	beq.n	8007080 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007074:	f043 0220 	orr.w	r2, r3, #32
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e027      	b.n	80070d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2200      	movs	r2, #0
 8007088:	2180      	movs	r1, #128	@ 0x80
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f7ff fec0 	bl	8006e10 <SPI_WaitFlagStateUntilTimeout>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d007      	beq.n	80070a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800709a:	f043 0220 	orr.w	r2, r3, #32
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e014      	b.n	80070d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f7ff ff34 	bl	8006f20 <SPI_WaitFifoStateUntilTimeout>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d007      	beq.n	80070ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070c2:	f043 0220 	orr.w	r2, r3, #32
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e000      	b.n	80070d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e049      	b.n	800717e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d106      	bne.n	8007104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f841 	bl	8007186 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2202      	movs	r2, #2
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3304      	adds	r3, #4
 8007114:	4619      	mov	r1, r3
 8007116:	4610      	mov	r0, r2
 8007118:	f000 f9e0 	bl	80074dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800718e:	bf00      	nop
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
	...

0800719c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d001      	beq.n	80071b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e04f      	b.n	8007254 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f042 0201 	orr.w	r2, r2, #1
 80071ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a23      	ldr	r2, [pc, #140]	@ (8007260 <HAL_TIM_Base_Start_IT+0xc4>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d01d      	beq.n	8007212 <HAL_TIM_Base_Start_IT+0x76>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071de:	d018      	beq.n	8007212 <HAL_TIM_Base_Start_IT+0x76>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a1f      	ldr	r2, [pc, #124]	@ (8007264 <HAL_TIM_Base_Start_IT+0xc8>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d013      	beq.n	8007212 <HAL_TIM_Base_Start_IT+0x76>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007268 <HAL_TIM_Base_Start_IT+0xcc>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d00e      	beq.n	8007212 <HAL_TIM_Base_Start_IT+0x76>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a1c      	ldr	r2, [pc, #112]	@ (800726c <HAL_TIM_Base_Start_IT+0xd0>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d009      	beq.n	8007212 <HAL_TIM_Base_Start_IT+0x76>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a1b      	ldr	r2, [pc, #108]	@ (8007270 <HAL_TIM_Base_Start_IT+0xd4>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d004      	beq.n	8007212 <HAL_TIM_Base_Start_IT+0x76>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a19      	ldr	r2, [pc, #100]	@ (8007274 <HAL_TIM_Base_Start_IT+0xd8>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d115      	bne.n	800723e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	4b17      	ldr	r3, [pc, #92]	@ (8007278 <HAL_TIM_Base_Start_IT+0xdc>)
 800721a:	4013      	ands	r3, r2
 800721c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2b06      	cmp	r3, #6
 8007222:	d015      	beq.n	8007250 <HAL_TIM_Base_Start_IT+0xb4>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800722a:	d011      	beq.n	8007250 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f042 0201 	orr.w	r2, r2, #1
 800723a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800723c:	e008      	b.n	8007250 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f042 0201 	orr.w	r2, r2, #1
 800724c:	601a      	str	r2, [r3, #0]
 800724e:	e000      	b.n	8007252 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007250:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	40012c00 	.word	0x40012c00
 8007264:	40000400 	.word	0x40000400
 8007268:	40000800 	.word	0x40000800
 800726c:	40000c00 	.word	0x40000c00
 8007270:	40013400 	.word	0x40013400
 8007274:	40014000 	.word	0x40014000
 8007278:	00010007 	.word	0x00010007

0800727c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d020      	beq.n	80072e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d01b      	beq.n	80072e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0202 	mvn.w	r2, #2
 80072b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f8e9 	bl	800749e <HAL_TIM_IC_CaptureCallback>
 80072cc:	e005      	b.n	80072da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f8db 	bl	800748a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f8ec 	bl	80074b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f003 0304 	and.w	r3, r3, #4
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d020      	beq.n	800732c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f003 0304 	and.w	r3, r3, #4
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d01b      	beq.n	800732c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f06f 0204 	mvn.w	r2, #4
 80072fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2202      	movs	r2, #2
 8007302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f8c3 	bl	800749e <HAL_TIM_IC_CaptureCallback>
 8007318:	e005      	b.n	8007326 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f8b5 	bl	800748a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f8c6 	bl	80074b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	2b00      	cmp	r3, #0
 8007334:	d020      	beq.n	8007378 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f003 0308 	and.w	r3, r3, #8
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01b      	beq.n	8007378 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f06f 0208 	mvn.w	r2, #8
 8007348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2204      	movs	r2, #4
 800734e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	f003 0303 	and.w	r3, r3, #3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f89d 	bl	800749e <HAL_TIM_IC_CaptureCallback>
 8007364:	e005      	b.n	8007372 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f88f 	bl	800748a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f8a0 	bl	80074b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f003 0310 	and.w	r3, r3, #16
 800737e:	2b00      	cmp	r3, #0
 8007380:	d020      	beq.n	80073c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f003 0310 	and.w	r3, r3, #16
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01b      	beq.n	80073c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f06f 0210 	mvn.w	r2, #16
 8007394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2208      	movs	r2, #8
 800739a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f877 	bl	800749e <HAL_TIM_IC_CaptureCallback>
 80073b0:	e005      	b.n	80073be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f869 	bl	800748a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f87a 	bl	80074b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00c      	beq.n	80073e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d007      	beq.n	80073e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f06f 0201 	mvn.w	r2, #1
 80073e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7fa ffcc 	bl	8002380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d104      	bne.n	80073fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00c      	beq.n	8007416 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007402:	2b00      	cmp	r3, #0
 8007404:	d007      	beq.n	8007416 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800740e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f913 	bl	800763c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00c      	beq.n	800743a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007426:	2b00      	cmp	r3, #0
 8007428:	d007      	beq.n	800743a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f90b 	bl	8007650 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00c      	beq.n	800745e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800744a:	2b00      	cmp	r3, #0
 800744c:	d007      	beq.n	800745e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f834 	bl	80074c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f003 0320 	and.w	r3, r3, #32
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00c      	beq.n	8007482 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f003 0320 	and.w	r3, r3, #32
 800746e:	2b00      	cmp	r3, #0
 8007470:	d007      	beq.n	8007482 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f06f 0220 	mvn.w	r2, #32
 800747a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f8d3 	bl	8007628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007482:	bf00      	nop
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007492:	bf00      	nop
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800749e:	b480      	push	{r7}
 80074a0:	b083      	sub	sp, #12
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074a6:	bf00      	nop
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b083      	sub	sp, #12
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074ba:	bf00      	nop
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b083      	sub	sp, #12
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
	...

080074dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a46      	ldr	r2, [pc, #280]	@ (8007608 <TIM_Base_SetConfig+0x12c>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d013      	beq.n	800751c <TIM_Base_SetConfig+0x40>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074fa:	d00f      	beq.n	800751c <TIM_Base_SetConfig+0x40>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a43      	ldr	r2, [pc, #268]	@ (800760c <TIM_Base_SetConfig+0x130>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d00b      	beq.n	800751c <TIM_Base_SetConfig+0x40>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a42      	ldr	r2, [pc, #264]	@ (8007610 <TIM_Base_SetConfig+0x134>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d007      	beq.n	800751c <TIM_Base_SetConfig+0x40>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a41      	ldr	r2, [pc, #260]	@ (8007614 <TIM_Base_SetConfig+0x138>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d003      	beq.n	800751c <TIM_Base_SetConfig+0x40>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a40      	ldr	r2, [pc, #256]	@ (8007618 <TIM_Base_SetConfig+0x13c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d108      	bne.n	800752e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a35      	ldr	r2, [pc, #212]	@ (8007608 <TIM_Base_SetConfig+0x12c>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d01f      	beq.n	8007576 <TIM_Base_SetConfig+0x9a>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800753c:	d01b      	beq.n	8007576 <TIM_Base_SetConfig+0x9a>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a32      	ldr	r2, [pc, #200]	@ (800760c <TIM_Base_SetConfig+0x130>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d017      	beq.n	8007576 <TIM_Base_SetConfig+0x9a>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a31      	ldr	r2, [pc, #196]	@ (8007610 <TIM_Base_SetConfig+0x134>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d013      	beq.n	8007576 <TIM_Base_SetConfig+0x9a>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a30      	ldr	r2, [pc, #192]	@ (8007614 <TIM_Base_SetConfig+0x138>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d00f      	beq.n	8007576 <TIM_Base_SetConfig+0x9a>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a2f      	ldr	r2, [pc, #188]	@ (8007618 <TIM_Base_SetConfig+0x13c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d00b      	beq.n	8007576 <TIM_Base_SetConfig+0x9a>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a2e      	ldr	r2, [pc, #184]	@ (800761c <TIM_Base_SetConfig+0x140>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d007      	beq.n	8007576 <TIM_Base_SetConfig+0x9a>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a2d      	ldr	r2, [pc, #180]	@ (8007620 <TIM_Base_SetConfig+0x144>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d003      	beq.n	8007576 <TIM_Base_SetConfig+0x9a>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a2c      	ldr	r2, [pc, #176]	@ (8007624 <TIM_Base_SetConfig+0x148>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d108      	bne.n	8007588 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800757c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	4313      	orrs	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	689a      	ldr	r2, [r3, #8]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a16      	ldr	r2, [pc, #88]	@ (8007608 <TIM_Base_SetConfig+0x12c>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d00f      	beq.n	80075d4 <TIM_Base_SetConfig+0xf8>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a18      	ldr	r2, [pc, #96]	@ (8007618 <TIM_Base_SetConfig+0x13c>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d00b      	beq.n	80075d4 <TIM_Base_SetConfig+0xf8>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a17      	ldr	r2, [pc, #92]	@ (800761c <TIM_Base_SetConfig+0x140>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d007      	beq.n	80075d4 <TIM_Base_SetConfig+0xf8>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a16      	ldr	r2, [pc, #88]	@ (8007620 <TIM_Base_SetConfig+0x144>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d003      	beq.n	80075d4 <TIM_Base_SetConfig+0xf8>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a15      	ldr	r2, [pc, #84]	@ (8007624 <TIM_Base_SetConfig+0x148>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d103      	bne.n	80075dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	691a      	ldr	r2, [r3, #16]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d105      	bne.n	80075fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	f023 0201 	bic.w	r2, r3, #1
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	611a      	str	r2, [r3, #16]
  }
}
 80075fa:	bf00      	nop
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	40012c00 	.word	0x40012c00
 800760c:	40000400 	.word	0x40000400
 8007610:	40000800 	.word	0x40000800
 8007614:	40000c00 	.word	0x40000c00
 8007618:	40013400 	.word	0x40013400
 800761c:	40014000 	.word	0x40014000
 8007620:	40014400 	.word	0x40014400
 8007624:	40014800 	.word	0x40014800

08007628 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e040      	b.n	80076f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800767a:	2b00      	cmp	r3, #0
 800767c:	d106      	bne.n	800768c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7fa ffe4 	bl	8002654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2224      	movs	r2, #36	@ 0x24
 8007690:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 0201 	bic.w	r2, r2, #1
 80076a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fb6a 	bl	8007d84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f8af 	bl	8007814 <UART_SetConfig>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d101      	bne.n	80076c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e01b      	b.n	80076f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689a      	ldr	r2, [r3, #8]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f042 0201 	orr.w	r2, r2, #1
 80076ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fbe9 	bl	8007ec8 <UART_CheckIdleState>
 80076f6:	4603      	mov	r3, r0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b08a      	sub	sp, #40	@ 0x28
 8007704:	af02      	add	r7, sp, #8
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	4613      	mov	r3, r2
 800770e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007714:	2b20      	cmp	r3, #32
 8007716:	d177      	bne.n	8007808 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d002      	beq.n	8007724 <HAL_UART_Transmit+0x24>
 800771e:	88fb      	ldrh	r3, [r7, #6]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d101      	bne.n	8007728 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e070      	b.n	800780a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2221      	movs	r2, #33	@ 0x21
 8007734:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007736:	f7fb ff93 	bl	8003660 <HAL_GetTick>
 800773a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	88fa      	ldrh	r2, [r7, #6]
 8007740:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	88fa      	ldrh	r2, [r7, #6]
 8007748:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007754:	d108      	bne.n	8007768 <HAL_UART_Transmit+0x68>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d104      	bne.n	8007768 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800775e:	2300      	movs	r3, #0
 8007760:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	61bb      	str	r3, [r7, #24]
 8007766:	e003      	b.n	8007770 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800776c:	2300      	movs	r3, #0
 800776e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007770:	e02f      	b.n	80077d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2200      	movs	r2, #0
 800777a:	2180      	movs	r1, #128	@ 0x80
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f000 fc4b 	bl	8008018 <UART_WaitOnFlagUntilTimeout>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d004      	beq.n	8007792 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2220      	movs	r2, #32
 800778c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e03b      	b.n	800780a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10b      	bne.n	80077b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	881a      	ldrh	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077a4:	b292      	uxth	r2, r2
 80077a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	3302      	adds	r3, #2
 80077ac:	61bb      	str	r3, [r7, #24]
 80077ae:	e007      	b.n	80077c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	781a      	ldrb	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	3301      	adds	r3, #1
 80077be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	3b01      	subs	r3, #1
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80077d8:	b29b      	uxth	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1c9      	bne.n	8007772 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2200      	movs	r2, #0
 80077e6:	2140      	movs	r1, #64	@ 0x40
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 fc15 	bl	8008018 <UART_WaitOnFlagUntilTimeout>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d004      	beq.n	80077fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2220      	movs	r2, #32
 80077f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e005      	b.n	800780a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2220      	movs	r2, #32
 8007802:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	e000      	b.n	800780a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007808:	2302      	movs	r3, #2
  }
}
 800780a:	4618      	mov	r0, r3
 800780c:	3720      	adds	r7, #32
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007818:	b08a      	sub	sp, #40	@ 0x28
 800781a:	af00      	add	r7, sp, #0
 800781c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800781e:	2300      	movs	r3, #0
 8007820:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	689a      	ldr	r2, [r3, #8]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	431a      	orrs	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	431a      	orrs	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	69db      	ldr	r3, [r3, #28]
 8007838:	4313      	orrs	r3, r2
 800783a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	4ba4      	ldr	r3, [pc, #656]	@ (8007ad4 <UART_SetConfig+0x2c0>)
 8007844:	4013      	ands	r3, r2
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	6812      	ldr	r2, [r2, #0]
 800784a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800784c:	430b      	orrs	r3, r1
 800784e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	68da      	ldr	r2, [r3, #12]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	430a      	orrs	r2, r1
 8007864:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a99      	ldr	r2, [pc, #612]	@ (8007ad8 <UART_SetConfig+0x2c4>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d004      	beq.n	8007880 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800787c:	4313      	orrs	r3, r2
 800787e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007890:	430a      	orrs	r2, r1
 8007892:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a90      	ldr	r2, [pc, #576]	@ (8007adc <UART_SetConfig+0x2c8>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d126      	bne.n	80078ec <UART_SetConfig+0xd8>
 800789e:	4b90      	ldr	r3, [pc, #576]	@ (8007ae0 <UART_SetConfig+0x2cc>)
 80078a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078a4:	f003 0303 	and.w	r3, r3, #3
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d81b      	bhi.n	80078e4 <UART_SetConfig+0xd0>
 80078ac:	a201      	add	r2, pc, #4	@ (adr r2, 80078b4 <UART_SetConfig+0xa0>)
 80078ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b2:	bf00      	nop
 80078b4:	080078c5 	.word	0x080078c5
 80078b8:	080078d5 	.word	0x080078d5
 80078bc:	080078cd 	.word	0x080078cd
 80078c0:	080078dd 	.word	0x080078dd
 80078c4:	2301      	movs	r3, #1
 80078c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078ca:	e116      	b.n	8007afa <UART_SetConfig+0x2e6>
 80078cc:	2302      	movs	r3, #2
 80078ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078d2:	e112      	b.n	8007afa <UART_SetConfig+0x2e6>
 80078d4:	2304      	movs	r3, #4
 80078d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078da:	e10e      	b.n	8007afa <UART_SetConfig+0x2e6>
 80078dc:	2308      	movs	r3, #8
 80078de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078e2:	e10a      	b.n	8007afa <UART_SetConfig+0x2e6>
 80078e4:	2310      	movs	r3, #16
 80078e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078ea:	e106      	b.n	8007afa <UART_SetConfig+0x2e6>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a7c      	ldr	r2, [pc, #496]	@ (8007ae4 <UART_SetConfig+0x2d0>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d138      	bne.n	8007968 <UART_SetConfig+0x154>
 80078f6:	4b7a      	ldr	r3, [pc, #488]	@ (8007ae0 <UART_SetConfig+0x2cc>)
 80078f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078fc:	f003 030c 	and.w	r3, r3, #12
 8007900:	2b0c      	cmp	r3, #12
 8007902:	d82d      	bhi.n	8007960 <UART_SetConfig+0x14c>
 8007904:	a201      	add	r2, pc, #4	@ (adr r2, 800790c <UART_SetConfig+0xf8>)
 8007906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790a:	bf00      	nop
 800790c:	08007941 	.word	0x08007941
 8007910:	08007961 	.word	0x08007961
 8007914:	08007961 	.word	0x08007961
 8007918:	08007961 	.word	0x08007961
 800791c:	08007951 	.word	0x08007951
 8007920:	08007961 	.word	0x08007961
 8007924:	08007961 	.word	0x08007961
 8007928:	08007961 	.word	0x08007961
 800792c:	08007949 	.word	0x08007949
 8007930:	08007961 	.word	0x08007961
 8007934:	08007961 	.word	0x08007961
 8007938:	08007961 	.word	0x08007961
 800793c:	08007959 	.word	0x08007959
 8007940:	2300      	movs	r3, #0
 8007942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007946:	e0d8      	b.n	8007afa <UART_SetConfig+0x2e6>
 8007948:	2302      	movs	r3, #2
 800794a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800794e:	e0d4      	b.n	8007afa <UART_SetConfig+0x2e6>
 8007950:	2304      	movs	r3, #4
 8007952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007956:	e0d0      	b.n	8007afa <UART_SetConfig+0x2e6>
 8007958:	2308      	movs	r3, #8
 800795a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800795e:	e0cc      	b.n	8007afa <UART_SetConfig+0x2e6>
 8007960:	2310      	movs	r3, #16
 8007962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007966:	e0c8      	b.n	8007afa <UART_SetConfig+0x2e6>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a5e      	ldr	r2, [pc, #376]	@ (8007ae8 <UART_SetConfig+0x2d4>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d125      	bne.n	80079be <UART_SetConfig+0x1aa>
 8007972:	4b5b      	ldr	r3, [pc, #364]	@ (8007ae0 <UART_SetConfig+0x2cc>)
 8007974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007978:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800797c:	2b30      	cmp	r3, #48	@ 0x30
 800797e:	d016      	beq.n	80079ae <UART_SetConfig+0x19a>
 8007980:	2b30      	cmp	r3, #48	@ 0x30
 8007982:	d818      	bhi.n	80079b6 <UART_SetConfig+0x1a2>
 8007984:	2b20      	cmp	r3, #32
 8007986:	d00a      	beq.n	800799e <UART_SetConfig+0x18a>
 8007988:	2b20      	cmp	r3, #32
 800798a:	d814      	bhi.n	80079b6 <UART_SetConfig+0x1a2>
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <UART_SetConfig+0x182>
 8007990:	2b10      	cmp	r3, #16
 8007992:	d008      	beq.n	80079a6 <UART_SetConfig+0x192>
 8007994:	e00f      	b.n	80079b6 <UART_SetConfig+0x1a2>
 8007996:	2300      	movs	r3, #0
 8007998:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800799c:	e0ad      	b.n	8007afa <UART_SetConfig+0x2e6>
 800799e:	2302      	movs	r3, #2
 80079a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079a4:	e0a9      	b.n	8007afa <UART_SetConfig+0x2e6>
 80079a6:	2304      	movs	r3, #4
 80079a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ac:	e0a5      	b.n	8007afa <UART_SetConfig+0x2e6>
 80079ae:	2308      	movs	r3, #8
 80079b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079b4:	e0a1      	b.n	8007afa <UART_SetConfig+0x2e6>
 80079b6:	2310      	movs	r3, #16
 80079b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079bc:	e09d      	b.n	8007afa <UART_SetConfig+0x2e6>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a4a      	ldr	r2, [pc, #296]	@ (8007aec <UART_SetConfig+0x2d8>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d125      	bne.n	8007a14 <UART_SetConfig+0x200>
 80079c8:	4b45      	ldr	r3, [pc, #276]	@ (8007ae0 <UART_SetConfig+0x2cc>)
 80079ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80079d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80079d4:	d016      	beq.n	8007a04 <UART_SetConfig+0x1f0>
 80079d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80079d8:	d818      	bhi.n	8007a0c <UART_SetConfig+0x1f8>
 80079da:	2b80      	cmp	r3, #128	@ 0x80
 80079dc:	d00a      	beq.n	80079f4 <UART_SetConfig+0x1e0>
 80079de:	2b80      	cmp	r3, #128	@ 0x80
 80079e0:	d814      	bhi.n	8007a0c <UART_SetConfig+0x1f8>
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d002      	beq.n	80079ec <UART_SetConfig+0x1d8>
 80079e6:	2b40      	cmp	r3, #64	@ 0x40
 80079e8:	d008      	beq.n	80079fc <UART_SetConfig+0x1e8>
 80079ea:	e00f      	b.n	8007a0c <UART_SetConfig+0x1f8>
 80079ec:	2300      	movs	r3, #0
 80079ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079f2:	e082      	b.n	8007afa <UART_SetConfig+0x2e6>
 80079f4:	2302      	movs	r3, #2
 80079f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079fa:	e07e      	b.n	8007afa <UART_SetConfig+0x2e6>
 80079fc:	2304      	movs	r3, #4
 80079fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a02:	e07a      	b.n	8007afa <UART_SetConfig+0x2e6>
 8007a04:	2308      	movs	r3, #8
 8007a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a0a:	e076      	b.n	8007afa <UART_SetConfig+0x2e6>
 8007a0c:	2310      	movs	r3, #16
 8007a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a12:	e072      	b.n	8007afa <UART_SetConfig+0x2e6>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a35      	ldr	r2, [pc, #212]	@ (8007af0 <UART_SetConfig+0x2dc>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d12a      	bne.n	8007a74 <UART_SetConfig+0x260>
 8007a1e:	4b30      	ldr	r3, [pc, #192]	@ (8007ae0 <UART_SetConfig+0x2cc>)
 8007a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a2c:	d01a      	beq.n	8007a64 <UART_SetConfig+0x250>
 8007a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a32:	d81b      	bhi.n	8007a6c <UART_SetConfig+0x258>
 8007a34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a38:	d00c      	beq.n	8007a54 <UART_SetConfig+0x240>
 8007a3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a3e:	d815      	bhi.n	8007a6c <UART_SetConfig+0x258>
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d003      	beq.n	8007a4c <UART_SetConfig+0x238>
 8007a44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a48:	d008      	beq.n	8007a5c <UART_SetConfig+0x248>
 8007a4a:	e00f      	b.n	8007a6c <UART_SetConfig+0x258>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a52:	e052      	b.n	8007afa <UART_SetConfig+0x2e6>
 8007a54:	2302      	movs	r3, #2
 8007a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a5a:	e04e      	b.n	8007afa <UART_SetConfig+0x2e6>
 8007a5c:	2304      	movs	r3, #4
 8007a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a62:	e04a      	b.n	8007afa <UART_SetConfig+0x2e6>
 8007a64:	2308      	movs	r3, #8
 8007a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a6a:	e046      	b.n	8007afa <UART_SetConfig+0x2e6>
 8007a6c:	2310      	movs	r3, #16
 8007a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a72:	e042      	b.n	8007afa <UART_SetConfig+0x2e6>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a17      	ldr	r2, [pc, #92]	@ (8007ad8 <UART_SetConfig+0x2c4>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d13a      	bne.n	8007af4 <UART_SetConfig+0x2e0>
 8007a7e:	4b18      	ldr	r3, [pc, #96]	@ (8007ae0 <UART_SetConfig+0x2cc>)
 8007a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007a88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a8c:	d01a      	beq.n	8007ac4 <UART_SetConfig+0x2b0>
 8007a8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a92:	d81b      	bhi.n	8007acc <UART_SetConfig+0x2b8>
 8007a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a98:	d00c      	beq.n	8007ab4 <UART_SetConfig+0x2a0>
 8007a9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a9e:	d815      	bhi.n	8007acc <UART_SetConfig+0x2b8>
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d003      	beq.n	8007aac <UART_SetConfig+0x298>
 8007aa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aa8:	d008      	beq.n	8007abc <UART_SetConfig+0x2a8>
 8007aaa:	e00f      	b.n	8007acc <UART_SetConfig+0x2b8>
 8007aac:	2300      	movs	r3, #0
 8007aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ab2:	e022      	b.n	8007afa <UART_SetConfig+0x2e6>
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aba:	e01e      	b.n	8007afa <UART_SetConfig+0x2e6>
 8007abc:	2304      	movs	r3, #4
 8007abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ac2:	e01a      	b.n	8007afa <UART_SetConfig+0x2e6>
 8007ac4:	2308      	movs	r3, #8
 8007ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aca:	e016      	b.n	8007afa <UART_SetConfig+0x2e6>
 8007acc:	2310      	movs	r3, #16
 8007ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ad2:	e012      	b.n	8007afa <UART_SetConfig+0x2e6>
 8007ad4:	efff69f3 	.word	0xefff69f3
 8007ad8:	40008000 	.word	0x40008000
 8007adc:	40013800 	.word	0x40013800
 8007ae0:	40021000 	.word	0x40021000
 8007ae4:	40004400 	.word	0x40004400
 8007ae8:	40004800 	.word	0x40004800
 8007aec:	40004c00 	.word	0x40004c00
 8007af0:	40005000 	.word	0x40005000
 8007af4:	2310      	movs	r3, #16
 8007af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a9f      	ldr	r2, [pc, #636]	@ (8007d7c <UART_SetConfig+0x568>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d17a      	bne.n	8007bfa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b08:	2b08      	cmp	r3, #8
 8007b0a:	d824      	bhi.n	8007b56 <UART_SetConfig+0x342>
 8007b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b14 <UART_SetConfig+0x300>)
 8007b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b12:	bf00      	nop
 8007b14:	08007b39 	.word	0x08007b39
 8007b18:	08007b57 	.word	0x08007b57
 8007b1c:	08007b41 	.word	0x08007b41
 8007b20:	08007b57 	.word	0x08007b57
 8007b24:	08007b47 	.word	0x08007b47
 8007b28:	08007b57 	.word	0x08007b57
 8007b2c:	08007b57 	.word	0x08007b57
 8007b30:	08007b57 	.word	0x08007b57
 8007b34:	08007b4f 	.word	0x08007b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b38:	f7fe f906 	bl	8005d48 <HAL_RCC_GetPCLK1Freq>
 8007b3c:	61f8      	str	r0, [r7, #28]
        break;
 8007b3e:	e010      	b.n	8007b62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b40:	4b8f      	ldr	r3, [pc, #572]	@ (8007d80 <UART_SetConfig+0x56c>)
 8007b42:	61fb      	str	r3, [r7, #28]
        break;
 8007b44:	e00d      	b.n	8007b62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b46:	f7fe f867 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8007b4a:	61f8      	str	r0, [r7, #28]
        break;
 8007b4c:	e009      	b.n	8007b62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b52:	61fb      	str	r3, [r7, #28]
        break;
 8007b54:	e005      	b.n	8007b62 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007b60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 80fb 	beq.w	8007d60 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	005b      	lsls	r3, r3, #1
 8007b72:	4413      	add	r3, r2
 8007b74:	69fa      	ldr	r2, [r7, #28]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d305      	bcc.n	8007b86 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b80:	69fa      	ldr	r2, [r7, #28]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d903      	bls.n	8007b8e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007b8c:	e0e8      	b.n	8007d60 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	2200      	movs	r2, #0
 8007b92:	461c      	mov	r4, r3
 8007b94:	4615      	mov	r5, r2
 8007b96:	f04f 0200 	mov.w	r2, #0
 8007b9a:	f04f 0300 	mov.w	r3, #0
 8007b9e:	022b      	lsls	r3, r5, #8
 8007ba0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007ba4:	0222      	lsls	r2, r4, #8
 8007ba6:	68f9      	ldr	r1, [r7, #12]
 8007ba8:	6849      	ldr	r1, [r1, #4]
 8007baa:	0849      	lsrs	r1, r1, #1
 8007bac:	2000      	movs	r0, #0
 8007bae:	4688      	mov	r8, r1
 8007bb0:	4681      	mov	r9, r0
 8007bb2:	eb12 0a08 	adds.w	sl, r2, r8
 8007bb6:	eb43 0b09 	adc.w	fp, r3, r9
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	603b      	str	r3, [r7, #0]
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bc8:	4650      	mov	r0, sl
 8007bca:	4659      	mov	r1, fp
 8007bcc:	f7f8 fd64 	bl	8000698 <__aeabi_uldivmod>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bde:	d308      	bcc.n	8007bf2 <UART_SetConfig+0x3de>
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007be6:	d204      	bcs.n	8007bf2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	69ba      	ldr	r2, [r7, #24]
 8007bee:	60da      	str	r2, [r3, #12]
 8007bf0:	e0b6      	b.n	8007d60 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007bf8:	e0b2      	b.n	8007d60 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	69db      	ldr	r3, [r3, #28]
 8007bfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c02:	d15e      	bne.n	8007cc2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007c04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c08:	2b08      	cmp	r3, #8
 8007c0a:	d828      	bhi.n	8007c5e <UART_SetConfig+0x44a>
 8007c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c14 <UART_SetConfig+0x400>)
 8007c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c12:	bf00      	nop
 8007c14:	08007c39 	.word	0x08007c39
 8007c18:	08007c41 	.word	0x08007c41
 8007c1c:	08007c49 	.word	0x08007c49
 8007c20:	08007c5f 	.word	0x08007c5f
 8007c24:	08007c4f 	.word	0x08007c4f
 8007c28:	08007c5f 	.word	0x08007c5f
 8007c2c:	08007c5f 	.word	0x08007c5f
 8007c30:	08007c5f 	.word	0x08007c5f
 8007c34:	08007c57 	.word	0x08007c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c38:	f7fe f886 	bl	8005d48 <HAL_RCC_GetPCLK1Freq>
 8007c3c:	61f8      	str	r0, [r7, #28]
        break;
 8007c3e:	e014      	b.n	8007c6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c40:	f7fe f898 	bl	8005d74 <HAL_RCC_GetPCLK2Freq>
 8007c44:	61f8      	str	r0, [r7, #28]
        break;
 8007c46:	e010      	b.n	8007c6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c48:	4b4d      	ldr	r3, [pc, #308]	@ (8007d80 <UART_SetConfig+0x56c>)
 8007c4a:	61fb      	str	r3, [r7, #28]
        break;
 8007c4c:	e00d      	b.n	8007c6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c4e:	f7fd ffe3 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8007c52:	61f8      	str	r0, [r7, #28]
        break;
 8007c54:	e009      	b.n	8007c6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c5a:	61fb      	str	r3, [r7, #28]
        break;
 8007c5c:	e005      	b.n	8007c6a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007c68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d077      	beq.n	8007d60 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	005a      	lsls	r2, r3, #1
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	085b      	lsrs	r3, r3, #1
 8007c7a:	441a      	add	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	2b0f      	cmp	r3, #15
 8007c8a:	d916      	bls.n	8007cba <UART_SetConfig+0x4a6>
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c92:	d212      	bcs.n	8007cba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	f023 030f 	bic.w	r3, r3, #15
 8007c9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	085b      	lsrs	r3, r3, #1
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	f003 0307 	and.w	r3, r3, #7
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	8afb      	ldrh	r3, [r7, #22]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	8afa      	ldrh	r2, [r7, #22]
 8007cb6:	60da      	str	r2, [r3, #12]
 8007cb8:	e052      	b.n	8007d60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007cc0:	e04e      	b.n	8007d60 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cc2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007cc6:	2b08      	cmp	r3, #8
 8007cc8:	d827      	bhi.n	8007d1a <UART_SetConfig+0x506>
 8007cca:	a201      	add	r2, pc, #4	@ (adr r2, 8007cd0 <UART_SetConfig+0x4bc>)
 8007ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd0:	08007cf5 	.word	0x08007cf5
 8007cd4:	08007cfd 	.word	0x08007cfd
 8007cd8:	08007d05 	.word	0x08007d05
 8007cdc:	08007d1b 	.word	0x08007d1b
 8007ce0:	08007d0b 	.word	0x08007d0b
 8007ce4:	08007d1b 	.word	0x08007d1b
 8007ce8:	08007d1b 	.word	0x08007d1b
 8007cec:	08007d1b 	.word	0x08007d1b
 8007cf0:	08007d13 	.word	0x08007d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cf4:	f7fe f828 	bl	8005d48 <HAL_RCC_GetPCLK1Freq>
 8007cf8:	61f8      	str	r0, [r7, #28]
        break;
 8007cfa:	e014      	b.n	8007d26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cfc:	f7fe f83a 	bl	8005d74 <HAL_RCC_GetPCLK2Freq>
 8007d00:	61f8      	str	r0, [r7, #28]
        break;
 8007d02:	e010      	b.n	8007d26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d04:	4b1e      	ldr	r3, [pc, #120]	@ (8007d80 <UART_SetConfig+0x56c>)
 8007d06:	61fb      	str	r3, [r7, #28]
        break;
 8007d08:	e00d      	b.n	8007d26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d0a:	f7fd ff85 	bl	8005c18 <HAL_RCC_GetSysClockFreq>
 8007d0e:	61f8      	str	r0, [r7, #28]
        break;
 8007d10:	e009      	b.n	8007d26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d16:	61fb      	str	r3, [r7, #28]
        break;
 8007d18:	e005      	b.n	8007d26 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007d24:	bf00      	nop
    }

    if (pclk != 0U)
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d019      	beq.n	8007d60 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	085a      	lsrs	r2, r3, #1
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	441a      	add	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d3e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	2b0f      	cmp	r3, #15
 8007d44:	d909      	bls.n	8007d5a <UART_SetConfig+0x546>
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d4c:	d205      	bcs.n	8007d5a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	60da      	str	r2, [r3, #12]
 8007d58:	e002      	b.n	8007d60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007d6c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3728      	adds	r7, #40	@ 0x28
 8007d74:	46bd      	mov	sp, r7
 8007d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d7a:	bf00      	nop
 8007d7c:	40008000 	.word	0x40008000
 8007d80:	00f42400 	.word	0x00f42400

08007d84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d90:	f003 0308 	and.w	r3, r3, #8
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00a      	beq.n	8007dae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	430a      	orrs	r2, r1
 8007dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd4:	f003 0302 	and.w	r3, r3, #2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00a      	beq.n	8007df2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	430a      	orrs	r2, r1
 8007df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df6:	f003 0304 	and.w	r3, r3, #4
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e18:	f003 0310 	and.w	r3, r3, #16
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00a      	beq.n	8007e36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	430a      	orrs	r2, r1
 8007e34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3a:	f003 0320 	and.w	r3, r3, #32
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00a      	beq.n	8007e58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	430a      	orrs	r2, r1
 8007e56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d01a      	beq.n	8007e9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e82:	d10a      	bne.n	8007e9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00a      	beq.n	8007ebc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	605a      	str	r2, [r3, #4]
  }
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b098      	sub	sp, #96	@ 0x60
 8007ecc:	af02      	add	r7, sp, #8
 8007ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ed8:	f7fb fbc2 	bl	8003660 <HAL_GetTick>
 8007edc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0308 	and.w	r3, r3, #8
 8007ee8:	2b08      	cmp	r3, #8
 8007eea:	d12e      	bne.n	8007f4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f88c 	bl	8008018 <UART_WaitOnFlagUntilTimeout>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d021      	beq.n	8007f4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0e:	e853 3f00 	ldrex	r3, [r3]
 8007f12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	461a      	mov	r2, r3
 8007f22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f24:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f26:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f2c:	e841 2300 	strex	r3, r2, [r1]
 8007f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1e6      	bne.n	8007f06 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e062      	b.n	8008010 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b04      	cmp	r3, #4
 8007f56:	d149      	bne.n	8007fec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f60:	2200      	movs	r2, #0
 8007f62:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f856 	bl	8008018 <UART_WaitOnFlagUntilTimeout>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d03c      	beq.n	8007fec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7a:	e853 3f00 	ldrex	r3, [r3]
 8007f7e:	623b      	str	r3, [r7, #32]
   return(result);
 8007f80:	6a3b      	ldr	r3, [r7, #32]
 8007f82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f90:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f98:	e841 2300 	strex	r3, r2, [r1]
 8007f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1e6      	bne.n	8007f72 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3308      	adds	r3, #8
 8007faa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	e853 3f00 	ldrex	r3, [r3]
 8007fb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f023 0301 	bic.w	r3, r3, #1
 8007fba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fc4:	61fa      	str	r2, [r7, #28]
 8007fc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc8:	69b9      	ldr	r1, [r7, #24]
 8007fca:	69fa      	ldr	r2, [r7, #28]
 8007fcc:	e841 2300 	strex	r3, r2, [r1]
 8007fd0:	617b      	str	r3, [r7, #20]
   return(result);
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e5      	bne.n	8007fa4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e011      	b.n	8008010 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3758      	adds	r7, #88	@ 0x58
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	603b      	str	r3, [r7, #0]
 8008024:	4613      	mov	r3, r2
 8008026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008028:	e04f      	b.n	80080ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008030:	d04b      	beq.n	80080ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008032:	f7fb fb15 	bl	8003660 <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	69ba      	ldr	r2, [r7, #24]
 800803e:	429a      	cmp	r2, r3
 8008040:	d302      	bcc.n	8008048 <UART_WaitOnFlagUntilTimeout+0x30>
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e04e      	b.n	80080ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0304 	and.w	r3, r3, #4
 8008056:	2b00      	cmp	r3, #0
 8008058:	d037      	beq.n	80080ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2b80      	cmp	r3, #128	@ 0x80
 800805e:	d034      	beq.n	80080ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2b40      	cmp	r3, #64	@ 0x40
 8008064:	d031      	beq.n	80080ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	f003 0308 	and.w	r3, r3, #8
 8008070:	2b08      	cmp	r3, #8
 8008072:	d110      	bne.n	8008096 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2208      	movs	r2, #8
 800807a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 f838 	bl	80080f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2208      	movs	r2, #8
 8008086:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e029      	b.n	80080ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	69db      	ldr	r3, [r3, #28]
 800809c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080a4:	d111      	bne.n	80080ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80080ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f000 f81e 	bl	80080f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2220      	movs	r2, #32
 80080ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e00f      	b.n	80080ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	69da      	ldr	r2, [r3, #28]
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	4013      	ands	r3, r2
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	bf0c      	ite	eq
 80080da:	2301      	moveq	r3, #1
 80080dc:	2300      	movne	r3, #0
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	461a      	mov	r2, r3
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d0a0      	beq.n	800802a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b095      	sub	sp, #84	@ 0x54
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008102:	e853 3f00 	ldrex	r3, [r3]
 8008106:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800810e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	461a      	mov	r2, r3
 8008116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008118:	643b      	str	r3, [r7, #64]	@ 0x40
 800811a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800811e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008120:	e841 2300 	strex	r3, r2, [r1]
 8008124:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1e6      	bne.n	80080fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3308      	adds	r3, #8
 8008132:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008134:	6a3b      	ldr	r3, [r7, #32]
 8008136:	e853 3f00 	ldrex	r3, [r3]
 800813a:	61fb      	str	r3, [r7, #28]
   return(result);
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	f023 0301 	bic.w	r3, r3, #1
 8008142:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	3308      	adds	r3, #8
 800814a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800814c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800814e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008150:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008152:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008154:	e841 2300 	strex	r3, r2, [r1]
 8008158:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1e5      	bne.n	800812c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008164:	2b01      	cmp	r3, #1
 8008166:	d118      	bne.n	800819a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	e853 3f00 	ldrex	r3, [r3]
 8008174:	60bb      	str	r3, [r7, #8]
   return(result);
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	f023 0310 	bic.w	r3, r3, #16
 800817c:	647b      	str	r3, [r7, #68]	@ 0x44
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008186:	61bb      	str	r3, [r7, #24]
 8008188:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	6979      	ldr	r1, [r7, #20]
 800818c:	69ba      	ldr	r2, [r7, #24]
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	613b      	str	r3, [r7, #16]
   return(result);
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e6      	bne.n	8008168 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2220      	movs	r2, #32
 800819e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80081ae:	bf00      	nop
 80081b0:	3754      	adds	r7, #84	@ 0x54
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081ba:	b084      	sub	sp, #16
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	f107 001c 	add.w	r0, r7, #28
 80081c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fa69 	bl	80086b0 <USB_CoreReset>
 80081de:	4603      	mov	r3, r0
 80081e0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80081e2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d106      	bne.n	80081f8 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80081f6:	e005      	b.n	8008204 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8008204:	7bfb      	ldrb	r3, [r7, #15]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008210:	b004      	add	sp, #16
 8008212:	4770      	bx	lr

08008214 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f023 0201 	bic.w	r2, r3, #1
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	460b      	mov	r3, r1
 8008240:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008242:	2300      	movs	r3, #0
 8008244:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008252:	78fb      	ldrb	r3, [r7, #3]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d115      	bne.n	8008284 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008264:	200a      	movs	r0, #10
 8008266:	f7fb fa07 	bl	8003678 <HAL_Delay>
      ms += 10U;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	330a      	adds	r3, #10
 800826e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fa0f 	bl	8008694 <USB_GetMode>
 8008276:	4603      	mov	r3, r0
 8008278:	2b01      	cmp	r3, #1
 800827a:	d01e      	beq.n	80082ba <USB_SetCurrentMode+0x84>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008280:	d9f0      	bls.n	8008264 <USB_SetCurrentMode+0x2e>
 8008282:	e01a      	b.n	80082ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008284:	78fb      	ldrb	r3, [r7, #3]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d115      	bne.n	80082b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008296:	200a      	movs	r0, #10
 8008298:	f7fb f9ee 	bl	8003678 <HAL_Delay>
      ms += 10U;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	330a      	adds	r3, #10
 80082a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f9f6 	bl	8008694 <USB_GetMode>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d005      	beq.n	80082ba <USB_SetCurrentMode+0x84>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80082b2:	d9f0      	bls.n	8008296 <USB_SetCurrentMode+0x60>
 80082b4:	e001      	b.n	80082ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e005      	b.n	80082c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2bc8      	cmp	r3, #200	@ 0xc8
 80082be:	d101      	bne.n	80082c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e000      	b.n	80082c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082d0:	b084      	sub	sp, #16
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b086      	sub	sp, #24
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80082de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80082ea:	2300      	movs	r3, #0
 80082ec:	613b      	str	r3, [r7, #16]
 80082ee:	e009      	b.n	8008304 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	3340      	adds	r3, #64	@ 0x40
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	2200      	movs	r2, #0
 80082fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	3301      	adds	r3, #1
 8008302:	613b      	str	r3, [r7, #16]
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	2b0e      	cmp	r3, #14
 8008308:	d9f2      	bls.n	80082f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800830a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800830e:	2b00      	cmp	r3, #0
 8008310:	d11c      	bne.n	800834c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008320:	f043 0302 	orr.w	r3, r3, #2
 8008324:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800832a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	e005      	b.n	8008358 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008350:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800835e:	461a      	mov	r2, r3
 8008360:	2300      	movs	r3, #0
 8008362:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008364:	2103      	movs	r1, #3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f95a 	bl	8008620 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800836c:	2110      	movs	r1, #16
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f8f6 	bl	8008560 <USB_FlushTxFifo>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f920 	bl	80085c4 <USB_FlushRxFifo>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008394:	461a      	mov	r2, r3
 8008396:	2300      	movs	r3, #0
 8008398:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083a0:	461a      	mov	r2, r3
 80083a2:	2300      	movs	r3, #0
 80083a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083ac:	461a      	mov	r2, r3
 80083ae:	2300      	movs	r3, #0
 80083b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083b2:	2300      	movs	r3, #0
 80083b4:	613b      	str	r3, [r7, #16]
 80083b6:	e043      	b.n	8008440 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	015a      	lsls	r2, r3, #5
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	4413      	add	r3, r2
 80083c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083ce:	d118      	bne.n	8008402 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10a      	bne.n	80083ec <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	015a      	lsls	r2, r3, #5
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	4413      	add	r3, r2
 80083de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083e2:	461a      	mov	r2, r3
 80083e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80083e8:	6013      	str	r3, [r2, #0]
 80083ea:	e013      	b.n	8008414 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083f8:	461a      	mov	r2, r3
 80083fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80083fe:	6013      	str	r3, [r2, #0]
 8008400:	e008      	b.n	8008414 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	015a      	lsls	r2, r3, #5
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	4413      	add	r3, r2
 800840a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800840e:	461a      	mov	r2, r3
 8008410:	2300      	movs	r3, #0
 8008412:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008420:	461a      	mov	r2, r3
 8008422:	2300      	movs	r3, #0
 8008424:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	015a      	lsls	r2, r3, #5
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	4413      	add	r3, r2
 800842e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008432:	461a      	mov	r2, r3
 8008434:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008438:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	3301      	adds	r3, #1
 800843e:	613b      	str	r3, [r7, #16]
 8008440:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008444:	461a      	mov	r2, r3
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	4293      	cmp	r3, r2
 800844a:	d3b5      	bcc.n	80083b8 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800844c:	2300      	movs	r3, #0
 800844e:	613b      	str	r3, [r7, #16]
 8008450:	e043      	b.n	80084da <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	015a      	lsls	r2, r3, #5
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	4413      	add	r3, r2
 800845a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008464:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008468:	d118      	bne.n	800849c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10a      	bne.n	8008486 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4413      	add	r3, r2
 8008478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800847c:	461a      	mov	r2, r3
 800847e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	e013      	b.n	80084ae <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	015a      	lsls	r2, r3, #5
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	4413      	add	r3, r2
 800848e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008492:	461a      	mov	r2, r3
 8008494:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008498:	6013      	str	r3, [r2, #0]
 800849a:	e008      	b.n	80084ae <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084a8:	461a      	mov	r2, r3
 80084aa:	2300      	movs	r3, #0
 80084ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ba:	461a      	mov	r2, r3
 80084bc:	2300      	movs	r3, #0
 80084be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084cc:	461a      	mov	r2, r3
 80084ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80084d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	3301      	adds	r3, #1
 80084d8:	613b      	str	r3, [r7, #16]
 80084da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80084de:	461a      	mov	r2, r3
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d3b5      	bcc.n	8008452 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008506:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	f043 0210 	orr.w	r2, r3, #16
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	699a      	ldr	r2, [r3, #24]
 8008518:	4b10      	ldr	r3, [pc, #64]	@ (800855c <USB_DevInit+0x28c>)
 800851a:	4313      	orrs	r3, r2
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008520:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008524:	2b00      	cmp	r3, #0
 8008526:	d005      	beq.n	8008534 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	f043 0208 	orr.w	r2, r3, #8
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008534:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008538:	2b01      	cmp	r3, #1
 800853a:	d107      	bne.n	800854c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008544:	f043 0304 	orr.w	r3, r3, #4
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800854c:	7dfb      	ldrb	r3, [r7, #23]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008558:	b004      	add	sp, #16
 800855a:	4770      	bx	lr
 800855c:	803c3800 	.word	0x803c3800

08008560 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800856a:	2300      	movs	r3, #0
 800856c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3301      	adds	r3, #1
 8008572:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800857a:	d901      	bls.n	8008580 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e01b      	b.n	80085b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	2b00      	cmp	r3, #0
 8008586:	daf2      	bge.n	800856e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	019b      	lsls	r3, r3, #6
 8008590:	f043 0220 	orr.w	r2, r3, #32
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	3301      	adds	r3, #1
 800859c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085a4:	d901      	bls.n	80085aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e006      	b.n	80085b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	f003 0320 	and.w	r3, r3, #32
 80085b2:	2b20      	cmp	r3, #32
 80085b4:	d0f0      	beq.n	8008598 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3714      	adds	r7, #20
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085cc:	2300      	movs	r3, #0
 80085ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	3301      	adds	r3, #1
 80085d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085dc:	d901      	bls.n	80085e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e018      	b.n	8008614 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	daf2      	bge.n	80085d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2210      	movs	r2, #16
 80085f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	3301      	adds	r3, #1
 80085f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008600:	d901      	bls.n	8008606 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e006      	b.n	8008614 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	f003 0310 	and.w	r3, r3, #16
 800860e:	2b10      	cmp	r3, #16
 8008610:	d0f0      	beq.n	80085f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	78fb      	ldrb	r3, [r7, #3]
 800863a:	68f9      	ldr	r1, [r7, #12]
 800863c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008640:	4313      	orrs	r3, r2
 8008642:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800866c:	f023 0303 	bic.w	r3, r3, #3
 8008670:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008680:	f043 0302 	orr.w	r3, r3, #2
 8008684:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	f003 0301 	and.w	r3, r3, #1
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086b8:	2300      	movs	r3, #0
 80086ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3301      	adds	r3, #1
 80086c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086c8:	d901      	bls.n	80086ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e01b      	b.n	8008706 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	daf2      	bge.n	80086bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80086d6:	2300      	movs	r3, #0
 80086d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	f043 0201 	orr.w	r2, r3, #1
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	3301      	adds	r3, #1
 80086ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086f2:	d901      	bls.n	80086f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e006      	b.n	8008706 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	2b01      	cmp	r3, #1
 8008702:	d0f0      	beq.n	80086e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr

08008712 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b08c      	sub	sp, #48	@ 0x30
 8008716:	af00      	add	r7, sp, #0
 8008718:	603b      	str	r3, [r7, #0]
 800871a:	4603      	mov	r3, r0
 800871c:	71fb      	strb	r3, [r7, #7]
 800871e:	460b      	mov	r3, r1
 8008720:	71bb      	strb	r3, [r7, #6]
 8008722:	4613      	mov	r3, r2
 8008724:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8008726:	79fb      	ldrb	r3, [r7, #7]
 8008728:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 800872a:	79bb      	ldrb	r3, [r7, #6]
 800872c:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 800872e:	797b      	ldrb	r3, [r7, #5]
 8008730:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008732:	f107 030c 	add.w	r3, r7, #12
 8008736:	2207      	movs	r2, #7
 8008738:	2100      	movs	r1, #0
 800873a:	4618      	mov	r0, r3
 800873c:	f002 fd45 	bl	800b1ca <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008740:	f107 0318 	add.w	r3, r7, #24
 8008744:	2218      	movs	r2, #24
 8008746:	2100      	movs	r1, #0
 8008748:	4618      	mov	r0, r3
 800874a:	f002 fd3e 	bl	800b1ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800874e:	233f      	movs	r3, #63	@ 0x3f
 8008750:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8008752:	238a      	movs	r3, #138	@ 0x8a
 8008754:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8008756:	f107 0314 	add.w	r3, r7, #20
 800875a:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 800875c:	2303      	movs	r3, #3
 800875e:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 8008760:	f107 030c 	add.w	r3, r7, #12
 8008764:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8008766:	2307      	movs	r3, #7
 8008768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800876a:	f107 0318 	add.w	r3, r7, #24
 800876e:	2100      	movs	r1, #0
 8008770:	4618      	mov	r0, r3
 8008772:	f000 fea1 	bl	80094b8 <hci_send_req>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	da01      	bge.n	8008780 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800877c:	23ff      	movs	r3, #255	@ 0xff
 800877e:	e014      	b.n	80087aa <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8008780:	7b3b      	ldrb	r3, [r7, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d001      	beq.n	800878a <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8008786:	7b3b      	ldrb	r3, [r7, #12]
 8008788:	e00f      	b.n	80087aa <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800878a:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800878e:	b29a      	uxth	r2, r3
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8008794:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8008798:	b29a      	uxth	r2, r3
 800879a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879c:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800879e:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087a6:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3730      	adds	r7, #48	@ 0x30
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b08e      	sub	sp, #56	@ 0x38
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
 80087bc:	603b      	str	r3, [r7, #0]
 80087be:	4603      	mov	r3, r0
 80087c0:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
 80087c4:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80087c6:	f107 0314 	add.w	r3, r7, #20
 80087ca:	2207      	movs	r2, #7
 80087cc:	2100      	movs	r1, #0
 80087ce:	4618      	mov	r0, r3
 80087d0:	f002 fcfb 	bl	800b1ca <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80087d4:	f107 0320 	add.w	r3, r7, #32
 80087d8:	2218      	movs	r2, #24
 80087da:	2100      	movs	r1, #0
 80087dc:	4618      	mov	r0, r3
 80087de:	f002 fcf4 	bl	800b1ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80087e2:	233f      	movs	r3, #63	@ 0x3f
 80087e4:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 80087e6:	238a      	movs	r3, #138	@ 0x8a
 80087e8:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 80087ea:	f107 031c 	add.w	r3, r7, #28
 80087ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 80087f0:	2301      	movs	r3, #1
 80087f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 80087f4:	f107 0314 	add.w	r3, r7, #20
 80087f8:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 80087fa:	2307      	movs	r3, #7
 80087fc:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80087fe:	f107 0320 	add.w	r3, r7, #32
 8008802:	2100      	movs	r1, #0
 8008804:	4618      	mov	r0, r3
 8008806:	f000 fe57 	bl	80094b8 <hci_send_req>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	da01      	bge.n	8008814 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8008810:	23ff      	movs	r3, #255	@ 0xff
 8008812:	e014      	b.n	800883e <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8008814:	7d3b      	ldrb	r3, [r7, #20]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 800881a:	7d3b      	ldrb	r3, [r7, #20]
 800881c:	e00f      	b.n	800883e <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 800881e:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8008822:	b29a      	uxth	r2, r3
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8008828:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 800882c:	b29a      	uxth	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8008832:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8008836:	b29a      	uxth	r2, r3
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3738      	adds	r7, #56	@ 0x38
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8008846:	b590      	push	{r4, r7, lr}
 8008848:	b095      	sub	sp, #84	@ 0x54
 800884a:	af00      	add	r7, sp, #0
 800884c:	4604      	mov	r4, r0
 800884e:	4608      	mov	r0, r1
 8008850:	4611      	mov	r1, r2
 8008852:	461a      	mov	r2, r3
 8008854:	4623      	mov	r3, r4
 8008856:	71fb      	strb	r3, [r7, #7]
 8008858:	4603      	mov	r3, r0
 800885a:	80bb      	strh	r3, [r7, #4]
 800885c:	460b      	mov	r3, r1
 800885e:	807b      	strh	r3, [r7, #2]
 8008860:	4613      	mov	r3, r2
 8008862:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8008864:	2300      	movs	r3, #0
 8008866:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800886a:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800886e:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8008872:	4413      	add	r3, r2
 8008874:	330e      	adds	r3, #14
 8008876:	2b28      	cmp	r3, #40	@ 0x28
 8008878:	d901      	bls.n	800887e <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800887a:	2342      	movs	r3, #66	@ 0x42
 800887c:	e0c9      	b.n	8008a12 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 800887e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008882:	3350      	adds	r3, #80	@ 0x50
 8008884:	443b      	add	r3, r7
 8008886:	79fa      	ldrb	r2, [r7, #7]
 8008888:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800888c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008890:	3301      	adds	r3, #1
 8008892:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8008896:	88bb      	ldrh	r3, [r7, #4]
 8008898:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800889a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800889e:	f107 0208 	add.w	r2, r7, #8
 80088a2:	4413      	add	r3, r2
 80088a4:	88ba      	ldrh	r2, [r7, #4]
 80088a6:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80088a8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80088ac:	3302      	adds	r3, #2
 80088ae:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 80088b2:	887b      	ldrh	r3, [r7, #2]
 80088b4:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 80088b6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80088ba:	f107 0208 	add.w	r2, r7, #8
 80088be:	4413      	add	r3, r2
 80088c0:	887a      	ldrh	r2, [r7, #2]
 80088c2:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80088c4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80088c8:	3302      	adds	r3, #2
 80088ca:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 80088ce:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80088d2:	3350      	adds	r3, #80	@ 0x50
 80088d4:	443b      	add	r3, r7
 80088d6:	79ba      	ldrb	r2, [r7, #6]
 80088d8:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80088dc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80088e0:	3301      	adds	r3, #1
 80088e2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 80088e6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80088ea:	3350      	adds	r3, #80	@ 0x50
 80088ec:	443b      	add	r3, r7
 80088ee:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 80088f2:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80088f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80088fa:	3301      	adds	r3, #1
 80088fc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 8008900:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008904:	3350      	adds	r3, #80	@ 0x50
 8008906:	443b      	add	r3, r7
 8008908:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800890c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008910:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008914:	3301      	adds	r3, #1
 8008916:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800891a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800891e:	f107 0208 	add.w	r2, r7, #8
 8008922:	4413      	add	r3, r2
 8008924:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8008928:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800892a:	4618      	mov	r0, r3
 800892c:	f002 fcc9 	bl	800b2c2 <memcpy>
  indx +=  LocalNameLen;
 8008930:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8008934:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8008938:	4413      	add	r3, r2
 800893a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800893e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008942:	3350      	adds	r3, #80	@ 0x50
 8008944:	443b      	add	r3, r7
 8008946:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 800894a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800894e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008952:	3301      	adds	r3, #1
 8008954:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8008958:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800895c:	f107 0208 	add.w	r2, r7, #8
 8008960:	4413      	add	r3, r2
 8008962:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8008966:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008968:	4618      	mov	r0, r3
 800896a:	f002 fcaa 	bl	800b2c2 <memcpy>
  indx +=  ServiceUUIDLen;  
 800896e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8008972:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8008976:	4413      	add	r3, r2
 8008978:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800897c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8008980:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8008984:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008988:	f107 0208 	add.w	r2, r7, #8
 800898c:	4413      	add	r3, r2
 800898e:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8008992:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008994:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008998:	3302      	adds	r3, #2
 800899a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800899e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80089a2:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80089a6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80089aa:	f107 0208 	add.w	r2, r7, #8
 80089ae:	4413      	add	r3, r2
 80089b0:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 80089b4:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 80089b6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80089ba:	3302      	adds	r3, #2
 80089bc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80089c0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80089c4:	2218      	movs	r2, #24
 80089c6:	2100      	movs	r1, #0
 80089c8:	4618      	mov	r0, r3
 80089ca:	f002 fbfe 	bl	800b1ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80089ce:	233f      	movs	r3, #63	@ 0x3f
 80089d0:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 80089d2:	2383      	movs	r3, #131	@ 0x83
 80089d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 80089d6:	f107 0308 	add.w	r3, r7, #8
 80089da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 80089dc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80089e0:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 80089e2:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 80089e6:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 80089e8:	2301      	movs	r3, #1
 80089ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 80089ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80089f0:	2100      	movs	r1, #0
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 fd60 	bl	80094b8 <hci_send_req>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	da01      	bge.n	8008a02 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 80089fe:	23ff      	movs	r3, #255	@ 0xff
 8008a00:	e007      	b.n	8008a12 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 8008a02:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d002      	beq.n	8008a10 <aci_gap_set_discoverable+0x1ca>
    return status;
 8008a0a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008a0e:	e000      	b.n	8008a12 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3754      	adds	r7, #84	@ 0x54
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd90      	pop	{r4, r7, pc}

08008a1a <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8008a1a:	b590      	push	{r4, r7, lr}
 8008a1c:	b091      	sub	sp, #68	@ 0x44
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	603a      	str	r2, [r7, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	4603      	mov	r3, r0
 8008a26:	71fb      	strb	r3, [r7, #7]
 8008a28:	460b      	mov	r3, r1
 8008a2a:	71bb      	strb	r3, [r7, #6]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8008a30:	79fb      	ldrb	r3, [r7, #7]
 8008a32:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8008a34:	79bb      	ldrb	r3, [r7, #6]
 8008a36:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8008a38:	79bb      	ldrb	r3, [r7, #6]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00a      	beq.n	8008a54 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8008a3e:	683a      	ldr	r2, [r7, #0]
 8008a40:	f107 030e 	add.w	r3, r7, #14
 8008a44:	6814      	ldr	r4, [r2, #0]
 8008a46:	6850      	ldr	r0, [r2, #4]
 8008a48:	6891      	ldr	r1, [r2, #8]
 8008a4a:	68d2      	ldr	r2, [r2, #12]
 8008a4c:	601c      	str	r4, [r3, #0]
 8008a4e:	6058      	str	r0, [r3, #4]
 8008a50:	6099      	str	r1, [r3, #8]
 8008a52:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8008a54:	797b      	ldrb	r3, [r7, #5]
 8008a56:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8008a58:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8008a5c:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8008a5e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008a62:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8008a66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008a68:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 8008a6c:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8008a70:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008a78:	2218      	movs	r2, #24
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f002 fba4 	bl	800b1ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008a82:	233f      	movs	r3, #63	@ 0x3f
 8008a84:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8008a86:	2386      	movs	r3, #134	@ 0x86
 8008a88:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 8008a8a:	f107 030c 	add.w	r3, r7, #12
 8008a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 8008a90:	231a      	movs	r3, #26
 8008a92:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 8008a94:	f107 030b 	add.w	r3, r7, #11
 8008a98:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8008a9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f000 fd07 	bl	80094b8 <hci_send_req>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	da01      	bge.n	8008ab4 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8008ab0:	23ff      	movs	r3, #255	@ 0xff
 8008ab2:	e005      	b.n	8008ac0 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8008ab4:	7afb      	ldrb	r3, [r7, #11]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d001      	beq.n	8008abe <aci_gap_set_auth_requirement+0xa4>
    return status;
 8008aba:	7afb      	ldrb	r3, [r7, #11]
 8008abc:	e000      	b.n	8008ac0 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3744      	adds	r7, #68	@ 0x44
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd90      	pop	{r4, r7, pc}

08008ac8 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b092      	sub	sp, #72	@ 0x48
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	4603      	mov	r3, r0
 8008ad0:	6039      	str	r1, [r7, #0]
 8008ad2:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	2b1f      	cmp	r3, #31
 8008ade:	d901      	bls.n	8008ae4 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8008ae0:	2342      	movs	r3, #66	@ 0x42
 8008ae2:	e03e      	b.n	8008b62 <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 8008ae4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008ae8:	3348      	adds	r3, #72	@ 0x48
 8008aea:	443b      	add	r3, r7
 8008aec:	79fa      	ldrb	r2, [r7, #7]
 8008aee:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 8008af2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008af6:	3301      	adds	r3, #1
 8008af8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8008afc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008b00:	f107 0208 	add.w	r2, r7, #8
 8008b04:	4413      	add	r3, r2
 8008b06:	79fa      	ldrb	r2, [r7, #7]
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f002 fbd9 	bl	800b2c2 <memcpy>
  indx +=  AdvLen;
 8008b10:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8008b14:	79fb      	ldrb	r3, [r7, #7]
 8008b16:	4413      	add	r3, r2
 8008b18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008b20:	2218      	movs	r2, #24
 8008b22:	2100      	movs	r1, #0
 8008b24:	4618      	mov	r0, r3
 8008b26:	f002 fb50 	bl	800b1ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008b2a:	233f      	movs	r3, #63	@ 0x3f
 8008b2c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8008b2e:	238e      	movs	r3, #142	@ 0x8e
 8008b30:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8008b32:	f107 0308 	add.w	r3, r7, #8
 8008b36:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8008b38:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 8008b3e:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8008b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 8008b44:	2301      	movs	r3, #1
 8008b46:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 8008b48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 fcb2 	bl	80094b8 <hci_send_req>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	da01      	bge.n	8008b5e <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 8008b5a:	23ff      	movs	r3, #255	@ 0xff
 8008b5c:	e001      	b.n	8008b62 <aci_gap_update_adv_data+0x9a>
    
  return status;
 8008b5e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3748      	adds	r7, #72	@ 0x48
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b088      	sub	sp, #32
 8008b6e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b70:	f107 0308 	add.w	r3, r7, #8
 8008b74:	2218      	movs	r2, #24
 8008b76:	2100      	movs	r1, #0
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f002 fb26 	bl	800b1ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008b7e:	233f      	movs	r3, #63	@ 0x3f
 8008b80:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8008b82:	f240 1301 	movw	r3, #257	@ 0x101
 8008b86:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008b88:	1dfb      	adds	r3, r7, #7
 8008b8a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8008b90:	f107 0308 	add.w	r3, r7, #8
 8008b94:	2100      	movs	r1, #0
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 fc8e 	bl	80094b8 <hci_send_req>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	da01      	bge.n	8008ba6 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8008ba2:	23ff      	movs	r3, #255	@ 0xff
 8008ba4:	e000      	b.n	8008ba8 <aci_gatt_init+0x3e>

  return status;
 8008ba6:	79fb      	ldrb	r3, [r7, #7]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3720      	adds	r7, #32
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b090      	sub	sp, #64	@ 0x40
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6039      	str	r1, [r7, #0]
 8008bb8:	4611      	mov	r1, r2
 8008bba:	461a      	mov	r2, r3
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	71fb      	strb	r3, [r7, #7]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	71bb      	strb	r3, [r7, #6]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 8008bce:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008bd2:	3340      	adds	r3, #64	@ 0x40
 8008bd4:	443b      	add	r3, r7
 8008bd6:	79fa      	ldrb	r2, [r7, #7]
 8008bd8:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008bdc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008be0:	3301      	adds	r3, #1
 8008be2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8008be6:	79fb      	ldrb	r3, [r7, #7]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d103      	bne.n	8008bf4 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8008bec:	2302      	movs	r3, #2
 8008bee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008bf2:	e002      	b.n	8008bfa <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8008bf4:	2310      	movs	r3, #16
 8008bf6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8008bfa:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008bfe:	f107 020c 	add.w	r2, r7, #12
 8008c02:	4413      	add	r3, r2
 8008c04:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f002 fb59 	bl	800b2c2 <memcpy>
  indx +=  uuid_len;
 8008c10:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8008c14:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008c18:	4413      	add	r3, r2
 8008c1a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 8008c1e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008c22:	3340      	adds	r3, #64	@ 0x40
 8008c24:	443b      	add	r3, r7
 8008c26:	79ba      	ldrb	r2, [r7, #6]
 8008c28:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008c2c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008c30:	3301      	adds	r3, #1
 8008c32:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 8008c36:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008c3a:	3340      	adds	r3, #64	@ 0x40
 8008c3c:	443b      	add	r3, r7
 8008c3e:	797a      	ldrb	r2, [r7, #5]
 8008c40:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008c44:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008c48:	3301      	adds	r3, #1
 8008c4a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008c4e:	f107 0320 	add.w	r3, r7, #32
 8008c52:	2203      	movs	r2, #3
 8008c54:	2100      	movs	r1, #0
 8008c56:	4618      	mov	r0, r3
 8008c58:	f002 fab7 	bl	800b1ca <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c60:	2218      	movs	r2, #24
 8008c62:	2100      	movs	r1, #0
 8008c64:	4618      	mov	r0, r3
 8008c66:	f002 fab0 	bl	800b1ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008c6a:	233f      	movs	r3, #63	@ 0x3f
 8008c6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8008c6e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8008c72:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 8008c74:	f107 030c 	add.w	r3, r7, #12
 8008c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 8008c7a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 8008c80:	f107 0320 	add.w	r3, r7, #32
 8008c84:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8008c86:	2303      	movs	r3, #3
 8008c88:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8008c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c8e:	2100      	movs	r1, #0
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 fc11 	bl	80094b8 <hci_send_req>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	da01      	bge.n	8008ca0 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8008c9c:	23ff      	movs	r3, #255	@ 0xff
 8008c9e:	e00c      	b.n	8008cba <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8008ca0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d002      	beq.n	8008cae <aci_gatt_add_serv+0xfe>
    return resp.status;
 8008ca8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008cac:	e005      	b.n	8008cba <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 8008cae:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cb6:	801a      	strh	r2, [r3, #0]

  return 0;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3740      	adds	r7, #64	@ 0x40
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b092      	sub	sp, #72	@ 0x48
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	603a      	str	r2, [r7, #0]
 8008cca:	461a      	mov	r2, r3
 8008ccc:	4603      	mov	r3, r0
 8008cce:	80fb      	strh	r3, [r7, #6]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	717b      	strb	r3, [r7, #5]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 8008cde:	88fb      	ldrh	r3, [r7, #6]
 8008ce0:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8008ce2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008ce6:	f107 020c 	add.w	r2, r7, #12
 8008cea:	4413      	add	r3, r2
 8008cec:	88fa      	ldrh	r2, [r7, #6]
 8008cee:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008cf0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008cf4:	3302      	adds	r3, #2
 8008cf6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 8008cfa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008cfe:	3348      	adds	r3, #72	@ 0x48
 8008d00:	443b      	add	r3, r7
 8008d02:	797a      	ldrb	r2, [r7, #5]
 8008d04:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008d08:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8008d12:	797b      	ldrb	r3, [r7, #5]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d103      	bne.n	8008d20 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8008d18:	2302      	movs	r3, #2
 8008d1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008d1e:	e002      	b.n	8008d26 <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8008d20:	2310      	movs	r3, #16
 8008d22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8008d26:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008d2a:	f107 020c 	add.w	r2, r7, #12
 8008d2e:	4413      	add	r3, r2
 8008d30:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f002 fac3 	bl	800b2c2 <memcpy>
  indx +=  uuid_len;
 8008d3c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008d40:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008d44:	4413      	add	r3, r2
 8008d46:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 8008d4a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008d4e:	3348      	adds	r3, #72	@ 0x48
 8008d50:	443b      	add	r3, r7
 8008d52:	793a      	ldrb	r2, [r7, #4]
 8008d54:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008d58:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 8008d62:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008d66:	3348      	adds	r3, #72	@ 0x48
 8008d68:	443b      	add	r3, r7
 8008d6a:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8008d6e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008d72:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008d76:	3301      	adds	r3, #1
 8008d78:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 8008d7c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008d80:	3348      	adds	r3, #72	@ 0x48
 8008d82:	443b      	add	r3, r7
 8008d84:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8008d88:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008d8c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008d90:	3301      	adds	r3, #1
 8008d92:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 8008d96:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008d9a:	3348      	adds	r3, #72	@ 0x48
 8008d9c:	443b      	add	r3, r7
 8008d9e:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 8008da2:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008da6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008daa:	3301      	adds	r3, #1
 8008dac:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 8008db0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008db4:	3348      	adds	r3, #72	@ 0x48
 8008db6:	443b      	add	r3, r7
 8008db8:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8008dbc:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008dc0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 8008dca:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008dce:	3348      	adds	r3, #72	@ 0x48
 8008dd0:	443b      	add	r3, r7
 8008dd2:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8008dd6:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008dda:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008dde:	3301      	adds	r3, #1
 8008de0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008de4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008de8:	2203      	movs	r2, #3
 8008dea:	2100      	movs	r1, #0
 8008dec:	4618      	mov	r0, r3
 8008dee:	f002 f9ec 	bl	800b1ca <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008df2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008df6:	2218      	movs	r2, #24
 8008df8:	2100      	movs	r1, #0
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f002 f9e5 	bl	800b1ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008e00:	233f      	movs	r3, #63	@ 0x3f
 8008e02:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8008e04:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8008e08:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8008e0a:	f107 030c 	add.w	r3, r7, #12
 8008e0e:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8008e10:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008e14:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 8008e16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8008e20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008e24:	2100      	movs	r1, #0
 8008e26:	4618      	mov	r0, r3
 8008e28:	f000 fb46 	bl	80094b8 <hci_send_req>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	da01      	bge.n	8008e36 <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8008e32:	23ff      	movs	r3, #255	@ 0xff
 8008e34:	e00c      	b.n	8008e50 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8008e36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d002      	beq.n	8008e44 <aci_gatt_add_char+0x182>
    return resp.status;
 8008e3e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008e42:	e005      	b.n	8008e50 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8008e44:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e4c:	801a      	strh	r2, [r3, #0]

  return 0;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3748      	adds	r7, #72	@ 0x48
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8008e58:	b590      	push	{r4, r7, lr}
 8008e5a:	b0ab      	sub	sp, #172	@ 0xac
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	4604      	mov	r4, r0
 8008e60:	4608      	mov	r0, r1
 8008e62:	4611      	mov	r1, r2
 8008e64:	461a      	mov	r2, r3
 8008e66:	4623      	mov	r3, r4
 8008e68:	80fb      	strh	r3, [r7, #6]
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	80bb      	strh	r3, [r7, #4]
 8008e6e:	460b      	mov	r3, r1
 8008e70:	70fb      	strb	r3, [r7, #3]
 8008e72:	4613      	mov	r3, r2
 8008e74:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8008e76:	2300      	movs	r3, #0
 8008e78:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8008e7c:	78bb      	ldrb	r3, [r7, #2]
 8008e7e:	2b7a      	cmp	r3, #122	@ 0x7a
 8008e80:	d901      	bls.n	8008e86 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8008e82:	2342      	movs	r3, #66	@ 0x42
 8008e84:	e074      	b.n	8008f70 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 8008e86:	88fb      	ldrh	r3, [r7, #6]
 8008e88:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8008e8a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008e8e:	f107 0208 	add.w	r2, r7, #8
 8008e92:	4413      	add	r3, r2
 8008e94:	88fa      	ldrh	r2, [r7, #6]
 8008e96:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008e98:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008e9c:	3302      	adds	r3, #2
 8008e9e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 8008ea2:	88bb      	ldrh	r3, [r7, #4]
 8008ea4:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8008ea6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008eaa:	f107 0208 	add.w	r2, r7, #8
 8008eae:	4413      	add	r3, r2
 8008eb0:	88ba      	ldrh	r2, [r7, #4]
 8008eb2:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008eb4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008eb8:	3302      	adds	r3, #2
 8008eba:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 8008ebe:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008ec2:	33a8      	adds	r3, #168	@ 0xa8
 8008ec4:	443b      	add	r3, r7
 8008ec6:	78fa      	ldrb	r2, [r7, #3]
 8008ec8:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008ecc:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 8008ed6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008eda:	33a8      	adds	r3, #168	@ 0xa8
 8008edc:	443b      	add	r3, r7
 8008ede:	78ba      	ldrb	r2, [r7, #2]
 8008ee0:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008ee4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008ee8:	3301      	adds	r3, #1
 8008eea:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8008eee:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008ef2:	f107 0208 	add.w	r2, r7, #8
 8008ef6:	4413      	add	r3, r2
 8008ef8:	78ba      	ldrb	r2, [r7, #2]
 8008efa:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8008efe:	4618      	mov	r0, r3
 8008f00:	f002 f9df 	bl	800b2c2 <memcpy>
  indx +=  charValueLen;
 8008f04:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8008f08:	78bb      	ldrb	r3, [r7, #2]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008f10:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008f14:	2218      	movs	r2, #24
 8008f16:	2100      	movs	r1, #0
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f002 f956 	bl	800b1ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008f1e:	233f      	movs	r3, #63	@ 0x3f
 8008f20:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8008f24:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8008f28:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 8008f2c:	f107 0308 	add.w	r3, r7, #8
 8008f30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 8008f34:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008f38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 8008f3c:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 8008f40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8008f44:	2301      	movs	r3, #1
 8008f46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8008f4a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008f4e:	2100      	movs	r1, #0
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 fab1 	bl	80094b8 <hci_send_req>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	da01      	bge.n	8008f60 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 8008f5c:	23ff      	movs	r3, #255	@ 0xff
 8008f5e:	e007      	b.n	8008f70 <aci_gatt_update_char_value+0x118>

  if (status) {
 8008f60:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d002      	beq.n	8008f6e <aci_gatt_update_char_value+0x116>
    return status;
 8008f68:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8008f6c:	e000      	b.n	8008f70 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	37ac      	adds	r7, #172	@ 0xac
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd90      	pop	{r4, r7, pc}

08008f78 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b08a      	sub	sp, #40	@ 0x28
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	4603      	mov	r3, r0
 8008f80:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8008f82:	88fb      	ldrh	r3, [r7, #6]
 8008f84:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8008f86:	f107 0310 	add.w	r3, r7, #16
 8008f8a:	2218      	movs	r2, #24
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f002 f91b 	bl	800b1ca <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8008f94:	233f      	movs	r3, #63	@ 0x3f
 8008f96:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8008f98:	f240 1327 	movw	r3, #295	@ 0x127
 8008f9c:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 8008f9e:	f107 030c 	add.w	r3, r7, #12
 8008fa2:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8008fa8:	f107 030b 	add.w	r3, r7, #11
 8008fac:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 8008fb2:	f107 0310 	add.w	r3, r7, #16
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f000 fa7d 	bl	80094b8 <hci_send_req>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	da01      	bge.n	8008fc8 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 8008fc4:	23ff      	movs	r3, #255	@ 0xff
 8008fc6:	e000      	b.n	8008fca <aci_gatt_allow_read+0x52>

    return status;
 8008fc8:	7afb      	ldrb	r3, [r7, #11]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3728      	adds	r7, #40	@ 0x28
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b0ac      	sub	sp, #176	@ 0xb0
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	60ba      	str	r2, [r7, #8]
 8008fda:	607b      	str	r3, [r7, #4]
 8008fdc:	4603      	mov	r3, r0
 8008fde:	73fb      	strb	r3, [r7, #15]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
 8008fe6:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008fea:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008fee:	2218      	movs	r2, #24
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f002 f8e9 	bl	800b1ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008ff8:	233f      	movs	r3, #63	@ 0x3f
 8008ffa:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 8008ffe:	230d      	movs	r3, #13
 8009000:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 8009004:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8009008:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 800900c:	2301      	movs	r3, #1
 800900e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 8009012:	f107 0314 	add.w	r3, r7, #20
 8009016:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 800901a:	2380      	movs	r3, #128	@ 0x80
 800901c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009020:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8009024:	2100      	movs	r1, #0
 8009026:	4618      	mov	r0, r3
 8009028:	f000 fa46 	bl	80094b8 <hci_send_req>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	da01      	bge.n	8009036 <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 8009032:	23ff      	movs	r3, #255	@ 0xff
 8009034:	e01e      	b.n	8009074 <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 8009036:	7d3b      	ldrb	r3, [r7, #20]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <aci_hal_read_config_data+0x6e>
    return rp.status;
 800903c:	7d3b      	ldrb	r3, [r7, #20]
 800903e:	e019      	b.n	8009074 <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 8009040:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009044:	b2db      	uxtb	r3, r3
 8009046:	3b01      	subs	r3, #1
 8009048:	b2da      	uxtb	r2, r3
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	89bb      	ldrh	r3, [r7, #12]
 8009056:	4293      	cmp	r3, r2
 8009058:	d201      	bcs.n	800905e <aci_hal_read_config_data+0x8c>
 800905a:	89ba      	ldrh	r2, [r7, #12]
 800905c:	e002      	b.n	8009064 <aci_hal_read_config_data+0x92>
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	461a      	mov	r2, r3
 8009064:	f107 0314 	add.w	r3, r7, #20
 8009068:	3301      	adds	r3, #1
 800906a:	4619      	mov	r1, r3
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f002 f928 	bl	800b2c2 <memcpy>
  
  return 0;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	37b0      	adds	r7, #176	@ 0xb0
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08a      	sub	sp, #40	@ 0x28
 8009080:	af00      	add	r7, sp, #0
 8009082:	4603      	mov	r3, r0
 8009084:	460a      	mov	r2, r1
 8009086:	71fb      	strb	r3, [r7, #7]
 8009088:	4613      	mov	r3, r2
 800908a:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800908c:	79fb      	ldrb	r3, [r7, #7]
 800908e:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8009090:	79bb      	ldrb	r3, [r7, #6]
 8009092:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009094:	f107 0310 	add.w	r3, r7, #16
 8009098:	2218      	movs	r2, #24
 800909a:	2100      	movs	r1, #0
 800909c:	4618      	mov	r0, r3
 800909e:	f002 f894 	bl	800b1ca <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80090a2:	233f      	movs	r3, #63	@ 0x3f
 80090a4:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 80090a6:	230f      	movs	r3, #15
 80090a8:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 80090aa:	f107 030c 	add.w	r3, r7, #12
 80090ae:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 80090b0:	2302      	movs	r3, #2
 80090b2:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 80090b4:	f107 030b 	add.w	r3, r7, #11
 80090b8:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 80090ba:	2301      	movs	r3, #1
 80090bc:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 80090be:	f107 0310 	add.w	r3, r7, #16
 80090c2:	2100      	movs	r1, #0
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 f9f7 	bl	80094b8 <hci_send_req>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	da01      	bge.n	80090d4 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 80090d0:	23ff      	movs	r3, #255	@ 0xff
 80090d2:	e000      	b.n	80090d6 <aci_hal_set_tx_power_level+0x5a>

  return status;
 80090d4:	7afb      	ldrb	r3, [r7, #11]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3728      	adds	r7, #40	@ 0x28
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 80090de:	b590      	push	{r4, r7, lr}
 80090e0:	b089      	sub	sp, #36	@ 0x24
 80090e2:	af02      	add	r7, sp, #8
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 80090e8:	f107 0410 	add.w	r4, r7, #16
 80090ec:	f107 0215 	add.w	r2, r7, #21
 80090f0:	f107 0112 	add.w	r1, r7, #18
 80090f4:	f107 0016 	add.w	r0, r7, #22
 80090f8:	f107 030e 	add.w	r3, r7, #14
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	4623      	mov	r3, r4
 8009100:	f000 f851 	bl	80091a6 <hci_le_read_local_version>
 8009104:	4603      	mov	r3, r0
 8009106:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8009108:	7dfb      	ldrb	r3, [r7, #23]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d124      	bne.n	8009158 <getBlueNRGVersion+0x7a>
    *hwVersion = hci_revision >> 8;
 800910e:	8a7b      	ldrh	r3, [r7, #18]
 8009110:	0a1b      	lsrs	r3, r3, #8
 8009112:	b29b      	uxth	r3, r3
 8009114:	b2da      	uxtb	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800911a:	8a7b      	ldrh	r3, [r7, #18]
 800911c:	021b      	lsls	r3, r3, #8
 800911e:	b29a      	uxth	r2, r3
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	b21a      	sxth	r2, r3
 800912a:	89fb      	ldrh	r3, [r7, #14]
 800912c:	b21b      	sxth	r3, r3
 800912e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009132:	b21b      	sxth	r3, r3
 8009134:	4313      	orrs	r3, r2
 8009136:	b21b      	sxth	r3, r3
 8009138:	b29a      	uxth	r2, r3
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	881b      	ldrh	r3, [r3, #0]
 8009142:	b21a      	sxth	r2, r3
 8009144:	89fb      	ldrh	r3, [r7, #14]
 8009146:	b21b      	sxth	r3, r3
 8009148:	f003 030f 	and.w	r3, r3, #15
 800914c:	b21b      	sxth	r3, r3
 800914e:	4313      	orrs	r3, r2
 8009150:	b21b      	sxth	r3, r3
 8009152:	b29a      	uxth	r2, r3
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8009158:	7dfb      	ldrb	r3, [r7, #23]
}
 800915a:	4618      	mov	r0, r3
 800915c:	371c      	adds	r7, #28
 800915e:	46bd      	mov	sp, r7
 8009160:	bd90      	pop	{r4, r7, pc}

08009162 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b088      	sub	sp, #32
 8009166:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009168:	f107 0308 	add.w	r3, r7, #8
 800916c:	2218      	movs	r2, #24
 800916e:	2100      	movs	r1, #0
 8009170:	4618      	mov	r0, r3
 8009172:	f002 f82a 	bl	800b1ca <memset>
  rq.ogf = OGF_HOST_CTL;
 8009176:	2303      	movs	r3, #3
 8009178:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 800917a:	2303      	movs	r3, #3
 800917c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800917e:	1dfb      	adds	r3, r7, #7
 8009180:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009182:	2301      	movs	r3, #1
 8009184:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009186:	f107 0308 	add.w	r3, r7, #8
 800918a:	2100      	movs	r1, #0
 800918c:	4618      	mov	r0, r3
 800918e:	f000 f993 	bl	80094b8 <hci_send_req>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	da01      	bge.n	800919c <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8009198:	23ff      	movs	r3, #255	@ 0xff
 800919a:	e000      	b.n	800919e <hci_reset+0x3c>
  
  return status;  
 800919c:	79fb      	ldrb	r3, [r7, #7]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3720      	adds	r7, #32
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b08e      	sub	sp, #56	@ 0x38
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	60f8      	str	r0, [r7, #12]
 80091ae:	60b9      	str	r1, [r7, #8]
 80091b0:	607a      	str	r2, [r7, #4]
 80091b2:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80091b4:	f107 0314 	add.w	r3, r7, #20
 80091b8:	2209      	movs	r2, #9
 80091ba:	2100      	movs	r1, #0
 80091bc:	4618      	mov	r0, r3
 80091be:	f002 f804 	bl	800b1ca <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80091c2:	f107 0320 	add.w	r3, r7, #32
 80091c6:	2218      	movs	r2, #24
 80091c8:	2100      	movs	r1, #0
 80091ca:	4618      	mov	r0, r3
 80091cc:	f001 fffd 	bl	800b1ca <memset>
  rq.ogf = OGF_INFO_PARAM;
 80091d0:	2304      	movs	r3, #4
 80091d2:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 80091d4:	2301      	movs	r3, #1
 80091d6:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 80091d8:	2300      	movs	r3, #0
 80091da:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 80091dc:	2300      	movs	r3, #0
 80091de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 80091e0:	f107 0314 	add.w	r3, r7, #20
 80091e4:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 80091e6:	2309      	movs	r3, #9
 80091e8:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80091ea:	f107 0320 	add.w	r3, r7, #32
 80091ee:	2100      	movs	r1, #0
 80091f0:	4618      	mov	r0, r3
 80091f2:	f000 f961 	bl	80094b8 <hci_send_req>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	da01      	bge.n	8009200 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 80091fc:	23ff      	movs	r3, #255	@ 0xff
 80091fe:	e018      	b.n	8009232 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8009200:	7d3b      	ldrb	r3, [r7, #20]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <hci_le_read_local_version+0x64>
    return resp.status;
 8009206:	7d3b      	ldrb	r3, [r7, #20]
 8009208:	e013      	b.n	8009232 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 800920a:	7d7a      	ldrb	r2, [r7, #21]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8009210:	8afa      	ldrh	r2, [r7, #22]
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8009216:	7e3a      	ldrb	r2, [r7, #24]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800921c:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8009220:	b29a      	uxth	r2, r3
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8009226:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800922a:	b29a      	uxth	r2, r3
 800922c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800922e:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3738      	adds	r7, #56	@ 0x38
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b092      	sub	sp, #72	@ 0x48
 800923e:	af00      	add	r7, sp, #0
 8009240:	4603      	mov	r3, r0
 8009242:	6039      	str	r1, [r7, #0]
 8009244:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8009246:	f107 0310 	add.w	r3, r7, #16
 800924a:	2220      	movs	r2, #32
 800924c:	2100      	movs	r1, #0
 800924e:	4618      	mov	r0, r3
 8009250:	f001 ffbb 	bl	800b1ca <memset>
  scan_resp_cp.length = length;
 8009254:	79fb      	ldrb	r3, [r7, #7]
 8009256:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8009258:	79fb      	ldrb	r3, [r7, #7]
 800925a:	2b1f      	cmp	r3, #31
 800925c:	bf28      	it	cs
 800925e:	231f      	movcs	r3, #31
 8009260:	b2db      	uxtb	r3, r3
 8009262:	461a      	mov	r2, r3
 8009264:	f107 0310 	add.w	r3, r7, #16
 8009268:	3301      	adds	r3, #1
 800926a:	6839      	ldr	r1, [r7, #0]
 800926c:	4618      	mov	r0, r3
 800926e:	f002 f828 	bl	800b2c2 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009272:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009276:	2218      	movs	r2, #24
 8009278:	2100      	movs	r1, #0
 800927a:	4618      	mov	r0, r3
 800927c:	f001 ffa5 	bl	800b1ca <memset>
  rq.ogf = OGF_LE_CTL;
 8009280:	2308      	movs	r3, #8
 8009282:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8009284:	2309      	movs	r3, #9
 8009286:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 8009288:	f107 0310 	add.w	r3, r7, #16
 800928c:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800928e:	2320      	movs	r3, #32
 8009290:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 8009292:	f107 030f 	add.w	r3, r7, #15
 8009296:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 8009298:	2301      	movs	r3, #1
 800929a:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 800929c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80092a0:	2100      	movs	r1, #0
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 f908 	bl	80094b8 <hci_send_req>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	da01      	bge.n	80092b2 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 80092ae:	23ff      	movs	r3, #255	@ 0xff
 80092b0:	e000      	b.n	80092b4 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3748      	adds	r7, #72	@ 0x48
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	3308      	adds	r3, #8
 80092c8:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	2b04      	cmp	r3, #4
 80092d0:	d001      	beq.n	80092d6 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 80092d2:	2301      	movs	r3, #1
 80092d4:	e00c      	b.n	80092f0 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	3302      	adds	r3, #2
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	461a      	mov	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80092e4:	3b03      	subs	r3, #3
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d001      	beq.n	80092ee <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80092ea:	2302      	movs	r3, #2
 80092ec:	e000      	b.n	80092f0 <verify_packet+0x34>
  
  return 0;      
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3714      	adds	r7, #20
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b0a6      	sub	sp, #152	@ 0x98
 8009300:	af00      	add	r7, sp, #0
 8009302:	607b      	str	r3, [r7, #4]
 8009304:	4603      	mov	r3, r0
 8009306:	81fb      	strh	r3, [r7, #14]
 8009308:	460b      	mov	r3, r1
 800930a:	81bb      	strh	r3, [r7, #12]
 800930c:	4613      	mov	r3, r2
 800930e:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8009310:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009318:	b21a      	sxth	r2, r3
 800931a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800931e:	029b      	lsls	r3, r3, #10
 8009320:	b21b      	sxth	r3, r3
 8009322:	4313      	orrs	r3, r2
 8009324:	b21b      	sxth	r3, r3
 8009326:	b29b      	uxth	r3, r3
 8009328:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800932a:	7afb      	ldrb	r3, [r7, #11]
 800932c:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800932e:	2301      	movs	r3, #1
 8009330:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8009332:	f107 0318 	add.w	r3, r7, #24
 8009336:	3301      	adds	r3, #1
 8009338:	461a      	mov	r2, r3
 800933a:	f107 0314 	add.w	r3, r7, #20
 800933e:	8819      	ldrh	r1, [r3, #0]
 8009340:	789b      	ldrb	r3, [r3, #2]
 8009342:	8011      	strh	r1, [r2, #0]
 8009344:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8009346:	f107 0318 	add.w	r3, r7, #24
 800934a:	3304      	adds	r3, #4
 800934c:	7afa      	ldrb	r2, [r7, #11]
 800934e:	6879      	ldr	r1, [r7, #4]
 8009350:	4618      	mov	r0, r3
 8009352:	f001 ffb6 	bl	800b2c2 <memcpy>
  
  if (hciContext.io.Send)
 8009356:	4b09      	ldr	r3, [pc, #36]	@ (800937c <send_cmd+0x80>)
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d009      	beq.n	8009372 <send_cmd+0x76>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800935e:	4b07      	ldr	r3, [pc, #28]	@ (800937c <send_cmd+0x80>)
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	7afa      	ldrb	r2, [r7, #11]
 8009364:	b292      	uxth	r2, r2
 8009366:	3204      	adds	r2, #4
 8009368:	b291      	uxth	r1, r2
 800936a:	f107 0218 	add.w	r2, r7, #24
 800936e:	4610      	mov	r0, r2
 8009370:	4798      	blx	r3
  }
}
 8009372:	bf00      	nop
 8009374:	3798      	adds	r7, #152	@ 0x98
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	20001fdc 	.word	0x20001fdc

08009380 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800938a:	e00a      	b.n	80093a2 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800938c:	f107 030c 	add.w	r3, r7, #12
 8009390:	4619      	mov	r1, r3
 8009392:	6838      	ldr	r0, [r7, #0]
 8009394:	f000 fae8 	bl	8009968 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	4619      	mov	r1, r3
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fa4f 	bl	8009840 <list_insert_head>
  while (!list_is_empty(src_list))
 80093a2:	6838      	ldr	r0, [r7, #0]
 80093a4:	f000 fa2a 	bl	80097fc <list_is_empty>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0ee      	beq.n	800938c <move_list+0xc>
  }
}
 80093ae:	bf00      	nop
 80093b0:	bf00      	nop
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80093be:	e009      	b.n	80093d4 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80093c0:	1d3b      	adds	r3, r7, #4
 80093c2:	4619      	mov	r1, r3
 80093c4:	4809      	ldr	r0, [pc, #36]	@ (80093ec <free_event_list+0x34>)
 80093c6:	f000 faa8 	bl	800991a <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4619      	mov	r1, r3
 80093ce:	4808      	ldr	r0, [pc, #32]	@ (80093f0 <free_event_list+0x38>)
 80093d0:	f000 fa5c 	bl	800988c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80093d4:	4806      	ldr	r0, [pc, #24]	@ (80093f0 <free_event_list+0x38>)
 80093d6:	f000 faee 	bl	80099b6 <list_get_size>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b01      	cmp	r3, #1
 80093de:	ddef      	ble.n	80093c0 <free_event_list+0x8>
  }
}
 80093e0:	bf00      	nop
 80093e2:	bf00      	nop
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	20001d18 	.word	0x20001d18
 80093f0:	20001d10 	.word	0x20001d10

080093f4 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d002      	beq.n	800940a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8009404:	4a18      	ldr	r2, [pc, #96]	@ (8009468 <hci_init+0x74>)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800940a:	4818      	ldr	r0, [pc, #96]	@ (800946c <hci_init+0x78>)
 800940c:	f000 f9e6 	bl	80097dc <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8009410:	4817      	ldr	r0, [pc, #92]	@ (8009470 <hci_init+0x7c>)
 8009412:	f000 f9e3 	bl	80097dc <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8009416:	f7f8 fb11 	bl	8001a3c <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800941a:	2300      	movs	r3, #0
 800941c:	73fb      	strb	r3, [r7, #15]
 800941e:	e00c      	b.n	800943a <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	228c      	movs	r2, #140	@ 0x8c
 8009424:	fb02 f303 	mul.w	r3, r2, r3
 8009428:	4a12      	ldr	r2, [pc, #72]	@ (8009474 <hci_init+0x80>)
 800942a:	4413      	add	r3, r2
 800942c:	4619      	mov	r1, r3
 800942e:	480f      	ldr	r0, [pc, #60]	@ (800946c <hci_init+0x78>)
 8009430:	f000 fa2c 	bl	800988c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009434:	7bfb      	ldrb	r3, [r7, #15]
 8009436:	3301      	adds	r3, #1
 8009438:	73fb      	strb	r3, [r7, #15]
 800943a:	7bfb      	ldrb	r3, [r7, #15]
 800943c:	2b04      	cmp	r3, #4
 800943e:	d9ef      	bls.n	8009420 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8009440:	4b09      	ldr	r3, [pc, #36]	@ (8009468 <hci_init+0x74>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d003      	beq.n	8009450 <hci_init+0x5c>
 8009448:	4b07      	ldr	r3, [pc, #28]	@ (8009468 <hci_init+0x74>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2000      	movs	r0, #0
 800944e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8009450:	4b05      	ldr	r3, [pc, #20]	@ (8009468 <hci_init+0x74>)
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d002      	beq.n	800945e <hci_init+0x6a>
 8009458:	4b03      	ldr	r3, [pc, #12]	@ (8009468 <hci_init+0x74>)
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	4798      	blx	r3
}
 800945e:	bf00      	nop
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	20001fdc 	.word	0x20001fdc
 800946c:	20001d10 	.word	0x20001d10
 8009470:	20001d18 	.word	0x20001d18
 8009474:	20001d20 	.word	0x20001d20

08009478 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a0b      	ldr	r2, [pc, #44]	@ (80094b4 <hci_register_io_bus+0x3c>)
 8009486:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	4a09      	ldr	r2, [pc, #36]	@ (80094b4 <hci_register_io_bus+0x3c>)
 800948e:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	4a07      	ldr	r2, [pc, #28]	@ (80094b4 <hci_register_io_bus+0x3c>)
 8009496:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	4a05      	ldr	r2, [pc, #20]	@ (80094b4 <hci_register_io_bus+0x3c>)
 800949e:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	4a03      	ldr	r2, [pc, #12]	@ (80094b4 <hci_register_io_bus+0x3c>)
 80094a6:	6093      	str	r3, [r2, #8]
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr
 80094b4:	20001fdc 	.word	0x20001fdc

080094b8 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b08e      	sub	sp, #56	@ 0x38
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	460b      	mov	r3, r1
 80094c2:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	885b      	ldrh	r3, [r3, #2]
 80094c8:	b21b      	sxth	r3, r3
 80094ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094ce:	b21a      	sxth	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	b21b      	sxth	r3, r3
 80094d6:	029b      	lsls	r3, r3, #10
 80094d8:	b21b      	sxth	r3, r3
 80094da:	4313      	orrs	r3, r2
 80094dc:	b21b      	sxth	r3, r3
 80094de:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80094e0:	2300      	movs	r3, #0
 80094e2:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80094e4:	f107 0308 	add.w	r3, r7, #8
 80094e8:	4618      	mov	r0, r3
 80094ea:	f000 f977 	bl	80097dc <list_init_head>

  free_event_list();
 80094ee:	f7ff ff63 	bl	80093b8 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	8818      	ldrh	r0, [r3, #0]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	8859      	ldrh	r1, [r3, #2]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f7ff fefa 	bl	80092fc <send_cmd>
  
  if (async)
 8009508:	78fb      	ldrb	r3, [r7, #3]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <hci_send_req+0x5a>
  {
    return 0;
 800950e:	2300      	movs	r3, #0
 8009510:	e0e2      	b.n	80096d8 <hci_send_req+0x220>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8009512:	f7fa f8a5 	bl	8003660 <HAL_GetTick>
 8009516:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8009518:	f7fa f8a2 	bl	8003660 <HAL_GetTick>
 800951c:	4602      	mov	r2, r0
 800951e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009526:	f200 80b3 	bhi.w	8009690 <hci_send_req+0x1d8>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800952a:	486d      	ldr	r0, [pc, #436]	@ (80096e0 <hci_send_req+0x228>)
 800952c:	f000 f966 	bl	80097fc <list_is_empty>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d000      	beq.n	8009538 <hci_send_req+0x80>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8009536:	e7ef      	b.n	8009518 <hci_send_req+0x60>
      {
        break;
 8009538:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800953a:	f107 0310 	add.w	r3, r7, #16
 800953e:	4619      	mov	r1, r3
 8009540:	4867      	ldr	r0, [pc, #412]	@ (80096e0 <hci_send_req+0x228>)
 8009542:	f000 f9ea 	bl	800991a <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	3308      	adds	r3, #8
 800954a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800954c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	2b04      	cmp	r3, #4
 8009552:	d17f      	bne.n	8009654 <hci_send_req+0x19c>
    {
      event_pckt = (void *)(hci_hdr->data);
 8009554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009556:	3301      	adds	r3, #1
 8009558:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	3308      	adds	r3, #8
 800955e:	3303      	adds	r3, #3
 8009560:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009568:	3b03      	subs	r3, #3
 800956a:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800956c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	2b3e      	cmp	r3, #62	@ 0x3e
 8009572:	d04c      	beq.n	800960e <hci_send_req+0x156>
 8009574:	2b3e      	cmp	r3, #62	@ 0x3e
 8009576:	dc68      	bgt.n	800964a <hci_send_req+0x192>
 8009578:	2b10      	cmp	r3, #16
 800957a:	f000 808b 	beq.w	8009694 <hci_send_req+0x1dc>
 800957e:	2b10      	cmp	r3, #16
 8009580:	dc63      	bgt.n	800964a <hci_send_req+0x192>
 8009582:	2b0e      	cmp	r3, #14
 8009584:	d023      	beq.n	80095ce <hci_send_req+0x116>
 8009586:	2b0f      	cmp	r3, #15
 8009588:	d15f      	bne.n	800964a <hci_send_req+0x192>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800958a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958c:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	885b      	ldrh	r3, [r3, #2]
 8009592:	b29b      	uxth	r3, r3
 8009594:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009596:	429a      	cmp	r2, r3
 8009598:	d17e      	bne.n	8009698 <hci_send_req+0x1e0>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	2b0f      	cmp	r3, #15
 80095a0:	d004      	beq.n	80095ac <hci_send_req+0xf4>
          if (cs->status) {
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d051      	beq.n	800964e <hci_send_req+0x196>
            goto failed;
 80095aa:	e078      	b.n	800969e <hci_send_req+0x1e6>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	695a      	ldr	r2, [r3, #20]
 80095b0:	6a3b      	ldr	r3, [r7, #32]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	bf28      	it	cs
 80095b6:	461a      	movcs	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6918      	ldr	r0, [r3, #16]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	695b      	ldr	r3, [r3, #20]
 80095c4:	461a      	mov	r2, r3
 80095c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80095c8:	f001 fe7b 	bl	800b2c2 <memcpy>
        goto done;
 80095cc:	e078      	b.n	80096c0 <hci_send_req+0x208>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 80095ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d0:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80095d8:	b29b      	uxth	r3, r3
 80095da:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80095dc:	429a      	cmp	r2, r3
 80095de:	d15d      	bne.n	800969c <hci_send_req+0x1e4>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 80095e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e2:	3303      	adds	r3, #3
 80095e4:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80095e6:	6a3b      	ldr	r3, [r7, #32]
 80095e8:	3b03      	subs	r3, #3
 80095ea:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	695a      	ldr	r2, [r3, #20]
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	bf28      	it	cs
 80095f6:	461a      	movcs	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6918      	ldr	r0, [r3, #16]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	695b      	ldr	r3, [r3, #20]
 8009604:	461a      	mov	r2, r3
 8009606:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009608:	f001 fe5b 	bl	800b2c2 <memcpy>
        goto done;
 800960c:	e058      	b.n	80096c0 <hci_send_req+0x208>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800960e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009610:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	429a      	cmp	r2, r3
 800961e:	d118      	bne.n	8009652 <hci_send_req+0x19a>
          break;
      
        len -= 1;
 8009620:	6a3b      	ldr	r3, [r7, #32]
 8009622:	3b01      	subs	r3, #1
 8009624:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	695a      	ldr	r2, [r3, #20]
 800962a:	6a3b      	ldr	r3, [r7, #32]
 800962c:	429a      	cmp	r2, r3
 800962e:	bf28      	it	cs
 8009630:	461a      	movcs	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6918      	ldr	r0, [r3, #16]
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	1c59      	adds	r1, r3, #1
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	695b      	ldr	r3, [r3, #20]
 8009642:	461a      	mov	r2, r3
 8009644:	f001 fe3d 	bl	800b2c2 <memcpy>
        goto done;
 8009648:	e03a      	b.n	80096c0 <hci_send_req+0x208>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800964a:	bf00      	nop
 800964c:	e002      	b.n	8009654 <hci_send_req+0x19c>
          break;
 800964e:	bf00      	nop
 8009650:	e000      	b.n	8009654 <hci_send_req+0x19c>
          break;
 8009652:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8009654:	4823      	ldr	r0, [pc, #140]	@ (80096e4 <hci_send_req+0x22c>)
 8009656:	f000 f8d1 	bl	80097fc <list_is_empty>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00d      	beq.n	800967c <hci_send_req+0x1c4>
 8009660:	481f      	ldr	r0, [pc, #124]	@ (80096e0 <hci_send_req+0x228>)
 8009662:	f000 f8cb 	bl	80097fc <list_is_empty>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d007      	beq.n	800967c <hci_send_req+0x1c4>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	4619      	mov	r1, r3
 8009670:	481c      	ldr	r0, [pc, #112]	@ (80096e4 <hci_send_req+0x22c>)
 8009672:	f000 f90b 	bl	800988c <list_insert_tail>
      hciReadPacket=NULL;
 8009676:	2300      	movs	r3, #0
 8009678:	613b      	str	r3, [r7, #16]
 800967a:	e008      	b.n	800968e <hci_send_req+0x1d6>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	f107 0308 	add.w	r3, r7, #8
 8009682:	4611      	mov	r1, r2
 8009684:	4618      	mov	r0, r3
 8009686:	f000 f901 	bl	800988c <list_insert_tail>
      hciReadPacket=NULL;
 800968a:	2300      	movs	r3, #0
 800968c:	613b      	str	r3, [r7, #16]
  {
 800968e:	e740      	b.n	8009512 <hci_send_req+0x5a>
        goto failed;
 8009690:	bf00      	nop
 8009692:	e004      	b.n	800969e <hci_send_req+0x1e6>
        goto failed;
 8009694:	bf00      	nop
 8009696:	e002      	b.n	800969e <hci_send_req+0x1e6>
          goto failed;
 8009698:	bf00      	nop
 800969a:	e000      	b.n	800969e <hci_send_req+0x1e6>
          goto failed;
 800969c:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d004      	beq.n	80096ae <hci_send_req+0x1f6>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	4619      	mov	r1, r3
 80096a8:	480e      	ldr	r0, [pc, #56]	@ (80096e4 <hci_send_req+0x22c>)
 80096aa:	f000 f8c9 	bl	8009840 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80096ae:	f107 0308 	add.w	r3, r7, #8
 80096b2:	4619      	mov	r1, r3
 80096b4:	480a      	ldr	r0, [pc, #40]	@ (80096e0 <hci_send_req+0x228>)
 80096b6:	f7ff fe63 	bl	8009380 <move_list>

  return -1;
 80096ba:	f04f 33ff 	mov.w	r3, #4294967295
 80096be:	e00b      	b.n	80096d8 <hci_send_req+0x220>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	4619      	mov	r1, r3
 80096c4:	4807      	ldr	r0, [pc, #28]	@ (80096e4 <hci_send_req+0x22c>)
 80096c6:	f000 f8bb 	bl	8009840 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80096ca:	f107 0308 	add.w	r3, r7, #8
 80096ce:	4619      	mov	r1, r3
 80096d0:	4803      	ldr	r0, [pc, #12]	@ (80096e0 <hci_send_req+0x228>)
 80096d2:	f7ff fe55 	bl	8009380 <move_list>

  return 0;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3738      	adds	r7, #56	@ 0x38
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	20001d18 	.word	0x20001d18
 80096e4:	20001d10 	.word	0x20001d10

080096e8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80096ee:	2300      	movs	r3, #0
 80096f0:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80096f2:	e013      	b.n	800971c <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80096f4:	1d3b      	adds	r3, r7, #4
 80096f6:	4619      	mov	r1, r3
 80096f8:	480e      	ldr	r0, [pc, #56]	@ (8009734 <hci_user_evt_proc+0x4c>)
 80096fa:	f000 f90e 	bl	800991a <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80096fe:	4b0e      	ldr	r3, [pc, #56]	@ (8009738 <hci_user_evt_proc+0x50>)
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d005      	beq.n	8009712 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8009706:	4b0c      	ldr	r3, [pc, #48]	@ (8009738 <hci_user_evt_proc+0x50>)
 8009708:	69db      	ldr	r3, [r3, #28]
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	3208      	adds	r2, #8
 800970e:	4610      	mov	r0, r2
 8009710:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4619      	mov	r1, r3
 8009716:	4809      	ldr	r0, [pc, #36]	@ (800973c <hci_user_evt_proc+0x54>)
 8009718:	f000 f8b8 	bl	800988c <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800971c:	4805      	ldr	r0, [pc, #20]	@ (8009734 <hci_user_evt_proc+0x4c>)
 800971e:	f000 f86d 	bl	80097fc <list_is_empty>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d0e5      	beq.n	80096f4 <hci_user_evt_proc+0xc>
  }
}
 8009728:	bf00      	nop
 800972a:	bf00      	nop
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	20001d18 	.word	0x20001d18
 8009738:	20001fdc 	.word	0x20001fdc
 800973c:	20001d10 	.word	0x20001d10

08009740 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8009748:	2300      	movs	r3, #0
 800974a:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800974c:	2300      	movs	r3, #0
 800974e:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8009750:	481f      	ldr	r0, [pc, #124]	@ (80097d0 <hci_notify_asynch_evt+0x90>)
 8009752:	f000 f853 	bl	80097fc <list_is_empty>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d132      	bne.n	80097c2 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800975c:	f107 030c 	add.w	r3, r7, #12
 8009760:	4619      	mov	r1, r3
 8009762:	481b      	ldr	r0, [pc, #108]	@ (80097d0 <hci_notify_asynch_evt+0x90>)
 8009764:	f000 f8d9 	bl	800991a <list_remove_head>
    
    if (hciContext.io.Receive)
 8009768:	4b1a      	ldr	r3, [pc, #104]	@ (80097d4 <hci_notify_asynch_evt+0x94>)
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d02a      	beq.n	80097c6 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8009770:	4b18      	ldr	r3, [pc, #96]	@ (80097d4 <hci_notify_asynch_evt+0x94>)
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	3208      	adds	r2, #8
 8009778:	2180      	movs	r1, #128	@ 0x80
 800977a:	4610      	mov	r0, r2
 800977c:	4798      	blx	r3
 800977e:	4603      	mov	r3, r0
 8009780:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8009782:	7cfb      	ldrb	r3, [r7, #19]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d016      	beq.n	80097b6 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	7cfa      	ldrb	r2, [r7, #19]
 800978c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	4618      	mov	r0, r3
 8009794:	f7ff fd92 	bl	80092bc <verify_packet>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d105      	bne.n	80097aa <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	4619      	mov	r1, r3
 80097a2:	480d      	ldr	r0, [pc, #52]	@ (80097d8 <hci_notify_asynch_evt+0x98>)
 80097a4:	f000 f872 	bl	800988c <list_insert_tail>
 80097a8:	e00d      	b.n	80097c6 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	4619      	mov	r1, r3
 80097ae:	4808      	ldr	r0, [pc, #32]	@ (80097d0 <hci_notify_asynch_evt+0x90>)
 80097b0:	f000 f846 	bl	8009840 <list_insert_head>
 80097b4:	e007      	b.n	80097c6 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	4619      	mov	r1, r3
 80097ba:	4805      	ldr	r0, [pc, #20]	@ (80097d0 <hci_notify_asynch_evt+0x90>)
 80097bc:	f000 f840 	bl	8009840 <list_insert_head>
 80097c0:	e001      	b.n	80097c6 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 80097c2:	2301      	movs	r3, #1
 80097c4:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80097c6:	697b      	ldr	r3, [r7, #20]

}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3718      	adds	r7, #24
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	20001d10 	.word	0x20001d10
 80097d4:	20001fdc 	.word	0x20001fdc
 80097d8:	20001d18 	.word	0x20001d18

080097dc <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	605a      	str	r2, [r3, #4]
}
 80097f0:	bf00      	nop
 80097f2:	370c      	adds	r7, #12
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009804:	f3ef 8310 	mrs	r3, PRIMASK
 8009808:	60fb      	str	r3, [r7, #12]
  return(result);
 800980a:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800980c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800980e:	b672      	cpsid	i
}
 8009810:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	429a      	cmp	r2, r3
 800981a:	d102      	bne.n	8009822 <list_is_empty+0x26>
  {
    return_value = 1;
 800981c:	2301      	movs	r3, #1
 800981e:	75fb      	strb	r3, [r7, #23]
 8009820:	e001      	b.n	8009826 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8009822:	2300      	movs	r3, #0
 8009824:	75fb      	strb	r3, [r7, #23]
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	f383 8810 	msr	PRIMASK, r3
}
 8009830:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8009832:	7dfb      	ldrb	r3, [r7, #23]
}
 8009834:	4618      	mov	r0, r3
 8009836:	371c      	adds	r7, #28
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8009840:	b480      	push	{r7}
 8009842:	b087      	sub	sp, #28
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800984a:	f3ef 8310 	mrs	r3, PRIMASK
 800984e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009850:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009852:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009854:	b672      	cpsid	i
}
 8009856:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	683a      	ldr	r2, [r7, #0]
 800986a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	683a      	ldr	r2, [r7, #0]
 8009872:	605a      	str	r2, [r3, #4]
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	f383 8810 	msr	PRIMASK, r3
}
 800987e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009880:	bf00      	nop
 8009882:	371c      	adds	r7, #28
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800988c:	b480      	push	{r7}
 800988e:	b087      	sub	sp, #28
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009896:	f3ef 8310 	mrs	r3, PRIMASK
 800989a:	60fb      	str	r3, [r7, #12]
  return(result);
 800989c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800989e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80098a0:	b672      	cpsid	i
}
 80098a2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	685a      	ldr	r2, [r3, #4]
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	683a      	ldr	r2, [r7, #0]
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	f383 8810 	msr	PRIMASK, r3
}
 80098ca:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80098cc:	bf00      	nop
 80098ce:	371c      	adds	r7, #28
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 80098d8:	b480      	push	{r7}
 80098da:	b087      	sub	sp, #28
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098e0:	f3ef 8310 	mrs	r3, PRIMASK
 80098e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80098e6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80098e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80098ea:	b672      	cpsid	i
}
 80098ec:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	6812      	ldr	r2, [r2, #0]
 80098f6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	6852      	ldr	r2, [r2, #4]
 8009900:	605a      	str	r2, [r3, #4]
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	f383 8810 	msr	PRIMASK, r3
}
 800990c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800990e:	bf00      	nop
 8009910:	371c      	adds	r7, #28
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b086      	sub	sp, #24
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009924:	f3ef 8310 	mrs	r3, PRIMASK
 8009928:	60fb      	str	r3, [r7, #12]
  return(result);
 800992a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800992c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800992e:	b672      	cpsid	i
}
 8009930:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4618      	mov	r0, r3
 8009940:	f7ff ffca 	bl	80098d8 <list_remove_node>
  (*node)->next = NULL;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2200      	movs	r2, #0
 800994a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2200      	movs	r2, #0
 8009952:	605a      	str	r2, [r3, #4]
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	f383 8810 	msr	PRIMASK, r3
}
 800995e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009960:	bf00      	nop
 8009962:	3718      	adds	r7, #24
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b086      	sub	sp, #24
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009972:	f3ef 8310 	mrs	r3, PRIMASK
 8009976:	60fb      	str	r3, [r7, #12]
  return(result);
 8009978:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800997a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800997c:	b672      	cpsid	i
}
 800997e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685a      	ldr	r2, [r3, #4]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	4618      	mov	r0, r3
 800998e:	f7ff ffa3 	bl	80098d8 <list_remove_node>
  (*node)->next = NULL;
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2200      	movs	r2, #0
 8009998:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2200      	movs	r2, #0
 80099a0:	605a      	str	r2, [r3, #4]
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	f383 8810 	msr	PRIMASK, r3
}
 80099ac:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80099ae:	bf00      	nop
 80099b0:	3718      	adds	r7, #24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b089      	sub	sp, #36	@ 0x24
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
  int size = 0;
 80099be:	2300      	movs	r3, #0
 80099c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099c2:	f3ef 8310 	mrs	r3, PRIMASK
 80099c6:	613b      	str	r3, [r7, #16]
  return(result);
 80099c8:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80099ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80099cc:	b672      	cpsid	i
}
 80099ce:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80099d6:	e005      	b.n	80099e4 <list_get_size+0x2e>
  {
    size++;
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	3301      	adds	r3, #1
 80099dc:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80099e4:	69ba      	ldr	r2, [r7, #24]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d1f5      	bne.n	80099d8 <list_get_size+0x22>
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f383 8810 	msr	PRIMASK, r3
}
 80099f6:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80099f8:	69fb      	ldr	r3, [r7, #28]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3724      	adds	r7, #36	@ 0x24
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr

08009a06 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009a06:	b480      	push	{r7}
 8009a08:	b085      	sub	sp, #20
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009a10:	2300      	movs	r3, #0
 8009a12:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a18:	2b84      	cmp	r3, #132	@ 0x84
 8009a1a:	d005      	beq.n	8009a28 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009a1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4413      	add	r3, r2
 8009a24:	3303      	adds	r3, #3
 8009a26:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009a28:	68fb      	ldr	r3, [r7, #12]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3714      	adds	r7, #20
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009a3a:	f000 fae5 	bl	800a008 <vTaskStartScheduler>
  
  return osOK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a46:	b089      	sub	sp, #36	@ 0x24
 8009a48:	af04      	add	r7, sp, #16
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	695b      	ldr	r3, [r3, #20]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d020      	beq.n	8009a98 <osThreadCreate+0x54>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d01c      	beq.n	8009a98 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	685c      	ldr	r4, [r3, #4]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	691e      	ldr	r6, [r3, #16]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7ff ffc8 	bl	8009a06 <makeFreeRtosPriority>
 8009a76:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	695b      	ldr	r3, [r3, #20]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a80:	9202      	str	r2, [sp, #8]
 8009a82:	9301      	str	r3, [sp, #4]
 8009a84:	9100      	str	r1, [sp, #0]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	4632      	mov	r2, r6
 8009a8a:	4629      	mov	r1, r5
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f000 f8ed 	bl	8009c6c <xTaskCreateStatic>
 8009a92:	4603      	mov	r3, r0
 8009a94:	60fb      	str	r3, [r7, #12]
 8009a96:	e01c      	b.n	8009ad2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	685c      	ldr	r4, [r3, #4]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009aa4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7ff ffaa 	bl	8009a06 <makeFreeRtosPriority>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	f107 030c 	add.w	r3, r7, #12
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	9200      	str	r2, [sp, #0]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	4632      	mov	r2, r6
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f000 f932 	bl	8009d2c <xTaskCreate>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d001      	beq.n	8009ad2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	e000      	b.n	8009ad4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009adc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <osDelay+0x16>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	e000      	b.n	8009af4 <osDelay+0x18>
 8009af2:	2301      	movs	r3, #1
 8009af4:	4618      	mov	r0, r3
 8009af6:	f000 fa51 	bl	8009f9c <vTaskDelay>
  
  return osOK;
 8009afa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f103 0208 	add.w	r2, r3, #8
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f04f 32ff 	mov.w	r2, #4294967295
 8009b1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f103 0208 	add.w	r2, r3, #8
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f103 0208 	add.w	r2, r3, #8
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b52:	bf00      	nop
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b5e:	b480      	push	{r7}
 8009b60:	b085      	sub	sp, #20
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
 8009b66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	689a      	ldr	r2, [r3, #8]
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	683a      	ldr	r2, [r7, #0]
 8009b82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	1c5a      	adds	r2, r3, #1
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	601a      	str	r2, [r3, #0]
}
 8009b9a:	bf00      	nop
 8009b9c:	3714      	adds	r7, #20
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b085      	sub	sp, #20
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bbc:	d103      	bne.n	8009bc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	60fb      	str	r3, [r7, #12]
 8009bc4:	e00c      	b.n	8009be0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	3308      	adds	r3, #8
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	e002      	b.n	8009bd4 <vListInsert+0x2e>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68ba      	ldr	r2, [r7, #8]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d2f6      	bcs.n	8009bce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	685a      	ldr	r2, [r3, #4]
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	683a      	ldr	r2, [r7, #0]
 8009bee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	683a      	ldr	r2, [r7, #0]
 8009bfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	1c5a      	adds	r2, r3, #1
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	601a      	str	r2, [r3, #0]
}
 8009c0c:	bf00      	nop
 8009c0e:	3714      	adds	r7, #20
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	6892      	ldr	r2, [r2, #8]
 8009c2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	6852      	ldr	r2, [r2, #4]
 8009c38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d103      	bne.n	8009c4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	689a      	ldr	r2, [r3, #8]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	1e5a      	subs	r2, r3, #1
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3714      	adds	r7, #20
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b08e      	sub	sp, #56	@ 0x38
 8009c70:	af04      	add	r7, sp, #16
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10b      	bne.n	8009c98 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009c92:	bf00      	nop
 8009c94:	bf00      	nop
 8009c96:	e7fd      	b.n	8009c94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10b      	bne.n	8009cb6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	61fb      	str	r3, [r7, #28]
}
 8009cb0:	bf00      	nop
 8009cb2:	bf00      	nop
 8009cb4:	e7fd      	b.n	8009cb2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009cb6:	2354      	movs	r3, #84	@ 0x54
 8009cb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	2b54      	cmp	r3, #84	@ 0x54
 8009cbe:	d00b      	beq.n	8009cd8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	61bb      	str	r3, [r7, #24]
}
 8009cd2:	bf00      	nop
 8009cd4:	bf00      	nop
 8009cd6:	e7fd      	b.n	8009cd4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009cd8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d01e      	beq.n	8009d1e <xTaskCreateStatic+0xb2>
 8009ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d01b      	beq.n	8009d1e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009cee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	9303      	str	r3, [sp, #12]
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cfe:	9302      	str	r3, [sp, #8]
 8009d00:	f107 0314 	add.w	r3, r7, #20
 8009d04:	9301      	str	r3, [sp, #4]
 8009d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	68b9      	ldr	r1, [r7, #8]
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 f850 	bl	8009db6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d18:	f000 f8d6 	bl	8009ec8 <prvAddNewTaskToReadyList>
 8009d1c:	e001      	b.n	8009d22 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d22:	697b      	ldr	r3, [r7, #20]
	}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3728      	adds	r7, #40	@ 0x28
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b08c      	sub	sp, #48	@ 0x30
 8009d30:	af04      	add	r7, sp, #16
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	603b      	str	r3, [r7, #0]
 8009d38:	4613      	mov	r3, r2
 8009d3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d3c:	88fb      	ldrh	r3, [r7, #6]
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4618      	mov	r0, r3
 8009d42:	f000 fed1 	bl	800aae8 <pvPortMalloc>
 8009d46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00e      	beq.n	8009d6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d4e:	2054      	movs	r0, #84	@ 0x54
 8009d50:	f000 feca 	bl	800aae8 <pvPortMalloc>
 8009d54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	697a      	ldr	r2, [r7, #20]
 8009d60:	631a      	str	r2, [r3, #48]	@ 0x30
 8009d62:	e005      	b.n	8009d70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d64:	6978      	ldr	r0, [r7, #20]
 8009d66:	f000 ff8d 	bl	800ac84 <vPortFree>
 8009d6a:	e001      	b.n	8009d70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d017      	beq.n	8009da6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d7e:	88fa      	ldrh	r2, [r7, #6]
 8009d80:	2300      	movs	r3, #0
 8009d82:	9303      	str	r3, [sp, #12]
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	9302      	str	r3, [sp, #8]
 8009d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d8a:	9301      	str	r3, [sp, #4]
 8009d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	68b9      	ldr	r1, [r7, #8]
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f000 f80e 	bl	8009db6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d9a:	69f8      	ldr	r0, [r7, #28]
 8009d9c:	f000 f894 	bl	8009ec8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009da0:	2301      	movs	r3, #1
 8009da2:	61bb      	str	r3, [r7, #24]
 8009da4:	e002      	b.n	8009dac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009da6:	f04f 33ff 	mov.w	r3, #4294967295
 8009daa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009dac:	69bb      	ldr	r3, [r7, #24]
	}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3720      	adds	r7, #32
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b088      	sub	sp, #32
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	60f8      	str	r0, [r7, #12]
 8009dbe:	60b9      	str	r1, [r7, #8]
 8009dc0:	607a      	str	r2, [r7, #4]
 8009dc2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4413      	add	r3, r2
 8009dd4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	f023 0307 	bic.w	r3, r3, #7
 8009ddc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	f003 0307 	and.w	r3, r3, #7
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00b      	beq.n	8009e00 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	617b      	str	r3, [r7, #20]
}
 8009dfa:	bf00      	nop
 8009dfc:	bf00      	nop
 8009dfe:	e7fd      	b.n	8009dfc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d01f      	beq.n	8009e46 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e06:	2300      	movs	r3, #0
 8009e08:	61fb      	str	r3, [r7, #28]
 8009e0a:	e012      	b.n	8009e32 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	4413      	add	r3, r2
 8009e12:	7819      	ldrb	r1, [r3, #0]
 8009e14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	4413      	add	r3, r2
 8009e1a:	3334      	adds	r3, #52	@ 0x34
 8009e1c:	460a      	mov	r2, r1
 8009e1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	4413      	add	r3, r2
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d006      	beq.n	8009e3a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	61fb      	str	r3, [r7, #28]
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	2b0f      	cmp	r3, #15
 8009e36:	d9e9      	bls.n	8009e0c <prvInitialiseNewTask+0x56>
 8009e38:	e000      	b.n	8009e3c <prvInitialiseNewTask+0x86>
			{
				break;
 8009e3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009e44:	e003      	b.n	8009e4e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e50:	2b06      	cmp	r3, #6
 8009e52:	d901      	bls.n	8009e58 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e54:	2306      	movs	r3, #6
 8009e56:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e5c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e62:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e66:	2200      	movs	r2, #0
 8009e68:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7ff fe68 	bl	8009b44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e76:	3318      	adds	r3, #24
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7ff fe63 	bl	8009b44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e86:	f1c3 0207 	rsb	r2, r3, #7
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e92:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e96:	2200      	movs	r2, #0
 8009e98:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	68f9      	ldr	r1, [r7, #12]
 8009ea6:	69b8      	ldr	r0, [r7, #24]
 8009ea8:	f000 fc0e 	bl	800a6c8 <pxPortInitialiseStack>
 8009eac:	4602      	mov	r2, r0
 8009eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d002      	beq.n	8009ebe <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ebc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ebe:	bf00      	nop
 8009ec0:	3720      	adds	r7, #32
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
	...

08009ec8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ed0:	f000 fd2a 	bl	800a928 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ed4:	4b2a      	ldr	r3, [pc, #168]	@ (8009f80 <prvAddNewTaskToReadyList+0xb8>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	4a29      	ldr	r2, [pc, #164]	@ (8009f80 <prvAddNewTaskToReadyList+0xb8>)
 8009edc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009ede:	4b29      	ldr	r3, [pc, #164]	@ (8009f84 <prvAddNewTaskToReadyList+0xbc>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d109      	bne.n	8009efa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009ee6:	4a27      	ldr	r2, [pc, #156]	@ (8009f84 <prvAddNewTaskToReadyList+0xbc>)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009eec:	4b24      	ldr	r3, [pc, #144]	@ (8009f80 <prvAddNewTaskToReadyList+0xb8>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d110      	bne.n	8009f16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009ef4:	f000 fac4 	bl	800a480 <prvInitialiseTaskLists>
 8009ef8:	e00d      	b.n	8009f16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009efa:	4b23      	ldr	r3, [pc, #140]	@ (8009f88 <prvAddNewTaskToReadyList+0xc0>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d109      	bne.n	8009f16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f02:	4b20      	ldr	r3, [pc, #128]	@ (8009f84 <prvAddNewTaskToReadyList+0xbc>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d802      	bhi.n	8009f16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f10:	4a1c      	ldr	r2, [pc, #112]	@ (8009f84 <prvAddNewTaskToReadyList+0xbc>)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f16:	4b1d      	ldr	r3, [pc, #116]	@ (8009f8c <prvAddNewTaskToReadyList+0xc4>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8009f8c <prvAddNewTaskToReadyList+0xc4>)
 8009f1e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f24:	2201      	movs	r2, #1
 8009f26:	409a      	lsls	r2, r3
 8009f28:	4b19      	ldr	r3, [pc, #100]	@ (8009f90 <prvAddNewTaskToReadyList+0xc8>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	4a18      	ldr	r2, [pc, #96]	@ (8009f90 <prvAddNewTaskToReadyList+0xc8>)
 8009f30:	6013      	str	r3, [r2, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f36:	4613      	mov	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4a15      	ldr	r2, [pc, #84]	@ (8009f94 <prvAddNewTaskToReadyList+0xcc>)
 8009f40:	441a      	add	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	3304      	adds	r3, #4
 8009f46:	4619      	mov	r1, r3
 8009f48:	4610      	mov	r0, r2
 8009f4a:	f7ff fe08 	bl	8009b5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f4e:	f000 fd1d 	bl	800a98c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f52:	4b0d      	ldr	r3, [pc, #52]	@ (8009f88 <prvAddNewTaskToReadyList+0xc0>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00e      	beq.n	8009f78 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8009f84 <prvAddNewTaskToReadyList+0xbc>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d207      	bcs.n	8009f78 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f68:	4b0b      	ldr	r3, [pc, #44]	@ (8009f98 <prvAddNewTaskToReadyList+0xd0>)
 8009f6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f6e:	601a      	str	r2, [r3, #0]
 8009f70:	f3bf 8f4f 	dsb	sy
 8009f74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f78:	bf00      	nop
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	200020fc 	.word	0x200020fc
 8009f84:	20001ffc 	.word	0x20001ffc
 8009f88:	20002108 	.word	0x20002108
 8009f8c:	20002118 	.word	0x20002118
 8009f90:	20002104 	.word	0x20002104
 8009f94:	20002000 	.word	0x20002000
 8009f98:	e000ed04 	.word	0xe000ed04

08009f9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d018      	beq.n	8009fe0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009fae:	4b14      	ldr	r3, [pc, #80]	@ (800a000 <vTaskDelay+0x64>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d00b      	beq.n	8009fce <vTaskDelay+0x32>
	__asm volatile
 8009fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	60bb      	str	r3, [r7, #8]
}
 8009fc8:	bf00      	nop
 8009fca:	bf00      	nop
 8009fcc:	e7fd      	b.n	8009fca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009fce:	f000 f87d 	bl	800a0cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fb11 	bl	800a5fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009fda:	f000 f885 	bl	800a0e8 <xTaskResumeAll>
 8009fde:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d107      	bne.n	8009ff6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009fe6:	4b07      	ldr	r3, [pc, #28]	@ (800a004 <vTaskDelay+0x68>)
 8009fe8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fec:	601a      	str	r2, [r3, #0]
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ff6:	bf00      	nop
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	20002124 	.word	0x20002124
 800a004:	e000ed04 	.word	0xe000ed04

0800a008 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b08a      	sub	sp, #40	@ 0x28
 800a00c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a00e:	2300      	movs	r3, #0
 800a010:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a012:	2300      	movs	r3, #0
 800a014:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a016:	463a      	mov	r2, r7
 800a018:	1d39      	adds	r1, r7, #4
 800a01a:	f107 0308 	add.w	r3, r7, #8
 800a01e:	4618      	mov	r0, r3
 800a020:	f7f7 fd58 	bl	8001ad4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a024:	6839      	ldr	r1, [r7, #0]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	68ba      	ldr	r2, [r7, #8]
 800a02a:	9202      	str	r2, [sp, #8]
 800a02c:	9301      	str	r3, [sp, #4]
 800a02e:	2300      	movs	r3, #0
 800a030:	9300      	str	r3, [sp, #0]
 800a032:	2300      	movs	r3, #0
 800a034:	460a      	mov	r2, r1
 800a036:	491f      	ldr	r1, [pc, #124]	@ (800a0b4 <vTaskStartScheduler+0xac>)
 800a038:	481f      	ldr	r0, [pc, #124]	@ (800a0b8 <vTaskStartScheduler+0xb0>)
 800a03a:	f7ff fe17 	bl	8009c6c <xTaskCreateStatic>
 800a03e:	4603      	mov	r3, r0
 800a040:	4a1e      	ldr	r2, [pc, #120]	@ (800a0bc <vTaskStartScheduler+0xb4>)
 800a042:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a044:	4b1d      	ldr	r3, [pc, #116]	@ (800a0bc <vTaskStartScheduler+0xb4>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d002      	beq.n	800a052 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a04c:	2301      	movs	r3, #1
 800a04e:	617b      	str	r3, [r7, #20]
 800a050:	e001      	b.n	800a056 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a052:	2300      	movs	r3, #0
 800a054:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d116      	bne.n	800a08a <vTaskStartScheduler+0x82>
	__asm volatile
 800a05c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	613b      	str	r3, [r7, #16]
}
 800a06e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a070:	4b13      	ldr	r3, [pc, #76]	@ (800a0c0 <vTaskStartScheduler+0xb8>)
 800a072:	f04f 32ff 	mov.w	r2, #4294967295
 800a076:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a078:	4b12      	ldr	r3, [pc, #72]	@ (800a0c4 <vTaskStartScheduler+0xbc>)
 800a07a:	2201      	movs	r2, #1
 800a07c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a07e:	4b12      	ldr	r3, [pc, #72]	@ (800a0c8 <vTaskStartScheduler+0xc0>)
 800a080:	2200      	movs	r2, #0
 800a082:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a084:	f000 fbac 	bl	800a7e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a088:	e00f      	b.n	800a0aa <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a090:	d10b      	bne.n	800a0aa <vTaskStartScheduler+0xa2>
	__asm volatile
 800a092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a096:	f383 8811 	msr	BASEPRI, r3
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	60fb      	str	r3, [r7, #12]
}
 800a0a4:	bf00      	nop
 800a0a6:	bf00      	nop
 800a0a8:	e7fd      	b.n	800a0a6 <vTaskStartScheduler+0x9e>
}
 800a0aa:	bf00      	nop
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	0800bfe0 	.word	0x0800bfe0
 800a0b8:	0800a451 	.word	0x0800a451
 800a0bc:	20002120 	.word	0x20002120
 800a0c0:	2000211c 	.word	0x2000211c
 800a0c4:	20002108 	.word	0x20002108
 800a0c8:	20002100 	.word	0x20002100

0800a0cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a0d0:	4b04      	ldr	r3, [pc, #16]	@ (800a0e4 <vTaskSuspendAll+0x18>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	4a03      	ldr	r2, [pc, #12]	@ (800a0e4 <vTaskSuspendAll+0x18>)
 800a0d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a0da:	bf00      	nop
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr
 800a0e4:	20002124 	.word	0x20002124

0800a0e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a0f6:	4b42      	ldr	r3, [pc, #264]	@ (800a200 <xTaskResumeAll+0x118>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d10b      	bne.n	800a116 <xTaskResumeAll+0x2e>
	__asm volatile
 800a0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a102:	f383 8811 	msr	BASEPRI, r3
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	603b      	str	r3, [r7, #0]
}
 800a110:	bf00      	nop
 800a112:	bf00      	nop
 800a114:	e7fd      	b.n	800a112 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a116:	f000 fc07 	bl	800a928 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a11a:	4b39      	ldr	r3, [pc, #228]	@ (800a200 <xTaskResumeAll+0x118>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	3b01      	subs	r3, #1
 800a120:	4a37      	ldr	r2, [pc, #220]	@ (800a200 <xTaskResumeAll+0x118>)
 800a122:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a124:	4b36      	ldr	r3, [pc, #216]	@ (800a200 <xTaskResumeAll+0x118>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d161      	bne.n	800a1f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a12c:	4b35      	ldr	r3, [pc, #212]	@ (800a204 <xTaskResumeAll+0x11c>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d05d      	beq.n	800a1f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a134:	e02e      	b.n	800a194 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a136:	4b34      	ldr	r3, [pc, #208]	@ (800a208 <xTaskResumeAll+0x120>)
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	3318      	adds	r3, #24
 800a142:	4618      	mov	r0, r3
 800a144:	f7ff fd68 	bl	8009c18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	3304      	adds	r3, #4
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7ff fd63 	bl	8009c18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a156:	2201      	movs	r2, #1
 800a158:	409a      	lsls	r2, r3
 800a15a:	4b2c      	ldr	r3, [pc, #176]	@ (800a20c <xTaskResumeAll+0x124>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4313      	orrs	r3, r2
 800a160:	4a2a      	ldr	r2, [pc, #168]	@ (800a20c <xTaskResumeAll+0x124>)
 800a162:	6013      	str	r3, [r2, #0]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a168:	4613      	mov	r3, r2
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	4413      	add	r3, r2
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	4a27      	ldr	r2, [pc, #156]	@ (800a210 <xTaskResumeAll+0x128>)
 800a172:	441a      	add	r2, r3
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	3304      	adds	r3, #4
 800a178:	4619      	mov	r1, r3
 800a17a:	4610      	mov	r0, r2
 800a17c:	f7ff fcef 	bl	8009b5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a184:	4b23      	ldr	r3, [pc, #140]	@ (800a214 <xTaskResumeAll+0x12c>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d302      	bcc.n	800a194 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a18e:	4b22      	ldr	r3, [pc, #136]	@ (800a218 <xTaskResumeAll+0x130>)
 800a190:	2201      	movs	r2, #1
 800a192:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a194:	4b1c      	ldr	r3, [pc, #112]	@ (800a208 <xTaskResumeAll+0x120>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1cc      	bne.n	800a136 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d001      	beq.n	800a1a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a1a2:	f000 fa0b 	bl	800a5bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a1a6:	4b1d      	ldr	r3, [pc, #116]	@ (800a21c <xTaskResumeAll+0x134>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d010      	beq.n	800a1d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a1b2:	f000 f837 	bl	800a224 <xTaskIncrementTick>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d002      	beq.n	800a1c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a1bc:	4b16      	ldr	r3, [pc, #88]	@ (800a218 <xTaskResumeAll+0x130>)
 800a1be:	2201      	movs	r2, #1
 800a1c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1f1      	bne.n	800a1b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a1ce:	4b13      	ldr	r3, [pc, #76]	@ (800a21c <xTaskResumeAll+0x134>)
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a1d4:	4b10      	ldr	r3, [pc, #64]	@ (800a218 <xTaskResumeAll+0x130>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d009      	beq.n	800a1f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a1e0:	4b0f      	ldr	r3, [pc, #60]	@ (800a220 <xTaskResumeAll+0x138>)
 800a1e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1e6:	601a      	str	r2, [r3, #0]
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1f0:	f000 fbcc 	bl	800a98c <vPortExitCritical>

	return xAlreadyYielded;
 800a1f4:	68bb      	ldr	r3, [r7, #8]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	20002124 	.word	0x20002124
 800a204:	200020fc 	.word	0x200020fc
 800a208:	200020bc 	.word	0x200020bc
 800a20c:	20002104 	.word	0x20002104
 800a210:	20002000 	.word	0x20002000
 800a214:	20001ffc 	.word	0x20001ffc
 800a218:	20002110 	.word	0x20002110
 800a21c:	2000210c 	.word	0x2000210c
 800a220:	e000ed04 	.word	0xe000ed04

0800a224 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b086      	sub	sp, #24
 800a228:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a22a:	2300      	movs	r3, #0
 800a22c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a22e:	4b4f      	ldr	r3, [pc, #316]	@ (800a36c <xTaskIncrementTick+0x148>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	f040 808f 	bne.w	800a356 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a238:	4b4d      	ldr	r3, [pc, #308]	@ (800a370 <xTaskIncrementTick+0x14c>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	3301      	adds	r3, #1
 800a23e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a240:	4a4b      	ldr	r2, [pc, #300]	@ (800a370 <xTaskIncrementTick+0x14c>)
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d121      	bne.n	800a290 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a24c:	4b49      	ldr	r3, [pc, #292]	@ (800a374 <xTaskIncrementTick+0x150>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00b      	beq.n	800a26e <xTaskIncrementTick+0x4a>
	__asm volatile
 800a256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a25a:	f383 8811 	msr	BASEPRI, r3
 800a25e:	f3bf 8f6f 	isb	sy
 800a262:	f3bf 8f4f 	dsb	sy
 800a266:	603b      	str	r3, [r7, #0]
}
 800a268:	bf00      	nop
 800a26a:	bf00      	nop
 800a26c:	e7fd      	b.n	800a26a <xTaskIncrementTick+0x46>
 800a26e:	4b41      	ldr	r3, [pc, #260]	@ (800a374 <xTaskIncrementTick+0x150>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	60fb      	str	r3, [r7, #12]
 800a274:	4b40      	ldr	r3, [pc, #256]	@ (800a378 <xTaskIncrementTick+0x154>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a3e      	ldr	r2, [pc, #248]	@ (800a374 <xTaskIncrementTick+0x150>)
 800a27a:	6013      	str	r3, [r2, #0]
 800a27c:	4a3e      	ldr	r2, [pc, #248]	@ (800a378 <xTaskIncrementTick+0x154>)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6013      	str	r3, [r2, #0]
 800a282:	4b3e      	ldr	r3, [pc, #248]	@ (800a37c <xTaskIncrementTick+0x158>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	3301      	adds	r3, #1
 800a288:	4a3c      	ldr	r2, [pc, #240]	@ (800a37c <xTaskIncrementTick+0x158>)
 800a28a:	6013      	str	r3, [r2, #0]
 800a28c:	f000 f996 	bl	800a5bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a290:	4b3b      	ldr	r3, [pc, #236]	@ (800a380 <xTaskIncrementTick+0x15c>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	693a      	ldr	r2, [r7, #16]
 800a296:	429a      	cmp	r2, r3
 800a298:	d348      	bcc.n	800a32c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a29a:	4b36      	ldr	r3, [pc, #216]	@ (800a374 <xTaskIncrementTick+0x150>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d104      	bne.n	800a2ae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2a4:	4b36      	ldr	r3, [pc, #216]	@ (800a380 <xTaskIncrementTick+0x15c>)
 800a2a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2aa:	601a      	str	r2, [r3, #0]
					break;
 800a2ac:	e03e      	b.n	800a32c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2ae:	4b31      	ldr	r3, [pc, #196]	@ (800a374 <xTaskIncrementTick+0x150>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d203      	bcs.n	800a2ce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a2c6:	4a2e      	ldr	r2, [pc, #184]	@ (800a380 <xTaskIncrementTick+0x15c>)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a2cc:	e02e      	b.n	800a32c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	3304      	adds	r3, #4
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7ff fca0 	bl	8009c18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d004      	beq.n	800a2ea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	3318      	adds	r3, #24
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7ff fc97 	bl	8009c18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	409a      	lsls	r2, r3
 800a2f2:	4b24      	ldr	r3, [pc, #144]	@ (800a384 <xTaskIncrementTick+0x160>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	4a22      	ldr	r2, [pc, #136]	@ (800a384 <xTaskIncrementTick+0x160>)
 800a2fa:	6013      	str	r3, [r2, #0]
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a300:	4613      	mov	r3, r2
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	4413      	add	r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4a1f      	ldr	r2, [pc, #124]	@ (800a388 <xTaskIncrementTick+0x164>)
 800a30a:	441a      	add	r2, r3
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	3304      	adds	r3, #4
 800a310:	4619      	mov	r1, r3
 800a312:	4610      	mov	r0, r2
 800a314:	f7ff fc23 	bl	8009b5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a31c:	4b1b      	ldr	r3, [pc, #108]	@ (800a38c <xTaskIncrementTick+0x168>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a322:	429a      	cmp	r2, r3
 800a324:	d3b9      	bcc.n	800a29a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a326:	2301      	movs	r3, #1
 800a328:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a32a:	e7b6      	b.n	800a29a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a32c:	4b17      	ldr	r3, [pc, #92]	@ (800a38c <xTaskIncrementTick+0x168>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a332:	4915      	ldr	r1, [pc, #84]	@ (800a388 <xTaskIncrementTick+0x164>)
 800a334:	4613      	mov	r3, r2
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	4413      	add	r3, r2
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	440b      	add	r3, r1
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2b01      	cmp	r3, #1
 800a342:	d901      	bls.n	800a348 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a344:	2301      	movs	r3, #1
 800a346:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a348:	4b11      	ldr	r3, [pc, #68]	@ (800a390 <xTaskIncrementTick+0x16c>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d007      	beq.n	800a360 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a350:	2301      	movs	r3, #1
 800a352:	617b      	str	r3, [r7, #20]
 800a354:	e004      	b.n	800a360 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a356:	4b0f      	ldr	r3, [pc, #60]	@ (800a394 <xTaskIncrementTick+0x170>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	3301      	adds	r3, #1
 800a35c:	4a0d      	ldr	r2, [pc, #52]	@ (800a394 <xTaskIncrementTick+0x170>)
 800a35e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a360:	697b      	ldr	r3, [r7, #20]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3718      	adds	r7, #24
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	20002124 	.word	0x20002124
 800a370:	20002100 	.word	0x20002100
 800a374:	200020b4 	.word	0x200020b4
 800a378:	200020b8 	.word	0x200020b8
 800a37c:	20002114 	.word	0x20002114
 800a380:	2000211c 	.word	0x2000211c
 800a384:	20002104 	.word	0x20002104
 800a388:	20002000 	.word	0x20002000
 800a38c:	20001ffc 	.word	0x20001ffc
 800a390:	20002110 	.word	0x20002110
 800a394:	2000210c 	.word	0x2000210c

0800a398 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a398:	b480      	push	{r7}
 800a39a:	b087      	sub	sp, #28
 800a39c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a39e:	4b27      	ldr	r3, [pc, #156]	@ (800a43c <vTaskSwitchContext+0xa4>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d003      	beq.n	800a3ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a3a6:	4b26      	ldr	r3, [pc, #152]	@ (800a440 <vTaskSwitchContext+0xa8>)
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a3ac:	e040      	b.n	800a430 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a3ae:	4b24      	ldr	r3, [pc, #144]	@ (800a440 <vTaskSwitchContext+0xa8>)
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3b4:	4b23      	ldr	r3, [pc, #140]	@ (800a444 <vTaskSwitchContext+0xac>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	fab3 f383 	clz	r3, r3
 800a3c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a3c2:	7afb      	ldrb	r3, [r7, #11]
 800a3c4:	f1c3 031f 	rsb	r3, r3, #31
 800a3c8:	617b      	str	r3, [r7, #20]
 800a3ca:	491f      	ldr	r1, [pc, #124]	@ (800a448 <vTaskSwitchContext+0xb0>)
 800a3cc:	697a      	ldr	r2, [r7, #20]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	4413      	add	r3, r2
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	440b      	add	r3, r1
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10b      	bne.n	800a3f6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800a3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e2:	f383 8811 	msr	BASEPRI, r3
 800a3e6:	f3bf 8f6f 	isb	sy
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	607b      	str	r3, [r7, #4]
}
 800a3f0:	bf00      	nop
 800a3f2:	bf00      	nop
 800a3f4:	e7fd      	b.n	800a3f2 <vTaskSwitchContext+0x5a>
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	4413      	add	r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	4a11      	ldr	r2, [pc, #68]	@ (800a448 <vTaskSwitchContext+0xb0>)
 800a402:	4413      	add	r3, r2
 800a404:	613b      	str	r3, [r7, #16]
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	685a      	ldr	r2, [r3, #4]
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	605a      	str	r2, [r3, #4]
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	685a      	ldr	r2, [r3, #4]
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	3308      	adds	r3, #8
 800a418:	429a      	cmp	r2, r3
 800a41a:	d104      	bne.n	800a426 <vTaskSwitchContext+0x8e>
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	685a      	ldr	r2, [r3, #4]
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	605a      	str	r2, [r3, #4]
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	4a07      	ldr	r2, [pc, #28]	@ (800a44c <vTaskSwitchContext+0xb4>)
 800a42e:	6013      	str	r3, [r2, #0]
}
 800a430:	bf00      	nop
 800a432:	371c      	adds	r7, #28
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr
 800a43c:	20002124 	.word	0x20002124
 800a440:	20002110 	.word	0x20002110
 800a444:	20002104 	.word	0x20002104
 800a448:	20002000 	.word	0x20002000
 800a44c:	20001ffc 	.word	0x20001ffc

0800a450 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a458:	f000 f852 	bl	800a500 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a45c:	4b06      	ldr	r3, [pc, #24]	@ (800a478 <prvIdleTask+0x28>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2b01      	cmp	r3, #1
 800a462:	d9f9      	bls.n	800a458 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a464:	4b05      	ldr	r3, [pc, #20]	@ (800a47c <prvIdleTask+0x2c>)
 800a466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a46a:	601a      	str	r2, [r3, #0]
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a474:	e7f0      	b.n	800a458 <prvIdleTask+0x8>
 800a476:	bf00      	nop
 800a478:	20002000 	.word	0x20002000
 800a47c:	e000ed04 	.word	0xe000ed04

0800a480 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a486:	2300      	movs	r3, #0
 800a488:	607b      	str	r3, [r7, #4]
 800a48a:	e00c      	b.n	800a4a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	4613      	mov	r3, r2
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	4413      	add	r3, r2
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	4a12      	ldr	r2, [pc, #72]	@ (800a4e0 <prvInitialiseTaskLists+0x60>)
 800a498:	4413      	add	r3, r2
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7ff fb32 	bl	8009b04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	607b      	str	r3, [r7, #4]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2b06      	cmp	r3, #6
 800a4aa:	d9ef      	bls.n	800a48c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a4ac:	480d      	ldr	r0, [pc, #52]	@ (800a4e4 <prvInitialiseTaskLists+0x64>)
 800a4ae:	f7ff fb29 	bl	8009b04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a4b2:	480d      	ldr	r0, [pc, #52]	@ (800a4e8 <prvInitialiseTaskLists+0x68>)
 800a4b4:	f7ff fb26 	bl	8009b04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a4b8:	480c      	ldr	r0, [pc, #48]	@ (800a4ec <prvInitialiseTaskLists+0x6c>)
 800a4ba:	f7ff fb23 	bl	8009b04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a4be:	480c      	ldr	r0, [pc, #48]	@ (800a4f0 <prvInitialiseTaskLists+0x70>)
 800a4c0:	f7ff fb20 	bl	8009b04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a4c4:	480b      	ldr	r0, [pc, #44]	@ (800a4f4 <prvInitialiseTaskLists+0x74>)
 800a4c6:	f7ff fb1d 	bl	8009b04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a4ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a4f8 <prvInitialiseTaskLists+0x78>)
 800a4cc:	4a05      	ldr	r2, [pc, #20]	@ (800a4e4 <prvInitialiseTaskLists+0x64>)
 800a4ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a4d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a4fc <prvInitialiseTaskLists+0x7c>)
 800a4d2:	4a05      	ldr	r2, [pc, #20]	@ (800a4e8 <prvInitialiseTaskLists+0x68>)
 800a4d4:	601a      	str	r2, [r3, #0]
}
 800a4d6:	bf00      	nop
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	20002000 	.word	0x20002000
 800a4e4:	2000208c 	.word	0x2000208c
 800a4e8:	200020a0 	.word	0x200020a0
 800a4ec:	200020bc 	.word	0x200020bc
 800a4f0:	200020d0 	.word	0x200020d0
 800a4f4:	200020e8 	.word	0x200020e8
 800a4f8:	200020b4 	.word	0x200020b4
 800a4fc:	200020b8 	.word	0x200020b8

0800a500 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a506:	e019      	b.n	800a53c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a508:	f000 fa0e 	bl	800a928 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a50c:	4b10      	ldr	r3, [pc, #64]	@ (800a550 <prvCheckTasksWaitingTermination+0x50>)
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	3304      	adds	r3, #4
 800a518:	4618      	mov	r0, r3
 800a51a:	f7ff fb7d 	bl	8009c18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a51e:	4b0d      	ldr	r3, [pc, #52]	@ (800a554 <prvCheckTasksWaitingTermination+0x54>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	3b01      	subs	r3, #1
 800a524:	4a0b      	ldr	r2, [pc, #44]	@ (800a554 <prvCheckTasksWaitingTermination+0x54>)
 800a526:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a528:	4b0b      	ldr	r3, [pc, #44]	@ (800a558 <prvCheckTasksWaitingTermination+0x58>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	3b01      	subs	r3, #1
 800a52e:	4a0a      	ldr	r2, [pc, #40]	@ (800a558 <prvCheckTasksWaitingTermination+0x58>)
 800a530:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a532:	f000 fa2b 	bl	800a98c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 f810 	bl	800a55c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a53c:	4b06      	ldr	r3, [pc, #24]	@ (800a558 <prvCheckTasksWaitingTermination+0x58>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1e1      	bne.n	800a508 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a544:	bf00      	nop
 800a546:	bf00      	nop
 800a548:	3708      	adds	r7, #8
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	200020d0 	.word	0x200020d0
 800a554:	200020fc 	.word	0x200020fc
 800a558:	200020e4 	.word	0x200020e4

0800a55c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d108      	bne.n	800a580 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a572:	4618      	mov	r0, r3
 800a574:	f000 fb86 	bl	800ac84 <vPortFree>
				vPortFree( pxTCB );
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 fb83 	bl	800ac84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a57e:	e019      	b.n	800a5b4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a586:	2b01      	cmp	r3, #1
 800a588:	d103      	bne.n	800a592 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fb7a 	bl	800ac84 <vPortFree>
	}
 800a590:	e010      	b.n	800a5b4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d00b      	beq.n	800a5b4 <prvDeleteTCB+0x58>
	__asm volatile
 800a59c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	60fb      	str	r3, [r7, #12]
}
 800a5ae:	bf00      	nop
 800a5b0:	bf00      	nop
 800a5b2:	e7fd      	b.n	800a5b0 <prvDeleteTCB+0x54>
	}
 800a5b4:	bf00      	nop
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a5f4 <prvResetNextTaskUnblockTime+0x38>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d104      	bne.n	800a5d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a5cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a5f8 <prvResetNextTaskUnblockTime+0x3c>)
 800a5ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a5d4:	e008      	b.n	800a5e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5d6:	4b07      	ldr	r3, [pc, #28]	@ (800a5f4 <prvResetNextTaskUnblockTime+0x38>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	4a04      	ldr	r2, [pc, #16]	@ (800a5f8 <prvResetNextTaskUnblockTime+0x3c>)
 800a5e6:	6013      	str	r3, [r2, #0]
}
 800a5e8:	bf00      	nop
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr
 800a5f4:	200020b4 	.word	0x200020b4
 800a5f8:	2000211c 	.word	0x2000211c

0800a5fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a606:	4b29      	ldr	r3, [pc, #164]	@ (800a6ac <prvAddCurrentTaskToDelayedList+0xb0>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a60c:	4b28      	ldr	r3, [pc, #160]	@ (800a6b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	3304      	adds	r3, #4
 800a612:	4618      	mov	r0, r3
 800a614:	f7ff fb00 	bl	8009c18 <uxListRemove>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d10b      	bne.n	800a636 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a61e:	4b24      	ldr	r3, [pc, #144]	@ (800a6b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a624:	2201      	movs	r2, #1
 800a626:	fa02 f303 	lsl.w	r3, r2, r3
 800a62a:	43da      	mvns	r2, r3
 800a62c:	4b21      	ldr	r3, [pc, #132]	@ (800a6b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4013      	ands	r3, r2
 800a632:	4a20      	ldr	r2, [pc, #128]	@ (800a6b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a634:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a63c:	d10a      	bne.n	800a654 <prvAddCurrentTaskToDelayedList+0x58>
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d007      	beq.n	800a654 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a644:	4b1a      	ldr	r3, [pc, #104]	@ (800a6b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	3304      	adds	r3, #4
 800a64a:	4619      	mov	r1, r3
 800a64c:	481a      	ldr	r0, [pc, #104]	@ (800a6b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a64e:	f7ff fa86 	bl	8009b5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a652:	e026      	b.n	800a6a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4413      	add	r3, r2
 800a65a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a65c:	4b14      	ldr	r3, [pc, #80]	@ (800a6b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a664:	68ba      	ldr	r2, [r7, #8]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d209      	bcs.n	800a680 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a66c:	4b13      	ldr	r3, [pc, #76]	@ (800a6bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	4b0f      	ldr	r3, [pc, #60]	@ (800a6b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	3304      	adds	r3, #4
 800a676:	4619      	mov	r1, r3
 800a678:	4610      	mov	r0, r2
 800a67a:	f7ff fa94 	bl	8009ba6 <vListInsert>
}
 800a67e:	e010      	b.n	800a6a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a680:	4b0f      	ldr	r3, [pc, #60]	@ (800a6c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	4b0a      	ldr	r3, [pc, #40]	@ (800a6b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	3304      	adds	r3, #4
 800a68a:	4619      	mov	r1, r3
 800a68c:	4610      	mov	r0, r2
 800a68e:	f7ff fa8a 	bl	8009ba6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a692:	4b0c      	ldr	r3, [pc, #48]	@ (800a6c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	68ba      	ldr	r2, [r7, #8]
 800a698:	429a      	cmp	r2, r3
 800a69a:	d202      	bcs.n	800a6a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a69c:	4a09      	ldr	r2, [pc, #36]	@ (800a6c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	6013      	str	r3, [r2, #0]
}
 800a6a2:	bf00      	nop
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	20002100 	.word	0x20002100
 800a6b0:	20001ffc 	.word	0x20001ffc
 800a6b4:	20002104 	.word	0x20002104
 800a6b8:	200020e8 	.word	0x200020e8
 800a6bc:	200020b8 	.word	0x200020b8
 800a6c0:	200020b4 	.word	0x200020b4
 800a6c4:	2000211c 	.word	0x2000211c

0800a6c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	3b04      	subs	r3, #4
 800a6d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a6e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	3b04      	subs	r3, #4
 800a6e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	f023 0201 	bic.w	r2, r3, #1
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	3b04      	subs	r3, #4
 800a6f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a6f8:	4a0c      	ldr	r2, [pc, #48]	@ (800a72c <pxPortInitialiseStack+0x64>)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	3b14      	subs	r3, #20
 800a702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	3b04      	subs	r3, #4
 800a70e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f06f 0202 	mvn.w	r2, #2
 800a716:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	3b20      	subs	r3, #32
 800a71c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a71e:	68fb      	ldr	r3, [r7, #12]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3714      	adds	r7, #20
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr
 800a72c:	0800a731 	.word	0x0800a731

0800a730 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a730:	b480      	push	{r7}
 800a732:	b085      	sub	sp, #20
 800a734:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a736:	2300      	movs	r3, #0
 800a738:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a73a:	4b13      	ldr	r3, [pc, #76]	@ (800a788 <prvTaskExitError+0x58>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a742:	d00b      	beq.n	800a75c <prvTaskExitError+0x2c>
	__asm volatile
 800a744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	60fb      	str	r3, [r7, #12]
}
 800a756:	bf00      	nop
 800a758:	bf00      	nop
 800a75a:	e7fd      	b.n	800a758 <prvTaskExitError+0x28>
	__asm volatile
 800a75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a760:	f383 8811 	msr	BASEPRI, r3
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	60bb      	str	r3, [r7, #8]
}
 800a76e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a770:	bf00      	nop
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d0fc      	beq.n	800a772 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a778:	bf00      	nop
 800a77a:	bf00      	nop
 800a77c:	3714      	adds	r7, #20
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	20000058 	.word	0x20000058
 800a78c:	00000000 	.word	0x00000000

0800a790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a790:	4b07      	ldr	r3, [pc, #28]	@ (800a7b0 <pxCurrentTCBConst2>)
 800a792:	6819      	ldr	r1, [r3, #0]
 800a794:	6808      	ldr	r0, [r1, #0]
 800a796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a79a:	f380 8809 	msr	PSP, r0
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f04f 0000 	mov.w	r0, #0
 800a7a6:	f380 8811 	msr	BASEPRI, r0
 800a7aa:	4770      	bx	lr
 800a7ac:	f3af 8000 	nop.w

0800a7b0 <pxCurrentTCBConst2>:
 800a7b0:	20001ffc 	.word	0x20001ffc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a7b4:	bf00      	nop
 800a7b6:	bf00      	nop

0800a7b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a7b8:	4808      	ldr	r0, [pc, #32]	@ (800a7dc <prvPortStartFirstTask+0x24>)
 800a7ba:	6800      	ldr	r0, [r0, #0]
 800a7bc:	6800      	ldr	r0, [r0, #0]
 800a7be:	f380 8808 	msr	MSP, r0
 800a7c2:	f04f 0000 	mov.w	r0, #0
 800a7c6:	f380 8814 	msr	CONTROL, r0
 800a7ca:	b662      	cpsie	i
 800a7cc:	b661      	cpsie	f
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	df00      	svc	0
 800a7d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7da:	bf00      	nop
 800a7dc:	e000ed08 	.word	0xe000ed08

0800a7e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b086      	sub	sp, #24
 800a7e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a7e6:	4b47      	ldr	r3, [pc, #284]	@ (800a904 <xPortStartScheduler+0x124>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a47      	ldr	r2, [pc, #284]	@ (800a908 <xPortStartScheduler+0x128>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d10b      	bne.n	800a808 <xPortStartScheduler+0x28>
	__asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	60fb      	str	r3, [r7, #12]
}
 800a802:	bf00      	nop
 800a804:	bf00      	nop
 800a806:	e7fd      	b.n	800a804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a808:	4b3e      	ldr	r3, [pc, #248]	@ (800a904 <xPortStartScheduler+0x124>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a3f      	ldr	r2, [pc, #252]	@ (800a90c <xPortStartScheduler+0x12c>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d10b      	bne.n	800a82a <xPortStartScheduler+0x4a>
	__asm volatile
 800a812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a816:	f383 8811 	msr	BASEPRI, r3
 800a81a:	f3bf 8f6f 	isb	sy
 800a81e:	f3bf 8f4f 	dsb	sy
 800a822:	613b      	str	r3, [r7, #16]
}
 800a824:	bf00      	nop
 800a826:	bf00      	nop
 800a828:	e7fd      	b.n	800a826 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a82a:	4b39      	ldr	r3, [pc, #228]	@ (800a910 <xPortStartScheduler+0x130>)
 800a82c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	b2db      	uxtb	r3, r3
 800a834:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	22ff      	movs	r2, #255	@ 0xff
 800a83a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	b2db      	uxtb	r3, r3
 800a842:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a844:	78fb      	ldrb	r3, [r7, #3]
 800a846:	b2db      	uxtb	r3, r3
 800a848:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a84c:	b2da      	uxtb	r2, r3
 800a84e:	4b31      	ldr	r3, [pc, #196]	@ (800a914 <xPortStartScheduler+0x134>)
 800a850:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a852:	4b31      	ldr	r3, [pc, #196]	@ (800a918 <xPortStartScheduler+0x138>)
 800a854:	2207      	movs	r2, #7
 800a856:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a858:	e009      	b.n	800a86e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a85a:	4b2f      	ldr	r3, [pc, #188]	@ (800a918 <xPortStartScheduler+0x138>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	3b01      	subs	r3, #1
 800a860:	4a2d      	ldr	r2, [pc, #180]	@ (800a918 <xPortStartScheduler+0x138>)
 800a862:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a864:	78fb      	ldrb	r3, [r7, #3]
 800a866:	b2db      	uxtb	r3, r3
 800a868:	005b      	lsls	r3, r3, #1
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a86e:	78fb      	ldrb	r3, [r7, #3]
 800a870:	b2db      	uxtb	r3, r3
 800a872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a876:	2b80      	cmp	r3, #128	@ 0x80
 800a878:	d0ef      	beq.n	800a85a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a87a:	4b27      	ldr	r3, [pc, #156]	@ (800a918 <xPortStartScheduler+0x138>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f1c3 0307 	rsb	r3, r3, #7
 800a882:	2b04      	cmp	r3, #4
 800a884:	d00b      	beq.n	800a89e <xPortStartScheduler+0xbe>
	__asm volatile
 800a886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	60bb      	str	r3, [r7, #8]
}
 800a898:	bf00      	nop
 800a89a:	bf00      	nop
 800a89c:	e7fd      	b.n	800a89a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a89e:	4b1e      	ldr	r3, [pc, #120]	@ (800a918 <xPortStartScheduler+0x138>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	021b      	lsls	r3, r3, #8
 800a8a4:	4a1c      	ldr	r2, [pc, #112]	@ (800a918 <xPortStartScheduler+0x138>)
 800a8a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8a8:	4b1b      	ldr	r3, [pc, #108]	@ (800a918 <xPortStartScheduler+0x138>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a8b0:	4a19      	ldr	r2, [pc, #100]	@ (800a918 <xPortStartScheduler+0x138>)
 800a8b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	b2da      	uxtb	r2, r3
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8bc:	4b17      	ldr	r3, [pc, #92]	@ (800a91c <xPortStartScheduler+0x13c>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a16      	ldr	r2, [pc, #88]	@ (800a91c <xPortStartScheduler+0x13c>)
 800a8c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a8c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8c8:	4b14      	ldr	r3, [pc, #80]	@ (800a91c <xPortStartScheduler+0x13c>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a13      	ldr	r2, [pc, #76]	@ (800a91c <xPortStartScheduler+0x13c>)
 800a8ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a8d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a8d4:	f000 f8da 	bl	800aa8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a8d8:	4b11      	ldr	r3, [pc, #68]	@ (800a920 <xPortStartScheduler+0x140>)
 800a8da:	2200      	movs	r2, #0
 800a8dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a8de:	f000 f8f9 	bl	800aad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a8e2:	4b10      	ldr	r3, [pc, #64]	@ (800a924 <xPortStartScheduler+0x144>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a0f      	ldr	r2, [pc, #60]	@ (800a924 <xPortStartScheduler+0x144>)
 800a8e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a8ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a8ee:	f7ff ff63 	bl	800a7b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8f2:	f7ff fd51 	bl	800a398 <vTaskSwitchContext>
	prvTaskExitError();
 800a8f6:	f7ff ff1b 	bl	800a730 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3718      	adds	r7, #24
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	e000ed00 	.word	0xe000ed00
 800a908:	410fc271 	.word	0x410fc271
 800a90c:	410fc270 	.word	0x410fc270
 800a910:	e000e400 	.word	0xe000e400
 800a914:	20002128 	.word	0x20002128
 800a918:	2000212c 	.word	0x2000212c
 800a91c:	e000ed20 	.word	0xe000ed20
 800a920:	20000058 	.word	0x20000058
 800a924:	e000ef34 	.word	0xe000ef34

0800a928 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
	__asm volatile
 800a92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	607b      	str	r3, [r7, #4]
}
 800a940:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a942:	4b10      	ldr	r3, [pc, #64]	@ (800a984 <vPortEnterCritical+0x5c>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	3301      	adds	r3, #1
 800a948:	4a0e      	ldr	r2, [pc, #56]	@ (800a984 <vPortEnterCritical+0x5c>)
 800a94a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a94c:	4b0d      	ldr	r3, [pc, #52]	@ (800a984 <vPortEnterCritical+0x5c>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d110      	bne.n	800a976 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a954:	4b0c      	ldr	r3, [pc, #48]	@ (800a988 <vPortEnterCritical+0x60>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00b      	beq.n	800a976 <vPortEnterCritical+0x4e>
	__asm volatile
 800a95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	603b      	str	r3, [r7, #0]
}
 800a970:	bf00      	nop
 800a972:	bf00      	nop
 800a974:	e7fd      	b.n	800a972 <vPortEnterCritical+0x4a>
	}
}
 800a976:	bf00      	nop
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	20000058 	.word	0x20000058
 800a988:	e000ed04 	.word	0xe000ed04

0800a98c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a992:	4b12      	ldr	r3, [pc, #72]	@ (800a9dc <vPortExitCritical+0x50>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d10b      	bne.n	800a9b2 <vPortExitCritical+0x26>
	__asm volatile
 800a99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a99e:	f383 8811 	msr	BASEPRI, r3
 800a9a2:	f3bf 8f6f 	isb	sy
 800a9a6:	f3bf 8f4f 	dsb	sy
 800a9aa:	607b      	str	r3, [r7, #4]
}
 800a9ac:	bf00      	nop
 800a9ae:	bf00      	nop
 800a9b0:	e7fd      	b.n	800a9ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a9b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a9dc <vPortExitCritical+0x50>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	4a08      	ldr	r2, [pc, #32]	@ (800a9dc <vPortExitCritical+0x50>)
 800a9ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9bc:	4b07      	ldr	r3, [pc, #28]	@ (800a9dc <vPortExitCritical+0x50>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d105      	bne.n	800a9d0 <vPortExitCritical+0x44>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a9ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9d0:	bf00      	nop
 800a9d2:	370c      	adds	r7, #12
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr
 800a9dc:	20000058 	.word	0x20000058

0800a9e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a9e0:	f3ef 8009 	mrs	r0, PSP
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	4b15      	ldr	r3, [pc, #84]	@ (800aa40 <pxCurrentTCBConst>)
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	f01e 0f10 	tst.w	lr, #16
 800a9f0:	bf08      	it	eq
 800a9f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9fa:	6010      	str	r0, [r2, #0]
 800a9fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800aa04:	f380 8811 	msr	BASEPRI, r0
 800aa08:	f3bf 8f4f 	dsb	sy
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f7ff fcc2 	bl	800a398 <vTaskSwitchContext>
 800aa14:	f04f 0000 	mov.w	r0, #0
 800aa18:	f380 8811 	msr	BASEPRI, r0
 800aa1c:	bc09      	pop	{r0, r3}
 800aa1e:	6819      	ldr	r1, [r3, #0]
 800aa20:	6808      	ldr	r0, [r1, #0]
 800aa22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa26:	f01e 0f10 	tst.w	lr, #16
 800aa2a:	bf08      	it	eq
 800aa2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa30:	f380 8809 	msr	PSP, r0
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	f3af 8000 	nop.w

0800aa40 <pxCurrentTCBConst>:
 800aa40:	20001ffc 	.word	0x20001ffc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop

0800aa48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa52:	f383 8811 	msr	BASEPRI, r3
 800aa56:	f3bf 8f6f 	isb	sy
 800aa5a:	f3bf 8f4f 	dsb	sy
 800aa5e:	607b      	str	r3, [r7, #4]
}
 800aa60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa62:	f7ff fbdf 	bl	800a224 <xTaskIncrementTick>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d003      	beq.n	800aa74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa6c:	4b06      	ldr	r3, [pc, #24]	@ (800aa88 <SysTick_Handler+0x40>)
 800aa6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa72:	601a      	str	r2, [r3, #0]
 800aa74:	2300      	movs	r3, #0
 800aa76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	f383 8811 	msr	BASEPRI, r3
}
 800aa7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa80:	bf00      	nop
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	e000ed04 	.word	0xe000ed04

0800aa8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa90:	4b0b      	ldr	r3, [pc, #44]	@ (800aac0 <vPortSetupTimerInterrupt+0x34>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa96:	4b0b      	ldr	r3, [pc, #44]	@ (800aac4 <vPortSetupTimerInterrupt+0x38>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa9c:	4b0a      	ldr	r3, [pc, #40]	@ (800aac8 <vPortSetupTimerInterrupt+0x3c>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a0a      	ldr	r2, [pc, #40]	@ (800aacc <vPortSetupTimerInterrupt+0x40>)
 800aaa2:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa6:	099b      	lsrs	r3, r3, #6
 800aaa8:	4a09      	ldr	r2, [pc, #36]	@ (800aad0 <vPortSetupTimerInterrupt+0x44>)
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aaae:	4b04      	ldr	r3, [pc, #16]	@ (800aac0 <vPortSetupTimerInterrupt+0x34>)
 800aab0:	2207      	movs	r2, #7
 800aab2:	601a      	str	r2, [r3, #0]
}
 800aab4:	bf00      	nop
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	e000e010 	.word	0xe000e010
 800aac4:	e000e018 	.word	0xe000e018
 800aac8:	20000008 	.word	0x20000008
 800aacc:	10624dd3 	.word	0x10624dd3
 800aad0:	e000e014 	.word	0xe000e014

0800aad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aad4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800aae4 <vPortEnableVFP+0x10>
 800aad8:	6801      	ldr	r1, [r0, #0]
 800aada:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800aade:	6001      	str	r1, [r0, #0]
 800aae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aae2:	bf00      	nop
 800aae4:	e000ed88 	.word	0xe000ed88

0800aae8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b08a      	sub	sp, #40	@ 0x28
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aaf4:	f7ff faea 	bl	800a0cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aaf8:	4b5c      	ldr	r3, [pc, #368]	@ (800ac6c <pvPortMalloc+0x184>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d101      	bne.n	800ab04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab00:	f000 f924 	bl	800ad4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab04:	4b5a      	ldr	r3, [pc, #360]	@ (800ac70 <pvPortMalloc+0x188>)
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4013      	ands	r3, r2
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f040 8095 	bne.w	800ac3c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d01e      	beq.n	800ab56 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ab18:	2208      	movs	r2, #8
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f003 0307 	and.w	r3, r3, #7
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d015      	beq.n	800ab56 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f023 0307 	bic.w	r3, r3, #7
 800ab30:	3308      	adds	r3, #8
 800ab32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f003 0307 	and.w	r3, r3, #7
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00b      	beq.n	800ab56 <pvPortMalloc+0x6e>
	__asm volatile
 800ab3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab42:	f383 8811 	msr	BASEPRI, r3
 800ab46:	f3bf 8f6f 	isb	sy
 800ab4a:	f3bf 8f4f 	dsb	sy
 800ab4e:	617b      	str	r3, [r7, #20]
}
 800ab50:	bf00      	nop
 800ab52:	bf00      	nop
 800ab54:	e7fd      	b.n	800ab52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d06f      	beq.n	800ac3c <pvPortMalloc+0x154>
 800ab5c:	4b45      	ldr	r3, [pc, #276]	@ (800ac74 <pvPortMalloc+0x18c>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d86a      	bhi.n	800ac3c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab66:	4b44      	ldr	r3, [pc, #272]	@ (800ac78 <pvPortMalloc+0x190>)
 800ab68:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ab6a:	4b43      	ldr	r3, [pc, #268]	@ (800ac78 <pvPortMalloc+0x190>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab70:	e004      	b.n	800ab7c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ab72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab74:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ab76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d903      	bls.n	800ab8e <pvPortMalloc+0xa6>
 800ab86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1f1      	bne.n	800ab72 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ab8e:	4b37      	ldr	r3, [pc, #220]	@ (800ac6c <pvPortMalloc+0x184>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d051      	beq.n	800ac3c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ab98:	6a3b      	ldr	r3, [r7, #32]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2208      	movs	r2, #8
 800ab9e:	4413      	add	r3, r2
 800aba0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	6a3b      	ldr	r3, [r7, #32]
 800aba8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800abaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abac:	685a      	ldr	r2, [r3, #4]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	1ad2      	subs	r2, r2, r3
 800abb2:	2308      	movs	r3, #8
 800abb4:	005b      	lsls	r3, r3, #1
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d920      	bls.n	800abfc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800abba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4413      	add	r3, r2
 800abc0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	f003 0307 	and.w	r3, r3, #7
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d00b      	beq.n	800abe4 <pvPortMalloc+0xfc>
	__asm volatile
 800abcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd0:	f383 8811 	msr	BASEPRI, r3
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	613b      	str	r3, [r7, #16]
}
 800abde:	bf00      	nop
 800abe0:	bf00      	nop
 800abe2:	e7fd      	b.n	800abe0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800abe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe6:	685a      	ldr	r2, [r3, #4]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	1ad2      	subs	r2, r2, r3
 800abec:	69bb      	ldr	r3, [r7, #24]
 800abee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800abf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800abf6:	69b8      	ldr	r0, [r7, #24]
 800abf8:	f000 f90a 	bl	800ae10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800abfc:	4b1d      	ldr	r3, [pc, #116]	@ (800ac74 <pvPortMalloc+0x18c>)
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	1ad3      	subs	r3, r2, r3
 800ac06:	4a1b      	ldr	r2, [pc, #108]	@ (800ac74 <pvPortMalloc+0x18c>)
 800ac08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac0a:	4b1a      	ldr	r3, [pc, #104]	@ (800ac74 <pvPortMalloc+0x18c>)
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	4b1b      	ldr	r3, [pc, #108]	@ (800ac7c <pvPortMalloc+0x194>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d203      	bcs.n	800ac1e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac16:	4b17      	ldr	r3, [pc, #92]	@ (800ac74 <pvPortMalloc+0x18c>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a18      	ldr	r2, [pc, #96]	@ (800ac7c <pvPortMalloc+0x194>)
 800ac1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac20:	685a      	ldr	r2, [r3, #4]
 800ac22:	4b13      	ldr	r3, [pc, #76]	@ (800ac70 <pvPortMalloc+0x188>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	431a      	orrs	r2, r3
 800ac28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac2e:	2200      	movs	r2, #0
 800ac30:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ac32:	4b13      	ldr	r3, [pc, #76]	@ (800ac80 <pvPortMalloc+0x198>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	3301      	adds	r3, #1
 800ac38:	4a11      	ldr	r2, [pc, #68]	@ (800ac80 <pvPortMalloc+0x198>)
 800ac3a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac3c:	f7ff fa54 	bl	800a0e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	f003 0307 	and.w	r3, r3, #7
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00b      	beq.n	800ac62 <pvPortMalloc+0x17a>
	__asm volatile
 800ac4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac4e:	f383 8811 	msr	BASEPRI, r3
 800ac52:	f3bf 8f6f 	isb	sy
 800ac56:	f3bf 8f4f 	dsb	sy
 800ac5a:	60fb      	str	r3, [r7, #12]
}
 800ac5c:	bf00      	nop
 800ac5e:	bf00      	nop
 800ac60:	e7fd      	b.n	800ac5e <pvPortMalloc+0x176>
	return pvReturn;
 800ac62:	69fb      	ldr	r3, [r7, #28]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3728      	adds	r7, #40	@ 0x28
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	20002cf0 	.word	0x20002cf0
 800ac70:	20002d04 	.word	0x20002d04
 800ac74:	20002cf4 	.word	0x20002cf4
 800ac78:	20002ce8 	.word	0x20002ce8
 800ac7c:	20002cf8 	.word	0x20002cf8
 800ac80:	20002cfc 	.word	0x20002cfc

0800ac84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d04f      	beq.n	800ad36 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ac96:	2308      	movs	r3, #8
 800ac98:	425b      	negs	r3, r3
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	685a      	ldr	r2, [r3, #4]
 800aca8:	4b25      	ldr	r3, [pc, #148]	@ (800ad40 <vPortFree+0xbc>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4013      	ands	r3, r2
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d10b      	bne.n	800acca <vPortFree+0x46>
	__asm volatile
 800acb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb6:	f383 8811 	msr	BASEPRI, r3
 800acba:	f3bf 8f6f 	isb	sy
 800acbe:	f3bf 8f4f 	dsb	sy
 800acc2:	60fb      	str	r3, [r7, #12]
}
 800acc4:	bf00      	nop
 800acc6:	bf00      	nop
 800acc8:	e7fd      	b.n	800acc6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d00b      	beq.n	800acea <vPortFree+0x66>
	__asm volatile
 800acd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd6:	f383 8811 	msr	BASEPRI, r3
 800acda:	f3bf 8f6f 	isb	sy
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	60bb      	str	r3, [r7, #8]
}
 800ace4:	bf00      	nop
 800ace6:	bf00      	nop
 800ace8:	e7fd      	b.n	800ace6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	685a      	ldr	r2, [r3, #4]
 800acee:	4b14      	ldr	r3, [pc, #80]	@ (800ad40 <vPortFree+0xbc>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4013      	ands	r3, r2
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d01e      	beq.n	800ad36 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d11a      	bne.n	800ad36 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	685a      	ldr	r2, [r3, #4]
 800ad04:	4b0e      	ldr	r3, [pc, #56]	@ (800ad40 <vPortFree+0xbc>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	43db      	mvns	r3, r3
 800ad0a:	401a      	ands	r2, r3
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad10:	f7ff f9dc 	bl	800a0cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	685a      	ldr	r2, [r3, #4]
 800ad18:	4b0a      	ldr	r3, [pc, #40]	@ (800ad44 <vPortFree+0xc0>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	4a09      	ldr	r2, [pc, #36]	@ (800ad44 <vPortFree+0xc0>)
 800ad20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad22:	6938      	ldr	r0, [r7, #16]
 800ad24:	f000 f874 	bl	800ae10 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ad28:	4b07      	ldr	r3, [pc, #28]	@ (800ad48 <vPortFree+0xc4>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	4a06      	ldr	r2, [pc, #24]	@ (800ad48 <vPortFree+0xc4>)
 800ad30:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ad32:	f7ff f9d9 	bl	800a0e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad36:	bf00      	nop
 800ad38:	3718      	adds	r7, #24
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	20002d04 	.word	0x20002d04
 800ad44:	20002cf4 	.word	0x20002cf4
 800ad48:	20002d00 	.word	0x20002d00

0800ad4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b085      	sub	sp, #20
 800ad50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad52:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800ad56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad58:	4b27      	ldr	r3, [pc, #156]	@ (800adf8 <prvHeapInit+0xac>)
 800ad5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f003 0307 	and.w	r3, r3, #7
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00c      	beq.n	800ad80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	3307      	adds	r3, #7
 800ad6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f023 0307 	bic.w	r3, r3, #7
 800ad72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad74:	68ba      	ldr	r2, [r7, #8]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	4a1f      	ldr	r2, [pc, #124]	@ (800adf8 <prvHeapInit+0xac>)
 800ad7c:	4413      	add	r3, r2
 800ad7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ad84:	4a1d      	ldr	r2, [pc, #116]	@ (800adfc <prvHeapInit+0xb0>)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad8a:	4b1c      	ldr	r3, [pc, #112]	@ (800adfc <prvHeapInit+0xb0>)
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	4413      	add	r3, r2
 800ad96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad98:	2208      	movs	r2, #8
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	1a9b      	subs	r3, r3, r2
 800ad9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f023 0307 	bic.w	r3, r3, #7
 800ada6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	4a15      	ldr	r2, [pc, #84]	@ (800ae00 <prvHeapInit+0xb4>)
 800adac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800adae:	4b14      	ldr	r3, [pc, #80]	@ (800ae00 <prvHeapInit+0xb4>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2200      	movs	r2, #0
 800adb4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800adb6:	4b12      	ldr	r3, [pc, #72]	@ (800ae00 <prvHeapInit+0xb4>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2200      	movs	r2, #0
 800adbc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	1ad2      	subs	r2, r2, r3
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800adcc:	4b0c      	ldr	r3, [pc, #48]	@ (800ae00 <prvHeapInit+0xb4>)
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	4a0a      	ldr	r2, [pc, #40]	@ (800ae04 <prvHeapInit+0xb8>)
 800adda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	4a09      	ldr	r2, [pc, #36]	@ (800ae08 <prvHeapInit+0xbc>)
 800ade2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ade4:	4b09      	ldr	r3, [pc, #36]	@ (800ae0c <prvHeapInit+0xc0>)
 800ade6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800adea:	601a      	str	r2, [r3, #0]
}
 800adec:	bf00      	nop
 800adee:	3714      	adds	r7, #20
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr
 800adf8:	20002130 	.word	0x20002130
 800adfc:	20002ce8 	.word	0x20002ce8
 800ae00:	20002cf0 	.word	0x20002cf0
 800ae04:	20002cf8 	.word	0x20002cf8
 800ae08:	20002cf4 	.word	0x20002cf4
 800ae0c:	20002d04 	.word	0x20002d04

0800ae10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae18:	4b28      	ldr	r3, [pc, #160]	@ (800aebc <prvInsertBlockIntoFreeList+0xac>)
 800ae1a:	60fb      	str	r3, [r7, #12]
 800ae1c:	e002      	b.n	800ae24 <prvInsertBlockIntoFreeList+0x14>
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	60fb      	str	r3, [r7, #12]
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d8f7      	bhi.n	800ae1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	4413      	add	r3, r2
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d108      	bne.n	800ae52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	685a      	ldr	r2, [r3, #4]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	441a      	add	r2, r3
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	441a      	add	r2, r3
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d118      	bne.n	800ae98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	4b15      	ldr	r3, [pc, #84]	@ (800aec0 <prvInsertBlockIntoFreeList+0xb0>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d00d      	beq.n	800ae8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	685a      	ldr	r2, [r3, #4]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	441a      	add	r2, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	601a      	str	r2, [r3, #0]
 800ae8c:	e008      	b.n	800aea0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae8e:	4b0c      	ldr	r3, [pc, #48]	@ (800aec0 <prvInsertBlockIntoFreeList+0xb0>)
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	601a      	str	r2, [r3, #0]
 800ae96:	e003      	b.n	800aea0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d002      	beq.n	800aeae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aeae:	bf00      	nop
 800aeb0:	3714      	adds	r7, #20
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	20002ce8 	.word	0x20002ce8
 800aec0:	20002cf0 	.word	0x20002cf0

0800aec4 <srand>:
 800aec4:	b538      	push	{r3, r4, r5, lr}
 800aec6:	4b10      	ldr	r3, [pc, #64]	@ (800af08 <srand+0x44>)
 800aec8:	681d      	ldr	r5, [r3, #0]
 800aeca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800aecc:	4604      	mov	r4, r0
 800aece:	b9b3      	cbnz	r3, 800aefe <srand+0x3a>
 800aed0:	2018      	movs	r0, #24
 800aed2:	f000 fa6d 	bl	800b3b0 <malloc>
 800aed6:	4602      	mov	r2, r0
 800aed8:	6328      	str	r0, [r5, #48]	@ 0x30
 800aeda:	b920      	cbnz	r0, 800aee6 <srand+0x22>
 800aedc:	4b0b      	ldr	r3, [pc, #44]	@ (800af0c <srand+0x48>)
 800aede:	480c      	ldr	r0, [pc, #48]	@ (800af10 <srand+0x4c>)
 800aee0:	2146      	movs	r1, #70	@ 0x46
 800aee2:	f000 f9fd 	bl	800b2e0 <__assert_func>
 800aee6:	490b      	ldr	r1, [pc, #44]	@ (800af14 <srand+0x50>)
 800aee8:	4b0b      	ldr	r3, [pc, #44]	@ (800af18 <srand+0x54>)
 800aeea:	e9c0 1300 	strd	r1, r3, [r0]
 800aeee:	4b0b      	ldr	r3, [pc, #44]	@ (800af1c <srand+0x58>)
 800aef0:	6083      	str	r3, [r0, #8]
 800aef2:	230b      	movs	r3, #11
 800aef4:	8183      	strh	r3, [r0, #12]
 800aef6:	2100      	movs	r1, #0
 800aef8:	2001      	movs	r0, #1
 800aefa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800aefe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800af00:	2200      	movs	r2, #0
 800af02:	611c      	str	r4, [r3, #16]
 800af04:	615a      	str	r2, [r3, #20]
 800af06:	bd38      	pop	{r3, r4, r5, pc}
 800af08:	20000068 	.word	0x20000068
 800af0c:	0800c044 	.word	0x0800c044
 800af10:	0800c05b 	.word	0x0800c05b
 800af14:	abcd330e 	.word	0xabcd330e
 800af18:	e66d1234 	.word	0xe66d1234
 800af1c:	0005deec 	.word	0x0005deec

0800af20 <rand>:
 800af20:	4b16      	ldr	r3, [pc, #88]	@ (800af7c <rand+0x5c>)
 800af22:	b510      	push	{r4, lr}
 800af24:	681c      	ldr	r4, [r3, #0]
 800af26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800af28:	b9b3      	cbnz	r3, 800af58 <rand+0x38>
 800af2a:	2018      	movs	r0, #24
 800af2c:	f000 fa40 	bl	800b3b0 <malloc>
 800af30:	4602      	mov	r2, r0
 800af32:	6320      	str	r0, [r4, #48]	@ 0x30
 800af34:	b920      	cbnz	r0, 800af40 <rand+0x20>
 800af36:	4b12      	ldr	r3, [pc, #72]	@ (800af80 <rand+0x60>)
 800af38:	4812      	ldr	r0, [pc, #72]	@ (800af84 <rand+0x64>)
 800af3a:	2152      	movs	r1, #82	@ 0x52
 800af3c:	f000 f9d0 	bl	800b2e0 <__assert_func>
 800af40:	4911      	ldr	r1, [pc, #68]	@ (800af88 <rand+0x68>)
 800af42:	4b12      	ldr	r3, [pc, #72]	@ (800af8c <rand+0x6c>)
 800af44:	e9c0 1300 	strd	r1, r3, [r0]
 800af48:	4b11      	ldr	r3, [pc, #68]	@ (800af90 <rand+0x70>)
 800af4a:	6083      	str	r3, [r0, #8]
 800af4c:	230b      	movs	r3, #11
 800af4e:	8183      	strh	r3, [r0, #12]
 800af50:	2100      	movs	r1, #0
 800af52:	2001      	movs	r0, #1
 800af54:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800af58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800af5a:	480e      	ldr	r0, [pc, #56]	@ (800af94 <rand+0x74>)
 800af5c:	690b      	ldr	r3, [r1, #16]
 800af5e:	694c      	ldr	r4, [r1, #20]
 800af60:	4a0d      	ldr	r2, [pc, #52]	@ (800af98 <rand+0x78>)
 800af62:	4358      	muls	r0, r3
 800af64:	fb02 0004 	mla	r0, r2, r4, r0
 800af68:	fba3 3202 	umull	r3, r2, r3, r2
 800af6c:	3301      	adds	r3, #1
 800af6e:	eb40 0002 	adc.w	r0, r0, r2
 800af72:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800af76:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800af7a:	bd10      	pop	{r4, pc}
 800af7c:	20000068 	.word	0x20000068
 800af80:	0800c044 	.word	0x0800c044
 800af84:	0800c05b 	.word	0x0800c05b
 800af88:	abcd330e 	.word	0xabcd330e
 800af8c:	e66d1234 	.word	0xe66d1234
 800af90:	0005deec 	.word	0x0005deec
 800af94:	5851f42d 	.word	0x5851f42d
 800af98:	4c957f2d 	.word	0x4c957f2d

0800af9c <std>:
 800af9c:	2300      	movs	r3, #0
 800af9e:	b510      	push	{r4, lr}
 800afa0:	4604      	mov	r4, r0
 800afa2:	e9c0 3300 	strd	r3, r3, [r0]
 800afa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afaa:	6083      	str	r3, [r0, #8]
 800afac:	8181      	strh	r1, [r0, #12]
 800afae:	6643      	str	r3, [r0, #100]	@ 0x64
 800afb0:	81c2      	strh	r2, [r0, #14]
 800afb2:	6183      	str	r3, [r0, #24]
 800afb4:	4619      	mov	r1, r3
 800afb6:	2208      	movs	r2, #8
 800afb8:	305c      	adds	r0, #92	@ 0x5c
 800afba:	f000 f906 	bl	800b1ca <memset>
 800afbe:	4b0d      	ldr	r3, [pc, #52]	@ (800aff4 <std+0x58>)
 800afc0:	6263      	str	r3, [r4, #36]	@ 0x24
 800afc2:	4b0d      	ldr	r3, [pc, #52]	@ (800aff8 <std+0x5c>)
 800afc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800afc6:	4b0d      	ldr	r3, [pc, #52]	@ (800affc <std+0x60>)
 800afc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800afca:	4b0d      	ldr	r3, [pc, #52]	@ (800b000 <std+0x64>)
 800afcc:	6323      	str	r3, [r4, #48]	@ 0x30
 800afce:	4b0d      	ldr	r3, [pc, #52]	@ (800b004 <std+0x68>)
 800afd0:	6224      	str	r4, [r4, #32]
 800afd2:	429c      	cmp	r4, r3
 800afd4:	d006      	beq.n	800afe4 <std+0x48>
 800afd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800afda:	4294      	cmp	r4, r2
 800afdc:	d002      	beq.n	800afe4 <std+0x48>
 800afde:	33d0      	adds	r3, #208	@ 0xd0
 800afe0:	429c      	cmp	r4, r3
 800afe2:	d105      	bne.n	800aff0 <std+0x54>
 800afe4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800afe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afec:	f000 b966 	b.w	800b2bc <__retarget_lock_init_recursive>
 800aff0:	bd10      	pop	{r4, pc}
 800aff2:	bf00      	nop
 800aff4:	0800b145 	.word	0x0800b145
 800aff8:	0800b167 	.word	0x0800b167
 800affc:	0800b19f 	.word	0x0800b19f
 800b000:	0800b1c3 	.word	0x0800b1c3
 800b004:	20002d08 	.word	0x20002d08

0800b008 <stdio_exit_handler>:
 800b008:	4a02      	ldr	r2, [pc, #8]	@ (800b014 <stdio_exit_handler+0xc>)
 800b00a:	4903      	ldr	r1, [pc, #12]	@ (800b018 <stdio_exit_handler+0x10>)
 800b00c:	4803      	ldr	r0, [pc, #12]	@ (800b01c <stdio_exit_handler+0x14>)
 800b00e:	f000 b869 	b.w	800b0e4 <_fwalk_sglue>
 800b012:	bf00      	nop
 800b014:	2000005c 	.word	0x2000005c
 800b018:	0800bbc1 	.word	0x0800bbc1
 800b01c:	2000006c 	.word	0x2000006c

0800b020 <cleanup_stdio>:
 800b020:	6841      	ldr	r1, [r0, #4]
 800b022:	4b0c      	ldr	r3, [pc, #48]	@ (800b054 <cleanup_stdio+0x34>)
 800b024:	4299      	cmp	r1, r3
 800b026:	b510      	push	{r4, lr}
 800b028:	4604      	mov	r4, r0
 800b02a:	d001      	beq.n	800b030 <cleanup_stdio+0x10>
 800b02c:	f000 fdc8 	bl	800bbc0 <_fflush_r>
 800b030:	68a1      	ldr	r1, [r4, #8]
 800b032:	4b09      	ldr	r3, [pc, #36]	@ (800b058 <cleanup_stdio+0x38>)
 800b034:	4299      	cmp	r1, r3
 800b036:	d002      	beq.n	800b03e <cleanup_stdio+0x1e>
 800b038:	4620      	mov	r0, r4
 800b03a:	f000 fdc1 	bl	800bbc0 <_fflush_r>
 800b03e:	68e1      	ldr	r1, [r4, #12]
 800b040:	4b06      	ldr	r3, [pc, #24]	@ (800b05c <cleanup_stdio+0x3c>)
 800b042:	4299      	cmp	r1, r3
 800b044:	d004      	beq.n	800b050 <cleanup_stdio+0x30>
 800b046:	4620      	mov	r0, r4
 800b048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b04c:	f000 bdb8 	b.w	800bbc0 <_fflush_r>
 800b050:	bd10      	pop	{r4, pc}
 800b052:	bf00      	nop
 800b054:	20002d08 	.word	0x20002d08
 800b058:	20002d70 	.word	0x20002d70
 800b05c:	20002dd8 	.word	0x20002dd8

0800b060 <global_stdio_init.part.0>:
 800b060:	b510      	push	{r4, lr}
 800b062:	4b0b      	ldr	r3, [pc, #44]	@ (800b090 <global_stdio_init.part.0+0x30>)
 800b064:	4c0b      	ldr	r4, [pc, #44]	@ (800b094 <global_stdio_init.part.0+0x34>)
 800b066:	4a0c      	ldr	r2, [pc, #48]	@ (800b098 <global_stdio_init.part.0+0x38>)
 800b068:	601a      	str	r2, [r3, #0]
 800b06a:	4620      	mov	r0, r4
 800b06c:	2200      	movs	r2, #0
 800b06e:	2104      	movs	r1, #4
 800b070:	f7ff ff94 	bl	800af9c <std>
 800b074:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b078:	2201      	movs	r2, #1
 800b07a:	2109      	movs	r1, #9
 800b07c:	f7ff ff8e 	bl	800af9c <std>
 800b080:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b084:	2202      	movs	r2, #2
 800b086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b08a:	2112      	movs	r1, #18
 800b08c:	f7ff bf86 	b.w	800af9c <std>
 800b090:	20002e40 	.word	0x20002e40
 800b094:	20002d08 	.word	0x20002d08
 800b098:	0800b009 	.word	0x0800b009

0800b09c <__sfp_lock_acquire>:
 800b09c:	4801      	ldr	r0, [pc, #4]	@ (800b0a4 <__sfp_lock_acquire+0x8>)
 800b09e:	f000 b90e 	b.w	800b2be <__retarget_lock_acquire_recursive>
 800b0a2:	bf00      	nop
 800b0a4:	20002e49 	.word	0x20002e49

0800b0a8 <__sfp_lock_release>:
 800b0a8:	4801      	ldr	r0, [pc, #4]	@ (800b0b0 <__sfp_lock_release+0x8>)
 800b0aa:	f000 b909 	b.w	800b2c0 <__retarget_lock_release_recursive>
 800b0ae:	bf00      	nop
 800b0b0:	20002e49 	.word	0x20002e49

0800b0b4 <__sinit>:
 800b0b4:	b510      	push	{r4, lr}
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	f7ff fff0 	bl	800b09c <__sfp_lock_acquire>
 800b0bc:	6a23      	ldr	r3, [r4, #32]
 800b0be:	b11b      	cbz	r3, 800b0c8 <__sinit+0x14>
 800b0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0c4:	f7ff bff0 	b.w	800b0a8 <__sfp_lock_release>
 800b0c8:	4b04      	ldr	r3, [pc, #16]	@ (800b0dc <__sinit+0x28>)
 800b0ca:	6223      	str	r3, [r4, #32]
 800b0cc:	4b04      	ldr	r3, [pc, #16]	@ (800b0e0 <__sinit+0x2c>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d1f5      	bne.n	800b0c0 <__sinit+0xc>
 800b0d4:	f7ff ffc4 	bl	800b060 <global_stdio_init.part.0>
 800b0d8:	e7f2      	b.n	800b0c0 <__sinit+0xc>
 800b0da:	bf00      	nop
 800b0dc:	0800b021 	.word	0x0800b021
 800b0e0:	20002e40 	.word	0x20002e40

0800b0e4 <_fwalk_sglue>:
 800b0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0e8:	4607      	mov	r7, r0
 800b0ea:	4688      	mov	r8, r1
 800b0ec:	4614      	mov	r4, r2
 800b0ee:	2600      	movs	r6, #0
 800b0f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0f4:	f1b9 0901 	subs.w	r9, r9, #1
 800b0f8:	d505      	bpl.n	800b106 <_fwalk_sglue+0x22>
 800b0fa:	6824      	ldr	r4, [r4, #0]
 800b0fc:	2c00      	cmp	r4, #0
 800b0fe:	d1f7      	bne.n	800b0f0 <_fwalk_sglue+0xc>
 800b100:	4630      	mov	r0, r6
 800b102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b106:	89ab      	ldrh	r3, [r5, #12]
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d907      	bls.n	800b11c <_fwalk_sglue+0x38>
 800b10c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b110:	3301      	adds	r3, #1
 800b112:	d003      	beq.n	800b11c <_fwalk_sglue+0x38>
 800b114:	4629      	mov	r1, r5
 800b116:	4638      	mov	r0, r7
 800b118:	47c0      	blx	r8
 800b11a:	4306      	orrs	r6, r0
 800b11c:	3568      	adds	r5, #104	@ 0x68
 800b11e:	e7e9      	b.n	800b0f4 <_fwalk_sglue+0x10>

0800b120 <iprintf>:
 800b120:	b40f      	push	{r0, r1, r2, r3}
 800b122:	b507      	push	{r0, r1, r2, lr}
 800b124:	4906      	ldr	r1, [pc, #24]	@ (800b140 <iprintf+0x20>)
 800b126:	ab04      	add	r3, sp, #16
 800b128:	6808      	ldr	r0, [r1, #0]
 800b12a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b12e:	6881      	ldr	r1, [r0, #8]
 800b130:	9301      	str	r3, [sp, #4]
 800b132:	f000 fa1d 	bl	800b570 <_vfiprintf_r>
 800b136:	b003      	add	sp, #12
 800b138:	f85d eb04 	ldr.w	lr, [sp], #4
 800b13c:	b004      	add	sp, #16
 800b13e:	4770      	bx	lr
 800b140:	20000068 	.word	0x20000068

0800b144 <__sread>:
 800b144:	b510      	push	{r4, lr}
 800b146:	460c      	mov	r4, r1
 800b148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b14c:	f000 f868 	bl	800b220 <_read_r>
 800b150:	2800      	cmp	r0, #0
 800b152:	bfab      	itete	ge
 800b154:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b156:	89a3      	ldrhlt	r3, [r4, #12]
 800b158:	181b      	addge	r3, r3, r0
 800b15a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b15e:	bfac      	ite	ge
 800b160:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b162:	81a3      	strhlt	r3, [r4, #12]
 800b164:	bd10      	pop	{r4, pc}

0800b166 <__swrite>:
 800b166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b16a:	461f      	mov	r7, r3
 800b16c:	898b      	ldrh	r3, [r1, #12]
 800b16e:	05db      	lsls	r3, r3, #23
 800b170:	4605      	mov	r5, r0
 800b172:	460c      	mov	r4, r1
 800b174:	4616      	mov	r6, r2
 800b176:	d505      	bpl.n	800b184 <__swrite+0x1e>
 800b178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b17c:	2302      	movs	r3, #2
 800b17e:	2200      	movs	r2, #0
 800b180:	f000 f83c 	bl	800b1fc <_lseek_r>
 800b184:	89a3      	ldrh	r3, [r4, #12]
 800b186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b18a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b18e:	81a3      	strh	r3, [r4, #12]
 800b190:	4632      	mov	r2, r6
 800b192:	463b      	mov	r3, r7
 800b194:	4628      	mov	r0, r5
 800b196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b19a:	f000 b853 	b.w	800b244 <_write_r>

0800b19e <__sseek>:
 800b19e:	b510      	push	{r4, lr}
 800b1a0:	460c      	mov	r4, r1
 800b1a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1a6:	f000 f829 	bl	800b1fc <_lseek_r>
 800b1aa:	1c43      	adds	r3, r0, #1
 800b1ac:	89a3      	ldrh	r3, [r4, #12]
 800b1ae:	bf15      	itete	ne
 800b1b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b1b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b1b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b1ba:	81a3      	strheq	r3, [r4, #12]
 800b1bc:	bf18      	it	ne
 800b1be:	81a3      	strhne	r3, [r4, #12]
 800b1c0:	bd10      	pop	{r4, pc}

0800b1c2 <__sclose>:
 800b1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1c6:	f000 b809 	b.w	800b1dc <_close_r>

0800b1ca <memset>:
 800b1ca:	4402      	add	r2, r0
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d100      	bne.n	800b1d4 <memset+0xa>
 800b1d2:	4770      	bx	lr
 800b1d4:	f803 1b01 	strb.w	r1, [r3], #1
 800b1d8:	e7f9      	b.n	800b1ce <memset+0x4>
	...

0800b1dc <_close_r>:
 800b1dc:	b538      	push	{r3, r4, r5, lr}
 800b1de:	4d06      	ldr	r5, [pc, #24]	@ (800b1f8 <_close_r+0x1c>)
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	4608      	mov	r0, r1
 800b1e6:	602b      	str	r3, [r5, #0]
 800b1e8:	f7f7 fc9e 	bl	8002b28 <_close>
 800b1ec:	1c43      	adds	r3, r0, #1
 800b1ee:	d102      	bne.n	800b1f6 <_close_r+0x1a>
 800b1f0:	682b      	ldr	r3, [r5, #0]
 800b1f2:	b103      	cbz	r3, 800b1f6 <_close_r+0x1a>
 800b1f4:	6023      	str	r3, [r4, #0]
 800b1f6:	bd38      	pop	{r3, r4, r5, pc}
 800b1f8:	20002e44 	.word	0x20002e44

0800b1fc <_lseek_r>:
 800b1fc:	b538      	push	{r3, r4, r5, lr}
 800b1fe:	4d07      	ldr	r5, [pc, #28]	@ (800b21c <_lseek_r+0x20>)
 800b200:	4604      	mov	r4, r0
 800b202:	4608      	mov	r0, r1
 800b204:	4611      	mov	r1, r2
 800b206:	2200      	movs	r2, #0
 800b208:	602a      	str	r2, [r5, #0]
 800b20a:	461a      	mov	r2, r3
 800b20c:	f7f7 fcb3 	bl	8002b76 <_lseek>
 800b210:	1c43      	adds	r3, r0, #1
 800b212:	d102      	bne.n	800b21a <_lseek_r+0x1e>
 800b214:	682b      	ldr	r3, [r5, #0]
 800b216:	b103      	cbz	r3, 800b21a <_lseek_r+0x1e>
 800b218:	6023      	str	r3, [r4, #0]
 800b21a:	bd38      	pop	{r3, r4, r5, pc}
 800b21c:	20002e44 	.word	0x20002e44

0800b220 <_read_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4d07      	ldr	r5, [pc, #28]	@ (800b240 <_read_r+0x20>)
 800b224:	4604      	mov	r4, r0
 800b226:	4608      	mov	r0, r1
 800b228:	4611      	mov	r1, r2
 800b22a:	2200      	movs	r2, #0
 800b22c:	602a      	str	r2, [r5, #0]
 800b22e:	461a      	mov	r2, r3
 800b230:	f7f7 fc41 	bl	8002ab6 <_read>
 800b234:	1c43      	adds	r3, r0, #1
 800b236:	d102      	bne.n	800b23e <_read_r+0x1e>
 800b238:	682b      	ldr	r3, [r5, #0]
 800b23a:	b103      	cbz	r3, 800b23e <_read_r+0x1e>
 800b23c:	6023      	str	r3, [r4, #0]
 800b23e:	bd38      	pop	{r3, r4, r5, pc}
 800b240:	20002e44 	.word	0x20002e44

0800b244 <_write_r>:
 800b244:	b538      	push	{r3, r4, r5, lr}
 800b246:	4d07      	ldr	r5, [pc, #28]	@ (800b264 <_write_r+0x20>)
 800b248:	4604      	mov	r4, r0
 800b24a:	4608      	mov	r0, r1
 800b24c:	4611      	mov	r1, r2
 800b24e:	2200      	movs	r2, #0
 800b250:	602a      	str	r2, [r5, #0]
 800b252:	461a      	mov	r2, r3
 800b254:	f7f7 fc4c 	bl	8002af0 <_write>
 800b258:	1c43      	adds	r3, r0, #1
 800b25a:	d102      	bne.n	800b262 <_write_r+0x1e>
 800b25c:	682b      	ldr	r3, [r5, #0]
 800b25e:	b103      	cbz	r3, 800b262 <_write_r+0x1e>
 800b260:	6023      	str	r3, [r4, #0]
 800b262:	bd38      	pop	{r3, r4, r5, pc}
 800b264:	20002e44 	.word	0x20002e44

0800b268 <__errno>:
 800b268:	4b01      	ldr	r3, [pc, #4]	@ (800b270 <__errno+0x8>)
 800b26a:	6818      	ldr	r0, [r3, #0]
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	20000068 	.word	0x20000068

0800b274 <__libc_init_array>:
 800b274:	b570      	push	{r4, r5, r6, lr}
 800b276:	4d0d      	ldr	r5, [pc, #52]	@ (800b2ac <__libc_init_array+0x38>)
 800b278:	4c0d      	ldr	r4, [pc, #52]	@ (800b2b0 <__libc_init_array+0x3c>)
 800b27a:	1b64      	subs	r4, r4, r5
 800b27c:	10a4      	asrs	r4, r4, #2
 800b27e:	2600      	movs	r6, #0
 800b280:	42a6      	cmp	r6, r4
 800b282:	d109      	bne.n	800b298 <__libc_init_array+0x24>
 800b284:	4d0b      	ldr	r5, [pc, #44]	@ (800b2b4 <__libc_init_array+0x40>)
 800b286:	4c0c      	ldr	r4, [pc, #48]	@ (800b2b8 <__libc_init_array+0x44>)
 800b288:	f000 fe48 	bl	800bf1c <_init>
 800b28c:	1b64      	subs	r4, r4, r5
 800b28e:	10a4      	asrs	r4, r4, #2
 800b290:	2600      	movs	r6, #0
 800b292:	42a6      	cmp	r6, r4
 800b294:	d105      	bne.n	800b2a2 <__libc_init_array+0x2e>
 800b296:	bd70      	pop	{r4, r5, r6, pc}
 800b298:	f855 3b04 	ldr.w	r3, [r5], #4
 800b29c:	4798      	blx	r3
 800b29e:	3601      	adds	r6, #1
 800b2a0:	e7ee      	b.n	800b280 <__libc_init_array+0xc>
 800b2a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2a6:	4798      	blx	r3
 800b2a8:	3601      	adds	r6, #1
 800b2aa:	e7f2      	b.n	800b292 <__libc_init_array+0x1e>
 800b2ac:	0800c12c 	.word	0x0800c12c
 800b2b0:	0800c12c 	.word	0x0800c12c
 800b2b4:	0800c12c 	.word	0x0800c12c
 800b2b8:	0800c130 	.word	0x0800c130

0800b2bc <__retarget_lock_init_recursive>:
 800b2bc:	4770      	bx	lr

0800b2be <__retarget_lock_acquire_recursive>:
 800b2be:	4770      	bx	lr

0800b2c0 <__retarget_lock_release_recursive>:
 800b2c0:	4770      	bx	lr

0800b2c2 <memcpy>:
 800b2c2:	440a      	add	r2, r1
 800b2c4:	4291      	cmp	r1, r2
 800b2c6:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2ca:	d100      	bne.n	800b2ce <memcpy+0xc>
 800b2cc:	4770      	bx	lr
 800b2ce:	b510      	push	{r4, lr}
 800b2d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2d8:	4291      	cmp	r1, r2
 800b2da:	d1f9      	bne.n	800b2d0 <memcpy+0xe>
 800b2dc:	bd10      	pop	{r4, pc}
	...

0800b2e0 <__assert_func>:
 800b2e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2e2:	4614      	mov	r4, r2
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	4b09      	ldr	r3, [pc, #36]	@ (800b30c <__assert_func+0x2c>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4605      	mov	r5, r0
 800b2ec:	68d8      	ldr	r0, [r3, #12]
 800b2ee:	b14c      	cbz	r4, 800b304 <__assert_func+0x24>
 800b2f0:	4b07      	ldr	r3, [pc, #28]	@ (800b310 <__assert_func+0x30>)
 800b2f2:	9100      	str	r1, [sp, #0]
 800b2f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2f8:	4906      	ldr	r1, [pc, #24]	@ (800b314 <__assert_func+0x34>)
 800b2fa:	462b      	mov	r3, r5
 800b2fc:	f000 fc88 	bl	800bc10 <fiprintf>
 800b300:	f000 fd3c 	bl	800bd7c <abort>
 800b304:	4b04      	ldr	r3, [pc, #16]	@ (800b318 <__assert_func+0x38>)
 800b306:	461c      	mov	r4, r3
 800b308:	e7f3      	b.n	800b2f2 <__assert_func+0x12>
 800b30a:	bf00      	nop
 800b30c:	20000068 	.word	0x20000068
 800b310:	0800c0b3 	.word	0x0800c0b3
 800b314:	0800c0c0 	.word	0x0800c0c0
 800b318:	0800c0ee 	.word	0x0800c0ee

0800b31c <_free_r>:
 800b31c:	b538      	push	{r3, r4, r5, lr}
 800b31e:	4605      	mov	r5, r0
 800b320:	2900      	cmp	r1, #0
 800b322:	d041      	beq.n	800b3a8 <_free_r+0x8c>
 800b324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b328:	1f0c      	subs	r4, r1, #4
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	bfb8      	it	lt
 800b32e:	18e4      	addlt	r4, r4, r3
 800b330:	f000 f8e8 	bl	800b504 <__malloc_lock>
 800b334:	4a1d      	ldr	r2, [pc, #116]	@ (800b3ac <_free_r+0x90>)
 800b336:	6813      	ldr	r3, [r2, #0]
 800b338:	b933      	cbnz	r3, 800b348 <_free_r+0x2c>
 800b33a:	6063      	str	r3, [r4, #4]
 800b33c:	6014      	str	r4, [r2, #0]
 800b33e:	4628      	mov	r0, r5
 800b340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b344:	f000 b8e4 	b.w	800b510 <__malloc_unlock>
 800b348:	42a3      	cmp	r3, r4
 800b34a:	d908      	bls.n	800b35e <_free_r+0x42>
 800b34c:	6820      	ldr	r0, [r4, #0]
 800b34e:	1821      	adds	r1, r4, r0
 800b350:	428b      	cmp	r3, r1
 800b352:	bf01      	itttt	eq
 800b354:	6819      	ldreq	r1, [r3, #0]
 800b356:	685b      	ldreq	r3, [r3, #4]
 800b358:	1809      	addeq	r1, r1, r0
 800b35a:	6021      	streq	r1, [r4, #0]
 800b35c:	e7ed      	b.n	800b33a <_free_r+0x1e>
 800b35e:	461a      	mov	r2, r3
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	b10b      	cbz	r3, 800b368 <_free_r+0x4c>
 800b364:	42a3      	cmp	r3, r4
 800b366:	d9fa      	bls.n	800b35e <_free_r+0x42>
 800b368:	6811      	ldr	r1, [r2, #0]
 800b36a:	1850      	adds	r0, r2, r1
 800b36c:	42a0      	cmp	r0, r4
 800b36e:	d10b      	bne.n	800b388 <_free_r+0x6c>
 800b370:	6820      	ldr	r0, [r4, #0]
 800b372:	4401      	add	r1, r0
 800b374:	1850      	adds	r0, r2, r1
 800b376:	4283      	cmp	r3, r0
 800b378:	6011      	str	r1, [r2, #0]
 800b37a:	d1e0      	bne.n	800b33e <_free_r+0x22>
 800b37c:	6818      	ldr	r0, [r3, #0]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	6053      	str	r3, [r2, #4]
 800b382:	4408      	add	r0, r1
 800b384:	6010      	str	r0, [r2, #0]
 800b386:	e7da      	b.n	800b33e <_free_r+0x22>
 800b388:	d902      	bls.n	800b390 <_free_r+0x74>
 800b38a:	230c      	movs	r3, #12
 800b38c:	602b      	str	r3, [r5, #0]
 800b38e:	e7d6      	b.n	800b33e <_free_r+0x22>
 800b390:	6820      	ldr	r0, [r4, #0]
 800b392:	1821      	adds	r1, r4, r0
 800b394:	428b      	cmp	r3, r1
 800b396:	bf04      	itt	eq
 800b398:	6819      	ldreq	r1, [r3, #0]
 800b39a:	685b      	ldreq	r3, [r3, #4]
 800b39c:	6063      	str	r3, [r4, #4]
 800b39e:	bf04      	itt	eq
 800b3a0:	1809      	addeq	r1, r1, r0
 800b3a2:	6021      	streq	r1, [r4, #0]
 800b3a4:	6054      	str	r4, [r2, #4]
 800b3a6:	e7ca      	b.n	800b33e <_free_r+0x22>
 800b3a8:	bd38      	pop	{r3, r4, r5, pc}
 800b3aa:	bf00      	nop
 800b3ac:	20002e50 	.word	0x20002e50

0800b3b0 <malloc>:
 800b3b0:	4b02      	ldr	r3, [pc, #8]	@ (800b3bc <malloc+0xc>)
 800b3b2:	4601      	mov	r1, r0
 800b3b4:	6818      	ldr	r0, [r3, #0]
 800b3b6:	f000 b825 	b.w	800b404 <_malloc_r>
 800b3ba:	bf00      	nop
 800b3bc:	20000068 	.word	0x20000068

0800b3c0 <sbrk_aligned>:
 800b3c0:	b570      	push	{r4, r5, r6, lr}
 800b3c2:	4e0f      	ldr	r6, [pc, #60]	@ (800b400 <sbrk_aligned+0x40>)
 800b3c4:	460c      	mov	r4, r1
 800b3c6:	6831      	ldr	r1, [r6, #0]
 800b3c8:	4605      	mov	r5, r0
 800b3ca:	b911      	cbnz	r1, 800b3d2 <sbrk_aligned+0x12>
 800b3cc:	f000 fcc6 	bl	800bd5c <_sbrk_r>
 800b3d0:	6030      	str	r0, [r6, #0]
 800b3d2:	4621      	mov	r1, r4
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	f000 fcc1 	bl	800bd5c <_sbrk_r>
 800b3da:	1c43      	adds	r3, r0, #1
 800b3dc:	d103      	bne.n	800b3e6 <sbrk_aligned+0x26>
 800b3de:	f04f 34ff 	mov.w	r4, #4294967295
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	bd70      	pop	{r4, r5, r6, pc}
 800b3e6:	1cc4      	adds	r4, r0, #3
 800b3e8:	f024 0403 	bic.w	r4, r4, #3
 800b3ec:	42a0      	cmp	r0, r4
 800b3ee:	d0f8      	beq.n	800b3e2 <sbrk_aligned+0x22>
 800b3f0:	1a21      	subs	r1, r4, r0
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	f000 fcb2 	bl	800bd5c <_sbrk_r>
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	d1f2      	bne.n	800b3e2 <sbrk_aligned+0x22>
 800b3fc:	e7ef      	b.n	800b3de <sbrk_aligned+0x1e>
 800b3fe:	bf00      	nop
 800b400:	20002e4c 	.word	0x20002e4c

0800b404 <_malloc_r>:
 800b404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b408:	1ccd      	adds	r5, r1, #3
 800b40a:	f025 0503 	bic.w	r5, r5, #3
 800b40e:	3508      	adds	r5, #8
 800b410:	2d0c      	cmp	r5, #12
 800b412:	bf38      	it	cc
 800b414:	250c      	movcc	r5, #12
 800b416:	2d00      	cmp	r5, #0
 800b418:	4606      	mov	r6, r0
 800b41a:	db01      	blt.n	800b420 <_malloc_r+0x1c>
 800b41c:	42a9      	cmp	r1, r5
 800b41e:	d904      	bls.n	800b42a <_malloc_r+0x26>
 800b420:	230c      	movs	r3, #12
 800b422:	6033      	str	r3, [r6, #0]
 800b424:	2000      	movs	r0, #0
 800b426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b42a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b500 <_malloc_r+0xfc>
 800b42e:	f000 f869 	bl	800b504 <__malloc_lock>
 800b432:	f8d8 3000 	ldr.w	r3, [r8]
 800b436:	461c      	mov	r4, r3
 800b438:	bb44      	cbnz	r4, 800b48c <_malloc_r+0x88>
 800b43a:	4629      	mov	r1, r5
 800b43c:	4630      	mov	r0, r6
 800b43e:	f7ff ffbf 	bl	800b3c0 <sbrk_aligned>
 800b442:	1c43      	adds	r3, r0, #1
 800b444:	4604      	mov	r4, r0
 800b446:	d158      	bne.n	800b4fa <_malloc_r+0xf6>
 800b448:	f8d8 4000 	ldr.w	r4, [r8]
 800b44c:	4627      	mov	r7, r4
 800b44e:	2f00      	cmp	r7, #0
 800b450:	d143      	bne.n	800b4da <_malloc_r+0xd6>
 800b452:	2c00      	cmp	r4, #0
 800b454:	d04b      	beq.n	800b4ee <_malloc_r+0xea>
 800b456:	6823      	ldr	r3, [r4, #0]
 800b458:	4639      	mov	r1, r7
 800b45a:	4630      	mov	r0, r6
 800b45c:	eb04 0903 	add.w	r9, r4, r3
 800b460:	f000 fc7c 	bl	800bd5c <_sbrk_r>
 800b464:	4581      	cmp	r9, r0
 800b466:	d142      	bne.n	800b4ee <_malloc_r+0xea>
 800b468:	6821      	ldr	r1, [r4, #0]
 800b46a:	1a6d      	subs	r5, r5, r1
 800b46c:	4629      	mov	r1, r5
 800b46e:	4630      	mov	r0, r6
 800b470:	f7ff ffa6 	bl	800b3c0 <sbrk_aligned>
 800b474:	3001      	adds	r0, #1
 800b476:	d03a      	beq.n	800b4ee <_malloc_r+0xea>
 800b478:	6823      	ldr	r3, [r4, #0]
 800b47a:	442b      	add	r3, r5
 800b47c:	6023      	str	r3, [r4, #0]
 800b47e:	f8d8 3000 	ldr.w	r3, [r8]
 800b482:	685a      	ldr	r2, [r3, #4]
 800b484:	bb62      	cbnz	r2, 800b4e0 <_malloc_r+0xdc>
 800b486:	f8c8 7000 	str.w	r7, [r8]
 800b48a:	e00f      	b.n	800b4ac <_malloc_r+0xa8>
 800b48c:	6822      	ldr	r2, [r4, #0]
 800b48e:	1b52      	subs	r2, r2, r5
 800b490:	d420      	bmi.n	800b4d4 <_malloc_r+0xd0>
 800b492:	2a0b      	cmp	r2, #11
 800b494:	d917      	bls.n	800b4c6 <_malloc_r+0xc2>
 800b496:	1961      	adds	r1, r4, r5
 800b498:	42a3      	cmp	r3, r4
 800b49a:	6025      	str	r5, [r4, #0]
 800b49c:	bf18      	it	ne
 800b49e:	6059      	strne	r1, [r3, #4]
 800b4a0:	6863      	ldr	r3, [r4, #4]
 800b4a2:	bf08      	it	eq
 800b4a4:	f8c8 1000 	streq.w	r1, [r8]
 800b4a8:	5162      	str	r2, [r4, r5]
 800b4aa:	604b      	str	r3, [r1, #4]
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	f000 f82f 	bl	800b510 <__malloc_unlock>
 800b4b2:	f104 000b 	add.w	r0, r4, #11
 800b4b6:	1d23      	adds	r3, r4, #4
 800b4b8:	f020 0007 	bic.w	r0, r0, #7
 800b4bc:	1ac2      	subs	r2, r0, r3
 800b4be:	bf1c      	itt	ne
 800b4c0:	1a1b      	subne	r3, r3, r0
 800b4c2:	50a3      	strne	r3, [r4, r2]
 800b4c4:	e7af      	b.n	800b426 <_malloc_r+0x22>
 800b4c6:	6862      	ldr	r2, [r4, #4]
 800b4c8:	42a3      	cmp	r3, r4
 800b4ca:	bf0c      	ite	eq
 800b4cc:	f8c8 2000 	streq.w	r2, [r8]
 800b4d0:	605a      	strne	r2, [r3, #4]
 800b4d2:	e7eb      	b.n	800b4ac <_malloc_r+0xa8>
 800b4d4:	4623      	mov	r3, r4
 800b4d6:	6864      	ldr	r4, [r4, #4]
 800b4d8:	e7ae      	b.n	800b438 <_malloc_r+0x34>
 800b4da:	463c      	mov	r4, r7
 800b4dc:	687f      	ldr	r7, [r7, #4]
 800b4de:	e7b6      	b.n	800b44e <_malloc_r+0x4a>
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	42a3      	cmp	r3, r4
 800b4e6:	d1fb      	bne.n	800b4e0 <_malloc_r+0xdc>
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	6053      	str	r3, [r2, #4]
 800b4ec:	e7de      	b.n	800b4ac <_malloc_r+0xa8>
 800b4ee:	230c      	movs	r3, #12
 800b4f0:	6033      	str	r3, [r6, #0]
 800b4f2:	4630      	mov	r0, r6
 800b4f4:	f000 f80c 	bl	800b510 <__malloc_unlock>
 800b4f8:	e794      	b.n	800b424 <_malloc_r+0x20>
 800b4fa:	6005      	str	r5, [r0, #0]
 800b4fc:	e7d6      	b.n	800b4ac <_malloc_r+0xa8>
 800b4fe:	bf00      	nop
 800b500:	20002e50 	.word	0x20002e50

0800b504 <__malloc_lock>:
 800b504:	4801      	ldr	r0, [pc, #4]	@ (800b50c <__malloc_lock+0x8>)
 800b506:	f7ff beda 	b.w	800b2be <__retarget_lock_acquire_recursive>
 800b50a:	bf00      	nop
 800b50c:	20002e48 	.word	0x20002e48

0800b510 <__malloc_unlock>:
 800b510:	4801      	ldr	r0, [pc, #4]	@ (800b518 <__malloc_unlock+0x8>)
 800b512:	f7ff bed5 	b.w	800b2c0 <__retarget_lock_release_recursive>
 800b516:	bf00      	nop
 800b518:	20002e48 	.word	0x20002e48

0800b51c <__sfputc_r>:
 800b51c:	6893      	ldr	r3, [r2, #8]
 800b51e:	3b01      	subs	r3, #1
 800b520:	2b00      	cmp	r3, #0
 800b522:	b410      	push	{r4}
 800b524:	6093      	str	r3, [r2, #8]
 800b526:	da08      	bge.n	800b53a <__sfputc_r+0x1e>
 800b528:	6994      	ldr	r4, [r2, #24]
 800b52a:	42a3      	cmp	r3, r4
 800b52c:	db01      	blt.n	800b532 <__sfputc_r+0x16>
 800b52e:	290a      	cmp	r1, #10
 800b530:	d103      	bne.n	800b53a <__sfputc_r+0x1e>
 800b532:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b536:	f000 bb7d 	b.w	800bc34 <__swbuf_r>
 800b53a:	6813      	ldr	r3, [r2, #0]
 800b53c:	1c58      	adds	r0, r3, #1
 800b53e:	6010      	str	r0, [r2, #0]
 800b540:	7019      	strb	r1, [r3, #0]
 800b542:	4608      	mov	r0, r1
 800b544:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b548:	4770      	bx	lr

0800b54a <__sfputs_r>:
 800b54a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b54c:	4606      	mov	r6, r0
 800b54e:	460f      	mov	r7, r1
 800b550:	4614      	mov	r4, r2
 800b552:	18d5      	adds	r5, r2, r3
 800b554:	42ac      	cmp	r4, r5
 800b556:	d101      	bne.n	800b55c <__sfputs_r+0x12>
 800b558:	2000      	movs	r0, #0
 800b55a:	e007      	b.n	800b56c <__sfputs_r+0x22>
 800b55c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b560:	463a      	mov	r2, r7
 800b562:	4630      	mov	r0, r6
 800b564:	f7ff ffda 	bl	800b51c <__sfputc_r>
 800b568:	1c43      	adds	r3, r0, #1
 800b56a:	d1f3      	bne.n	800b554 <__sfputs_r+0xa>
 800b56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b570 <_vfiprintf_r>:
 800b570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b574:	460d      	mov	r5, r1
 800b576:	b09d      	sub	sp, #116	@ 0x74
 800b578:	4614      	mov	r4, r2
 800b57a:	4698      	mov	r8, r3
 800b57c:	4606      	mov	r6, r0
 800b57e:	b118      	cbz	r0, 800b588 <_vfiprintf_r+0x18>
 800b580:	6a03      	ldr	r3, [r0, #32]
 800b582:	b90b      	cbnz	r3, 800b588 <_vfiprintf_r+0x18>
 800b584:	f7ff fd96 	bl	800b0b4 <__sinit>
 800b588:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b58a:	07d9      	lsls	r1, r3, #31
 800b58c:	d405      	bmi.n	800b59a <_vfiprintf_r+0x2a>
 800b58e:	89ab      	ldrh	r3, [r5, #12]
 800b590:	059a      	lsls	r2, r3, #22
 800b592:	d402      	bmi.n	800b59a <_vfiprintf_r+0x2a>
 800b594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b596:	f7ff fe92 	bl	800b2be <__retarget_lock_acquire_recursive>
 800b59a:	89ab      	ldrh	r3, [r5, #12]
 800b59c:	071b      	lsls	r3, r3, #28
 800b59e:	d501      	bpl.n	800b5a4 <_vfiprintf_r+0x34>
 800b5a0:	692b      	ldr	r3, [r5, #16]
 800b5a2:	b99b      	cbnz	r3, 800b5cc <_vfiprintf_r+0x5c>
 800b5a4:	4629      	mov	r1, r5
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	f000 fb82 	bl	800bcb0 <__swsetup_r>
 800b5ac:	b170      	cbz	r0, 800b5cc <_vfiprintf_r+0x5c>
 800b5ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5b0:	07dc      	lsls	r4, r3, #31
 800b5b2:	d504      	bpl.n	800b5be <_vfiprintf_r+0x4e>
 800b5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b8:	b01d      	add	sp, #116	@ 0x74
 800b5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5be:	89ab      	ldrh	r3, [r5, #12]
 800b5c0:	0598      	lsls	r0, r3, #22
 800b5c2:	d4f7      	bmi.n	800b5b4 <_vfiprintf_r+0x44>
 800b5c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5c6:	f7ff fe7b 	bl	800b2c0 <__retarget_lock_release_recursive>
 800b5ca:	e7f3      	b.n	800b5b4 <_vfiprintf_r+0x44>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5d0:	2320      	movs	r3, #32
 800b5d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5da:	2330      	movs	r3, #48	@ 0x30
 800b5dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b78c <_vfiprintf_r+0x21c>
 800b5e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5e4:	f04f 0901 	mov.w	r9, #1
 800b5e8:	4623      	mov	r3, r4
 800b5ea:	469a      	mov	sl, r3
 800b5ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5f0:	b10a      	cbz	r2, 800b5f6 <_vfiprintf_r+0x86>
 800b5f2:	2a25      	cmp	r2, #37	@ 0x25
 800b5f4:	d1f9      	bne.n	800b5ea <_vfiprintf_r+0x7a>
 800b5f6:	ebba 0b04 	subs.w	fp, sl, r4
 800b5fa:	d00b      	beq.n	800b614 <_vfiprintf_r+0xa4>
 800b5fc:	465b      	mov	r3, fp
 800b5fe:	4622      	mov	r2, r4
 800b600:	4629      	mov	r1, r5
 800b602:	4630      	mov	r0, r6
 800b604:	f7ff ffa1 	bl	800b54a <__sfputs_r>
 800b608:	3001      	adds	r0, #1
 800b60a:	f000 80a7 	beq.w	800b75c <_vfiprintf_r+0x1ec>
 800b60e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b610:	445a      	add	r2, fp
 800b612:	9209      	str	r2, [sp, #36]	@ 0x24
 800b614:	f89a 3000 	ldrb.w	r3, [sl]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f000 809f 	beq.w	800b75c <_vfiprintf_r+0x1ec>
 800b61e:	2300      	movs	r3, #0
 800b620:	f04f 32ff 	mov.w	r2, #4294967295
 800b624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b628:	f10a 0a01 	add.w	sl, sl, #1
 800b62c:	9304      	str	r3, [sp, #16]
 800b62e:	9307      	str	r3, [sp, #28]
 800b630:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b634:	931a      	str	r3, [sp, #104]	@ 0x68
 800b636:	4654      	mov	r4, sl
 800b638:	2205      	movs	r2, #5
 800b63a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b63e:	4853      	ldr	r0, [pc, #332]	@ (800b78c <_vfiprintf_r+0x21c>)
 800b640:	f7f4 fdce 	bl	80001e0 <memchr>
 800b644:	9a04      	ldr	r2, [sp, #16]
 800b646:	b9d8      	cbnz	r0, 800b680 <_vfiprintf_r+0x110>
 800b648:	06d1      	lsls	r1, r2, #27
 800b64a:	bf44      	itt	mi
 800b64c:	2320      	movmi	r3, #32
 800b64e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b652:	0713      	lsls	r3, r2, #28
 800b654:	bf44      	itt	mi
 800b656:	232b      	movmi	r3, #43	@ 0x2b
 800b658:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b65c:	f89a 3000 	ldrb.w	r3, [sl]
 800b660:	2b2a      	cmp	r3, #42	@ 0x2a
 800b662:	d015      	beq.n	800b690 <_vfiprintf_r+0x120>
 800b664:	9a07      	ldr	r2, [sp, #28]
 800b666:	4654      	mov	r4, sl
 800b668:	2000      	movs	r0, #0
 800b66a:	f04f 0c0a 	mov.w	ip, #10
 800b66e:	4621      	mov	r1, r4
 800b670:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b674:	3b30      	subs	r3, #48	@ 0x30
 800b676:	2b09      	cmp	r3, #9
 800b678:	d94b      	bls.n	800b712 <_vfiprintf_r+0x1a2>
 800b67a:	b1b0      	cbz	r0, 800b6aa <_vfiprintf_r+0x13a>
 800b67c:	9207      	str	r2, [sp, #28]
 800b67e:	e014      	b.n	800b6aa <_vfiprintf_r+0x13a>
 800b680:	eba0 0308 	sub.w	r3, r0, r8
 800b684:	fa09 f303 	lsl.w	r3, r9, r3
 800b688:	4313      	orrs	r3, r2
 800b68a:	9304      	str	r3, [sp, #16]
 800b68c:	46a2      	mov	sl, r4
 800b68e:	e7d2      	b.n	800b636 <_vfiprintf_r+0xc6>
 800b690:	9b03      	ldr	r3, [sp, #12]
 800b692:	1d19      	adds	r1, r3, #4
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	9103      	str	r1, [sp, #12]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	bfbb      	ittet	lt
 800b69c:	425b      	neglt	r3, r3
 800b69e:	f042 0202 	orrlt.w	r2, r2, #2
 800b6a2:	9307      	strge	r3, [sp, #28]
 800b6a4:	9307      	strlt	r3, [sp, #28]
 800b6a6:	bfb8      	it	lt
 800b6a8:	9204      	strlt	r2, [sp, #16]
 800b6aa:	7823      	ldrb	r3, [r4, #0]
 800b6ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6ae:	d10a      	bne.n	800b6c6 <_vfiprintf_r+0x156>
 800b6b0:	7863      	ldrb	r3, [r4, #1]
 800b6b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6b4:	d132      	bne.n	800b71c <_vfiprintf_r+0x1ac>
 800b6b6:	9b03      	ldr	r3, [sp, #12]
 800b6b8:	1d1a      	adds	r2, r3, #4
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	9203      	str	r2, [sp, #12]
 800b6be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6c2:	3402      	adds	r4, #2
 800b6c4:	9305      	str	r3, [sp, #20]
 800b6c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b79c <_vfiprintf_r+0x22c>
 800b6ca:	7821      	ldrb	r1, [r4, #0]
 800b6cc:	2203      	movs	r2, #3
 800b6ce:	4650      	mov	r0, sl
 800b6d0:	f7f4 fd86 	bl	80001e0 <memchr>
 800b6d4:	b138      	cbz	r0, 800b6e6 <_vfiprintf_r+0x176>
 800b6d6:	9b04      	ldr	r3, [sp, #16]
 800b6d8:	eba0 000a 	sub.w	r0, r0, sl
 800b6dc:	2240      	movs	r2, #64	@ 0x40
 800b6de:	4082      	lsls	r2, r0
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	3401      	adds	r4, #1
 800b6e4:	9304      	str	r3, [sp, #16]
 800b6e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ea:	4829      	ldr	r0, [pc, #164]	@ (800b790 <_vfiprintf_r+0x220>)
 800b6ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6f0:	2206      	movs	r2, #6
 800b6f2:	f7f4 fd75 	bl	80001e0 <memchr>
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	d03f      	beq.n	800b77a <_vfiprintf_r+0x20a>
 800b6fa:	4b26      	ldr	r3, [pc, #152]	@ (800b794 <_vfiprintf_r+0x224>)
 800b6fc:	bb1b      	cbnz	r3, 800b746 <_vfiprintf_r+0x1d6>
 800b6fe:	9b03      	ldr	r3, [sp, #12]
 800b700:	3307      	adds	r3, #7
 800b702:	f023 0307 	bic.w	r3, r3, #7
 800b706:	3308      	adds	r3, #8
 800b708:	9303      	str	r3, [sp, #12]
 800b70a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b70c:	443b      	add	r3, r7
 800b70e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b710:	e76a      	b.n	800b5e8 <_vfiprintf_r+0x78>
 800b712:	fb0c 3202 	mla	r2, ip, r2, r3
 800b716:	460c      	mov	r4, r1
 800b718:	2001      	movs	r0, #1
 800b71a:	e7a8      	b.n	800b66e <_vfiprintf_r+0xfe>
 800b71c:	2300      	movs	r3, #0
 800b71e:	3401      	adds	r4, #1
 800b720:	9305      	str	r3, [sp, #20]
 800b722:	4619      	mov	r1, r3
 800b724:	f04f 0c0a 	mov.w	ip, #10
 800b728:	4620      	mov	r0, r4
 800b72a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b72e:	3a30      	subs	r2, #48	@ 0x30
 800b730:	2a09      	cmp	r2, #9
 800b732:	d903      	bls.n	800b73c <_vfiprintf_r+0x1cc>
 800b734:	2b00      	cmp	r3, #0
 800b736:	d0c6      	beq.n	800b6c6 <_vfiprintf_r+0x156>
 800b738:	9105      	str	r1, [sp, #20]
 800b73a:	e7c4      	b.n	800b6c6 <_vfiprintf_r+0x156>
 800b73c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b740:	4604      	mov	r4, r0
 800b742:	2301      	movs	r3, #1
 800b744:	e7f0      	b.n	800b728 <_vfiprintf_r+0x1b8>
 800b746:	ab03      	add	r3, sp, #12
 800b748:	9300      	str	r3, [sp, #0]
 800b74a:	462a      	mov	r2, r5
 800b74c:	4b12      	ldr	r3, [pc, #72]	@ (800b798 <_vfiprintf_r+0x228>)
 800b74e:	a904      	add	r1, sp, #16
 800b750:	4630      	mov	r0, r6
 800b752:	f3af 8000 	nop.w
 800b756:	4607      	mov	r7, r0
 800b758:	1c78      	adds	r0, r7, #1
 800b75a:	d1d6      	bne.n	800b70a <_vfiprintf_r+0x19a>
 800b75c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b75e:	07d9      	lsls	r1, r3, #31
 800b760:	d405      	bmi.n	800b76e <_vfiprintf_r+0x1fe>
 800b762:	89ab      	ldrh	r3, [r5, #12]
 800b764:	059a      	lsls	r2, r3, #22
 800b766:	d402      	bmi.n	800b76e <_vfiprintf_r+0x1fe>
 800b768:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b76a:	f7ff fda9 	bl	800b2c0 <__retarget_lock_release_recursive>
 800b76e:	89ab      	ldrh	r3, [r5, #12]
 800b770:	065b      	lsls	r3, r3, #25
 800b772:	f53f af1f 	bmi.w	800b5b4 <_vfiprintf_r+0x44>
 800b776:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b778:	e71e      	b.n	800b5b8 <_vfiprintf_r+0x48>
 800b77a:	ab03      	add	r3, sp, #12
 800b77c:	9300      	str	r3, [sp, #0]
 800b77e:	462a      	mov	r2, r5
 800b780:	4b05      	ldr	r3, [pc, #20]	@ (800b798 <_vfiprintf_r+0x228>)
 800b782:	a904      	add	r1, sp, #16
 800b784:	4630      	mov	r0, r6
 800b786:	f000 f879 	bl	800b87c <_printf_i>
 800b78a:	e7e4      	b.n	800b756 <_vfiprintf_r+0x1e6>
 800b78c:	0800c0ef 	.word	0x0800c0ef
 800b790:	0800c0f9 	.word	0x0800c0f9
 800b794:	00000000 	.word	0x00000000
 800b798:	0800b54b 	.word	0x0800b54b
 800b79c:	0800c0f5 	.word	0x0800c0f5

0800b7a0 <_printf_common>:
 800b7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a4:	4616      	mov	r6, r2
 800b7a6:	4698      	mov	r8, r3
 800b7a8:	688a      	ldr	r2, [r1, #8]
 800b7aa:	690b      	ldr	r3, [r1, #16]
 800b7ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	bfb8      	it	lt
 800b7b4:	4613      	movlt	r3, r2
 800b7b6:	6033      	str	r3, [r6, #0]
 800b7b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b7bc:	4607      	mov	r7, r0
 800b7be:	460c      	mov	r4, r1
 800b7c0:	b10a      	cbz	r2, 800b7c6 <_printf_common+0x26>
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	6033      	str	r3, [r6, #0]
 800b7c6:	6823      	ldr	r3, [r4, #0]
 800b7c8:	0699      	lsls	r1, r3, #26
 800b7ca:	bf42      	ittt	mi
 800b7cc:	6833      	ldrmi	r3, [r6, #0]
 800b7ce:	3302      	addmi	r3, #2
 800b7d0:	6033      	strmi	r3, [r6, #0]
 800b7d2:	6825      	ldr	r5, [r4, #0]
 800b7d4:	f015 0506 	ands.w	r5, r5, #6
 800b7d8:	d106      	bne.n	800b7e8 <_printf_common+0x48>
 800b7da:	f104 0a19 	add.w	sl, r4, #25
 800b7de:	68e3      	ldr	r3, [r4, #12]
 800b7e0:	6832      	ldr	r2, [r6, #0]
 800b7e2:	1a9b      	subs	r3, r3, r2
 800b7e4:	42ab      	cmp	r3, r5
 800b7e6:	dc26      	bgt.n	800b836 <_printf_common+0x96>
 800b7e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b7ec:	6822      	ldr	r2, [r4, #0]
 800b7ee:	3b00      	subs	r3, #0
 800b7f0:	bf18      	it	ne
 800b7f2:	2301      	movne	r3, #1
 800b7f4:	0692      	lsls	r2, r2, #26
 800b7f6:	d42b      	bmi.n	800b850 <_printf_common+0xb0>
 800b7f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b7fc:	4641      	mov	r1, r8
 800b7fe:	4638      	mov	r0, r7
 800b800:	47c8      	blx	r9
 800b802:	3001      	adds	r0, #1
 800b804:	d01e      	beq.n	800b844 <_printf_common+0xa4>
 800b806:	6823      	ldr	r3, [r4, #0]
 800b808:	6922      	ldr	r2, [r4, #16]
 800b80a:	f003 0306 	and.w	r3, r3, #6
 800b80e:	2b04      	cmp	r3, #4
 800b810:	bf02      	ittt	eq
 800b812:	68e5      	ldreq	r5, [r4, #12]
 800b814:	6833      	ldreq	r3, [r6, #0]
 800b816:	1aed      	subeq	r5, r5, r3
 800b818:	68a3      	ldr	r3, [r4, #8]
 800b81a:	bf0c      	ite	eq
 800b81c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b820:	2500      	movne	r5, #0
 800b822:	4293      	cmp	r3, r2
 800b824:	bfc4      	itt	gt
 800b826:	1a9b      	subgt	r3, r3, r2
 800b828:	18ed      	addgt	r5, r5, r3
 800b82a:	2600      	movs	r6, #0
 800b82c:	341a      	adds	r4, #26
 800b82e:	42b5      	cmp	r5, r6
 800b830:	d11a      	bne.n	800b868 <_printf_common+0xc8>
 800b832:	2000      	movs	r0, #0
 800b834:	e008      	b.n	800b848 <_printf_common+0xa8>
 800b836:	2301      	movs	r3, #1
 800b838:	4652      	mov	r2, sl
 800b83a:	4641      	mov	r1, r8
 800b83c:	4638      	mov	r0, r7
 800b83e:	47c8      	blx	r9
 800b840:	3001      	adds	r0, #1
 800b842:	d103      	bne.n	800b84c <_printf_common+0xac>
 800b844:	f04f 30ff 	mov.w	r0, #4294967295
 800b848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b84c:	3501      	adds	r5, #1
 800b84e:	e7c6      	b.n	800b7de <_printf_common+0x3e>
 800b850:	18e1      	adds	r1, r4, r3
 800b852:	1c5a      	adds	r2, r3, #1
 800b854:	2030      	movs	r0, #48	@ 0x30
 800b856:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b85a:	4422      	add	r2, r4
 800b85c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b860:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b864:	3302      	adds	r3, #2
 800b866:	e7c7      	b.n	800b7f8 <_printf_common+0x58>
 800b868:	2301      	movs	r3, #1
 800b86a:	4622      	mov	r2, r4
 800b86c:	4641      	mov	r1, r8
 800b86e:	4638      	mov	r0, r7
 800b870:	47c8      	blx	r9
 800b872:	3001      	adds	r0, #1
 800b874:	d0e6      	beq.n	800b844 <_printf_common+0xa4>
 800b876:	3601      	adds	r6, #1
 800b878:	e7d9      	b.n	800b82e <_printf_common+0x8e>
	...

0800b87c <_printf_i>:
 800b87c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b880:	7e0f      	ldrb	r7, [r1, #24]
 800b882:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b884:	2f78      	cmp	r7, #120	@ 0x78
 800b886:	4691      	mov	r9, r2
 800b888:	4680      	mov	r8, r0
 800b88a:	460c      	mov	r4, r1
 800b88c:	469a      	mov	sl, r3
 800b88e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b892:	d807      	bhi.n	800b8a4 <_printf_i+0x28>
 800b894:	2f62      	cmp	r7, #98	@ 0x62
 800b896:	d80a      	bhi.n	800b8ae <_printf_i+0x32>
 800b898:	2f00      	cmp	r7, #0
 800b89a:	f000 80d1 	beq.w	800ba40 <_printf_i+0x1c4>
 800b89e:	2f58      	cmp	r7, #88	@ 0x58
 800b8a0:	f000 80b8 	beq.w	800ba14 <_printf_i+0x198>
 800b8a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b8ac:	e03a      	b.n	800b924 <_printf_i+0xa8>
 800b8ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b8b2:	2b15      	cmp	r3, #21
 800b8b4:	d8f6      	bhi.n	800b8a4 <_printf_i+0x28>
 800b8b6:	a101      	add	r1, pc, #4	@ (adr r1, 800b8bc <_printf_i+0x40>)
 800b8b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8bc:	0800b915 	.word	0x0800b915
 800b8c0:	0800b929 	.word	0x0800b929
 800b8c4:	0800b8a5 	.word	0x0800b8a5
 800b8c8:	0800b8a5 	.word	0x0800b8a5
 800b8cc:	0800b8a5 	.word	0x0800b8a5
 800b8d0:	0800b8a5 	.word	0x0800b8a5
 800b8d4:	0800b929 	.word	0x0800b929
 800b8d8:	0800b8a5 	.word	0x0800b8a5
 800b8dc:	0800b8a5 	.word	0x0800b8a5
 800b8e0:	0800b8a5 	.word	0x0800b8a5
 800b8e4:	0800b8a5 	.word	0x0800b8a5
 800b8e8:	0800ba27 	.word	0x0800ba27
 800b8ec:	0800b953 	.word	0x0800b953
 800b8f0:	0800b9e1 	.word	0x0800b9e1
 800b8f4:	0800b8a5 	.word	0x0800b8a5
 800b8f8:	0800b8a5 	.word	0x0800b8a5
 800b8fc:	0800ba49 	.word	0x0800ba49
 800b900:	0800b8a5 	.word	0x0800b8a5
 800b904:	0800b953 	.word	0x0800b953
 800b908:	0800b8a5 	.word	0x0800b8a5
 800b90c:	0800b8a5 	.word	0x0800b8a5
 800b910:	0800b9e9 	.word	0x0800b9e9
 800b914:	6833      	ldr	r3, [r6, #0]
 800b916:	1d1a      	adds	r2, r3, #4
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	6032      	str	r2, [r6, #0]
 800b91c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b920:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b924:	2301      	movs	r3, #1
 800b926:	e09c      	b.n	800ba62 <_printf_i+0x1e6>
 800b928:	6833      	ldr	r3, [r6, #0]
 800b92a:	6820      	ldr	r0, [r4, #0]
 800b92c:	1d19      	adds	r1, r3, #4
 800b92e:	6031      	str	r1, [r6, #0]
 800b930:	0606      	lsls	r6, r0, #24
 800b932:	d501      	bpl.n	800b938 <_printf_i+0xbc>
 800b934:	681d      	ldr	r5, [r3, #0]
 800b936:	e003      	b.n	800b940 <_printf_i+0xc4>
 800b938:	0645      	lsls	r5, r0, #25
 800b93a:	d5fb      	bpl.n	800b934 <_printf_i+0xb8>
 800b93c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b940:	2d00      	cmp	r5, #0
 800b942:	da03      	bge.n	800b94c <_printf_i+0xd0>
 800b944:	232d      	movs	r3, #45	@ 0x2d
 800b946:	426d      	negs	r5, r5
 800b948:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b94c:	4858      	ldr	r0, [pc, #352]	@ (800bab0 <_printf_i+0x234>)
 800b94e:	230a      	movs	r3, #10
 800b950:	e011      	b.n	800b976 <_printf_i+0xfa>
 800b952:	6821      	ldr	r1, [r4, #0]
 800b954:	6833      	ldr	r3, [r6, #0]
 800b956:	0608      	lsls	r0, r1, #24
 800b958:	f853 5b04 	ldr.w	r5, [r3], #4
 800b95c:	d402      	bmi.n	800b964 <_printf_i+0xe8>
 800b95e:	0649      	lsls	r1, r1, #25
 800b960:	bf48      	it	mi
 800b962:	b2ad      	uxthmi	r5, r5
 800b964:	2f6f      	cmp	r7, #111	@ 0x6f
 800b966:	4852      	ldr	r0, [pc, #328]	@ (800bab0 <_printf_i+0x234>)
 800b968:	6033      	str	r3, [r6, #0]
 800b96a:	bf14      	ite	ne
 800b96c:	230a      	movne	r3, #10
 800b96e:	2308      	moveq	r3, #8
 800b970:	2100      	movs	r1, #0
 800b972:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b976:	6866      	ldr	r6, [r4, #4]
 800b978:	60a6      	str	r6, [r4, #8]
 800b97a:	2e00      	cmp	r6, #0
 800b97c:	db05      	blt.n	800b98a <_printf_i+0x10e>
 800b97e:	6821      	ldr	r1, [r4, #0]
 800b980:	432e      	orrs	r6, r5
 800b982:	f021 0104 	bic.w	r1, r1, #4
 800b986:	6021      	str	r1, [r4, #0]
 800b988:	d04b      	beq.n	800ba22 <_printf_i+0x1a6>
 800b98a:	4616      	mov	r6, r2
 800b98c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b990:	fb03 5711 	mls	r7, r3, r1, r5
 800b994:	5dc7      	ldrb	r7, [r0, r7]
 800b996:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b99a:	462f      	mov	r7, r5
 800b99c:	42bb      	cmp	r3, r7
 800b99e:	460d      	mov	r5, r1
 800b9a0:	d9f4      	bls.n	800b98c <_printf_i+0x110>
 800b9a2:	2b08      	cmp	r3, #8
 800b9a4:	d10b      	bne.n	800b9be <_printf_i+0x142>
 800b9a6:	6823      	ldr	r3, [r4, #0]
 800b9a8:	07df      	lsls	r7, r3, #31
 800b9aa:	d508      	bpl.n	800b9be <_printf_i+0x142>
 800b9ac:	6923      	ldr	r3, [r4, #16]
 800b9ae:	6861      	ldr	r1, [r4, #4]
 800b9b0:	4299      	cmp	r1, r3
 800b9b2:	bfde      	ittt	le
 800b9b4:	2330      	movle	r3, #48	@ 0x30
 800b9b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b9ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b9be:	1b92      	subs	r2, r2, r6
 800b9c0:	6122      	str	r2, [r4, #16]
 800b9c2:	f8cd a000 	str.w	sl, [sp]
 800b9c6:	464b      	mov	r3, r9
 800b9c8:	aa03      	add	r2, sp, #12
 800b9ca:	4621      	mov	r1, r4
 800b9cc:	4640      	mov	r0, r8
 800b9ce:	f7ff fee7 	bl	800b7a0 <_printf_common>
 800b9d2:	3001      	adds	r0, #1
 800b9d4:	d14a      	bne.n	800ba6c <_printf_i+0x1f0>
 800b9d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9da:	b004      	add	sp, #16
 800b9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9e0:	6823      	ldr	r3, [r4, #0]
 800b9e2:	f043 0320 	orr.w	r3, r3, #32
 800b9e6:	6023      	str	r3, [r4, #0]
 800b9e8:	4832      	ldr	r0, [pc, #200]	@ (800bab4 <_printf_i+0x238>)
 800b9ea:	2778      	movs	r7, #120	@ 0x78
 800b9ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b9f0:	6823      	ldr	r3, [r4, #0]
 800b9f2:	6831      	ldr	r1, [r6, #0]
 800b9f4:	061f      	lsls	r7, r3, #24
 800b9f6:	f851 5b04 	ldr.w	r5, [r1], #4
 800b9fa:	d402      	bmi.n	800ba02 <_printf_i+0x186>
 800b9fc:	065f      	lsls	r7, r3, #25
 800b9fe:	bf48      	it	mi
 800ba00:	b2ad      	uxthmi	r5, r5
 800ba02:	6031      	str	r1, [r6, #0]
 800ba04:	07d9      	lsls	r1, r3, #31
 800ba06:	bf44      	itt	mi
 800ba08:	f043 0320 	orrmi.w	r3, r3, #32
 800ba0c:	6023      	strmi	r3, [r4, #0]
 800ba0e:	b11d      	cbz	r5, 800ba18 <_printf_i+0x19c>
 800ba10:	2310      	movs	r3, #16
 800ba12:	e7ad      	b.n	800b970 <_printf_i+0xf4>
 800ba14:	4826      	ldr	r0, [pc, #152]	@ (800bab0 <_printf_i+0x234>)
 800ba16:	e7e9      	b.n	800b9ec <_printf_i+0x170>
 800ba18:	6823      	ldr	r3, [r4, #0]
 800ba1a:	f023 0320 	bic.w	r3, r3, #32
 800ba1e:	6023      	str	r3, [r4, #0]
 800ba20:	e7f6      	b.n	800ba10 <_printf_i+0x194>
 800ba22:	4616      	mov	r6, r2
 800ba24:	e7bd      	b.n	800b9a2 <_printf_i+0x126>
 800ba26:	6833      	ldr	r3, [r6, #0]
 800ba28:	6825      	ldr	r5, [r4, #0]
 800ba2a:	6961      	ldr	r1, [r4, #20]
 800ba2c:	1d18      	adds	r0, r3, #4
 800ba2e:	6030      	str	r0, [r6, #0]
 800ba30:	062e      	lsls	r6, r5, #24
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	d501      	bpl.n	800ba3a <_printf_i+0x1be>
 800ba36:	6019      	str	r1, [r3, #0]
 800ba38:	e002      	b.n	800ba40 <_printf_i+0x1c4>
 800ba3a:	0668      	lsls	r0, r5, #25
 800ba3c:	d5fb      	bpl.n	800ba36 <_printf_i+0x1ba>
 800ba3e:	8019      	strh	r1, [r3, #0]
 800ba40:	2300      	movs	r3, #0
 800ba42:	6123      	str	r3, [r4, #16]
 800ba44:	4616      	mov	r6, r2
 800ba46:	e7bc      	b.n	800b9c2 <_printf_i+0x146>
 800ba48:	6833      	ldr	r3, [r6, #0]
 800ba4a:	1d1a      	adds	r2, r3, #4
 800ba4c:	6032      	str	r2, [r6, #0]
 800ba4e:	681e      	ldr	r6, [r3, #0]
 800ba50:	6862      	ldr	r2, [r4, #4]
 800ba52:	2100      	movs	r1, #0
 800ba54:	4630      	mov	r0, r6
 800ba56:	f7f4 fbc3 	bl	80001e0 <memchr>
 800ba5a:	b108      	cbz	r0, 800ba60 <_printf_i+0x1e4>
 800ba5c:	1b80      	subs	r0, r0, r6
 800ba5e:	6060      	str	r0, [r4, #4]
 800ba60:	6863      	ldr	r3, [r4, #4]
 800ba62:	6123      	str	r3, [r4, #16]
 800ba64:	2300      	movs	r3, #0
 800ba66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba6a:	e7aa      	b.n	800b9c2 <_printf_i+0x146>
 800ba6c:	6923      	ldr	r3, [r4, #16]
 800ba6e:	4632      	mov	r2, r6
 800ba70:	4649      	mov	r1, r9
 800ba72:	4640      	mov	r0, r8
 800ba74:	47d0      	blx	sl
 800ba76:	3001      	adds	r0, #1
 800ba78:	d0ad      	beq.n	800b9d6 <_printf_i+0x15a>
 800ba7a:	6823      	ldr	r3, [r4, #0]
 800ba7c:	079b      	lsls	r3, r3, #30
 800ba7e:	d413      	bmi.n	800baa8 <_printf_i+0x22c>
 800ba80:	68e0      	ldr	r0, [r4, #12]
 800ba82:	9b03      	ldr	r3, [sp, #12]
 800ba84:	4298      	cmp	r0, r3
 800ba86:	bfb8      	it	lt
 800ba88:	4618      	movlt	r0, r3
 800ba8a:	e7a6      	b.n	800b9da <_printf_i+0x15e>
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	4632      	mov	r2, r6
 800ba90:	4649      	mov	r1, r9
 800ba92:	4640      	mov	r0, r8
 800ba94:	47d0      	blx	sl
 800ba96:	3001      	adds	r0, #1
 800ba98:	d09d      	beq.n	800b9d6 <_printf_i+0x15a>
 800ba9a:	3501      	adds	r5, #1
 800ba9c:	68e3      	ldr	r3, [r4, #12]
 800ba9e:	9903      	ldr	r1, [sp, #12]
 800baa0:	1a5b      	subs	r3, r3, r1
 800baa2:	42ab      	cmp	r3, r5
 800baa4:	dcf2      	bgt.n	800ba8c <_printf_i+0x210>
 800baa6:	e7eb      	b.n	800ba80 <_printf_i+0x204>
 800baa8:	2500      	movs	r5, #0
 800baaa:	f104 0619 	add.w	r6, r4, #25
 800baae:	e7f5      	b.n	800ba9c <_printf_i+0x220>
 800bab0:	0800c100 	.word	0x0800c100
 800bab4:	0800c111 	.word	0x0800c111

0800bab8 <__sflush_r>:
 800bab8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800babc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bac0:	0716      	lsls	r6, r2, #28
 800bac2:	4605      	mov	r5, r0
 800bac4:	460c      	mov	r4, r1
 800bac6:	d454      	bmi.n	800bb72 <__sflush_r+0xba>
 800bac8:	684b      	ldr	r3, [r1, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	dc02      	bgt.n	800bad4 <__sflush_r+0x1c>
 800bace:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	dd48      	ble.n	800bb66 <__sflush_r+0xae>
 800bad4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bad6:	2e00      	cmp	r6, #0
 800bad8:	d045      	beq.n	800bb66 <__sflush_r+0xae>
 800bada:	2300      	movs	r3, #0
 800badc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bae0:	682f      	ldr	r7, [r5, #0]
 800bae2:	6a21      	ldr	r1, [r4, #32]
 800bae4:	602b      	str	r3, [r5, #0]
 800bae6:	d030      	beq.n	800bb4a <__sflush_r+0x92>
 800bae8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800baea:	89a3      	ldrh	r3, [r4, #12]
 800baec:	0759      	lsls	r1, r3, #29
 800baee:	d505      	bpl.n	800bafc <__sflush_r+0x44>
 800baf0:	6863      	ldr	r3, [r4, #4]
 800baf2:	1ad2      	subs	r2, r2, r3
 800baf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800baf6:	b10b      	cbz	r3, 800bafc <__sflush_r+0x44>
 800baf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bafa:	1ad2      	subs	r2, r2, r3
 800bafc:	2300      	movs	r3, #0
 800bafe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb00:	6a21      	ldr	r1, [r4, #32]
 800bb02:	4628      	mov	r0, r5
 800bb04:	47b0      	blx	r6
 800bb06:	1c43      	adds	r3, r0, #1
 800bb08:	89a3      	ldrh	r3, [r4, #12]
 800bb0a:	d106      	bne.n	800bb1a <__sflush_r+0x62>
 800bb0c:	6829      	ldr	r1, [r5, #0]
 800bb0e:	291d      	cmp	r1, #29
 800bb10:	d82b      	bhi.n	800bb6a <__sflush_r+0xb2>
 800bb12:	4a2a      	ldr	r2, [pc, #168]	@ (800bbbc <__sflush_r+0x104>)
 800bb14:	40ca      	lsrs	r2, r1
 800bb16:	07d6      	lsls	r6, r2, #31
 800bb18:	d527      	bpl.n	800bb6a <__sflush_r+0xb2>
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	6062      	str	r2, [r4, #4]
 800bb1e:	04d9      	lsls	r1, r3, #19
 800bb20:	6922      	ldr	r2, [r4, #16]
 800bb22:	6022      	str	r2, [r4, #0]
 800bb24:	d504      	bpl.n	800bb30 <__sflush_r+0x78>
 800bb26:	1c42      	adds	r2, r0, #1
 800bb28:	d101      	bne.n	800bb2e <__sflush_r+0x76>
 800bb2a:	682b      	ldr	r3, [r5, #0]
 800bb2c:	b903      	cbnz	r3, 800bb30 <__sflush_r+0x78>
 800bb2e:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb32:	602f      	str	r7, [r5, #0]
 800bb34:	b1b9      	cbz	r1, 800bb66 <__sflush_r+0xae>
 800bb36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb3a:	4299      	cmp	r1, r3
 800bb3c:	d002      	beq.n	800bb44 <__sflush_r+0x8c>
 800bb3e:	4628      	mov	r0, r5
 800bb40:	f7ff fbec 	bl	800b31c <_free_r>
 800bb44:	2300      	movs	r3, #0
 800bb46:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb48:	e00d      	b.n	800bb66 <__sflush_r+0xae>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	47b0      	blx	r6
 800bb50:	4602      	mov	r2, r0
 800bb52:	1c50      	adds	r0, r2, #1
 800bb54:	d1c9      	bne.n	800baea <__sflush_r+0x32>
 800bb56:	682b      	ldr	r3, [r5, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d0c6      	beq.n	800baea <__sflush_r+0x32>
 800bb5c:	2b1d      	cmp	r3, #29
 800bb5e:	d001      	beq.n	800bb64 <__sflush_r+0xac>
 800bb60:	2b16      	cmp	r3, #22
 800bb62:	d11e      	bne.n	800bba2 <__sflush_r+0xea>
 800bb64:	602f      	str	r7, [r5, #0]
 800bb66:	2000      	movs	r0, #0
 800bb68:	e022      	b.n	800bbb0 <__sflush_r+0xf8>
 800bb6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb6e:	b21b      	sxth	r3, r3
 800bb70:	e01b      	b.n	800bbaa <__sflush_r+0xf2>
 800bb72:	690f      	ldr	r7, [r1, #16]
 800bb74:	2f00      	cmp	r7, #0
 800bb76:	d0f6      	beq.n	800bb66 <__sflush_r+0xae>
 800bb78:	0793      	lsls	r3, r2, #30
 800bb7a:	680e      	ldr	r6, [r1, #0]
 800bb7c:	bf08      	it	eq
 800bb7e:	694b      	ldreq	r3, [r1, #20]
 800bb80:	600f      	str	r7, [r1, #0]
 800bb82:	bf18      	it	ne
 800bb84:	2300      	movne	r3, #0
 800bb86:	eba6 0807 	sub.w	r8, r6, r7
 800bb8a:	608b      	str	r3, [r1, #8]
 800bb8c:	f1b8 0f00 	cmp.w	r8, #0
 800bb90:	dde9      	ble.n	800bb66 <__sflush_r+0xae>
 800bb92:	6a21      	ldr	r1, [r4, #32]
 800bb94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bb96:	4643      	mov	r3, r8
 800bb98:	463a      	mov	r2, r7
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	47b0      	blx	r6
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	dc08      	bgt.n	800bbb4 <__sflush_r+0xfc>
 800bba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbaa:	81a3      	strh	r3, [r4, #12]
 800bbac:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbb4:	4407      	add	r7, r0
 800bbb6:	eba8 0800 	sub.w	r8, r8, r0
 800bbba:	e7e7      	b.n	800bb8c <__sflush_r+0xd4>
 800bbbc:	20400001 	.word	0x20400001

0800bbc0 <_fflush_r>:
 800bbc0:	b538      	push	{r3, r4, r5, lr}
 800bbc2:	690b      	ldr	r3, [r1, #16]
 800bbc4:	4605      	mov	r5, r0
 800bbc6:	460c      	mov	r4, r1
 800bbc8:	b913      	cbnz	r3, 800bbd0 <_fflush_r+0x10>
 800bbca:	2500      	movs	r5, #0
 800bbcc:	4628      	mov	r0, r5
 800bbce:	bd38      	pop	{r3, r4, r5, pc}
 800bbd0:	b118      	cbz	r0, 800bbda <_fflush_r+0x1a>
 800bbd2:	6a03      	ldr	r3, [r0, #32]
 800bbd4:	b90b      	cbnz	r3, 800bbda <_fflush_r+0x1a>
 800bbd6:	f7ff fa6d 	bl	800b0b4 <__sinit>
 800bbda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d0f3      	beq.n	800bbca <_fflush_r+0xa>
 800bbe2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bbe4:	07d0      	lsls	r0, r2, #31
 800bbe6:	d404      	bmi.n	800bbf2 <_fflush_r+0x32>
 800bbe8:	0599      	lsls	r1, r3, #22
 800bbea:	d402      	bmi.n	800bbf2 <_fflush_r+0x32>
 800bbec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbee:	f7ff fb66 	bl	800b2be <__retarget_lock_acquire_recursive>
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	4621      	mov	r1, r4
 800bbf6:	f7ff ff5f 	bl	800bab8 <__sflush_r>
 800bbfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbfc:	07da      	lsls	r2, r3, #31
 800bbfe:	4605      	mov	r5, r0
 800bc00:	d4e4      	bmi.n	800bbcc <_fflush_r+0xc>
 800bc02:	89a3      	ldrh	r3, [r4, #12]
 800bc04:	059b      	lsls	r3, r3, #22
 800bc06:	d4e1      	bmi.n	800bbcc <_fflush_r+0xc>
 800bc08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc0a:	f7ff fb59 	bl	800b2c0 <__retarget_lock_release_recursive>
 800bc0e:	e7dd      	b.n	800bbcc <_fflush_r+0xc>

0800bc10 <fiprintf>:
 800bc10:	b40e      	push	{r1, r2, r3}
 800bc12:	b503      	push	{r0, r1, lr}
 800bc14:	4601      	mov	r1, r0
 800bc16:	ab03      	add	r3, sp, #12
 800bc18:	4805      	ldr	r0, [pc, #20]	@ (800bc30 <fiprintf+0x20>)
 800bc1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc1e:	6800      	ldr	r0, [r0, #0]
 800bc20:	9301      	str	r3, [sp, #4]
 800bc22:	f7ff fca5 	bl	800b570 <_vfiprintf_r>
 800bc26:	b002      	add	sp, #8
 800bc28:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc2c:	b003      	add	sp, #12
 800bc2e:	4770      	bx	lr
 800bc30:	20000068 	.word	0x20000068

0800bc34 <__swbuf_r>:
 800bc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc36:	460e      	mov	r6, r1
 800bc38:	4614      	mov	r4, r2
 800bc3a:	4605      	mov	r5, r0
 800bc3c:	b118      	cbz	r0, 800bc46 <__swbuf_r+0x12>
 800bc3e:	6a03      	ldr	r3, [r0, #32]
 800bc40:	b90b      	cbnz	r3, 800bc46 <__swbuf_r+0x12>
 800bc42:	f7ff fa37 	bl	800b0b4 <__sinit>
 800bc46:	69a3      	ldr	r3, [r4, #24]
 800bc48:	60a3      	str	r3, [r4, #8]
 800bc4a:	89a3      	ldrh	r3, [r4, #12]
 800bc4c:	071a      	lsls	r2, r3, #28
 800bc4e:	d501      	bpl.n	800bc54 <__swbuf_r+0x20>
 800bc50:	6923      	ldr	r3, [r4, #16]
 800bc52:	b943      	cbnz	r3, 800bc66 <__swbuf_r+0x32>
 800bc54:	4621      	mov	r1, r4
 800bc56:	4628      	mov	r0, r5
 800bc58:	f000 f82a 	bl	800bcb0 <__swsetup_r>
 800bc5c:	b118      	cbz	r0, 800bc66 <__swbuf_r+0x32>
 800bc5e:	f04f 37ff 	mov.w	r7, #4294967295
 800bc62:	4638      	mov	r0, r7
 800bc64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc66:	6823      	ldr	r3, [r4, #0]
 800bc68:	6922      	ldr	r2, [r4, #16]
 800bc6a:	1a98      	subs	r0, r3, r2
 800bc6c:	6963      	ldr	r3, [r4, #20]
 800bc6e:	b2f6      	uxtb	r6, r6
 800bc70:	4283      	cmp	r3, r0
 800bc72:	4637      	mov	r7, r6
 800bc74:	dc05      	bgt.n	800bc82 <__swbuf_r+0x4e>
 800bc76:	4621      	mov	r1, r4
 800bc78:	4628      	mov	r0, r5
 800bc7a:	f7ff ffa1 	bl	800bbc0 <_fflush_r>
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d1ed      	bne.n	800bc5e <__swbuf_r+0x2a>
 800bc82:	68a3      	ldr	r3, [r4, #8]
 800bc84:	3b01      	subs	r3, #1
 800bc86:	60a3      	str	r3, [r4, #8]
 800bc88:	6823      	ldr	r3, [r4, #0]
 800bc8a:	1c5a      	adds	r2, r3, #1
 800bc8c:	6022      	str	r2, [r4, #0]
 800bc8e:	701e      	strb	r6, [r3, #0]
 800bc90:	6962      	ldr	r2, [r4, #20]
 800bc92:	1c43      	adds	r3, r0, #1
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d004      	beq.n	800bca2 <__swbuf_r+0x6e>
 800bc98:	89a3      	ldrh	r3, [r4, #12]
 800bc9a:	07db      	lsls	r3, r3, #31
 800bc9c:	d5e1      	bpl.n	800bc62 <__swbuf_r+0x2e>
 800bc9e:	2e0a      	cmp	r6, #10
 800bca0:	d1df      	bne.n	800bc62 <__swbuf_r+0x2e>
 800bca2:	4621      	mov	r1, r4
 800bca4:	4628      	mov	r0, r5
 800bca6:	f7ff ff8b 	bl	800bbc0 <_fflush_r>
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	d0d9      	beq.n	800bc62 <__swbuf_r+0x2e>
 800bcae:	e7d6      	b.n	800bc5e <__swbuf_r+0x2a>

0800bcb0 <__swsetup_r>:
 800bcb0:	b538      	push	{r3, r4, r5, lr}
 800bcb2:	4b29      	ldr	r3, [pc, #164]	@ (800bd58 <__swsetup_r+0xa8>)
 800bcb4:	4605      	mov	r5, r0
 800bcb6:	6818      	ldr	r0, [r3, #0]
 800bcb8:	460c      	mov	r4, r1
 800bcba:	b118      	cbz	r0, 800bcc4 <__swsetup_r+0x14>
 800bcbc:	6a03      	ldr	r3, [r0, #32]
 800bcbe:	b90b      	cbnz	r3, 800bcc4 <__swsetup_r+0x14>
 800bcc0:	f7ff f9f8 	bl	800b0b4 <__sinit>
 800bcc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcc8:	0719      	lsls	r1, r3, #28
 800bcca:	d422      	bmi.n	800bd12 <__swsetup_r+0x62>
 800bccc:	06da      	lsls	r2, r3, #27
 800bcce:	d407      	bmi.n	800bce0 <__swsetup_r+0x30>
 800bcd0:	2209      	movs	r2, #9
 800bcd2:	602a      	str	r2, [r5, #0]
 800bcd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcd8:	81a3      	strh	r3, [r4, #12]
 800bcda:	f04f 30ff 	mov.w	r0, #4294967295
 800bcde:	e033      	b.n	800bd48 <__swsetup_r+0x98>
 800bce0:	0758      	lsls	r0, r3, #29
 800bce2:	d512      	bpl.n	800bd0a <__swsetup_r+0x5a>
 800bce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bce6:	b141      	cbz	r1, 800bcfa <__swsetup_r+0x4a>
 800bce8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcec:	4299      	cmp	r1, r3
 800bcee:	d002      	beq.n	800bcf6 <__swsetup_r+0x46>
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	f7ff fb13 	bl	800b31c <_free_r>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcfa:	89a3      	ldrh	r3, [r4, #12]
 800bcfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd00:	81a3      	strh	r3, [r4, #12]
 800bd02:	2300      	movs	r3, #0
 800bd04:	6063      	str	r3, [r4, #4]
 800bd06:	6923      	ldr	r3, [r4, #16]
 800bd08:	6023      	str	r3, [r4, #0]
 800bd0a:	89a3      	ldrh	r3, [r4, #12]
 800bd0c:	f043 0308 	orr.w	r3, r3, #8
 800bd10:	81a3      	strh	r3, [r4, #12]
 800bd12:	6923      	ldr	r3, [r4, #16]
 800bd14:	b94b      	cbnz	r3, 800bd2a <__swsetup_r+0x7a>
 800bd16:	89a3      	ldrh	r3, [r4, #12]
 800bd18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd20:	d003      	beq.n	800bd2a <__swsetup_r+0x7a>
 800bd22:	4621      	mov	r1, r4
 800bd24:	4628      	mov	r0, r5
 800bd26:	f000 f856 	bl	800bdd6 <__smakebuf_r>
 800bd2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd2e:	f013 0201 	ands.w	r2, r3, #1
 800bd32:	d00a      	beq.n	800bd4a <__swsetup_r+0x9a>
 800bd34:	2200      	movs	r2, #0
 800bd36:	60a2      	str	r2, [r4, #8]
 800bd38:	6962      	ldr	r2, [r4, #20]
 800bd3a:	4252      	negs	r2, r2
 800bd3c:	61a2      	str	r2, [r4, #24]
 800bd3e:	6922      	ldr	r2, [r4, #16]
 800bd40:	b942      	cbnz	r2, 800bd54 <__swsetup_r+0xa4>
 800bd42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bd46:	d1c5      	bne.n	800bcd4 <__swsetup_r+0x24>
 800bd48:	bd38      	pop	{r3, r4, r5, pc}
 800bd4a:	0799      	lsls	r1, r3, #30
 800bd4c:	bf58      	it	pl
 800bd4e:	6962      	ldrpl	r2, [r4, #20]
 800bd50:	60a2      	str	r2, [r4, #8]
 800bd52:	e7f4      	b.n	800bd3e <__swsetup_r+0x8e>
 800bd54:	2000      	movs	r0, #0
 800bd56:	e7f7      	b.n	800bd48 <__swsetup_r+0x98>
 800bd58:	20000068 	.word	0x20000068

0800bd5c <_sbrk_r>:
 800bd5c:	b538      	push	{r3, r4, r5, lr}
 800bd5e:	4d06      	ldr	r5, [pc, #24]	@ (800bd78 <_sbrk_r+0x1c>)
 800bd60:	2300      	movs	r3, #0
 800bd62:	4604      	mov	r4, r0
 800bd64:	4608      	mov	r0, r1
 800bd66:	602b      	str	r3, [r5, #0]
 800bd68:	f7f6 ff12 	bl	8002b90 <_sbrk>
 800bd6c:	1c43      	adds	r3, r0, #1
 800bd6e:	d102      	bne.n	800bd76 <_sbrk_r+0x1a>
 800bd70:	682b      	ldr	r3, [r5, #0]
 800bd72:	b103      	cbz	r3, 800bd76 <_sbrk_r+0x1a>
 800bd74:	6023      	str	r3, [r4, #0]
 800bd76:	bd38      	pop	{r3, r4, r5, pc}
 800bd78:	20002e44 	.word	0x20002e44

0800bd7c <abort>:
 800bd7c:	b508      	push	{r3, lr}
 800bd7e:	2006      	movs	r0, #6
 800bd80:	f000 f88e 	bl	800bea0 <raise>
 800bd84:	2001      	movs	r0, #1
 800bd86:	f7f6 fe8b 	bl	8002aa0 <_exit>

0800bd8a <__swhatbuf_r>:
 800bd8a:	b570      	push	{r4, r5, r6, lr}
 800bd8c:	460c      	mov	r4, r1
 800bd8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd92:	2900      	cmp	r1, #0
 800bd94:	b096      	sub	sp, #88	@ 0x58
 800bd96:	4615      	mov	r5, r2
 800bd98:	461e      	mov	r6, r3
 800bd9a:	da0d      	bge.n	800bdb8 <__swhatbuf_r+0x2e>
 800bd9c:	89a3      	ldrh	r3, [r4, #12]
 800bd9e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bda2:	f04f 0100 	mov.w	r1, #0
 800bda6:	bf14      	ite	ne
 800bda8:	2340      	movne	r3, #64	@ 0x40
 800bdaa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bdae:	2000      	movs	r0, #0
 800bdb0:	6031      	str	r1, [r6, #0]
 800bdb2:	602b      	str	r3, [r5, #0]
 800bdb4:	b016      	add	sp, #88	@ 0x58
 800bdb6:	bd70      	pop	{r4, r5, r6, pc}
 800bdb8:	466a      	mov	r2, sp
 800bdba:	f000 f879 	bl	800beb0 <_fstat_r>
 800bdbe:	2800      	cmp	r0, #0
 800bdc0:	dbec      	blt.n	800bd9c <__swhatbuf_r+0x12>
 800bdc2:	9901      	ldr	r1, [sp, #4]
 800bdc4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bdc8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bdcc:	4259      	negs	r1, r3
 800bdce:	4159      	adcs	r1, r3
 800bdd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bdd4:	e7eb      	b.n	800bdae <__swhatbuf_r+0x24>

0800bdd6 <__smakebuf_r>:
 800bdd6:	898b      	ldrh	r3, [r1, #12]
 800bdd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdda:	079d      	lsls	r5, r3, #30
 800bddc:	4606      	mov	r6, r0
 800bdde:	460c      	mov	r4, r1
 800bde0:	d507      	bpl.n	800bdf2 <__smakebuf_r+0x1c>
 800bde2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bde6:	6023      	str	r3, [r4, #0]
 800bde8:	6123      	str	r3, [r4, #16]
 800bdea:	2301      	movs	r3, #1
 800bdec:	6163      	str	r3, [r4, #20]
 800bdee:	b003      	add	sp, #12
 800bdf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdf2:	ab01      	add	r3, sp, #4
 800bdf4:	466a      	mov	r2, sp
 800bdf6:	f7ff ffc8 	bl	800bd8a <__swhatbuf_r>
 800bdfa:	9f00      	ldr	r7, [sp, #0]
 800bdfc:	4605      	mov	r5, r0
 800bdfe:	4639      	mov	r1, r7
 800be00:	4630      	mov	r0, r6
 800be02:	f7ff faff 	bl	800b404 <_malloc_r>
 800be06:	b948      	cbnz	r0, 800be1c <__smakebuf_r+0x46>
 800be08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be0c:	059a      	lsls	r2, r3, #22
 800be0e:	d4ee      	bmi.n	800bdee <__smakebuf_r+0x18>
 800be10:	f023 0303 	bic.w	r3, r3, #3
 800be14:	f043 0302 	orr.w	r3, r3, #2
 800be18:	81a3      	strh	r3, [r4, #12]
 800be1a:	e7e2      	b.n	800bde2 <__smakebuf_r+0xc>
 800be1c:	89a3      	ldrh	r3, [r4, #12]
 800be1e:	6020      	str	r0, [r4, #0]
 800be20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be24:	81a3      	strh	r3, [r4, #12]
 800be26:	9b01      	ldr	r3, [sp, #4]
 800be28:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be2c:	b15b      	cbz	r3, 800be46 <__smakebuf_r+0x70>
 800be2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be32:	4630      	mov	r0, r6
 800be34:	f000 f84e 	bl	800bed4 <_isatty_r>
 800be38:	b128      	cbz	r0, 800be46 <__smakebuf_r+0x70>
 800be3a:	89a3      	ldrh	r3, [r4, #12]
 800be3c:	f023 0303 	bic.w	r3, r3, #3
 800be40:	f043 0301 	orr.w	r3, r3, #1
 800be44:	81a3      	strh	r3, [r4, #12]
 800be46:	89a3      	ldrh	r3, [r4, #12]
 800be48:	431d      	orrs	r5, r3
 800be4a:	81a5      	strh	r5, [r4, #12]
 800be4c:	e7cf      	b.n	800bdee <__smakebuf_r+0x18>

0800be4e <_raise_r>:
 800be4e:	291f      	cmp	r1, #31
 800be50:	b538      	push	{r3, r4, r5, lr}
 800be52:	4605      	mov	r5, r0
 800be54:	460c      	mov	r4, r1
 800be56:	d904      	bls.n	800be62 <_raise_r+0x14>
 800be58:	2316      	movs	r3, #22
 800be5a:	6003      	str	r3, [r0, #0]
 800be5c:	f04f 30ff 	mov.w	r0, #4294967295
 800be60:	bd38      	pop	{r3, r4, r5, pc}
 800be62:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800be64:	b112      	cbz	r2, 800be6c <_raise_r+0x1e>
 800be66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be6a:	b94b      	cbnz	r3, 800be80 <_raise_r+0x32>
 800be6c:	4628      	mov	r0, r5
 800be6e:	f000 f853 	bl	800bf18 <_getpid_r>
 800be72:	4622      	mov	r2, r4
 800be74:	4601      	mov	r1, r0
 800be76:	4628      	mov	r0, r5
 800be78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be7c:	f000 b83a 	b.w	800bef4 <_kill_r>
 800be80:	2b01      	cmp	r3, #1
 800be82:	d00a      	beq.n	800be9a <_raise_r+0x4c>
 800be84:	1c59      	adds	r1, r3, #1
 800be86:	d103      	bne.n	800be90 <_raise_r+0x42>
 800be88:	2316      	movs	r3, #22
 800be8a:	6003      	str	r3, [r0, #0]
 800be8c:	2001      	movs	r0, #1
 800be8e:	e7e7      	b.n	800be60 <_raise_r+0x12>
 800be90:	2100      	movs	r1, #0
 800be92:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800be96:	4620      	mov	r0, r4
 800be98:	4798      	blx	r3
 800be9a:	2000      	movs	r0, #0
 800be9c:	e7e0      	b.n	800be60 <_raise_r+0x12>
	...

0800bea0 <raise>:
 800bea0:	4b02      	ldr	r3, [pc, #8]	@ (800beac <raise+0xc>)
 800bea2:	4601      	mov	r1, r0
 800bea4:	6818      	ldr	r0, [r3, #0]
 800bea6:	f7ff bfd2 	b.w	800be4e <_raise_r>
 800beaa:	bf00      	nop
 800beac:	20000068 	.word	0x20000068

0800beb0 <_fstat_r>:
 800beb0:	b538      	push	{r3, r4, r5, lr}
 800beb2:	4d07      	ldr	r5, [pc, #28]	@ (800bed0 <_fstat_r+0x20>)
 800beb4:	2300      	movs	r3, #0
 800beb6:	4604      	mov	r4, r0
 800beb8:	4608      	mov	r0, r1
 800beba:	4611      	mov	r1, r2
 800bebc:	602b      	str	r3, [r5, #0]
 800bebe:	f7f6 fe3f 	bl	8002b40 <_fstat>
 800bec2:	1c43      	adds	r3, r0, #1
 800bec4:	d102      	bne.n	800becc <_fstat_r+0x1c>
 800bec6:	682b      	ldr	r3, [r5, #0]
 800bec8:	b103      	cbz	r3, 800becc <_fstat_r+0x1c>
 800beca:	6023      	str	r3, [r4, #0]
 800becc:	bd38      	pop	{r3, r4, r5, pc}
 800bece:	bf00      	nop
 800bed0:	20002e44 	.word	0x20002e44

0800bed4 <_isatty_r>:
 800bed4:	b538      	push	{r3, r4, r5, lr}
 800bed6:	4d06      	ldr	r5, [pc, #24]	@ (800bef0 <_isatty_r+0x1c>)
 800bed8:	2300      	movs	r3, #0
 800beda:	4604      	mov	r4, r0
 800bedc:	4608      	mov	r0, r1
 800bede:	602b      	str	r3, [r5, #0]
 800bee0:	f7f6 fe3e 	bl	8002b60 <_isatty>
 800bee4:	1c43      	adds	r3, r0, #1
 800bee6:	d102      	bne.n	800beee <_isatty_r+0x1a>
 800bee8:	682b      	ldr	r3, [r5, #0]
 800beea:	b103      	cbz	r3, 800beee <_isatty_r+0x1a>
 800beec:	6023      	str	r3, [r4, #0]
 800beee:	bd38      	pop	{r3, r4, r5, pc}
 800bef0:	20002e44 	.word	0x20002e44

0800bef4 <_kill_r>:
 800bef4:	b538      	push	{r3, r4, r5, lr}
 800bef6:	4d07      	ldr	r5, [pc, #28]	@ (800bf14 <_kill_r+0x20>)
 800bef8:	2300      	movs	r3, #0
 800befa:	4604      	mov	r4, r0
 800befc:	4608      	mov	r0, r1
 800befe:	4611      	mov	r1, r2
 800bf00:	602b      	str	r3, [r5, #0]
 800bf02:	f7f6 fdbd 	bl	8002a80 <_kill>
 800bf06:	1c43      	adds	r3, r0, #1
 800bf08:	d102      	bne.n	800bf10 <_kill_r+0x1c>
 800bf0a:	682b      	ldr	r3, [r5, #0]
 800bf0c:	b103      	cbz	r3, 800bf10 <_kill_r+0x1c>
 800bf0e:	6023      	str	r3, [r4, #0]
 800bf10:	bd38      	pop	{r3, r4, r5, pc}
 800bf12:	bf00      	nop
 800bf14:	20002e44 	.word	0x20002e44

0800bf18 <_getpid_r>:
 800bf18:	f7f6 bdaa 	b.w	8002a70 <_getpid>

0800bf1c <_init>:
 800bf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf1e:	bf00      	nop
 800bf20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf22:	bc08      	pop	{r3}
 800bf24:	469e      	mov	lr, r3
 800bf26:	4770      	bx	lr

0800bf28 <_fini>:
 800bf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf2a:	bf00      	nop
 800bf2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf2e:	bc08      	pop	{r3}
 800bf30:	469e      	mov	lr, r3
 800bf32:	4770      	bx	lr
