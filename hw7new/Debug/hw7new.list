
hw7new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b140  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ce4  0800b2d0  0800b2d0  0000c2d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfb4  0800bfb4  0000d220  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bfb4  0800bfb4  0000cfb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfbc  0800bfbc  0000d220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfbc  0800bfbc  0000cfbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bfc0  0800bfc0  0000cfc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  0800bfc4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002010  20000220  0800c1e4  0000d220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002230  0800c1e4  0000d230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023dd8  00000000  00000000  0000d250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f24  00000000  00000000  00031028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e58  00000000  00000000  00035f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001716  00000000  00000000  00037da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bd3a  00000000  00000000  000394be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000230ec  00000000  00000000  000651f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001035bb  00000000  00000000  000882e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0018b89f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f68  00000000  00000000  0018b958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001948c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000d0a  00000000  00000000  00194921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  0019562b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b2b8 	.word	0x0800b2b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	0800b2b8 	.word	0x0800b2b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4a07      	ldr	r2, [pc, #28]	@ (8000f00 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ee4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	4a06      	ldr	r2, [pc, #24]	@ (8000f04 <vApplicationGetIdleTaskMemory+0x30>)
 8000eea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2280      	movs	r2, #128	@ 0x80
 8000ef0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ef2:	bf00      	nop
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	2000023c 	.word	0x2000023c
 8000f04:	20000290 	.word	0x20000290

08000f08 <__io_putchar>:
void StartTask02(void const * argument);
void StartTask03(void const * argument);
void StartTask04(void const * argument);

/* USER CODE BEGIN PFP */
int __io_putchar(int ch){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000f10:	1d39      	adds	r1, r7, #4
 8000f12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f16:	2201      	movs	r2, #1
 8000f18:	4803      	ldr	r0, [pc, #12]	@ (8000f28 <__io_putchar+0x20>)
 8000f1a:	f004 fe1a 	bl	8005b52 <HAL_UART_Transmit>
	return ch;
 8000f1e:	687b      	ldr	r3, [r7, #4]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200005c4 	.word	0x200005c4

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b0a0      	sub	sp, #128	@ 0x80
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f32:	f001 fbfd 	bl	8002730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f36:	f000 f883 	bl	8001040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3a:	f000 fa4b 	bl	80013d4 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000f3e:	f000 f8e1 	bl	8001104 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000f42:	f000 f917 	bl	8001174 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000f46:	f000 f953 	bl	80011f0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000f4a:	f000 f977 	bl	800123c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000f4e:	f000 f9b3 	bl	80012b8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f52:	f000 f9e1 	bl	8001318 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f56:	f000 fa0f 	bl	8001378 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8000f5a:	f001 fba9 	bl	80026b0 <BSP_ACCELERO_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQStaticDef(myQueue01, 16, uint16_t, myQueue01Buffer, &myQueue01ControlBlock);
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001018 <main+0xec>)
 8000f60:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8000f64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000f6a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f005 fe75 	bl	8006c60 <osMessageCreate>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a28      	ldr	r2, [pc, #160]	@ (800101c <main+0xf0>)
 8000f7a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000f7c:	4b28      	ldr	r3, [pc, #160]	@ (8001020 <main+0xf4>)
 8000f7e:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000f82:	461d      	mov	r5, r3
 8000f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f005 fe02 	bl	8006ba0 <osThreadCreate>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a21      	ldr	r2, [pc, #132]	@ (8001024 <main+0xf8>)
 8000fa0:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadStaticDef(myTask02, StartTask02, osPriorityHigh, 0, 128, myTask02Buffer, &myTask02ControlBlock);
 8000fa2:	4b21      	ldr	r3, [pc, #132]	@ (8001028 <main+0xfc>)
 8000fa4:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000fa8:	461d      	mov	r5, r3
 8000faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000fb6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f005 fdef 	bl	8006ba0 <osThreadCreate>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a19      	ldr	r2, [pc, #100]	@ (800102c <main+0x100>)
 8000fc6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadStaticDef(myTask03, StartTask03, osPriorityAboveNormal, 0, 128, myTask03Buffer, &myTask03ControlBlock);
 8000fc8:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <main+0x104>)
 8000fca:	f107 041c 	add.w	r4, r7, #28
 8000fce:	461d      	mov	r5, r3
 8000fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f005 fddc 	bl	8006ba0 <osThreadCreate>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4a12      	ldr	r2, [pc, #72]	@ (8001034 <main+0x108>)
 8000fec:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadStaticDef(myTask04, StartTask04, osPriorityNormal, 0, 128, myTask04Buffer, &myTask04ControlBlock);
 8000fee:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <main+0x10c>)
 8000ff0:	463c      	mov	r4, r7
 8000ff2:	461d      	mov	r5, r3
 8000ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ffc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8001000:	463b      	mov	r3, r7
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f005 fdcb 	bl	8006ba0 <osThreadCreate>
 800100a:	4603      	mov	r3, r0
 800100c:	4a0b      	ldr	r2, [pc, #44]	@ (800103c <main+0x110>)
 800100e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001010:	f005 fdbf 	bl	8006b92 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <main+0xe8>
 8001018:	0800b2d0 	.word	0x0800b2d0
 800101c:	200012c4 	.word	0x200012c4
 8001020:	0800b2ec 	.word	0x0800b2ec
 8001024:	20000bb8 	.word	0x20000bb8
 8001028:	0800b314 	.word	0x0800b314
 800102c:	20000bbc 	.word	0x20000bbc
 8001030:	0800b33c 	.word	0x0800b33c
 8001034:	20000e14 	.word	0x20000e14
 8001038:	0800b364 	.word	0x0800b364
 800103c:	2000106c 	.word	0x2000106c

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b096      	sub	sp, #88	@ 0x58
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	2244      	movs	r2, #68	@ 0x44
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f008 fa0b 	bl	800946a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001062:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001066:	f003 f895 	bl	8004194 <HAL_PWREx_ControlVoltageScaling>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001070:	f000 fc06 	bl	8001880 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001074:	f003 f870 	bl	8004158 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001078:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <SystemClock_Config+0xc0>)
 800107a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800107e:	4a20      	ldr	r2, [pc, #128]	@ (8001100 <SystemClock_Config+0xc0>)
 8001080:	f023 0318 	bic.w	r3, r3, #24
 8001084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001088:	2314      	movs	r3, #20
 800108a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800108c:	2301      	movs	r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001090:	2301      	movs	r3, #1
 8001092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001098:	2360      	movs	r3, #96	@ 0x60
 800109a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109c:	2302      	movs	r3, #2
 800109e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010a0:	2301      	movs	r3, #1
 80010a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80010a8:	2328      	movs	r3, #40	@ 0x28
 80010aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010ac:	2307      	movs	r3, #7
 80010ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4618      	mov	r0, r3
 80010be:	f003 f98b 	bl	80043d8 <HAL_RCC_OscConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80010c8:	f000 fbda 	bl	8001880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010cc:	230f      	movs	r3, #15
 80010ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d0:	2303      	movs	r3, #3
 80010d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010e0:	463b      	mov	r3, r7
 80010e2:	2104      	movs	r1, #4
 80010e4:	4618      	mov	r0, r3
 80010e6:	f003 fd53 	bl	8004b90 <HAL_RCC_ClockConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80010f0:	f000 fbc6 	bl	8001880 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010f4:	f004 fa5a 	bl	80055ac <HAL_RCCEx_EnableMSIPLLMode>
}
 80010f8:	bf00      	nop
 80010fa:	3758      	adds	r7, #88	@ 0x58
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000

08001104 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001108:	4b18      	ldr	r3, [pc, #96]	@ (800116c <MX_DFSDM1_Init+0x68>)
 800110a:	4a19      	ldr	r2, [pc, #100]	@ (8001170 <MX_DFSDM1_Init+0x6c>)
 800110c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800110e:	4b17      	ldr	r3, [pc, #92]	@ (800116c <MX_DFSDM1_Init+0x68>)
 8001110:	2201      	movs	r2, #1
 8001112:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001114:	4b15      	ldr	r3, [pc, #84]	@ (800116c <MX_DFSDM1_Init+0x68>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800111a:	4b14      	ldr	r3, [pc, #80]	@ (800116c <MX_DFSDM1_Init+0x68>)
 800111c:	2202      	movs	r2, #2
 800111e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001120:	4b12      	ldr	r3, [pc, #72]	@ (800116c <MX_DFSDM1_Init+0x68>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <MX_DFSDM1_Init+0x68>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <MX_DFSDM1_Init+0x68>)
 800112e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001132:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001134:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <MX_DFSDM1_Init+0x68>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800113a:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <MX_DFSDM1_Init+0x68>)
 800113c:	2204      	movs	r2, #4
 800113e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001140:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <MX_DFSDM1_Init+0x68>)
 8001142:	2200      	movs	r2, #0
 8001144:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001146:	4b09      	ldr	r3, [pc, #36]	@ (800116c <MX_DFSDM1_Init+0x68>)
 8001148:	2201      	movs	r2, #1
 800114a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <MX_DFSDM1_Init+0x68>)
 800114e:	2200      	movs	r2, #0
 8001150:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001152:	4b06      	ldr	r3, [pc, #24]	@ (800116c <MX_DFSDM1_Init+0x68>)
 8001154:	2200      	movs	r2, #0
 8001156:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001158:	4804      	ldr	r0, [pc, #16]	@ (800116c <MX_DFSDM1_Init+0x68>)
 800115a:	f001 fc93 	bl	8002a84 <HAL_DFSDM_ChannelInit>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001164:	f000 fb8c 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000490 	.word	0x20000490
 8001170:	40016020 	.word	0x40016020

08001174 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001178:	4b1b      	ldr	r3, [pc, #108]	@ (80011e8 <MX_I2C2_Init+0x74>)
 800117a:	4a1c      	ldr	r2, [pc, #112]	@ (80011ec <MX_I2C2_Init+0x78>)
 800117c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800117e:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <MX_I2C2_Init+0x74>)
 8001180:	f640 6214 	movw	r2, #3604	@ 0xe14
 8001184:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001186:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <MX_I2C2_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800118c:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <MX_I2C2_Init+0x74>)
 800118e:	2201      	movs	r2, #1
 8001190:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001192:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <MX_I2C2_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001198:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <MX_I2C2_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800119e:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <MX_I2C2_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a4:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <MX_I2C2_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011aa:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <MX_I2C2_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011b0:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <MX_I2C2_Init+0x74>)
 80011b2:	f002 f84c 	bl	800324e <HAL_I2C_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011bc:	f000 fb60 	bl	8001880 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011c0:	2100      	movs	r1, #0
 80011c2:	4809      	ldr	r0, [pc, #36]	@ (80011e8 <MX_I2C2_Init+0x74>)
 80011c4:	f002 fdfe 	bl	8003dc4 <HAL_I2CEx_ConfigAnalogFilter>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80011ce:	f000 fb57 	bl	8001880 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011d2:	2100      	movs	r1, #0
 80011d4:	4804      	ldr	r0, [pc, #16]	@ (80011e8 <MX_I2C2_Init+0x74>)
 80011d6:	f002 fe40 	bl	8003e5a <HAL_I2CEx_ConfigDigitalFilter>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80011e0:	f000 fb4e 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200004c8 	.word	0x200004c8
 80011ec:	40005800 	.word	0x40005800

080011f0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <MX_QUADSPI_Init+0x44>)
 80011f6:	4a10      	ldr	r2, [pc, #64]	@ (8001238 <MX_QUADSPI_Init+0x48>)
 80011f8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <MX_QUADSPI_Init+0x44>)
 80011fc:	2202      	movs	r2, #2
 80011fe:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001200:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <MX_QUADSPI_Init+0x44>)
 8001202:	2204      	movs	r2, #4
 8001204:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <MX_QUADSPI_Init+0x44>)
 8001208:	2210      	movs	r2, #16
 800120a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800120c:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <MX_QUADSPI_Init+0x44>)
 800120e:	2217      	movs	r2, #23
 8001210:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001212:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <MX_QUADSPI_Init+0x44>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <MX_QUADSPI_Init+0x44>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	@ (8001234 <MX_QUADSPI_Init+0x44>)
 8001220:	f003 f81e 	bl	8004260 <HAL_QSPI_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800122a:	f000 fb29 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000051c 	.word	0x2000051c
 8001238:	a0001000 	.word	0xa0001000

0800123c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001240:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <MX_SPI3_Init+0x74>)
 8001242:	4a1c      	ldr	r2, [pc, #112]	@ (80012b4 <MX_SPI3_Init+0x78>)
 8001244:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001246:	4b1a      	ldr	r3, [pc, #104]	@ (80012b0 <MX_SPI3_Init+0x74>)
 8001248:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800124c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800124e:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <MX_SPI3_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001254:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <MX_SPI3_Init+0x74>)
 8001256:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800125a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800125c:	4b14      	ldr	r3, [pc, #80]	@ (80012b0 <MX_SPI3_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001262:	4b13      	ldr	r3, [pc, #76]	@ (80012b0 <MX_SPI3_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001268:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <MX_SPI3_Init+0x74>)
 800126a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800126e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001270:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <MX_SPI3_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001276:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <MX_SPI3_Init+0x74>)
 8001278:	2200      	movs	r2, #0
 800127a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800127c:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <MX_SPI3_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <MX_SPI3_Init+0x74>)
 8001284:	2200      	movs	r2, #0
 8001286:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001288:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <MX_SPI3_Init+0x74>)
 800128a:	2207      	movs	r2, #7
 800128c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <MX_SPI3_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <MX_SPI3_Init+0x74>)
 8001296:	2208      	movs	r2, #8
 8001298:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_SPI3_Init+0x74>)
 800129c:	f004 fb68 	bl	8005970 <HAL_SPI_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012a6:	f000 faeb 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000560 	.word	0x20000560
 80012b4:	40003c00 	.word	0x40003c00

080012b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <MX_USART1_UART_Init+0x58>)
 80012be:	4a15      	ldr	r2, [pc, #84]	@ (8001314 <MX_USART1_UART_Init+0x5c>)
 80012c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <MX_USART1_UART_Init+0x58>)
 80012c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <MX_USART1_UART_Init+0x58>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <MX_USART1_UART_Init+0x58>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <MX_USART1_UART_Init+0x58>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <MX_USART1_UART_Init+0x58>)
 80012de:	220c      	movs	r2, #12
 80012e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <MX_USART1_UART_Init+0x58>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e8:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <MX_USART1_UART_Init+0x58>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ee:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <MX_USART1_UART_Init+0x58>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <MX_USART1_UART_Init+0x58>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	@ (8001310 <MX_USART1_UART_Init+0x58>)
 80012fc:	f004 fbdb 	bl	8005ab6 <HAL_UART_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001306:	f000 fabb 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200005c4 	.word	0x200005c4
 8001314:	40013800 	.word	0x40013800

08001318 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800131c:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <MX_USART3_UART_Init+0x58>)
 800131e:	4a15      	ldr	r2, [pc, #84]	@ (8001374 <MX_USART3_UART_Init+0x5c>)
 8001320:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001322:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <MX_USART3_UART_Init+0x58>)
 8001324:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001328:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <MX_USART3_UART_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <MX_USART3_UART_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <MX_USART3_UART_Init+0x58>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <MX_USART3_UART_Init+0x58>)
 800133e:	220c      	movs	r2, #12
 8001340:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <MX_USART3_UART_Init+0x58>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001348:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <MX_USART3_UART_Init+0x58>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800134e:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <MX_USART3_UART_Init+0x58>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <MX_USART3_UART_Init+0x58>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	@ (8001370 <MX_USART3_UART_Init+0x58>)
 800135c:	f004 fbab 	bl	8005ab6 <HAL_UART_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001366:	f000 fa8b 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000064c 	.word	0x2000064c
 8001374:	40004800 	.word	0x40004800

08001378 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800137c:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800137e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001382:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001384:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001386:	2206      	movs	r2, #6
 8001388:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800138a:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800138c:	2202      	movs	r2, #2
 800138e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001390:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001392:	2202      	movs	r2, #2
 8001394:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001396:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001398:	2200      	movs	r2, #0
 800139a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800139e:	2200      	movs	r2, #0
 80013a0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013ae:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013bc:	f002 fd99 	bl	8003ef2 <HAL_PCD_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80013c6:	f000 fa5b 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200006d4 	.word	0x200006d4

080013d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	@ 0x28
 80013d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ea:	4bbd      	ldr	r3, [pc, #756]	@ (80016e0 <MX_GPIO_Init+0x30c>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ee:	4abc      	ldr	r2, [pc, #752]	@ (80016e0 <MX_GPIO_Init+0x30c>)
 80013f0:	f043 0310 	orr.w	r3, r3, #16
 80013f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f6:	4bba      	ldr	r3, [pc, #744]	@ (80016e0 <MX_GPIO_Init+0x30c>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001402:	4bb7      	ldr	r3, [pc, #732]	@ (80016e0 <MX_GPIO_Init+0x30c>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	4ab6      	ldr	r2, [pc, #728]	@ (80016e0 <MX_GPIO_Init+0x30c>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140e:	4bb4      	ldr	r3, [pc, #720]	@ (80016e0 <MX_GPIO_Init+0x30c>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	4bb1      	ldr	r3, [pc, #708]	@ (80016e0 <MX_GPIO_Init+0x30c>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141e:	4ab0      	ldr	r2, [pc, #704]	@ (80016e0 <MX_GPIO_Init+0x30c>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001426:	4bae      	ldr	r3, [pc, #696]	@ (80016e0 <MX_GPIO_Init+0x30c>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	4bab      	ldr	r3, [pc, #684]	@ (80016e0 <MX_GPIO_Init+0x30c>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001436:	4aaa      	ldr	r2, [pc, #680]	@ (80016e0 <MX_GPIO_Init+0x30c>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143e:	4ba8      	ldr	r3, [pc, #672]	@ (80016e0 <MX_GPIO_Init+0x30c>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800144a:	4ba5      	ldr	r3, [pc, #660]	@ (80016e0 <MX_GPIO_Init+0x30c>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	4aa4      	ldr	r2, [pc, #656]	@ (80016e0 <MX_GPIO_Init+0x30c>)
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001456:	4ba2      	ldr	r3, [pc, #648]	@ (80016e0 <MX_GPIO_Init+0x30c>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001468:	489e      	ldr	r0, [pc, #632]	@ (80016e4 <MX_GPIO_Init+0x310>)
 800146a:	f001 feb5 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	f248 1104 	movw	r1, #33028	@ 0x8104
 8001474:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001478:	f001 feae 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800147c:	2200      	movs	r2, #0
 800147e:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8001482:	4899      	ldr	r0, [pc, #612]	@ (80016e8 <MX_GPIO_Init+0x314>)
 8001484:	f001 fea8 	bl	80031d8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	f241 0181 	movw	r1, #4225	@ 0x1081
 800148e:	4897      	ldr	r0, [pc, #604]	@ (80016ec <MX_GPIO_Init+0x318>)
 8001490:	f001 fea2 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001494:	2201      	movs	r2, #1
 8001496:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800149a:	4894      	ldr	r0, [pc, #592]	@ (80016ec <MX_GPIO_Init+0x318>)
 800149c:	f001 fe9c 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80014a6:	4892      	ldr	r0, [pc, #584]	@ (80016f0 <MX_GPIO_Init+0x31c>)
 80014a8:	f001 fe96 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80014ac:	2201      	movs	r2, #1
 80014ae:	2120      	movs	r1, #32
 80014b0:	488d      	ldr	r0, [pc, #564]	@ (80016e8 <MX_GPIO_Init+0x314>)
 80014b2:	f001 fe91 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80014b6:	2201      	movs	r2, #1
 80014b8:	2101      	movs	r1, #1
 80014ba:	488a      	ldr	r0, [pc, #552]	@ (80016e4 <MX_GPIO_Init+0x310>)
 80014bc:	f001 fe8c 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80014c0:	f240 1315 	movw	r3, #277	@ 0x115
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	4882      	ldr	r0, [pc, #520]	@ (80016e4 <MX_GPIO_Init+0x310>)
 80014da:	f001 fbdf 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80014de:	236a      	movs	r3, #106	@ 0x6a
 80014e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	487c      	ldr	r0, [pc, #496]	@ (80016e4 <MX_GPIO_Init+0x310>)
 80014f4:	f001 fbd2 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80014f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014fe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4878      	ldr	r0, [pc, #480]	@ (80016f0 <MX_GPIO_Init+0x31c>)
 8001510:	f001 fbc4 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001514:	233f      	movs	r3, #63	@ 0x3f
 8001516:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001518:	230b      	movs	r3, #11
 800151a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	4872      	ldr	r0, [pc, #456]	@ (80016f0 <MX_GPIO_Init+0x31c>)
 8001528:	f001 fbb8 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800152c:	2303      	movs	r3, #3
 800152e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800153c:	2308      	movs	r3, #8
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800154a:	f001 fba7 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800154e:	f248 1304 	movw	r3, #33028	@ 0x8104
 8001552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001554:	2301      	movs	r3, #1
 8001556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800156a:	f001 fb97 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800156e:	2308      	movs	r3, #8
 8001570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800157e:	2301      	movs	r3, #1
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800158c:	f001 fb86 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001590:	2310      	movs	r3, #16
 8001592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001594:	230b      	movs	r3, #11
 8001596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a6:	f001 fb79 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80015aa:	23e0      	movs	r3, #224	@ 0xe0
 80015ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b6:	2303      	movs	r3, #3
 80015b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015ba:	2305      	movs	r3, #5
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c8:	f001 fb68 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80015cc:	2301      	movs	r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015d0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4841      	ldr	r0, [pc, #260]	@ (80016e8 <MX_GPIO_Init+0x314>)
 80015e2:	f001 fb5b 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80015e6:	2302      	movs	r3, #2
 80015e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015ea:	230b      	movs	r3, #11
 80015ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	483b      	ldr	r0, [pc, #236]	@ (80016e8 <MX_GPIO_Init+0x314>)
 80015fa:	f001 fb4f 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80015fe:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8001602:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001604:	2301      	movs	r3, #1
 8001606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	4834      	ldr	r0, [pc, #208]	@ (80016e8 <MX_GPIO_Init+0x314>)
 8001618:	f001 fb40 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800161c:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8001620:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001622:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	482e      	ldr	r0, [pc, #184]	@ (80016ec <MX_GPIO_Init+0x318>)
 8001634:	f001 fb32 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001638:	f243 0381 	movw	r3, #12417	@ 0x3081
 800163c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163e:	2301      	movs	r3, #1
 8001640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	4826      	ldr	r0, [pc, #152]	@ (80016ec <MX_GPIO_Init+0x318>)
 8001652:	f001 fb23 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001656:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165c:	2301      	movs	r3, #1
 800165e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	4820      	ldr	r0, [pc, #128]	@ (80016f0 <MX_GPIO_Init+0x31c>)
 8001670:	f001 fb14 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001674:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800167a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800167e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	4819      	ldr	r0, [pc, #100]	@ (80016f0 <MX_GPIO_Init+0x31c>)
 800168c:	f001 fb06 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001690:	2302      	movs	r3, #2
 8001692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016a0:	2305      	movs	r3, #5
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	4810      	ldr	r0, [pc, #64]	@ (80016ec <MX_GPIO_Init+0x318>)
 80016ac:	f001 faf6 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80016b0:	2378      	movs	r3, #120	@ 0x78
 80016b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016bc:	2303      	movs	r3, #3
 80016be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016c0:	2307      	movs	r3, #7
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4619      	mov	r1, r3
 80016ca:	4808      	ldr	r0, [pc, #32]	@ (80016ec <MX_GPIO_Init+0x318>)
 80016cc:	f001 fae6 	bl	8002c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80016d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d6:	2312      	movs	r3, #18
 80016d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	e00a      	b.n	80016f4 <MX_GPIO_Init+0x320>
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000
 80016e4:	48001000 	.word	0x48001000
 80016e8:	48000400 	.word	0x48000400
 80016ec:	48000c00 	.word	0x48000c00
 80016f0:	48000800 	.word	0x48000800
 80016f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f6:	2303      	movs	r3, #3
 80016f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016fa:	2304      	movs	r3, #4
 80016fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	480b      	ldr	r0, [pc, #44]	@ (8001734 <MX_GPIO_Init+0x360>)
 8001706:	f001 fac9 	bl	8002c9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2105      	movs	r1, #5
 800170e:	2017      	movs	r0, #23
 8001710:	f001 f981 	bl	8002a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001714:	2017      	movs	r0, #23
 8001716:	f001 f99a 	bl	8002a4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2105      	movs	r1, #5
 800171e:	2028      	movs	r0, #40	@ 0x28
 8001720:	f001 f979 	bl	8002a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001724:	2028      	movs	r0, #40	@ 0x28
 8001726:	f001 f992 	bl	8002a4e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	@ 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	48000400 	.word	0x48000400

08001738 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001740:	2001      	movs	r0, #1
 8001742:	f005 fa79 	bl	8006c38 <osDelay>
 8001746:	e7fb      	b.n	8001740 <StartDefaultTask+0x8>

08001748 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800174a:	b08d      	sub	sp, #52	@ 0x34
 800174c:	af02      	add	r7, sp, #8
 800174e:	6078      	str	r0, [r7, #4]
//
//  }
//#define PI 3.14159265f

   // FIR setup
   arm_fir_init_f32(&Sx, NUM_TAPS, firCoeffs, firStateX, BLOCK_SIZE);
 8001750:	2301      	movs	r3, #1
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	4b3a      	ldr	r3, [pc, #232]	@ (8001840 <StartTask02+0xf8>)
 8001756:	4a3b      	ldr	r2, [pc, #236]	@ (8001844 <StartTask02+0xfc>)
 8001758:	2105      	movs	r1, #5
 800175a:	483b      	ldr	r0, [pc, #236]	@ (8001848 <StartTask02+0x100>)
 800175c:	f006 fe4a 	bl	80083f4 <arm_fir_init_f32>

   float32_t noisy_input, filtered_output;
   float32_t angle = 0.0f;
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
   float32_t step = 2 * PI / 50;  // ~1Hz sine wave if loop runs at 10Hz
 8001766:	4b39      	ldr	r3, [pc, #228]	@ (800184c <StartTask02+0x104>)
 8001768:	61fb      	str	r3, [r7, #28]
   int counter = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]

   for (;;)
   {
       osDelay(100);  // 10 Hz
 800176e:	2064      	movs	r0, #100	@ 0x64
 8001770:	f005 fa62 	bl	8006c38 <osDelay>

       // Simulate sine wave + noise
       float32_t sine = 100.0f * arm_sin_f32(angle);
 8001774:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001778:	f000 fcb2 	bl	80020e0 <arm_sin_f32>
 800177c:	eef0 7a40 	vmov.f32	s15, s0
 8001780:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001850 <StartTask02+0x108>
 8001784:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001788:	edc7 7a06 	vstr	s15, [r7, #24]
       float32_t noise = ((rand() % 200) - 100) * 0.5f;  // ±50 noise
 800178c:	f007 f8c2 	bl	8008914 <rand>
 8001790:	4602      	mov	r2, r0
 8001792:	4b30      	ldr	r3, [pc, #192]	@ (8001854 <StartTask02+0x10c>)
 8001794:	fb83 1302 	smull	r1, r3, r3, r2
 8001798:	1199      	asrs	r1, r3, #6
 800179a:	17d3      	asrs	r3, r2, #31
 800179c:	1acb      	subs	r3, r1, r3
 800179e:	21c8      	movs	r1, #200	@ 0xc8
 80017a0:	fb01 f303 	mul.w	r3, r1, r3
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	3b64      	subs	r3, #100	@ 0x64
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80017b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b8:	edc7 7a05 	vstr	s15, [r7, #20]
       noisy_input = sine + noise;
 80017bc:	ed97 7a06 	vldr	s14, [r7, #24]
 80017c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80017c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c8:	edc7 7a04 	vstr	s15, [r7, #16]

       // FIR filter
       arm_fir_f32(&Sx, &noisy_input, &filtered_output, BLOCK_SIZE);
 80017cc:	f107 020c 	add.w	r2, r7, #12
 80017d0:	f107 0110 	add.w	r1, r7, #16
 80017d4:	2301      	movs	r3, #1
 80017d6:	481c      	ldr	r0, [pc, #112]	@ (8001848 <StartTask02+0x100>)
 80017d8:	f006 fe1c 	bl	8008414 <arm_fir_f32>

       // Print input vs filtered
       printf("(%6.1f,%6.1f)", counter++, noisy_input, filtered_output);
 80017dc:	6a3e      	ldr	r6, [r7, #32]
 80017de:	1c73      	adds	r3, r6, #1
 80017e0:	623b      	str	r3, [r7, #32]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe feaf 	bl	8000548 <__aeabi_f2d>
 80017ea:	4604      	mov	r4, r0
 80017ec:	460d      	mov	r5, r1
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fea9 	bl	8000548 <__aeabi_f2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	e9cd 2300 	strd	r2, r3, [sp]
 80017fe:	4622      	mov	r2, r4
 8001800:	462b      	mov	r3, r5
 8001802:	4631      	mov	r1, r6
 8001804:	4814      	ldr	r0, [pc, #80]	@ (8001858 <StartTask02+0x110>)
 8001806:	f007 fddb 	bl	80093c0 <iprintf>

       angle += step;
 800180a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800180e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001816:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
       if (angle > 2 * PI) angle -= 2 * PI;
 800181a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800181e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800185c <StartTask02+0x114>
 8001822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182a:	dd07      	ble.n	800183c <StartTask02+0xf4>
 800182c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001830:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800185c <StartTask02+0x114>
 8001834:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001838:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
   {
 800183c:	e797      	b.n	800176e <StartTask02+0x26>
 800183e:	bf00      	nop
 8001840:	2000133c 	.word	0x2000133c
 8001844:	20000000 	.word	0x20000000
 8001848:	20001330 	.word	0x20001330
 800184c:	3e00adfd 	.word	0x3e00adfd
 8001850:	42c80000 	.word	0x42c80000
 8001854:	51eb851f 	.word	0x51eb851f
 8001858:	0800b380 	.word	0x0800b380
 800185c:	40c90fdb 	.word	0x40c90fdb

08001860 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001868:	2001      	movs	r0, #1
 800186a:	f005 f9e5 	bl	8006c38 <osDelay>
 800186e:	e7fb      	b.n	8001868 <StartTask03+0x8>

08001870 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001878:	2001      	movs	r0, #1
 800187a:	f005 f9dd 	bl	8006c38 <osDelay>
 800187e:	e7fb      	b.n	8001878 <StartTask04+0x8>

08001880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001884:	b672      	cpsid	i
}
 8001886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <Error_Handler+0x8>

0800188c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <HAL_MspInit+0x4c>)
 8001894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001896:	4a10      	ldr	r2, [pc, #64]	@ (80018d8 <HAL_MspInit+0x4c>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6613      	str	r3, [r2, #96]	@ 0x60
 800189e:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <HAL_MspInit+0x4c>)
 80018a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <HAL_MspInit+0x4c>)
 80018ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ae:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <HAL_MspInit+0x4c>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80018b6:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <HAL_MspInit+0x4c>)
 80018b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	210f      	movs	r1, #15
 80018c6:	f06f 0001 	mvn.w	r0, #1
 80018ca:	f001 f8a4 	bl	8002a16 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40021000 	.word	0x40021000

080018dc <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b0ac      	sub	sp, #176	@ 0xb0
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2288      	movs	r2, #136	@ 0x88
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f007 fdb4 	bl	800946a <memset>
  if(DFSDM1_Init == 0)
 8001902:	4b25      	ldr	r3, [pc, #148]	@ (8001998 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d142      	bne.n	8001990 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800190a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800190e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001910:	2300      	movs	r3, #0
 8001912:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	4618      	mov	r0, r3
 800191c:	f003 fb5c 	bl	8004fd8 <HAL_RCCEx_PeriphCLKConfig>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001926:	f7ff ffab 	bl	8001880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800192a:	4b1c      	ldr	r3, [pc, #112]	@ (800199c <HAL_DFSDM_ChannelMspInit+0xc0>)
 800192c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800192e:	4a1b      	ldr	r2, [pc, #108]	@ (800199c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001930:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001934:	6613      	str	r3, [r2, #96]	@ 0x60
 8001936:	4b19      	ldr	r3, [pc, #100]	@ (800199c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800193a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001942:	4b16      	ldr	r3, [pc, #88]	@ (800199c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001946:	4a15      	ldr	r2, [pc, #84]	@ (800199c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001948:	f043 0310 	orr.w	r3, r3, #16
 800194c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800194e:	4b13      	ldr	r3, [pc, #76]	@ (800199c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800195a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800195e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001974:	2306      	movs	r3, #6
 8001976:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800197a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800197e:	4619      	mov	r1, r3
 8001980:	4807      	ldr	r0, [pc, #28]	@ (80019a0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001982:	f001 f98b 	bl	8002c9c <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001986:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	4a02      	ldr	r2, [pc, #8]	@ (8001998 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800198e:	6013      	str	r3, [r2, #0]
  }

}
 8001990:	bf00      	nop
 8001992:	37b0      	adds	r7, #176	@ 0xb0
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20001350 	.word	0x20001350
 800199c:	40021000 	.word	0x40021000
 80019a0:	48001000 	.word	0x48001000

080019a4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b0ac      	sub	sp, #176	@ 0xb0
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2288      	movs	r2, #136	@ 0x88
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f007 fd50 	bl	800946a <memset>
  if(hi2c->Instance==I2C2)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a21      	ldr	r2, [pc, #132]	@ (8001a54 <HAL_I2C_MspInit+0xb0>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d13b      	bne.n	8001a4c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019d4:	2380      	movs	r3, #128	@ 0x80
 80019d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019d8:	2300      	movs	r3, #0
 80019da:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 faf9 	bl	8004fd8 <HAL_RCCEx_PeriphCLKConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019ec:	f7ff ff48 	bl	8001880 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f0:	4b19      	ldr	r3, [pc, #100]	@ (8001a58 <HAL_I2C_MspInit+0xb4>)
 80019f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f4:	4a18      	ldr	r2, [pc, #96]	@ (8001a58 <HAL_I2C_MspInit+0xb4>)
 80019f6:	f043 0302 	orr.w	r3, r3, #2
 80019fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019fc:	4b16      	ldr	r3, [pc, #88]	@ (8001a58 <HAL_I2C_MspInit+0xb4>)
 80019fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001a08:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a10:	2312      	movs	r3, #18
 8001a12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a16:	2301      	movs	r3, #1
 8001a18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a22:	2304      	movs	r3, #4
 8001a24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a28:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	480b      	ldr	r0, [pc, #44]	@ (8001a5c <HAL_I2C_MspInit+0xb8>)
 8001a30:	f001 f934 	bl	8002c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a34:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <HAL_I2C_MspInit+0xb4>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a38:	4a07      	ldr	r2, [pc, #28]	@ (8001a58 <HAL_I2C_MspInit+0xb4>)
 8001a3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a40:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <HAL_I2C_MspInit+0xb4>)
 8001a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001a4c:	bf00      	nop
 8001a4e:	37b0      	adds	r7, #176	@ 0xb0
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40005800 	.word	0x40005800
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	48000400 	.word	0x48000400

08001a60 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a9c <HAL_I2C_MspDeInit+0x3c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d10f      	bne.n	8001a92 <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C2_MspDeInit 0 */

    /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001a72:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <HAL_I2C_MspDeInit+0x40>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <HAL_I2C_MspDeInit+0x40>)
 8001a78:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001a7c:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001a7e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a82:	4808      	ldr	r0, [pc, #32]	@ (8001aa4 <HAL_I2C_MspDeInit+0x44>)
 8001a84:	f001 fab4 	bl	8002ff0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001a88:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a8c:	4805      	ldr	r0, [pc, #20]	@ (8001aa4 <HAL_I2C_MspDeInit+0x44>)
 8001a8e:	f001 faaf 	bl	8002ff0 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C2_MspDeInit 1 */

    /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40005800 	.word	0x40005800
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	48000400 	.word	0x48000400

08001aa8 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	@ 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a17      	ldr	r2, [pc, #92]	@ (8001b24 <HAL_QSPI_MspInit+0x7c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d128      	bne.n	8001b1c <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001aca:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <HAL_QSPI_MspInit+0x80>)
 8001acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ace:	4a16      	ldr	r2, [pc, #88]	@ (8001b28 <HAL_QSPI_MspInit+0x80>)
 8001ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad4:	6513      	str	r3, [r2, #80]	@ 0x50
 8001ad6:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <HAL_QSPI_MspInit+0x80>)
 8001ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ae2:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <HAL_QSPI_MspInit+0x80>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae6:	4a10      	ldr	r2, [pc, #64]	@ (8001b28 <HAL_QSPI_MspInit+0x80>)
 8001ae8:	f043 0310 	orr.w	r3, r3, #16
 8001aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aee:	4b0e      	ldr	r3, [pc, #56]	@ (8001b28 <HAL_QSPI_MspInit+0x80>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001afa:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001afe:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b0c:	230a      	movs	r3, #10
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4619      	mov	r1, r3
 8001b16:	4805      	ldr	r0, [pc, #20]	@ (8001b2c <HAL_QSPI_MspInit+0x84>)
 8001b18:	f001 f8c0 	bl	8002c9c <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001b1c:	bf00      	nop
 8001b1e:	3728      	adds	r7, #40	@ 0x28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	a0001000 	.word	0xa0001000
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	48001000 	.word	0x48001000

08001b30 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	@ 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a17      	ldr	r2, [pc, #92]	@ (8001bac <HAL_SPI_MspInit+0x7c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d128      	bne.n	8001ba4 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b52:	4b17      	ldr	r3, [pc, #92]	@ (8001bb0 <HAL_SPI_MspInit+0x80>)
 8001b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b56:	4a16      	ldr	r2, [pc, #88]	@ (8001bb0 <HAL_SPI_MspInit+0x80>)
 8001b58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b5e:	4b14      	ldr	r3, [pc, #80]	@ (8001bb0 <HAL_SPI_MspInit+0x80>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6a:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <HAL_SPI_MspInit+0x80>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6e:	4a10      	ldr	r2, [pc, #64]	@ (8001bb0 <HAL_SPI_MspInit+0x80>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b76:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <HAL_SPI_MspInit+0x80>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001b82:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b94:	2306      	movs	r3, #6
 8001b96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4805      	ldr	r0, [pc, #20]	@ (8001bb4 <HAL_SPI_MspInit+0x84>)
 8001ba0:	f001 f87c 	bl	8002c9c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001ba4:	bf00      	nop
 8001ba6:	3728      	adds	r7, #40	@ 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40003c00 	.word	0x40003c00
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	48000800 	.word	0x48000800

08001bb8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b0ae      	sub	sp, #184	@ 0xb8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	2288      	movs	r2, #136	@ 0x88
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f007 fc46 	bl	800946a <memset>
  if(huart->Instance==USART1)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a42      	ldr	r2, [pc, #264]	@ (8001cec <HAL_UART_MspInit+0x134>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d13b      	bne.n	8001c60 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001be8:	2301      	movs	r3, #1
 8001bea:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bec:	2300      	movs	r3, #0
 8001bee:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf0:	f107 031c 	add.w	r3, r7, #28
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 f9ef 	bl	8004fd8 <HAL_RCCEx_PeriphCLKConfig>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c00:	f7ff fe3e 	bl	8001880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c04:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf0 <HAL_UART_MspInit+0x138>)
 8001c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c08:	4a39      	ldr	r2, [pc, #228]	@ (8001cf0 <HAL_UART_MspInit+0x138>)
 8001c0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c10:	4b37      	ldr	r3, [pc, #220]	@ (8001cf0 <HAL_UART_MspInit+0x138>)
 8001c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c18:	61bb      	str	r3, [r7, #24]
 8001c1a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1c:	4b34      	ldr	r3, [pc, #208]	@ (8001cf0 <HAL_UART_MspInit+0x138>)
 8001c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c20:	4a33      	ldr	r2, [pc, #204]	@ (8001cf0 <HAL_UART_MspInit+0x138>)
 8001c22:	f043 0302 	orr.w	r3, r3, #2
 8001c26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c28:	4b31      	ldr	r3, [pc, #196]	@ (8001cf0 <HAL_UART_MspInit+0x138>)
 8001c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001c34:	23c0      	movs	r3, #192	@ 0xc0
 8001c36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c52:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c56:	4619      	mov	r1, r3
 8001c58:	4826      	ldr	r0, [pc, #152]	@ (8001cf4 <HAL_UART_MspInit+0x13c>)
 8001c5a:	f001 f81f 	bl	8002c9c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c5e:	e040      	b.n	8001ce2 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a24      	ldr	r2, [pc, #144]	@ (8001cf8 <HAL_UART_MspInit+0x140>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d13b      	bne.n	8001ce2 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 f9ae 	bl	8004fd8 <HAL_RCCEx_PeriphCLKConfig>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001c82:	f7ff fdfd 	bl	8001880 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c86:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf0 <HAL_UART_MspInit+0x138>)
 8001c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8a:	4a19      	ldr	r2, [pc, #100]	@ (8001cf0 <HAL_UART_MspInit+0x138>)
 8001c8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c90:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c92:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <HAL_UART_MspInit+0x138>)
 8001c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c9e:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <HAL_UART_MspInit+0x138>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca2:	4a13      	ldr	r2, [pc, #76]	@ (8001cf0 <HAL_UART_MspInit+0x138>)
 8001ca4:	f043 0308 	orr.w	r3, r3, #8
 8001ca8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <HAL_UART_MspInit+0x138>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001cb6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cd0:	2307      	movs	r3, #7
 8001cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4807      	ldr	r0, [pc, #28]	@ (8001cfc <HAL_UART_MspInit+0x144>)
 8001cde:	f000 ffdd 	bl	8002c9c <HAL_GPIO_Init>
}
 8001ce2:	bf00      	nop
 8001ce4:	37b8      	adds	r7, #184	@ 0xb8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40013800 	.word	0x40013800
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	48000400 	.word	0x48000400
 8001cf8:	40004800 	.word	0x40004800
 8001cfc:	48000c00 	.word	0x48000c00

08001d00 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b0ac      	sub	sp, #176	@ 0xb0
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	2288      	movs	r2, #136	@ 0x88
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f007 fba2 	bl	800946a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d2e:	d17c      	bne.n	8001e2a <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001d30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d34:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001d36:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001d3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001d42:	2301      	movs	r3, #1
 8001d44:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001d46:	2318      	movs	r3, #24
 8001d48:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001d4a:	2307      	movs	r3, #7
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001d52:	2302      	movs	r3, #2
 8001d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001d56:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d5a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 f939 	bl	8004fd8 <HAL_RCCEx_PeriphCLKConfig>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001d6c:	f7ff fd88 	bl	8001880 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d70:	4b30      	ldr	r3, [pc, #192]	@ (8001e34 <HAL_PCD_MspInit+0x134>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d74:	4a2f      	ldr	r2, [pc, #188]	@ (8001e34 <HAL_PCD_MspInit+0x134>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e34 <HAL_PCD_MspInit+0x134>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001d88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d9c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001da0:	4619      	mov	r1, r3
 8001da2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da6:	f000 ff79 	bl	8002c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001daa:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001dae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001dc4:	230a      	movs	r3, #10
 8001dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dd4:	f000 ff62 	bl	8002c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001dd8:	4b16      	ldr	r3, [pc, #88]	@ (8001e34 <HAL_PCD_MspInit+0x134>)
 8001dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ddc:	4a15      	ldr	r2, [pc, #84]	@ (8001e34 <HAL_PCD_MspInit+0x134>)
 8001dde:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001de2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de4:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <HAL_PCD_MspInit+0x134>)
 8001de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df0:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <HAL_PCD_MspInit+0x134>)
 8001df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d114      	bne.n	8001e26 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e34 <HAL_PCD_MspInit+0x134>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e00:	4a0c      	ldr	r2, [pc, #48]	@ (8001e34 <HAL_PCD_MspInit+0x134>)
 8001e02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e08:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <HAL_PCD_MspInit+0x134>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001e14:	f002 fa14 	bl	8004240 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_PCD_MspInit+0x134>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1c:	4a05      	ldr	r2, [pc, #20]	@ (8001e34 <HAL_PCD_MspInit+0x134>)
 8001e1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e22:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001e24:	e001      	b.n	8001e2a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001e26:	f002 fa0b 	bl	8004240 <HAL_PWREx_EnableVddUSB>
}
 8001e2a:	bf00      	nop
 8001e2c:	37b0      	adds	r7, #176	@ 0xb0
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000

08001e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <NMI_Handler+0x4>

08001e40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <HardFault_Handler+0x4>

08001e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <MemManage_Handler+0x4>

08001e50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <BusFault_Handler+0x4>

08001e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <UsageFault_Handler+0x4>

08001e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e72:	f000 fcb1 	bl	80027d8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001e76:	f005 fe3b 	bl	8007af0 <xTaskGetSchedulerState>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d001      	beq.n	8001e84 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001e80:	f006 f87a 	bl	8007f78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001e8c:	2020      	movs	r0, #32
 8001e8e:	f001 f9bb 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001e92:	2040      	movs	r0, #64	@ 0x40
 8001e94:	f001 f9b8 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001e98:	2080      	movs	r0, #128	@ 0x80
 8001e9a:	f001 f9b5 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001e9e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001ea2:	f001 f9b1 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001eae:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001eb2:	f001 f9a9 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001eb6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001eba:	f001 f9a5 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001ebe:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ec2:	f001 f9a1 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001ec6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001eca:	f001 f99d 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001ece:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001ed2:	f001 f999 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  return 1;
 8001ede:	2301      	movs	r3, #1
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <_kill>:

int _kill(int pid, int sig)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ef4:	f007 fb0c 	bl	8009510 <__errno>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2216      	movs	r2, #22
 8001efc:	601a      	str	r2, [r3, #0]
  return -1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <_exit>:

void _exit (int status)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f12:	f04f 31ff 	mov.w	r1, #4294967295
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ffe7 	bl	8001eea <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f1c:	bf00      	nop
 8001f1e:	e7fd      	b.n	8001f1c <_exit+0x12>

08001f20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	e00a      	b.n	8001f48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f32:	f3af 8000 	nop.w
 8001f36:	4601      	mov	r1, r0
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	60ba      	str	r2, [r7, #8]
 8001f3e:	b2ca      	uxtb	r2, r1
 8001f40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	3301      	adds	r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	dbf0      	blt.n	8001f32 <_read+0x12>
  }

  return len;
 8001f50:	687b      	ldr	r3, [r7, #4]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b086      	sub	sp, #24
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	e009      	b.n	8001f80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	60ba      	str	r2, [r7, #8]
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe ffc7 	bl	8000f08 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	dbf1      	blt.n	8001f6c <_write+0x12>
  }
  return len;
 8001f88:	687b      	ldr	r3, [r7, #4]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <_close>:

int _close(int file)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fba:	605a      	str	r2, [r3, #4]
  return 0;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <_isatty>:

int _isatty(int file)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fd2:	2301      	movs	r3, #1
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002004:	4a14      	ldr	r2, [pc, #80]	@ (8002058 <_sbrk+0x5c>)
 8002006:	4b15      	ldr	r3, [pc, #84]	@ (800205c <_sbrk+0x60>)
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002010:	4b13      	ldr	r3, [pc, #76]	@ (8002060 <_sbrk+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002018:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <_sbrk+0x64>)
 800201a:	4a12      	ldr	r2, [pc, #72]	@ (8002064 <_sbrk+0x68>)
 800201c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	429a      	cmp	r2, r3
 800202a:	d207      	bcs.n	800203c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800202c:	f007 fa70 	bl	8009510 <__errno>
 8002030:	4603      	mov	r3, r0
 8002032:	220c      	movs	r2, #12
 8002034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	e009      	b.n	8002050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800203c:	4b08      	ldr	r3, [pc, #32]	@ (8002060 <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002042:	4b07      	ldr	r3, [pc, #28]	@ (8002060 <_sbrk+0x64>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	4a05      	ldr	r2, [pc, #20]	@ (8002060 <_sbrk+0x64>)
 800204c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204e:	68fb      	ldr	r3, [r7, #12]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20018000 	.word	0x20018000
 800205c:	00000400 	.word	0x00000400
 8002060:	20001354 	.word	0x20001354
 8002064:	20002230 	.word	0x20002230

08002068 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <SystemInit+0x20>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002072:	4a05      	ldr	r2, [pc, #20]	@ (8002088 <SystemInit+0x20>)
 8002074:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002078:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800208c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002090:	f7ff ffea 	bl	8002068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002094:	480c      	ldr	r0, [pc, #48]	@ (80020c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002096:	490d      	ldr	r1, [pc, #52]	@ (80020cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002098:	4a0d      	ldr	r2, [pc, #52]	@ (80020d0 <LoopForever+0xe>)
  movs r3, #0
 800209a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800209c:	e002      	b.n	80020a4 <LoopCopyDataInit>

0800209e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800209e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a2:	3304      	adds	r3, #4

080020a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a8:	d3f9      	bcc.n	800209e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020aa:	4a0a      	ldr	r2, [pc, #40]	@ (80020d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020ac:	4c0a      	ldr	r4, [pc, #40]	@ (80020d8 <LoopForever+0x16>)
  movs r3, #0
 80020ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b0:	e001      	b.n	80020b6 <LoopFillZerobss>

080020b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b4:	3204      	adds	r2, #4

080020b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b8:	d3fb      	bcc.n	80020b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ba:	f007 fa2f 	bl	800951c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020be:	f7fe ff35 	bl	8000f2c <main>

080020c2 <LoopForever>:

LoopForever:
    b LoopForever
 80020c2:	e7fe      	b.n	80020c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020cc:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80020d0:	0800bfc4 	.word	0x0800bfc4
  ldr r2, =_sbss
 80020d4:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80020d8:	20002230 	.word	0x20002230

080020dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020dc:	e7fe      	b.n	80020dc <ADC1_2_IRQHandler>
	...

080020e0 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b08b      	sub	sp, #44	@ 0x2c
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 80020ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ee:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80021d8 <arm_sin_f32+0xf8>
 80020f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f6:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80020fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80020fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002102:	ee17 3a90 	vmov	r3, s15
 8002106:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8002108:	edd7 7a06 	vldr	s15, [r7, #24]
 800210c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002114:	d502      	bpl.n	800211c <arm_sin_f32+0x3c>
  {
    n--;
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	3b01      	subs	r3, #1
 800211a:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	ee07 3a90 	vmov	s15, r3
 8002122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002126:	ed97 7a06 	vldr	s14, [r7, #24]
 800212a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800212e:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8002132:	edd7 7a06 	vldr	s15, [r7, #24]
 8002136:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80021dc <arm_sin_f32+0xfc>
 800213a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800213e:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 8002142:	edd7 7a07 	vldr	s15, [r7, #28]
 8002146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800214a:	ee17 3a90 	vmov	r3, s15
 800214e:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8002150:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002152:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002156:	d309      	bcc.n	800216c <arm_sin_f32+0x8c>
    index = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 800215c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002160:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80021dc <arm_sin_f32+0xfc>
 8002164:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002168:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800216c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800216e:	ee07 3a90 	vmov	s15, r3
 8002172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002176:	ed97 7a07 	vldr	s14, [r7, #28]
 800217a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217e:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8002182:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002184:	4a16      	ldr	r2, [pc, #88]	@ (80021e0 <arm_sin_f32+0x100>)
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800218e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002190:	3301      	adds	r3, #1
 8002192:	4a13      	ldr	r2, [pc, #76]	@ (80021e0 <arm_sin_f32+0x100>)
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 800219c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80021a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80021a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80021ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021b0:	edd7 6a05 	vldr	s13, [r7, #20]
 80021b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80021b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c0:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	ee07 3a90 	vmov	s15, r3
}
 80021ca:	eeb0 0a67 	vmov.f32	s0, s15
 80021ce:	372c      	adds	r7, #44	@ 0x2c
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	3e22f983 	.word	0x3e22f983
 80021dc:	44000000 	.word	0x44000000
 80021e0:	0800b3e0 	.word	0x0800b3e0

080021e4 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80021ee:	2300      	movs	r3, #0
 80021f0:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80021f2:	2110      	movs	r1, #16
 80021f4:	20d4      	movs	r0, #212	@ 0xd4
 80021f6:	f000 fa1f 	bl	8002638 <SENSOR_IO_Read>
 80021fa:	4603      	mov	r3, r0
 80021fc:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002202:	7bbb      	ldrb	r3, [r7, #14]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800220a:	7bba      	ldrb	r2, [r7, #14]
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	4313      	orrs	r3, r2
 8002210:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002212:	7bbb      	ldrb	r3, [r7, #14]
 8002214:	461a      	mov	r2, r3
 8002216:	2110      	movs	r1, #16
 8002218:	20d4      	movs	r0, #212	@ 0xd4
 800221a:	f000 f9f3 	bl	8002604 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800221e:	2112      	movs	r1, #18
 8002220:	20d4      	movs	r0, #212	@ 0xd4
 8002222:	f000 fa09 	bl	8002638 <SENSOR_IO_Read>
 8002226:	4603      	mov	r3, r0
 8002228:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	b29b      	uxth	r3, r3
 8002230:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002232:	7bbb      	ldrb	r3, [r7, #14]
 8002234:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8002238:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800223a:	7bba      	ldrb	r2, [r7, #14]
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	4313      	orrs	r3, r2
 8002240:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002242:	7bbb      	ldrb	r3, [r7, #14]
 8002244:	461a      	mov	r2, r3
 8002246:	2112      	movs	r1, #18
 8002248:	20d4      	movs	r0, #212	@ 0xd4
 800224a:	f000 f9db 	bl	8002604 <SENSOR_IO_Write>
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800225c:	2300      	movs	r3, #0
 800225e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002260:	2110      	movs	r1, #16
 8002262:	20d4      	movs	r0, #212	@ 0xd4
 8002264:	f000 f9e8 	bl	8002638 <SENSOR_IO_Read>
 8002268:	4603      	mov	r3, r0
 800226a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	461a      	mov	r2, r3
 8002278:	2110      	movs	r1, #16
 800227a:	20d4      	movs	r0, #212	@ 0xd4
 800227c:	f000 f9c2 	bl	8002604 <SENSOR_IO_Write>
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800228c:	f000 f9b0 	bl	80025f0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002290:	210f      	movs	r1, #15
 8002292:	20d4      	movs	r0, #212	@ 0xd4
 8002294:	f000 f9d0 	bl	8002638 <SENSOR_IO_Read>
 8002298:	4603      	mov	r3, r0
}
 800229a:	4618      	mov	r0, r3
 800229c:	bd80      	pop	{r7, pc}

0800229e <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	4603      	mov	r3, r0
 80022a6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80022a8:	2300      	movs	r3, #0
 80022aa:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80022ac:	2115      	movs	r1, #21
 80022ae:	20d4      	movs	r0, #212	@ 0xd4
 80022b0:	f000 f9c2 	bl	8002638 <SENSOR_IO_Read>
 80022b4:	4603      	mov	r3, r0
 80022b6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	f023 0310 	bic.w	r3, r3, #16
 80022be:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	f043 0310 	orr.w	r3, r3, #16
 80022cc:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	461a      	mov	r2, r3
 80022d2:	2115      	movs	r1, #21
 80022d4:	20d4      	movs	r0, #212	@ 0xd4
 80022d6:	f000 f995 	bl	8002604 <SENSOR_IO_Write>
}
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80022fa:	2110      	movs	r1, #16
 80022fc:	20d4      	movs	r0, #212	@ 0xd4
 80022fe:	f000 f99b 	bl	8002638 <SENSOR_IO_Read>
 8002302:	4603      	mov	r3, r0
 8002304:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002306:	f107 0208 	add.w	r2, r7, #8
 800230a:	2306      	movs	r3, #6
 800230c:	2128      	movs	r1, #40	@ 0x28
 800230e:	20d4      	movs	r0, #212	@ 0xd4
 8002310:	f000 f9b0 	bl	8002674 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002314:	2300      	movs	r3, #0
 8002316:	77fb      	strb	r3, [r7, #31]
 8002318:	e01a      	b.n	8002350 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800231a:	7ffb      	ldrb	r3, [r7, #31]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	3301      	adds	r3, #1
 8002320:	3320      	adds	r3, #32
 8002322:	443b      	add	r3, r7
 8002324:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	b29b      	uxth	r3, r3
 800232c:	7ffa      	ldrb	r2, [r7, #31]
 800232e:	0052      	lsls	r2, r2, #1
 8002330:	3220      	adds	r2, #32
 8002332:	443a      	add	r2, r7
 8002334:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002338:	4413      	add	r3, r2
 800233a:	b29a      	uxth	r2, r3
 800233c:	7ffb      	ldrb	r3, [r7, #31]
 800233e:	b212      	sxth	r2, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	3320      	adds	r3, #32
 8002344:	443b      	add	r3, r7
 8002346:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800234a:	7ffb      	ldrb	r3, [r7, #31]
 800234c:	3301      	adds	r3, #1
 800234e:	77fb      	strb	r3, [r7, #31]
 8002350:	7ffb      	ldrb	r3, [r7, #31]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d9e1      	bls.n	800231a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002356:	7dfb      	ldrb	r3, [r7, #23]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b0c      	cmp	r3, #12
 800235e:	d829      	bhi.n	80023b4 <LSM6DSL_AccReadXYZ+0xd0>
 8002360:	a201      	add	r2, pc, #4	@ (adr r2, 8002368 <LSM6DSL_AccReadXYZ+0x84>)
 8002362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002366:	bf00      	nop
 8002368:	0800239d 	.word	0x0800239d
 800236c:	080023b5 	.word	0x080023b5
 8002370:	080023b5 	.word	0x080023b5
 8002374:	080023b5 	.word	0x080023b5
 8002378:	080023af 	.word	0x080023af
 800237c:	080023b5 	.word	0x080023b5
 8002380:	080023b5 	.word	0x080023b5
 8002384:	080023b5 	.word	0x080023b5
 8002388:	080023a3 	.word	0x080023a3
 800238c:	080023b5 	.word	0x080023b5
 8002390:	080023b5 	.word	0x080023b5
 8002394:	080023b5 	.word	0x080023b5
 8002398:	080023a9 	.word	0x080023a9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800239c:	4b18      	ldr	r3, [pc, #96]	@ (8002400 <LSM6DSL_AccReadXYZ+0x11c>)
 800239e:	61bb      	str	r3, [r7, #24]
    break;
 80023a0:	e008      	b.n	80023b4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80023a2:	4b18      	ldr	r3, [pc, #96]	@ (8002404 <LSM6DSL_AccReadXYZ+0x120>)
 80023a4:	61bb      	str	r3, [r7, #24]
    break;
 80023a6:	e005      	b.n	80023b4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80023a8:	4b17      	ldr	r3, [pc, #92]	@ (8002408 <LSM6DSL_AccReadXYZ+0x124>)
 80023aa:	61bb      	str	r3, [r7, #24]
    break;
 80023ac:	e002      	b.n	80023b4 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80023ae:	4b17      	ldr	r3, [pc, #92]	@ (800240c <LSM6DSL_AccReadXYZ+0x128>)
 80023b0:	61bb      	str	r3, [r7, #24]
    break;    
 80023b2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	77fb      	strb	r3, [r7, #31]
 80023b8:	e01a      	b.n	80023f0 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80023ba:	7ffb      	ldrb	r3, [r7, #31]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	3320      	adds	r3, #32
 80023c0:	443b      	add	r3, r7
 80023c2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80023c6:	ee07 3a90 	vmov	s15, r3
 80023ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80023d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d6:	7ffb      	ldrb	r3, [r7, #31]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023e2:	ee17 2a90 	vmov	r2, s15
 80023e6:	b212      	sxth	r2, r2
 80023e8:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80023ea:	7ffb      	ldrb	r3, [r7, #31]
 80023ec:	3301      	adds	r3, #1
 80023ee:	77fb      	strb	r3, [r7, #31]
 80023f0:	7ffb      	ldrb	r3, [r7, #31]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d9e1      	bls.n	80023ba <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 80023f6:	bf00      	nop
 80023f8:	bf00      	nop
 80023fa:	3720      	adds	r7, #32
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	3d79db23 	.word	0x3d79db23
 8002404:	3df9db23 	.word	0x3df9db23
 8002408:	3e79db23 	.word	0x3e79db23
 800240c:	3ef9db23 	.word	0x3ef9db23

08002410 <I2Cx_MspInit>:
 * @brief  Initializes I2C MSP.
 * @param  i2c_handler  I2C handler
 * @retval None
 */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	@ 0x28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002418:	4b27      	ldr	r3, [pc, #156]	@ (80024b8 <I2Cx_MspInit+0xa8>)
 800241a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241c:	4a26      	ldr	r2, [pc, #152]	@ (80024b8 <I2Cx_MspInit+0xa8>)
 800241e:	f043 0302 	orr.w	r3, r3, #2
 8002422:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002424:	4b24      	ldr	r3, [pc, #144]	@ (80024b8 <I2Cx_MspInit+0xa8>)
 8002426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002430:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002434:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002436:	2312      	movs	r3, #18
 8002438:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800243a:	2301      	movs	r3, #1
 800243c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243e:	2303      	movs	r3, #3
 8002440:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002442:	2304      	movs	r3, #4
 8002444:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	4619      	mov	r1, r3
 800244c:	481b      	ldr	r0, [pc, #108]	@ (80024bc <I2Cx_MspInit+0xac>)
 800244e:	f000 fc25 	bl	8002c9c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002452:	f107 0314 	add.w	r3, r7, #20
 8002456:	4619      	mov	r1, r3
 8002458:	4818      	ldr	r0, [pc, #96]	@ (80024bc <I2Cx_MspInit+0xac>)
 800245a:	f000 fc1f 	bl	8002c9c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800245e:	4b16      	ldr	r3, [pc, #88]	@ (80024b8 <I2Cx_MspInit+0xa8>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002462:	4a15      	ldr	r2, [pc, #84]	@ (80024b8 <I2Cx_MspInit+0xa8>)
 8002464:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002468:	6593      	str	r3, [r2, #88]	@ 0x58
 800246a:	4b13      	ldr	r3, [pc, #76]	@ (80024b8 <I2Cx_MspInit+0xa8>)
 800246c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002476:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <I2Cx_MspInit+0xa8>)
 8002478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800247a:	4a0f      	ldr	r2, [pc, #60]	@ (80024b8 <I2Cx_MspInit+0xa8>)
 800247c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002480:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002482:	4b0d      	ldr	r3, [pc, #52]	@ (80024b8 <I2Cx_MspInit+0xa8>)
 8002484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002486:	4a0c      	ldr	r2, [pc, #48]	@ (80024b8 <I2Cx_MspInit+0xa8>)
 8002488:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800248c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800248e:	2200      	movs	r2, #0
 8002490:	210f      	movs	r1, #15
 8002492:	2021      	movs	r0, #33	@ 0x21
 8002494:	f000 fabf 	bl	8002a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002498:	2021      	movs	r0, #33	@ 0x21
 800249a:	f000 fad8 	bl	8002a4e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	210f      	movs	r1, #15
 80024a2:	2022      	movs	r0, #34	@ 0x22
 80024a4:	f000 fab7 	bl	8002a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80024a8:	2022      	movs	r0, #34	@ 0x22
 80024aa:	f000 fad0 	bl	8002a4e <HAL_NVIC_EnableIRQ>
}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	@ 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
 80024bc:	48000400 	.word	0x48000400

080024c0 <I2Cx_Init>:
 * @brief  Initializes I2C HAL.
 * @param  i2c_handler  I2C handler
 * @retval None
 */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance = DISCOVERY_I2Cx;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a12      	ldr	r2, [pc, #72]	@ (8002514 <I2Cx_Init+0x54>)
 80024cc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing = DISCOVERY_I2Cx_TIMING;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a11      	ldr	r2, [pc, #68]	@ (8002518 <I2Cx_Init+0x58>)
 80024d2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1 = 0;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2 = 0;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff ff89 	bl	8002410 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fea5 	bl	800324e <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 8002504:	2100      	movs	r1, #0
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f001 fc5c 	bl	8003dc4 <HAL_I2CEx_ConfigAnalogFilter>
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40005800 	.word	0x40005800
 8002518:	00702681 	.word	0x00702681

0800251c <I2Cx_ReadMultiple>:
 * @param  Buffer  Pointer to data buffer
 * @param  Length  Length of the data
 * @retval HAL status
 */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08a      	sub	sp, #40	@ 0x28
 8002520:	af04      	add	r7, sp, #16
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	4608      	mov	r0, r1
 8002526:	4611      	mov	r1, r2
 8002528:	461a      	mov	r2, r3
 800252a:	4603      	mov	r3, r0
 800252c:	72fb      	strb	r3, [r7, #11]
 800252e:	460b      	mov	r3, r1
 8002530:	813b      	strh	r3, [r7, #8]
 8002532:	4613      	mov	r3, r2
 8002534:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800253a:	7afb      	ldrb	r3, [r7, #11]
 800253c:	b299      	uxth	r1, r3
 800253e:	88f8      	ldrh	r0, [r7, #6]
 8002540:	893a      	ldrh	r2, [r7, #8]
 8002542:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002546:	9302      	str	r3, [sp, #8]
 8002548:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	4603      	mov	r3, r0
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f001 f85a 	bl	800360c <HAL_I2C_Mem_Read>
 8002558:	4603      	mov	r3, r0
 800255a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d004      	beq.n	800256c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002562:	7afb      	ldrb	r3, [r7, #11]
 8002564:	4619      	mov	r1, r3
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f832 	bl	80025d0 <I2Cx_Error>
  }
  return status;
 800256c:	7dfb      	ldrb	r3, [r7, #23]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <I2Cx_WriteMultiple>:
 * @param  Buffer  The target register value to be written
 * @param  Length  buffer size to be written
 * @retval HAL status
 */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b08a      	sub	sp, #40	@ 0x28
 800257a:	af04      	add	r7, sp, #16
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	4608      	mov	r0, r1
 8002580:	4611      	mov	r1, r2
 8002582:	461a      	mov	r2, r3
 8002584:	4603      	mov	r3, r0
 8002586:	72fb      	strb	r3, [r7, #11]
 8002588:	460b      	mov	r3, r1
 800258a:	813b      	strh	r3, [r7, #8]
 800258c:	4613      	mov	r3, r2
 800258e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002594:	7afb      	ldrb	r3, [r7, #11]
 8002596:	b299      	uxth	r1, r3
 8002598:	88f8      	ldrh	r0, [r7, #6]
 800259a:	893a      	ldrh	r2, [r7, #8]
 800259c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025a0:	9302      	str	r3, [sp, #8]
 80025a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	4603      	mov	r3, r0
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 ff19 	bl	80033e4 <HAL_I2C_Mem_Write>
 80025b2:	4603      	mov	r3, r0
 80025b4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d004      	beq.n	80025c6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80025bc:	7afb      	ldrb	r3, [r7, #11]
 80025be:	4619      	mov	r1, r3
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 f805 	bl	80025d0 <I2Cx_Error>
  }
  return status;
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <I2Cx_Error>:
 * @param  i2c_handler  I2C handler
 * @param  Addr  I2C Address
 * @retval None
 */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 fed1 	bl	8003384 <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff ff6c 	bl	80024c0 <I2Cx_Init>
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <SENSOR_IO_Init>:
/**
 * @brief  Initializes Sensors low level.
 * @retval None
 */
void SENSOR_IO_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80025f4:	4802      	ldr	r0, [pc, #8]	@ (8002600 <SENSOR_IO_Init+0x10>)
 80025f6:	f7ff ff63 	bl	80024c0 <I2Cx_Init>
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20001358 	.word	0x20001358

08002604 <SENSOR_IO_Write>:
 * @param  Reg  Reg address
 * @param  Value  Data to be written
 * @retval None
 */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af02      	add	r7, sp, #8
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
 800260e:	460b      	mov	r3, r1
 8002610:	71bb      	strb	r3, [r7, #6]
 8002612:	4613      	mov	r3, r2
 8002614:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&Value, 1);
 8002616:	79bb      	ldrb	r3, [r7, #6]
 8002618:	b29a      	uxth	r2, r3
 800261a:	79f9      	ldrb	r1, [r7, #7]
 800261c:	2301      	movs	r3, #1
 800261e:	9301      	str	r3, [sp, #4]
 8002620:	1d7b      	adds	r3, r7, #5
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	2301      	movs	r3, #1
 8002626:	4803      	ldr	r0, [pc, #12]	@ (8002634 <SENSOR_IO_Write+0x30>)
 8002628:	f7ff ffa5 	bl	8002576 <I2Cx_WriteMultiple>
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20001358 	.word	0x20001358

08002638 <SENSOR_IO_Read>:
 * @param  Addr  I2C address
 * @param  Reg  Reg address
 * @retval Data to be read
 */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af02      	add	r7, sp, #8
 800263e:	4603      	mov	r3, r0
 8002640:	460a      	mov	r2, r1
 8002642:	71fb      	strb	r3, [r7, #7]
 8002644:	4613      	mov	r3, r2
 8002646:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&read_value, 1);
 800264c:	79bb      	ldrb	r3, [r7, #6]
 800264e:	b29a      	uxth	r2, r3
 8002650:	79f9      	ldrb	r1, [r7, #7]
 8002652:	2301      	movs	r3, #1
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	f107 030f 	add.w	r3, r7, #15
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	2301      	movs	r3, #1
 800265e:	4804      	ldr	r0, [pc, #16]	@ (8002670 <SENSOR_IO_Read+0x38>)
 8002660:	f7ff ff5c 	bl	800251c <I2Cx_ReadMultiple>

  return read_value;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20001358 	.word	0x20001358

08002674 <SENSOR_IO_ReadMultiple>:
 * @param  Buffer  Pointer to data buffer
 * @param  Length  Length of the data
 * @retval HAL status
 */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af02      	add	r7, sp, #8
 800267a:	603a      	str	r2, [r7, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
 8002682:	460b      	mov	r3, r1
 8002684:	71bb      	strb	r3, [r7, #6]
 8002686:	4613      	mov	r3, r2
 8002688:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800268a:	79bb      	ldrb	r3, [r7, #6]
 800268c:	b29a      	uxth	r2, r3
 800268e:	79f9      	ldrb	r1, [r7, #7]
 8002690:	88bb      	ldrh	r3, [r7, #4]
 8002692:	9301      	str	r3, [sp, #4]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	2301      	movs	r3, #1
 800269a:	4804      	ldr	r0, [pc, #16]	@ (80026ac <SENSOR_IO_ReadMultiple+0x38>)
 800269c:	f7ff ff3e 	bl	800251c <I2Cx_ReadMultiple>
 80026a0:	4603      	mov	r3, r0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20001358 	.word	0x20001358

080026b0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80026ba:	2300      	movs	r3, #0
 80026bc:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80026be:	4b1a      	ldr	r3, [pc, #104]	@ (8002728 <BSP_ACCELERO_Init+0x78>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	4798      	blx	r3
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b6a      	cmp	r3, #106	@ 0x6a
 80026c8:	d002      	beq.n	80026d0 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	e025      	b.n	800271c <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80026d0:	4b16      	ldr	r3, [pc, #88]	@ (800272c <BSP_ACCELERO_Init+0x7c>)
 80026d2:	4a15      	ldr	r2, [pc, #84]	@ (8002728 <BSP_ACCELERO_Init+0x78>)
 80026d4:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80026d6:	2330      	movs	r3, #48	@ 0x30
 80026d8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80026de:	2300      	movs	r3, #0
 80026e0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80026e2:	2340      	movs	r3, #64	@ 0x40
 80026e4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80026ee:	797a      	ldrb	r2, [r7, #5]
 80026f0:	7abb      	ldrb	r3, [r7, #10]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80026f8:	7a3b      	ldrb	r3, [r7, #8]
 80026fa:	f043 0304 	orr.w	r3, r3, #4
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	b21b      	sxth	r3, r3
 8002702:	021b      	lsls	r3, r3, #8
 8002704:	b21a      	sxth	r2, r3
 8002706:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	b21b      	sxth	r3, r3
 800270e:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <BSP_ACCELERO_Init+0x7c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	89ba      	ldrh	r2, [r7, #12]
 8002718:	4610      	mov	r0, r2
 800271a:	4798      	blx	r3
  }  

  return ret;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000018 	.word	0x20000018
 800272c:	200013ac 	.word	0x200013ac

08002730 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800273a:	2003      	movs	r0, #3
 800273c:	f000 f960 	bl	8002a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002740:	200f      	movs	r0, #15
 8002742:	f000 f80d 	bl	8002760 <HAL_InitTick>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	71fb      	strb	r3, [r7, #7]
 8002750:	e001      	b.n	8002756 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002752:	f7ff f89b 	bl	800188c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002756:	79fb      	ldrb	r3, [r7, #7]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800276c:	4b17      	ldr	r3, [pc, #92]	@ (80027cc <HAL_InitTick+0x6c>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d023      	beq.n	80027bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002774:	4b16      	ldr	r3, [pc, #88]	@ (80027d0 <HAL_InitTick+0x70>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <HAL_InitTick+0x6c>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	4619      	mov	r1, r3
 800277e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002782:	fbb3 f3f1 	udiv	r3, r3, r1
 8002786:	fbb2 f3f3 	udiv	r3, r2, r3
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f96d 	bl	8002a6a <HAL_SYSTICK_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10f      	bne.n	80027b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b0f      	cmp	r3, #15
 800279a:	d809      	bhi.n	80027b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800279c:	2200      	movs	r2, #0
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295
 80027a4:	f000 f937 	bl	8002a16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027a8:	4a0a      	ldr	r2, [pc, #40]	@ (80027d4 <HAL_InitTick+0x74>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	e007      	b.n	80027c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	e004      	b.n	80027c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
 80027ba:	e001      	b.n	80027c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000050 	.word	0x20000050
 80027d0:	20000014 	.word	0x20000014
 80027d4:	2000004c 	.word	0x2000004c

080027d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_IncTick+0x20>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <HAL_IncTick+0x24>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	4a04      	ldr	r2, [pc, #16]	@ (80027fc <HAL_IncTick+0x24>)
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000050 	.word	0x20000050
 80027fc:	200013b0 	.word	0x200013b0

08002800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return uwTick;
 8002804:	4b03      	ldr	r3, [pc, #12]	@ (8002814 <HAL_GetTick+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	200013b0 	.word	0x200013b0

08002818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002820:	f7ff ffee 	bl	8002800 <HAL_GetTick>
 8002824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d005      	beq.n	800283e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002832:	4b0a      	ldr	r3, [pc, #40]	@ (800285c <HAL_Delay+0x44>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4413      	add	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800283e:	bf00      	nop
 8002840:	f7ff ffde 	bl	8002800 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	429a      	cmp	r2, r3
 800284e:	d8f7      	bhi.n	8002840 <HAL_Delay+0x28>
  {
  }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000050 	.word	0x20000050

08002860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002870:	4b0c      	ldr	r3, [pc, #48]	@ (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800287c:	4013      	ands	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002888:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800288c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002892:	4a04      	ldr	r2, [pc, #16]	@ (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60d3      	str	r3, [r2, #12]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ac:	4b04      	ldr	r3, [pc, #16]	@ (80028c0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	f003 0307 	and.w	r3, r3, #7
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db0b      	blt.n	80028ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4907      	ldr	r1, [pc, #28]	@ (80028fc <__NVIC_EnableIRQ+0x38>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	2001      	movs	r0, #1
 80028e6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000e100 	.word	0xe000e100

08002900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	6039      	str	r1, [r7, #0]
 800290a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	2b00      	cmp	r3, #0
 8002912:	db0a      	blt.n	800292a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	b2da      	uxtb	r2, r3
 8002918:	490c      	ldr	r1, [pc, #48]	@ (800294c <__NVIC_SetPriority+0x4c>)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	0112      	lsls	r2, r2, #4
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	440b      	add	r3, r1
 8002924:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002928:	e00a      	b.n	8002940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4908      	ldr	r1, [pc, #32]	@ (8002950 <__NVIC_SetPriority+0x50>)
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	3b04      	subs	r3, #4
 8002938:	0112      	lsls	r2, r2, #4
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	440b      	add	r3, r1
 800293e:	761a      	strb	r2, [r3, #24]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000e100 	.word	0xe000e100
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	@ 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f1c3 0307 	rsb	r3, r3, #7
 800296e:	2b04      	cmp	r3, #4
 8002970:	bf28      	it	cs
 8002972:	2304      	movcs	r3, #4
 8002974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3304      	adds	r3, #4
 800297a:	2b06      	cmp	r3, #6
 800297c:	d902      	bls.n	8002984 <NVIC_EncodePriority+0x30>
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3b03      	subs	r3, #3
 8002982:	e000      	b.n	8002986 <NVIC_EncodePriority+0x32>
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	f04f 32ff 	mov.w	r2, #4294967295
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43da      	mvns	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	401a      	ands	r2, r3
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800299c:	f04f 31ff 	mov.w	r1, #4294967295
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	43d9      	mvns	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ac:	4313      	orrs	r3, r2
         );
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3724      	adds	r7, #36	@ 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029cc:	d301      	bcc.n	80029d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ce:	2301      	movs	r3, #1
 80029d0:	e00f      	b.n	80029f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029d2:	4a0a      	ldr	r2, [pc, #40]	@ (80029fc <SysTick_Config+0x40>)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029da:	210f      	movs	r1, #15
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	f7ff ff8e 	bl	8002900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e4:	4b05      	ldr	r3, [pc, #20]	@ (80029fc <SysTick_Config+0x40>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ea:	4b04      	ldr	r3, [pc, #16]	@ (80029fc <SysTick_Config+0x40>)
 80029ec:	2207      	movs	r2, #7
 80029ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	e000e010 	.word	0xe000e010

08002a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff29 	bl	8002860 <__NVIC_SetPriorityGrouping>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a28:	f7ff ff3e 	bl	80028a8 <__NVIC_GetPriorityGrouping>
 8002a2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	6978      	ldr	r0, [r7, #20]
 8002a34:	f7ff ff8e 	bl	8002954 <NVIC_EncodePriority>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff5d 	bl	8002900 <__NVIC_SetPriority>
}
 8002a46:	bf00      	nop
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff31 	bl	80028c4 <__NVIC_EnableIRQ>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff ffa2 	bl	80029bc <SysTick_Config>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e0ac      	b.n	8002bf0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f8b2 	bl	8002c04 <DFSDM_GetChannelFromInstance>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	4a55      	ldr	r2, [pc, #340]	@ (8002bf8 <HAL_DFSDM_ChannelInit+0x174>)
 8002aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e09f      	b.n	8002bf0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7fe ff13 	bl	80018dc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002ab6:	4b51      	ldr	r3, [pc, #324]	@ (8002bfc <HAL_DFSDM_ChannelInit+0x178>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	3301      	adds	r3, #1
 8002abc:	4a4f      	ldr	r2, [pc, #316]	@ (8002bfc <HAL_DFSDM_ChannelInit+0x178>)
 8002abe:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002ac0:	4b4e      	ldr	r3, [pc, #312]	@ (8002bfc <HAL_DFSDM_ChannelInit+0x178>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d125      	bne.n	8002b14 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8002c00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a4c      	ldr	r2, [pc, #304]	@ (8002c00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ace:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ad2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002ad4:	4b4a      	ldr	r3, [pc, #296]	@ (8002c00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4948      	ldr	r1, [pc, #288]	@ (8002c00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002ae2:	4b47      	ldr	r3, [pc, #284]	@ (8002c00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a46      	ldr	r2, [pc, #280]	@ (8002c00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ae8:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8002aec:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	791b      	ldrb	r3, [r3, #4]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d108      	bne.n	8002b08 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002af6:	4b42      	ldr	r3, [pc, #264]	@ (8002c00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	041b      	lsls	r3, r3, #16
 8002b02:	493f      	ldr	r1, [pc, #252]	@ (8002c00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002b08:	4b3d      	ldr	r3, [pc, #244]	@ (8002c00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a3c      	ldr	r2, [pc, #240]	@ (8002c00 <HAL_DFSDM_ChannelInit+0x17c>)
 8002b0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b12:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8002b22:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6819      	ldr	r1, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b32:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002b38:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 020f 	bic.w	r2, r2, #15
 8002b50:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6819      	ldr	r1, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8002b78:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f002 0207 	and.w	r2, r2, #7
 8002ba4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002bd0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f810 	bl	8002c04 <DFSDM_GetChannelFromInstance>
 8002be4:	4602      	mov	r2, r0
 8002be6:	4904      	ldr	r1, [pc, #16]	@ (8002bf8 <HAL_DFSDM_ChannelInit+0x174>)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	200013b8 	.word	0x200013b8
 8002bfc:	200013b4 	.word	0x200013b4
 8002c00:	40016000 	.word	0x40016000

08002c04 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8002c80 <DFSDM_GetChannelFromInstance+0x7c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d102      	bne.n	8002c1a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	e02b      	b.n	8002c72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a19      	ldr	r2, [pc, #100]	@ (8002c84 <DFSDM_GetChannelFromInstance+0x80>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d102      	bne.n	8002c28 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002c22:	2301      	movs	r3, #1
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	e024      	b.n	8002c72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a17      	ldr	r2, [pc, #92]	@ (8002c88 <DFSDM_GetChannelFromInstance+0x84>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d102      	bne.n	8002c36 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002c30:	2302      	movs	r3, #2
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	e01d      	b.n	8002c72 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a14      	ldr	r2, [pc, #80]	@ (8002c8c <DFSDM_GetChannelFromInstance+0x88>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d102      	bne.n	8002c44 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002c3e:	2304      	movs	r3, #4
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	e016      	b.n	8002c72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a12      	ldr	r2, [pc, #72]	@ (8002c90 <DFSDM_GetChannelFromInstance+0x8c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d102      	bne.n	8002c52 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002c4c:	2305      	movs	r3, #5
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	e00f      	b.n	8002c72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a0f      	ldr	r2, [pc, #60]	@ (8002c94 <DFSDM_GetChannelFromInstance+0x90>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d102      	bne.n	8002c60 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002c5a:	2306      	movs	r3, #6
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	e008      	b.n	8002c72 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a0d      	ldr	r2, [pc, #52]	@ (8002c98 <DFSDM_GetChannelFromInstance+0x94>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d102      	bne.n	8002c6e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002c68:	2307      	movs	r3, #7
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	e001      	b.n	8002c72 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002c72:	68fb      	ldr	r3, [r7, #12]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	40016000 	.word	0x40016000
 8002c84:	40016020 	.word	0x40016020
 8002c88:	40016040 	.word	0x40016040
 8002c8c:	40016080 	.word	0x40016080
 8002c90:	400160a0 	.word	0x400160a0
 8002c94:	400160c0 	.word	0x400160c0
 8002c98:	400160e0 	.word	0x400160e0

08002c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002caa:	e17f      	b.n	8002fac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 8171 	beq.w	8002fa6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d005      	beq.n	8002cdc <HAL_GPIO_Init+0x40>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d130      	bne.n	8002d3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d12:	2201      	movs	r2, #1
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	f003 0201 	and.w	r2, r3, #1
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d118      	bne.n	8002d7c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002d50:	2201      	movs	r2, #1
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	08db      	lsrs	r3, r3, #3
 8002d66:	f003 0201 	and.w	r2, r3, #1
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d017      	beq.n	8002db8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	2203      	movs	r2, #3
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d123      	bne.n	8002e0c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	08da      	lsrs	r2, r3, #3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3208      	adds	r2, #8
 8002dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	220f      	movs	r2, #15
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	08da      	lsrs	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3208      	adds	r2, #8
 8002e06:	6939      	ldr	r1, [r7, #16]
 8002e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	2203      	movs	r2, #3
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0203 	and.w	r2, r3, #3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80ac 	beq.w	8002fa6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4e:	4b5f      	ldr	r3, [pc, #380]	@ (8002fcc <HAL_GPIO_Init+0x330>)
 8002e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e52:	4a5e      	ldr	r2, [pc, #376]	@ (8002fcc <HAL_GPIO_Init+0x330>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e5a:	4b5c      	ldr	r3, [pc, #368]	@ (8002fcc <HAL_GPIO_Init+0x330>)
 8002e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e66:	4a5a      	ldr	r2, [pc, #360]	@ (8002fd0 <HAL_GPIO_Init+0x334>)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	089b      	lsrs	r3, r3, #2
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	220f      	movs	r2, #15
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4013      	ands	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e90:	d025      	beq.n	8002ede <HAL_GPIO_Init+0x242>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a4f      	ldr	r2, [pc, #316]	@ (8002fd4 <HAL_GPIO_Init+0x338>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d01f      	beq.n	8002eda <HAL_GPIO_Init+0x23e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a4e      	ldr	r2, [pc, #312]	@ (8002fd8 <HAL_GPIO_Init+0x33c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d019      	beq.n	8002ed6 <HAL_GPIO_Init+0x23a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a4d      	ldr	r2, [pc, #308]	@ (8002fdc <HAL_GPIO_Init+0x340>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <HAL_GPIO_Init+0x236>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a4c      	ldr	r2, [pc, #304]	@ (8002fe0 <HAL_GPIO_Init+0x344>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00d      	beq.n	8002ece <HAL_GPIO_Init+0x232>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a4b      	ldr	r2, [pc, #300]	@ (8002fe4 <HAL_GPIO_Init+0x348>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d007      	beq.n	8002eca <HAL_GPIO_Init+0x22e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a4a      	ldr	r2, [pc, #296]	@ (8002fe8 <HAL_GPIO_Init+0x34c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d101      	bne.n	8002ec6 <HAL_GPIO_Init+0x22a>
 8002ec2:	2306      	movs	r3, #6
 8002ec4:	e00c      	b.n	8002ee0 <HAL_GPIO_Init+0x244>
 8002ec6:	2307      	movs	r3, #7
 8002ec8:	e00a      	b.n	8002ee0 <HAL_GPIO_Init+0x244>
 8002eca:	2305      	movs	r3, #5
 8002ecc:	e008      	b.n	8002ee0 <HAL_GPIO_Init+0x244>
 8002ece:	2304      	movs	r3, #4
 8002ed0:	e006      	b.n	8002ee0 <HAL_GPIO_Init+0x244>
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e004      	b.n	8002ee0 <HAL_GPIO_Init+0x244>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e002      	b.n	8002ee0 <HAL_GPIO_Init+0x244>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_GPIO_Init+0x244>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	f002 0203 	and.w	r2, r2, #3
 8002ee6:	0092      	lsls	r2, r2, #2
 8002ee8:	4093      	lsls	r3, r2
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ef0:	4937      	ldr	r1, [pc, #220]	@ (8002fd0 <HAL_GPIO_Init+0x334>)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002efe:	4b3b      	ldr	r3, [pc, #236]	@ (8002fec <HAL_GPIO_Init+0x350>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f22:	4a32      	ldr	r2, [pc, #200]	@ (8002fec <HAL_GPIO_Init+0x350>)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f28:	4b30      	ldr	r3, [pc, #192]	@ (8002fec <HAL_GPIO_Init+0x350>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4013      	ands	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f4c:	4a27      	ldr	r2, [pc, #156]	@ (8002fec <HAL_GPIO_Init+0x350>)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f52:	4b26      	ldr	r3, [pc, #152]	@ (8002fec <HAL_GPIO_Init+0x350>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f76:	4a1d      	ldr	r2, [pc, #116]	@ (8002fec <HAL_GPIO_Init+0x350>)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fec <HAL_GPIO_Init+0x350>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fa0:	4a12      	ldr	r2, [pc, #72]	@ (8002fec <HAL_GPIO_Init+0x350>)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f47f ae78 	bne.w	8002cac <HAL_GPIO_Init+0x10>
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	bf00      	nop
 8002fc0:	371c      	adds	r7, #28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	40010000 	.word	0x40010000
 8002fd4:	48000400 	.word	0x48000400
 8002fd8:	48000800 	.word	0x48000800
 8002fdc:	48000c00 	.word	0x48000c00
 8002fe0:	48001000 	.word	0x48001000
 8002fe4:	48001400 	.word	0x48001400
 8002fe8:	48001800 	.word	0x48001800
 8002fec:	40010400 	.word	0x40010400

08002ff0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002ffe:	e0cd      	b.n	800319c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003000:	2201      	movs	r2, #1
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 80c0 	beq.w	8003196 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003016:	4a68      	ldr	r2, [pc, #416]	@ (80031b8 <HAL_GPIO_DeInit+0x1c8>)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	089b      	lsrs	r3, r3, #2
 800301c:	3302      	adds	r3, #2
 800301e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003022:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	220f      	movs	r2, #15
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4013      	ands	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800303e:	d025      	beq.n	800308c <HAL_GPIO_DeInit+0x9c>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a5e      	ldr	r2, [pc, #376]	@ (80031bc <HAL_GPIO_DeInit+0x1cc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d01f      	beq.n	8003088 <HAL_GPIO_DeInit+0x98>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a5d      	ldr	r2, [pc, #372]	@ (80031c0 <HAL_GPIO_DeInit+0x1d0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d019      	beq.n	8003084 <HAL_GPIO_DeInit+0x94>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a5c      	ldr	r2, [pc, #368]	@ (80031c4 <HAL_GPIO_DeInit+0x1d4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d013      	beq.n	8003080 <HAL_GPIO_DeInit+0x90>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a5b      	ldr	r2, [pc, #364]	@ (80031c8 <HAL_GPIO_DeInit+0x1d8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00d      	beq.n	800307c <HAL_GPIO_DeInit+0x8c>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a5a      	ldr	r2, [pc, #360]	@ (80031cc <HAL_GPIO_DeInit+0x1dc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d007      	beq.n	8003078 <HAL_GPIO_DeInit+0x88>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a59      	ldr	r2, [pc, #356]	@ (80031d0 <HAL_GPIO_DeInit+0x1e0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d101      	bne.n	8003074 <HAL_GPIO_DeInit+0x84>
 8003070:	2306      	movs	r3, #6
 8003072:	e00c      	b.n	800308e <HAL_GPIO_DeInit+0x9e>
 8003074:	2307      	movs	r3, #7
 8003076:	e00a      	b.n	800308e <HAL_GPIO_DeInit+0x9e>
 8003078:	2305      	movs	r3, #5
 800307a:	e008      	b.n	800308e <HAL_GPIO_DeInit+0x9e>
 800307c:	2304      	movs	r3, #4
 800307e:	e006      	b.n	800308e <HAL_GPIO_DeInit+0x9e>
 8003080:	2303      	movs	r3, #3
 8003082:	e004      	b.n	800308e <HAL_GPIO_DeInit+0x9e>
 8003084:	2302      	movs	r3, #2
 8003086:	e002      	b.n	800308e <HAL_GPIO_DeInit+0x9e>
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <HAL_GPIO_DeInit+0x9e>
 800308c:	2300      	movs	r3, #0
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	f002 0203 	and.w	r2, r2, #3
 8003094:	0092      	lsls	r2, r2, #2
 8003096:	4093      	lsls	r3, r2
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	429a      	cmp	r2, r3
 800309c:	d132      	bne.n	8003104 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800309e:	4b4d      	ldr	r3, [pc, #308]	@ (80031d4 <HAL_GPIO_DeInit+0x1e4>)
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	494b      	ldr	r1, [pc, #300]	@ (80031d4 <HAL_GPIO_DeInit+0x1e4>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80030ac:	4b49      	ldr	r3, [pc, #292]	@ (80031d4 <HAL_GPIO_DeInit+0x1e4>)
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	4947      	ldr	r1, [pc, #284]	@ (80031d4 <HAL_GPIO_DeInit+0x1e4>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80030ba:	4b46      	ldr	r3, [pc, #280]	@ (80031d4 <HAL_GPIO_DeInit+0x1e4>)
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	4944      	ldr	r1, [pc, #272]	@ (80031d4 <HAL_GPIO_DeInit+0x1e4>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80030c8:	4b42      	ldr	r3, [pc, #264]	@ (80031d4 <HAL_GPIO_DeInit+0x1e4>)
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	4940      	ldr	r1, [pc, #256]	@ (80031d4 <HAL_GPIO_DeInit+0x1e4>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	220f      	movs	r2, #15
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80030e6:	4a34      	ldr	r2, [pc, #208]	@ (80031b8 <HAL_GPIO_DeInit+0x1c8>)
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	089b      	lsrs	r3, r3, #2
 80030ec:	3302      	adds	r3, #2
 80030ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	43da      	mvns	r2, r3
 80030f6:	4830      	ldr	r0, [pc, #192]	@ (80031b8 <HAL_GPIO_DeInit+0x1c8>)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	089b      	lsrs	r3, r3, #2
 80030fc:	400a      	ands	r2, r1
 80030fe:	3302      	adds	r3, #2
 8003100:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	2103      	movs	r1, #3
 800310e:	fa01 f303 	lsl.w	r3, r1, r3
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	08da      	lsrs	r2, r3, #3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3208      	adds	r2, #8
 8003120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	220f      	movs	r2, #15
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	08d2      	lsrs	r2, r2, #3
 8003138:	4019      	ands	r1, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3208      	adds	r2, #8
 800313e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	2103      	movs	r1, #3
 800314c:	fa01 f303 	lsl.w	r3, r1, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	401a      	ands	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	2101      	movs	r1, #1
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	fa01 f303 	lsl.w	r3, r1, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	401a      	ands	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	2103      	movs	r1, #3
 8003176:	fa01 f303 	lsl.w	r3, r1, r3
 800317a:	43db      	mvns	r3, r3
 800317c:	401a      	ands	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003186:	2101      	movs	r1, #1
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	fa01 f303 	lsl.w	r3, r1, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	401a      	ands	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	3301      	adds	r3, #1
 800319a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f47f af2b 	bne.w	8003000 <HAL_GPIO_DeInit+0x10>
  }
}
 80031aa:	bf00      	nop
 80031ac:	bf00      	nop
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	40010000 	.word	0x40010000
 80031bc:	48000400 	.word	0x48000400
 80031c0:	48000800 	.word	0x48000800
 80031c4:	48000c00 	.word	0x48000c00
 80031c8:	48001000 	.word	0x48001000
 80031cc:	48001400 	.word	0x48001400
 80031d0:	48001800 	.word	0x48001800
 80031d4:	40010400 	.word	0x40010400

080031d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	807b      	strh	r3, [r7, #2]
 80031e4:	4613      	mov	r3, r2
 80031e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031e8:	787b      	ldrb	r3, [r7, #1]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031ee:	887a      	ldrh	r2, [r7, #2]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031f4:	e002      	b.n	80031fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031f6:	887a      	ldrh	r2, [r7, #2]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003212:	4b08      	ldr	r3, [pc, #32]	@ (8003234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	4013      	ands	r3, r2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d006      	beq.n	800322c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800321e:	4a05      	ldr	r2, [pc, #20]	@ (8003234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f806 	bl	8003238 <HAL_GPIO_EXTI_Callback>
  }
}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40010400 	.word	0x40010400

08003238 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e08d      	b.n	800337c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d106      	bne.n	800327a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7fe fb95 	bl	80019a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2224      	movs	r2, #36	@ 0x24
 800327e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800329e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d107      	bne.n	80032c8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032c4:	609a      	str	r2, [r3, #8]
 80032c6:	e006      	b.n	80032d6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80032d4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d108      	bne.n	80032f0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032ec:	605a      	str	r2, [r3, #4]
 80032ee:	e007      	b.n	8003300 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032fe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800330e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003312:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003322:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69d9      	ldr	r1, [r3, #28]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1a      	ldr	r2, [r3, #32]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0201 	orr.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e021      	b.n	80033da <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2224      	movs	r2, #36	@ 0x24
 800339a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0201 	bic.w	r2, r2, #1
 80033ac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fe fb56 	bl	8001a60 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	4608      	mov	r0, r1
 80033ee:	4611      	mov	r1, r2
 80033f0:	461a      	mov	r2, r3
 80033f2:	4603      	mov	r3, r0
 80033f4:	817b      	strh	r3, [r7, #10]
 80033f6:	460b      	mov	r3, r1
 80033f8:	813b      	strh	r3, [r7, #8]
 80033fa:	4613      	mov	r3, r2
 80033fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b20      	cmp	r3, #32
 8003408:	f040 80f9 	bne.w	80035fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <HAL_I2C_Mem_Write+0x34>
 8003412:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003414:	2b00      	cmp	r3, #0
 8003416:	d105      	bne.n	8003424 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800341e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e0ed      	b.n	8003600 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_I2C_Mem_Write+0x4e>
 800342e:	2302      	movs	r3, #2
 8003430:	e0e6      	b.n	8003600 <HAL_I2C_Mem_Write+0x21c>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800343a:	f7ff f9e1 	bl	8002800 <HAL_GetTick>
 800343e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	2319      	movs	r3, #25
 8003446:	2201      	movs	r2, #1
 8003448:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 fac3 	bl	80039d8 <I2C_WaitOnFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0d1      	b.n	8003600 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2221      	movs	r2, #33	@ 0x21
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2240      	movs	r2, #64	@ 0x40
 8003468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a3a      	ldr	r2, [r7, #32]
 8003476:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800347c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003484:	88f8      	ldrh	r0, [r7, #6]
 8003486:	893a      	ldrh	r2, [r7, #8]
 8003488:	8979      	ldrh	r1, [r7, #10]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	4603      	mov	r3, r0
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f9d3 	bl	8003840 <I2C_RequestMemoryWrite>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e0a9      	b.n	8003600 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2bff      	cmp	r3, #255	@ 0xff
 80034b4:	d90e      	bls.n	80034d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	22ff      	movs	r2, #255	@ 0xff
 80034ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	8979      	ldrh	r1, [r7, #10]
 80034c4:	2300      	movs	r3, #0
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 fc47 	bl	8003d60 <I2C_TransferConfig>
 80034d2:	e00f      	b.n	80034f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	8979      	ldrh	r1, [r7, #10]
 80034e6:	2300      	movs	r3, #0
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 fc36 	bl	8003d60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 fac6 	bl	8003a8a <I2C_WaitOnTXISFlagUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e07b      	b.n	8003600 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	781a      	ldrb	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d034      	beq.n	80035ac <HAL_I2C_Mem_Write+0x1c8>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003546:	2b00      	cmp	r3, #0
 8003548:	d130      	bne.n	80035ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003550:	2200      	movs	r2, #0
 8003552:	2180      	movs	r1, #128	@ 0x80
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 fa3f 	bl	80039d8 <I2C_WaitOnFlagUntilTimeout>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e04d      	b.n	8003600 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	2bff      	cmp	r3, #255	@ 0xff
 800356c:	d90e      	bls.n	800358c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	22ff      	movs	r2, #255	@ 0xff
 8003572:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003578:	b2da      	uxtb	r2, r3
 800357a:	8979      	ldrh	r1, [r7, #10]
 800357c:	2300      	movs	r3, #0
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fbeb 	bl	8003d60 <I2C_TransferConfig>
 800358a:	e00f      	b.n	80035ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359a:	b2da      	uxtb	r2, r3
 800359c:	8979      	ldrh	r1, [r7, #10]
 800359e:	2300      	movs	r3, #0
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 fbda 	bl	8003d60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d19e      	bne.n	80034f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 faac 	bl	8003b18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e01a      	b.n	8003600 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2220      	movs	r2, #32
 80035d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003608 <HAL_I2C_Mem_Write+0x224>)
 80035de:	400b      	ands	r3, r1
 80035e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	e000      	b.n	8003600 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80035fe:	2302      	movs	r3, #2
  }
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	fe00e800 	.word	0xfe00e800

0800360c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af02      	add	r7, sp, #8
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	4608      	mov	r0, r1
 8003616:	4611      	mov	r1, r2
 8003618:	461a      	mov	r2, r3
 800361a:	4603      	mov	r3, r0
 800361c:	817b      	strh	r3, [r7, #10]
 800361e:	460b      	mov	r3, r1
 8003620:	813b      	strh	r3, [r7, #8]
 8003622:	4613      	mov	r3, r2
 8003624:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b20      	cmp	r3, #32
 8003630:	f040 80fd 	bne.w	800382e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_I2C_Mem_Read+0x34>
 800363a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800363c:	2b00      	cmp	r3, #0
 800363e:	d105      	bne.n	800364c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003646:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0f1      	b.n	8003830 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_I2C_Mem_Read+0x4e>
 8003656:	2302      	movs	r3, #2
 8003658:	e0ea      	b.n	8003830 <HAL_I2C_Mem_Read+0x224>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003662:	f7ff f8cd 	bl	8002800 <HAL_GetTick>
 8003666:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	2319      	movs	r3, #25
 800366e:	2201      	movs	r2, #1
 8003670:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f9af 	bl	80039d8 <I2C_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0d5      	b.n	8003830 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2222      	movs	r2, #34	@ 0x22
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2240      	movs	r2, #64	@ 0x40
 8003690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a3a      	ldr	r2, [r7, #32]
 800369e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80036a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036ac:	88f8      	ldrh	r0, [r7, #6]
 80036ae:	893a      	ldrh	r2, [r7, #8]
 80036b0:	8979      	ldrh	r1, [r7, #10]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	9301      	str	r3, [sp, #4]
 80036b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	4603      	mov	r3, r0
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f913 	bl	80038e8 <I2C_RequestMemoryRead>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0ad      	b.n	8003830 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2bff      	cmp	r3, #255	@ 0xff
 80036dc:	d90e      	bls.n	80036fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	8979      	ldrh	r1, [r7, #10]
 80036ec:	4b52      	ldr	r3, [pc, #328]	@ (8003838 <HAL_I2C_Mem_Read+0x22c>)
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 fb33 	bl	8003d60 <I2C_TransferConfig>
 80036fa:	e00f      	b.n	800371c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800370a:	b2da      	uxtb	r2, r3
 800370c:	8979      	ldrh	r1, [r7, #10]
 800370e:	4b4a      	ldr	r3, [pc, #296]	@ (8003838 <HAL_I2C_Mem_Read+0x22c>)
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 fb22 	bl	8003d60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003722:	2200      	movs	r2, #0
 8003724:	2104      	movs	r1, #4
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f956 	bl	80039d8 <I2C_WaitOnFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e07c      	b.n	8003830 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375e:	b29b      	uxth	r3, r3
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d034      	beq.n	80037dc <HAL_I2C_Mem_Read+0x1d0>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003776:	2b00      	cmp	r3, #0
 8003778:	d130      	bne.n	80037dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003780:	2200      	movs	r2, #0
 8003782:	2180      	movs	r1, #128	@ 0x80
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 f927 	bl	80039d8 <I2C_WaitOnFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e04d      	b.n	8003830 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	2bff      	cmp	r3, #255	@ 0xff
 800379c:	d90e      	bls.n	80037bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	8979      	ldrh	r1, [r7, #10]
 80037ac:	2300      	movs	r3, #0
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 fad3 	bl	8003d60 <I2C_TransferConfig>
 80037ba:	e00f      	b.n	80037dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	8979      	ldrh	r1, [r7, #10]
 80037ce:	2300      	movs	r3, #0
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fac2 	bl	8003d60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d19a      	bne.n	800371c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 f994 	bl	8003b18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e01a      	b.n	8003830 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2220      	movs	r2, #32
 8003800:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6859      	ldr	r1, [r3, #4]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b0b      	ldr	r3, [pc, #44]	@ (800383c <HAL_I2C_Mem_Read+0x230>)
 800380e:	400b      	ands	r3, r1
 8003810:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	e000      	b.n	8003830 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800382e:	2302      	movs	r3, #2
  }
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	80002400 	.word	0x80002400
 800383c:	fe00e800 	.word	0xfe00e800

08003840 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af02      	add	r7, sp, #8
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	4608      	mov	r0, r1
 800384a:	4611      	mov	r1, r2
 800384c:	461a      	mov	r2, r3
 800384e:	4603      	mov	r3, r0
 8003850:	817b      	strh	r3, [r7, #10]
 8003852:	460b      	mov	r3, r1
 8003854:	813b      	strh	r3, [r7, #8]
 8003856:	4613      	mov	r3, r2
 8003858:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	b2da      	uxtb	r2, r3
 800385e:	8979      	ldrh	r1, [r7, #10]
 8003860:	4b20      	ldr	r3, [pc, #128]	@ (80038e4 <I2C_RequestMemoryWrite+0xa4>)
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 fa79 	bl	8003d60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800386e:	69fa      	ldr	r2, [r7, #28]
 8003870:	69b9      	ldr	r1, [r7, #24]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f909 	bl	8003a8a <I2C_WaitOnTXISFlagUntilTimeout>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e02c      	b.n	80038dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d105      	bne.n	8003894 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003888:	893b      	ldrh	r3, [r7, #8]
 800388a:	b2da      	uxtb	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	629a      	str	r2, [r3, #40]	@ 0x28
 8003892:	e015      	b.n	80038c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003894:	893b      	ldrh	r3, [r7, #8]
 8003896:	0a1b      	lsrs	r3, r3, #8
 8003898:	b29b      	uxth	r3, r3
 800389a:	b2da      	uxtb	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038a2:	69fa      	ldr	r2, [r7, #28]
 80038a4:	69b9      	ldr	r1, [r7, #24]
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f8ef 	bl	8003a8a <I2C_WaitOnTXISFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e012      	b.n	80038dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038b6:	893b      	ldrh	r3, [r7, #8]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2200      	movs	r2, #0
 80038c8:	2180      	movs	r1, #128	@ 0x80
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f884 	bl	80039d8 <I2C_WaitOnFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	80002000 	.word	0x80002000

080038e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	4608      	mov	r0, r1
 80038f2:	4611      	mov	r1, r2
 80038f4:	461a      	mov	r2, r3
 80038f6:	4603      	mov	r3, r0
 80038f8:	817b      	strh	r3, [r7, #10]
 80038fa:	460b      	mov	r3, r1
 80038fc:	813b      	strh	r3, [r7, #8]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	b2da      	uxtb	r2, r3
 8003906:	8979      	ldrh	r1, [r7, #10]
 8003908:	4b20      	ldr	r3, [pc, #128]	@ (800398c <I2C_RequestMemoryRead+0xa4>)
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	2300      	movs	r3, #0
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 fa26 	bl	8003d60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003914:	69fa      	ldr	r2, [r7, #28]
 8003916:	69b9      	ldr	r1, [r7, #24]
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f8b6 	bl	8003a8a <I2C_WaitOnTXISFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e02c      	b.n	8003982 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003928:	88fb      	ldrh	r3, [r7, #6]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d105      	bne.n	800393a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800392e:	893b      	ldrh	r3, [r7, #8]
 8003930:	b2da      	uxtb	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	629a      	str	r2, [r3, #40]	@ 0x28
 8003938:	e015      	b.n	8003966 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800393a:	893b      	ldrh	r3, [r7, #8]
 800393c:	0a1b      	lsrs	r3, r3, #8
 800393e:	b29b      	uxth	r3, r3
 8003940:	b2da      	uxtb	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	69b9      	ldr	r1, [r7, #24]
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f89c 	bl	8003a8a <I2C_WaitOnTXISFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e012      	b.n	8003982 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800395c:	893b      	ldrh	r3, [r7, #8]
 800395e:	b2da      	uxtb	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2200      	movs	r2, #0
 800396e:	2140      	movs	r1, #64	@ 0x40
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f831 	bl	80039d8 <I2C_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	80002000 	.word	0x80002000

08003990 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d103      	bne.n	80039ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2200      	movs	r2, #0
 80039ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d007      	beq.n	80039cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	619a      	str	r2, [r3, #24]
  }
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	4613      	mov	r3, r2
 80039e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e8:	e03b      	b.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	6839      	ldr	r1, [r7, #0]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f8d6 	bl	8003ba0 <I2C_IsErrorOccurred>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e041      	b.n	8003a82 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a04:	d02d      	beq.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a06:	f7fe fefb 	bl	8002800 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d302      	bcc.n	8003a1c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d122      	bne.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4013      	ands	r3, r2
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2301      	moveq	r3, #1
 8003a2e:	2300      	movne	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d113      	bne.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3e:	f043 0220 	orr.w	r2, r3, #32
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e00f      	b.n	8003a82 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699a      	ldr	r2, [r3, #24]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	bf0c      	ite	eq
 8003a72:	2301      	moveq	r3, #1
 8003a74:	2300      	movne	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d0b4      	beq.n	80039ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	60f8      	str	r0, [r7, #12]
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a96:	e033      	b.n	8003b00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 f87f 	bl	8003ba0 <I2C_IsErrorOccurred>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e031      	b.n	8003b10 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab2:	d025      	beq.n	8003b00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab4:	f7fe fea4 	bl	8002800 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d302      	bcc.n	8003aca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d11a      	bne.n	8003b00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d013      	beq.n	8003b00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003adc:	f043 0220 	orr.w	r2, r3, #32
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e007      	b.n	8003b10 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d1c4      	bne.n	8003a98 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b24:	e02f      	b.n	8003b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 f838 	bl	8003ba0 <I2C_IsErrorOccurred>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e02d      	b.n	8003b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f7fe fe61 	bl	8002800 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d302      	bcc.n	8003b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d11a      	bne.n	8003b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	d013      	beq.n	8003b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b62:	f043 0220 	orr.w	r2, r3, #32
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e007      	b.n	8003b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d1c8      	bne.n	8003b26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08a      	sub	sp, #40	@ 0x28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d068      	beq.n	8003c9e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2210      	movs	r2, #16
 8003bd2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bd4:	e049      	b.n	8003c6a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d045      	beq.n	8003c6a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bde:	f7fe fe0f 	bl	8002800 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d302      	bcc.n	8003bf4 <I2C_IsErrorOccurred+0x54>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d13a      	bne.n	8003c6a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bfe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c16:	d121      	bne.n	8003c5c <I2C_IsErrorOccurred+0xbc>
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c1e:	d01d      	beq.n	8003c5c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c20:	7cfb      	ldrb	r3, [r7, #19]
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d01a      	beq.n	8003c5c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c34:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c36:	f7fe fde3 	bl	8002800 <HAL_GetTick>
 8003c3a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c3c:	e00e      	b.n	8003c5c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c3e:	f7fe fddf 	bl	8002800 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b19      	cmp	r3, #25
 8003c4a:	d907      	bls.n	8003c5c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	f043 0320 	orr.w	r3, r3, #32
 8003c52:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003c5a:	e006      	b.n	8003c6a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d1e9      	bne.n	8003c3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d003      	beq.n	8003c80 <I2C_IsErrorOccurred+0xe0>
 8003c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0aa      	beq.n	8003bd6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d103      	bne.n	8003c90 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	f043 0304 	orr.w	r3, r3, #4
 8003c96:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00b      	beq.n	8003cc8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	f043 0308 	orr.w	r3, r3, #8
 8003cd8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ce2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00b      	beq.n	8003d0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	f043 0302 	orr.w	r3, r3, #2
 8003cfa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d01c      	beq.n	8003d4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f7ff fe3b 	bl	8003990 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6859      	ldr	r1, [r3, #4]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	4b0d      	ldr	r3, [pc, #52]	@ (8003d5c <I2C_IsErrorOccurred+0x1bc>)
 8003d26:	400b      	ands	r3, r1
 8003d28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3728      	adds	r7, #40	@ 0x28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	fe00e800 	.word	0xfe00e800

08003d60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	607b      	str	r3, [r7, #4]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	817b      	strh	r3, [r7, #10]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d72:	897b      	ldrh	r3, [r7, #10]
 8003d74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d78:	7a7b      	ldrb	r3, [r7, #9]
 8003d7a:	041b      	lsls	r3, r3, #16
 8003d7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	0d5b      	lsrs	r3, r3, #21
 8003d9a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003d9e:	4b08      	ldr	r3, [pc, #32]	@ (8003dc0 <I2C_TransferConfig+0x60>)
 8003da0:	430b      	orrs	r3, r1
 8003da2:	43db      	mvns	r3, r3
 8003da4:	ea02 0103 	and.w	r1, r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003db2:	bf00      	nop
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	03ff63ff 	.word	0x03ff63ff

08003dc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d138      	bne.n	8003e4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e032      	b.n	8003e4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2224      	movs	r2, #36	@ 0x24
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0201 	bic.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6819      	ldr	r1, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e000      	b.n	8003e4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e4c:	2302      	movs	r3, #2
  }
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b085      	sub	sp, #20
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	d139      	bne.n	8003ee4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e033      	b.n	8003ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2224      	movs	r2, #36	@ 0x24
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0201 	bic.w	r2, r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003eac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	e000      	b.n	8003ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ee4:	2302      	movs	r3, #2
  }
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b086      	sub	sp, #24
 8003ef6:	af02      	add	r7, sp, #8
 8003ef8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e101      	b.n	8004108 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d106      	bne.n	8003f1e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7fd fef1 	bl	8001d00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2203      	movs	r2, #3
 8003f22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f002 fb97 	bl	8006664 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	7c1a      	ldrb	r2, [r3, #16]
 8003f3e:	f88d 2000 	strb.w	r2, [sp]
 8003f42:	3304      	adds	r3, #4
 8003f44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f46:	f002 fb60 	bl	800660a <USB_CoreInit>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0d5      	b.n	8004108 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2100      	movs	r1, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f002 fb8f 	bl	8006686 <USB_SetCurrentMode>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d005      	beq.n	8003f7a <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2202      	movs	r2, #2
 8003f72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e0c6      	b.n	8004108 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	73fb      	strb	r3, [r7, #15]
 8003f7e:	e04a      	b.n	8004016 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f80:	7bfa      	ldrb	r2, [r7, #15]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	3315      	adds	r3, #21
 8003f90:	2201      	movs	r2, #1
 8003f92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f94:	7bfa      	ldrb	r2, [r7, #15]
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	3314      	adds	r3, #20
 8003fa4:	7bfa      	ldrb	r2, [r7, #15]
 8003fa6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003fa8:	7bfa      	ldrb	r2, [r7, #15]
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	b298      	uxth	r0, r3
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	332e      	adds	r3, #46	@ 0x2e
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fc0:	7bfa      	ldrb	r2, [r7, #15]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	3318      	adds	r3, #24
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fd4:	7bfa      	ldrb	r2, [r7, #15]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	331c      	adds	r3, #28
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fe8:	7bfa      	ldrb	r2, [r7, #15]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	3320      	adds	r3, #32
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ffc:	7bfa      	ldrb	r2, [r7, #15]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	3324      	adds	r3, #36	@ 0x24
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	3301      	adds	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	791b      	ldrb	r3, [r3, #4]
 800401a:	7bfa      	ldrb	r2, [r7, #15]
 800401c:	429a      	cmp	r2, r3
 800401e:	d3af      	bcc.n	8003f80 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004020:	2300      	movs	r3, #0
 8004022:	73fb      	strb	r3, [r7, #15]
 8004024:	e044      	b.n	80040b0 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004026:	7bfa      	ldrb	r2, [r7, #15]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800403c:	7bfa      	ldrb	r2, [r7, #15]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	4413      	add	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800404e:	7bfa      	ldrb	r2, [r7, #15]
 8004050:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004052:	7bfa      	ldrb	r2, [r7, #15]
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004064:	2200      	movs	r2, #0
 8004066:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004068:	7bfa      	ldrb	r2, [r7, #15]
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	4613      	mov	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800407e:	7bfa      	ldrb	r2, [r7, #15]
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004094:	7bfa      	ldrb	r2, [r7, #15]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	3301      	adds	r3, #1
 80040ae:	73fb      	strb	r3, [r7, #15]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	791b      	ldrb	r3, [r3, #4]
 80040b4:	7bfa      	ldrb	r2, [r7, #15]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d3b5      	bcc.n	8004026 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	7c1a      	ldrb	r2, [r3, #16]
 80040c2:	f88d 2000 	strb.w	r2, [sp]
 80040c6:	3304      	adds	r3, #4
 80040c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040ca:	f002 fb29 	bl	8006720 <USB_DevInit>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e013      	b.n	8004108 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	7b1b      	ldrb	r3, [r3, #12]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d102      	bne.n	80040fc <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f80a 	bl	8004110 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f002 fcce 	bl	8006aa2 <USB_DevDisconnect>

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004142:	f043 0303 	orr.w	r3, r3, #3
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800415c:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a04      	ldr	r2, [pc, #16]	@ (8004174 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004162:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004166:	6013      	str	r3, [r2, #0]
}
 8004168:	bf00      	nop
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40007000 	.word	0x40007000

08004178 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800417c:	4b04      	ldr	r3, [pc, #16]	@ (8004190 <HAL_PWREx_GetVoltageRange+0x18>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004184:	4618      	mov	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40007000 	.word	0x40007000

08004194 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041a2:	d130      	bne.n	8004206 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041a4:	4b23      	ldr	r3, [pc, #140]	@ (8004234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041b0:	d038      	beq.n	8004224 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041b2:	4b20      	ldr	r3, [pc, #128]	@ (8004234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004238 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2232      	movs	r2, #50	@ 0x32
 80041c8:	fb02 f303 	mul.w	r3, r2, r3
 80041cc:	4a1b      	ldr	r2, [pc, #108]	@ (800423c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	0c9b      	lsrs	r3, r3, #18
 80041d4:	3301      	adds	r3, #1
 80041d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041d8:	e002      	b.n	80041e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3b01      	subs	r3, #1
 80041de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041e0:	4b14      	ldr	r3, [pc, #80]	@ (8004234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ec:	d102      	bne.n	80041f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f2      	bne.n	80041da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004200:	d110      	bne.n	8004224 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e00f      	b.n	8004226 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004206:	4b0b      	ldr	r3, [pc, #44]	@ (8004234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800420e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004212:	d007      	beq.n	8004224 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004214:	4b07      	ldr	r3, [pc, #28]	@ (8004234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800421c:	4a05      	ldr	r2, [pc, #20]	@ (8004234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800421e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004222:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40007000 	.word	0x40007000
 8004238:	20000014 	.word	0x20000014
 800423c:	431bde83 	.word	0x431bde83

08004240 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004244:	4b05      	ldr	r3, [pc, #20]	@ (800425c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4a04      	ldr	r2, [pc, #16]	@ (800425c <HAL_PWREx_EnableVddUSB+0x1c>)
 800424a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800424e:	6053      	str	r3, [r2, #4]
}
 8004250:	bf00      	nop
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40007000 	.word	0x40007000

08004260 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af02      	add	r7, sp, #8
 8004266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004268:	f7fe faca 	bl	8002800 <HAL_GetTick>
 800426c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e063      	b.n	8004340 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10b      	bne.n	800429c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7fd fc0b 	bl	8001aa8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004292:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f858 	bl	800434c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	021a      	lsls	r2, r3, #8
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	2120      	movs	r1, #32
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f850 	bl	8004368 <QSPI_WaitFlagStateUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80042cc:	7afb      	ldrb	r3, [r7, #11]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d131      	bne.n	8004336 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80042dc:	f023 0310 	bic.w	r3, r3, #16
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6852      	ldr	r2, [r2, #4]
 80042e4:	0611      	lsls	r1, r2, #24
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68d2      	ldr	r2, [r2, #12]
 80042ea:	4311      	orrs	r1, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6812      	ldr	r2, [r2, #0]
 80042f0:	430b      	orrs	r3, r1
 80042f2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	4b13      	ldr	r3, [pc, #76]	@ (8004348 <HAL_QSPI_Init+0xe8>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6912      	ldr	r2, [r2, #16]
 8004302:	0411      	lsls	r1, r2, #16
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6952      	ldr	r2, [r2, #20]
 8004308:	4311      	orrs	r1, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6992      	ldr	r2, [r2, #24]
 800430e:	4311      	orrs	r1, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	430b      	orrs	r3, r1
 8004316:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800433e:	7afb      	ldrb	r3, [r7, #11]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	ffe0f8fe 	.word	0xffe0f8fe

0800434c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	4613      	mov	r3, r2
 8004376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004378:	e01a      	b.n	80043b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d016      	beq.n	80043b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004382:	f7fe fa3d 	bl	8002800 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	429a      	cmp	r2, r3
 8004390:	d302      	bcc.n	8004398 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10b      	bne.n	80043b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2204      	movs	r2, #4
 800439c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a4:	f043 0201 	orr.w	r2, r3, #1
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e00e      	b.n	80043ce <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	bf14      	ite	ne
 80043be:	2301      	movne	r3, #1
 80043c0:	2300      	moveq	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d1d6      	bne.n	800437a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e3ca      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ea:	4b97      	ldr	r3, [pc, #604]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 030c 	and.w	r3, r3, #12
 80043f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043f4:	4b94      	ldr	r3, [pc, #592]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f003 0303 	and.w	r3, r3, #3
 80043fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 80e4 	beq.w	80045d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d007      	beq.n	8004422 <HAL_RCC_OscConfig+0x4a>
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	2b0c      	cmp	r3, #12
 8004416:	f040 808b 	bne.w	8004530 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b01      	cmp	r3, #1
 800441e:	f040 8087 	bne.w	8004530 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004422:	4b89      	ldr	r3, [pc, #548]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d005      	beq.n	800443a <HAL_RCC_OscConfig+0x62>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e3a2      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1a      	ldr	r2, [r3, #32]
 800443e:	4b82      	ldr	r3, [pc, #520]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d004      	beq.n	8004454 <HAL_RCC_OscConfig+0x7c>
 800444a:	4b7f      	ldr	r3, [pc, #508]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004452:	e005      	b.n	8004460 <HAL_RCC_OscConfig+0x88>
 8004454:	4b7c      	ldr	r3, [pc, #496]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 8004456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004460:	4293      	cmp	r3, r2
 8004462:	d223      	bcs.n	80044ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fd55 	bl	8004f18 <RCC_SetFlashLatencyFromMSIRange>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e383      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004478:	4b73      	ldr	r3, [pc, #460]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a72      	ldr	r2, [pc, #456]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 800447e:	f043 0308 	orr.w	r3, r3, #8
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	4b70      	ldr	r3, [pc, #448]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	496d      	ldr	r1, [pc, #436]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 8004492:	4313      	orrs	r3, r2
 8004494:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004496:	4b6c      	ldr	r3, [pc, #432]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	021b      	lsls	r3, r3, #8
 80044a4:	4968      	ldr	r1, [pc, #416]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	604b      	str	r3, [r1, #4]
 80044aa:	e025      	b.n	80044f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044ac:	4b66      	ldr	r3, [pc, #408]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a65      	ldr	r2, [pc, #404]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 80044b2:	f043 0308 	orr.w	r3, r3, #8
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	4b63      	ldr	r3, [pc, #396]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	4960      	ldr	r1, [pc, #384]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	495b      	ldr	r1, [pc, #364]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d109      	bne.n	80044f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 fd15 	bl	8004f18 <RCC_SetFlashLatencyFromMSIRange>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e343      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044f8:	f000 fc4a 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 80044fc:	4602      	mov	r2, r0
 80044fe:	4b52      	ldr	r3, [pc, #328]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	091b      	lsrs	r3, r3, #4
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	4950      	ldr	r1, [pc, #320]	@ (800464c <HAL_RCC_OscConfig+0x274>)
 800450a:	5ccb      	ldrb	r3, [r1, r3]
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
 8004514:	4a4e      	ldr	r2, [pc, #312]	@ (8004650 <HAL_RCC_OscConfig+0x278>)
 8004516:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004518:	4b4e      	ldr	r3, [pc, #312]	@ (8004654 <HAL_RCC_OscConfig+0x27c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4618      	mov	r0, r3
 800451e:	f7fe f91f 	bl	8002760 <HAL_InitTick>
 8004522:	4603      	mov	r3, r0
 8004524:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004526:	7bfb      	ldrb	r3, [r7, #15]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d052      	beq.n	80045d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	e327      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d032      	beq.n	800459e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004538:	4b43      	ldr	r3, [pc, #268]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a42      	ldr	r2, [pc, #264]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004544:	f7fe f95c 	bl	8002800 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800454c:	f7fe f958 	bl	8002800 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e310      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800455e:	4b3a      	ldr	r3, [pc, #232]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800456a:	4b37      	ldr	r3, [pc, #220]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a36      	ldr	r2, [pc, #216]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 8004570:	f043 0308 	orr.w	r3, r3, #8
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	4b34      	ldr	r3, [pc, #208]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	4931      	ldr	r1, [pc, #196]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 8004584:	4313      	orrs	r3, r2
 8004586:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004588:	4b2f      	ldr	r3, [pc, #188]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	492c      	ldr	r1, [pc, #176]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]
 800459c:	e01a      	b.n	80045d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800459e:	4b2a      	ldr	r3, [pc, #168]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a29      	ldr	r2, [pc, #164]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 80045a4:	f023 0301 	bic.w	r3, r3, #1
 80045a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045aa:	f7fe f929 	bl	8002800 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045b2:	f7fe f925 	bl	8002800 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e2dd      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045c4:	4b20      	ldr	r3, [pc, #128]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f0      	bne.n	80045b2 <HAL_RCC_OscConfig+0x1da>
 80045d0:	e000      	b.n	80045d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d074      	beq.n	80046ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d005      	beq.n	80045f2 <HAL_RCC_OscConfig+0x21a>
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	2b0c      	cmp	r3, #12
 80045ea:	d10e      	bne.n	800460a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d10b      	bne.n	800460a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f2:	4b15      	ldr	r3, [pc, #84]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d064      	beq.n	80046c8 <HAL_RCC_OscConfig+0x2f0>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d160      	bne.n	80046c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e2ba      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004612:	d106      	bne.n	8004622 <HAL_RCC_OscConfig+0x24a>
 8004614:	4b0c      	ldr	r3, [pc, #48]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a0b      	ldr	r2, [pc, #44]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 800461a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	e026      	b.n	8004670 <HAL_RCC_OscConfig+0x298>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800462a:	d115      	bne.n	8004658 <HAL_RCC_OscConfig+0x280>
 800462c:	4b06      	ldr	r3, [pc, #24]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a05      	ldr	r2, [pc, #20]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 8004632:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	4b03      	ldr	r3, [pc, #12]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a02      	ldr	r2, [pc, #8]	@ (8004648 <HAL_RCC_OscConfig+0x270>)
 800463e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	e014      	b.n	8004670 <HAL_RCC_OscConfig+0x298>
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000
 800464c:	0800b398 	.word	0x0800b398
 8004650:	20000014 	.word	0x20000014
 8004654:	2000004c 	.word	0x2000004c
 8004658:	4ba0      	ldr	r3, [pc, #640]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a9f      	ldr	r2, [pc, #636]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 800465e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004662:	6013      	str	r3, [r2, #0]
 8004664:	4b9d      	ldr	r3, [pc, #628]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a9c      	ldr	r2, [pc, #624]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 800466a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800466e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d013      	beq.n	80046a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7fe f8c2 	bl	8002800 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004680:	f7fe f8be 	bl	8002800 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	@ 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e276      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004692:	4b92      	ldr	r3, [pc, #584]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0x2a8>
 800469e:	e014      	b.n	80046ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a0:	f7fe f8ae 	bl	8002800 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046a8:	f7fe f8aa 	bl	8002800 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b64      	cmp	r3, #100	@ 0x64
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e262      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046ba:	4b88      	ldr	r3, [pc, #544]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0x2d0>
 80046c6:	e000      	b.n	80046ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d060      	beq.n	8004798 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d005      	beq.n	80046e8 <HAL_RCC_OscConfig+0x310>
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2b0c      	cmp	r3, #12
 80046e0:	d119      	bne.n	8004716 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d116      	bne.n	8004716 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046e8:	4b7c      	ldr	r3, [pc, #496]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <HAL_RCC_OscConfig+0x328>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e23f      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004700:	4b76      	ldr	r3, [pc, #472]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	061b      	lsls	r3, r3, #24
 800470e:	4973      	ldr	r1, [pc, #460]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 8004710:	4313      	orrs	r3, r2
 8004712:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004714:	e040      	b.n	8004798 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d023      	beq.n	8004766 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800471e:	4b6f      	ldr	r3, [pc, #444]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a6e      	ldr	r2, [pc, #440]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 8004724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472a:	f7fe f869 	bl	8002800 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004732:	f7fe f865 	bl	8002800 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e21d      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004744:	4b65      	ldr	r3, [pc, #404]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0f0      	beq.n	8004732 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004750:	4b62      	ldr	r3, [pc, #392]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	061b      	lsls	r3, r3, #24
 800475e:	495f      	ldr	r1, [pc, #380]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 8004760:	4313      	orrs	r3, r2
 8004762:	604b      	str	r3, [r1, #4]
 8004764:	e018      	b.n	8004798 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004766:	4b5d      	ldr	r3, [pc, #372]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a5c      	ldr	r2, [pc, #368]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 800476c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004772:	f7fe f845 	bl	8002800 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800477a:	f7fe f841 	bl	8002800 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e1f9      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800478c:	4b53      	ldr	r3, [pc, #332]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1f0      	bne.n	800477a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d03c      	beq.n	800481e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d01c      	beq.n	80047e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ac:	4b4b      	ldr	r3, [pc, #300]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 80047ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047b2:	4a4a      	ldr	r2, [pc, #296]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047bc:	f7fe f820 	bl	8002800 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047c4:	f7fe f81c 	bl	8002800 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e1d4      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047d6:	4b41      	ldr	r3, [pc, #260]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 80047d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0ef      	beq.n	80047c4 <HAL_RCC_OscConfig+0x3ec>
 80047e4:	e01b      	b.n	800481e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047e6:	4b3d      	ldr	r3, [pc, #244]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 80047e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047ec:	4a3b      	ldr	r2, [pc, #236]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 80047ee:	f023 0301 	bic.w	r3, r3, #1
 80047f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f6:	f7fe f803 	bl	8002800 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047fe:	f7fd ffff 	bl	8002800 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e1b7      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004810:	4b32      	ldr	r3, [pc, #200]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 8004812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1ef      	bne.n	80047fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 80a6 	beq.w	8004978 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800482c:	2300      	movs	r3, #0
 800482e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004830:	4b2a      	ldr	r3, [pc, #168]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 8004832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10d      	bne.n	8004858 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800483c:	4b27      	ldr	r3, [pc, #156]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 800483e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004840:	4a26      	ldr	r2, [pc, #152]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 8004842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004846:	6593      	str	r3, [r2, #88]	@ 0x58
 8004848:	4b24      	ldr	r3, [pc, #144]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 800484a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800484c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004850:	60bb      	str	r3, [r7, #8]
 8004852:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004854:	2301      	movs	r3, #1
 8004856:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004858:	4b21      	ldr	r3, [pc, #132]	@ (80048e0 <HAL_RCC_OscConfig+0x508>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004860:	2b00      	cmp	r3, #0
 8004862:	d118      	bne.n	8004896 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004864:	4b1e      	ldr	r3, [pc, #120]	@ (80048e0 <HAL_RCC_OscConfig+0x508>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <HAL_RCC_OscConfig+0x508>)
 800486a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800486e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004870:	f7fd ffc6 	bl	8002800 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004878:	f7fd ffc2 	bl	8002800 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e17a      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800488a:	4b15      	ldr	r3, [pc, #84]	@ (80048e0 <HAL_RCC_OscConfig+0x508>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d108      	bne.n	80048b0 <HAL_RCC_OscConfig+0x4d8>
 800489e:	4b0f      	ldr	r3, [pc, #60]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a4:	4a0d      	ldr	r2, [pc, #52]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 80048a6:	f043 0301 	orr.w	r3, r3, #1
 80048aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048ae:	e029      	b.n	8004904 <HAL_RCC_OscConfig+0x52c>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2b05      	cmp	r3, #5
 80048b6:	d115      	bne.n	80048e4 <HAL_RCC_OscConfig+0x50c>
 80048b8:	4b08      	ldr	r3, [pc, #32]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048be:	4a07      	ldr	r2, [pc, #28]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 80048c0:	f043 0304 	orr.w	r3, r3, #4
 80048c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048c8:	4b04      	ldr	r3, [pc, #16]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ce:	4a03      	ldr	r2, [pc, #12]	@ (80048dc <HAL_RCC_OscConfig+0x504>)
 80048d0:	f043 0301 	orr.w	r3, r3, #1
 80048d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048d8:	e014      	b.n	8004904 <HAL_RCC_OscConfig+0x52c>
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000
 80048e0:	40007000 	.word	0x40007000
 80048e4:	4b9c      	ldr	r3, [pc, #624]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ea:	4a9b      	ldr	r2, [pc, #620]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 80048ec:	f023 0301 	bic.w	r3, r3, #1
 80048f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048f4:	4b98      	ldr	r3, [pc, #608]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fa:	4a97      	ldr	r2, [pc, #604]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 80048fc:	f023 0304 	bic.w	r3, r3, #4
 8004900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d016      	beq.n	800493a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490c:	f7fd ff78 	bl	8002800 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004912:	e00a      	b.n	800492a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004914:	f7fd ff74 	bl	8002800 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004922:	4293      	cmp	r3, r2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e12a      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800492a:	4b8b      	ldr	r3, [pc, #556]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 800492c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0ed      	beq.n	8004914 <HAL_RCC_OscConfig+0x53c>
 8004938:	e015      	b.n	8004966 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493a:	f7fd ff61 	bl	8002800 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004940:	e00a      	b.n	8004958 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004942:	f7fd ff5d 	bl	8002800 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004950:	4293      	cmp	r3, r2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e113      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004958:	4b7f      	ldr	r3, [pc, #508]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1ed      	bne.n	8004942 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004966:	7ffb      	ldrb	r3, [r7, #31]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d105      	bne.n	8004978 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800496c:	4b7a      	ldr	r3, [pc, #488]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 800496e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004970:	4a79      	ldr	r2, [pc, #484]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004972:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004976:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80fe 	beq.w	8004b7e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004986:	2b02      	cmp	r3, #2
 8004988:	f040 80d0 	bne.w	8004b2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800498c:	4b72      	ldr	r3, [pc, #456]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f003 0203 	and.w	r2, r3, #3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499c:	429a      	cmp	r2, r3
 800499e:	d130      	bne.n	8004a02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049aa:	3b01      	subs	r3, #1
 80049ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d127      	bne.n	8004a02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049be:	429a      	cmp	r2, r3
 80049c0:	d11f      	bne.n	8004a02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049cc:	2a07      	cmp	r2, #7
 80049ce:	bf14      	ite	ne
 80049d0:	2201      	movne	r2, #1
 80049d2:	2200      	moveq	r2, #0
 80049d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d113      	bne.n	8004a02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e4:	085b      	lsrs	r3, r3, #1
 80049e6:	3b01      	subs	r3, #1
 80049e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d109      	bne.n	8004a02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f8:	085b      	lsrs	r3, r3, #1
 80049fa:	3b01      	subs	r3, #1
 80049fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d06e      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	2b0c      	cmp	r3, #12
 8004a06:	d069      	beq.n	8004adc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a08:	4b53      	ldr	r3, [pc, #332]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d105      	bne.n	8004a20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004a14:	4b50      	ldr	r3, [pc, #320]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e0ad      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a24:	4b4c      	ldr	r3, [pc, #304]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a4b      	ldr	r2, [pc, #300]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004a2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a30:	f7fd fee6 	bl	8002800 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a38:	f7fd fee2 	bl	8002800 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e09a      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a4a:	4b43      	ldr	r3, [pc, #268]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f0      	bne.n	8004a38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a56:	4b40      	ldr	r3, [pc, #256]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	4b40      	ldr	r3, [pc, #256]	@ (8004b5c <HAL_RCC_OscConfig+0x784>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a66:	3a01      	subs	r2, #1
 8004a68:	0112      	lsls	r2, r2, #4
 8004a6a:	4311      	orrs	r1, r2
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a70:	0212      	lsls	r2, r2, #8
 8004a72:	4311      	orrs	r1, r2
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a78:	0852      	lsrs	r2, r2, #1
 8004a7a:	3a01      	subs	r2, #1
 8004a7c:	0552      	lsls	r2, r2, #21
 8004a7e:	4311      	orrs	r1, r2
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a84:	0852      	lsrs	r2, r2, #1
 8004a86:	3a01      	subs	r2, #1
 8004a88:	0652      	lsls	r2, r2, #25
 8004a8a:	4311      	orrs	r1, r2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a90:	0912      	lsrs	r2, r2, #4
 8004a92:	0452      	lsls	r2, r2, #17
 8004a94:	430a      	orrs	r2, r1
 8004a96:	4930      	ldr	r1, [pc, #192]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a2d      	ldr	r2, [pc, #180]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004aa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004aa6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	4a2a      	ldr	r2, [pc, #168]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004aae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ab2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ab4:	f7fd fea4 	bl	8002800 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004abc:	f7fd fea0 	bl	8002800 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e058      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ace:	4b22      	ldr	r3, [pc, #136]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ada:	e050      	b.n	8004b7e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e04f      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d148      	bne.n	8004b7e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004aec:	4b1a      	ldr	r3, [pc, #104]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a19      	ldr	r2, [pc, #100]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004af2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004af6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004af8:	4b17      	ldr	r3, [pc, #92]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	4a16      	ldr	r2, [pc, #88]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004afe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b04:	f7fd fe7c 	bl	8002800 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b0c:	f7fd fe78 	bl	8002800 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e030      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f0      	beq.n	8004b0c <HAL_RCC_OscConfig+0x734>
 8004b2a:	e028      	b.n	8004b7e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	2b0c      	cmp	r3, #12
 8004b30:	d023      	beq.n	8004b7a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b32:	4b09      	ldr	r3, [pc, #36]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a08      	ldr	r2, [pc, #32]	@ (8004b58 <HAL_RCC_OscConfig+0x780>)
 8004b38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fd fe5f 	bl	8002800 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b44:	e00c      	b.n	8004b60 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b46:	f7fd fe5b 	bl	8002800 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d905      	bls.n	8004b60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e013      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b60:	4b09      	ldr	r3, [pc, #36]	@ (8004b88 <HAL_RCC_OscConfig+0x7b0>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1ec      	bne.n	8004b46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b6c:	4b06      	ldr	r3, [pc, #24]	@ (8004b88 <HAL_RCC_OscConfig+0x7b0>)
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	4905      	ldr	r1, [pc, #20]	@ (8004b88 <HAL_RCC_OscConfig+0x7b0>)
 8004b72:	4b06      	ldr	r3, [pc, #24]	@ (8004b8c <HAL_RCC_OscConfig+0x7b4>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	60cb      	str	r3, [r1, #12]
 8004b78:	e001      	b.n	8004b7e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3720      	adds	r7, #32
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	feeefffc 	.word	0xfeeefffc

08004b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0e7      	b.n	8004d74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba4:	4b75      	ldr	r3, [pc, #468]	@ (8004d7c <HAL_RCC_ClockConfig+0x1ec>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d910      	bls.n	8004bd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb2:	4b72      	ldr	r3, [pc, #456]	@ (8004d7c <HAL_RCC_ClockConfig+0x1ec>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f023 0207 	bic.w	r2, r3, #7
 8004bba:	4970      	ldr	r1, [pc, #448]	@ (8004d7c <HAL_RCC_ClockConfig+0x1ec>)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc2:	4b6e      	ldr	r3, [pc, #440]	@ (8004d7c <HAL_RCC_ClockConfig+0x1ec>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d001      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e0cf      	b.n	8004d74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d010      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	4b66      	ldr	r3, [pc, #408]	@ (8004d80 <HAL_RCC_ClockConfig+0x1f0>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d908      	bls.n	8004c02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf0:	4b63      	ldr	r3, [pc, #396]	@ (8004d80 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	4960      	ldr	r1, [pc, #384]	@ (8004d80 <HAL_RCC_ClockConfig+0x1f0>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d04c      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	d107      	bne.n	8004c26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c16:	4b5a      	ldr	r3, [pc, #360]	@ (8004d80 <HAL_RCC_ClockConfig+0x1f0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d121      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e0a6      	b.n	8004d74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d107      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c2e:	4b54      	ldr	r3, [pc, #336]	@ (8004d80 <HAL_RCC_ClockConfig+0x1f0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d115      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e09a      	b.n	8004d74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d107      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c46:	4b4e      	ldr	r3, [pc, #312]	@ (8004d80 <HAL_RCC_ClockConfig+0x1f0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d109      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e08e      	b.n	8004d74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c56:	4b4a      	ldr	r3, [pc, #296]	@ (8004d80 <HAL_RCC_ClockConfig+0x1f0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e086      	b.n	8004d74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c66:	4b46      	ldr	r3, [pc, #280]	@ (8004d80 <HAL_RCC_ClockConfig+0x1f0>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f023 0203 	bic.w	r2, r3, #3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	4943      	ldr	r1, [pc, #268]	@ (8004d80 <HAL_RCC_ClockConfig+0x1f0>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c78:	f7fd fdc2 	bl	8002800 <HAL_GetTick>
 8004c7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7e:	e00a      	b.n	8004c96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c80:	f7fd fdbe 	bl	8002800 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e06e      	b.n	8004d74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c96:	4b3a      	ldr	r3, [pc, #232]	@ (8004d80 <HAL_RCC_ClockConfig+0x1f0>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 020c 	and.w	r2, r3, #12
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d1eb      	bne.n	8004c80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d010      	beq.n	8004cd6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	4b31      	ldr	r3, [pc, #196]	@ (8004d80 <HAL_RCC_ClockConfig+0x1f0>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d208      	bcs.n	8004cd6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8004d80 <HAL_RCC_ClockConfig+0x1f0>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	492b      	ldr	r1, [pc, #172]	@ (8004d80 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cd6:	4b29      	ldr	r3, [pc, #164]	@ (8004d7c <HAL_RCC_ClockConfig+0x1ec>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d210      	bcs.n	8004d06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce4:	4b25      	ldr	r3, [pc, #148]	@ (8004d7c <HAL_RCC_ClockConfig+0x1ec>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f023 0207 	bic.w	r2, r3, #7
 8004cec:	4923      	ldr	r1, [pc, #140]	@ (8004d7c <HAL_RCC_ClockConfig+0x1ec>)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf4:	4b21      	ldr	r3, [pc, #132]	@ (8004d7c <HAL_RCC_ClockConfig+0x1ec>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d001      	beq.n	8004d06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e036      	b.n	8004d74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d008      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d12:	4b1b      	ldr	r3, [pc, #108]	@ (8004d80 <HAL_RCC_ClockConfig+0x1f0>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	4918      	ldr	r1, [pc, #96]	@ (8004d80 <HAL_RCC_ClockConfig+0x1f0>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d009      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d30:	4b13      	ldr	r3, [pc, #76]	@ (8004d80 <HAL_RCC_ClockConfig+0x1f0>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	4910      	ldr	r1, [pc, #64]	@ (8004d80 <HAL_RCC_ClockConfig+0x1f0>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d44:	f000 f824 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d80 <HAL_RCC_ClockConfig+0x1f0>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	091b      	lsrs	r3, r3, #4
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	490b      	ldr	r1, [pc, #44]	@ (8004d84 <HAL_RCC_ClockConfig+0x1f4>)
 8004d56:	5ccb      	ldrb	r3, [r1, r3]
 8004d58:	f003 031f 	and.w	r3, r3, #31
 8004d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d60:	4a09      	ldr	r2, [pc, #36]	@ (8004d88 <HAL_RCC_ClockConfig+0x1f8>)
 8004d62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d64:	4b09      	ldr	r3, [pc, #36]	@ (8004d8c <HAL_RCC_ClockConfig+0x1fc>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fd fcf9 	bl	8002760 <HAL_InitTick>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d72:	7afb      	ldrb	r3, [r7, #11]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40022000 	.word	0x40022000
 8004d80:	40021000 	.word	0x40021000
 8004d84:	0800b398 	.word	0x0800b398
 8004d88:	20000014 	.word	0x20000014
 8004d8c:	2000004c 	.word	0x2000004c

08004d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b089      	sub	sp, #36	@ 0x24
 8004d94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	61fb      	str	r3, [r7, #28]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d9e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004da8:	4b3b      	ldr	r3, [pc, #236]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	2b0c      	cmp	r3, #12
 8004dbc:	d121      	bne.n	8004e02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d11e      	bne.n	8004e02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dc4:	4b34      	ldr	r3, [pc, #208]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d107      	bne.n	8004de0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004dd0:	4b31      	ldr	r3, [pc, #196]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dd6:	0a1b      	lsrs	r3, r3, #8
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	61fb      	str	r3, [r7, #28]
 8004dde:	e005      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004de0:	4b2d      	ldr	r3, [pc, #180]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	091b      	lsrs	r3, r3, #4
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004dec:	4a2b      	ldr	r2, [pc, #172]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10d      	bne.n	8004e18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e00:	e00a      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d102      	bne.n	8004e0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e08:	4b25      	ldr	r3, [pc, #148]	@ (8004ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e0a:	61bb      	str	r3, [r7, #24]
 8004e0c:	e004      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d101      	bne.n	8004e18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e14:	4b23      	ldr	r3, [pc, #140]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	2b0c      	cmp	r3, #12
 8004e1c:	d134      	bne.n	8004e88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d003      	beq.n	8004e36 <HAL_RCC_GetSysClockFreq+0xa6>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d003      	beq.n	8004e3c <HAL_RCC_GetSysClockFreq+0xac>
 8004e34:	e005      	b.n	8004e42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e36:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e38:	617b      	str	r3, [r7, #20]
      break;
 8004e3a:	e005      	b.n	8004e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e3c:	4b19      	ldr	r3, [pc, #100]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e3e:	617b      	str	r3, [r7, #20]
      break;
 8004e40:	e002      	b.n	8004e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	617b      	str	r3, [r7, #20]
      break;
 8004e46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e48:	4b13      	ldr	r3, [pc, #76]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	091b      	lsrs	r3, r3, #4
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	3301      	adds	r3, #1
 8004e54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e56:	4b10      	ldr	r3, [pc, #64]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	0a1b      	lsrs	r3, r3, #8
 8004e5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	fb03 f202 	mul.w	r2, r3, r2
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	0e5b      	lsrs	r3, r3, #25
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	3301      	adds	r3, #1
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e88:	69bb      	ldr	r3, [r7, #24]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3724      	adds	r7, #36	@ 0x24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	0800b3b0 	.word	0x0800b3b0
 8004ea0:	00f42400 	.word	0x00f42400
 8004ea4:	007a1200 	.word	0x007a1200

08004ea8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eac:	4b03      	ldr	r3, [pc, #12]	@ (8004ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8004eae:	681b      	ldr	r3, [r3, #0]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	20000014 	.word	0x20000014

08004ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ec4:	f7ff fff0 	bl	8004ea8 <HAL_RCC_GetHCLKFreq>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	4b06      	ldr	r3, [pc, #24]	@ (8004ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	0a1b      	lsrs	r3, r3, #8
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	4904      	ldr	r1, [pc, #16]	@ (8004ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ed6:	5ccb      	ldrb	r3, [r1, r3]
 8004ed8:	f003 031f 	and.w	r3, r3, #31
 8004edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	0800b3a8 	.word	0x0800b3a8

08004eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ef0:	f7ff ffda 	bl	8004ea8 <HAL_RCC_GetHCLKFreq>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	4b06      	ldr	r3, [pc, #24]	@ (8004f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	0adb      	lsrs	r3, r3, #11
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	4904      	ldr	r1, [pc, #16]	@ (8004f14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f02:	5ccb      	ldrb	r3, [r1, r3]
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40021000 	.word	0x40021000
 8004f14:	0800b3a8 	.word	0x0800b3a8

08004f18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f20:	2300      	movs	r3, #0
 8004f22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f24:	4b2a      	ldr	r3, [pc, #168]	@ (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f30:	f7ff f922 	bl	8004178 <HAL_PWREx_GetVoltageRange>
 8004f34:	6178      	str	r0, [r7, #20]
 8004f36:	e014      	b.n	8004f62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f38:	4b25      	ldr	r3, [pc, #148]	@ (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f3c:	4a24      	ldr	r2, [pc, #144]	@ (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f42:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f44:	4b22      	ldr	r3, [pc, #136]	@ (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f50:	f7ff f912 	bl	8004178 <HAL_PWREx_GetVoltageRange>
 8004f54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f56:	4b1e      	ldr	r3, [pc, #120]	@ (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f60:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f68:	d10b      	bne.n	8004f82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b80      	cmp	r3, #128	@ 0x80
 8004f6e:	d919      	bls.n	8004fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2ba0      	cmp	r3, #160	@ 0xa0
 8004f74:	d902      	bls.n	8004f7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f76:	2302      	movs	r3, #2
 8004f78:	613b      	str	r3, [r7, #16]
 8004f7a:	e013      	b.n	8004fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	613b      	str	r3, [r7, #16]
 8004f80:	e010      	b.n	8004fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b80      	cmp	r3, #128	@ 0x80
 8004f86:	d902      	bls.n	8004f8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f88:	2303      	movs	r3, #3
 8004f8a:	613b      	str	r3, [r7, #16]
 8004f8c:	e00a      	b.n	8004fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b80      	cmp	r3, #128	@ 0x80
 8004f92:	d102      	bne.n	8004f9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f94:	2302      	movs	r3, #2
 8004f96:	613b      	str	r3, [r7, #16]
 8004f98:	e004      	b.n	8004fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b70      	cmp	r3, #112	@ 0x70
 8004f9e:	d101      	bne.n	8004fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f023 0207 	bic.w	r2, r3, #7
 8004fac:	4909      	ldr	r1, [pc, #36]	@ (8004fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004fb4:	4b07      	ldr	r3, [pc, #28]	@ (8004fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d001      	beq.n	8004fc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	40022000 	.word	0x40022000

08004fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d041      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ff8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ffc:	d02a      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004ffe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005002:	d824      	bhi.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005004:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005008:	d008      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800500a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800500e:	d81e      	bhi.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005014:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005018:	d010      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800501a:	e018      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800501c:	4b86      	ldr	r3, [pc, #536]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4a85      	ldr	r2, [pc, #532]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005026:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005028:	e015      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3304      	adds	r3, #4
 800502e:	2100      	movs	r1, #0
 8005030:	4618      	mov	r0, r3
 8005032:	f000 facb 	bl	80055cc <RCCEx_PLLSAI1_Config>
 8005036:	4603      	mov	r3, r0
 8005038:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800503a:	e00c      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3320      	adds	r3, #32
 8005040:	2100      	movs	r1, #0
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fbb6 	bl	80057b4 <RCCEx_PLLSAI2_Config>
 8005048:	4603      	mov	r3, r0
 800504a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800504c:	e003      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	74fb      	strb	r3, [r7, #19]
      break;
 8005052:	e000      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005056:	7cfb      	ldrb	r3, [r7, #19]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10b      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800505c:	4b76      	ldr	r3, [pc, #472]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800505e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005062:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800506a:	4973      	ldr	r1, [pc, #460]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005072:	e001      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005074:	7cfb      	ldrb	r3, [r7, #19]
 8005076:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d041      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005088:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800508c:	d02a      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800508e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005092:	d824      	bhi.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005094:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005098:	d008      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800509a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800509e:	d81e      	bhi.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80050a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050a8:	d010      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80050aa:	e018      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050ac:	4b62      	ldr	r3, [pc, #392]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	4a61      	ldr	r2, [pc, #388]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050b8:	e015      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3304      	adds	r3, #4
 80050be:	2100      	movs	r1, #0
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 fa83 	bl	80055cc <RCCEx_PLLSAI1_Config>
 80050c6:	4603      	mov	r3, r0
 80050c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050ca:	e00c      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3320      	adds	r3, #32
 80050d0:	2100      	movs	r1, #0
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fb6e 	bl	80057b4 <RCCEx_PLLSAI2_Config>
 80050d8:	4603      	mov	r3, r0
 80050da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050dc:	e003      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	74fb      	strb	r3, [r7, #19]
      break;
 80050e2:	e000      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80050e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050e6:	7cfb      	ldrb	r3, [r7, #19]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10b      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050ec:	4b52      	ldr	r3, [pc, #328]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050fa:	494f      	ldr	r1, [pc, #316]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005102:	e001      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005104:	7cfb      	ldrb	r3, [r7, #19]
 8005106:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80a0 	beq.w	8005256 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005116:	2300      	movs	r3, #0
 8005118:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800511a:	4b47      	ldr	r3, [pc, #284]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800511e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005126:	2301      	movs	r3, #1
 8005128:	e000      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800512a:	2300      	movs	r3, #0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00d      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005130:	4b41      	ldr	r3, [pc, #260]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005134:	4a40      	ldr	r2, [pc, #256]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800513a:	6593      	str	r3, [r2, #88]	@ 0x58
 800513c:	4b3e      	ldr	r3, [pc, #248]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800513e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005148:	2301      	movs	r3, #1
 800514a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800514c:	4b3b      	ldr	r3, [pc, #236]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a3a      	ldr	r2, [pc, #232]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005158:	f7fd fb52 	bl	8002800 <HAL_GetTick>
 800515c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800515e:	e009      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005160:	f7fd fb4e 	bl	8002800 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d902      	bls.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	74fb      	strb	r3, [r7, #19]
        break;
 8005172:	e005      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005174:	4b31      	ldr	r3, [pc, #196]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0ef      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005180:	7cfb      	ldrb	r3, [r7, #19]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d15c      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005186:	4b2c      	ldr	r3, [pc, #176]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005190:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d01f      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d019      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051a4:	4b24      	ldr	r3, [pc, #144]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051b0:	4b21      	ldr	r3, [pc, #132]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051b6:	4a20      	ldr	r2, [pc, #128]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051d0:	4a19      	ldr	r2, [pc, #100]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d016      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e2:	f7fd fb0d 	bl	8002800 <HAL_GetTick>
 80051e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051e8:	e00b      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ea:	f7fd fb09 	bl	8002800 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d902      	bls.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	74fb      	strb	r3, [r7, #19]
            break;
 8005200:	e006      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005202:	4b0d      	ldr	r3, [pc, #52]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0ec      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005210:	7cfb      	ldrb	r3, [r7, #19]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10c      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005216:	4b08      	ldr	r3, [pc, #32]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800521c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005226:	4904      	ldr	r1, [pc, #16]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800522e:	e009      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005230:	7cfb      	ldrb	r3, [r7, #19]
 8005232:	74bb      	strb	r3, [r7, #18]
 8005234:	e006      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005236:	bf00      	nop
 8005238:	40021000 	.word	0x40021000
 800523c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005240:	7cfb      	ldrb	r3, [r7, #19]
 8005242:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005244:	7c7b      	ldrb	r3, [r7, #17]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d105      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800524a:	4b9e      	ldr	r3, [pc, #632]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800524c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800524e:	4a9d      	ldr	r2, [pc, #628]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005254:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005262:	4b98      	ldr	r3, [pc, #608]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005268:	f023 0203 	bic.w	r2, r3, #3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005270:	4994      	ldr	r1, [pc, #592]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005284:	4b8f      	ldr	r3, [pc, #572]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528a:	f023 020c 	bic.w	r2, r3, #12
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005292:	498c      	ldr	r1, [pc, #560]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005294:	4313      	orrs	r3, r2
 8005296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052a6:	4b87      	ldr	r3, [pc, #540]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b4:	4983      	ldr	r1, [pc, #524]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052c8:	4b7e      	ldr	r3, [pc, #504]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d6:	497b      	ldr	r1, [pc, #492]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052ea:	4b76      	ldr	r3, [pc, #472]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052f8:	4972      	ldr	r1, [pc, #456]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00a      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800530c:	4b6d      	ldr	r3, [pc, #436]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005312:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800531a:	496a      	ldr	r1, [pc, #424]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800532e:	4b65      	ldr	r3, [pc, #404]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005334:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800533c:	4961      	ldr	r1, [pc, #388]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005350:	4b5c      	ldr	r3, [pc, #368]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005356:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800535e:	4959      	ldr	r1, [pc, #356]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005372:	4b54      	ldr	r3, [pc, #336]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005378:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005380:	4950      	ldr	r1, [pc, #320]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005394:	4b4b      	ldr	r3, [pc, #300]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a2:	4948      	ldr	r1, [pc, #288]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053b6:	4b43      	ldr	r3, [pc, #268]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c4:	493f      	ldr	r1, [pc, #252]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d028      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053d8:	4b3a      	ldr	r3, [pc, #232]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e6:	4937      	ldr	r1, [pc, #220]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053f6:	d106      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053f8:	4b32      	ldr	r3, [pc, #200]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	4a31      	ldr	r2, [pc, #196]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005402:	60d3      	str	r3, [r2, #12]
 8005404:	e011      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800540a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800540e:	d10c      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3304      	adds	r3, #4
 8005414:	2101      	movs	r1, #1
 8005416:	4618      	mov	r0, r3
 8005418:	f000 f8d8 	bl	80055cc <RCCEx_PLLSAI1_Config>
 800541c:	4603      	mov	r3, r0
 800541e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005420:	7cfb      	ldrb	r3, [r7, #19]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005426:	7cfb      	ldrb	r3, [r7, #19]
 8005428:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d028      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005436:	4b23      	ldr	r3, [pc, #140]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800543c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005444:	491f      	ldr	r1, [pc, #124]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005450:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005454:	d106      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005456:	4b1b      	ldr	r3, [pc, #108]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	4a1a      	ldr	r2, [pc, #104]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005460:	60d3      	str	r3, [r2, #12]
 8005462:	e011      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005468:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800546c:	d10c      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3304      	adds	r3, #4
 8005472:	2101      	movs	r1, #1
 8005474:	4618      	mov	r0, r3
 8005476:	f000 f8a9 	bl	80055cc <RCCEx_PLLSAI1_Config>
 800547a:	4603      	mov	r3, r0
 800547c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800547e:	7cfb      	ldrb	r3, [r7, #19]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005484:	7cfb      	ldrb	r3, [r7, #19]
 8005486:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d02b      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005494:	4b0b      	ldr	r3, [pc, #44]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054a2:	4908      	ldr	r1, [pc, #32]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054b2:	d109      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054b4:	4b03      	ldr	r3, [pc, #12]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4a02      	ldr	r2, [pc, #8]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054be:	60d3      	str	r3, [r2, #12]
 80054c0:	e014      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80054c2:	bf00      	nop
 80054c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054d0:	d10c      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3304      	adds	r3, #4
 80054d6:	2101      	movs	r1, #1
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 f877 	bl	80055cc <RCCEx_PLLSAI1_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054e2:	7cfb      	ldrb	r3, [r7, #19]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80054e8:	7cfb      	ldrb	r3, [r7, #19]
 80054ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d02f      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054f8:	4b2b      	ldr	r3, [pc, #172]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005506:	4928      	ldr	r1, [pc, #160]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005512:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005516:	d10d      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3304      	adds	r3, #4
 800551c:	2102      	movs	r1, #2
 800551e:	4618      	mov	r0, r3
 8005520:	f000 f854 	bl	80055cc <RCCEx_PLLSAI1_Config>
 8005524:	4603      	mov	r3, r0
 8005526:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005528:	7cfb      	ldrb	r3, [r7, #19]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d014      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800552e:	7cfb      	ldrb	r3, [r7, #19]
 8005530:	74bb      	strb	r3, [r7, #18]
 8005532:	e011      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005538:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800553c:	d10c      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3320      	adds	r3, #32
 8005542:	2102      	movs	r1, #2
 8005544:	4618      	mov	r0, r3
 8005546:	f000 f935 	bl	80057b4 <RCCEx_PLLSAI2_Config>
 800554a:	4603      	mov	r3, r0
 800554c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800554e:	7cfb      	ldrb	r3, [r7, #19]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005554:	7cfb      	ldrb	r3, [r7, #19]
 8005556:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005564:	4b10      	ldr	r3, [pc, #64]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005572:	490d      	ldr	r1, [pc, #52]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00b      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005586:	4b08      	ldr	r3, [pc, #32]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005596:	4904      	ldr	r1, [pc, #16]	@ (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005598:	4313      	orrs	r3, r2
 800559a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800559e:	7cbb      	ldrb	r3, [r7, #18]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	40021000 	.word	0x40021000

080055ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80055b0:	4b05      	ldr	r3, [pc, #20]	@ (80055c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a04      	ldr	r2, [pc, #16]	@ (80055c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80055b6:	f043 0304 	orr.w	r3, r3, #4
 80055ba:	6013      	str	r3, [r2, #0]
}
 80055bc:	bf00      	nop
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40021000 	.word	0x40021000

080055cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055da:	4b75      	ldr	r3, [pc, #468]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d018      	beq.n	8005618 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055e6:	4b72      	ldr	r3, [pc, #456]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f003 0203 	and.w	r2, r3, #3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d10d      	bne.n	8005612 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
       ||
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d009      	beq.n	8005612 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80055fe:	4b6c      	ldr	r3, [pc, #432]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	091b      	lsrs	r3, r3, #4
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
       ||
 800560e:	429a      	cmp	r2, r3
 8005610:	d047      	beq.n	80056a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	73fb      	strb	r3, [r7, #15]
 8005616:	e044      	b.n	80056a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b03      	cmp	r3, #3
 800561e:	d018      	beq.n	8005652 <RCCEx_PLLSAI1_Config+0x86>
 8005620:	2b03      	cmp	r3, #3
 8005622:	d825      	bhi.n	8005670 <RCCEx_PLLSAI1_Config+0xa4>
 8005624:	2b01      	cmp	r3, #1
 8005626:	d002      	beq.n	800562e <RCCEx_PLLSAI1_Config+0x62>
 8005628:	2b02      	cmp	r3, #2
 800562a:	d009      	beq.n	8005640 <RCCEx_PLLSAI1_Config+0x74>
 800562c:	e020      	b.n	8005670 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800562e:	4b60      	ldr	r3, [pc, #384]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d11d      	bne.n	8005676 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800563e:	e01a      	b.n	8005676 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005640:	4b5b      	ldr	r3, [pc, #364]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005648:	2b00      	cmp	r3, #0
 800564a:	d116      	bne.n	800567a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005650:	e013      	b.n	800567a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005652:	4b57      	ldr	r3, [pc, #348]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10f      	bne.n	800567e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800565e:	4b54      	ldr	r3, [pc, #336]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d109      	bne.n	800567e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800566e:	e006      	b.n	800567e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	73fb      	strb	r3, [r7, #15]
      break;
 8005674:	e004      	b.n	8005680 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005676:	bf00      	nop
 8005678:	e002      	b.n	8005680 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800567a:	bf00      	nop
 800567c:	e000      	b.n	8005680 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800567e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10d      	bne.n	80056a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005686:	4b4a      	ldr	r3, [pc, #296]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6819      	ldr	r1, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	3b01      	subs	r3, #1
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	430b      	orrs	r3, r1
 800569c:	4944      	ldr	r1, [pc, #272]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d17d      	bne.n	80057a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80056a8:	4b41      	ldr	r3, [pc, #260]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a40      	ldr	r2, [pc, #256]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b4:	f7fd f8a4 	bl	8002800 <HAL_GetTick>
 80056b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056ba:	e009      	b.n	80056d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056bc:	f7fd f8a0 	bl	8002800 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d902      	bls.n	80056d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	73fb      	strb	r3, [r7, #15]
        break;
 80056ce:	e005      	b.n	80056dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056d0:	4b37      	ldr	r3, [pc, #220]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1ef      	bne.n	80056bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d160      	bne.n	80057a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d111      	bne.n	800570c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056e8:	4b31      	ldr	r3, [pc, #196]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80056f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6892      	ldr	r2, [r2, #8]
 80056f8:	0211      	lsls	r1, r2, #8
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	68d2      	ldr	r2, [r2, #12]
 80056fe:	0912      	lsrs	r2, r2, #4
 8005700:	0452      	lsls	r2, r2, #17
 8005702:	430a      	orrs	r2, r1
 8005704:	492a      	ldr	r1, [pc, #168]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005706:	4313      	orrs	r3, r2
 8005708:	610b      	str	r3, [r1, #16]
 800570a:	e027      	b.n	800575c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d112      	bne.n	8005738 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005712:	4b27      	ldr	r3, [pc, #156]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800571a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6892      	ldr	r2, [r2, #8]
 8005722:	0211      	lsls	r1, r2, #8
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6912      	ldr	r2, [r2, #16]
 8005728:	0852      	lsrs	r2, r2, #1
 800572a:	3a01      	subs	r2, #1
 800572c:	0552      	lsls	r2, r2, #21
 800572e:	430a      	orrs	r2, r1
 8005730:	491f      	ldr	r1, [pc, #124]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005732:	4313      	orrs	r3, r2
 8005734:	610b      	str	r3, [r1, #16]
 8005736:	e011      	b.n	800575c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005738:	4b1d      	ldr	r3, [pc, #116]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005740:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6892      	ldr	r2, [r2, #8]
 8005748:	0211      	lsls	r1, r2, #8
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6952      	ldr	r2, [r2, #20]
 800574e:	0852      	lsrs	r2, r2, #1
 8005750:	3a01      	subs	r2, #1
 8005752:	0652      	lsls	r2, r2, #25
 8005754:	430a      	orrs	r2, r1
 8005756:	4916      	ldr	r1, [pc, #88]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005758:	4313      	orrs	r3, r2
 800575a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800575c:	4b14      	ldr	r3, [pc, #80]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a13      	ldr	r2, [pc, #76]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005762:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005766:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005768:	f7fd f84a 	bl	8002800 <HAL_GetTick>
 800576c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800576e:	e009      	b.n	8005784 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005770:	f7fd f846 	bl	8002800 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d902      	bls.n	8005784 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	73fb      	strb	r3, [r7, #15]
          break;
 8005782:	e005      	b.n	8005790 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005784:	4b0a      	ldr	r3, [pc, #40]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0ef      	beq.n	8005770 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005790:	7bfb      	ldrb	r3, [r7, #15]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005796:	4b06      	ldr	r3, [pc, #24]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005798:	691a      	ldr	r2, [r3, #16]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	4904      	ldr	r1, [pc, #16]	@ (80057b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	40021000 	.word	0x40021000

080057b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057c2:	4b6a      	ldr	r3, [pc, #424]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d018      	beq.n	8005800 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80057ce:	4b67      	ldr	r3, [pc, #412]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f003 0203 	and.w	r2, r3, #3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d10d      	bne.n	80057fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
       ||
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d009      	beq.n	80057fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80057e6:	4b61      	ldr	r3, [pc, #388]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	091b      	lsrs	r3, r3, #4
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
       ||
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d047      	beq.n	800588a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	73fb      	strb	r3, [r7, #15]
 80057fe:	e044      	b.n	800588a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b03      	cmp	r3, #3
 8005806:	d018      	beq.n	800583a <RCCEx_PLLSAI2_Config+0x86>
 8005808:	2b03      	cmp	r3, #3
 800580a:	d825      	bhi.n	8005858 <RCCEx_PLLSAI2_Config+0xa4>
 800580c:	2b01      	cmp	r3, #1
 800580e:	d002      	beq.n	8005816 <RCCEx_PLLSAI2_Config+0x62>
 8005810:	2b02      	cmp	r3, #2
 8005812:	d009      	beq.n	8005828 <RCCEx_PLLSAI2_Config+0x74>
 8005814:	e020      	b.n	8005858 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005816:	4b55      	ldr	r3, [pc, #340]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d11d      	bne.n	800585e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005826:	e01a      	b.n	800585e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005828:	4b50      	ldr	r3, [pc, #320]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005830:	2b00      	cmp	r3, #0
 8005832:	d116      	bne.n	8005862 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005838:	e013      	b.n	8005862 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800583a:	4b4c      	ldr	r3, [pc, #304]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10f      	bne.n	8005866 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005846:	4b49      	ldr	r3, [pc, #292]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d109      	bne.n	8005866 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005856:	e006      	b.n	8005866 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	73fb      	strb	r3, [r7, #15]
      break;
 800585c:	e004      	b.n	8005868 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800585e:	bf00      	nop
 8005860:	e002      	b.n	8005868 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005862:	bf00      	nop
 8005864:	e000      	b.n	8005868 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005866:	bf00      	nop
    }

    if(status == HAL_OK)
 8005868:	7bfb      	ldrb	r3, [r7, #15]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10d      	bne.n	800588a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800586e:	4b3f      	ldr	r3, [pc, #252]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6819      	ldr	r1, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	3b01      	subs	r3, #1
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	430b      	orrs	r3, r1
 8005884:	4939      	ldr	r1, [pc, #228]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005886:	4313      	orrs	r3, r2
 8005888:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d167      	bne.n	8005960 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005890:	4b36      	ldr	r3, [pc, #216]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a35      	ldr	r2, [pc, #212]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005896:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800589a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800589c:	f7fc ffb0 	bl	8002800 <HAL_GetTick>
 80058a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058a2:	e009      	b.n	80058b8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058a4:	f7fc ffac 	bl	8002800 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d902      	bls.n	80058b8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	73fb      	strb	r3, [r7, #15]
        break;
 80058b6:	e005      	b.n	80058c4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058b8:	4b2c      	ldr	r3, [pc, #176]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1ef      	bne.n	80058a4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d14a      	bne.n	8005960 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d111      	bne.n	80058f4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058d0:	4b26      	ldr	r3, [pc, #152]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80058d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6892      	ldr	r2, [r2, #8]
 80058e0:	0211      	lsls	r1, r2, #8
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	68d2      	ldr	r2, [r2, #12]
 80058e6:	0912      	lsrs	r2, r2, #4
 80058e8:	0452      	lsls	r2, r2, #17
 80058ea:	430a      	orrs	r2, r1
 80058ec:	491f      	ldr	r1, [pc, #124]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	614b      	str	r3, [r1, #20]
 80058f2:	e011      	b.n	8005918 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058f4:	4b1d      	ldr	r3, [pc, #116]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80058fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6892      	ldr	r2, [r2, #8]
 8005904:	0211      	lsls	r1, r2, #8
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6912      	ldr	r2, [r2, #16]
 800590a:	0852      	lsrs	r2, r2, #1
 800590c:	3a01      	subs	r2, #1
 800590e:	0652      	lsls	r2, r2, #25
 8005910:	430a      	orrs	r2, r1
 8005912:	4916      	ldr	r1, [pc, #88]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005914:	4313      	orrs	r3, r2
 8005916:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005918:	4b14      	ldr	r3, [pc, #80]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a13      	ldr	r2, [pc, #76]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 800591e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005922:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005924:	f7fc ff6c 	bl	8002800 <HAL_GetTick>
 8005928:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800592a:	e009      	b.n	8005940 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800592c:	f7fc ff68 	bl	8002800 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d902      	bls.n	8005940 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	73fb      	strb	r3, [r7, #15]
          break;
 800593e:	e005      	b.n	800594c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005940:	4b0a      	ldr	r3, [pc, #40]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0ef      	beq.n	800592c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005952:	4b06      	ldr	r3, [pc, #24]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005954:	695a      	ldr	r2, [r3, #20]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	4904      	ldr	r1, [pc, #16]	@ (800596c <RCCEx_PLLSAI2_Config+0x1b8>)
 800595c:	4313      	orrs	r3, r2
 800595e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005960:	7bfb      	ldrb	r3, [r7, #15]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40021000 	.word	0x40021000

08005970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e095      	b.n	8005aae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005986:	2b00      	cmp	r3, #0
 8005988:	d108      	bne.n	800599c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005992:	d009      	beq.n	80059a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	61da      	str	r2, [r3, #28]
 800599a:	e005      	b.n	80059a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7fc f8b4 	bl	8001b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80059e8:	d902      	bls.n	80059f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	e002      	b.n	80059f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80059fe:	d007      	beq.n	8005a10 <HAL_SPI_Init+0xa0>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a08:	d002      	beq.n	8005a10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a20:	431a      	orrs	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	431a      	orrs	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a48:	431a      	orrs	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a52:	ea42 0103 	orr.w	r1, r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	0c1b      	lsrs	r3, r3, #16
 8005a6c:	f003 0204 	and.w	r2, r3, #4
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a74:	f003 0310 	and.w	r3, r3, #16
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a7e:	f003 0308 	and.w	r3, r3, #8
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005a8c:	ea42 0103 	orr.w	r1, r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b082      	sub	sp, #8
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e040      	b.n	8005b4a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d106      	bne.n	8005ade <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7fc f86d 	bl	8001bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2224      	movs	r2, #36	@ 0x24
 8005ae2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0201 	bic.w	r2, r2, #1
 8005af2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fb69 	bl	80061d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f8ae 	bl	8005c64 <UART_SetConfig>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d101      	bne.n	8005b12 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e01b      	b.n	8005b4a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b30:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f042 0201 	orr.w	r2, r2, #1
 8005b40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fbe8 	bl	8006318 <UART_CheckIdleState>
 8005b48:	4603      	mov	r3, r0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b08a      	sub	sp, #40	@ 0x28
 8005b56:	af02      	add	r7, sp, #8
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	603b      	str	r3, [r7, #0]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b66:	2b20      	cmp	r3, #32
 8005b68:	d177      	bne.n	8005c5a <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <HAL_UART_Transmit+0x24>
 8005b70:	88fb      	ldrh	r3, [r7, #6]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e070      	b.n	8005c5c <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2221      	movs	r2, #33	@ 0x21
 8005b86:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b88:	f7fc fe3a 	bl	8002800 <HAL_GetTick>
 8005b8c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	88fa      	ldrh	r2, [r7, #6]
 8005b92:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	88fa      	ldrh	r2, [r7, #6]
 8005b9a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ba6:	d108      	bne.n	8005bba <HAL_UART_Transmit+0x68>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d104      	bne.n	8005bba <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	61bb      	str	r3, [r7, #24]
 8005bb8:	e003      	b.n	8005bc2 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bc2:	e02f      	b.n	8005c24 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2180      	movs	r1, #128	@ 0x80
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 fc4a 	bl	8006468 <UART_WaitOnFlagUntilTimeout>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d004      	beq.n	8005be4 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e03b      	b.n	8005c5c <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10b      	bne.n	8005c02 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	881a      	ldrh	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bf6:	b292      	uxth	r2, r2
 8005bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	3302      	adds	r3, #2
 8005bfe:	61bb      	str	r3, [r7, #24]
 8005c00:	e007      	b.n	8005c12 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	781a      	ldrb	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1c9      	bne.n	8005bc4 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2200      	movs	r2, #0
 8005c38:	2140      	movs	r1, #64	@ 0x40
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 fc14 	bl	8006468 <UART_WaitOnFlagUntilTimeout>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d004      	beq.n	8005c50 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e005      	b.n	8005c5c <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	e000      	b.n	8005c5c <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005c5a:	2302      	movs	r3, #2
  }
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3720      	adds	r7, #32
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c68:	b08a      	sub	sp, #40	@ 0x28
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	4ba4      	ldr	r3, [pc, #656]	@ (8005f24 <UART_SetConfig+0x2c0>)
 8005c94:	4013      	ands	r3, r2
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	6812      	ldr	r2, [r2, #0]
 8005c9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c9c:	430b      	orrs	r3, r1
 8005c9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a99      	ldr	r2, [pc, #612]	@ (8005f28 <UART_SetConfig+0x2c4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d004      	beq.n	8005cd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a90      	ldr	r2, [pc, #576]	@ (8005f2c <UART_SetConfig+0x2c8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d126      	bne.n	8005d3c <UART_SetConfig+0xd8>
 8005cee:	4b90      	ldr	r3, [pc, #576]	@ (8005f30 <UART_SetConfig+0x2cc>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf4:	f003 0303 	and.w	r3, r3, #3
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d81b      	bhi.n	8005d34 <UART_SetConfig+0xd0>
 8005cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8005d04 <UART_SetConfig+0xa0>)
 8005cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d02:	bf00      	nop
 8005d04:	08005d15 	.word	0x08005d15
 8005d08:	08005d25 	.word	0x08005d25
 8005d0c:	08005d1d 	.word	0x08005d1d
 8005d10:	08005d2d 	.word	0x08005d2d
 8005d14:	2301      	movs	r3, #1
 8005d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d1a:	e116      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d22:	e112      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005d24:	2304      	movs	r3, #4
 8005d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d2a:	e10e      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005d2c:	2308      	movs	r3, #8
 8005d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d32:	e10a      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005d34:	2310      	movs	r3, #16
 8005d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d3a:	e106      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a7c      	ldr	r2, [pc, #496]	@ (8005f34 <UART_SetConfig+0x2d0>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d138      	bne.n	8005db8 <UART_SetConfig+0x154>
 8005d46:	4b7a      	ldr	r3, [pc, #488]	@ (8005f30 <UART_SetConfig+0x2cc>)
 8005d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d4c:	f003 030c 	and.w	r3, r3, #12
 8005d50:	2b0c      	cmp	r3, #12
 8005d52:	d82d      	bhi.n	8005db0 <UART_SetConfig+0x14c>
 8005d54:	a201      	add	r2, pc, #4	@ (adr r2, 8005d5c <UART_SetConfig+0xf8>)
 8005d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5a:	bf00      	nop
 8005d5c:	08005d91 	.word	0x08005d91
 8005d60:	08005db1 	.word	0x08005db1
 8005d64:	08005db1 	.word	0x08005db1
 8005d68:	08005db1 	.word	0x08005db1
 8005d6c:	08005da1 	.word	0x08005da1
 8005d70:	08005db1 	.word	0x08005db1
 8005d74:	08005db1 	.word	0x08005db1
 8005d78:	08005db1 	.word	0x08005db1
 8005d7c:	08005d99 	.word	0x08005d99
 8005d80:	08005db1 	.word	0x08005db1
 8005d84:	08005db1 	.word	0x08005db1
 8005d88:	08005db1 	.word	0x08005db1
 8005d8c:	08005da9 	.word	0x08005da9
 8005d90:	2300      	movs	r3, #0
 8005d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d96:	e0d8      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d9e:	e0d4      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005da0:	2304      	movs	r3, #4
 8005da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da6:	e0d0      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005da8:	2308      	movs	r3, #8
 8005daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dae:	e0cc      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005db0:	2310      	movs	r3, #16
 8005db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005db6:	e0c8      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a5e      	ldr	r2, [pc, #376]	@ (8005f38 <UART_SetConfig+0x2d4>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d125      	bne.n	8005e0e <UART_SetConfig+0x1aa>
 8005dc2:	4b5b      	ldr	r3, [pc, #364]	@ (8005f30 <UART_SetConfig+0x2cc>)
 8005dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005dcc:	2b30      	cmp	r3, #48	@ 0x30
 8005dce:	d016      	beq.n	8005dfe <UART_SetConfig+0x19a>
 8005dd0:	2b30      	cmp	r3, #48	@ 0x30
 8005dd2:	d818      	bhi.n	8005e06 <UART_SetConfig+0x1a2>
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d00a      	beq.n	8005dee <UART_SetConfig+0x18a>
 8005dd8:	2b20      	cmp	r3, #32
 8005dda:	d814      	bhi.n	8005e06 <UART_SetConfig+0x1a2>
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <UART_SetConfig+0x182>
 8005de0:	2b10      	cmp	r3, #16
 8005de2:	d008      	beq.n	8005df6 <UART_SetConfig+0x192>
 8005de4:	e00f      	b.n	8005e06 <UART_SetConfig+0x1a2>
 8005de6:	2300      	movs	r3, #0
 8005de8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dec:	e0ad      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005dee:	2302      	movs	r3, #2
 8005df0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df4:	e0a9      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005df6:	2304      	movs	r3, #4
 8005df8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dfc:	e0a5      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005dfe:	2308      	movs	r3, #8
 8005e00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e04:	e0a1      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005e06:	2310      	movs	r3, #16
 8005e08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e0c:	e09d      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a4a      	ldr	r2, [pc, #296]	@ (8005f3c <UART_SetConfig+0x2d8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d125      	bne.n	8005e64 <UART_SetConfig+0x200>
 8005e18:	4b45      	ldr	r3, [pc, #276]	@ (8005f30 <UART_SetConfig+0x2cc>)
 8005e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e1e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e22:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e24:	d016      	beq.n	8005e54 <UART_SetConfig+0x1f0>
 8005e26:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e28:	d818      	bhi.n	8005e5c <UART_SetConfig+0x1f8>
 8005e2a:	2b80      	cmp	r3, #128	@ 0x80
 8005e2c:	d00a      	beq.n	8005e44 <UART_SetConfig+0x1e0>
 8005e2e:	2b80      	cmp	r3, #128	@ 0x80
 8005e30:	d814      	bhi.n	8005e5c <UART_SetConfig+0x1f8>
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <UART_SetConfig+0x1d8>
 8005e36:	2b40      	cmp	r3, #64	@ 0x40
 8005e38:	d008      	beq.n	8005e4c <UART_SetConfig+0x1e8>
 8005e3a:	e00f      	b.n	8005e5c <UART_SetConfig+0x1f8>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e42:	e082      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005e44:	2302      	movs	r3, #2
 8005e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e4a:	e07e      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005e4c:	2304      	movs	r3, #4
 8005e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e52:	e07a      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005e54:	2308      	movs	r3, #8
 8005e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e5a:	e076      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005e5c:	2310      	movs	r3, #16
 8005e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e62:	e072      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a35      	ldr	r2, [pc, #212]	@ (8005f40 <UART_SetConfig+0x2dc>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d12a      	bne.n	8005ec4 <UART_SetConfig+0x260>
 8005e6e:	4b30      	ldr	r3, [pc, #192]	@ (8005f30 <UART_SetConfig+0x2cc>)
 8005e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e7c:	d01a      	beq.n	8005eb4 <UART_SetConfig+0x250>
 8005e7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e82:	d81b      	bhi.n	8005ebc <UART_SetConfig+0x258>
 8005e84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e88:	d00c      	beq.n	8005ea4 <UART_SetConfig+0x240>
 8005e8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e8e:	d815      	bhi.n	8005ebc <UART_SetConfig+0x258>
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <UART_SetConfig+0x238>
 8005e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e98:	d008      	beq.n	8005eac <UART_SetConfig+0x248>
 8005e9a:	e00f      	b.n	8005ebc <UART_SetConfig+0x258>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ea2:	e052      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eaa:	e04e      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005eac:	2304      	movs	r3, #4
 8005eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eb2:	e04a      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005eb4:	2308      	movs	r3, #8
 8005eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eba:	e046      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ec2:	e042      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a17      	ldr	r2, [pc, #92]	@ (8005f28 <UART_SetConfig+0x2c4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d13a      	bne.n	8005f44 <UART_SetConfig+0x2e0>
 8005ece:	4b18      	ldr	r3, [pc, #96]	@ (8005f30 <UART_SetConfig+0x2cc>)
 8005ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005ed8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005edc:	d01a      	beq.n	8005f14 <UART_SetConfig+0x2b0>
 8005ede:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ee2:	d81b      	bhi.n	8005f1c <UART_SetConfig+0x2b8>
 8005ee4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ee8:	d00c      	beq.n	8005f04 <UART_SetConfig+0x2a0>
 8005eea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eee:	d815      	bhi.n	8005f1c <UART_SetConfig+0x2b8>
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <UART_SetConfig+0x298>
 8005ef4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ef8:	d008      	beq.n	8005f0c <UART_SetConfig+0x2a8>
 8005efa:	e00f      	b.n	8005f1c <UART_SetConfig+0x2b8>
 8005efc:	2300      	movs	r3, #0
 8005efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f02:	e022      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005f04:	2302      	movs	r3, #2
 8005f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f0a:	e01e      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f12:	e01a      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005f14:	2308      	movs	r3, #8
 8005f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f1a:	e016      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005f1c:	2310      	movs	r3, #16
 8005f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f22:	e012      	b.n	8005f4a <UART_SetConfig+0x2e6>
 8005f24:	efff69f3 	.word	0xefff69f3
 8005f28:	40008000 	.word	0x40008000
 8005f2c:	40013800 	.word	0x40013800
 8005f30:	40021000 	.word	0x40021000
 8005f34:	40004400 	.word	0x40004400
 8005f38:	40004800 	.word	0x40004800
 8005f3c:	40004c00 	.word	0x40004c00
 8005f40:	40005000 	.word	0x40005000
 8005f44:	2310      	movs	r3, #16
 8005f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a9f      	ldr	r2, [pc, #636]	@ (80061cc <UART_SetConfig+0x568>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d17a      	bne.n	800604a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d824      	bhi.n	8005fa6 <UART_SetConfig+0x342>
 8005f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f64 <UART_SetConfig+0x300>)
 8005f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f62:	bf00      	nop
 8005f64:	08005f89 	.word	0x08005f89
 8005f68:	08005fa7 	.word	0x08005fa7
 8005f6c:	08005f91 	.word	0x08005f91
 8005f70:	08005fa7 	.word	0x08005fa7
 8005f74:	08005f97 	.word	0x08005f97
 8005f78:	08005fa7 	.word	0x08005fa7
 8005f7c:	08005fa7 	.word	0x08005fa7
 8005f80:	08005fa7 	.word	0x08005fa7
 8005f84:	08005f9f 	.word	0x08005f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f88:	f7fe ff9a 	bl	8004ec0 <HAL_RCC_GetPCLK1Freq>
 8005f8c:	61f8      	str	r0, [r7, #28]
        break;
 8005f8e:	e010      	b.n	8005fb2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f90:	4b8f      	ldr	r3, [pc, #572]	@ (80061d0 <UART_SetConfig+0x56c>)
 8005f92:	61fb      	str	r3, [r7, #28]
        break;
 8005f94:	e00d      	b.n	8005fb2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f96:	f7fe fefb 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 8005f9a:	61f8      	str	r0, [r7, #28]
        break;
 8005f9c:	e009      	b.n	8005fb2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fa2:	61fb      	str	r3, [r7, #28]
        break;
 8005fa4:	e005      	b.n	8005fb2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005fb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 80fb 	beq.w	80061b0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	4413      	add	r3, r2
 8005fc4:	69fa      	ldr	r2, [r7, #28]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d305      	bcc.n	8005fd6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fd0:	69fa      	ldr	r2, [r7, #28]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d903      	bls.n	8005fde <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005fdc:	e0e8      	b.n	80061b0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	461c      	mov	r4, r3
 8005fe4:	4615      	mov	r5, r2
 8005fe6:	f04f 0200 	mov.w	r2, #0
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	022b      	lsls	r3, r5, #8
 8005ff0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005ff4:	0222      	lsls	r2, r4, #8
 8005ff6:	68f9      	ldr	r1, [r7, #12]
 8005ff8:	6849      	ldr	r1, [r1, #4]
 8005ffa:	0849      	lsrs	r1, r1, #1
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	4688      	mov	r8, r1
 8006000:	4681      	mov	r9, r0
 8006002:	eb12 0a08 	adds.w	sl, r2, r8
 8006006:	eb43 0b09 	adc.w	fp, r3, r9
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	603b      	str	r3, [r7, #0]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006018:	4650      	mov	r0, sl
 800601a:	4659      	mov	r1, fp
 800601c:	f7fa fdc4 	bl	8000ba8 <__aeabi_uldivmod>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	4613      	mov	r3, r2
 8006026:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800602e:	d308      	bcc.n	8006042 <UART_SetConfig+0x3de>
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006036:	d204      	bcs.n	8006042 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	60da      	str	r2, [r3, #12]
 8006040:	e0b6      	b.n	80061b0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006048:	e0b2      	b.n	80061b0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006052:	d15e      	bne.n	8006112 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006054:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006058:	2b08      	cmp	r3, #8
 800605a:	d828      	bhi.n	80060ae <UART_SetConfig+0x44a>
 800605c:	a201      	add	r2, pc, #4	@ (adr r2, 8006064 <UART_SetConfig+0x400>)
 800605e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006062:	bf00      	nop
 8006064:	08006089 	.word	0x08006089
 8006068:	08006091 	.word	0x08006091
 800606c:	08006099 	.word	0x08006099
 8006070:	080060af 	.word	0x080060af
 8006074:	0800609f 	.word	0x0800609f
 8006078:	080060af 	.word	0x080060af
 800607c:	080060af 	.word	0x080060af
 8006080:	080060af 	.word	0x080060af
 8006084:	080060a7 	.word	0x080060a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006088:	f7fe ff1a 	bl	8004ec0 <HAL_RCC_GetPCLK1Freq>
 800608c:	61f8      	str	r0, [r7, #28]
        break;
 800608e:	e014      	b.n	80060ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006090:	f7fe ff2c 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 8006094:	61f8      	str	r0, [r7, #28]
        break;
 8006096:	e010      	b.n	80060ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006098:	4b4d      	ldr	r3, [pc, #308]	@ (80061d0 <UART_SetConfig+0x56c>)
 800609a:	61fb      	str	r3, [r7, #28]
        break;
 800609c:	e00d      	b.n	80060ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800609e:	f7fe fe77 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 80060a2:	61f8      	str	r0, [r7, #28]
        break;
 80060a4:	e009      	b.n	80060ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060aa:	61fb      	str	r3, [r7, #28]
        break;
 80060ac:	e005      	b.n	80060ba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80060b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d077      	beq.n	80061b0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	005a      	lsls	r2, r3, #1
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	085b      	lsrs	r3, r3, #1
 80060ca:	441a      	add	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	2b0f      	cmp	r3, #15
 80060da:	d916      	bls.n	800610a <UART_SetConfig+0x4a6>
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060e2:	d212      	bcs.n	800610a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f023 030f 	bic.w	r3, r3, #15
 80060ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	085b      	lsrs	r3, r3, #1
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	f003 0307 	and.w	r3, r3, #7
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	8afb      	ldrh	r3, [r7, #22]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	8afa      	ldrh	r2, [r7, #22]
 8006106:	60da      	str	r2, [r3, #12]
 8006108:	e052      	b.n	80061b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006110:	e04e      	b.n	80061b0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006112:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006116:	2b08      	cmp	r3, #8
 8006118:	d827      	bhi.n	800616a <UART_SetConfig+0x506>
 800611a:	a201      	add	r2, pc, #4	@ (adr r2, 8006120 <UART_SetConfig+0x4bc>)
 800611c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006120:	08006145 	.word	0x08006145
 8006124:	0800614d 	.word	0x0800614d
 8006128:	08006155 	.word	0x08006155
 800612c:	0800616b 	.word	0x0800616b
 8006130:	0800615b 	.word	0x0800615b
 8006134:	0800616b 	.word	0x0800616b
 8006138:	0800616b 	.word	0x0800616b
 800613c:	0800616b 	.word	0x0800616b
 8006140:	08006163 	.word	0x08006163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006144:	f7fe febc 	bl	8004ec0 <HAL_RCC_GetPCLK1Freq>
 8006148:	61f8      	str	r0, [r7, #28]
        break;
 800614a:	e014      	b.n	8006176 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800614c:	f7fe fece 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 8006150:	61f8      	str	r0, [r7, #28]
        break;
 8006152:	e010      	b.n	8006176 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006154:	4b1e      	ldr	r3, [pc, #120]	@ (80061d0 <UART_SetConfig+0x56c>)
 8006156:	61fb      	str	r3, [r7, #28]
        break;
 8006158:	e00d      	b.n	8006176 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800615a:	f7fe fe19 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 800615e:	61f8      	str	r0, [r7, #28]
        break;
 8006160:	e009      	b.n	8006176 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006166:	61fb      	str	r3, [r7, #28]
        break;
 8006168:	e005      	b.n	8006176 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006174:	bf00      	nop
    }

    if (pclk != 0U)
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d019      	beq.n	80061b0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	085a      	lsrs	r2, r3, #1
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	441a      	add	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	fbb2 f3f3 	udiv	r3, r2, r3
 800618e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	2b0f      	cmp	r3, #15
 8006194:	d909      	bls.n	80061aa <UART_SetConfig+0x546>
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800619c:	d205      	bcs.n	80061aa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	60da      	str	r2, [r3, #12]
 80061a8:	e002      	b.n	80061b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80061bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3728      	adds	r7, #40	@ 0x28
 80061c4:	46bd      	mov	sp, r7
 80061c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ca:	bf00      	nop
 80061cc:	40008000 	.word	0x40008000
 80061d0:	00f42400 	.word	0x00f42400

080061d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00a      	beq.n	80061fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00a      	beq.n	8006242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006246:	f003 0304 	and.w	r3, r3, #4
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006268:	f003 0310 	and.w	r3, r3, #16
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00a      	beq.n	8006286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628a:	f003 0320 	and.w	r3, r3, #32
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	430a      	orrs	r2, r1
 80062a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d01a      	beq.n	80062ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062d2:	d10a      	bne.n	80062ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	605a      	str	r2, [r3, #4]
  }
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b098      	sub	sp, #96	@ 0x60
 800631c:	af02      	add	r7, sp, #8
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006328:	f7fc fa6a 	bl	8002800 <HAL_GetTick>
 800632c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0308 	and.w	r3, r3, #8
 8006338:	2b08      	cmp	r3, #8
 800633a:	d12e      	bne.n	800639a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800633c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006344:	2200      	movs	r2, #0
 8006346:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f88c 	bl	8006468 <UART_WaitOnFlagUntilTimeout>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d021      	beq.n	800639a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635e:	e853 3f00 	ldrex	r3, [r3]
 8006362:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006366:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800636a:	653b      	str	r3, [r7, #80]	@ 0x50
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	461a      	mov	r2, r3
 8006372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006374:	647b      	str	r3, [r7, #68]	@ 0x44
 8006376:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800637a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e6      	bne.n	8006356 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2220      	movs	r2, #32
 800638c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e062      	b.n	8006460 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d149      	bne.n	800643c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063b0:	2200      	movs	r2, #0
 80063b2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f856 	bl	8006468 <UART_WaitOnFlagUntilTimeout>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d03c      	beq.n	800643c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	623b      	str	r3, [r7, #32]
   return(result);
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	461a      	mov	r2, r3
 80063de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80063e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e6      	bne.n	80063c2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3308      	adds	r3, #8
 80063fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	60fb      	str	r3, [r7, #12]
   return(result);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 0301 	bic.w	r3, r3, #1
 800640a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3308      	adds	r3, #8
 8006412:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006414:	61fa      	str	r2, [r7, #28]
 8006416:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	69b9      	ldr	r1, [r7, #24]
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	617b      	str	r3, [r7, #20]
   return(result);
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e5      	bne.n	80063f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2220      	movs	r2, #32
 800642c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e011      	b.n	8006460 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2220      	movs	r2, #32
 8006446:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3758      	adds	r7, #88	@ 0x58
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	4613      	mov	r3, r2
 8006476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006478:	e04f      	b.n	800651a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006480:	d04b      	beq.n	800651a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006482:	f7fc f9bd 	bl	8002800 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	429a      	cmp	r2, r3
 8006490:	d302      	bcc.n	8006498 <UART_WaitOnFlagUntilTimeout+0x30>
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e04e      	b.n	800653a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0304 	and.w	r3, r3, #4
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d037      	beq.n	800651a <UART_WaitOnFlagUntilTimeout+0xb2>
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b80      	cmp	r3, #128	@ 0x80
 80064ae:	d034      	beq.n	800651a <UART_WaitOnFlagUntilTimeout+0xb2>
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2b40      	cmp	r3, #64	@ 0x40
 80064b4:	d031      	beq.n	800651a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	f003 0308 	and.w	r3, r3, #8
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d110      	bne.n	80064e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2208      	movs	r2, #8
 80064ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f838 	bl	8006542 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2208      	movs	r2, #8
 80064d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e029      	b.n	800653a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69db      	ldr	r3, [r3, #28]
 80064ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064f4:	d111      	bne.n	800651a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 f81e 	bl	8006542 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2220      	movs	r2, #32
 800650a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e00f      	b.n	800653a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69da      	ldr	r2, [r3, #28]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	4013      	ands	r3, r2
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	429a      	cmp	r2, r3
 8006528:	bf0c      	ite	eq
 800652a:	2301      	moveq	r3, #1
 800652c:	2300      	movne	r3, #0
 800652e:	b2db      	uxtb	r3, r3
 8006530:	461a      	mov	r2, r3
 8006532:	79fb      	ldrb	r3, [r7, #7]
 8006534:	429a      	cmp	r2, r3
 8006536:	d0a0      	beq.n	800647a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006542:	b480      	push	{r7}
 8006544:	b095      	sub	sp, #84	@ 0x54
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006552:	e853 3f00 	ldrex	r3, [r3]
 8006556:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800655e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	461a      	mov	r2, r3
 8006566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006568:	643b      	str	r3, [r7, #64]	@ 0x40
 800656a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800656e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006570:	e841 2300 	strex	r3, r2, [r1]
 8006574:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1e6      	bne.n	800654a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3308      	adds	r3, #8
 8006582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	e853 3f00 	ldrex	r3, [r3]
 800658a:	61fb      	str	r3, [r7, #28]
   return(result);
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	f023 0301 	bic.w	r3, r3, #1
 8006592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3308      	adds	r3, #8
 800659a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800659c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800659e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e5      	bne.n	800657c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d118      	bne.n	80065ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	e853 3f00 	ldrex	r3, [r3]
 80065c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	f023 0310 	bic.w	r3, r3, #16
 80065cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065d6:	61bb      	str	r3, [r7, #24]
 80065d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	6979      	ldr	r1, [r7, #20]
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	613b      	str	r3, [r7, #16]
   return(result);
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e6      	bne.n	80065b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80065fe:	bf00      	nop
 8006600:	3754      	adds	r7, #84	@ 0x54
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800660a:	b084      	sub	sp, #16
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	f107 001c 	add.w	r0, r7, #28
 8006618:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fa69 	bl	8006b00 <USB_CoreReset>
 800662e:	4603      	mov	r3, r0
 8006630:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006632:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006636:	2b00      	cmp	r3, #0
 8006638:	d106      	bne.n	8006648 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	639a      	str	r2, [r3, #56]	@ 0x38
 8006646:	e005      	b.n	8006654 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800664c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006654:	7bfb      	ldrb	r3, [r7, #15]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006660:	b004      	add	sp, #16
 8006662:	4770      	bx	lr

08006664 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f023 0201 	bic.w	r2, r3, #1
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	460b      	mov	r3, r1
 8006690:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066a2:	78fb      	ldrb	r3, [r7, #3]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d115      	bne.n	80066d4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066b4:	200a      	movs	r0, #10
 80066b6:	f7fc f8af 	bl	8002818 <HAL_Delay>
      ms += 10U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	330a      	adds	r3, #10
 80066be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fa0f 	bl	8006ae4 <USB_GetMode>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d01e      	beq.n	800670a <USB_SetCurrentMode+0x84>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2bc7      	cmp	r3, #199	@ 0xc7
 80066d0:	d9f0      	bls.n	80066b4 <USB_SetCurrentMode+0x2e>
 80066d2:	e01a      	b.n	800670a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d115      	bne.n	8006706 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066e6:	200a      	movs	r0, #10
 80066e8:	f7fc f896 	bl	8002818 <HAL_Delay>
      ms += 10U;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	330a      	adds	r3, #10
 80066f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f9f6 	bl	8006ae4 <USB_GetMode>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d005      	beq.n	800670a <USB_SetCurrentMode+0x84>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2bc7      	cmp	r3, #199	@ 0xc7
 8006702:	d9f0      	bls.n	80066e6 <USB_SetCurrentMode+0x60>
 8006704:	e001      	b.n	800670a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e005      	b.n	8006716 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2bc8      	cmp	r3, #200	@ 0xc8
 800670e:	d101      	bne.n	8006714 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e000      	b.n	8006716 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
	...

08006720 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006720:	b084      	sub	sp, #16
 8006722:	b580      	push	{r7, lr}
 8006724:	b086      	sub	sp, #24
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800672e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800673a:	2300      	movs	r3, #0
 800673c:	613b      	str	r3, [r7, #16]
 800673e:	e009      	b.n	8006754 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	3340      	adds	r3, #64	@ 0x40
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	2200      	movs	r2, #0
 800674c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	3301      	adds	r3, #1
 8006752:	613b      	str	r3, [r7, #16]
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	2b0e      	cmp	r3, #14
 8006758:	d9f2      	bls.n	8006740 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800675a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800675e:	2b00      	cmp	r3, #0
 8006760:	d11c      	bne.n	800679c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006770:	f043 0302 	orr.w	r3, r3, #2
 8006774:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800677a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	e005      	b.n	80067a8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067ae:	461a      	mov	r2, r3
 80067b0:	2300      	movs	r3, #0
 80067b2:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067b4:	2103      	movs	r1, #3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f95a 	bl	8006a70 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067bc:	2110      	movs	r1, #16
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f8f6 	bl	80069b0 <USB_FlushTxFifo>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f920 	bl	8006a14 <USB_FlushRxFifo>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e4:	461a      	mov	r2, r3
 80067e6:	2300      	movs	r3, #0
 80067e8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067f0:	461a      	mov	r2, r3
 80067f2:	2300      	movs	r3, #0
 80067f4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067fc:	461a      	mov	r2, r3
 80067fe:	2300      	movs	r3, #0
 8006800:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006802:	2300      	movs	r3, #0
 8006804:	613b      	str	r3, [r7, #16]
 8006806:	e043      	b.n	8006890 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800681a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800681e:	d118      	bne.n	8006852 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10a      	bne.n	800683c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	4413      	add	r3, r2
 800682e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006832:	461a      	mov	r2, r3
 8006834:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	e013      	b.n	8006864 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4413      	add	r3, r2
 8006844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006848:	461a      	mov	r2, r3
 800684a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	e008      	b.n	8006864 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4413      	add	r3, r2
 800685a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800685e:	461a      	mov	r2, r3
 8006860:	2300      	movs	r3, #0
 8006862:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006870:	461a      	mov	r2, r3
 8006872:	2300      	movs	r3, #0
 8006874:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4413      	add	r3, r2
 800687e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006882:	461a      	mov	r2, r3
 8006884:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006888:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	3301      	adds	r3, #1
 800688e:	613b      	str	r3, [r7, #16]
 8006890:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006894:	461a      	mov	r2, r3
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	4293      	cmp	r3, r2
 800689a:	d3b5      	bcc.n	8006808 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800689c:	2300      	movs	r3, #0
 800689e:	613b      	str	r3, [r7, #16]
 80068a0:	e043      	b.n	800692a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	015a      	lsls	r2, r3, #5
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068b8:	d118      	bne.n	80068ec <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10a      	bne.n	80068d6 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068cc:	461a      	mov	r2, r3
 80068ce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80068d2:	6013      	str	r3, [r2, #0]
 80068d4:	e013      	b.n	80068fe <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e2:	461a      	mov	r2, r3
 80068e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80068e8:	6013      	str	r3, [r2, #0]
 80068ea:	e008      	b.n	80068fe <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f8:	461a      	mov	r2, r3
 80068fa:	2300      	movs	r3, #0
 80068fc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800690a:	461a      	mov	r2, r3
 800690c:	2300      	movs	r3, #0
 800690e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800691c:	461a      	mov	r2, r3
 800691e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006922:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	3301      	adds	r3, #1
 8006928:	613b      	str	r3, [r7, #16]
 800692a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800692e:	461a      	mov	r2, r3
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	4293      	cmp	r3, r2
 8006934:	d3b5      	bcc.n	80068a2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006944:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006948:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006956:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	f043 0210 	orr.w	r2, r3, #16
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	699a      	ldr	r2, [r3, #24]
 8006968:	4b10      	ldr	r3, [pc, #64]	@ (80069ac <USB_DevInit+0x28c>)
 800696a:	4313      	orrs	r3, r2
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006970:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006974:	2b00      	cmp	r3, #0
 8006976:	d005      	beq.n	8006984 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	f043 0208 	orr.w	r2, r3, #8
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006984:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006988:	2b01      	cmp	r3, #1
 800698a:	d107      	bne.n	800699c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006994:	f043 0304 	orr.w	r3, r3, #4
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800699c:	7dfb      	ldrb	r3, [r7, #23]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3718      	adds	r7, #24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069a8:	b004      	add	sp, #16
 80069aa:	4770      	bx	lr
 80069ac:	803c3800 	.word	0x803c3800

080069b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3301      	adds	r3, #1
 80069c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069ca:	d901      	bls.n	80069d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e01b      	b.n	8006a08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	daf2      	bge.n	80069be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	019b      	lsls	r3, r3, #6
 80069e0:	f043 0220 	orr.w	r2, r3, #32
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	3301      	adds	r3, #1
 80069ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069f4:	d901      	bls.n	80069fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e006      	b.n	8006a08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f003 0320 	and.w	r3, r3, #32
 8006a02:	2b20      	cmp	r3, #32
 8006a04:	d0f0      	beq.n	80069e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	3301      	adds	r3, #1
 8006a24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a2c:	d901      	bls.n	8006a32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e018      	b.n	8006a64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	daf2      	bge.n	8006a20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2210      	movs	r2, #16
 8006a42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3301      	adds	r3, #1
 8006a48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a50:	d901      	bls.n	8006a56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e006      	b.n	8006a64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f003 0310 	and.w	r3, r3, #16
 8006a5e:	2b10      	cmp	r3, #16
 8006a60:	d0f0      	beq.n	8006a44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	68f9      	ldr	r1, [r7, #12]
 8006a8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a90:	4313      	orrs	r3, r2
 8006a92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b085      	sub	sp, #20
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006abc:	f023 0303 	bic.w	r3, r3, #3
 8006ac0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ad0:	f043 0302 	orr.w	r3, r3, #2
 8006ad4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	f003 0301 	and.w	r3, r3, #1
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b18:	d901      	bls.n	8006b1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e01b      	b.n	8006b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	daf2      	bge.n	8006b0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	f043 0201 	orr.w	r2, r3, #1
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b42:	d901      	bls.n	8006b48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e006      	b.n	8006b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d0f0      	beq.n	8006b36 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b085      	sub	sp, #20
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	4603      	mov	r3, r0
 8006b6a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006b70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b74:	2b84      	cmp	r3, #132	@ 0x84
 8006b76:	d005      	beq.n	8006b84 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006b78:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4413      	add	r3, r2
 8006b80:	3303      	adds	r3, #3
 8006b82:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006b84:	68fb      	ldr	r3, [r7, #12]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006b96:	f000 fc4d 	bl	8007434 <vTaskStartScheduler>
  
  return osOK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ba2:	b089      	sub	sp, #36	@ 0x24
 8006ba4:	af04      	add	r7, sp, #16
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d020      	beq.n	8006bf4 <osThreadCreate+0x54>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d01c      	beq.n	8006bf4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685c      	ldr	r4, [r3, #4]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691e      	ldr	r6, [r3, #16]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff ffc8 	bl	8006b62 <makeFreeRtosPriority>
 8006bd2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006bdc:	9202      	str	r2, [sp, #8]
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	9100      	str	r1, [sp, #0]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	4632      	mov	r2, r6
 8006be6:	4629      	mov	r1, r5
 8006be8:	4620      	mov	r0, r4
 8006bea:	f000 fa56 	bl	800709a <xTaskCreateStatic>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	e01c      	b.n	8006c2e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685c      	ldr	r4, [r3, #4]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c00:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7ff ffaa 	bl	8006b62 <makeFreeRtosPriority>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	f107 030c 	add.w	r3, r7, #12
 8006c14:	9301      	str	r3, [sp, #4]
 8006c16:	9200      	str	r2, [sp, #0]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	4632      	mov	r2, r6
 8006c1c:	4629      	mov	r1, r5
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f000 fa9b 	bl	800715a <xTaskCreate>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d001      	beq.n	8006c2e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	e000      	b.n	8006c30 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c38 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <osDelay+0x16>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	e000      	b.n	8006c50 <osDelay+0x18>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	4618      	mov	r0, r3
 8006c52:	f000 fbb9 	bl	80073c8 <vTaskDelay>
  
  return osOK;
 8006c56:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006c60:	b590      	push	{r4, r7, lr}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af02      	add	r7, sp, #8
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d011      	beq.n	8006c96 <osMessageCreate+0x36>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00d      	beq.n	8006c96 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6818      	ldr	r0, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6859      	ldr	r1, [r3, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	2400      	movs	r4, #0
 8006c8c:	9400      	str	r4, [sp, #0]
 8006c8e:	f000 f92d 	bl	8006eec <xQueueGenericCreateStatic>
 8006c92:	4603      	mov	r3, r0
 8006c94:	e008      	b.n	8006ca8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6818      	ldr	r0, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	f000 f9a0 	bl	8006fe6 <xQueueGenericCreate>
 8006ca6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd90      	pop	{r4, r7, pc}

08006cb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f103 0208 	add.w	r2, r3, #8
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f103 0208 	add.w	r2, r3, #8
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f103 0208 	add.w	r2, r3, #8
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b085      	sub	sp, #20
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	601a      	str	r2, [r3, #0]
}
 8006d46:	bf00      	nop
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d52:	b480      	push	{r7}
 8006d54:	b085      	sub	sp, #20
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d68:	d103      	bne.n	8006d72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	e00c      	b.n	8006d8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3308      	adds	r3, #8
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	e002      	b.n	8006d80 <vListInsert+0x2e>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d2f6      	bcs.n	8006d7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	601a      	str	r2, [r3, #0]
}
 8006db8:	bf00      	nop
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	6892      	ldr	r2, [r2, #8]
 8006dda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	6852      	ldr	r2, [r2, #4]
 8006de4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d103      	bne.n	8006df8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	1e5a      	subs	r2, r3, #1
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10b      	bne.n	8006e44 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e3e:	bf00      	nop
 8006e40:	bf00      	nop
 8006e42:	e7fd      	b.n	8006e40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e44:	f001 f808 	bl	8007e58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e50:	68f9      	ldr	r1, [r7, #12]
 8006e52:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006e54:	fb01 f303 	mul.w	r3, r1, r3
 8006e58:	441a      	add	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e74:	3b01      	subs	r3, #1
 8006e76:	68f9      	ldr	r1, [r7, #12]
 8006e78:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006e7a:	fb01 f303 	mul.w	r3, r1, r3
 8006e7e:	441a      	add	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	22ff      	movs	r2, #255	@ 0xff
 8006e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	22ff      	movs	r2, #255	@ 0xff
 8006e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d114      	bne.n	8006ec4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d01a      	beq.n	8006ed8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	3310      	adds	r3, #16
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 fce8 	bl	800787c <xTaskRemoveFromEventList>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d012      	beq.n	8006ed8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee8 <xQueueGenericReset+0xd0>)
 8006eb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	e009      	b.n	8006ed8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3310      	adds	r3, #16
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7ff fef1 	bl	8006cb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3324      	adds	r3, #36	@ 0x24
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7ff feec 	bl	8006cb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ed8:	f000 fff0 	bl	8007ebc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006edc:	2301      	movs	r3, #1
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	e000ed04 	.word	0xe000ed04

08006eec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b08e      	sub	sp, #56	@ 0x38
 8006ef0:	af02      	add	r7, sp, #8
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
 8006ef8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10b      	bne.n	8006f18 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
 8006f16:	e7fd      	b.n	8006f14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10b      	bne.n	8006f36 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f30:	bf00      	nop
 8006f32:	bf00      	nop
 8006f34:	e7fd      	b.n	8006f32 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <xQueueGenericCreateStatic+0x56>
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <xQueueGenericCreateStatic+0x5a>
 8006f42:	2301      	movs	r3, #1
 8006f44:	e000      	b.n	8006f48 <xQueueGenericCreateStatic+0x5c>
 8006f46:	2300      	movs	r3, #0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10b      	bne.n	8006f64 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	623b      	str	r3, [r7, #32]
}
 8006f5e:	bf00      	nop
 8006f60:	bf00      	nop
 8006f62:	e7fd      	b.n	8006f60 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d102      	bne.n	8006f70 <xQueueGenericCreateStatic+0x84>
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <xQueueGenericCreateStatic+0x88>
 8006f70:	2301      	movs	r3, #1
 8006f72:	e000      	b.n	8006f76 <xQueueGenericCreateStatic+0x8a>
 8006f74:	2300      	movs	r3, #0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10b      	bne.n	8006f92 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	61fb      	str	r3, [r7, #28]
}
 8006f8c:	bf00      	nop
 8006f8e:	bf00      	nop
 8006f90:	e7fd      	b.n	8006f8e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f92:	2348      	movs	r3, #72	@ 0x48
 8006f94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2b48      	cmp	r3, #72	@ 0x48
 8006f9a:	d00b      	beq.n	8006fb4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	61bb      	str	r3, [r7, #24]
}
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	e7fd      	b.n	8006fb0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006fb4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00d      	beq.n	8006fdc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fc8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	68b9      	ldr	r1, [r7, #8]
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f000 f840 	bl	800705c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3730      	adds	r7, #48	@ 0x30
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b08a      	sub	sp, #40	@ 0x28
 8006fea:	af02      	add	r7, sp, #8
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10b      	bne.n	8007012 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	613b      	str	r3, [r7, #16]
}
 800700c:	bf00      	nop
 800700e:	bf00      	nop
 8007010:	e7fd      	b.n	800700e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	fb02 f303 	mul.w	r3, r2, r3
 800701a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	3348      	adds	r3, #72	@ 0x48
 8007020:	4618      	mov	r0, r3
 8007022:	f000 fff9 	bl	8008018 <pvPortMalloc>
 8007026:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d011      	beq.n	8007052 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	3348      	adds	r3, #72	@ 0x48
 8007036:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007040:	79fa      	ldrb	r2, [r7, #7]
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	4613      	mov	r3, r2
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	68b9      	ldr	r1, [r7, #8]
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 f805 	bl	800705c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007052:	69bb      	ldr	r3, [r7, #24]
	}
 8007054:	4618      	mov	r0, r3
 8007056:	3720      	adds	r7, #32
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d103      	bne.n	8007078 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	e002      	b.n	800707e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800708a:	2101      	movs	r1, #1
 800708c:	69b8      	ldr	r0, [r7, #24]
 800708e:	f7ff fec3 	bl	8006e18 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007092:	bf00      	nop
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800709a:	b580      	push	{r7, lr}
 800709c:	b08e      	sub	sp, #56	@ 0x38
 800709e:	af04      	add	r7, sp, #16
 80070a0:	60f8      	str	r0, [r7, #12]
 80070a2:	60b9      	str	r1, [r7, #8]
 80070a4:	607a      	str	r2, [r7, #4]
 80070a6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10b      	bne.n	80070c6 <xTaskCreateStatic+0x2c>
	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	623b      	str	r3, [r7, #32]
}
 80070c0:	bf00      	nop
 80070c2:	bf00      	nop
 80070c4:	e7fd      	b.n	80070c2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10b      	bne.n	80070e4 <xTaskCreateStatic+0x4a>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	61fb      	str	r3, [r7, #28]
}
 80070de:	bf00      	nop
 80070e0:	bf00      	nop
 80070e2:	e7fd      	b.n	80070e0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80070e4:	2354      	movs	r3, #84	@ 0x54
 80070e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	2b54      	cmp	r3, #84	@ 0x54
 80070ec:	d00b      	beq.n	8007106 <xTaskCreateStatic+0x6c>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	61bb      	str	r3, [r7, #24]
}
 8007100:	bf00      	nop
 8007102:	bf00      	nop
 8007104:	e7fd      	b.n	8007102 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007106:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710a:	2b00      	cmp	r3, #0
 800710c:	d01e      	beq.n	800714c <xTaskCreateStatic+0xb2>
 800710e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007110:	2b00      	cmp	r3, #0
 8007112:	d01b      	beq.n	800714c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007116:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800711c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800711e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007120:	2202      	movs	r2, #2
 8007122:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007126:	2300      	movs	r3, #0
 8007128:	9303      	str	r3, [sp, #12]
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712c:	9302      	str	r3, [sp, #8]
 800712e:	f107 0314 	add.w	r3, r7, #20
 8007132:	9301      	str	r3, [sp, #4]
 8007134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	68b9      	ldr	r1, [r7, #8]
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 f850 	bl	80071e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007144:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007146:	f000 f8d5 	bl	80072f4 <prvAddNewTaskToReadyList>
 800714a:	e001      	b.n	8007150 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800714c:	2300      	movs	r3, #0
 800714e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007150:	697b      	ldr	r3, [r7, #20]
	}
 8007152:	4618      	mov	r0, r3
 8007154:	3728      	adds	r7, #40	@ 0x28
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800715a:	b580      	push	{r7, lr}
 800715c:	b08c      	sub	sp, #48	@ 0x30
 800715e:	af04      	add	r7, sp, #16
 8007160:	60f8      	str	r0, [r7, #12]
 8007162:	60b9      	str	r1, [r7, #8]
 8007164:	603b      	str	r3, [r7, #0]
 8007166:	4613      	mov	r3, r2
 8007168:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800716a:	88fb      	ldrh	r3, [r7, #6]
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4618      	mov	r0, r3
 8007170:	f000 ff52 	bl	8008018 <pvPortMalloc>
 8007174:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00e      	beq.n	800719a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800717c:	2054      	movs	r0, #84	@ 0x54
 800717e:	f000 ff4b 	bl	8008018 <pvPortMalloc>
 8007182:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007190:	e005      	b.n	800719e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007192:	6978      	ldr	r0, [r7, #20]
 8007194:	f001 f80e 	bl	80081b4 <vPortFree>
 8007198:	e001      	b.n	800719e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800719a:	2300      	movs	r3, #0
 800719c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d017      	beq.n	80071d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071ac:	88fa      	ldrh	r2, [r7, #6]
 80071ae:	2300      	movs	r3, #0
 80071b0:	9303      	str	r3, [sp, #12]
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	9302      	str	r3, [sp, #8]
 80071b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	68b9      	ldr	r1, [r7, #8]
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 f80e 	bl	80071e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071c8:	69f8      	ldr	r0, [r7, #28]
 80071ca:	f000 f893 	bl	80072f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071ce:	2301      	movs	r3, #1
 80071d0:	61bb      	str	r3, [r7, #24]
 80071d2:	e002      	b.n	80071da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071d4:	f04f 33ff 	mov.w	r3, #4294967295
 80071d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071da:	69bb      	ldr	r3, [r7, #24]
	}
 80071dc:	4618      	mov	r0, r3
 80071de:	3720      	adds	r7, #32
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b088      	sub	sp, #32
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80071f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80071fc:	3b01      	subs	r3, #1
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	f023 0307 	bic.w	r3, r3, #7
 800720a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00b      	beq.n	800722e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	617b      	str	r3, [r7, #20]
}
 8007228:	bf00      	nop
 800722a:	bf00      	nop
 800722c:	e7fd      	b.n	800722a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d01f      	beq.n	8007274 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007234:	2300      	movs	r3, #0
 8007236:	61fb      	str	r3, [r7, #28]
 8007238:	e012      	b.n	8007260 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	4413      	add	r3, r2
 8007240:	7819      	ldrb	r1, [r3, #0]
 8007242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	4413      	add	r3, r2
 8007248:	3334      	adds	r3, #52	@ 0x34
 800724a:	460a      	mov	r2, r1
 800724c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	4413      	add	r3, r2
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d006      	beq.n	8007268 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	3301      	adds	r3, #1
 800725e:	61fb      	str	r3, [r7, #28]
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	2b0f      	cmp	r3, #15
 8007264:	d9e9      	bls.n	800723a <prvInitialiseNewTask+0x56>
 8007266:	e000      	b.n	800726a <prvInitialiseNewTask+0x86>
			{
				break;
 8007268:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800726a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726c:	2200      	movs	r2, #0
 800726e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007272:	e003      	b.n	800727c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800727c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727e:	2b06      	cmp	r3, #6
 8007280:	d901      	bls.n	8007286 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007282:	2306      	movs	r3, #6
 8007284:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007288:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800728a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800728c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007290:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	2200      	movs	r2, #0
 8007296:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729a:	3304      	adds	r3, #4
 800729c:	4618      	mov	r0, r3
 800729e:	f7ff fd27 	bl	8006cf0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a4:	3318      	adds	r3, #24
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7ff fd22 	bl	8006cf0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b4:	f1c3 0207 	rsb	r2, r3, #7
 80072b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072c0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c4:	2200      	movs	r2, #0
 80072c6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	68f9      	ldr	r1, [r7, #12]
 80072d4:	69b8      	ldr	r0, [r7, #24]
 80072d6:	f000 fc8f 	bl	8007bf8 <pxPortInitialiseStack>
 80072da:	4602      	mov	r2, r0
 80072dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80072e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d002      	beq.n	80072ec <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80072e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072ec:	bf00      	nop
 80072ee:	3720      	adds	r7, #32
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80072fc:	f000 fdac 	bl	8007e58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007300:	4b2a      	ldr	r3, [pc, #168]	@ (80073ac <prvAddNewTaskToReadyList+0xb8>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3301      	adds	r3, #1
 8007306:	4a29      	ldr	r2, [pc, #164]	@ (80073ac <prvAddNewTaskToReadyList+0xb8>)
 8007308:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800730a:	4b29      	ldr	r3, [pc, #164]	@ (80073b0 <prvAddNewTaskToReadyList+0xbc>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d109      	bne.n	8007326 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007312:	4a27      	ldr	r2, [pc, #156]	@ (80073b0 <prvAddNewTaskToReadyList+0xbc>)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007318:	4b24      	ldr	r3, [pc, #144]	@ (80073ac <prvAddNewTaskToReadyList+0xb8>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d110      	bne.n	8007342 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007320:	f000 fb28 	bl	8007974 <prvInitialiseTaskLists>
 8007324:	e00d      	b.n	8007342 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007326:	4b23      	ldr	r3, [pc, #140]	@ (80073b4 <prvAddNewTaskToReadyList+0xc0>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d109      	bne.n	8007342 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800732e:	4b20      	ldr	r3, [pc, #128]	@ (80073b0 <prvAddNewTaskToReadyList+0xbc>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007338:	429a      	cmp	r2, r3
 800733a:	d802      	bhi.n	8007342 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800733c:	4a1c      	ldr	r2, [pc, #112]	@ (80073b0 <prvAddNewTaskToReadyList+0xbc>)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007342:	4b1d      	ldr	r3, [pc, #116]	@ (80073b8 <prvAddNewTaskToReadyList+0xc4>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3301      	adds	r3, #1
 8007348:	4a1b      	ldr	r2, [pc, #108]	@ (80073b8 <prvAddNewTaskToReadyList+0xc4>)
 800734a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007350:	2201      	movs	r2, #1
 8007352:	409a      	lsls	r2, r3
 8007354:	4b19      	ldr	r3, [pc, #100]	@ (80073bc <prvAddNewTaskToReadyList+0xc8>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4313      	orrs	r3, r2
 800735a:	4a18      	ldr	r2, [pc, #96]	@ (80073bc <prvAddNewTaskToReadyList+0xc8>)
 800735c:	6013      	str	r3, [r2, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007362:	4613      	mov	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4a15      	ldr	r2, [pc, #84]	@ (80073c0 <prvAddNewTaskToReadyList+0xcc>)
 800736c:	441a      	add	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	3304      	adds	r3, #4
 8007372:	4619      	mov	r1, r3
 8007374:	4610      	mov	r0, r2
 8007376:	f7ff fcc8 	bl	8006d0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800737a:	f000 fd9f 	bl	8007ebc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800737e:	4b0d      	ldr	r3, [pc, #52]	@ (80073b4 <prvAddNewTaskToReadyList+0xc0>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00e      	beq.n	80073a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007386:	4b0a      	ldr	r3, [pc, #40]	@ (80073b0 <prvAddNewTaskToReadyList+0xbc>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007390:	429a      	cmp	r2, r3
 8007392:	d207      	bcs.n	80073a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007394:	4b0b      	ldr	r3, [pc, #44]	@ (80073c4 <prvAddNewTaskToReadyList+0xd0>)
 8007396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800739a:	601a      	str	r2, [r3, #0]
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073a4:	bf00      	nop
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	200014d8 	.word	0x200014d8
 80073b0:	200013d8 	.word	0x200013d8
 80073b4:	200014e4 	.word	0x200014e4
 80073b8:	200014f4 	.word	0x200014f4
 80073bc:	200014e0 	.word	0x200014e0
 80073c0:	200013dc 	.word	0x200013dc
 80073c4:	e000ed04 	.word	0xe000ed04

080073c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80073d0:	2300      	movs	r3, #0
 80073d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d018      	beq.n	800740c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80073da:	4b14      	ldr	r3, [pc, #80]	@ (800742c <vTaskDelay+0x64>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00b      	beq.n	80073fa <vTaskDelay+0x32>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	60bb      	str	r3, [r7, #8]
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop
 80073f8:	e7fd      	b.n	80073f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80073fa:	f000 f87d 	bl	80074f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80073fe:	2100      	movs	r1, #0
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fb93 	bl	8007b2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007406:	f000 f885 	bl	8007514 <xTaskResumeAll>
 800740a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d107      	bne.n	8007422 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007412:	4b07      	ldr	r3, [pc, #28]	@ (8007430 <vTaskDelay+0x68>)
 8007414:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007422:	bf00      	nop
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	20001500 	.word	0x20001500
 8007430:	e000ed04 	.word	0xe000ed04

08007434 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08a      	sub	sp, #40	@ 0x28
 8007438:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800743a:	2300      	movs	r3, #0
 800743c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800743e:	2300      	movs	r3, #0
 8007440:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007442:	463a      	mov	r2, r7
 8007444:	1d39      	adds	r1, r7, #4
 8007446:	f107 0308 	add.w	r3, r7, #8
 800744a:	4618      	mov	r0, r3
 800744c:	f7f9 fd42 	bl	8000ed4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007450:	6839      	ldr	r1, [r7, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	9202      	str	r2, [sp, #8]
 8007458:	9301      	str	r3, [sp, #4]
 800745a:	2300      	movs	r3, #0
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	2300      	movs	r3, #0
 8007460:	460a      	mov	r2, r1
 8007462:	491f      	ldr	r1, [pc, #124]	@ (80074e0 <vTaskStartScheduler+0xac>)
 8007464:	481f      	ldr	r0, [pc, #124]	@ (80074e4 <vTaskStartScheduler+0xb0>)
 8007466:	f7ff fe18 	bl	800709a <xTaskCreateStatic>
 800746a:	4603      	mov	r3, r0
 800746c:	4a1e      	ldr	r2, [pc, #120]	@ (80074e8 <vTaskStartScheduler+0xb4>)
 800746e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007470:	4b1d      	ldr	r3, [pc, #116]	@ (80074e8 <vTaskStartScheduler+0xb4>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007478:	2301      	movs	r3, #1
 800747a:	617b      	str	r3, [r7, #20]
 800747c:	e001      	b.n	8007482 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800747e:	2300      	movs	r3, #0
 8007480:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d116      	bne.n	80074b6 <vTaskStartScheduler+0x82>
	__asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	613b      	str	r3, [r7, #16]
}
 800749a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800749c:	4b13      	ldr	r3, [pc, #76]	@ (80074ec <vTaskStartScheduler+0xb8>)
 800749e:	f04f 32ff 	mov.w	r2, #4294967295
 80074a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074a4:	4b12      	ldr	r3, [pc, #72]	@ (80074f0 <vTaskStartScheduler+0xbc>)
 80074a6:	2201      	movs	r2, #1
 80074a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074aa:	4b12      	ldr	r3, [pc, #72]	@ (80074f4 <vTaskStartScheduler+0xc0>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074b0:	f000 fc2e 	bl	8007d10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80074b4:	e00f      	b.n	80074d6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074bc:	d10b      	bne.n	80074d6 <vTaskStartScheduler+0xa2>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	60fb      	str	r3, [r7, #12]
}
 80074d0:	bf00      	nop
 80074d2:	bf00      	nop
 80074d4:	e7fd      	b.n	80074d2 <vTaskStartScheduler+0x9e>
}
 80074d6:	bf00      	nop
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	0800b390 	.word	0x0800b390
 80074e4:	08007945 	.word	0x08007945
 80074e8:	200014fc 	.word	0x200014fc
 80074ec:	200014f8 	.word	0x200014f8
 80074f0:	200014e4 	.word	0x200014e4
 80074f4:	200014dc 	.word	0x200014dc

080074f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80074f8:	b480      	push	{r7}
 80074fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80074fc:	4b04      	ldr	r3, [pc, #16]	@ (8007510 <vTaskSuspendAll+0x18>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3301      	adds	r3, #1
 8007502:	4a03      	ldr	r2, [pc, #12]	@ (8007510 <vTaskSuspendAll+0x18>)
 8007504:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007506:	bf00      	nop
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	20001500 	.word	0x20001500

08007514 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800751a:	2300      	movs	r3, #0
 800751c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800751e:	2300      	movs	r3, #0
 8007520:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007522:	4b42      	ldr	r3, [pc, #264]	@ (800762c <xTaskResumeAll+0x118>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10b      	bne.n	8007542 <xTaskResumeAll+0x2e>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	603b      	str	r3, [r7, #0]
}
 800753c:	bf00      	nop
 800753e:	bf00      	nop
 8007540:	e7fd      	b.n	800753e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007542:	f000 fc89 	bl	8007e58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007546:	4b39      	ldr	r3, [pc, #228]	@ (800762c <xTaskResumeAll+0x118>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3b01      	subs	r3, #1
 800754c:	4a37      	ldr	r2, [pc, #220]	@ (800762c <xTaskResumeAll+0x118>)
 800754e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007550:	4b36      	ldr	r3, [pc, #216]	@ (800762c <xTaskResumeAll+0x118>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d161      	bne.n	800761c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007558:	4b35      	ldr	r3, [pc, #212]	@ (8007630 <xTaskResumeAll+0x11c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d05d      	beq.n	800761c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007560:	e02e      	b.n	80075c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007562:	4b34      	ldr	r3, [pc, #208]	@ (8007634 <xTaskResumeAll+0x120>)
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	3318      	adds	r3, #24
 800756e:	4618      	mov	r0, r3
 8007570:	f7ff fc28 	bl	8006dc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	3304      	adds	r3, #4
 8007578:	4618      	mov	r0, r3
 800757a:	f7ff fc23 	bl	8006dc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007582:	2201      	movs	r2, #1
 8007584:	409a      	lsls	r2, r3
 8007586:	4b2c      	ldr	r3, [pc, #176]	@ (8007638 <xTaskResumeAll+0x124>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4313      	orrs	r3, r2
 800758c:	4a2a      	ldr	r2, [pc, #168]	@ (8007638 <xTaskResumeAll+0x124>)
 800758e:	6013      	str	r3, [r2, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007594:	4613      	mov	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4a27      	ldr	r2, [pc, #156]	@ (800763c <xTaskResumeAll+0x128>)
 800759e:	441a      	add	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	3304      	adds	r3, #4
 80075a4:	4619      	mov	r1, r3
 80075a6:	4610      	mov	r0, r2
 80075a8:	f7ff fbaf 	bl	8006d0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b0:	4b23      	ldr	r3, [pc, #140]	@ (8007640 <xTaskResumeAll+0x12c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d302      	bcc.n	80075c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80075ba:	4b22      	ldr	r3, [pc, #136]	@ (8007644 <xTaskResumeAll+0x130>)
 80075bc:	2201      	movs	r2, #1
 80075be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075c0:	4b1c      	ldr	r3, [pc, #112]	@ (8007634 <xTaskResumeAll+0x120>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1cc      	bne.n	8007562 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80075ce:	f000 fa6f 	bl	8007ab0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80075d2:	4b1d      	ldr	r3, [pc, #116]	@ (8007648 <xTaskResumeAll+0x134>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d010      	beq.n	8007600 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80075de:	f000 f837 	bl	8007650 <xTaskIncrementTick>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80075e8:	4b16      	ldr	r3, [pc, #88]	@ (8007644 <xTaskResumeAll+0x130>)
 80075ea:	2201      	movs	r2, #1
 80075ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	3b01      	subs	r3, #1
 80075f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1f1      	bne.n	80075de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80075fa:	4b13      	ldr	r3, [pc, #76]	@ (8007648 <xTaskResumeAll+0x134>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007600:	4b10      	ldr	r3, [pc, #64]	@ (8007644 <xTaskResumeAll+0x130>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d009      	beq.n	800761c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007608:	2301      	movs	r3, #1
 800760a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800760c:	4b0f      	ldr	r3, [pc, #60]	@ (800764c <xTaskResumeAll+0x138>)
 800760e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800761c:	f000 fc4e 	bl	8007ebc <vPortExitCritical>

	return xAlreadyYielded;
 8007620:	68bb      	ldr	r3, [r7, #8]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20001500 	.word	0x20001500
 8007630:	200014d8 	.word	0x200014d8
 8007634:	20001498 	.word	0x20001498
 8007638:	200014e0 	.word	0x200014e0
 800763c:	200013dc 	.word	0x200013dc
 8007640:	200013d8 	.word	0x200013d8
 8007644:	200014ec 	.word	0x200014ec
 8007648:	200014e8 	.word	0x200014e8
 800764c:	e000ed04 	.word	0xe000ed04

08007650 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007656:	2300      	movs	r3, #0
 8007658:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800765a:	4b4f      	ldr	r3, [pc, #316]	@ (8007798 <xTaskIncrementTick+0x148>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	f040 808f 	bne.w	8007782 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007664:	4b4d      	ldr	r3, [pc, #308]	@ (800779c <xTaskIncrementTick+0x14c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3301      	adds	r3, #1
 800766a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800766c:	4a4b      	ldr	r2, [pc, #300]	@ (800779c <xTaskIncrementTick+0x14c>)
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d121      	bne.n	80076bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007678:	4b49      	ldr	r3, [pc, #292]	@ (80077a0 <xTaskIncrementTick+0x150>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00b      	beq.n	800769a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007686:	f383 8811 	msr	BASEPRI, r3
 800768a:	f3bf 8f6f 	isb	sy
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	603b      	str	r3, [r7, #0]
}
 8007694:	bf00      	nop
 8007696:	bf00      	nop
 8007698:	e7fd      	b.n	8007696 <xTaskIncrementTick+0x46>
 800769a:	4b41      	ldr	r3, [pc, #260]	@ (80077a0 <xTaskIncrementTick+0x150>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	4b40      	ldr	r3, [pc, #256]	@ (80077a4 <xTaskIncrementTick+0x154>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a3e      	ldr	r2, [pc, #248]	@ (80077a0 <xTaskIncrementTick+0x150>)
 80076a6:	6013      	str	r3, [r2, #0]
 80076a8:	4a3e      	ldr	r2, [pc, #248]	@ (80077a4 <xTaskIncrementTick+0x154>)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	4b3e      	ldr	r3, [pc, #248]	@ (80077a8 <xTaskIncrementTick+0x158>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3301      	adds	r3, #1
 80076b4:	4a3c      	ldr	r2, [pc, #240]	@ (80077a8 <xTaskIncrementTick+0x158>)
 80076b6:	6013      	str	r3, [r2, #0]
 80076b8:	f000 f9fa 	bl	8007ab0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80076bc:	4b3b      	ldr	r3, [pc, #236]	@ (80077ac <xTaskIncrementTick+0x15c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d348      	bcc.n	8007758 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076c6:	4b36      	ldr	r3, [pc, #216]	@ (80077a0 <xTaskIncrementTick+0x150>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d104      	bne.n	80076da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076d0:	4b36      	ldr	r3, [pc, #216]	@ (80077ac <xTaskIncrementTick+0x15c>)
 80076d2:	f04f 32ff 	mov.w	r2, #4294967295
 80076d6:	601a      	str	r2, [r3, #0]
					break;
 80076d8:	e03e      	b.n	8007758 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076da:	4b31      	ldr	r3, [pc, #196]	@ (80077a0 <xTaskIncrementTick+0x150>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d203      	bcs.n	80076fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80076f2:	4a2e      	ldr	r2, [pc, #184]	@ (80077ac <xTaskIncrementTick+0x15c>)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80076f8:	e02e      	b.n	8007758 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	3304      	adds	r3, #4
 80076fe:	4618      	mov	r0, r3
 8007700:	f7ff fb60 	bl	8006dc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007708:	2b00      	cmp	r3, #0
 800770a:	d004      	beq.n	8007716 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	3318      	adds	r3, #24
 8007710:	4618      	mov	r0, r3
 8007712:	f7ff fb57 	bl	8006dc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771a:	2201      	movs	r2, #1
 800771c:	409a      	lsls	r2, r3
 800771e:	4b24      	ldr	r3, [pc, #144]	@ (80077b0 <xTaskIncrementTick+0x160>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4313      	orrs	r3, r2
 8007724:	4a22      	ldr	r2, [pc, #136]	@ (80077b0 <xTaskIncrementTick+0x160>)
 8007726:	6013      	str	r3, [r2, #0]
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800772c:	4613      	mov	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4a1f      	ldr	r2, [pc, #124]	@ (80077b4 <xTaskIncrementTick+0x164>)
 8007736:	441a      	add	r2, r3
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	3304      	adds	r3, #4
 800773c:	4619      	mov	r1, r3
 800773e:	4610      	mov	r0, r2
 8007740:	f7ff fae3 	bl	8006d0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007748:	4b1b      	ldr	r3, [pc, #108]	@ (80077b8 <xTaskIncrementTick+0x168>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774e:	429a      	cmp	r2, r3
 8007750:	d3b9      	bcc.n	80076c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007752:	2301      	movs	r3, #1
 8007754:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007756:	e7b6      	b.n	80076c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007758:	4b17      	ldr	r3, [pc, #92]	@ (80077b8 <xTaskIncrementTick+0x168>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800775e:	4915      	ldr	r1, [pc, #84]	@ (80077b4 <xTaskIncrementTick+0x164>)
 8007760:	4613      	mov	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	440b      	add	r3, r1
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d901      	bls.n	8007774 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007770:	2301      	movs	r3, #1
 8007772:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007774:	4b11      	ldr	r3, [pc, #68]	@ (80077bc <xTaskIncrementTick+0x16c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d007      	beq.n	800778c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800777c:	2301      	movs	r3, #1
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	e004      	b.n	800778c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007782:	4b0f      	ldr	r3, [pc, #60]	@ (80077c0 <xTaskIncrementTick+0x170>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3301      	adds	r3, #1
 8007788:	4a0d      	ldr	r2, [pc, #52]	@ (80077c0 <xTaskIncrementTick+0x170>)
 800778a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800778c:	697b      	ldr	r3, [r7, #20]
}
 800778e:	4618      	mov	r0, r3
 8007790:	3718      	adds	r7, #24
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	20001500 	.word	0x20001500
 800779c:	200014dc 	.word	0x200014dc
 80077a0:	20001490 	.word	0x20001490
 80077a4:	20001494 	.word	0x20001494
 80077a8:	200014f0 	.word	0x200014f0
 80077ac:	200014f8 	.word	0x200014f8
 80077b0:	200014e0 	.word	0x200014e0
 80077b4:	200013dc 	.word	0x200013dc
 80077b8:	200013d8 	.word	0x200013d8
 80077bc:	200014ec 	.word	0x200014ec
 80077c0:	200014e8 	.word	0x200014e8

080077c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80077c4:	b480      	push	{r7}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80077ca:	4b27      	ldr	r3, [pc, #156]	@ (8007868 <vTaskSwitchContext+0xa4>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d003      	beq.n	80077da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80077d2:	4b26      	ldr	r3, [pc, #152]	@ (800786c <vTaskSwitchContext+0xa8>)
 80077d4:	2201      	movs	r2, #1
 80077d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80077d8:	e040      	b.n	800785c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80077da:	4b24      	ldr	r3, [pc, #144]	@ (800786c <vTaskSwitchContext+0xa8>)
 80077dc:	2200      	movs	r2, #0
 80077de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077e0:	4b23      	ldr	r3, [pc, #140]	@ (8007870 <vTaskSwitchContext+0xac>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	fab3 f383 	clz	r3, r3
 80077ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80077ee:	7afb      	ldrb	r3, [r7, #11]
 80077f0:	f1c3 031f 	rsb	r3, r3, #31
 80077f4:	617b      	str	r3, [r7, #20]
 80077f6:	491f      	ldr	r1, [pc, #124]	@ (8007874 <vTaskSwitchContext+0xb0>)
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	4613      	mov	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	440b      	add	r3, r1
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10b      	bne.n	8007822 <vTaskSwitchContext+0x5e>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	607b      	str	r3, [r7, #4]
}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	e7fd      	b.n	800781e <vTaskSwitchContext+0x5a>
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	4613      	mov	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4413      	add	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4a11      	ldr	r2, [pc, #68]	@ (8007874 <vTaskSwitchContext+0xb0>)
 800782e:	4413      	add	r3, r2
 8007830:	613b      	str	r3, [r7, #16]
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	605a      	str	r2, [r3, #4]
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	3308      	adds	r3, #8
 8007844:	429a      	cmp	r2, r3
 8007846:	d104      	bne.n	8007852 <vTaskSwitchContext+0x8e>
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	605a      	str	r2, [r3, #4]
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	4a07      	ldr	r2, [pc, #28]	@ (8007878 <vTaskSwitchContext+0xb4>)
 800785a:	6013      	str	r3, [r2, #0]
}
 800785c:	bf00      	nop
 800785e:	371c      	adds	r7, #28
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	20001500 	.word	0x20001500
 800786c:	200014ec 	.word	0x200014ec
 8007870:	200014e0 	.word	0x200014e0
 8007874:	200013dc 	.word	0x200013dc
 8007878:	200013d8 	.word	0x200013d8

0800787c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10b      	bne.n	80078aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	60fb      	str	r3, [r7, #12]
}
 80078a4:	bf00      	nop
 80078a6:	bf00      	nop
 80078a8:	e7fd      	b.n	80078a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	3318      	adds	r3, #24
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7ff fa88 	bl	8006dc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078b4:	4b1d      	ldr	r3, [pc, #116]	@ (800792c <xTaskRemoveFromEventList+0xb0>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d11c      	bne.n	80078f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	3304      	adds	r3, #4
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7ff fa7f 	bl	8006dc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ca:	2201      	movs	r2, #1
 80078cc:	409a      	lsls	r2, r3
 80078ce:	4b18      	ldr	r3, [pc, #96]	@ (8007930 <xTaskRemoveFromEventList+0xb4>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	4a16      	ldr	r2, [pc, #88]	@ (8007930 <xTaskRemoveFromEventList+0xb4>)
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078dc:	4613      	mov	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4a13      	ldr	r2, [pc, #76]	@ (8007934 <xTaskRemoveFromEventList+0xb8>)
 80078e6:	441a      	add	r2, r3
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	3304      	adds	r3, #4
 80078ec:	4619      	mov	r1, r3
 80078ee:	4610      	mov	r0, r2
 80078f0:	f7ff fa0b 	bl	8006d0a <vListInsertEnd>
 80078f4:	e005      	b.n	8007902 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	3318      	adds	r3, #24
 80078fa:	4619      	mov	r1, r3
 80078fc:	480e      	ldr	r0, [pc, #56]	@ (8007938 <xTaskRemoveFromEventList+0xbc>)
 80078fe:	f7ff fa04 	bl	8006d0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007906:	4b0d      	ldr	r3, [pc, #52]	@ (800793c <xTaskRemoveFromEventList+0xc0>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790c:	429a      	cmp	r2, r3
 800790e:	d905      	bls.n	800791c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007910:	2301      	movs	r3, #1
 8007912:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007914:	4b0a      	ldr	r3, [pc, #40]	@ (8007940 <xTaskRemoveFromEventList+0xc4>)
 8007916:	2201      	movs	r2, #1
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	e001      	b.n	8007920 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800791c:	2300      	movs	r3, #0
 800791e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007920:	697b      	ldr	r3, [r7, #20]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20001500 	.word	0x20001500
 8007930:	200014e0 	.word	0x200014e0
 8007934:	200013dc 	.word	0x200013dc
 8007938:	20001498 	.word	0x20001498
 800793c:	200013d8 	.word	0x200013d8
 8007940:	200014ec 	.word	0x200014ec

08007944 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800794c:	f000 f852 	bl	80079f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007950:	4b06      	ldr	r3, [pc, #24]	@ (800796c <prvIdleTask+0x28>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d9f9      	bls.n	800794c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007958:	4b05      	ldr	r3, [pc, #20]	@ (8007970 <prvIdleTask+0x2c>)
 800795a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007968:	e7f0      	b.n	800794c <prvIdleTask+0x8>
 800796a:	bf00      	nop
 800796c:	200013dc 	.word	0x200013dc
 8007970:	e000ed04 	.word	0xe000ed04

08007974 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800797a:	2300      	movs	r3, #0
 800797c:	607b      	str	r3, [r7, #4]
 800797e:	e00c      	b.n	800799a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	4613      	mov	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	4413      	add	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4a12      	ldr	r2, [pc, #72]	@ (80079d4 <prvInitialiseTaskLists+0x60>)
 800798c:	4413      	add	r3, r2
 800798e:	4618      	mov	r0, r3
 8007990:	f7ff f98e 	bl	8006cb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3301      	adds	r3, #1
 8007998:	607b      	str	r3, [r7, #4]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2b06      	cmp	r3, #6
 800799e:	d9ef      	bls.n	8007980 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80079a0:	480d      	ldr	r0, [pc, #52]	@ (80079d8 <prvInitialiseTaskLists+0x64>)
 80079a2:	f7ff f985 	bl	8006cb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80079a6:	480d      	ldr	r0, [pc, #52]	@ (80079dc <prvInitialiseTaskLists+0x68>)
 80079a8:	f7ff f982 	bl	8006cb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80079ac:	480c      	ldr	r0, [pc, #48]	@ (80079e0 <prvInitialiseTaskLists+0x6c>)
 80079ae:	f7ff f97f 	bl	8006cb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80079b2:	480c      	ldr	r0, [pc, #48]	@ (80079e4 <prvInitialiseTaskLists+0x70>)
 80079b4:	f7ff f97c 	bl	8006cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80079b8:	480b      	ldr	r0, [pc, #44]	@ (80079e8 <prvInitialiseTaskLists+0x74>)
 80079ba:	f7ff f979 	bl	8006cb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80079be:	4b0b      	ldr	r3, [pc, #44]	@ (80079ec <prvInitialiseTaskLists+0x78>)
 80079c0:	4a05      	ldr	r2, [pc, #20]	@ (80079d8 <prvInitialiseTaskLists+0x64>)
 80079c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079c4:	4b0a      	ldr	r3, [pc, #40]	@ (80079f0 <prvInitialiseTaskLists+0x7c>)
 80079c6:	4a05      	ldr	r2, [pc, #20]	@ (80079dc <prvInitialiseTaskLists+0x68>)
 80079c8:	601a      	str	r2, [r3, #0]
}
 80079ca:	bf00      	nop
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	200013dc 	.word	0x200013dc
 80079d8:	20001468 	.word	0x20001468
 80079dc:	2000147c 	.word	0x2000147c
 80079e0:	20001498 	.word	0x20001498
 80079e4:	200014ac 	.word	0x200014ac
 80079e8:	200014c4 	.word	0x200014c4
 80079ec:	20001490 	.word	0x20001490
 80079f0:	20001494 	.word	0x20001494

080079f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079fa:	e019      	b.n	8007a30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80079fc:	f000 fa2c 	bl	8007e58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a00:	4b10      	ldr	r3, [pc, #64]	@ (8007a44 <prvCheckTasksWaitingTermination+0x50>)
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7ff f9d9 	bl	8006dc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a12:	4b0d      	ldr	r3, [pc, #52]	@ (8007a48 <prvCheckTasksWaitingTermination+0x54>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	4a0b      	ldr	r2, [pc, #44]	@ (8007a48 <prvCheckTasksWaitingTermination+0x54>)
 8007a1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a4c <prvCheckTasksWaitingTermination+0x58>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3b01      	subs	r3, #1
 8007a22:	4a0a      	ldr	r2, [pc, #40]	@ (8007a4c <prvCheckTasksWaitingTermination+0x58>)
 8007a24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a26:	f000 fa49 	bl	8007ebc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f810 	bl	8007a50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a30:	4b06      	ldr	r3, [pc, #24]	@ (8007a4c <prvCheckTasksWaitingTermination+0x58>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1e1      	bne.n	80079fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a38:	bf00      	nop
 8007a3a:	bf00      	nop
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	200014ac 	.word	0x200014ac
 8007a48:	200014d8 	.word	0x200014d8
 8007a4c:	200014c0 	.word	0x200014c0

08007a50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d108      	bne.n	8007a74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 fba4 	bl	80081b4 <vPortFree>
				vPortFree( pxTCB );
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fba1 	bl	80081b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a72:	e019      	b.n	8007aa8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d103      	bne.n	8007a86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fb98 	bl	80081b4 <vPortFree>
	}
 8007a84:	e010      	b.n	8007aa8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d00b      	beq.n	8007aa8 <prvDeleteTCB+0x58>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	60fb      	str	r3, [r7, #12]
}
 8007aa2:	bf00      	nop
 8007aa4:	bf00      	nop
 8007aa6:	e7fd      	b.n	8007aa4 <prvDeleteTCB+0x54>
	}
 8007aa8:	bf00      	nop
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae8 <prvResetNextTaskUnblockTime+0x38>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d104      	bne.n	8007aca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8007aec <prvResetNextTaskUnblockTime+0x3c>)
 8007ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ac8:	e008      	b.n	8007adc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aca:	4b07      	ldr	r3, [pc, #28]	@ (8007ae8 <prvResetNextTaskUnblockTime+0x38>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	4a04      	ldr	r2, [pc, #16]	@ (8007aec <prvResetNextTaskUnblockTime+0x3c>)
 8007ada:	6013      	str	r3, [r2, #0]
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	20001490 	.word	0x20001490
 8007aec:	200014f8 	.word	0x200014f8

08007af0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007af6:	4b0b      	ldr	r3, [pc, #44]	@ (8007b24 <xTaskGetSchedulerState+0x34>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d102      	bne.n	8007b04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007afe:	2301      	movs	r3, #1
 8007b00:	607b      	str	r3, [r7, #4]
 8007b02:	e008      	b.n	8007b16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b04:	4b08      	ldr	r3, [pc, #32]	@ (8007b28 <xTaskGetSchedulerState+0x38>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d102      	bne.n	8007b12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	607b      	str	r3, [r7, #4]
 8007b10:	e001      	b.n	8007b16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b12:	2300      	movs	r3, #0
 8007b14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b16:	687b      	ldr	r3, [r7, #4]
	}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	200014e4 	.word	0x200014e4
 8007b28:	20001500 	.word	0x20001500

08007b2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b36:	4b29      	ldr	r3, [pc, #164]	@ (8007bdc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b3c:	4b28      	ldr	r3, [pc, #160]	@ (8007be0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3304      	adds	r3, #4
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7ff f93e 	bl	8006dc4 <uxListRemove>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10b      	bne.n	8007b66 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007b4e:	4b24      	ldr	r3, [pc, #144]	@ (8007be0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b54:	2201      	movs	r2, #1
 8007b56:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5a:	43da      	mvns	r2, r3
 8007b5c:	4b21      	ldr	r3, [pc, #132]	@ (8007be4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4013      	ands	r3, r2
 8007b62:	4a20      	ldr	r2, [pc, #128]	@ (8007be4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b64:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6c:	d10a      	bne.n	8007b84 <prvAddCurrentTaskToDelayedList+0x58>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d007      	beq.n	8007b84 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b74:	4b1a      	ldr	r3, [pc, #104]	@ (8007be0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3304      	adds	r3, #4
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	481a      	ldr	r0, [pc, #104]	@ (8007be8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007b7e:	f7ff f8c4 	bl	8006d0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b82:	e026      	b.n	8007bd2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4413      	add	r3, r2
 8007b8a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b8c:	4b14      	ldr	r3, [pc, #80]	@ (8007be0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d209      	bcs.n	8007bb0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b9c:	4b13      	ldr	r3, [pc, #76]	@ (8007bec <prvAddCurrentTaskToDelayedList+0xc0>)
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8007be0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	4610      	mov	r0, r2
 8007baa:	f7ff f8d2 	bl	8006d52 <vListInsert>
}
 8007bae:	e010      	b.n	8007bd2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8007bf0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8007be0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3304      	adds	r3, #4
 8007bba:	4619      	mov	r1, r3
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	f7ff f8c8 	bl	8006d52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d202      	bcs.n	8007bd2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007bcc:	4a09      	ldr	r2, [pc, #36]	@ (8007bf4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	6013      	str	r3, [r2, #0]
}
 8007bd2:	bf00      	nop
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	200014dc 	.word	0x200014dc
 8007be0:	200013d8 	.word	0x200013d8
 8007be4:	200014e0 	.word	0x200014e0
 8007be8:	200014c4 	.word	0x200014c4
 8007bec:	20001494 	.word	0x20001494
 8007bf0:	20001490 	.word	0x20001490
 8007bf4:	200014f8 	.word	0x200014f8

08007bf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	3b04      	subs	r3, #4
 8007c08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007c10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	3b04      	subs	r3, #4
 8007c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f023 0201 	bic.w	r2, r3, #1
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	3b04      	subs	r3, #4
 8007c26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c28:	4a0c      	ldr	r2, [pc, #48]	@ (8007c5c <pxPortInitialiseStack+0x64>)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3b14      	subs	r3, #20
 8007c32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3b04      	subs	r3, #4
 8007c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f06f 0202 	mvn.w	r2, #2
 8007c46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	3b20      	subs	r3, #32
 8007c4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	08007c61 	.word	0x08007c61

08007c60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c66:	2300      	movs	r3, #0
 8007c68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c6a:	4b13      	ldr	r3, [pc, #76]	@ (8007cb8 <prvTaskExitError+0x58>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c72:	d00b      	beq.n	8007c8c <prvTaskExitError+0x2c>
	__asm volatile
 8007c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	60fb      	str	r3, [r7, #12]
}
 8007c86:	bf00      	nop
 8007c88:	bf00      	nop
 8007c8a:	e7fd      	b.n	8007c88 <prvTaskExitError+0x28>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	60bb      	str	r3, [r7, #8]
}
 8007c9e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ca0:	bf00      	nop
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d0fc      	beq.n	8007ca2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ca8:	bf00      	nop
 8007caa:	bf00      	nop
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	20000054 	.word	0x20000054
 8007cbc:	00000000 	.word	0x00000000

08007cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007cc0:	4b07      	ldr	r3, [pc, #28]	@ (8007ce0 <pxCurrentTCBConst2>)
 8007cc2:	6819      	ldr	r1, [r3, #0]
 8007cc4:	6808      	ldr	r0, [r1, #0]
 8007cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cca:	f380 8809 	msr	PSP, r0
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f04f 0000 	mov.w	r0, #0
 8007cd6:	f380 8811 	msr	BASEPRI, r0
 8007cda:	4770      	bx	lr
 8007cdc:	f3af 8000 	nop.w

08007ce0 <pxCurrentTCBConst2>:
 8007ce0:	200013d8 	.word	0x200013d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ce4:	bf00      	nop
 8007ce6:	bf00      	nop

08007ce8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ce8:	4808      	ldr	r0, [pc, #32]	@ (8007d0c <prvPortStartFirstTask+0x24>)
 8007cea:	6800      	ldr	r0, [r0, #0]
 8007cec:	6800      	ldr	r0, [r0, #0]
 8007cee:	f380 8808 	msr	MSP, r0
 8007cf2:	f04f 0000 	mov.w	r0, #0
 8007cf6:	f380 8814 	msr	CONTROL, r0
 8007cfa:	b662      	cpsie	i
 8007cfc:	b661      	cpsie	f
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	df00      	svc	0
 8007d08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d0a:	bf00      	nop
 8007d0c:	e000ed08 	.word	0xe000ed08

08007d10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007d16:	4b47      	ldr	r3, [pc, #284]	@ (8007e34 <xPortStartScheduler+0x124>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a47      	ldr	r2, [pc, #284]	@ (8007e38 <xPortStartScheduler+0x128>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d10b      	bne.n	8007d38 <xPortStartScheduler+0x28>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	60fb      	str	r3, [r7, #12]
}
 8007d32:	bf00      	nop
 8007d34:	bf00      	nop
 8007d36:	e7fd      	b.n	8007d34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007d38:	4b3e      	ldr	r3, [pc, #248]	@ (8007e34 <xPortStartScheduler+0x124>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a3f      	ldr	r2, [pc, #252]	@ (8007e3c <xPortStartScheduler+0x12c>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d10b      	bne.n	8007d5a <xPortStartScheduler+0x4a>
	__asm volatile
 8007d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d46:	f383 8811 	msr	BASEPRI, r3
 8007d4a:	f3bf 8f6f 	isb	sy
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	613b      	str	r3, [r7, #16]
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop
 8007d58:	e7fd      	b.n	8007d56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d5a:	4b39      	ldr	r3, [pc, #228]	@ (8007e40 <xPortStartScheduler+0x130>)
 8007d5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	22ff      	movs	r2, #255	@ 0xff
 8007d6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d74:	78fb      	ldrb	r3, [r7, #3]
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	4b31      	ldr	r3, [pc, #196]	@ (8007e44 <xPortStartScheduler+0x134>)
 8007d80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d82:	4b31      	ldr	r3, [pc, #196]	@ (8007e48 <xPortStartScheduler+0x138>)
 8007d84:	2207      	movs	r2, #7
 8007d86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d88:	e009      	b.n	8007d9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8007e48 <xPortStartScheduler+0x138>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	4a2d      	ldr	r2, [pc, #180]	@ (8007e48 <xPortStartScheduler+0x138>)
 8007d92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d94:	78fb      	ldrb	r3, [r7, #3]
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d9e:	78fb      	ldrb	r3, [r7, #3]
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007da6:	2b80      	cmp	r3, #128	@ 0x80
 8007da8:	d0ef      	beq.n	8007d8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007daa:	4b27      	ldr	r3, [pc, #156]	@ (8007e48 <xPortStartScheduler+0x138>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f1c3 0307 	rsb	r3, r3, #7
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	d00b      	beq.n	8007dce <xPortStartScheduler+0xbe>
	__asm volatile
 8007db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	60bb      	str	r3, [r7, #8]
}
 8007dc8:	bf00      	nop
 8007dca:	bf00      	nop
 8007dcc:	e7fd      	b.n	8007dca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007dce:	4b1e      	ldr	r3, [pc, #120]	@ (8007e48 <xPortStartScheduler+0x138>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	021b      	lsls	r3, r3, #8
 8007dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8007e48 <xPortStartScheduler+0x138>)
 8007dd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8007e48 <xPortStartScheduler+0x138>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007de0:	4a19      	ldr	r2, [pc, #100]	@ (8007e48 <xPortStartScheduler+0x138>)
 8007de2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	b2da      	uxtb	r2, r3
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007dec:	4b17      	ldr	r3, [pc, #92]	@ (8007e4c <xPortStartScheduler+0x13c>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a16      	ldr	r2, [pc, #88]	@ (8007e4c <xPortStartScheduler+0x13c>)
 8007df2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007df6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007df8:	4b14      	ldr	r3, [pc, #80]	@ (8007e4c <xPortStartScheduler+0x13c>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a13      	ldr	r2, [pc, #76]	@ (8007e4c <xPortStartScheduler+0x13c>)
 8007dfe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007e02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e04:	f000 f8da 	bl	8007fbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e08:	4b11      	ldr	r3, [pc, #68]	@ (8007e50 <xPortStartScheduler+0x140>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007e0e:	f000 f8f9 	bl	8008004 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e12:	4b10      	ldr	r3, [pc, #64]	@ (8007e54 <xPortStartScheduler+0x144>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a0f      	ldr	r2, [pc, #60]	@ (8007e54 <xPortStartScheduler+0x144>)
 8007e18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007e1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e1e:	f7ff ff63 	bl	8007ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e22:	f7ff fccf 	bl	80077c4 <vTaskSwitchContext>
	prvTaskExitError();
 8007e26:	f7ff ff1b 	bl	8007c60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	e000ed00 	.word	0xe000ed00
 8007e38:	410fc271 	.word	0x410fc271
 8007e3c:	410fc270 	.word	0x410fc270
 8007e40:	e000e400 	.word	0xe000e400
 8007e44:	20001504 	.word	0x20001504
 8007e48:	20001508 	.word	0x20001508
 8007e4c:	e000ed20 	.word	0xe000ed20
 8007e50:	20000054 	.word	0x20000054
 8007e54:	e000ef34 	.word	0xe000ef34

08007e58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	607b      	str	r3, [r7, #4]
}
 8007e70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e72:	4b10      	ldr	r3, [pc, #64]	@ (8007eb4 <vPortEnterCritical+0x5c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	3301      	adds	r3, #1
 8007e78:	4a0e      	ldr	r2, [pc, #56]	@ (8007eb4 <vPortEnterCritical+0x5c>)
 8007e7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8007eb4 <vPortEnterCritical+0x5c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d110      	bne.n	8007ea6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e84:	4b0c      	ldr	r3, [pc, #48]	@ (8007eb8 <vPortEnterCritical+0x60>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00b      	beq.n	8007ea6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	603b      	str	r3, [r7, #0]
}
 8007ea0:	bf00      	nop
 8007ea2:	bf00      	nop
 8007ea4:	e7fd      	b.n	8007ea2 <vPortEnterCritical+0x4a>
	}
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	20000054 	.word	0x20000054
 8007eb8:	e000ed04 	.word	0xe000ed04

08007ebc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ec2:	4b12      	ldr	r3, [pc, #72]	@ (8007f0c <vPortExitCritical+0x50>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10b      	bne.n	8007ee2 <vPortExitCritical+0x26>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	607b      	str	r3, [r7, #4]
}
 8007edc:	bf00      	nop
 8007ede:	bf00      	nop
 8007ee0:	e7fd      	b.n	8007ede <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8007f0c <vPortExitCritical+0x50>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	4a08      	ldr	r2, [pc, #32]	@ (8007f0c <vPortExitCritical+0x50>)
 8007eea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007eec:	4b07      	ldr	r3, [pc, #28]	@ (8007f0c <vPortExitCritical+0x50>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d105      	bne.n	8007f00 <vPortExitCritical+0x44>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007efe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	20000054 	.word	0x20000054

08007f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f10:	f3ef 8009 	mrs	r0, PSP
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	4b15      	ldr	r3, [pc, #84]	@ (8007f70 <pxCurrentTCBConst>)
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	f01e 0f10 	tst.w	lr, #16
 8007f20:	bf08      	it	eq
 8007f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f2a:	6010      	str	r0, [r2, #0]
 8007f2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007f34:	f380 8811 	msr	BASEPRI, r0
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f7ff fc40 	bl	80077c4 <vTaskSwitchContext>
 8007f44:	f04f 0000 	mov.w	r0, #0
 8007f48:	f380 8811 	msr	BASEPRI, r0
 8007f4c:	bc09      	pop	{r0, r3}
 8007f4e:	6819      	ldr	r1, [r3, #0]
 8007f50:	6808      	ldr	r0, [r1, #0]
 8007f52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f56:	f01e 0f10 	tst.w	lr, #16
 8007f5a:	bf08      	it	eq
 8007f5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f60:	f380 8809 	msr	PSP, r0
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	f3af 8000 	nop.w

08007f70 <pxCurrentTCBConst>:
 8007f70:	200013d8 	.word	0x200013d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f74:	bf00      	nop
 8007f76:	bf00      	nop

08007f78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	607b      	str	r3, [r7, #4]
}
 8007f90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f92:	f7ff fb5d 	bl	8007650 <xTaskIncrementTick>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f9c:	4b06      	ldr	r3, [pc, #24]	@ (8007fb8 <xPortSysTickHandler+0x40>)
 8007f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	f383 8811 	msr	BASEPRI, r3
}
 8007fae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007fb0:	bf00      	nop
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	e000ed04 	.word	0xe000ed04

08007fbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ff0 <vPortSetupTimerInterrupt+0x34>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ff4 <vPortSetupTimerInterrupt+0x38>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ff8 <vPortSetupTimerInterrupt+0x3c>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8007ffc <vPortSetupTimerInterrupt+0x40>)
 8007fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd6:	099b      	lsrs	r3, r3, #6
 8007fd8:	4a09      	ldr	r2, [pc, #36]	@ (8008000 <vPortSetupTimerInterrupt+0x44>)
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007fde:	4b04      	ldr	r3, [pc, #16]	@ (8007ff0 <vPortSetupTimerInterrupt+0x34>)
 8007fe0:	2207      	movs	r2, #7
 8007fe2:	601a      	str	r2, [r3, #0]
}
 8007fe4:	bf00      	nop
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	e000e010 	.word	0xe000e010
 8007ff4:	e000e018 	.word	0xe000e018
 8007ff8:	20000014 	.word	0x20000014
 8007ffc:	10624dd3 	.word	0x10624dd3
 8008000:	e000e014 	.word	0xe000e014

08008004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008004:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008014 <vPortEnableVFP+0x10>
 8008008:	6801      	ldr	r1, [r0, #0]
 800800a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800800e:	6001      	str	r1, [r0, #0]
 8008010:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008012:	bf00      	nop
 8008014:	e000ed88 	.word	0xe000ed88

08008018 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b08a      	sub	sp, #40	@ 0x28
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008020:	2300      	movs	r3, #0
 8008022:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008024:	f7ff fa68 	bl	80074f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008028:	4b5c      	ldr	r3, [pc, #368]	@ (800819c <pvPortMalloc+0x184>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008030:	f000 f924 	bl	800827c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008034:	4b5a      	ldr	r3, [pc, #360]	@ (80081a0 <pvPortMalloc+0x188>)
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4013      	ands	r3, r2
 800803c:	2b00      	cmp	r3, #0
 800803e:	f040 8095 	bne.w	800816c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d01e      	beq.n	8008086 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008048:	2208      	movs	r2, #8
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4413      	add	r3, r2
 800804e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f003 0307 	and.w	r3, r3, #7
 8008056:	2b00      	cmp	r3, #0
 8008058:	d015      	beq.n	8008086 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f023 0307 	bic.w	r3, r3, #7
 8008060:	3308      	adds	r3, #8
 8008062:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f003 0307 	and.w	r3, r3, #7
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00b      	beq.n	8008086 <pvPortMalloc+0x6e>
	__asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	617b      	str	r3, [r7, #20]
}
 8008080:	bf00      	nop
 8008082:	bf00      	nop
 8008084:	e7fd      	b.n	8008082 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d06f      	beq.n	800816c <pvPortMalloc+0x154>
 800808c:	4b45      	ldr	r3, [pc, #276]	@ (80081a4 <pvPortMalloc+0x18c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	429a      	cmp	r2, r3
 8008094:	d86a      	bhi.n	800816c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008096:	4b44      	ldr	r3, [pc, #272]	@ (80081a8 <pvPortMalloc+0x190>)
 8008098:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800809a:	4b43      	ldr	r3, [pc, #268]	@ (80081a8 <pvPortMalloc+0x190>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080a0:	e004      	b.n	80080ac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80080a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80080a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d903      	bls.n	80080be <pvPortMalloc+0xa6>
 80080b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1f1      	bne.n	80080a2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80080be:	4b37      	ldr	r3, [pc, #220]	@ (800819c <pvPortMalloc+0x184>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d051      	beq.n	800816c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2208      	movs	r2, #8
 80080ce:	4413      	add	r3, r2
 80080d0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	1ad2      	subs	r2, r2, r3
 80080e2:	2308      	movs	r3, #8
 80080e4:	005b      	lsls	r3, r3, #1
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d920      	bls.n	800812c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4413      	add	r3, r2
 80080f0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	f003 0307 	and.w	r3, r3, #7
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00b      	beq.n	8008114 <pvPortMalloc+0xfc>
	__asm volatile
 80080fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	613b      	str	r3, [r7, #16]
}
 800810e:	bf00      	nop
 8008110:	bf00      	nop
 8008112:	e7fd      	b.n	8008110 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	1ad2      	subs	r2, r2, r3
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008126:	69b8      	ldr	r0, [r7, #24]
 8008128:	f000 f90a 	bl	8008340 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800812c:	4b1d      	ldr	r3, [pc, #116]	@ (80081a4 <pvPortMalloc+0x18c>)
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	4a1b      	ldr	r2, [pc, #108]	@ (80081a4 <pvPortMalloc+0x18c>)
 8008138:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800813a:	4b1a      	ldr	r3, [pc, #104]	@ (80081a4 <pvPortMalloc+0x18c>)
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	4b1b      	ldr	r3, [pc, #108]	@ (80081ac <pvPortMalloc+0x194>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	429a      	cmp	r2, r3
 8008144:	d203      	bcs.n	800814e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008146:	4b17      	ldr	r3, [pc, #92]	@ (80081a4 <pvPortMalloc+0x18c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a18      	ldr	r2, [pc, #96]	@ (80081ac <pvPortMalloc+0x194>)
 800814c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800814e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	4b13      	ldr	r3, [pc, #76]	@ (80081a0 <pvPortMalloc+0x188>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	431a      	orrs	r2, r3
 8008158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800815c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008162:	4b13      	ldr	r3, [pc, #76]	@ (80081b0 <pvPortMalloc+0x198>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3301      	adds	r3, #1
 8008168:	4a11      	ldr	r2, [pc, #68]	@ (80081b0 <pvPortMalloc+0x198>)
 800816a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800816c:	f7ff f9d2 	bl	8007514 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	f003 0307 	and.w	r3, r3, #7
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00b      	beq.n	8008192 <pvPortMalloc+0x17a>
	__asm volatile
 800817a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	60fb      	str	r3, [r7, #12]
}
 800818c:	bf00      	nop
 800818e:	bf00      	nop
 8008190:	e7fd      	b.n	800818e <pvPortMalloc+0x176>
	return pvReturn;
 8008192:	69fb      	ldr	r3, [r7, #28]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3728      	adds	r7, #40	@ 0x28
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	200020cc 	.word	0x200020cc
 80081a0:	200020e0 	.word	0x200020e0
 80081a4:	200020d0 	.word	0x200020d0
 80081a8:	200020c4 	.word	0x200020c4
 80081ac:	200020d4 	.word	0x200020d4
 80081b0:	200020d8 	.word	0x200020d8

080081b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d04f      	beq.n	8008266 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80081c6:	2308      	movs	r3, #8
 80081c8:	425b      	negs	r3, r3
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	4413      	add	r3, r2
 80081ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	4b25      	ldr	r3, [pc, #148]	@ (8008270 <vPortFree+0xbc>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4013      	ands	r3, r2
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10b      	bne.n	80081fa <vPortFree+0x46>
	__asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	60fb      	str	r3, [r7, #12]
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop
 80081f8:	e7fd      	b.n	80081f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00b      	beq.n	800821a <vPortFree+0x66>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	60bb      	str	r3, [r7, #8]
}
 8008214:	bf00      	nop
 8008216:	bf00      	nop
 8008218:	e7fd      	b.n	8008216 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	4b14      	ldr	r3, [pc, #80]	@ (8008270 <vPortFree+0xbc>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4013      	ands	r3, r2
 8008224:	2b00      	cmp	r3, #0
 8008226:	d01e      	beq.n	8008266 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d11a      	bne.n	8008266 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	4b0e      	ldr	r3, [pc, #56]	@ (8008270 <vPortFree+0xbc>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	43db      	mvns	r3, r3
 800823a:	401a      	ands	r2, r3
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008240:	f7ff f95a 	bl	80074f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	4b0a      	ldr	r3, [pc, #40]	@ (8008274 <vPortFree+0xc0>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4413      	add	r3, r2
 800824e:	4a09      	ldr	r2, [pc, #36]	@ (8008274 <vPortFree+0xc0>)
 8008250:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008252:	6938      	ldr	r0, [r7, #16]
 8008254:	f000 f874 	bl	8008340 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008258:	4b07      	ldr	r3, [pc, #28]	@ (8008278 <vPortFree+0xc4>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3301      	adds	r3, #1
 800825e:	4a06      	ldr	r2, [pc, #24]	@ (8008278 <vPortFree+0xc4>)
 8008260:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008262:	f7ff f957 	bl	8007514 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008266:	bf00      	nop
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	200020e0 	.word	0x200020e0
 8008274:	200020d0 	.word	0x200020d0
 8008278:	200020dc 	.word	0x200020dc

0800827c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008282:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008286:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008288:	4b27      	ldr	r3, [pc, #156]	@ (8008328 <prvHeapInit+0xac>)
 800828a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f003 0307 	and.w	r3, r3, #7
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00c      	beq.n	80082b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	3307      	adds	r3, #7
 800829a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f023 0307 	bic.w	r3, r3, #7
 80082a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	4a1f      	ldr	r2, [pc, #124]	@ (8008328 <prvHeapInit+0xac>)
 80082ac:	4413      	add	r3, r2
 80082ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80082b4:	4a1d      	ldr	r2, [pc, #116]	@ (800832c <prvHeapInit+0xb0>)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80082ba:	4b1c      	ldr	r3, [pc, #112]	@ (800832c <prvHeapInit+0xb0>)
 80082bc:	2200      	movs	r2, #0
 80082be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	4413      	add	r3, r2
 80082c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80082c8:	2208      	movs	r2, #8
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	1a9b      	subs	r3, r3, r2
 80082ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f023 0307 	bic.w	r3, r3, #7
 80082d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4a15      	ldr	r2, [pc, #84]	@ (8008330 <prvHeapInit+0xb4>)
 80082dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082de:	4b14      	ldr	r3, [pc, #80]	@ (8008330 <prvHeapInit+0xb4>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2200      	movs	r2, #0
 80082e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082e6:	4b12      	ldr	r3, [pc, #72]	@ (8008330 <prvHeapInit+0xb4>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2200      	movs	r2, #0
 80082ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	1ad2      	subs	r2, r2, r3
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008330 <prvHeapInit+0xb4>)
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	4a0a      	ldr	r2, [pc, #40]	@ (8008334 <prvHeapInit+0xb8>)
 800830a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	4a09      	ldr	r2, [pc, #36]	@ (8008338 <prvHeapInit+0xbc>)
 8008312:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008314:	4b09      	ldr	r3, [pc, #36]	@ (800833c <prvHeapInit+0xc0>)
 8008316:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800831a:	601a      	str	r2, [r3, #0]
}
 800831c:	bf00      	nop
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	2000150c 	.word	0x2000150c
 800832c:	200020c4 	.word	0x200020c4
 8008330:	200020cc 	.word	0x200020cc
 8008334:	200020d4 	.word	0x200020d4
 8008338:	200020d0 	.word	0x200020d0
 800833c:	200020e0 	.word	0x200020e0

08008340 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008348:	4b28      	ldr	r3, [pc, #160]	@ (80083ec <prvInsertBlockIntoFreeList+0xac>)
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	e002      	b.n	8008354 <prvInsertBlockIntoFreeList+0x14>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	60fb      	str	r3, [r7, #12]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	429a      	cmp	r2, r3
 800835c:	d8f7      	bhi.n	800834e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	4413      	add	r3, r2
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	429a      	cmp	r2, r3
 800836e:	d108      	bne.n	8008382 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	685a      	ldr	r2, [r3, #4]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	441a      	add	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	441a      	add	r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	429a      	cmp	r2, r3
 8008394:	d118      	bne.n	80083c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	4b15      	ldr	r3, [pc, #84]	@ (80083f0 <prvInsertBlockIntoFreeList+0xb0>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d00d      	beq.n	80083be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	441a      	add	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	e008      	b.n	80083d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80083be:	4b0c      	ldr	r3, [pc, #48]	@ (80083f0 <prvInsertBlockIntoFreeList+0xb0>)
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	601a      	str	r2, [r3, #0]
 80083c6:	e003      	b.n	80083d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d002      	beq.n	80083de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083de:	bf00      	nop
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	200020c4 	.word	0x200020c4
 80083f0:	200020cc 	.word	0x200020cc

080083f4 <arm_fir_init_f32>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	9c04      	ldr	r4, [sp, #16]
 80083f8:	6082      	str	r2, [r0, #8]
 80083fa:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 80083fe:	3c01      	subs	r4, #1
 8008400:	440c      	add	r4, r1
 8008402:	8001      	strh	r1, [r0, #0]
 8008404:	4605      	mov	r5, r0
 8008406:	00a2      	lsls	r2, r4, #2
 8008408:	4618      	mov	r0, r3
 800840a:	2100      	movs	r1, #0
 800840c:	f001 f82d 	bl	800946a <memset>
 8008410:	6068      	str	r0, [r5, #4]
 8008412:	bd38      	pop	{r3, r4, r5, pc}

08008414 <arm_fir_f32>:
 8008414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008418:	ed2d 8b10 	vpush	{d8-d15}
 800841c:	b08b      	sub	sp, #44	@ 0x2c
 800841e:	f8b0 8000 	ldrh.w	r8, [r0]
 8008422:	9003      	str	r0, [sp, #12]
 8008424:	e9d0 9001 	ldrd	r9, r0, [r0, #4]
 8008428:	461e      	mov	r6, r3
 800842a:	9304      	str	r3, [sp, #16]
 800842c:	f108 4380 	add.w	r3, r8, #1073741824	@ 0x40000000
 8008430:	3b01      	subs	r3, #1
 8008432:	eb09 0583 	add.w	r5, r9, r3, lsl #2
 8008436:	08f3      	lsrs	r3, r6, #3
 8008438:	9002      	str	r0, [sp, #8]
 800843a:	9500      	str	r5, [sp, #0]
 800843c:	9301      	str	r3, [sp, #4]
 800843e:	f000 81f1 	beq.w	8008824 <arm_fir_f32+0x410>
 8008442:	ea4f 04d8 	mov.w	r4, r8, lsr #3
 8008446:	f100 0620 	add.w	r6, r0, #32
 800844a:	9405      	str	r4, [sp, #20]
 800844c:	0164      	lsls	r4, r4, #5
 800844e:	4420      	add	r0, r4
 8008450:	f008 0a07 	and.w	sl, r8, #7
 8008454:	9607      	str	r6, [sp, #28]
 8008456:	9006      	str	r0, [sp, #24]
 8008458:	469c      	mov	ip, r3
 800845a:	4650      	mov	r0, sl
 800845c:	4623      	mov	r3, r4
 800845e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008462:	f8cd 8020 	str.w	r8, [sp, #32]
 8008466:	1937      	adds	r7, r6, r4
 8008468:	f109 0b1c 	add.w	fp, r9, #28
 800846c:	f8dd e014 	ldr.w	lr, [sp, #20]
 8008470:	9209      	str	r2, [sp, #36]	@ 0x24
 8008472:	f8cd 9014 	str.w	r9, [sp, #20]
 8008476:	f101 0620 	add.w	r6, r1, #32
 800847a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800847e:	9106      	str	r1, [sp, #24]
 8008480:	3520      	adds	r5, #32
 8008482:	f102 0420 	add.w	r4, r2, #32
 8008486:	4698      	mov	r8, r3
 8008488:	f856 3c20 	ldr.w	r3, [r6, #-32]
 800848c:	f845 3c20 	str.w	r3, [r5, #-32]
 8008490:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8008494:	f845 3c1c 	str.w	r3, [r5, #-28]
 8008498:	f856 3c18 	ldr.w	r3, [r6, #-24]
 800849c:	f845 3c18 	str.w	r3, [r5, #-24]
 80084a0:	f856 3c14 	ldr.w	r3, [r6, #-20]
 80084a4:	f845 3c14 	str.w	r3, [r5, #-20]
 80084a8:	f856 3c10 	ldr.w	r3, [r6, #-16]
 80084ac:	f845 3c10 	str.w	r3, [r5, #-16]
 80084b0:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 80084b4:	f845 3c0c 	str.w	r3, [r5, #-12]
 80084b8:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80084bc:	f845 3c08 	str.w	r3, [r5, #-8]
 80084c0:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80084c4:	f845 3c04 	str.w	r3, [r5, #-4]
 80084c8:	ed1b 2a07 	vldr	s4, [fp, #-28]	@ 0xffffffe4
 80084cc:	ed5b 1a06 	vldr	s3, [fp, #-24]	@ 0xffffffe8
 80084d0:	ed1b 1a05 	vldr	s2, [fp, #-20]	@ 0xffffffec
 80084d4:	ed5b 0a04 	vldr	s1, [fp, #-16]
 80084d8:	ed1b 0a03 	vldr	s0, [fp, #-12]
 80084dc:	ed1b 8a02 	vldr	s16, [fp, #-8]
 80084e0:	ed5b 8a01 	vldr	s17, [fp, #-4]
 80084e4:	eddf 6af5 	vldr	s13, [pc, #980]	@ 80088bc <arm_fir_f32+0x4a8>
 80084e8:	465a      	mov	r2, fp
 80084ea:	f1be 0f00 	cmp.w	lr, #0
 80084ee:	f000 81fe 	beq.w	80088ee <arm_fir_f32+0x4da>
 80084f2:	f10b 0120 	add.w	r1, fp, #32
 80084f6:	eef0 ba66 	vmov.f32	s23, s13
 80084fa:	eeb0 6a66 	vmov.f32	s12, s13
 80084fe:	eeb0 9a66 	vmov.f32	s18, s13
 8008502:	eef0 9a66 	vmov.f32	s19, s13
 8008506:	eeb0 aa66 	vmov.f32	s20, s13
 800850a:	eef0 aa66 	vmov.f32	s21, s13
 800850e:	eeb0 ba66 	vmov.f32	s22, s13
 8008512:	460a      	mov	r2, r1
 8008514:	4653      	mov	r3, sl
 8008516:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 800851a:	ed52 4a08 	vldr	s9, [r2, #-32]	@ 0xffffffe0
 800851e:	ed53 ea07 	vldr	s29, [r3, #-28]	@ 0xffffffe4
 8008522:	ed13 ea06 	vldr	s28, [r3, #-24]	@ 0xffffffe8
 8008526:	ed53 da05 	vldr	s27, [r3, #-20]	@ 0xffffffec
 800852a:	ed53 ca04 	vldr	s25, [r3, #-16]
 800852e:	ed53 2a03 	vldr	s5, [r3, #-12]
 8008532:	ed13 4a02 	vldr	s8, [r3, #-8]
 8008536:	ed13 5a01 	vldr	s10, [r3, #-4]
 800853a:	ee67 fa02 	vmul.f32	s31, s14, s4
 800853e:	ee27 da21 	vmul.f32	s26, s14, s3
 8008542:	ed12 2a07 	vldr	s4, [r2, #-28]	@ 0xffffffe4
 8008546:	ee27 ca01 	vmul.f32	s24, s14, s2
 800854a:	ee27 3a20 	vmul.f32	s6, s14, s1
 800854e:	ee67 3a00 	vmul.f32	s7, s14, s0
 8008552:	ee67 5a08 	vmul.f32	s11, s14, s16
 8008556:	ee27 fa28 	vmul.f32	s30, s14, s17
 800855a:	ee67 7a24 	vmul.f32	s15, s14, s9
 800855e:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8008562:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8008566:	ee6e faa1 	vmul.f32	s31, s29, s3
 800856a:	ee2e da81 	vmul.f32	s26, s29, s2
 800856e:	ed52 1a06 	vldr	s3, [r2, #-24]	@ 0xffffffe8
 8008572:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8008576:	ee73 9a29 	vadd.f32	s19, s6, s19
 800857a:	ee2e caa0 	vmul.f32	s24, s29, s1
 800857e:	ee2e 3a80 	vmul.f32	s6, s29, s0
 8008582:	ee33 9a89 	vadd.f32	s18, s7, s18
 8008586:	ee35 6a86 	vadd.f32	s12, s11, s12
 800858a:	ee6e 3a88 	vmul.f32	s7, s29, s16
 800858e:	ee6e 5aa8 	vmul.f32	s11, s29, s17
 8008592:	ee7f ba2b 	vadd.f32	s23, s30, s23
 8008596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800859a:	ee24 faae 	vmul.f32	s30, s9, s29
 800859e:	ee6e ea82 	vmul.f32	s29, s29, s4
 80085a2:	ee2e 7a01 	vmul.f32	s14, s28, s2
 80085a6:	ee3f ba8b 	vadd.f32	s22, s31, s22
 80085aa:	ed12 1a05 	vldr	s2, [r2, #-20]	@ 0xffffffec
 80085ae:	ee7d aa2a 	vadd.f32	s21, s26, s21
 80085b2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80085b6:	ee2e da20 	vmul.f32	s26, s28, s1
 80085ba:	ee2e ca00 	vmul.f32	s24, s28, s0
 80085be:	ee73 9a29 	vadd.f32	s19, s6, s19
 80085c2:	ee33 9a89 	vadd.f32	s18, s7, s18
 80085c6:	ee2e 3a08 	vmul.f32	s6, s28, s16
 80085ca:	ee6e 3a28 	vmul.f32	s7, s28, s17
 80085ce:	ee35 6a86 	vadd.f32	s12, s11, s12
 80085d2:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80085d6:	ee64 5a8e 	vmul.f32	s11, s9, s28
 80085da:	ee22 fa0e 	vmul.f32	s30, s4, s28
 80085de:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 80085e2:	ee2e ea21 	vmul.f32	s28, s28, s3
 80085e6:	ee6d 6aa0 	vmul.f32	s13, s27, s1
 80085ea:	ee7d aa2a 	vadd.f32	s21, s26, s21
 80085ee:	ed52 0a04 	vldr	s1, [r2, #-16]
 80085f2:	ee2d da80 	vmul.f32	s26, s27, s0
 80085f6:	ee37 ba0b 	vadd.f32	s22, s14, s22
 80085fa:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80085fe:	ee73 9a29 	vadd.f32	s19, s6, s19
 8008602:	ee2d ca88 	vmul.f32	s24, s27, s16
 8008606:	ee2d 3aa8 	vmul.f32	s6, s27, s17
 800860a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800860e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8008612:	ee64 3aad 	vmul.f32	s7, s9, s27
 8008616:	ee62 5a2d 	vmul.f32	s11, s4, s27
 800861a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800861e:	ee7e 7a27 	vadd.f32	s15, s28, s15
 8008622:	ee21 faad 	vmul.f32	s30, s3, s27
 8008626:	ee6d da81 	vmul.f32	s27, s27, s2
 800862a:	ee6c fa80 	vmul.f32	s31, s25, s0
 800862e:	ee36 ba8b 	vadd.f32	s22, s13, s22
 8008632:	ed12 0a03 	vldr	s0, [r2, #-12]
 8008636:	ee3d da2a 	vadd.f32	s26, s26, s21
 800863a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800863e:	ee6c aa88 	vmul.f32	s21, s25, s16
 8008642:	ee2c caa8 	vmul.f32	s24, s25, s17
 8008646:	ee73 9a29 	vadd.f32	s19, s6, s19
 800864a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800864e:	ee24 3aac 	vmul.f32	s6, s9, s25
 8008652:	ee62 3a2c 	vmul.f32	s7, s4, s25
 8008656:	ee35 6a86 	vadd.f32	s12, s11, s12
 800865a:	ee7f ba2b 	vadd.f32	s23, s30, s23
 800865e:	ee61 5aac 	vmul.f32	s11, s3, s25
 8008662:	ee21 fa2c 	vmul.f32	s30, s2, s25
 8008666:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800866a:	ee6c caa0 	vmul.f32	s25, s25, s1
 800866e:	ee62 ea88 	vmul.f32	s29, s5, s16
 8008672:	ee3a da8d 	vadd.f32	s26, s21, s26
 8008676:	ed12 8a02 	vldr	s16, [r2, #-8]
 800867a:	ee62 aaa8 	vmul.f32	s21, s5, s17
 800867e:	ee3f ba8b 	vadd.f32	s22, s31, s22
 8008682:	ee3c aa0a 	vadd.f32	s20, s24, s20
 8008686:	ee73 9a29 	vadd.f32	s19, s6, s19
 800868a:	ee24 caa2 	vmul.f32	s24, s9, s5
 800868e:	ee22 3a22 	vmul.f32	s6, s4, s5
 8008692:	ee33 9a89 	vadd.f32	s18, s7, s18
 8008696:	ee35 6a86 	vadd.f32	s12, s11, s12
 800869a:	ee61 3aa2 	vmul.f32	s7, s3, s5
 800869e:	ee61 5a22 	vmul.f32	s11, s2, s5
 80086a2:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80086a6:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 80086aa:	ee20 faa2 	vmul.f32	s30, s1, s5
 80086ae:	ee62 2a80 	vmul.f32	s5, s5, s0
 80086b2:	ee7e fa8b 	vadd.f32	s31, s29, s22
 80086b6:	ee72 7aa7 	vadd.f32	s15, s5, s15
 80086ba:	ee24 ba28 	vmul.f32	s22, s8, s17
 80086be:	ee7a aa8d 	vadd.f32	s21, s21, s26
 80086c2:	ee3c aa0a 	vadd.f32	s20, s24, s20
 80086c6:	ee24 da84 	vmul.f32	s26, s9, s8
 80086ca:	ee22 ca04 	vmul.f32	s24, s4, s8
 80086ce:	ee73 9a29 	vadd.f32	s19, s6, s19
 80086d2:	ee33 9a89 	vadd.f32	s18, s7, s18
 80086d6:	ee21 3a84 	vmul.f32	s6, s3, s8
 80086da:	ee61 3a04 	vmul.f32	s7, s2, s8
 80086de:	ee35 6a86 	vadd.f32	s12, s11, s12
 80086e2:	ee7f ba2b 	vadd.f32	s23, s30, s23
 80086e6:	ee60 5a84 	vmul.f32	s11, s1, s8
 80086ea:	ee20 7a04 	vmul.f32	s14, s0, s8
 80086ee:	ee64 6a08 	vmul.f32	s13, s8, s16
 80086f2:	ed52 8a01 	vldr	s17, [r2, #-4]
 80086f6:	ee73 9a29 	vadd.f32	s19, s6, s19
 80086fa:	ee33 9a89 	vadd.f32	s18, s7, s18
 80086fe:	ee35 6a86 	vadd.f32	s12, s11, s12
 8008702:	ee37 7a2b 	vadd.f32	s14, s14, s23
 8008706:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800870a:	ee3b ba2f 	vadd.f32	s22, s22, s31
 800870e:	ee64 4a85 	vmul.f32	s9, s9, s10
 8008712:	ee7d aa2a 	vadd.f32	s21, s26, s21
 8008716:	ee22 4a05 	vmul.f32	s8, s4, s10
 800871a:	ee3c aa0a 	vadd.f32	s20, s24, s20
 800871e:	ee61 2a85 	vmul.f32	s5, s3, s10
 8008722:	ee21 3a05 	vmul.f32	s6, s2, s10
 8008726:	ee60 3a85 	vmul.f32	s7, s1, s10
 800872a:	ee60 5a05 	vmul.f32	s11, s0, s10
 800872e:	ee68 ba05 	vmul.f32	s23, s16, s10
 8008732:	ee65 7a28 	vmul.f32	s15, s10, s17
 8008736:	3320      	adds	r3, #32
 8008738:	429f      	cmp	r7, r3
 800873a:	ee34 ba8b 	vadd.f32	s22, s9, s22
 800873e:	ee74 aa2a 	vadd.f32	s21, s8, s21
 8008742:	ee32 aa8a 	vadd.f32	s20, s5, s20
 8008746:	ee73 9a29 	vadd.f32	s19, s6, s19
 800874a:	ee33 9a89 	vadd.f32	s18, s7, s18
 800874e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8008752:	ee7b ba87 	vadd.f32	s23, s23, s14
 8008756:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800875a:	f102 0220 	add.w	r2, r2, #32
 800875e:	f47f aeda 	bne.w	8008516 <arm_fir_f32+0x102>
 8008762:	eb0b 0208 	add.w	r2, fp, r8
 8008766:	46cb      	mov	fp, r9
 8008768:	b3a0      	cbz	r0, 80087d4 <arm_fir_f32+0x3c0>
 800876a:	4603      	mov	r3, r0
 800876c:	ecfb 7a01 	vldmia	fp!, {s15}
 8008770:	ecf2 5a01 	vldmia	r2!, {s11}
 8008774:	ee27 2a82 	vmul.f32	s4, s15, s4
 8008778:	ee67 2aa1 	vmul.f32	s5, s15, s3
 800877c:	ee27 3a81 	vmul.f32	s6, s15, s2
 8008780:	ee67 3aa0 	vmul.f32	s7, s15, s1
 8008784:	ee27 4a80 	vmul.f32	s8, s15, s0
 8008788:	ee67 4a88 	vmul.f32	s9, s15, s16
 800878c:	ee27 5aa8 	vmul.f32	s10, s15, s17
 8008790:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008794:	3b01      	subs	r3, #1
 8008796:	ee3b ba02 	vadd.f32	s22, s22, s4
 800879a:	ee7a aaa2 	vadd.f32	s21, s21, s5
 800879e:	eeb0 2a61 	vmov.f32	s4, s3
 80087a2:	ee3a aa03 	vadd.f32	s20, s20, s6
 80087a6:	eef0 1a41 	vmov.f32	s3, s2
 80087aa:	ee79 9aa3 	vadd.f32	s19, s19, s7
 80087ae:	eeb0 1a60 	vmov.f32	s2, s1
 80087b2:	ee39 9a04 	vadd.f32	s18, s18, s8
 80087b6:	eef0 0a40 	vmov.f32	s1, s0
 80087ba:	ee36 6a24 	vadd.f32	s12, s12, s9
 80087be:	eeb0 0a48 	vmov.f32	s0, s16
 80087c2:	ee7b ba85 	vadd.f32	s23, s23, s10
 80087c6:	eeb0 8a68 	vmov.f32	s16, s17
 80087ca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80087ce:	eef0 8a65 	vmov.f32	s17, s11
 80087d2:	d1cb      	bne.n	800876c <arm_fir_f32+0x358>
 80087d4:	f1bc 0c01 	subs.w	ip, ip, #1
 80087d8:	ed04 ba08 	vstr	s22, [r4, #-32]	@ 0xffffffe0
 80087dc:	ed44 aa07 	vstr	s21, [r4, #-28]	@ 0xffffffe4
 80087e0:	ed04 aa06 	vstr	s20, [r4, #-24]	@ 0xffffffe8
 80087e4:	ed44 9a05 	vstr	s19, [r4, #-20]	@ 0xffffffec
 80087e8:	ed04 9a04 	vstr	s18, [r4, #-16]
 80087ec:	ed04 6a03 	vstr	s12, [r4, #-12]
 80087f0:	ed44 ba02 	vstr	s23, [r4, #-8]
 80087f4:	ed44 6a01 	vstr	s13, [r4, #-4]
 80087f8:	f106 0620 	add.w	r6, r6, #32
 80087fc:	f105 0520 	add.w	r5, r5, #32
 8008800:	f104 0420 	add.w	r4, r4, #32
 8008804:	468b      	mov	fp, r1
 8008806:	f47f ae3f 	bne.w	8008488 <arm_fir_f32+0x74>
 800880a:	9b01      	ldr	r3, [sp, #4]
 800880c:	9800      	ldr	r0, [sp, #0]
 800880e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008814:	e9dd 9105 	ldrd	r9, r1, [sp, #20]
 8008818:	015b      	lsls	r3, r3, #5
 800881a:	4418      	add	r0, r3
 800881c:	4419      	add	r1, r3
 800881e:	441a      	add	r2, r3
 8008820:	4499      	add	r9, r3
 8008822:	9000      	str	r0, [sp, #0]
 8008824:	9b04      	ldr	r3, [sp, #16]
 8008826:	f013 0707 	ands.w	r7, r3, #7
 800882a:	d020      	beq.n	800886e <arm_fir_f32+0x45a>
 800882c:	00bf      	lsls	r7, r7, #2
 800882e:	9e00      	ldr	r6, [sp, #0]
 8008830:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008834:	eb01 0c07 	add.w	ip, r1, r7
 8008838:	464d      	mov	r5, r9
 800883a:	f851 3b04 	ldr.w	r3, [r1], #4
 800883e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80088bc <arm_fir_f32+0x4a8>
 8008842:	f846 3b04 	str.w	r3, [r6], #4
 8008846:	4674      	mov	r4, lr
 8008848:	4643      	mov	r3, r8
 800884a:	4628      	mov	r0, r5
 800884c:	ecf0 7a01 	vldmia	r0!, {s15}
 8008850:	ecf4 6a01 	vldmia	r4!, {s13}
 8008854:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008858:	3b01      	subs	r3, #1
 800885a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800885e:	d1f5      	bne.n	800884c <arm_fir_f32+0x438>
 8008860:	4561      	cmp	r1, ip
 8008862:	eca2 7a01 	vstmia	r2!, {s14}
 8008866:	f105 0504 	add.w	r5, r5, #4
 800886a:	d1e6      	bne.n	800883a <arm_fir_f32+0x426>
 800886c:	44b9      	add	r9, r7
 800886e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008872:	9b03      	ldr	r3, [sp, #12]
 8008874:	ea5f 0498 	movs.w	r4, r8, lsr #2
 8008878:	685d      	ldr	r5, [r3, #4]
 800887a:	d021      	beq.n	80088c0 <arm_fir_f32+0x4ac>
 800887c:	f109 0210 	add.w	r2, r9, #16
 8008880:	f105 0310 	add.w	r3, r5, #16
 8008884:	4621      	mov	r1, r4
 8008886:	f852 0c10 	ldr.w	r0, [r2, #-16]
 800888a:	f843 0c10 	str.w	r0, [r3, #-16]
 800888e:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8008892:	f843 0c0c 	str.w	r0, [r3, #-12]
 8008896:	f852 0c08 	ldr.w	r0, [r2, #-8]
 800889a:	f843 0c08 	str.w	r0, [r3, #-8]
 800889e:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80088a2:	f843 0c04 	str.w	r0, [r3, #-4]
 80088a6:	3901      	subs	r1, #1
 80088a8:	f102 0210 	add.w	r2, r2, #16
 80088ac:	f103 0310 	add.w	r3, r3, #16
 80088b0:	d1e9      	bne.n	8008886 <arm_fir_f32+0x472>
 80088b2:	0124      	lsls	r4, r4, #4
 80088b4:	44a1      	add	r9, r4
 80088b6:	4425      	add	r5, r4
 80088b8:	e002      	b.n	80088c0 <arm_fir_f32+0x4ac>
 80088ba:	bf00      	nop
 80088bc:	00000000 	.word	0x00000000
 80088c0:	f018 0803 	ands.w	r8, r8, #3
 80088c4:	d00e      	beq.n	80088e4 <arm_fir_f32+0x4d0>
 80088c6:	f8d9 3000 	ldr.w	r3, [r9]
 80088ca:	602b      	str	r3, [r5, #0]
 80088cc:	f1b8 0801 	subs.w	r8, r8, #1
 80088d0:	d008      	beq.n	80088e4 <arm_fir_f32+0x4d0>
 80088d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80088d6:	606b      	str	r3, [r5, #4]
 80088d8:	f1b8 0f01 	cmp.w	r8, #1
 80088dc:	bf1c      	itt	ne
 80088de:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 80088e2:	60ab      	strne	r3, [r5, #8]
 80088e4:	b00b      	add	sp, #44	@ 0x2c
 80088e6:	ecbd 8b10 	vpop	{d8-d15}
 80088ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ee:	eef0 ba66 	vmov.f32	s23, s13
 80088f2:	eeb0 6a66 	vmov.f32	s12, s13
 80088f6:	eeb0 9a66 	vmov.f32	s18, s13
 80088fa:	eef0 9a66 	vmov.f32	s19, s13
 80088fe:	eeb0 aa66 	vmov.f32	s20, s13
 8008902:	eef0 aa66 	vmov.f32	s21, s13
 8008906:	eeb0 ba66 	vmov.f32	s22, s13
 800890a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800890e:	f102 0120 	add.w	r1, r2, #32
 8008912:	e729      	b.n	8008768 <arm_fir_f32+0x354>

08008914 <rand>:
 8008914:	4b16      	ldr	r3, [pc, #88]	@ (8008970 <rand+0x5c>)
 8008916:	b510      	push	{r4, lr}
 8008918:	681c      	ldr	r4, [r3, #0]
 800891a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800891c:	b9b3      	cbnz	r3, 800894c <rand+0x38>
 800891e:	2018      	movs	r0, #24
 8008920:	f001 fcf4 	bl	800a30c <malloc>
 8008924:	4602      	mov	r2, r0
 8008926:	6320      	str	r0, [r4, #48]	@ 0x30
 8008928:	b920      	cbnz	r0, 8008934 <rand+0x20>
 800892a:	4b12      	ldr	r3, [pc, #72]	@ (8008974 <rand+0x60>)
 800892c:	4812      	ldr	r0, [pc, #72]	@ (8008978 <rand+0x64>)
 800892e:	2152      	movs	r1, #82	@ 0x52
 8008930:	f000 fe2a 	bl	8009588 <__assert_func>
 8008934:	4911      	ldr	r1, [pc, #68]	@ (800897c <rand+0x68>)
 8008936:	4b12      	ldr	r3, [pc, #72]	@ (8008980 <rand+0x6c>)
 8008938:	e9c0 1300 	strd	r1, r3, [r0]
 800893c:	4b11      	ldr	r3, [pc, #68]	@ (8008984 <rand+0x70>)
 800893e:	6083      	str	r3, [r0, #8]
 8008940:	230b      	movs	r3, #11
 8008942:	8183      	strh	r3, [r0, #12]
 8008944:	2100      	movs	r1, #0
 8008946:	2001      	movs	r0, #1
 8008948:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800894c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800894e:	480e      	ldr	r0, [pc, #56]	@ (8008988 <rand+0x74>)
 8008950:	690b      	ldr	r3, [r1, #16]
 8008952:	694c      	ldr	r4, [r1, #20]
 8008954:	4a0d      	ldr	r2, [pc, #52]	@ (800898c <rand+0x78>)
 8008956:	4358      	muls	r0, r3
 8008958:	fb02 0004 	mla	r0, r2, r4, r0
 800895c:	fba3 3202 	umull	r3, r2, r3, r2
 8008960:	3301      	adds	r3, #1
 8008962:	eb40 0002 	adc.w	r0, r0, r2
 8008966:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800896a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800896e:	bd10      	pop	{r4, pc}
 8008970:	20000064 	.word	0x20000064
 8008974:	0800bbe4 	.word	0x0800bbe4
 8008978:	0800bbfb 	.word	0x0800bbfb
 800897c:	abcd330e 	.word	0xabcd330e
 8008980:	e66d1234 	.word	0xe66d1234
 8008984:	0005deec 	.word	0x0005deec
 8008988:	5851f42d 	.word	0x5851f42d
 800898c:	4c957f2d 	.word	0x4c957f2d

08008990 <__cvt>:
 8008990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008994:	ec57 6b10 	vmov	r6, r7, d0
 8008998:	2f00      	cmp	r7, #0
 800899a:	460c      	mov	r4, r1
 800899c:	4619      	mov	r1, r3
 800899e:	463b      	mov	r3, r7
 80089a0:	bfbb      	ittet	lt
 80089a2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80089a6:	461f      	movlt	r7, r3
 80089a8:	2300      	movge	r3, #0
 80089aa:	232d      	movlt	r3, #45	@ 0x2d
 80089ac:	700b      	strb	r3, [r1, #0]
 80089ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089b0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80089b4:	4691      	mov	r9, r2
 80089b6:	f023 0820 	bic.w	r8, r3, #32
 80089ba:	bfbc      	itt	lt
 80089bc:	4632      	movlt	r2, r6
 80089be:	4616      	movlt	r6, r2
 80089c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80089c4:	d005      	beq.n	80089d2 <__cvt+0x42>
 80089c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80089ca:	d100      	bne.n	80089ce <__cvt+0x3e>
 80089cc:	3401      	adds	r4, #1
 80089ce:	2102      	movs	r1, #2
 80089d0:	e000      	b.n	80089d4 <__cvt+0x44>
 80089d2:	2103      	movs	r1, #3
 80089d4:	ab03      	add	r3, sp, #12
 80089d6:	9301      	str	r3, [sp, #4]
 80089d8:	ab02      	add	r3, sp, #8
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	ec47 6b10 	vmov	d0, r6, r7
 80089e0:	4653      	mov	r3, sl
 80089e2:	4622      	mov	r2, r4
 80089e4:	f000 fe78 	bl	80096d8 <_dtoa_r>
 80089e8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80089ec:	4605      	mov	r5, r0
 80089ee:	d119      	bne.n	8008a24 <__cvt+0x94>
 80089f0:	f019 0f01 	tst.w	r9, #1
 80089f4:	d00e      	beq.n	8008a14 <__cvt+0x84>
 80089f6:	eb00 0904 	add.w	r9, r0, r4
 80089fa:	2200      	movs	r2, #0
 80089fc:	2300      	movs	r3, #0
 80089fe:	4630      	mov	r0, r6
 8008a00:	4639      	mov	r1, r7
 8008a02:	f7f8 f861 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a06:	b108      	cbz	r0, 8008a0c <__cvt+0x7c>
 8008a08:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a0c:	2230      	movs	r2, #48	@ 0x30
 8008a0e:	9b03      	ldr	r3, [sp, #12]
 8008a10:	454b      	cmp	r3, r9
 8008a12:	d31e      	bcc.n	8008a52 <__cvt+0xc2>
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a18:	1b5b      	subs	r3, r3, r5
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	6013      	str	r3, [r2, #0]
 8008a1e:	b004      	add	sp, #16
 8008a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008a28:	eb00 0904 	add.w	r9, r0, r4
 8008a2c:	d1e5      	bne.n	80089fa <__cvt+0x6a>
 8008a2e:	7803      	ldrb	r3, [r0, #0]
 8008a30:	2b30      	cmp	r3, #48	@ 0x30
 8008a32:	d10a      	bne.n	8008a4a <__cvt+0xba>
 8008a34:	2200      	movs	r2, #0
 8008a36:	2300      	movs	r3, #0
 8008a38:	4630      	mov	r0, r6
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	f7f8 f844 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a40:	b918      	cbnz	r0, 8008a4a <__cvt+0xba>
 8008a42:	f1c4 0401 	rsb	r4, r4, #1
 8008a46:	f8ca 4000 	str.w	r4, [sl]
 8008a4a:	f8da 3000 	ldr.w	r3, [sl]
 8008a4e:	4499      	add	r9, r3
 8008a50:	e7d3      	b.n	80089fa <__cvt+0x6a>
 8008a52:	1c59      	adds	r1, r3, #1
 8008a54:	9103      	str	r1, [sp, #12]
 8008a56:	701a      	strb	r2, [r3, #0]
 8008a58:	e7d9      	b.n	8008a0e <__cvt+0x7e>

08008a5a <__exponent>:
 8008a5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a5c:	2900      	cmp	r1, #0
 8008a5e:	bfba      	itte	lt
 8008a60:	4249      	neglt	r1, r1
 8008a62:	232d      	movlt	r3, #45	@ 0x2d
 8008a64:	232b      	movge	r3, #43	@ 0x2b
 8008a66:	2909      	cmp	r1, #9
 8008a68:	7002      	strb	r2, [r0, #0]
 8008a6a:	7043      	strb	r3, [r0, #1]
 8008a6c:	dd29      	ble.n	8008ac2 <__exponent+0x68>
 8008a6e:	f10d 0307 	add.w	r3, sp, #7
 8008a72:	461d      	mov	r5, r3
 8008a74:	270a      	movs	r7, #10
 8008a76:	461a      	mov	r2, r3
 8008a78:	fbb1 f6f7 	udiv	r6, r1, r7
 8008a7c:	fb07 1416 	mls	r4, r7, r6, r1
 8008a80:	3430      	adds	r4, #48	@ 0x30
 8008a82:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008a86:	460c      	mov	r4, r1
 8008a88:	2c63      	cmp	r4, #99	@ 0x63
 8008a8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a8e:	4631      	mov	r1, r6
 8008a90:	dcf1      	bgt.n	8008a76 <__exponent+0x1c>
 8008a92:	3130      	adds	r1, #48	@ 0x30
 8008a94:	1e94      	subs	r4, r2, #2
 8008a96:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008a9a:	1c41      	adds	r1, r0, #1
 8008a9c:	4623      	mov	r3, r4
 8008a9e:	42ab      	cmp	r3, r5
 8008aa0:	d30a      	bcc.n	8008ab8 <__exponent+0x5e>
 8008aa2:	f10d 0309 	add.w	r3, sp, #9
 8008aa6:	1a9b      	subs	r3, r3, r2
 8008aa8:	42ac      	cmp	r4, r5
 8008aaa:	bf88      	it	hi
 8008aac:	2300      	movhi	r3, #0
 8008aae:	3302      	adds	r3, #2
 8008ab0:	4403      	add	r3, r0
 8008ab2:	1a18      	subs	r0, r3, r0
 8008ab4:	b003      	add	sp, #12
 8008ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ab8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008abc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008ac0:	e7ed      	b.n	8008a9e <__exponent+0x44>
 8008ac2:	2330      	movs	r3, #48	@ 0x30
 8008ac4:	3130      	adds	r1, #48	@ 0x30
 8008ac6:	7083      	strb	r3, [r0, #2]
 8008ac8:	70c1      	strb	r1, [r0, #3]
 8008aca:	1d03      	adds	r3, r0, #4
 8008acc:	e7f1      	b.n	8008ab2 <__exponent+0x58>
	...

08008ad0 <_printf_float>:
 8008ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad4:	b08d      	sub	sp, #52	@ 0x34
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008adc:	4616      	mov	r6, r2
 8008ade:	461f      	mov	r7, r3
 8008ae0:	4605      	mov	r5, r0
 8008ae2:	f000 fccb 	bl	800947c <_localeconv_r>
 8008ae6:	6803      	ldr	r3, [r0, #0]
 8008ae8:	9304      	str	r3, [sp, #16]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7f7 fbc0 	bl	8000270 <strlen>
 8008af0:	2300      	movs	r3, #0
 8008af2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008af4:	f8d8 3000 	ldr.w	r3, [r8]
 8008af8:	9005      	str	r0, [sp, #20]
 8008afa:	3307      	adds	r3, #7
 8008afc:	f023 0307 	bic.w	r3, r3, #7
 8008b00:	f103 0208 	add.w	r2, r3, #8
 8008b04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008b08:	f8d4 b000 	ldr.w	fp, [r4]
 8008b0c:	f8c8 2000 	str.w	r2, [r8]
 8008b10:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b14:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008b18:	9307      	str	r3, [sp, #28]
 8008b1a:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b1e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008b22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b26:	4b9c      	ldr	r3, [pc, #624]	@ (8008d98 <_printf_float+0x2c8>)
 8008b28:	f04f 32ff 	mov.w	r2, #4294967295
 8008b2c:	f7f7 fffe 	bl	8000b2c <__aeabi_dcmpun>
 8008b30:	bb70      	cbnz	r0, 8008b90 <_printf_float+0xc0>
 8008b32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b36:	4b98      	ldr	r3, [pc, #608]	@ (8008d98 <_printf_float+0x2c8>)
 8008b38:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3c:	f7f7 ffd8 	bl	8000af0 <__aeabi_dcmple>
 8008b40:	bb30      	cbnz	r0, 8008b90 <_printf_float+0xc0>
 8008b42:	2200      	movs	r2, #0
 8008b44:	2300      	movs	r3, #0
 8008b46:	4640      	mov	r0, r8
 8008b48:	4649      	mov	r1, r9
 8008b4a:	f7f7 ffc7 	bl	8000adc <__aeabi_dcmplt>
 8008b4e:	b110      	cbz	r0, 8008b56 <_printf_float+0x86>
 8008b50:	232d      	movs	r3, #45	@ 0x2d
 8008b52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b56:	4a91      	ldr	r2, [pc, #580]	@ (8008d9c <_printf_float+0x2cc>)
 8008b58:	4b91      	ldr	r3, [pc, #580]	@ (8008da0 <_printf_float+0x2d0>)
 8008b5a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008b5e:	bf8c      	ite	hi
 8008b60:	4690      	movhi	r8, r2
 8008b62:	4698      	movls	r8, r3
 8008b64:	2303      	movs	r3, #3
 8008b66:	6123      	str	r3, [r4, #16]
 8008b68:	f02b 0304 	bic.w	r3, fp, #4
 8008b6c:	6023      	str	r3, [r4, #0]
 8008b6e:	f04f 0900 	mov.w	r9, #0
 8008b72:	9700      	str	r7, [sp, #0]
 8008b74:	4633      	mov	r3, r6
 8008b76:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008b78:	4621      	mov	r1, r4
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	f000 f9d2 	bl	8008f24 <_printf_common>
 8008b80:	3001      	adds	r0, #1
 8008b82:	f040 808d 	bne.w	8008ca0 <_printf_float+0x1d0>
 8008b86:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8a:	b00d      	add	sp, #52	@ 0x34
 8008b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b90:	4642      	mov	r2, r8
 8008b92:	464b      	mov	r3, r9
 8008b94:	4640      	mov	r0, r8
 8008b96:	4649      	mov	r1, r9
 8008b98:	f7f7 ffc8 	bl	8000b2c <__aeabi_dcmpun>
 8008b9c:	b140      	cbz	r0, 8008bb0 <_printf_float+0xe0>
 8008b9e:	464b      	mov	r3, r9
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	bfbc      	itt	lt
 8008ba4:	232d      	movlt	r3, #45	@ 0x2d
 8008ba6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008baa:	4a7e      	ldr	r2, [pc, #504]	@ (8008da4 <_printf_float+0x2d4>)
 8008bac:	4b7e      	ldr	r3, [pc, #504]	@ (8008da8 <_printf_float+0x2d8>)
 8008bae:	e7d4      	b.n	8008b5a <_printf_float+0x8a>
 8008bb0:	6863      	ldr	r3, [r4, #4]
 8008bb2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008bb6:	9206      	str	r2, [sp, #24]
 8008bb8:	1c5a      	adds	r2, r3, #1
 8008bba:	d13b      	bne.n	8008c34 <_printf_float+0x164>
 8008bbc:	2306      	movs	r3, #6
 8008bbe:	6063      	str	r3, [r4, #4]
 8008bc0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	6022      	str	r2, [r4, #0]
 8008bc8:	9303      	str	r3, [sp, #12]
 8008bca:	ab0a      	add	r3, sp, #40	@ 0x28
 8008bcc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008bd0:	ab09      	add	r3, sp, #36	@ 0x24
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	6861      	ldr	r1, [r4, #4]
 8008bd6:	ec49 8b10 	vmov	d0, r8, r9
 8008bda:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008bde:	4628      	mov	r0, r5
 8008be0:	f7ff fed6 	bl	8008990 <__cvt>
 8008be4:	9b06      	ldr	r3, [sp, #24]
 8008be6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008be8:	2b47      	cmp	r3, #71	@ 0x47
 8008bea:	4680      	mov	r8, r0
 8008bec:	d129      	bne.n	8008c42 <_printf_float+0x172>
 8008bee:	1cc8      	adds	r0, r1, #3
 8008bf0:	db02      	blt.n	8008bf8 <_printf_float+0x128>
 8008bf2:	6863      	ldr	r3, [r4, #4]
 8008bf4:	4299      	cmp	r1, r3
 8008bf6:	dd41      	ble.n	8008c7c <_printf_float+0x1ac>
 8008bf8:	f1aa 0a02 	sub.w	sl, sl, #2
 8008bfc:	fa5f fa8a 	uxtb.w	sl, sl
 8008c00:	3901      	subs	r1, #1
 8008c02:	4652      	mov	r2, sl
 8008c04:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008c08:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c0a:	f7ff ff26 	bl	8008a5a <__exponent>
 8008c0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c10:	1813      	adds	r3, r2, r0
 8008c12:	2a01      	cmp	r2, #1
 8008c14:	4681      	mov	r9, r0
 8008c16:	6123      	str	r3, [r4, #16]
 8008c18:	dc02      	bgt.n	8008c20 <_printf_float+0x150>
 8008c1a:	6822      	ldr	r2, [r4, #0]
 8008c1c:	07d2      	lsls	r2, r2, #31
 8008c1e:	d501      	bpl.n	8008c24 <_printf_float+0x154>
 8008c20:	3301      	adds	r3, #1
 8008c22:	6123      	str	r3, [r4, #16]
 8008c24:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d0a2      	beq.n	8008b72 <_printf_float+0xa2>
 8008c2c:	232d      	movs	r3, #45	@ 0x2d
 8008c2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c32:	e79e      	b.n	8008b72 <_printf_float+0xa2>
 8008c34:	9a06      	ldr	r2, [sp, #24]
 8008c36:	2a47      	cmp	r2, #71	@ 0x47
 8008c38:	d1c2      	bne.n	8008bc0 <_printf_float+0xf0>
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1c0      	bne.n	8008bc0 <_printf_float+0xf0>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e7bd      	b.n	8008bbe <_printf_float+0xee>
 8008c42:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008c46:	d9db      	bls.n	8008c00 <_printf_float+0x130>
 8008c48:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008c4c:	d118      	bne.n	8008c80 <_printf_float+0x1b0>
 8008c4e:	2900      	cmp	r1, #0
 8008c50:	6863      	ldr	r3, [r4, #4]
 8008c52:	dd0b      	ble.n	8008c6c <_printf_float+0x19c>
 8008c54:	6121      	str	r1, [r4, #16]
 8008c56:	b913      	cbnz	r3, 8008c5e <_printf_float+0x18e>
 8008c58:	6822      	ldr	r2, [r4, #0]
 8008c5a:	07d0      	lsls	r0, r2, #31
 8008c5c:	d502      	bpl.n	8008c64 <_printf_float+0x194>
 8008c5e:	3301      	adds	r3, #1
 8008c60:	440b      	add	r3, r1
 8008c62:	6123      	str	r3, [r4, #16]
 8008c64:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008c66:	f04f 0900 	mov.w	r9, #0
 8008c6a:	e7db      	b.n	8008c24 <_printf_float+0x154>
 8008c6c:	b913      	cbnz	r3, 8008c74 <_printf_float+0x1a4>
 8008c6e:	6822      	ldr	r2, [r4, #0]
 8008c70:	07d2      	lsls	r2, r2, #31
 8008c72:	d501      	bpl.n	8008c78 <_printf_float+0x1a8>
 8008c74:	3302      	adds	r3, #2
 8008c76:	e7f4      	b.n	8008c62 <_printf_float+0x192>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e7f2      	b.n	8008c62 <_printf_float+0x192>
 8008c7c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008c80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c82:	4299      	cmp	r1, r3
 8008c84:	db05      	blt.n	8008c92 <_printf_float+0x1c2>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	6121      	str	r1, [r4, #16]
 8008c8a:	07d8      	lsls	r0, r3, #31
 8008c8c:	d5ea      	bpl.n	8008c64 <_printf_float+0x194>
 8008c8e:	1c4b      	adds	r3, r1, #1
 8008c90:	e7e7      	b.n	8008c62 <_printf_float+0x192>
 8008c92:	2900      	cmp	r1, #0
 8008c94:	bfd4      	ite	le
 8008c96:	f1c1 0202 	rsble	r2, r1, #2
 8008c9a:	2201      	movgt	r2, #1
 8008c9c:	4413      	add	r3, r2
 8008c9e:	e7e0      	b.n	8008c62 <_printf_float+0x192>
 8008ca0:	6823      	ldr	r3, [r4, #0]
 8008ca2:	055a      	lsls	r2, r3, #21
 8008ca4:	d407      	bmi.n	8008cb6 <_printf_float+0x1e6>
 8008ca6:	6923      	ldr	r3, [r4, #16]
 8008ca8:	4642      	mov	r2, r8
 8008caa:	4631      	mov	r1, r6
 8008cac:	4628      	mov	r0, r5
 8008cae:	47b8      	blx	r7
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	d12b      	bne.n	8008d0c <_printf_float+0x23c>
 8008cb4:	e767      	b.n	8008b86 <_printf_float+0xb6>
 8008cb6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008cba:	f240 80dd 	bls.w	8008e78 <_printf_float+0x3a8>
 8008cbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	f7f7 feff 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	d033      	beq.n	8008d36 <_printf_float+0x266>
 8008cce:	4a37      	ldr	r2, [pc, #220]	@ (8008dac <_printf_float+0x2dc>)
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	47b8      	blx	r7
 8008cd8:	3001      	adds	r0, #1
 8008cda:	f43f af54 	beq.w	8008b86 <_printf_float+0xb6>
 8008cde:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008ce2:	4543      	cmp	r3, r8
 8008ce4:	db02      	blt.n	8008cec <_printf_float+0x21c>
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	07d8      	lsls	r0, r3, #31
 8008cea:	d50f      	bpl.n	8008d0c <_printf_float+0x23c>
 8008cec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cf0:	4631      	mov	r1, r6
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	47b8      	blx	r7
 8008cf6:	3001      	adds	r0, #1
 8008cf8:	f43f af45 	beq.w	8008b86 <_printf_float+0xb6>
 8008cfc:	f04f 0900 	mov.w	r9, #0
 8008d00:	f108 38ff 	add.w	r8, r8, #4294967295
 8008d04:	f104 0a1a 	add.w	sl, r4, #26
 8008d08:	45c8      	cmp	r8, r9
 8008d0a:	dc09      	bgt.n	8008d20 <_printf_float+0x250>
 8008d0c:	6823      	ldr	r3, [r4, #0]
 8008d0e:	079b      	lsls	r3, r3, #30
 8008d10:	f100 8103 	bmi.w	8008f1a <_printf_float+0x44a>
 8008d14:	68e0      	ldr	r0, [r4, #12]
 8008d16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d18:	4298      	cmp	r0, r3
 8008d1a:	bfb8      	it	lt
 8008d1c:	4618      	movlt	r0, r3
 8008d1e:	e734      	b.n	8008b8a <_printf_float+0xba>
 8008d20:	2301      	movs	r3, #1
 8008d22:	4652      	mov	r2, sl
 8008d24:	4631      	mov	r1, r6
 8008d26:	4628      	mov	r0, r5
 8008d28:	47b8      	blx	r7
 8008d2a:	3001      	adds	r0, #1
 8008d2c:	f43f af2b 	beq.w	8008b86 <_printf_float+0xb6>
 8008d30:	f109 0901 	add.w	r9, r9, #1
 8008d34:	e7e8      	b.n	8008d08 <_printf_float+0x238>
 8008d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	dc39      	bgt.n	8008db0 <_printf_float+0x2e0>
 8008d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8008dac <_printf_float+0x2dc>)
 8008d3e:	2301      	movs	r3, #1
 8008d40:	4631      	mov	r1, r6
 8008d42:	4628      	mov	r0, r5
 8008d44:	47b8      	blx	r7
 8008d46:	3001      	adds	r0, #1
 8008d48:	f43f af1d 	beq.w	8008b86 <_printf_float+0xb6>
 8008d4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008d50:	ea59 0303 	orrs.w	r3, r9, r3
 8008d54:	d102      	bne.n	8008d5c <_printf_float+0x28c>
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	07d9      	lsls	r1, r3, #31
 8008d5a:	d5d7      	bpl.n	8008d0c <_printf_float+0x23c>
 8008d5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d60:	4631      	mov	r1, r6
 8008d62:	4628      	mov	r0, r5
 8008d64:	47b8      	blx	r7
 8008d66:	3001      	adds	r0, #1
 8008d68:	f43f af0d 	beq.w	8008b86 <_printf_float+0xb6>
 8008d6c:	f04f 0a00 	mov.w	sl, #0
 8008d70:	f104 0b1a 	add.w	fp, r4, #26
 8008d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d76:	425b      	negs	r3, r3
 8008d78:	4553      	cmp	r3, sl
 8008d7a:	dc01      	bgt.n	8008d80 <_printf_float+0x2b0>
 8008d7c:	464b      	mov	r3, r9
 8008d7e:	e793      	b.n	8008ca8 <_printf_float+0x1d8>
 8008d80:	2301      	movs	r3, #1
 8008d82:	465a      	mov	r2, fp
 8008d84:	4631      	mov	r1, r6
 8008d86:	4628      	mov	r0, r5
 8008d88:	47b8      	blx	r7
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	f43f aefb 	beq.w	8008b86 <_printf_float+0xb6>
 8008d90:	f10a 0a01 	add.w	sl, sl, #1
 8008d94:	e7ee      	b.n	8008d74 <_printf_float+0x2a4>
 8008d96:	bf00      	nop
 8008d98:	7fefffff 	.word	0x7fefffff
 8008d9c:	0800bc57 	.word	0x0800bc57
 8008da0:	0800bc53 	.word	0x0800bc53
 8008da4:	0800bc5f 	.word	0x0800bc5f
 8008da8:	0800bc5b 	.word	0x0800bc5b
 8008dac:	0800bc63 	.word	0x0800bc63
 8008db0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008db2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008db6:	4553      	cmp	r3, sl
 8008db8:	bfa8      	it	ge
 8008dba:	4653      	movge	r3, sl
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	4699      	mov	r9, r3
 8008dc0:	dc36      	bgt.n	8008e30 <_printf_float+0x360>
 8008dc2:	f04f 0b00 	mov.w	fp, #0
 8008dc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008dca:	f104 021a 	add.w	r2, r4, #26
 8008dce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008dd0:	9306      	str	r3, [sp, #24]
 8008dd2:	eba3 0309 	sub.w	r3, r3, r9
 8008dd6:	455b      	cmp	r3, fp
 8008dd8:	dc31      	bgt.n	8008e3e <_printf_float+0x36e>
 8008dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ddc:	459a      	cmp	sl, r3
 8008dde:	dc3a      	bgt.n	8008e56 <_printf_float+0x386>
 8008de0:	6823      	ldr	r3, [r4, #0]
 8008de2:	07da      	lsls	r2, r3, #31
 8008de4:	d437      	bmi.n	8008e56 <_printf_float+0x386>
 8008de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008de8:	ebaa 0903 	sub.w	r9, sl, r3
 8008dec:	9b06      	ldr	r3, [sp, #24]
 8008dee:	ebaa 0303 	sub.w	r3, sl, r3
 8008df2:	4599      	cmp	r9, r3
 8008df4:	bfa8      	it	ge
 8008df6:	4699      	movge	r9, r3
 8008df8:	f1b9 0f00 	cmp.w	r9, #0
 8008dfc:	dc33      	bgt.n	8008e66 <_printf_float+0x396>
 8008dfe:	f04f 0800 	mov.w	r8, #0
 8008e02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e06:	f104 0b1a 	add.w	fp, r4, #26
 8008e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e0c:	ebaa 0303 	sub.w	r3, sl, r3
 8008e10:	eba3 0309 	sub.w	r3, r3, r9
 8008e14:	4543      	cmp	r3, r8
 8008e16:	f77f af79 	ble.w	8008d0c <_printf_float+0x23c>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	465a      	mov	r2, fp
 8008e1e:	4631      	mov	r1, r6
 8008e20:	4628      	mov	r0, r5
 8008e22:	47b8      	blx	r7
 8008e24:	3001      	adds	r0, #1
 8008e26:	f43f aeae 	beq.w	8008b86 <_printf_float+0xb6>
 8008e2a:	f108 0801 	add.w	r8, r8, #1
 8008e2e:	e7ec      	b.n	8008e0a <_printf_float+0x33a>
 8008e30:	4642      	mov	r2, r8
 8008e32:	4631      	mov	r1, r6
 8008e34:	4628      	mov	r0, r5
 8008e36:	47b8      	blx	r7
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d1c2      	bne.n	8008dc2 <_printf_float+0x2f2>
 8008e3c:	e6a3      	b.n	8008b86 <_printf_float+0xb6>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	4631      	mov	r1, r6
 8008e42:	4628      	mov	r0, r5
 8008e44:	9206      	str	r2, [sp, #24]
 8008e46:	47b8      	blx	r7
 8008e48:	3001      	adds	r0, #1
 8008e4a:	f43f ae9c 	beq.w	8008b86 <_printf_float+0xb6>
 8008e4e:	9a06      	ldr	r2, [sp, #24]
 8008e50:	f10b 0b01 	add.w	fp, fp, #1
 8008e54:	e7bb      	b.n	8008dce <_printf_float+0x2fe>
 8008e56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e5a:	4631      	mov	r1, r6
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	47b8      	blx	r7
 8008e60:	3001      	adds	r0, #1
 8008e62:	d1c0      	bne.n	8008de6 <_printf_float+0x316>
 8008e64:	e68f      	b.n	8008b86 <_printf_float+0xb6>
 8008e66:	9a06      	ldr	r2, [sp, #24]
 8008e68:	464b      	mov	r3, r9
 8008e6a:	4442      	add	r2, r8
 8008e6c:	4631      	mov	r1, r6
 8008e6e:	4628      	mov	r0, r5
 8008e70:	47b8      	blx	r7
 8008e72:	3001      	adds	r0, #1
 8008e74:	d1c3      	bne.n	8008dfe <_printf_float+0x32e>
 8008e76:	e686      	b.n	8008b86 <_printf_float+0xb6>
 8008e78:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008e7c:	f1ba 0f01 	cmp.w	sl, #1
 8008e80:	dc01      	bgt.n	8008e86 <_printf_float+0x3b6>
 8008e82:	07db      	lsls	r3, r3, #31
 8008e84:	d536      	bpl.n	8008ef4 <_printf_float+0x424>
 8008e86:	2301      	movs	r3, #1
 8008e88:	4642      	mov	r2, r8
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	47b8      	blx	r7
 8008e90:	3001      	adds	r0, #1
 8008e92:	f43f ae78 	beq.w	8008b86 <_printf_float+0xb6>
 8008e96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e9a:	4631      	mov	r1, r6
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	47b8      	blx	r7
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	f43f ae70 	beq.w	8008b86 <_printf_float+0xb6>
 8008ea6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008eaa:	2200      	movs	r2, #0
 8008eac:	2300      	movs	r3, #0
 8008eae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008eb2:	f7f7 fe09 	bl	8000ac8 <__aeabi_dcmpeq>
 8008eb6:	b9c0      	cbnz	r0, 8008eea <_printf_float+0x41a>
 8008eb8:	4653      	mov	r3, sl
 8008eba:	f108 0201 	add.w	r2, r8, #1
 8008ebe:	4631      	mov	r1, r6
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	47b8      	blx	r7
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	d10c      	bne.n	8008ee2 <_printf_float+0x412>
 8008ec8:	e65d      	b.n	8008b86 <_printf_float+0xb6>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	465a      	mov	r2, fp
 8008ece:	4631      	mov	r1, r6
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	47b8      	blx	r7
 8008ed4:	3001      	adds	r0, #1
 8008ed6:	f43f ae56 	beq.w	8008b86 <_printf_float+0xb6>
 8008eda:	f108 0801 	add.w	r8, r8, #1
 8008ede:	45d0      	cmp	r8, sl
 8008ee0:	dbf3      	blt.n	8008eca <_printf_float+0x3fa>
 8008ee2:	464b      	mov	r3, r9
 8008ee4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008ee8:	e6df      	b.n	8008caa <_printf_float+0x1da>
 8008eea:	f04f 0800 	mov.w	r8, #0
 8008eee:	f104 0b1a 	add.w	fp, r4, #26
 8008ef2:	e7f4      	b.n	8008ede <_printf_float+0x40e>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	4642      	mov	r2, r8
 8008ef8:	e7e1      	b.n	8008ebe <_printf_float+0x3ee>
 8008efa:	2301      	movs	r3, #1
 8008efc:	464a      	mov	r2, r9
 8008efe:	4631      	mov	r1, r6
 8008f00:	4628      	mov	r0, r5
 8008f02:	47b8      	blx	r7
 8008f04:	3001      	adds	r0, #1
 8008f06:	f43f ae3e 	beq.w	8008b86 <_printf_float+0xb6>
 8008f0a:	f108 0801 	add.w	r8, r8, #1
 8008f0e:	68e3      	ldr	r3, [r4, #12]
 8008f10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f12:	1a5b      	subs	r3, r3, r1
 8008f14:	4543      	cmp	r3, r8
 8008f16:	dcf0      	bgt.n	8008efa <_printf_float+0x42a>
 8008f18:	e6fc      	b.n	8008d14 <_printf_float+0x244>
 8008f1a:	f04f 0800 	mov.w	r8, #0
 8008f1e:	f104 0919 	add.w	r9, r4, #25
 8008f22:	e7f4      	b.n	8008f0e <_printf_float+0x43e>

08008f24 <_printf_common>:
 8008f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f28:	4616      	mov	r6, r2
 8008f2a:	4698      	mov	r8, r3
 8008f2c:	688a      	ldr	r2, [r1, #8]
 8008f2e:	690b      	ldr	r3, [r1, #16]
 8008f30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f34:	4293      	cmp	r3, r2
 8008f36:	bfb8      	it	lt
 8008f38:	4613      	movlt	r3, r2
 8008f3a:	6033      	str	r3, [r6, #0]
 8008f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f40:	4607      	mov	r7, r0
 8008f42:	460c      	mov	r4, r1
 8008f44:	b10a      	cbz	r2, 8008f4a <_printf_common+0x26>
 8008f46:	3301      	adds	r3, #1
 8008f48:	6033      	str	r3, [r6, #0]
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	0699      	lsls	r1, r3, #26
 8008f4e:	bf42      	ittt	mi
 8008f50:	6833      	ldrmi	r3, [r6, #0]
 8008f52:	3302      	addmi	r3, #2
 8008f54:	6033      	strmi	r3, [r6, #0]
 8008f56:	6825      	ldr	r5, [r4, #0]
 8008f58:	f015 0506 	ands.w	r5, r5, #6
 8008f5c:	d106      	bne.n	8008f6c <_printf_common+0x48>
 8008f5e:	f104 0a19 	add.w	sl, r4, #25
 8008f62:	68e3      	ldr	r3, [r4, #12]
 8008f64:	6832      	ldr	r2, [r6, #0]
 8008f66:	1a9b      	subs	r3, r3, r2
 8008f68:	42ab      	cmp	r3, r5
 8008f6a:	dc26      	bgt.n	8008fba <_printf_common+0x96>
 8008f6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f70:	6822      	ldr	r2, [r4, #0]
 8008f72:	3b00      	subs	r3, #0
 8008f74:	bf18      	it	ne
 8008f76:	2301      	movne	r3, #1
 8008f78:	0692      	lsls	r2, r2, #26
 8008f7a:	d42b      	bmi.n	8008fd4 <_printf_common+0xb0>
 8008f7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f80:	4641      	mov	r1, r8
 8008f82:	4638      	mov	r0, r7
 8008f84:	47c8      	blx	r9
 8008f86:	3001      	adds	r0, #1
 8008f88:	d01e      	beq.n	8008fc8 <_printf_common+0xa4>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	6922      	ldr	r2, [r4, #16]
 8008f8e:	f003 0306 	and.w	r3, r3, #6
 8008f92:	2b04      	cmp	r3, #4
 8008f94:	bf02      	ittt	eq
 8008f96:	68e5      	ldreq	r5, [r4, #12]
 8008f98:	6833      	ldreq	r3, [r6, #0]
 8008f9a:	1aed      	subeq	r5, r5, r3
 8008f9c:	68a3      	ldr	r3, [r4, #8]
 8008f9e:	bf0c      	ite	eq
 8008fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fa4:	2500      	movne	r5, #0
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	bfc4      	itt	gt
 8008faa:	1a9b      	subgt	r3, r3, r2
 8008fac:	18ed      	addgt	r5, r5, r3
 8008fae:	2600      	movs	r6, #0
 8008fb0:	341a      	adds	r4, #26
 8008fb2:	42b5      	cmp	r5, r6
 8008fb4:	d11a      	bne.n	8008fec <_printf_common+0xc8>
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	e008      	b.n	8008fcc <_printf_common+0xa8>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	4652      	mov	r2, sl
 8008fbe:	4641      	mov	r1, r8
 8008fc0:	4638      	mov	r0, r7
 8008fc2:	47c8      	blx	r9
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	d103      	bne.n	8008fd0 <_printf_common+0xac>
 8008fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd0:	3501      	adds	r5, #1
 8008fd2:	e7c6      	b.n	8008f62 <_printf_common+0x3e>
 8008fd4:	18e1      	adds	r1, r4, r3
 8008fd6:	1c5a      	adds	r2, r3, #1
 8008fd8:	2030      	movs	r0, #48	@ 0x30
 8008fda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008fde:	4422      	add	r2, r4
 8008fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008fe4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008fe8:	3302      	adds	r3, #2
 8008fea:	e7c7      	b.n	8008f7c <_printf_common+0x58>
 8008fec:	2301      	movs	r3, #1
 8008fee:	4622      	mov	r2, r4
 8008ff0:	4641      	mov	r1, r8
 8008ff2:	4638      	mov	r0, r7
 8008ff4:	47c8      	blx	r9
 8008ff6:	3001      	adds	r0, #1
 8008ff8:	d0e6      	beq.n	8008fc8 <_printf_common+0xa4>
 8008ffa:	3601      	adds	r6, #1
 8008ffc:	e7d9      	b.n	8008fb2 <_printf_common+0x8e>
	...

08009000 <_printf_i>:
 8009000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009004:	7e0f      	ldrb	r7, [r1, #24]
 8009006:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009008:	2f78      	cmp	r7, #120	@ 0x78
 800900a:	4691      	mov	r9, r2
 800900c:	4680      	mov	r8, r0
 800900e:	460c      	mov	r4, r1
 8009010:	469a      	mov	sl, r3
 8009012:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009016:	d807      	bhi.n	8009028 <_printf_i+0x28>
 8009018:	2f62      	cmp	r7, #98	@ 0x62
 800901a:	d80a      	bhi.n	8009032 <_printf_i+0x32>
 800901c:	2f00      	cmp	r7, #0
 800901e:	f000 80d1 	beq.w	80091c4 <_printf_i+0x1c4>
 8009022:	2f58      	cmp	r7, #88	@ 0x58
 8009024:	f000 80b8 	beq.w	8009198 <_printf_i+0x198>
 8009028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800902c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009030:	e03a      	b.n	80090a8 <_printf_i+0xa8>
 8009032:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009036:	2b15      	cmp	r3, #21
 8009038:	d8f6      	bhi.n	8009028 <_printf_i+0x28>
 800903a:	a101      	add	r1, pc, #4	@ (adr r1, 8009040 <_printf_i+0x40>)
 800903c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009040:	08009099 	.word	0x08009099
 8009044:	080090ad 	.word	0x080090ad
 8009048:	08009029 	.word	0x08009029
 800904c:	08009029 	.word	0x08009029
 8009050:	08009029 	.word	0x08009029
 8009054:	08009029 	.word	0x08009029
 8009058:	080090ad 	.word	0x080090ad
 800905c:	08009029 	.word	0x08009029
 8009060:	08009029 	.word	0x08009029
 8009064:	08009029 	.word	0x08009029
 8009068:	08009029 	.word	0x08009029
 800906c:	080091ab 	.word	0x080091ab
 8009070:	080090d7 	.word	0x080090d7
 8009074:	08009165 	.word	0x08009165
 8009078:	08009029 	.word	0x08009029
 800907c:	08009029 	.word	0x08009029
 8009080:	080091cd 	.word	0x080091cd
 8009084:	08009029 	.word	0x08009029
 8009088:	080090d7 	.word	0x080090d7
 800908c:	08009029 	.word	0x08009029
 8009090:	08009029 	.word	0x08009029
 8009094:	0800916d 	.word	0x0800916d
 8009098:	6833      	ldr	r3, [r6, #0]
 800909a:	1d1a      	adds	r2, r3, #4
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6032      	str	r2, [r6, #0]
 80090a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80090a8:	2301      	movs	r3, #1
 80090aa:	e09c      	b.n	80091e6 <_printf_i+0x1e6>
 80090ac:	6833      	ldr	r3, [r6, #0]
 80090ae:	6820      	ldr	r0, [r4, #0]
 80090b0:	1d19      	adds	r1, r3, #4
 80090b2:	6031      	str	r1, [r6, #0]
 80090b4:	0606      	lsls	r6, r0, #24
 80090b6:	d501      	bpl.n	80090bc <_printf_i+0xbc>
 80090b8:	681d      	ldr	r5, [r3, #0]
 80090ba:	e003      	b.n	80090c4 <_printf_i+0xc4>
 80090bc:	0645      	lsls	r5, r0, #25
 80090be:	d5fb      	bpl.n	80090b8 <_printf_i+0xb8>
 80090c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80090c4:	2d00      	cmp	r5, #0
 80090c6:	da03      	bge.n	80090d0 <_printf_i+0xd0>
 80090c8:	232d      	movs	r3, #45	@ 0x2d
 80090ca:	426d      	negs	r5, r5
 80090cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090d0:	4858      	ldr	r0, [pc, #352]	@ (8009234 <_printf_i+0x234>)
 80090d2:	230a      	movs	r3, #10
 80090d4:	e011      	b.n	80090fa <_printf_i+0xfa>
 80090d6:	6821      	ldr	r1, [r4, #0]
 80090d8:	6833      	ldr	r3, [r6, #0]
 80090da:	0608      	lsls	r0, r1, #24
 80090dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80090e0:	d402      	bmi.n	80090e8 <_printf_i+0xe8>
 80090e2:	0649      	lsls	r1, r1, #25
 80090e4:	bf48      	it	mi
 80090e6:	b2ad      	uxthmi	r5, r5
 80090e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80090ea:	4852      	ldr	r0, [pc, #328]	@ (8009234 <_printf_i+0x234>)
 80090ec:	6033      	str	r3, [r6, #0]
 80090ee:	bf14      	ite	ne
 80090f0:	230a      	movne	r3, #10
 80090f2:	2308      	moveq	r3, #8
 80090f4:	2100      	movs	r1, #0
 80090f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80090fa:	6866      	ldr	r6, [r4, #4]
 80090fc:	60a6      	str	r6, [r4, #8]
 80090fe:	2e00      	cmp	r6, #0
 8009100:	db05      	blt.n	800910e <_printf_i+0x10e>
 8009102:	6821      	ldr	r1, [r4, #0]
 8009104:	432e      	orrs	r6, r5
 8009106:	f021 0104 	bic.w	r1, r1, #4
 800910a:	6021      	str	r1, [r4, #0]
 800910c:	d04b      	beq.n	80091a6 <_printf_i+0x1a6>
 800910e:	4616      	mov	r6, r2
 8009110:	fbb5 f1f3 	udiv	r1, r5, r3
 8009114:	fb03 5711 	mls	r7, r3, r1, r5
 8009118:	5dc7      	ldrb	r7, [r0, r7]
 800911a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800911e:	462f      	mov	r7, r5
 8009120:	42bb      	cmp	r3, r7
 8009122:	460d      	mov	r5, r1
 8009124:	d9f4      	bls.n	8009110 <_printf_i+0x110>
 8009126:	2b08      	cmp	r3, #8
 8009128:	d10b      	bne.n	8009142 <_printf_i+0x142>
 800912a:	6823      	ldr	r3, [r4, #0]
 800912c:	07df      	lsls	r7, r3, #31
 800912e:	d508      	bpl.n	8009142 <_printf_i+0x142>
 8009130:	6923      	ldr	r3, [r4, #16]
 8009132:	6861      	ldr	r1, [r4, #4]
 8009134:	4299      	cmp	r1, r3
 8009136:	bfde      	ittt	le
 8009138:	2330      	movle	r3, #48	@ 0x30
 800913a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800913e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009142:	1b92      	subs	r2, r2, r6
 8009144:	6122      	str	r2, [r4, #16]
 8009146:	f8cd a000 	str.w	sl, [sp]
 800914a:	464b      	mov	r3, r9
 800914c:	aa03      	add	r2, sp, #12
 800914e:	4621      	mov	r1, r4
 8009150:	4640      	mov	r0, r8
 8009152:	f7ff fee7 	bl	8008f24 <_printf_common>
 8009156:	3001      	adds	r0, #1
 8009158:	d14a      	bne.n	80091f0 <_printf_i+0x1f0>
 800915a:	f04f 30ff 	mov.w	r0, #4294967295
 800915e:	b004      	add	sp, #16
 8009160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	f043 0320 	orr.w	r3, r3, #32
 800916a:	6023      	str	r3, [r4, #0]
 800916c:	4832      	ldr	r0, [pc, #200]	@ (8009238 <_printf_i+0x238>)
 800916e:	2778      	movs	r7, #120	@ 0x78
 8009170:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	6831      	ldr	r1, [r6, #0]
 8009178:	061f      	lsls	r7, r3, #24
 800917a:	f851 5b04 	ldr.w	r5, [r1], #4
 800917e:	d402      	bmi.n	8009186 <_printf_i+0x186>
 8009180:	065f      	lsls	r7, r3, #25
 8009182:	bf48      	it	mi
 8009184:	b2ad      	uxthmi	r5, r5
 8009186:	6031      	str	r1, [r6, #0]
 8009188:	07d9      	lsls	r1, r3, #31
 800918a:	bf44      	itt	mi
 800918c:	f043 0320 	orrmi.w	r3, r3, #32
 8009190:	6023      	strmi	r3, [r4, #0]
 8009192:	b11d      	cbz	r5, 800919c <_printf_i+0x19c>
 8009194:	2310      	movs	r3, #16
 8009196:	e7ad      	b.n	80090f4 <_printf_i+0xf4>
 8009198:	4826      	ldr	r0, [pc, #152]	@ (8009234 <_printf_i+0x234>)
 800919a:	e7e9      	b.n	8009170 <_printf_i+0x170>
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	f023 0320 	bic.w	r3, r3, #32
 80091a2:	6023      	str	r3, [r4, #0]
 80091a4:	e7f6      	b.n	8009194 <_printf_i+0x194>
 80091a6:	4616      	mov	r6, r2
 80091a8:	e7bd      	b.n	8009126 <_printf_i+0x126>
 80091aa:	6833      	ldr	r3, [r6, #0]
 80091ac:	6825      	ldr	r5, [r4, #0]
 80091ae:	6961      	ldr	r1, [r4, #20]
 80091b0:	1d18      	adds	r0, r3, #4
 80091b2:	6030      	str	r0, [r6, #0]
 80091b4:	062e      	lsls	r6, r5, #24
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	d501      	bpl.n	80091be <_printf_i+0x1be>
 80091ba:	6019      	str	r1, [r3, #0]
 80091bc:	e002      	b.n	80091c4 <_printf_i+0x1c4>
 80091be:	0668      	lsls	r0, r5, #25
 80091c0:	d5fb      	bpl.n	80091ba <_printf_i+0x1ba>
 80091c2:	8019      	strh	r1, [r3, #0]
 80091c4:	2300      	movs	r3, #0
 80091c6:	6123      	str	r3, [r4, #16]
 80091c8:	4616      	mov	r6, r2
 80091ca:	e7bc      	b.n	8009146 <_printf_i+0x146>
 80091cc:	6833      	ldr	r3, [r6, #0]
 80091ce:	1d1a      	adds	r2, r3, #4
 80091d0:	6032      	str	r2, [r6, #0]
 80091d2:	681e      	ldr	r6, [r3, #0]
 80091d4:	6862      	ldr	r2, [r4, #4]
 80091d6:	2100      	movs	r1, #0
 80091d8:	4630      	mov	r0, r6
 80091da:	f7f6 fff9 	bl	80001d0 <memchr>
 80091de:	b108      	cbz	r0, 80091e4 <_printf_i+0x1e4>
 80091e0:	1b80      	subs	r0, r0, r6
 80091e2:	6060      	str	r0, [r4, #4]
 80091e4:	6863      	ldr	r3, [r4, #4]
 80091e6:	6123      	str	r3, [r4, #16]
 80091e8:	2300      	movs	r3, #0
 80091ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091ee:	e7aa      	b.n	8009146 <_printf_i+0x146>
 80091f0:	6923      	ldr	r3, [r4, #16]
 80091f2:	4632      	mov	r2, r6
 80091f4:	4649      	mov	r1, r9
 80091f6:	4640      	mov	r0, r8
 80091f8:	47d0      	blx	sl
 80091fa:	3001      	adds	r0, #1
 80091fc:	d0ad      	beq.n	800915a <_printf_i+0x15a>
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	079b      	lsls	r3, r3, #30
 8009202:	d413      	bmi.n	800922c <_printf_i+0x22c>
 8009204:	68e0      	ldr	r0, [r4, #12]
 8009206:	9b03      	ldr	r3, [sp, #12]
 8009208:	4298      	cmp	r0, r3
 800920a:	bfb8      	it	lt
 800920c:	4618      	movlt	r0, r3
 800920e:	e7a6      	b.n	800915e <_printf_i+0x15e>
 8009210:	2301      	movs	r3, #1
 8009212:	4632      	mov	r2, r6
 8009214:	4649      	mov	r1, r9
 8009216:	4640      	mov	r0, r8
 8009218:	47d0      	blx	sl
 800921a:	3001      	adds	r0, #1
 800921c:	d09d      	beq.n	800915a <_printf_i+0x15a>
 800921e:	3501      	adds	r5, #1
 8009220:	68e3      	ldr	r3, [r4, #12]
 8009222:	9903      	ldr	r1, [sp, #12]
 8009224:	1a5b      	subs	r3, r3, r1
 8009226:	42ab      	cmp	r3, r5
 8009228:	dcf2      	bgt.n	8009210 <_printf_i+0x210>
 800922a:	e7eb      	b.n	8009204 <_printf_i+0x204>
 800922c:	2500      	movs	r5, #0
 800922e:	f104 0619 	add.w	r6, r4, #25
 8009232:	e7f5      	b.n	8009220 <_printf_i+0x220>
 8009234:	0800bc65 	.word	0x0800bc65
 8009238:	0800bc76 	.word	0x0800bc76

0800923c <std>:
 800923c:	2300      	movs	r3, #0
 800923e:	b510      	push	{r4, lr}
 8009240:	4604      	mov	r4, r0
 8009242:	e9c0 3300 	strd	r3, r3, [r0]
 8009246:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800924a:	6083      	str	r3, [r0, #8]
 800924c:	8181      	strh	r1, [r0, #12]
 800924e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009250:	81c2      	strh	r2, [r0, #14]
 8009252:	6183      	str	r3, [r0, #24]
 8009254:	4619      	mov	r1, r3
 8009256:	2208      	movs	r2, #8
 8009258:	305c      	adds	r0, #92	@ 0x5c
 800925a:	f000 f906 	bl	800946a <memset>
 800925e:	4b0d      	ldr	r3, [pc, #52]	@ (8009294 <std+0x58>)
 8009260:	6263      	str	r3, [r4, #36]	@ 0x24
 8009262:	4b0d      	ldr	r3, [pc, #52]	@ (8009298 <std+0x5c>)
 8009264:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009266:	4b0d      	ldr	r3, [pc, #52]	@ (800929c <std+0x60>)
 8009268:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800926a:	4b0d      	ldr	r3, [pc, #52]	@ (80092a0 <std+0x64>)
 800926c:	6323      	str	r3, [r4, #48]	@ 0x30
 800926e:	4b0d      	ldr	r3, [pc, #52]	@ (80092a4 <std+0x68>)
 8009270:	6224      	str	r4, [r4, #32]
 8009272:	429c      	cmp	r4, r3
 8009274:	d006      	beq.n	8009284 <std+0x48>
 8009276:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800927a:	4294      	cmp	r4, r2
 800927c:	d002      	beq.n	8009284 <std+0x48>
 800927e:	33d0      	adds	r3, #208	@ 0xd0
 8009280:	429c      	cmp	r4, r3
 8009282:	d105      	bne.n	8009290 <std+0x54>
 8009284:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800928c:	f000 b96a 	b.w	8009564 <__retarget_lock_init_recursive>
 8009290:	bd10      	pop	{r4, pc}
 8009292:	bf00      	nop
 8009294:	080093e5 	.word	0x080093e5
 8009298:	08009407 	.word	0x08009407
 800929c:	0800943f 	.word	0x0800943f
 80092a0:	08009463 	.word	0x08009463
 80092a4:	200020e4 	.word	0x200020e4

080092a8 <stdio_exit_handler>:
 80092a8:	4a02      	ldr	r2, [pc, #8]	@ (80092b4 <stdio_exit_handler+0xc>)
 80092aa:	4903      	ldr	r1, [pc, #12]	@ (80092b8 <stdio_exit_handler+0x10>)
 80092ac:	4803      	ldr	r0, [pc, #12]	@ (80092bc <stdio_exit_handler+0x14>)
 80092ae:	f000 b869 	b.w	8009384 <_fwalk_sglue>
 80092b2:	bf00      	nop
 80092b4:	20000058 	.word	0x20000058
 80092b8:	0800aef9 	.word	0x0800aef9
 80092bc:	20000068 	.word	0x20000068

080092c0 <cleanup_stdio>:
 80092c0:	6841      	ldr	r1, [r0, #4]
 80092c2:	4b0c      	ldr	r3, [pc, #48]	@ (80092f4 <cleanup_stdio+0x34>)
 80092c4:	4299      	cmp	r1, r3
 80092c6:	b510      	push	{r4, lr}
 80092c8:	4604      	mov	r4, r0
 80092ca:	d001      	beq.n	80092d0 <cleanup_stdio+0x10>
 80092cc:	f001 fe14 	bl	800aef8 <_fflush_r>
 80092d0:	68a1      	ldr	r1, [r4, #8]
 80092d2:	4b09      	ldr	r3, [pc, #36]	@ (80092f8 <cleanup_stdio+0x38>)
 80092d4:	4299      	cmp	r1, r3
 80092d6:	d002      	beq.n	80092de <cleanup_stdio+0x1e>
 80092d8:	4620      	mov	r0, r4
 80092da:	f001 fe0d 	bl	800aef8 <_fflush_r>
 80092de:	68e1      	ldr	r1, [r4, #12]
 80092e0:	4b06      	ldr	r3, [pc, #24]	@ (80092fc <cleanup_stdio+0x3c>)
 80092e2:	4299      	cmp	r1, r3
 80092e4:	d004      	beq.n	80092f0 <cleanup_stdio+0x30>
 80092e6:	4620      	mov	r0, r4
 80092e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092ec:	f001 be04 	b.w	800aef8 <_fflush_r>
 80092f0:	bd10      	pop	{r4, pc}
 80092f2:	bf00      	nop
 80092f4:	200020e4 	.word	0x200020e4
 80092f8:	2000214c 	.word	0x2000214c
 80092fc:	200021b4 	.word	0x200021b4

08009300 <global_stdio_init.part.0>:
 8009300:	b510      	push	{r4, lr}
 8009302:	4b0b      	ldr	r3, [pc, #44]	@ (8009330 <global_stdio_init.part.0+0x30>)
 8009304:	4c0b      	ldr	r4, [pc, #44]	@ (8009334 <global_stdio_init.part.0+0x34>)
 8009306:	4a0c      	ldr	r2, [pc, #48]	@ (8009338 <global_stdio_init.part.0+0x38>)
 8009308:	601a      	str	r2, [r3, #0]
 800930a:	4620      	mov	r0, r4
 800930c:	2200      	movs	r2, #0
 800930e:	2104      	movs	r1, #4
 8009310:	f7ff ff94 	bl	800923c <std>
 8009314:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009318:	2201      	movs	r2, #1
 800931a:	2109      	movs	r1, #9
 800931c:	f7ff ff8e 	bl	800923c <std>
 8009320:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009324:	2202      	movs	r2, #2
 8009326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800932a:	2112      	movs	r1, #18
 800932c:	f7ff bf86 	b.w	800923c <std>
 8009330:	2000221c 	.word	0x2000221c
 8009334:	200020e4 	.word	0x200020e4
 8009338:	080092a9 	.word	0x080092a9

0800933c <__sfp_lock_acquire>:
 800933c:	4801      	ldr	r0, [pc, #4]	@ (8009344 <__sfp_lock_acquire+0x8>)
 800933e:	f000 b912 	b.w	8009566 <__retarget_lock_acquire_recursive>
 8009342:	bf00      	nop
 8009344:	20002225 	.word	0x20002225

08009348 <__sfp_lock_release>:
 8009348:	4801      	ldr	r0, [pc, #4]	@ (8009350 <__sfp_lock_release+0x8>)
 800934a:	f000 b90d 	b.w	8009568 <__retarget_lock_release_recursive>
 800934e:	bf00      	nop
 8009350:	20002225 	.word	0x20002225

08009354 <__sinit>:
 8009354:	b510      	push	{r4, lr}
 8009356:	4604      	mov	r4, r0
 8009358:	f7ff fff0 	bl	800933c <__sfp_lock_acquire>
 800935c:	6a23      	ldr	r3, [r4, #32]
 800935e:	b11b      	cbz	r3, 8009368 <__sinit+0x14>
 8009360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009364:	f7ff bff0 	b.w	8009348 <__sfp_lock_release>
 8009368:	4b04      	ldr	r3, [pc, #16]	@ (800937c <__sinit+0x28>)
 800936a:	6223      	str	r3, [r4, #32]
 800936c:	4b04      	ldr	r3, [pc, #16]	@ (8009380 <__sinit+0x2c>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1f5      	bne.n	8009360 <__sinit+0xc>
 8009374:	f7ff ffc4 	bl	8009300 <global_stdio_init.part.0>
 8009378:	e7f2      	b.n	8009360 <__sinit+0xc>
 800937a:	bf00      	nop
 800937c:	080092c1 	.word	0x080092c1
 8009380:	2000221c 	.word	0x2000221c

08009384 <_fwalk_sglue>:
 8009384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009388:	4607      	mov	r7, r0
 800938a:	4688      	mov	r8, r1
 800938c:	4614      	mov	r4, r2
 800938e:	2600      	movs	r6, #0
 8009390:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009394:	f1b9 0901 	subs.w	r9, r9, #1
 8009398:	d505      	bpl.n	80093a6 <_fwalk_sglue+0x22>
 800939a:	6824      	ldr	r4, [r4, #0]
 800939c:	2c00      	cmp	r4, #0
 800939e:	d1f7      	bne.n	8009390 <_fwalk_sglue+0xc>
 80093a0:	4630      	mov	r0, r6
 80093a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093a6:	89ab      	ldrh	r3, [r5, #12]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d907      	bls.n	80093bc <_fwalk_sglue+0x38>
 80093ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093b0:	3301      	adds	r3, #1
 80093b2:	d003      	beq.n	80093bc <_fwalk_sglue+0x38>
 80093b4:	4629      	mov	r1, r5
 80093b6:	4638      	mov	r0, r7
 80093b8:	47c0      	blx	r8
 80093ba:	4306      	orrs	r6, r0
 80093bc:	3568      	adds	r5, #104	@ 0x68
 80093be:	e7e9      	b.n	8009394 <_fwalk_sglue+0x10>

080093c0 <iprintf>:
 80093c0:	b40f      	push	{r0, r1, r2, r3}
 80093c2:	b507      	push	{r0, r1, r2, lr}
 80093c4:	4906      	ldr	r1, [pc, #24]	@ (80093e0 <iprintf+0x20>)
 80093c6:	ab04      	add	r3, sp, #16
 80093c8:	6808      	ldr	r0, [r1, #0]
 80093ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80093ce:	6881      	ldr	r1, [r0, #8]
 80093d0:	9301      	str	r3, [sp, #4]
 80093d2:	f001 fbf5 	bl	800abc0 <_vfiprintf_r>
 80093d6:	b003      	add	sp, #12
 80093d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093dc:	b004      	add	sp, #16
 80093de:	4770      	bx	lr
 80093e0:	20000064 	.word	0x20000064

080093e4 <__sread>:
 80093e4:	b510      	push	{r4, lr}
 80093e6:	460c      	mov	r4, r1
 80093e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ec:	f000 f86c 	bl	80094c8 <_read_r>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	bfab      	itete	ge
 80093f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80093f6:	89a3      	ldrhlt	r3, [r4, #12]
 80093f8:	181b      	addge	r3, r3, r0
 80093fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80093fe:	bfac      	ite	ge
 8009400:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009402:	81a3      	strhlt	r3, [r4, #12]
 8009404:	bd10      	pop	{r4, pc}

08009406 <__swrite>:
 8009406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800940a:	461f      	mov	r7, r3
 800940c:	898b      	ldrh	r3, [r1, #12]
 800940e:	05db      	lsls	r3, r3, #23
 8009410:	4605      	mov	r5, r0
 8009412:	460c      	mov	r4, r1
 8009414:	4616      	mov	r6, r2
 8009416:	d505      	bpl.n	8009424 <__swrite+0x1e>
 8009418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800941c:	2302      	movs	r3, #2
 800941e:	2200      	movs	r2, #0
 8009420:	f000 f840 	bl	80094a4 <_lseek_r>
 8009424:	89a3      	ldrh	r3, [r4, #12]
 8009426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800942a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800942e:	81a3      	strh	r3, [r4, #12]
 8009430:	4632      	mov	r2, r6
 8009432:	463b      	mov	r3, r7
 8009434:	4628      	mov	r0, r5
 8009436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800943a:	f000 b857 	b.w	80094ec <_write_r>

0800943e <__sseek>:
 800943e:	b510      	push	{r4, lr}
 8009440:	460c      	mov	r4, r1
 8009442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009446:	f000 f82d 	bl	80094a4 <_lseek_r>
 800944a:	1c43      	adds	r3, r0, #1
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	bf15      	itete	ne
 8009450:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009452:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009456:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800945a:	81a3      	strheq	r3, [r4, #12]
 800945c:	bf18      	it	ne
 800945e:	81a3      	strhne	r3, [r4, #12]
 8009460:	bd10      	pop	{r4, pc}

08009462 <__sclose>:
 8009462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009466:	f000 b80d 	b.w	8009484 <_close_r>

0800946a <memset>:
 800946a:	4402      	add	r2, r0
 800946c:	4603      	mov	r3, r0
 800946e:	4293      	cmp	r3, r2
 8009470:	d100      	bne.n	8009474 <memset+0xa>
 8009472:	4770      	bx	lr
 8009474:	f803 1b01 	strb.w	r1, [r3], #1
 8009478:	e7f9      	b.n	800946e <memset+0x4>
	...

0800947c <_localeconv_r>:
 800947c:	4800      	ldr	r0, [pc, #0]	@ (8009480 <_localeconv_r+0x4>)
 800947e:	4770      	bx	lr
 8009480:	200001a4 	.word	0x200001a4

08009484 <_close_r>:
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	4d06      	ldr	r5, [pc, #24]	@ (80094a0 <_close_r+0x1c>)
 8009488:	2300      	movs	r3, #0
 800948a:	4604      	mov	r4, r0
 800948c:	4608      	mov	r0, r1
 800948e:	602b      	str	r3, [r5, #0]
 8009490:	f7f8 fd7f 	bl	8001f92 <_close>
 8009494:	1c43      	adds	r3, r0, #1
 8009496:	d102      	bne.n	800949e <_close_r+0x1a>
 8009498:	682b      	ldr	r3, [r5, #0]
 800949a:	b103      	cbz	r3, 800949e <_close_r+0x1a>
 800949c:	6023      	str	r3, [r4, #0]
 800949e:	bd38      	pop	{r3, r4, r5, pc}
 80094a0:	20002220 	.word	0x20002220

080094a4 <_lseek_r>:
 80094a4:	b538      	push	{r3, r4, r5, lr}
 80094a6:	4d07      	ldr	r5, [pc, #28]	@ (80094c4 <_lseek_r+0x20>)
 80094a8:	4604      	mov	r4, r0
 80094aa:	4608      	mov	r0, r1
 80094ac:	4611      	mov	r1, r2
 80094ae:	2200      	movs	r2, #0
 80094b0:	602a      	str	r2, [r5, #0]
 80094b2:	461a      	mov	r2, r3
 80094b4:	f7f8 fd94 	bl	8001fe0 <_lseek>
 80094b8:	1c43      	adds	r3, r0, #1
 80094ba:	d102      	bne.n	80094c2 <_lseek_r+0x1e>
 80094bc:	682b      	ldr	r3, [r5, #0]
 80094be:	b103      	cbz	r3, 80094c2 <_lseek_r+0x1e>
 80094c0:	6023      	str	r3, [r4, #0]
 80094c2:	bd38      	pop	{r3, r4, r5, pc}
 80094c4:	20002220 	.word	0x20002220

080094c8 <_read_r>:
 80094c8:	b538      	push	{r3, r4, r5, lr}
 80094ca:	4d07      	ldr	r5, [pc, #28]	@ (80094e8 <_read_r+0x20>)
 80094cc:	4604      	mov	r4, r0
 80094ce:	4608      	mov	r0, r1
 80094d0:	4611      	mov	r1, r2
 80094d2:	2200      	movs	r2, #0
 80094d4:	602a      	str	r2, [r5, #0]
 80094d6:	461a      	mov	r2, r3
 80094d8:	f7f8 fd22 	bl	8001f20 <_read>
 80094dc:	1c43      	adds	r3, r0, #1
 80094de:	d102      	bne.n	80094e6 <_read_r+0x1e>
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	b103      	cbz	r3, 80094e6 <_read_r+0x1e>
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	bd38      	pop	{r3, r4, r5, pc}
 80094e8:	20002220 	.word	0x20002220

080094ec <_write_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4d07      	ldr	r5, [pc, #28]	@ (800950c <_write_r+0x20>)
 80094f0:	4604      	mov	r4, r0
 80094f2:	4608      	mov	r0, r1
 80094f4:	4611      	mov	r1, r2
 80094f6:	2200      	movs	r2, #0
 80094f8:	602a      	str	r2, [r5, #0]
 80094fa:	461a      	mov	r2, r3
 80094fc:	f7f8 fd2d 	bl	8001f5a <_write>
 8009500:	1c43      	adds	r3, r0, #1
 8009502:	d102      	bne.n	800950a <_write_r+0x1e>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	b103      	cbz	r3, 800950a <_write_r+0x1e>
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	bd38      	pop	{r3, r4, r5, pc}
 800950c:	20002220 	.word	0x20002220

08009510 <__errno>:
 8009510:	4b01      	ldr	r3, [pc, #4]	@ (8009518 <__errno+0x8>)
 8009512:	6818      	ldr	r0, [r3, #0]
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	20000064 	.word	0x20000064

0800951c <__libc_init_array>:
 800951c:	b570      	push	{r4, r5, r6, lr}
 800951e:	4d0d      	ldr	r5, [pc, #52]	@ (8009554 <__libc_init_array+0x38>)
 8009520:	4c0d      	ldr	r4, [pc, #52]	@ (8009558 <__libc_init_array+0x3c>)
 8009522:	1b64      	subs	r4, r4, r5
 8009524:	10a4      	asrs	r4, r4, #2
 8009526:	2600      	movs	r6, #0
 8009528:	42a6      	cmp	r6, r4
 800952a:	d109      	bne.n	8009540 <__libc_init_array+0x24>
 800952c:	4d0b      	ldr	r5, [pc, #44]	@ (800955c <__libc_init_array+0x40>)
 800952e:	4c0c      	ldr	r4, [pc, #48]	@ (8009560 <__libc_init_array+0x44>)
 8009530:	f001 fec2 	bl	800b2b8 <_init>
 8009534:	1b64      	subs	r4, r4, r5
 8009536:	10a4      	asrs	r4, r4, #2
 8009538:	2600      	movs	r6, #0
 800953a:	42a6      	cmp	r6, r4
 800953c:	d105      	bne.n	800954a <__libc_init_array+0x2e>
 800953e:	bd70      	pop	{r4, r5, r6, pc}
 8009540:	f855 3b04 	ldr.w	r3, [r5], #4
 8009544:	4798      	blx	r3
 8009546:	3601      	adds	r6, #1
 8009548:	e7ee      	b.n	8009528 <__libc_init_array+0xc>
 800954a:	f855 3b04 	ldr.w	r3, [r5], #4
 800954e:	4798      	blx	r3
 8009550:	3601      	adds	r6, #1
 8009552:	e7f2      	b.n	800953a <__libc_init_array+0x1e>
 8009554:	0800bfbc 	.word	0x0800bfbc
 8009558:	0800bfbc 	.word	0x0800bfbc
 800955c:	0800bfbc 	.word	0x0800bfbc
 8009560:	0800bfc0 	.word	0x0800bfc0

08009564 <__retarget_lock_init_recursive>:
 8009564:	4770      	bx	lr

08009566 <__retarget_lock_acquire_recursive>:
 8009566:	4770      	bx	lr

08009568 <__retarget_lock_release_recursive>:
 8009568:	4770      	bx	lr

0800956a <memcpy>:
 800956a:	440a      	add	r2, r1
 800956c:	4291      	cmp	r1, r2
 800956e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009572:	d100      	bne.n	8009576 <memcpy+0xc>
 8009574:	4770      	bx	lr
 8009576:	b510      	push	{r4, lr}
 8009578:	f811 4b01 	ldrb.w	r4, [r1], #1
 800957c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009580:	4291      	cmp	r1, r2
 8009582:	d1f9      	bne.n	8009578 <memcpy+0xe>
 8009584:	bd10      	pop	{r4, pc}
	...

08009588 <__assert_func>:
 8009588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800958a:	4614      	mov	r4, r2
 800958c:	461a      	mov	r2, r3
 800958e:	4b09      	ldr	r3, [pc, #36]	@ (80095b4 <__assert_func+0x2c>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4605      	mov	r5, r0
 8009594:	68d8      	ldr	r0, [r3, #12]
 8009596:	b14c      	cbz	r4, 80095ac <__assert_func+0x24>
 8009598:	4b07      	ldr	r3, [pc, #28]	@ (80095b8 <__assert_func+0x30>)
 800959a:	9100      	str	r1, [sp, #0]
 800959c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095a0:	4906      	ldr	r1, [pc, #24]	@ (80095bc <__assert_func+0x34>)
 80095a2:	462b      	mov	r3, r5
 80095a4:	f001 fcd0 	bl	800af48 <fiprintf>
 80095a8:	f001 fd84 	bl	800b0b4 <abort>
 80095ac:	4b04      	ldr	r3, [pc, #16]	@ (80095c0 <__assert_func+0x38>)
 80095ae:	461c      	mov	r4, r3
 80095b0:	e7f3      	b.n	800959a <__assert_func+0x12>
 80095b2:	bf00      	nop
 80095b4:	20000064 	.word	0x20000064
 80095b8:	0800bc87 	.word	0x0800bc87
 80095bc:	0800bc94 	.word	0x0800bc94
 80095c0:	0800bcc2 	.word	0x0800bcc2

080095c4 <quorem>:
 80095c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c8:	6903      	ldr	r3, [r0, #16]
 80095ca:	690c      	ldr	r4, [r1, #16]
 80095cc:	42a3      	cmp	r3, r4
 80095ce:	4607      	mov	r7, r0
 80095d0:	db7e      	blt.n	80096d0 <quorem+0x10c>
 80095d2:	3c01      	subs	r4, #1
 80095d4:	f101 0814 	add.w	r8, r1, #20
 80095d8:	00a3      	lsls	r3, r4, #2
 80095da:	f100 0514 	add.w	r5, r0, #20
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095e4:	9301      	str	r3, [sp, #4]
 80095e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80095ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095ee:	3301      	adds	r3, #1
 80095f0:	429a      	cmp	r2, r3
 80095f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80095f6:	fbb2 f6f3 	udiv	r6, r2, r3
 80095fa:	d32e      	bcc.n	800965a <quorem+0x96>
 80095fc:	f04f 0a00 	mov.w	sl, #0
 8009600:	46c4      	mov	ip, r8
 8009602:	46ae      	mov	lr, r5
 8009604:	46d3      	mov	fp, sl
 8009606:	f85c 3b04 	ldr.w	r3, [ip], #4
 800960a:	b298      	uxth	r0, r3
 800960c:	fb06 a000 	mla	r0, r6, r0, sl
 8009610:	0c02      	lsrs	r2, r0, #16
 8009612:	0c1b      	lsrs	r3, r3, #16
 8009614:	fb06 2303 	mla	r3, r6, r3, r2
 8009618:	f8de 2000 	ldr.w	r2, [lr]
 800961c:	b280      	uxth	r0, r0
 800961e:	b292      	uxth	r2, r2
 8009620:	1a12      	subs	r2, r2, r0
 8009622:	445a      	add	r2, fp
 8009624:	f8de 0000 	ldr.w	r0, [lr]
 8009628:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800962c:	b29b      	uxth	r3, r3
 800962e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009632:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009636:	b292      	uxth	r2, r2
 8009638:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800963c:	45e1      	cmp	r9, ip
 800963e:	f84e 2b04 	str.w	r2, [lr], #4
 8009642:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009646:	d2de      	bcs.n	8009606 <quorem+0x42>
 8009648:	9b00      	ldr	r3, [sp, #0]
 800964a:	58eb      	ldr	r3, [r5, r3]
 800964c:	b92b      	cbnz	r3, 800965a <quorem+0x96>
 800964e:	9b01      	ldr	r3, [sp, #4]
 8009650:	3b04      	subs	r3, #4
 8009652:	429d      	cmp	r5, r3
 8009654:	461a      	mov	r2, r3
 8009656:	d32f      	bcc.n	80096b8 <quorem+0xf4>
 8009658:	613c      	str	r4, [r7, #16]
 800965a:	4638      	mov	r0, r7
 800965c:	f001 f97e 	bl	800a95c <__mcmp>
 8009660:	2800      	cmp	r0, #0
 8009662:	db25      	blt.n	80096b0 <quorem+0xec>
 8009664:	4629      	mov	r1, r5
 8009666:	2000      	movs	r0, #0
 8009668:	f858 2b04 	ldr.w	r2, [r8], #4
 800966c:	f8d1 c000 	ldr.w	ip, [r1]
 8009670:	fa1f fe82 	uxth.w	lr, r2
 8009674:	fa1f f38c 	uxth.w	r3, ip
 8009678:	eba3 030e 	sub.w	r3, r3, lr
 800967c:	4403      	add	r3, r0
 800967e:	0c12      	lsrs	r2, r2, #16
 8009680:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009684:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009688:	b29b      	uxth	r3, r3
 800968a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800968e:	45c1      	cmp	r9, r8
 8009690:	f841 3b04 	str.w	r3, [r1], #4
 8009694:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009698:	d2e6      	bcs.n	8009668 <quorem+0xa4>
 800969a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800969e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096a2:	b922      	cbnz	r2, 80096ae <quorem+0xea>
 80096a4:	3b04      	subs	r3, #4
 80096a6:	429d      	cmp	r5, r3
 80096a8:	461a      	mov	r2, r3
 80096aa:	d30b      	bcc.n	80096c4 <quorem+0x100>
 80096ac:	613c      	str	r4, [r7, #16]
 80096ae:	3601      	adds	r6, #1
 80096b0:	4630      	mov	r0, r6
 80096b2:	b003      	add	sp, #12
 80096b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b8:	6812      	ldr	r2, [r2, #0]
 80096ba:	3b04      	subs	r3, #4
 80096bc:	2a00      	cmp	r2, #0
 80096be:	d1cb      	bne.n	8009658 <quorem+0x94>
 80096c0:	3c01      	subs	r4, #1
 80096c2:	e7c6      	b.n	8009652 <quorem+0x8e>
 80096c4:	6812      	ldr	r2, [r2, #0]
 80096c6:	3b04      	subs	r3, #4
 80096c8:	2a00      	cmp	r2, #0
 80096ca:	d1ef      	bne.n	80096ac <quorem+0xe8>
 80096cc:	3c01      	subs	r4, #1
 80096ce:	e7ea      	b.n	80096a6 <quorem+0xe2>
 80096d0:	2000      	movs	r0, #0
 80096d2:	e7ee      	b.n	80096b2 <quorem+0xee>
 80096d4:	0000      	movs	r0, r0
	...

080096d8 <_dtoa_r>:
 80096d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096dc:	69c7      	ldr	r7, [r0, #28]
 80096de:	b097      	sub	sp, #92	@ 0x5c
 80096e0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80096e4:	ec55 4b10 	vmov	r4, r5, d0
 80096e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80096ea:	9107      	str	r1, [sp, #28]
 80096ec:	4681      	mov	r9, r0
 80096ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80096f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80096f2:	b97f      	cbnz	r7, 8009714 <_dtoa_r+0x3c>
 80096f4:	2010      	movs	r0, #16
 80096f6:	f000 fe09 	bl	800a30c <malloc>
 80096fa:	4602      	mov	r2, r0
 80096fc:	f8c9 001c 	str.w	r0, [r9, #28]
 8009700:	b920      	cbnz	r0, 800970c <_dtoa_r+0x34>
 8009702:	4ba9      	ldr	r3, [pc, #676]	@ (80099a8 <_dtoa_r+0x2d0>)
 8009704:	21ef      	movs	r1, #239	@ 0xef
 8009706:	48a9      	ldr	r0, [pc, #676]	@ (80099ac <_dtoa_r+0x2d4>)
 8009708:	f7ff ff3e 	bl	8009588 <__assert_func>
 800970c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009710:	6007      	str	r7, [r0, #0]
 8009712:	60c7      	str	r7, [r0, #12]
 8009714:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009718:	6819      	ldr	r1, [r3, #0]
 800971a:	b159      	cbz	r1, 8009734 <_dtoa_r+0x5c>
 800971c:	685a      	ldr	r2, [r3, #4]
 800971e:	604a      	str	r2, [r1, #4]
 8009720:	2301      	movs	r3, #1
 8009722:	4093      	lsls	r3, r2
 8009724:	608b      	str	r3, [r1, #8]
 8009726:	4648      	mov	r0, r9
 8009728:	f000 fee6 	bl	800a4f8 <_Bfree>
 800972c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009730:	2200      	movs	r2, #0
 8009732:	601a      	str	r2, [r3, #0]
 8009734:	1e2b      	subs	r3, r5, #0
 8009736:	bfb9      	ittee	lt
 8009738:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800973c:	9305      	strlt	r3, [sp, #20]
 800973e:	2300      	movge	r3, #0
 8009740:	6033      	strge	r3, [r6, #0]
 8009742:	9f05      	ldr	r7, [sp, #20]
 8009744:	4b9a      	ldr	r3, [pc, #616]	@ (80099b0 <_dtoa_r+0x2d8>)
 8009746:	bfbc      	itt	lt
 8009748:	2201      	movlt	r2, #1
 800974a:	6032      	strlt	r2, [r6, #0]
 800974c:	43bb      	bics	r3, r7
 800974e:	d112      	bne.n	8009776 <_dtoa_r+0x9e>
 8009750:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009752:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009756:	6013      	str	r3, [r2, #0]
 8009758:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800975c:	4323      	orrs	r3, r4
 800975e:	f000 855a 	beq.w	800a216 <_dtoa_r+0xb3e>
 8009762:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009764:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80099c4 <_dtoa_r+0x2ec>
 8009768:	2b00      	cmp	r3, #0
 800976a:	f000 855c 	beq.w	800a226 <_dtoa_r+0xb4e>
 800976e:	f10a 0303 	add.w	r3, sl, #3
 8009772:	f000 bd56 	b.w	800a222 <_dtoa_r+0xb4a>
 8009776:	ed9d 7b04 	vldr	d7, [sp, #16]
 800977a:	2200      	movs	r2, #0
 800977c:	ec51 0b17 	vmov	r0, r1, d7
 8009780:	2300      	movs	r3, #0
 8009782:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009786:	f7f7 f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800978a:	4680      	mov	r8, r0
 800978c:	b158      	cbz	r0, 80097a6 <_dtoa_r+0xce>
 800978e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009790:	2301      	movs	r3, #1
 8009792:	6013      	str	r3, [r2, #0]
 8009794:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009796:	b113      	cbz	r3, 800979e <_dtoa_r+0xc6>
 8009798:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800979a:	4b86      	ldr	r3, [pc, #536]	@ (80099b4 <_dtoa_r+0x2dc>)
 800979c:	6013      	str	r3, [r2, #0]
 800979e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80099c8 <_dtoa_r+0x2f0>
 80097a2:	f000 bd40 	b.w	800a226 <_dtoa_r+0xb4e>
 80097a6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80097aa:	aa14      	add	r2, sp, #80	@ 0x50
 80097ac:	a915      	add	r1, sp, #84	@ 0x54
 80097ae:	4648      	mov	r0, r9
 80097b0:	f001 f984 	bl	800aabc <__d2b>
 80097b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80097b8:	9002      	str	r0, [sp, #8]
 80097ba:	2e00      	cmp	r6, #0
 80097bc:	d078      	beq.n	80098b0 <_dtoa_r+0x1d8>
 80097be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097c0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80097c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80097cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80097d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80097d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80097d8:	4619      	mov	r1, r3
 80097da:	2200      	movs	r2, #0
 80097dc:	4b76      	ldr	r3, [pc, #472]	@ (80099b8 <_dtoa_r+0x2e0>)
 80097de:	f7f6 fd53 	bl	8000288 <__aeabi_dsub>
 80097e2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009990 <_dtoa_r+0x2b8>)
 80097e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e8:	f7f6 ff06 	bl	80005f8 <__aeabi_dmul>
 80097ec:	a36a      	add	r3, pc, #424	@ (adr r3, 8009998 <_dtoa_r+0x2c0>)
 80097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f2:	f7f6 fd4b 	bl	800028c <__adddf3>
 80097f6:	4604      	mov	r4, r0
 80097f8:	4630      	mov	r0, r6
 80097fa:	460d      	mov	r5, r1
 80097fc:	f7f6 fe92 	bl	8000524 <__aeabi_i2d>
 8009800:	a367      	add	r3, pc, #412	@ (adr r3, 80099a0 <_dtoa_r+0x2c8>)
 8009802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009806:	f7f6 fef7 	bl	80005f8 <__aeabi_dmul>
 800980a:	4602      	mov	r2, r0
 800980c:	460b      	mov	r3, r1
 800980e:	4620      	mov	r0, r4
 8009810:	4629      	mov	r1, r5
 8009812:	f7f6 fd3b 	bl	800028c <__adddf3>
 8009816:	4604      	mov	r4, r0
 8009818:	460d      	mov	r5, r1
 800981a:	f7f7 f99d 	bl	8000b58 <__aeabi_d2iz>
 800981e:	2200      	movs	r2, #0
 8009820:	4607      	mov	r7, r0
 8009822:	2300      	movs	r3, #0
 8009824:	4620      	mov	r0, r4
 8009826:	4629      	mov	r1, r5
 8009828:	f7f7 f958 	bl	8000adc <__aeabi_dcmplt>
 800982c:	b140      	cbz	r0, 8009840 <_dtoa_r+0x168>
 800982e:	4638      	mov	r0, r7
 8009830:	f7f6 fe78 	bl	8000524 <__aeabi_i2d>
 8009834:	4622      	mov	r2, r4
 8009836:	462b      	mov	r3, r5
 8009838:	f7f7 f946 	bl	8000ac8 <__aeabi_dcmpeq>
 800983c:	b900      	cbnz	r0, 8009840 <_dtoa_r+0x168>
 800983e:	3f01      	subs	r7, #1
 8009840:	2f16      	cmp	r7, #22
 8009842:	d852      	bhi.n	80098ea <_dtoa_r+0x212>
 8009844:	4b5d      	ldr	r3, [pc, #372]	@ (80099bc <_dtoa_r+0x2e4>)
 8009846:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009852:	f7f7 f943 	bl	8000adc <__aeabi_dcmplt>
 8009856:	2800      	cmp	r0, #0
 8009858:	d049      	beq.n	80098ee <_dtoa_r+0x216>
 800985a:	3f01      	subs	r7, #1
 800985c:	2300      	movs	r3, #0
 800985e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009860:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009862:	1b9b      	subs	r3, r3, r6
 8009864:	1e5a      	subs	r2, r3, #1
 8009866:	bf45      	ittet	mi
 8009868:	f1c3 0301 	rsbmi	r3, r3, #1
 800986c:	9300      	strmi	r3, [sp, #0]
 800986e:	2300      	movpl	r3, #0
 8009870:	2300      	movmi	r3, #0
 8009872:	9206      	str	r2, [sp, #24]
 8009874:	bf54      	ite	pl
 8009876:	9300      	strpl	r3, [sp, #0]
 8009878:	9306      	strmi	r3, [sp, #24]
 800987a:	2f00      	cmp	r7, #0
 800987c:	db39      	blt.n	80098f2 <_dtoa_r+0x21a>
 800987e:	9b06      	ldr	r3, [sp, #24]
 8009880:	970d      	str	r7, [sp, #52]	@ 0x34
 8009882:	443b      	add	r3, r7
 8009884:	9306      	str	r3, [sp, #24]
 8009886:	2300      	movs	r3, #0
 8009888:	9308      	str	r3, [sp, #32]
 800988a:	9b07      	ldr	r3, [sp, #28]
 800988c:	2b09      	cmp	r3, #9
 800988e:	d863      	bhi.n	8009958 <_dtoa_r+0x280>
 8009890:	2b05      	cmp	r3, #5
 8009892:	bfc4      	itt	gt
 8009894:	3b04      	subgt	r3, #4
 8009896:	9307      	strgt	r3, [sp, #28]
 8009898:	9b07      	ldr	r3, [sp, #28]
 800989a:	f1a3 0302 	sub.w	r3, r3, #2
 800989e:	bfcc      	ite	gt
 80098a0:	2400      	movgt	r4, #0
 80098a2:	2401      	movle	r4, #1
 80098a4:	2b03      	cmp	r3, #3
 80098a6:	d863      	bhi.n	8009970 <_dtoa_r+0x298>
 80098a8:	e8df f003 	tbb	[pc, r3]
 80098ac:	2b375452 	.word	0x2b375452
 80098b0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80098b4:	441e      	add	r6, r3
 80098b6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80098ba:	2b20      	cmp	r3, #32
 80098bc:	bfc1      	itttt	gt
 80098be:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80098c2:	409f      	lslgt	r7, r3
 80098c4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80098c8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80098cc:	bfd6      	itet	le
 80098ce:	f1c3 0320 	rsble	r3, r3, #32
 80098d2:	ea47 0003 	orrgt.w	r0, r7, r3
 80098d6:	fa04 f003 	lslle.w	r0, r4, r3
 80098da:	f7f6 fe13 	bl	8000504 <__aeabi_ui2d>
 80098de:	2201      	movs	r2, #1
 80098e0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80098e4:	3e01      	subs	r6, #1
 80098e6:	9212      	str	r2, [sp, #72]	@ 0x48
 80098e8:	e776      	b.n	80097d8 <_dtoa_r+0x100>
 80098ea:	2301      	movs	r3, #1
 80098ec:	e7b7      	b.n	800985e <_dtoa_r+0x186>
 80098ee:	9010      	str	r0, [sp, #64]	@ 0x40
 80098f0:	e7b6      	b.n	8009860 <_dtoa_r+0x188>
 80098f2:	9b00      	ldr	r3, [sp, #0]
 80098f4:	1bdb      	subs	r3, r3, r7
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	427b      	negs	r3, r7
 80098fa:	9308      	str	r3, [sp, #32]
 80098fc:	2300      	movs	r3, #0
 80098fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8009900:	e7c3      	b.n	800988a <_dtoa_r+0x1b2>
 8009902:	2301      	movs	r3, #1
 8009904:	9309      	str	r3, [sp, #36]	@ 0x24
 8009906:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009908:	eb07 0b03 	add.w	fp, r7, r3
 800990c:	f10b 0301 	add.w	r3, fp, #1
 8009910:	2b01      	cmp	r3, #1
 8009912:	9303      	str	r3, [sp, #12]
 8009914:	bfb8      	it	lt
 8009916:	2301      	movlt	r3, #1
 8009918:	e006      	b.n	8009928 <_dtoa_r+0x250>
 800991a:	2301      	movs	r3, #1
 800991c:	9309      	str	r3, [sp, #36]	@ 0x24
 800991e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009920:	2b00      	cmp	r3, #0
 8009922:	dd28      	ble.n	8009976 <_dtoa_r+0x29e>
 8009924:	469b      	mov	fp, r3
 8009926:	9303      	str	r3, [sp, #12]
 8009928:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800992c:	2100      	movs	r1, #0
 800992e:	2204      	movs	r2, #4
 8009930:	f102 0514 	add.w	r5, r2, #20
 8009934:	429d      	cmp	r5, r3
 8009936:	d926      	bls.n	8009986 <_dtoa_r+0x2ae>
 8009938:	6041      	str	r1, [r0, #4]
 800993a:	4648      	mov	r0, r9
 800993c:	f000 fd9c 	bl	800a478 <_Balloc>
 8009940:	4682      	mov	sl, r0
 8009942:	2800      	cmp	r0, #0
 8009944:	d142      	bne.n	80099cc <_dtoa_r+0x2f4>
 8009946:	4b1e      	ldr	r3, [pc, #120]	@ (80099c0 <_dtoa_r+0x2e8>)
 8009948:	4602      	mov	r2, r0
 800994a:	f240 11af 	movw	r1, #431	@ 0x1af
 800994e:	e6da      	b.n	8009706 <_dtoa_r+0x2e>
 8009950:	2300      	movs	r3, #0
 8009952:	e7e3      	b.n	800991c <_dtoa_r+0x244>
 8009954:	2300      	movs	r3, #0
 8009956:	e7d5      	b.n	8009904 <_dtoa_r+0x22c>
 8009958:	2401      	movs	r4, #1
 800995a:	2300      	movs	r3, #0
 800995c:	9307      	str	r3, [sp, #28]
 800995e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009960:	f04f 3bff 	mov.w	fp, #4294967295
 8009964:	2200      	movs	r2, #0
 8009966:	f8cd b00c 	str.w	fp, [sp, #12]
 800996a:	2312      	movs	r3, #18
 800996c:	920c      	str	r2, [sp, #48]	@ 0x30
 800996e:	e7db      	b.n	8009928 <_dtoa_r+0x250>
 8009970:	2301      	movs	r3, #1
 8009972:	9309      	str	r3, [sp, #36]	@ 0x24
 8009974:	e7f4      	b.n	8009960 <_dtoa_r+0x288>
 8009976:	f04f 0b01 	mov.w	fp, #1
 800997a:	f8cd b00c 	str.w	fp, [sp, #12]
 800997e:	465b      	mov	r3, fp
 8009980:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009984:	e7d0      	b.n	8009928 <_dtoa_r+0x250>
 8009986:	3101      	adds	r1, #1
 8009988:	0052      	lsls	r2, r2, #1
 800998a:	e7d1      	b.n	8009930 <_dtoa_r+0x258>
 800998c:	f3af 8000 	nop.w
 8009990:	636f4361 	.word	0x636f4361
 8009994:	3fd287a7 	.word	0x3fd287a7
 8009998:	8b60c8b3 	.word	0x8b60c8b3
 800999c:	3fc68a28 	.word	0x3fc68a28
 80099a0:	509f79fb 	.word	0x509f79fb
 80099a4:	3fd34413 	.word	0x3fd34413
 80099a8:	0800bbe4 	.word	0x0800bbe4
 80099ac:	0800bcd0 	.word	0x0800bcd0
 80099b0:	7ff00000 	.word	0x7ff00000
 80099b4:	0800bc64 	.word	0x0800bc64
 80099b8:	3ff80000 	.word	0x3ff80000
 80099bc:	0800bde8 	.word	0x0800bde8
 80099c0:	0800bd28 	.word	0x0800bd28
 80099c4:	0800bccc 	.word	0x0800bccc
 80099c8:	0800bc63 	.word	0x0800bc63
 80099cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80099d0:	6018      	str	r0, [r3, #0]
 80099d2:	9b03      	ldr	r3, [sp, #12]
 80099d4:	2b0e      	cmp	r3, #14
 80099d6:	f200 80a1 	bhi.w	8009b1c <_dtoa_r+0x444>
 80099da:	2c00      	cmp	r4, #0
 80099dc:	f000 809e 	beq.w	8009b1c <_dtoa_r+0x444>
 80099e0:	2f00      	cmp	r7, #0
 80099e2:	dd33      	ble.n	8009a4c <_dtoa_r+0x374>
 80099e4:	4b9c      	ldr	r3, [pc, #624]	@ (8009c58 <_dtoa_r+0x580>)
 80099e6:	f007 020f 	and.w	r2, r7, #15
 80099ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099ee:	ed93 7b00 	vldr	d7, [r3]
 80099f2:	05f8      	lsls	r0, r7, #23
 80099f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80099f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80099fc:	d516      	bpl.n	8009a2c <_dtoa_r+0x354>
 80099fe:	4b97      	ldr	r3, [pc, #604]	@ (8009c5c <_dtoa_r+0x584>)
 8009a00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009a04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a08:	f7f6 ff20 	bl	800084c <__aeabi_ddiv>
 8009a0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a10:	f004 040f 	and.w	r4, r4, #15
 8009a14:	2603      	movs	r6, #3
 8009a16:	4d91      	ldr	r5, [pc, #580]	@ (8009c5c <_dtoa_r+0x584>)
 8009a18:	b954      	cbnz	r4, 8009a30 <_dtoa_r+0x358>
 8009a1a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a22:	f7f6 ff13 	bl	800084c <__aeabi_ddiv>
 8009a26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a2a:	e028      	b.n	8009a7e <_dtoa_r+0x3a6>
 8009a2c:	2602      	movs	r6, #2
 8009a2e:	e7f2      	b.n	8009a16 <_dtoa_r+0x33e>
 8009a30:	07e1      	lsls	r1, r4, #31
 8009a32:	d508      	bpl.n	8009a46 <_dtoa_r+0x36e>
 8009a34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009a38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a3c:	f7f6 fddc 	bl	80005f8 <__aeabi_dmul>
 8009a40:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009a44:	3601      	adds	r6, #1
 8009a46:	1064      	asrs	r4, r4, #1
 8009a48:	3508      	adds	r5, #8
 8009a4a:	e7e5      	b.n	8009a18 <_dtoa_r+0x340>
 8009a4c:	f000 80af 	beq.w	8009bae <_dtoa_r+0x4d6>
 8009a50:	427c      	negs	r4, r7
 8009a52:	4b81      	ldr	r3, [pc, #516]	@ (8009c58 <_dtoa_r+0x580>)
 8009a54:	4d81      	ldr	r5, [pc, #516]	@ (8009c5c <_dtoa_r+0x584>)
 8009a56:	f004 020f 	and.w	r2, r4, #15
 8009a5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009a66:	f7f6 fdc7 	bl	80005f8 <__aeabi_dmul>
 8009a6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a6e:	1124      	asrs	r4, r4, #4
 8009a70:	2300      	movs	r3, #0
 8009a72:	2602      	movs	r6, #2
 8009a74:	2c00      	cmp	r4, #0
 8009a76:	f040 808f 	bne.w	8009b98 <_dtoa_r+0x4c0>
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1d3      	bne.n	8009a26 <_dtoa_r+0x34e>
 8009a7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a80:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f000 8094 	beq.w	8009bb2 <_dtoa_r+0x4da>
 8009a8a:	4b75      	ldr	r3, [pc, #468]	@ (8009c60 <_dtoa_r+0x588>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	4620      	mov	r0, r4
 8009a90:	4629      	mov	r1, r5
 8009a92:	f7f7 f823 	bl	8000adc <__aeabi_dcmplt>
 8009a96:	2800      	cmp	r0, #0
 8009a98:	f000 808b 	beq.w	8009bb2 <_dtoa_r+0x4da>
 8009a9c:	9b03      	ldr	r3, [sp, #12]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f000 8087 	beq.w	8009bb2 <_dtoa_r+0x4da>
 8009aa4:	f1bb 0f00 	cmp.w	fp, #0
 8009aa8:	dd34      	ble.n	8009b14 <_dtoa_r+0x43c>
 8009aaa:	4620      	mov	r0, r4
 8009aac:	4b6d      	ldr	r3, [pc, #436]	@ (8009c64 <_dtoa_r+0x58c>)
 8009aae:	2200      	movs	r2, #0
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	f7f6 fda1 	bl	80005f8 <__aeabi_dmul>
 8009ab6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009aba:	f107 38ff 	add.w	r8, r7, #4294967295
 8009abe:	3601      	adds	r6, #1
 8009ac0:	465c      	mov	r4, fp
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f7f6 fd2e 	bl	8000524 <__aeabi_i2d>
 8009ac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009acc:	f7f6 fd94 	bl	80005f8 <__aeabi_dmul>
 8009ad0:	4b65      	ldr	r3, [pc, #404]	@ (8009c68 <_dtoa_r+0x590>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f7f6 fbda 	bl	800028c <__adddf3>
 8009ad8:	4605      	mov	r5, r0
 8009ada:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009ade:	2c00      	cmp	r4, #0
 8009ae0:	d16a      	bne.n	8009bb8 <_dtoa_r+0x4e0>
 8009ae2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ae6:	4b61      	ldr	r3, [pc, #388]	@ (8009c6c <_dtoa_r+0x594>)
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f7f6 fbcd 	bl	8000288 <__aeabi_dsub>
 8009aee:	4602      	mov	r2, r0
 8009af0:	460b      	mov	r3, r1
 8009af2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009af6:	462a      	mov	r2, r5
 8009af8:	4633      	mov	r3, r6
 8009afa:	f7f7 f80d 	bl	8000b18 <__aeabi_dcmpgt>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	f040 8298 	bne.w	800a034 <_dtoa_r+0x95c>
 8009b04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b08:	462a      	mov	r2, r5
 8009b0a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009b0e:	f7f6 ffe5 	bl	8000adc <__aeabi_dcmplt>
 8009b12:	bb38      	cbnz	r0, 8009b64 <_dtoa_r+0x48c>
 8009b14:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009b18:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009b1c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	f2c0 8157 	blt.w	8009dd2 <_dtoa_r+0x6fa>
 8009b24:	2f0e      	cmp	r7, #14
 8009b26:	f300 8154 	bgt.w	8009dd2 <_dtoa_r+0x6fa>
 8009b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8009c58 <_dtoa_r+0x580>)
 8009b2c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b30:	ed93 7b00 	vldr	d7, [r3]
 8009b34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	ed8d 7b00 	vstr	d7, [sp]
 8009b3c:	f280 80e5 	bge.w	8009d0a <_dtoa_r+0x632>
 8009b40:	9b03      	ldr	r3, [sp, #12]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f300 80e1 	bgt.w	8009d0a <_dtoa_r+0x632>
 8009b48:	d10c      	bne.n	8009b64 <_dtoa_r+0x48c>
 8009b4a:	4b48      	ldr	r3, [pc, #288]	@ (8009c6c <_dtoa_r+0x594>)
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	ec51 0b17 	vmov	r0, r1, d7
 8009b52:	f7f6 fd51 	bl	80005f8 <__aeabi_dmul>
 8009b56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b5a:	f7f6 ffd3 	bl	8000b04 <__aeabi_dcmpge>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	f000 8266 	beq.w	800a030 <_dtoa_r+0x958>
 8009b64:	2400      	movs	r4, #0
 8009b66:	4625      	mov	r5, r4
 8009b68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b6a:	4656      	mov	r6, sl
 8009b6c:	ea6f 0803 	mvn.w	r8, r3
 8009b70:	2700      	movs	r7, #0
 8009b72:	4621      	mov	r1, r4
 8009b74:	4648      	mov	r0, r9
 8009b76:	f000 fcbf 	bl	800a4f8 <_Bfree>
 8009b7a:	2d00      	cmp	r5, #0
 8009b7c:	f000 80bd 	beq.w	8009cfa <_dtoa_r+0x622>
 8009b80:	b12f      	cbz	r7, 8009b8e <_dtoa_r+0x4b6>
 8009b82:	42af      	cmp	r7, r5
 8009b84:	d003      	beq.n	8009b8e <_dtoa_r+0x4b6>
 8009b86:	4639      	mov	r1, r7
 8009b88:	4648      	mov	r0, r9
 8009b8a:	f000 fcb5 	bl	800a4f8 <_Bfree>
 8009b8e:	4629      	mov	r1, r5
 8009b90:	4648      	mov	r0, r9
 8009b92:	f000 fcb1 	bl	800a4f8 <_Bfree>
 8009b96:	e0b0      	b.n	8009cfa <_dtoa_r+0x622>
 8009b98:	07e2      	lsls	r2, r4, #31
 8009b9a:	d505      	bpl.n	8009ba8 <_dtoa_r+0x4d0>
 8009b9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ba0:	f7f6 fd2a 	bl	80005f8 <__aeabi_dmul>
 8009ba4:	3601      	adds	r6, #1
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	1064      	asrs	r4, r4, #1
 8009baa:	3508      	adds	r5, #8
 8009bac:	e762      	b.n	8009a74 <_dtoa_r+0x39c>
 8009bae:	2602      	movs	r6, #2
 8009bb0:	e765      	b.n	8009a7e <_dtoa_r+0x3a6>
 8009bb2:	9c03      	ldr	r4, [sp, #12]
 8009bb4:	46b8      	mov	r8, r7
 8009bb6:	e784      	b.n	8009ac2 <_dtoa_r+0x3ea>
 8009bb8:	4b27      	ldr	r3, [pc, #156]	@ (8009c58 <_dtoa_r+0x580>)
 8009bba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009bbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009bc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009bc4:	4454      	add	r4, sl
 8009bc6:	2900      	cmp	r1, #0
 8009bc8:	d054      	beq.n	8009c74 <_dtoa_r+0x59c>
 8009bca:	4929      	ldr	r1, [pc, #164]	@ (8009c70 <_dtoa_r+0x598>)
 8009bcc:	2000      	movs	r0, #0
 8009bce:	f7f6 fe3d 	bl	800084c <__aeabi_ddiv>
 8009bd2:	4633      	mov	r3, r6
 8009bd4:	462a      	mov	r2, r5
 8009bd6:	f7f6 fb57 	bl	8000288 <__aeabi_dsub>
 8009bda:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009bde:	4656      	mov	r6, sl
 8009be0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009be4:	f7f6 ffb8 	bl	8000b58 <__aeabi_d2iz>
 8009be8:	4605      	mov	r5, r0
 8009bea:	f7f6 fc9b 	bl	8000524 <__aeabi_i2d>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bf6:	f7f6 fb47 	bl	8000288 <__aeabi_dsub>
 8009bfa:	3530      	adds	r5, #48	@ 0x30
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	460b      	mov	r3, r1
 8009c00:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c04:	f806 5b01 	strb.w	r5, [r6], #1
 8009c08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009c0c:	f7f6 ff66 	bl	8000adc <__aeabi_dcmplt>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d172      	bne.n	8009cfa <_dtoa_r+0x622>
 8009c14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c18:	4911      	ldr	r1, [pc, #68]	@ (8009c60 <_dtoa_r+0x588>)
 8009c1a:	2000      	movs	r0, #0
 8009c1c:	f7f6 fb34 	bl	8000288 <__aeabi_dsub>
 8009c20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009c24:	f7f6 ff5a 	bl	8000adc <__aeabi_dcmplt>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	f040 80b4 	bne.w	8009d96 <_dtoa_r+0x6be>
 8009c2e:	42a6      	cmp	r6, r4
 8009c30:	f43f af70 	beq.w	8009b14 <_dtoa_r+0x43c>
 8009c34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009c38:	4b0a      	ldr	r3, [pc, #40]	@ (8009c64 <_dtoa_r+0x58c>)
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f7f6 fcdc 	bl	80005f8 <__aeabi_dmul>
 8009c40:	4b08      	ldr	r3, [pc, #32]	@ (8009c64 <_dtoa_r+0x58c>)
 8009c42:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009c46:	2200      	movs	r2, #0
 8009c48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c4c:	f7f6 fcd4 	bl	80005f8 <__aeabi_dmul>
 8009c50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c54:	e7c4      	b.n	8009be0 <_dtoa_r+0x508>
 8009c56:	bf00      	nop
 8009c58:	0800bde8 	.word	0x0800bde8
 8009c5c:	0800bdc0 	.word	0x0800bdc0
 8009c60:	3ff00000 	.word	0x3ff00000
 8009c64:	40240000 	.word	0x40240000
 8009c68:	401c0000 	.word	0x401c0000
 8009c6c:	40140000 	.word	0x40140000
 8009c70:	3fe00000 	.word	0x3fe00000
 8009c74:	4631      	mov	r1, r6
 8009c76:	4628      	mov	r0, r5
 8009c78:	f7f6 fcbe 	bl	80005f8 <__aeabi_dmul>
 8009c7c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009c80:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009c82:	4656      	mov	r6, sl
 8009c84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c88:	f7f6 ff66 	bl	8000b58 <__aeabi_d2iz>
 8009c8c:	4605      	mov	r5, r0
 8009c8e:	f7f6 fc49 	bl	8000524 <__aeabi_i2d>
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c9a:	f7f6 faf5 	bl	8000288 <__aeabi_dsub>
 8009c9e:	3530      	adds	r5, #48	@ 0x30
 8009ca0:	f806 5b01 	strb.w	r5, [r6], #1
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	42a6      	cmp	r6, r4
 8009caa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009cae:	f04f 0200 	mov.w	r2, #0
 8009cb2:	d124      	bne.n	8009cfe <_dtoa_r+0x626>
 8009cb4:	4baf      	ldr	r3, [pc, #700]	@ (8009f74 <_dtoa_r+0x89c>)
 8009cb6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009cba:	f7f6 fae7 	bl	800028c <__adddf3>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cc6:	f7f6 ff27 	bl	8000b18 <__aeabi_dcmpgt>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	d163      	bne.n	8009d96 <_dtoa_r+0x6be>
 8009cce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009cd2:	49a8      	ldr	r1, [pc, #672]	@ (8009f74 <_dtoa_r+0x89c>)
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	f7f6 fad7 	bl	8000288 <__aeabi_dsub>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	460b      	mov	r3, r1
 8009cde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ce2:	f7f6 fefb 	bl	8000adc <__aeabi_dcmplt>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	f43f af14 	beq.w	8009b14 <_dtoa_r+0x43c>
 8009cec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009cee:	1e73      	subs	r3, r6, #1
 8009cf0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009cf2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009cf6:	2b30      	cmp	r3, #48	@ 0x30
 8009cf8:	d0f8      	beq.n	8009cec <_dtoa_r+0x614>
 8009cfa:	4647      	mov	r7, r8
 8009cfc:	e03b      	b.n	8009d76 <_dtoa_r+0x69e>
 8009cfe:	4b9e      	ldr	r3, [pc, #632]	@ (8009f78 <_dtoa_r+0x8a0>)
 8009d00:	f7f6 fc7a 	bl	80005f8 <__aeabi_dmul>
 8009d04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d08:	e7bc      	b.n	8009c84 <_dtoa_r+0x5ac>
 8009d0a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009d0e:	4656      	mov	r6, sl
 8009d10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d14:	4620      	mov	r0, r4
 8009d16:	4629      	mov	r1, r5
 8009d18:	f7f6 fd98 	bl	800084c <__aeabi_ddiv>
 8009d1c:	f7f6 ff1c 	bl	8000b58 <__aeabi_d2iz>
 8009d20:	4680      	mov	r8, r0
 8009d22:	f7f6 fbff 	bl	8000524 <__aeabi_i2d>
 8009d26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d2a:	f7f6 fc65 	bl	80005f8 <__aeabi_dmul>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	460b      	mov	r3, r1
 8009d32:	4620      	mov	r0, r4
 8009d34:	4629      	mov	r1, r5
 8009d36:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009d3a:	f7f6 faa5 	bl	8000288 <__aeabi_dsub>
 8009d3e:	f806 4b01 	strb.w	r4, [r6], #1
 8009d42:	9d03      	ldr	r5, [sp, #12]
 8009d44:	eba6 040a 	sub.w	r4, r6, sl
 8009d48:	42a5      	cmp	r5, r4
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	d133      	bne.n	8009db8 <_dtoa_r+0x6e0>
 8009d50:	f7f6 fa9c 	bl	800028c <__adddf3>
 8009d54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d58:	4604      	mov	r4, r0
 8009d5a:	460d      	mov	r5, r1
 8009d5c:	f7f6 fedc 	bl	8000b18 <__aeabi_dcmpgt>
 8009d60:	b9c0      	cbnz	r0, 8009d94 <_dtoa_r+0x6bc>
 8009d62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d66:	4620      	mov	r0, r4
 8009d68:	4629      	mov	r1, r5
 8009d6a:	f7f6 fead 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d6e:	b110      	cbz	r0, 8009d76 <_dtoa_r+0x69e>
 8009d70:	f018 0f01 	tst.w	r8, #1
 8009d74:	d10e      	bne.n	8009d94 <_dtoa_r+0x6bc>
 8009d76:	9902      	ldr	r1, [sp, #8]
 8009d78:	4648      	mov	r0, r9
 8009d7a:	f000 fbbd 	bl	800a4f8 <_Bfree>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	7033      	strb	r3, [r6, #0]
 8009d82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009d84:	3701      	adds	r7, #1
 8009d86:	601f      	str	r7, [r3, #0]
 8009d88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f000 824b 	beq.w	800a226 <_dtoa_r+0xb4e>
 8009d90:	601e      	str	r6, [r3, #0]
 8009d92:	e248      	b.n	800a226 <_dtoa_r+0xb4e>
 8009d94:	46b8      	mov	r8, r7
 8009d96:	4633      	mov	r3, r6
 8009d98:	461e      	mov	r6, r3
 8009d9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d9e:	2a39      	cmp	r2, #57	@ 0x39
 8009da0:	d106      	bne.n	8009db0 <_dtoa_r+0x6d8>
 8009da2:	459a      	cmp	sl, r3
 8009da4:	d1f8      	bne.n	8009d98 <_dtoa_r+0x6c0>
 8009da6:	2230      	movs	r2, #48	@ 0x30
 8009da8:	f108 0801 	add.w	r8, r8, #1
 8009dac:	f88a 2000 	strb.w	r2, [sl]
 8009db0:	781a      	ldrb	r2, [r3, #0]
 8009db2:	3201      	adds	r2, #1
 8009db4:	701a      	strb	r2, [r3, #0]
 8009db6:	e7a0      	b.n	8009cfa <_dtoa_r+0x622>
 8009db8:	4b6f      	ldr	r3, [pc, #444]	@ (8009f78 <_dtoa_r+0x8a0>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f7f6 fc1c 	bl	80005f8 <__aeabi_dmul>
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	460d      	mov	r5, r1
 8009dc8:	f7f6 fe7e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	d09f      	beq.n	8009d10 <_dtoa_r+0x638>
 8009dd0:	e7d1      	b.n	8009d76 <_dtoa_r+0x69e>
 8009dd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dd4:	2a00      	cmp	r2, #0
 8009dd6:	f000 80ea 	beq.w	8009fae <_dtoa_r+0x8d6>
 8009dda:	9a07      	ldr	r2, [sp, #28]
 8009ddc:	2a01      	cmp	r2, #1
 8009dde:	f300 80cd 	bgt.w	8009f7c <_dtoa_r+0x8a4>
 8009de2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009de4:	2a00      	cmp	r2, #0
 8009de6:	f000 80c1 	beq.w	8009f6c <_dtoa_r+0x894>
 8009dea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009dee:	9c08      	ldr	r4, [sp, #32]
 8009df0:	9e00      	ldr	r6, [sp, #0]
 8009df2:	9a00      	ldr	r2, [sp, #0]
 8009df4:	441a      	add	r2, r3
 8009df6:	9200      	str	r2, [sp, #0]
 8009df8:	9a06      	ldr	r2, [sp, #24]
 8009dfa:	2101      	movs	r1, #1
 8009dfc:	441a      	add	r2, r3
 8009dfe:	4648      	mov	r0, r9
 8009e00:	9206      	str	r2, [sp, #24]
 8009e02:	f000 fc2d 	bl	800a660 <__i2b>
 8009e06:	4605      	mov	r5, r0
 8009e08:	b166      	cbz	r6, 8009e24 <_dtoa_r+0x74c>
 8009e0a:	9b06      	ldr	r3, [sp, #24]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	dd09      	ble.n	8009e24 <_dtoa_r+0x74c>
 8009e10:	42b3      	cmp	r3, r6
 8009e12:	9a00      	ldr	r2, [sp, #0]
 8009e14:	bfa8      	it	ge
 8009e16:	4633      	movge	r3, r6
 8009e18:	1ad2      	subs	r2, r2, r3
 8009e1a:	9200      	str	r2, [sp, #0]
 8009e1c:	9a06      	ldr	r2, [sp, #24]
 8009e1e:	1af6      	subs	r6, r6, r3
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	9306      	str	r3, [sp, #24]
 8009e24:	9b08      	ldr	r3, [sp, #32]
 8009e26:	b30b      	cbz	r3, 8009e6c <_dtoa_r+0x794>
 8009e28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f000 80c6 	beq.w	8009fbc <_dtoa_r+0x8e4>
 8009e30:	2c00      	cmp	r4, #0
 8009e32:	f000 80c0 	beq.w	8009fb6 <_dtoa_r+0x8de>
 8009e36:	4629      	mov	r1, r5
 8009e38:	4622      	mov	r2, r4
 8009e3a:	4648      	mov	r0, r9
 8009e3c:	f000 fcc8 	bl	800a7d0 <__pow5mult>
 8009e40:	9a02      	ldr	r2, [sp, #8]
 8009e42:	4601      	mov	r1, r0
 8009e44:	4605      	mov	r5, r0
 8009e46:	4648      	mov	r0, r9
 8009e48:	f000 fc20 	bl	800a68c <__multiply>
 8009e4c:	9902      	ldr	r1, [sp, #8]
 8009e4e:	4680      	mov	r8, r0
 8009e50:	4648      	mov	r0, r9
 8009e52:	f000 fb51 	bl	800a4f8 <_Bfree>
 8009e56:	9b08      	ldr	r3, [sp, #32]
 8009e58:	1b1b      	subs	r3, r3, r4
 8009e5a:	9308      	str	r3, [sp, #32]
 8009e5c:	f000 80b1 	beq.w	8009fc2 <_dtoa_r+0x8ea>
 8009e60:	9a08      	ldr	r2, [sp, #32]
 8009e62:	4641      	mov	r1, r8
 8009e64:	4648      	mov	r0, r9
 8009e66:	f000 fcb3 	bl	800a7d0 <__pow5mult>
 8009e6a:	9002      	str	r0, [sp, #8]
 8009e6c:	2101      	movs	r1, #1
 8009e6e:	4648      	mov	r0, r9
 8009e70:	f000 fbf6 	bl	800a660 <__i2b>
 8009e74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e76:	4604      	mov	r4, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f000 81d8 	beq.w	800a22e <_dtoa_r+0xb56>
 8009e7e:	461a      	mov	r2, r3
 8009e80:	4601      	mov	r1, r0
 8009e82:	4648      	mov	r0, r9
 8009e84:	f000 fca4 	bl	800a7d0 <__pow5mult>
 8009e88:	9b07      	ldr	r3, [sp, #28]
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	4604      	mov	r4, r0
 8009e8e:	f300 809f 	bgt.w	8009fd0 <_dtoa_r+0x8f8>
 8009e92:	9b04      	ldr	r3, [sp, #16]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f040 8097 	bne.w	8009fc8 <_dtoa_r+0x8f0>
 8009e9a:	9b05      	ldr	r3, [sp, #20]
 8009e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f040 8093 	bne.w	8009fcc <_dtoa_r+0x8f4>
 8009ea6:	9b05      	ldr	r3, [sp, #20]
 8009ea8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009eac:	0d1b      	lsrs	r3, r3, #20
 8009eae:	051b      	lsls	r3, r3, #20
 8009eb0:	b133      	cbz	r3, 8009ec0 <_dtoa_r+0x7e8>
 8009eb2:	9b00      	ldr	r3, [sp, #0]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	9b06      	ldr	r3, [sp, #24]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	9306      	str	r3, [sp, #24]
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	9308      	str	r3, [sp, #32]
 8009ec2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f000 81b8 	beq.w	800a23a <_dtoa_r+0xb62>
 8009eca:	6923      	ldr	r3, [r4, #16]
 8009ecc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ed0:	6918      	ldr	r0, [r3, #16]
 8009ed2:	f000 fb79 	bl	800a5c8 <__hi0bits>
 8009ed6:	f1c0 0020 	rsb	r0, r0, #32
 8009eda:	9b06      	ldr	r3, [sp, #24]
 8009edc:	4418      	add	r0, r3
 8009ede:	f010 001f 	ands.w	r0, r0, #31
 8009ee2:	f000 8082 	beq.w	8009fea <_dtoa_r+0x912>
 8009ee6:	f1c0 0320 	rsb	r3, r0, #32
 8009eea:	2b04      	cmp	r3, #4
 8009eec:	dd73      	ble.n	8009fd6 <_dtoa_r+0x8fe>
 8009eee:	9b00      	ldr	r3, [sp, #0]
 8009ef0:	f1c0 001c 	rsb	r0, r0, #28
 8009ef4:	4403      	add	r3, r0
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	9b06      	ldr	r3, [sp, #24]
 8009efa:	4403      	add	r3, r0
 8009efc:	4406      	add	r6, r0
 8009efe:	9306      	str	r3, [sp, #24]
 8009f00:	9b00      	ldr	r3, [sp, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	dd05      	ble.n	8009f12 <_dtoa_r+0x83a>
 8009f06:	9902      	ldr	r1, [sp, #8]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	4648      	mov	r0, r9
 8009f0c:	f000 fcba 	bl	800a884 <__lshift>
 8009f10:	9002      	str	r0, [sp, #8]
 8009f12:	9b06      	ldr	r3, [sp, #24]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	dd05      	ble.n	8009f24 <_dtoa_r+0x84c>
 8009f18:	4621      	mov	r1, r4
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	4648      	mov	r0, r9
 8009f1e:	f000 fcb1 	bl	800a884 <__lshift>
 8009f22:	4604      	mov	r4, r0
 8009f24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d061      	beq.n	8009fee <_dtoa_r+0x916>
 8009f2a:	9802      	ldr	r0, [sp, #8]
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	f000 fd15 	bl	800a95c <__mcmp>
 8009f32:	2800      	cmp	r0, #0
 8009f34:	da5b      	bge.n	8009fee <_dtoa_r+0x916>
 8009f36:	2300      	movs	r3, #0
 8009f38:	9902      	ldr	r1, [sp, #8]
 8009f3a:	220a      	movs	r2, #10
 8009f3c:	4648      	mov	r0, r9
 8009f3e:	f000 fafd 	bl	800a53c <__multadd>
 8009f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f44:	9002      	str	r0, [sp, #8]
 8009f46:	f107 38ff 	add.w	r8, r7, #4294967295
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f000 8177 	beq.w	800a23e <_dtoa_r+0xb66>
 8009f50:	4629      	mov	r1, r5
 8009f52:	2300      	movs	r3, #0
 8009f54:	220a      	movs	r2, #10
 8009f56:	4648      	mov	r0, r9
 8009f58:	f000 faf0 	bl	800a53c <__multadd>
 8009f5c:	f1bb 0f00 	cmp.w	fp, #0
 8009f60:	4605      	mov	r5, r0
 8009f62:	dc6f      	bgt.n	800a044 <_dtoa_r+0x96c>
 8009f64:	9b07      	ldr	r3, [sp, #28]
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	dc49      	bgt.n	8009ffe <_dtoa_r+0x926>
 8009f6a:	e06b      	b.n	800a044 <_dtoa_r+0x96c>
 8009f6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009f6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009f72:	e73c      	b.n	8009dee <_dtoa_r+0x716>
 8009f74:	3fe00000 	.word	0x3fe00000
 8009f78:	40240000 	.word	0x40240000
 8009f7c:	9b03      	ldr	r3, [sp, #12]
 8009f7e:	1e5c      	subs	r4, r3, #1
 8009f80:	9b08      	ldr	r3, [sp, #32]
 8009f82:	42a3      	cmp	r3, r4
 8009f84:	db09      	blt.n	8009f9a <_dtoa_r+0x8c2>
 8009f86:	1b1c      	subs	r4, r3, r4
 8009f88:	9b03      	ldr	r3, [sp, #12]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f6bf af30 	bge.w	8009df0 <_dtoa_r+0x718>
 8009f90:	9b00      	ldr	r3, [sp, #0]
 8009f92:	9a03      	ldr	r2, [sp, #12]
 8009f94:	1a9e      	subs	r6, r3, r2
 8009f96:	2300      	movs	r3, #0
 8009f98:	e72b      	b.n	8009df2 <_dtoa_r+0x71a>
 8009f9a:	9b08      	ldr	r3, [sp, #32]
 8009f9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f9e:	9408      	str	r4, [sp, #32]
 8009fa0:	1ae3      	subs	r3, r4, r3
 8009fa2:	441a      	add	r2, r3
 8009fa4:	9e00      	ldr	r6, [sp, #0]
 8009fa6:	9b03      	ldr	r3, [sp, #12]
 8009fa8:	920d      	str	r2, [sp, #52]	@ 0x34
 8009faa:	2400      	movs	r4, #0
 8009fac:	e721      	b.n	8009df2 <_dtoa_r+0x71a>
 8009fae:	9c08      	ldr	r4, [sp, #32]
 8009fb0:	9e00      	ldr	r6, [sp, #0]
 8009fb2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009fb4:	e728      	b.n	8009e08 <_dtoa_r+0x730>
 8009fb6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009fba:	e751      	b.n	8009e60 <_dtoa_r+0x788>
 8009fbc:	9a08      	ldr	r2, [sp, #32]
 8009fbe:	9902      	ldr	r1, [sp, #8]
 8009fc0:	e750      	b.n	8009e64 <_dtoa_r+0x78c>
 8009fc2:	f8cd 8008 	str.w	r8, [sp, #8]
 8009fc6:	e751      	b.n	8009e6c <_dtoa_r+0x794>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	e779      	b.n	8009ec0 <_dtoa_r+0x7e8>
 8009fcc:	9b04      	ldr	r3, [sp, #16]
 8009fce:	e777      	b.n	8009ec0 <_dtoa_r+0x7e8>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	9308      	str	r3, [sp, #32]
 8009fd4:	e779      	b.n	8009eca <_dtoa_r+0x7f2>
 8009fd6:	d093      	beq.n	8009f00 <_dtoa_r+0x828>
 8009fd8:	9a00      	ldr	r2, [sp, #0]
 8009fda:	331c      	adds	r3, #28
 8009fdc:	441a      	add	r2, r3
 8009fde:	9200      	str	r2, [sp, #0]
 8009fe0:	9a06      	ldr	r2, [sp, #24]
 8009fe2:	441a      	add	r2, r3
 8009fe4:	441e      	add	r6, r3
 8009fe6:	9206      	str	r2, [sp, #24]
 8009fe8:	e78a      	b.n	8009f00 <_dtoa_r+0x828>
 8009fea:	4603      	mov	r3, r0
 8009fec:	e7f4      	b.n	8009fd8 <_dtoa_r+0x900>
 8009fee:	9b03      	ldr	r3, [sp, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	46b8      	mov	r8, r7
 8009ff4:	dc20      	bgt.n	800a038 <_dtoa_r+0x960>
 8009ff6:	469b      	mov	fp, r3
 8009ff8:	9b07      	ldr	r3, [sp, #28]
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	dd1e      	ble.n	800a03c <_dtoa_r+0x964>
 8009ffe:	f1bb 0f00 	cmp.w	fp, #0
 800a002:	f47f adb1 	bne.w	8009b68 <_dtoa_r+0x490>
 800a006:	4621      	mov	r1, r4
 800a008:	465b      	mov	r3, fp
 800a00a:	2205      	movs	r2, #5
 800a00c:	4648      	mov	r0, r9
 800a00e:	f000 fa95 	bl	800a53c <__multadd>
 800a012:	4601      	mov	r1, r0
 800a014:	4604      	mov	r4, r0
 800a016:	9802      	ldr	r0, [sp, #8]
 800a018:	f000 fca0 	bl	800a95c <__mcmp>
 800a01c:	2800      	cmp	r0, #0
 800a01e:	f77f ada3 	ble.w	8009b68 <_dtoa_r+0x490>
 800a022:	4656      	mov	r6, sl
 800a024:	2331      	movs	r3, #49	@ 0x31
 800a026:	f806 3b01 	strb.w	r3, [r6], #1
 800a02a:	f108 0801 	add.w	r8, r8, #1
 800a02e:	e59f      	b.n	8009b70 <_dtoa_r+0x498>
 800a030:	9c03      	ldr	r4, [sp, #12]
 800a032:	46b8      	mov	r8, r7
 800a034:	4625      	mov	r5, r4
 800a036:	e7f4      	b.n	800a022 <_dtoa_r+0x94a>
 800a038:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a03c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a03e:	2b00      	cmp	r3, #0
 800a040:	f000 8101 	beq.w	800a246 <_dtoa_r+0xb6e>
 800a044:	2e00      	cmp	r6, #0
 800a046:	dd05      	ble.n	800a054 <_dtoa_r+0x97c>
 800a048:	4629      	mov	r1, r5
 800a04a:	4632      	mov	r2, r6
 800a04c:	4648      	mov	r0, r9
 800a04e:	f000 fc19 	bl	800a884 <__lshift>
 800a052:	4605      	mov	r5, r0
 800a054:	9b08      	ldr	r3, [sp, #32]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d05c      	beq.n	800a114 <_dtoa_r+0xa3c>
 800a05a:	6869      	ldr	r1, [r5, #4]
 800a05c:	4648      	mov	r0, r9
 800a05e:	f000 fa0b 	bl	800a478 <_Balloc>
 800a062:	4606      	mov	r6, r0
 800a064:	b928      	cbnz	r0, 800a072 <_dtoa_r+0x99a>
 800a066:	4b82      	ldr	r3, [pc, #520]	@ (800a270 <_dtoa_r+0xb98>)
 800a068:	4602      	mov	r2, r0
 800a06a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a06e:	f7ff bb4a 	b.w	8009706 <_dtoa_r+0x2e>
 800a072:	692a      	ldr	r2, [r5, #16]
 800a074:	3202      	adds	r2, #2
 800a076:	0092      	lsls	r2, r2, #2
 800a078:	f105 010c 	add.w	r1, r5, #12
 800a07c:	300c      	adds	r0, #12
 800a07e:	f7ff fa74 	bl	800956a <memcpy>
 800a082:	2201      	movs	r2, #1
 800a084:	4631      	mov	r1, r6
 800a086:	4648      	mov	r0, r9
 800a088:	f000 fbfc 	bl	800a884 <__lshift>
 800a08c:	f10a 0301 	add.w	r3, sl, #1
 800a090:	9300      	str	r3, [sp, #0]
 800a092:	eb0a 030b 	add.w	r3, sl, fp
 800a096:	9308      	str	r3, [sp, #32]
 800a098:	9b04      	ldr	r3, [sp, #16]
 800a09a:	f003 0301 	and.w	r3, r3, #1
 800a09e:	462f      	mov	r7, r5
 800a0a0:	9306      	str	r3, [sp, #24]
 800a0a2:	4605      	mov	r5, r0
 800a0a4:	9b00      	ldr	r3, [sp, #0]
 800a0a6:	9802      	ldr	r0, [sp, #8]
 800a0a8:	4621      	mov	r1, r4
 800a0aa:	f103 3bff 	add.w	fp, r3, #4294967295
 800a0ae:	f7ff fa89 	bl	80095c4 <quorem>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	3330      	adds	r3, #48	@ 0x30
 800a0b6:	9003      	str	r0, [sp, #12]
 800a0b8:	4639      	mov	r1, r7
 800a0ba:	9802      	ldr	r0, [sp, #8]
 800a0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0be:	f000 fc4d 	bl	800a95c <__mcmp>
 800a0c2:	462a      	mov	r2, r5
 800a0c4:	9004      	str	r0, [sp, #16]
 800a0c6:	4621      	mov	r1, r4
 800a0c8:	4648      	mov	r0, r9
 800a0ca:	f000 fc63 	bl	800a994 <__mdiff>
 800a0ce:	68c2      	ldr	r2, [r0, #12]
 800a0d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0d2:	4606      	mov	r6, r0
 800a0d4:	bb02      	cbnz	r2, 800a118 <_dtoa_r+0xa40>
 800a0d6:	4601      	mov	r1, r0
 800a0d8:	9802      	ldr	r0, [sp, #8]
 800a0da:	f000 fc3f 	bl	800a95c <__mcmp>
 800a0de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	4631      	mov	r1, r6
 800a0e4:	4648      	mov	r0, r9
 800a0e6:	920c      	str	r2, [sp, #48]	@ 0x30
 800a0e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0ea:	f000 fa05 	bl	800a4f8 <_Bfree>
 800a0ee:	9b07      	ldr	r3, [sp, #28]
 800a0f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a0f2:	9e00      	ldr	r6, [sp, #0]
 800a0f4:	ea42 0103 	orr.w	r1, r2, r3
 800a0f8:	9b06      	ldr	r3, [sp, #24]
 800a0fa:	4319      	orrs	r1, r3
 800a0fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0fe:	d10d      	bne.n	800a11c <_dtoa_r+0xa44>
 800a100:	2b39      	cmp	r3, #57	@ 0x39
 800a102:	d027      	beq.n	800a154 <_dtoa_r+0xa7c>
 800a104:	9a04      	ldr	r2, [sp, #16]
 800a106:	2a00      	cmp	r2, #0
 800a108:	dd01      	ble.n	800a10e <_dtoa_r+0xa36>
 800a10a:	9b03      	ldr	r3, [sp, #12]
 800a10c:	3331      	adds	r3, #49	@ 0x31
 800a10e:	f88b 3000 	strb.w	r3, [fp]
 800a112:	e52e      	b.n	8009b72 <_dtoa_r+0x49a>
 800a114:	4628      	mov	r0, r5
 800a116:	e7b9      	b.n	800a08c <_dtoa_r+0x9b4>
 800a118:	2201      	movs	r2, #1
 800a11a:	e7e2      	b.n	800a0e2 <_dtoa_r+0xa0a>
 800a11c:	9904      	ldr	r1, [sp, #16]
 800a11e:	2900      	cmp	r1, #0
 800a120:	db04      	blt.n	800a12c <_dtoa_r+0xa54>
 800a122:	9807      	ldr	r0, [sp, #28]
 800a124:	4301      	orrs	r1, r0
 800a126:	9806      	ldr	r0, [sp, #24]
 800a128:	4301      	orrs	r1, r0
 800a12a:	d120      	bne.n	800a16e <_dtoa_r+0xa96>
 800a12c:	2a00      	cmp	r2, #0
 800a12e:	ddee      	ble.n	800a10e <_dtoa_r+0xa36>
 800a130:	9902      	ldr	r1, [sp, #8]
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	2201      	movs	r2, #1
 800a136:	4648      	mov	r0, r9
 800a138:	f000 fba4 	bl	800a884 <__lshift>
 800a13c:	4621      	mov	r1, r4
 800a13e:	9002      	str	r0, [sp, #8]
 800a140:	f000 fc0c 	bl	800a95c <__mcmp>
 800a144:	2800      	cmp	r0, #0
 800a146:	9b00      	ldr	r3, [sp, #0]
 800a148:	dc02      	bgt.n	800a150 <_dtoa_r+0xa78>
 800a14a:	d1e0      	bne.n	800a10e <_dtoa_r+0xa36>
 800a14c:	07da      	lsls	r2, r3, #31
 800a14e:	d5de      	bpl.n	800a10e <_dtoa_r+0xa36>
 800a150:	2b39      	cmp	r3, #57	@ 0x39
 800a152:	d1da      	bne.n	800a10a <_dtoa_r+0xa32>
 800a154:	2339      	movs	r3, #57	@ 0x39
 800a156:	f88b 3000 	strb.w	r3, [fp]
 800a15a:	4633      	mov	r3, r6
 800a15c:	461e      	mov	r6, r3
 800a15e:	3b01      	subs	r3, #1
 800a160:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a164:	2a39      	cmp	r2, #57	@ 0x39
 800a166:	d04e      	beq.n	800a206 <_dtoa_r+0xb2e>
 800a168:	3201      	adds	r2, #1
 800a16a:	701a      	strb	r2, [r3, #0]
 800a16c:	e501      	b.n	8009b72 <_dtoa_r+0x49a>
 800a16e:	2a00      	cmp	r2, #0
 800a170:	dd03      	ble.n	800a17a <_dtoa_r+0xaa2>
 800a172:	2b39      	cmp	r3, #57	@ 0x39
 800a174:	d0ee      	beq.n	800a154 <_dtoa_r+0xa7c>
 800a176:	3301      	adds	r3, #1
 800a178:	e7c9      	b.n	800a10e <_dtoa_r+0xa36>
 800a17a:	9a00      	ldr	r2, [sp, #0]
 800a17c:	9908      	ldr	r1, [sp, #32]
 800a17e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a182:	428a      	cmp	r2, r1
 800a184:	d028      	beq.n	800a1d8 <_dtoa_r+0xb00>
 800a186:	9902      	ldr	r1, [sp, #8]
 800a188:	2300      	movs	r3, #0
 800a18a:	220a      	movs	r2, #10
 800a18c:	4648      	mov	r0, r9
 800a18e:	f000 f9d5 	bl	800a53c <__multadd>
 800a192:	42af      	cmp	r7, r5
 800a194:	9002      	str	r0, [sp, #8]
 800a196:	f04f 0300 	mov.w	r3, #0
 800a19a:	f04f 020a 	mov.w	r2, #10
 800a19e:	4639      	mov	r1, r7
 800a1a0:	4648      	mov	r0, r9
 800a1a2:	d107      	bne.n	800a1b4 <_dtoa_r+0xadc>
 800a1a4:	f000 f9ca 	bl	800a53c <__multadd>
 800a1a8:	4607      	mov	r7, r0
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	9b00      	ldr	r3, [sp, #0]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	e777      	b.n	800a0a4 <_dtoa_r+0x9cc>
 800a1b4:	f000 f9c2 	bl	800a53c <__multadd>
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	4607      	mov	r7, r0
 800a1bc:	2300      	movs	r3, #0
 800a1be:	220a      	movs	r2, #10
 800a1c0:	4648      	mov	r0, r9
 800a1c2:	f000 f9bb 	bl	800a53c <__multadd>
 800a1c6:	4605      	mov	r5, r0
 800a1c8:	e7f0      	b.n	800a1ac <_dtoa_r+0xad4>
 800a1ca:	f1bb 0f00 	cmp.w	fp, #0
 800a1ce:	bfcc      	ite	gt
 800a1d0:	465e      	movgt	r6, fp
 800a1d2:	2601      	movle	r6, #1
 800a1d4:	4456      	add	r6, sl
 800a1d6:	2700      	movs	r7, #0
 800a1d8:	9902      	ldr	r1, [sp, #8]
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	4648      	mov	r0, r9
 800a1e0:	f000 fb50 	bl	800a884 <__lshift>
 800a1e4:	4621      	mov	r1, r4
 800a1e6:	9002      	str	r0, [sp, #8]
 800a1e8:	f000 fbb8 	bl	800a95c <__mcmp>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	dcb4      	bgt.n	800a15a <_dtoa_r+0xa82>
 800a1f0:	d102      	bne.n	800a1f8 <_dtoa_r+0xb20>
 800a1f2:	9b00      	ldr	r3, [sp, #0]
 800a1f4:	07db      	lsls	r3, r3, #31
 800a1f6:	d4b0      	bmi.n	800a15a <_dtoa_r+0xa82>
 800a1f8:	4633      	mov	r3, r6
 800a1fa:	461e      	mov	r6, r3
 800a1fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a200:	2a30      	cmp	r2, #48	@ 0x30
 800a202:	d0fa      	beq.n	800a1fa <_dtoa_r+0xb22>
 800a204:	e4b5      	b.n	8009b72 <_dtoa_r+0x49a>
 800a206:	459a      	cmp	sl, r3
 800a208:	d1a8      	bne.n	800a15c <_dtoa_r+0xa84>
 800a20a:	2331      	movs	r3, #49	@ 0x31
 800a20c:	f108 0801 	add.w	r8, r8, #1
 800a210:	f88a 3000 	strb.w	r3, [sl]
 800a214:	e4ad      	b.n	8009b72 <_dtoa_r+0x49a>
 800a216:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a218:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a274 <_dtoa_r+0xb9c>
 800a21c:	b11b      	cbz	r3, 800a226 <_dtoa_r+0xb4e>
 800a21e:	f10a 0308 	add.w	r3, sl, #8
 800a222:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a224:	6013      	str	r3, [r2, #0]
 800a226:	4650      	mov	r0, sl
 800a228:	b017      	add	sp, #92	@ 0x5c
 800a22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a22e:	9b07      	ldr	r3, [sp, #28]
 800a230:	2b01      	cmp	r3, #1
 800a232:	f77f ae2e 	ble.w	8009e92 <_dtoa_r+0x7ba>
 800a236:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a238:	9308      	str	r3, [sp, #32]
 800a23a:	2001      	movs	r0, #1
 800a23c:	e64d      	b.n	8009eda <_dtoa_r+0x802>
 800a23e:	f1bb 0f00 	cmp.w	fp, #0
 800a242:	f77f aed9 	ble.w	8009ff8 <_dtoa_r+0x920>
 800a246:	4656      	mov	r6, sl
 800a248:	9802      	ldr	r0, [sp, #8]
 800a24a:	4621      	mov	r1, r4
 800a24c:	f7ff f9ba 	bl	80095c4 <quorem>
 800a250:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a254:	f806 3b01 	strb.w	r3, [r6], #1
 800a258:	eba6 020a 	sub.w	r2, r6, sl
 800a25c:	4593      	cmp	fp, r2
 800a25e:	ddb4      	ble.n	800a1ca <_dtoa_r+0xaf2>
 800a260:	9902      	ldr	r1, [sp, #8]
 800a262:	2300      	movs	r3, #0
 800a264:	220a      	movs	r2, #10
 800a266:	4648      	mov	r0, r9
 800a268:	f000 f968 	bl	800a53c <__multadd>
 800a26c:	9002      	str	r0, [sp, #8]
 800a26e:	e7eb      	b.n	800a248 <_dtoa_r+0xb70>
 800a270:	0800bd28 	.word	0x0800bd28
 800a274:	0800bcc3 	.word	0x0800bcc3

0800a278 <_free_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	4605      	mov	r5, r0
 800a27c:	2900      	cmp	r1, #0
 800a27e:	d041      	beq.n	800a304 <_free_r+0x8c>
 800a280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a284:	1f0c      	subs	r4, r1, #4
 800a286:	2b00      	cmp	r3, #0
 800a288:	bfb8      	it	lt
 800a28a:	18e4      	addlt	r4, r4, r3
 800a28c:	f000 f8e8 	bl	800a460 <__malloc_lock>
 800a290:	4a1d      	ldr	r2, [pc, #116]	@ (800a308 <_free_r+0x90>)
 800a292:	6813      	ldr	r3, [r2, #0]
 800a294:	b933      	cbnz	r3, 800a2a4 <_free_r+0x2c>
 800a296:	6063      	str	r3, [r4, #4]
 800a298:	6014      	str	r4, [r2, #0]
 800a29a:	4628      	mov	r0, r5
 800a29c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2a0:	f000 b8e4 	b.w	800a46c <__malloc_unlock>
 800a2a4:	42a3      	cmp	r3, r4
 800a2a6:	d908      	bls.n	800a2ba <_free_r+0x42>
 800a2a8:	6820      	ldr	r0, [r4, #0]
 800a2aa:	1821      	adds	r1, r4, r0
 800a2ac:	428b      	cmp	r3, r1
 800a2ae:	bf01      	itttt	eq
 800a2b0:	6819      	ldreq	r1, [r3, #0]
 800a2b2:	685b      	ldreq	r3, [r3, #4]
 800a2b4:	1809      	addeq	r1, r1, r0
 800a2b6:	6021      	streq	r1, [r4, #0]
 800a2b8:	e7ed      	b.n	800a296 <_free_r+0x1e>
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	b10b      	cbz	r3, 800a2c4 <_free_r+0x4c>
 800a2c0:	42a3      	cmp	r3, r4
 800a2c2:	d9fa      	bls.n	800a2ba <_free_r+0x42>
 800a2c4:	6811      	ldr	r1, [r2, #0]
 800a2c6:	1850      	adds	r0, r2, r1
 800a2c8:	42a0      	cmp	r0, r4
 800a2ca:	d10b      	bne.n	800a2e4 <_free_r+0x6c>
 800a2cc:	6820      	ldr	r0, [r4, #0]
 800a2ce:	4401      	add	r1, r0
 800a2d0:	1850      	adds	r0, r2, r1
 800a2d2:	4283      	cmp	r3, r0
 800a2d4:	6011      	str	r1, [r2, #0]
 800a2d6:	d1e0      	bne.n	800a29a <_free_r+0x22>
 800a2d8:	6818      	ldr	r0, [r3, #0]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	6053      	str	r3, [r2, #4]
 800a2de:	4408      	add	r0, r1
 800a2e0:	6010      	str	r0, [r2, #0]
 800a2e2:	e7da      	b.n	800a29a <_free_r+0x22>
 800a2e4:	d902      	bls.n	800a2ec <_free_r+0x74>
 800a2e6:	230c      	movs	r3, #12
 800a2e8:	602b      	str	r3, [r5, #0]
 800a2ea:	e7d6      	b.n	800a29a <_free_r+0x22>
 800a2ec:	6820      	ldr	r0, [r4, #0]
 800a2ee:	1821      	adds	r1, r4, r0
 800a2f0:	428b      	cmp	r3, r1
 800a2f2:	bf04      	itt	eq
 800a2f4:	6819      	ldreq	r1, [r3, #0]
 800a2f6:	685b      	ldreq	r3, [r3, #4]
 800a2f8:	6063      	str	r3, [r4, #4]
 800a2fa:	bf04      	itt	eq
 800a2fc:	1809      	addeq	r1, r1, r0
 800a2fe:	6021      	streq	r1, [r4, #0]
 800a300:	6054      	str	r4, [r2, #4]
 800a302:	e7ca      	b.n	800a29a <_free_r+0x22>
 800a304:	bd38      	pop	{r3, r4, r5, pc}
 800a306:	bf00      	nop
 800a308:	2000222c 	.word	0x2000222c

0800a30c <malloc>:
 800a30c:	4b02      	ldr	r3, [pc, #8]	@ (800a318 <malloc+0xc>)
 800a30e:	4601      	mov	r1, r0
 800a310:	6818      	ldr	r0, [r3, #0]
 800a312:	f000 b825 	b.w	800a360 <_malloc_r>
 800a316:	bf00      	nop
 800a318:	20000064 	.word	0x20000064

0800a31c <sbrk_aligned>:
 800a31c:	b570      	push	{r4, r5, r6, lr}
 800a31e:	4e0f      	ldr	r6, [pc, #60]	@ (800a35c <sbrk_aligned+0x40>)
 800a320:	460c      	mov	r4, r1
 800a322:	6831      	ldr	r1, [r6, #0]
 800a324:	4605      	mov	r5, r0
 800a326:	b911      	cbnz	r1, 800a32e <sbrk_aligned+0x12>
 800a328:	f000 feb4 	bl	800b094 <_sbrk_r>
 800a32c:	6030      	str	r0, [r6, #0]
 800a32e:	4621      	mov	r1, r4
 800a330:	4628      	mov	r0, r5
 800a332:	f000 feaf 	bl	800b094 <_sbrk_r>
 800a336:	1c43      	adds	r3, r0, #1
 800a338:	d103      	bne.n	800a342 <sbrk_aligned+0x26>
 800a33a:	f04f 34ff 	mov.w	r4, #4294967295
 800a33e:	4620      	mov	r0, r4
 800a340:	bd70      	pop	{r4, r5, r6, pc}
 800a342:	1cc4      	adds	r4, r0, #3
 800a344:	f024 0403 	bic.w	r4, r4, #3
 800a348:	42a0      	cmp	r0, r4
 800a34a:	d0f8      	beq.n	800a33e <sbrk_aligned+0x22>
 800a34c:	1a21      	subs	r1, r4, r0
 800a34e:	4628      	mov	r0, r5
 800a350:	f000 fea0 	bl	800b094 <_sbrk_r>
 800a354:	3001      	adds	r0, #1
 800a356:	d1f2      	bne.n	800a33e <sbrk_aligned+0x22>
 800a358:	e7ef      	b.n	800a33a <sbrk_aligned+0x1e>
 800a35a:	bf00      	nop
 800a35c:	20002228 	.word	0x20002228

0800a360 <_malloc_r>:
 800a360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a364:	1ccd      	adds	r5, r1, #3
 800a366:	f025 0503 	bic.w	r5, r5, #3
 800a36a:	3508      	adds	r5, #8
 800a36c:	2d0c      	cmp	r5, #12
 800a36e:	bf38      	it	cc
 800a370:	250c      	movcc	r5, #12
 800a372:	2d00      	cmp	r5, #0
 800a374:	4606      	mov	r6, r0
 800a376:	db01      	blt.n	800a37c <_malloc_r+0x1c>
 800a378:	42a9      	cmp	r1, r5
 800a37a:	d904      	bls.n	800a386 <_malloc_r+0x26>
 800a37c:	230c      	movs	r3, #12
 800a37e:	6033      	str	r3, [r6, #0]
 800a380:	2000      	movs	r0, #0
 800a382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a386:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a45c <_malloc_r+0xfc>
 800a38a:	f000 f869 	bl	800a460 <__malloc_lock>
 800a38e:	f8d8 3000 	ldr.w	r3, [r8]
 800a392:	461c      	mov	r4, r3
 800a394:	bb44      	cbnz	r4, 800a3e8 <_malloc_r+0x88>
 800a396:	4629      	mov	r1, r5
 800a398:	4630      	mov	r0, r6
 800a39a:	f7ff ffbf 	bl	800a31c <sbrk_aligned>
 800a39e:	1c43      	adds	r3, r0, #1
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	d158      	bne.n	800a456 <_malloc_r+0xf6>
 800a3a4:	f8d8 4000 	ldr.w	r4, [r8]
 800a3a8:	4627      	mov	r7, r4
 800a3aa:	2f00      	cmp	r7, #0
 800a3ac:	d143      	bne.n	800a436 <_malloc_r+0xd6>
 800a3ae:	2c00      	cmp	r4, #0
 800a3b0:	d04b      	beq.n	800a44a <_malloc_r+0xea>
 800a3b2:	6823      	ldr	r3, [r4, #0]
 800a3b4:	4639      	mov	r1, r7
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	eb04 0903 	add.w	r9, r4, r3
 800a3bc:	f000 fe6a 	bl	800b094 <_sbrk_r>
 800a3c0:	4581      	cmp	r9, r0
 800a3c2:	d142      	bne.n	800a44a <_malloc_r+0xea>
 800a3c4:	6821      	ldr	r1, [r4, #0]
 800a3c6:	1a6d      	subs	r5, r5, r1
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	f7ff ffa6 	bl	800a31c <sbrk_aligned>
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	d03a      	beq.n	800a44a <_malloc_r+0xea>
 800a3d4:	6823      	ldr	r3, [r4, #0]
 800a3d6:	442b      	add	r3, r5
 800a3d8:	6023      	str	r3, [r4, #0]
 800a3da:	f8d8 3000 	ldr.w	r3, [r8]
 800a3de:	685a      	ldr	r2, [r3, #4]
 800a3e0:	bb62      	cbnz	r2, 800a43c <_malloc_r+0xdc>
 800a3e2:	f8c8 7000 	str.w	r7, [r8]
 800a3e6:	e00f      	b.n	800a408 <_malloc_r+0xa8>
 800a3e8:	6822      	ldr	r2, [r4, #0]
 800a3ea:	1b52      	subs	r2, r2, r5
 800a3ec:	d420      	bmi.n	800a430 <_malloc_r+0xd0>
 800a3ee:	2a0b      	cmp	r2, #11
 800a3f0:	d917      	bls.n	800a422 <_malloc_r+0xc2>
 800a3f2:	1961      	adds	r1, r4, r5
 800a3f4:	42a3      	cmp	r3, r4
 800a3f6:	6025      	str	r5, [r4, #0]
 800a3f8:	bf18      	it	ne
 800a3fa:	6059      	strne	r1, [r3, #4]
 800a3fc:	6863      	ldr	r3, [r4, #4]
 800a3fe:	bf08      	it	eq
 800a400:	f8c8 1000 	streq.w	r1, [r8]
 800a404:	5162      	str	r2, [r4, r5]
 800a406:	604b      	str	r3, [r1, #4]
 800a408:	4630      	mov	r0, r6
 800a40a:	f000 f82f 	bl	800a46c <__malloc_unlock>
 800a40e:	f104 000b 	add.w	r0, r4, #11
 800a412:	1d23      	adds	r3, r4, #4
 800a414:	f020 0007 	bic.w	r0, r0, #7
 800a418:	1ac2      	subs	r2, r0, r3
 800a41a:	bf1c      	itt	ne
 800a41c:	1a1b      	subne	r3, r3, r0
 800a41e:	50a3      	strne	r3, [r4, r2]
 800a420:	e7af      	b.n	800a382 <_malloc_r+0x22>
 800a422:	6862      	ldr	r2, [r4, #4]
 800a424:	42a3      	cmp	r3, r4
 800a426:	bf0c      	ite	eq
 800a428:	f8c8 2000 	streq.w	r2, [r8]
 800a42c:	605a      	strne	r2, [r3, #4]
 800a42e:	e7eb      	b.n	800a408 <_malloc_r+0xa8>
 800a430:	4623      	mov	r3, r4
 800a432:	6864      	ldr	r4, [r4, #4]
 800a434:	e7ae      	b.n	800a394 <_malloc_r+0x34>
 800a436:	463c      	mov	r4, r7
 800a438:	687f      	ldr	r7, [r7, #4]
 800a43a:	e7b6      	b.n	800a3aa <_malloc_r+0x4a>
 800a43c:	461a      	mov	r2, r3
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	42a3      	cmp	r3, r4
 800a442:	d1fb      	bne.n	800a43c <_malloc_r+0xdc>
 800a444:	2300      	movs	r3, #0
 800a446:	6053      	str	r3, [r2, #4]
 800a448:	e7de      	b.n	800a408 <_malloc_r+0xa8>
 800a44a:	230c      	movs	r3, #12
 800a44c:	6033      	str	r3, [r6, #0]
 800a44e:	4630      	mov	r0, r6
 800a450:	f000 f80c 	bl	800a46c <__malloc_unlock>
 800a454:	e794      	b.n	800a380 <_malloc_r+0x20>
 800a456:	6005      	str	r5, [r0, #0]
 800a458:	e7d6      	b.n	800a408 <_malloc_r+0xa8>
 800a45a:	bf00      	nop
 800a45c:	2000222c 	.word	0x2000222c

0800a460 <__malloc_lock>:
 800a460:	4801      	ldr	r0, [pc, #4]	@ (800a468 <__malloc_lock+0x8>)
 800a462:	f7ff b880 	b.w	8009566 <__retarget_lock_acquire_recursive>
 800a466:	bf00      	nop
 800a468:	20002224 	.word	0x20002224

0800a46c <__malloc_unlock>:
 800a46c:	4801      	ldr	r0, [pc, #4]	@ (800a474 <__malloc_unlock+0x8>)
 800a46e:	f7ff b87b 	b.w	8009568 <__retarget_lock_release_recursive>
 800a472:	bf00      	nop
 800a474:	20002224 	.word	0x20002224

0800a478 <_Balloc>:
 800a478:	b570      	push	{r4, r5, r6, lr}
 800a47a:	69c6      	ldr	r6, [r0, #28]
 800a47c:	4604      	mov	r4, r0
 800a47e:	460d      	mov	r5, r1
 800a480:	b976      	cbnz	r6, 800a4a0 <_Balloc+0x28>
 800a482:	2010      	movs	r0, #16
 800a484:	f7ff ff42 	bl	800a30c <malloc>
 800a488:	4602      	mov	r2, r0
 800a48a:	61e0      	str	r0, [r4, #28]
 800a48c:	b920      	cbnz	r0, 800a498 <_Balloc+0x20>
 800a48e:	4b18      	ldr	r3, [pc, #96]	@ (800a4f0 <_Balloc+0x78>)
 800a490:	4818      	ldr	r0, [pc, #96]	@ (800a4f4 <_Balloc+0x7c>)
 800a492:	216b      	movs	r1, #107	@ 0x6b
 800a494:	f7ff f878 	bl	8009588 <__assert_func>
 800a498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a49c:	6006      	str	r6, [r0, #0]
 800a49e:	60c6      	str	r6, [r0, #12]
 800a4a0:	69e6      	ldr	r6, [r4, #28]
 800a4a2:	68f3      	ldr	r3, [r6, #12]
 800a4a4:	b183      	cbz	r3, 800a4c8 <_Balloc+0x50>
 800a4a6:	69e3      	ldr	r3, [r4, #28]
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4ae:	b9b8      	cbnz	r0, 800a4e0 <_Balloc+0x68>
 800a4b0:	2101      	movs	r1, #1
 800a4b2:	fa01 f605 	lsl.w	r6, r1, r5
 800a4b6:	1d72      	adds	r2, r6, #5
 800a4b8:	0092      	lsls	r2, r2, #2
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f000 fe01 	bl	800b0c2 <_calloc_r>
 800a4c0:	b160      	cbz	r0, 800a4dc <_Balloc+0x64>
 800a4c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4c6:	e00e      	b.n	800a4e6 <_Balloc+0x6e>
 800a4c8:	2221      	movs	r2, #33	@ 0x21
 800a4ca:	2104      	movs	r1, #4
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f000 fdf8 	bl	800b0c2 <_calloc_r>
 800a4d2:	69e3      	ldr	r3, [r4, #28]
 800a4d4:	60f0      	str	r0, [r6, #12]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d1e4      	bne.n	800a4a6 <_Balloc+0x2e>
 800a4dc:	2000      	movs	r0, #0
 800a4de:	bd70      	pop	{r4, r5, r6, pc}
 800a4e0:	6802      	ldr	r2, [r0, #0]
 800a4e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4ec:	e7f7      	b.n	800a4de <_Balloc+0x66>
 800a4ee:	bf00      	nop
 800a4f0:	0800bbe4 	.word	0x0800bbe4
 800a4f4:	0800bd39 	.word	0x0800bd39

0800a4f8 <_Bfree>:
 800a4f8:	b570      	push	{r4, r5, r6, lr}
 800a4fa:	69c6      	ldr	r6, [r0, #28]
 800a4fc:	4605      	mov	r5, r0
 800a4fe:	460c      	mov	r4, r1
 800a500:	b976      	cbnz	r6, 800a520 <_Bfree+0x28>
 800a502:	2010      	movs	r0, #16
 800a504:	f7ff ff02 	bl	800a30c <malloc>
 800a508:	4602      	mov	r2, r0
 800a50a:	61e8      	str	r0, [r5, #28]
 800a50c:	b920      	cbnz	r0, 800a518 <_Bfree+0x20>
 800a50e:	4b09      	ldr	r3, [pc, #36]	@ (800a534 <_Bfree+0x3c>)
 800a510:	4809      	ldr	r0, [pc, #36]	@ (800a538 <_Bfree+0x40>)
 800a512:	218f      	movs	r1, #143	@ 0x8f
 800a514:	f7ff f838 	bl	8009588 <__assert_func>
 800a518:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a51c:	6006      	str	r6, [r0, #0]
 800a51e:	60c6      	str	r6, [r0, #12]
 800a520:	b13c      	cbz	r4, 800a532 <_Bfree+0x3a>
 800a522:	69eb      	ldr	r3, [r5, #28]
 800a524:	6862      	ldr	r2, [r4, #4]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a52c:	6021      	str	r1, [r4, #0]
 800a52e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a532:	bd70      	pop	{r4, r5, r6, pc}
 800a534:	0800bbe4 	.word	0x0800bbe4
 800a538:	0800bd39 	.word	0x0800bd39

0800a53c <__multadd>:
 800a53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a540:	690d      	ldr	r5, [r1, #16]
 800a542:	4607      	mov	r7, r0
 800a544:	460c      	mov	r4, r1
 800a546:	461e      	mov	r6, r3
 800a548:	f101 0c14 	add.w	ip, r1, #20
 800a54c:	2000      	movs	r0, #0
 800a54e:	f8dc 3000 	ldr.w	r3, [ip]
 800a552:	b299      	uxth	r1, r3
 800a554:	fb02 6101 	mla	r1, r2, r1, r6
 800a558:	0c1e      	lsrs	r6, r3, #16
 800a55a:	0c0b      	lsrs	r3, r1, #16
 800a55c:	fb02 3306 	mla	r3, r2, r6, r3
 800a560:	b289      	uxth	r1, r1
 800a562:	3001      	adds	r0, #1
 800a564:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a568:	4285      	cmp	r5, r0
 800a56a:	f84c 1b04 	str.w	r1, [ip], #4
 800a56e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a572:	dcec      	bgt.n	800a54e <__multadd+0x12>
 800a574:	b30e      	cbz	r6, 800a5ba <__multadd+0x7e>
 800a576:	68a3      	ldr	r3, [r4, #8]
 800a578:	42ab      	cmp	r3, r5
 800a57a:	dc19      	bgt.n	800a5b0 <__multadd+0x74>
 800a57c:	6861      	ldr	r1, [r4, #4]
 800a57e:	4638      	mov	r0, r7
 800a580:	3101      	adds	r1, #1
 800a582:	f7ff ff79 	bl	800a478 <_Balloc>
 800a586:	4680      	mov	r8, r0
 800a588:	b928      	cbnz	r0, 800a596 <__multadd+0x5a>
 800a58a:	4602      	mov	r2, r0
 800a58c:	4b0c      	ldr	r3, [pc, #48]	@ (800a5c0 <__multadd+0x84>)
 800a58e:	480d      	ldr	r0, [pc, #52]	@ (800a5c4 <__multadd+0x88>)
 800a590:	21ba      	movs	r1, #186	@ 0xba
 800a592:	f7fe fff9 	bl	8009588 <__assert_func>
 800a596:	6922      	ldr	r2, [r4, #16]
 800a598:	3202      	adds	r2, #2
 800a59a:	f104 010c 	add.w	r1, r4, #12
 800a59e:	0092      	lsls	r2, r2, #2
 800a5a0:	300c      	adds	r0, #12
 800a5a2:	f7fe ffe2 	bl	800956a <memcpy>
 800a5a6:	4621      	mov	r1, r4
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	f7ff ffa5 	bl	800a4f8 <_Bfree>
 800a5ae:	4644      	mov	r4, r8
 800a5b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5b4:	3501      	adds	r5, #1
 800a5b6:	615e      	str	r6, [r3, #20]
 800a5b8:	6125      	str	r5, [r4, #16]
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5c0:	0800bd28 	.word	0x0800bd28
 800a5c4:	0800bd39 	.word	0x0800bd39

0800a5c8 <__hi0bits>:
 800a5c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	bf36      	itet	cc
 800a5d0:	0403      	lslcc	r3, r0, #16
 800a5d2:	2000      	movcs	r0, #0
 800a5d4:	2010      	movcc	r0, #16
 800a5d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a5da:	bf3c      	itt	cc
 800a5dc:	021b      	lslcc	r3, r3, #8
 800a5de:	3008      	addcc	r0, #8
 800a5e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5e4:	bf3c      	itt	cc
 800a5e6:	011b      	lslcc	r3, r3, #4
 800a5e8:	3004      	addcc	r0, #4
 800a5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5ee:	bf3c      	itt	cc
 800a5f0:	009b      	lslcc	r3, r3, #2
 800a5f2:	3002      	addcc	r0, #2
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	db05      	blt.n	800a604 <__hi0bits+0x3c>
 800a5f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a5fc:	f100 0001 	add.w	r0, r0, #1
 800a600:	bf08      	it	eq
 800a602:	2020      	moveq	r0, #32
 800a604:	4770      	bx	lr

0800a606 <__lo0bits>:
 800a606:	6803      	ldr	r3, [r0, #0]
 800a608:	4602      	mov	r2, r0
 800a60a:	f013 0007 	ands.w	r0, r3, #7
 800a60e:	d00b      	beq.n	800a628 <__lo0bits+0x22>
 800a610:	07d9      	lsls	r1, r3, #31
 800a612:	d421      	bmi.n	800a658 <__lo0bits+0x52>
 800a614:	0798      	lsls	r0, r3, #30
 800a616:	bf49      	itett	mi
 800a618:	085b      	lsrmi	r3, r3, #1
 800a61a:	089b      	lsrpl	r3, r3, #2
 800a61c:	2001      	movmi	r0, #1
 800a61e:	6013      	strmi	r3, [r2, #0]
 800a620:	bf5c      	itt	pl
 800a622:	6013      	strpl	r3, [r2, #0]
 800a624:	2002      	movpl	r0, #2
 800a626:	4770      	bx	lr
 800a628:	b299      	uxth	r1, r3
 800a62a:	b909      	cbnz	r1, 800a630 <__lo0bits+0x2a>
 800a62c:	0c1b      	lsrs	r3, r3, #16
 800a62e:	2010      	movs	r0, #16
 800a630:	b2d9      	uxtb	r1, r3
 800a632:	b909      	cbnz	r1, 800a638 <__lo0bits+0x32>
 800a634:	3008      	adds	r0, #8
 800a636:	0a1b      	lsrs	r3, r3, #8
 800a638:	0719      	lsls	r1, r3, #28
 800a63a:	bf04      	itt	eq
 800a63c:	091b      	lsreq	r3, r3, #4
 800a63e:	3004      	addeq	r0, #4
 800a640:	0799      	lsls	r1, r3, #30
 800a642:	bf04      	itt	eq
 800a644:	089b      	lsreq	r3, r3, #2
 800a646:	3002      	addeq	r0, #2
 800a648:	07d9      	lsls	r1, r3, #31
 800a64a:	d403      	bmi.n	800a654 <__lo0bits+0x4e>
 800a64c:	085b      	lsrs	r3, r3, #1
 800a64e:	f100 0001 	add.w	r0, r0, #1
 800a652:	d003      	beq.n	800a65c <__lo0bits+0x56>
 800a654:	6013      	str	r3, [r2, #0]
 800a656:	4770      	bx	lr
 800a658:	2000      	movs	r0, #0
 800a65a:	4770      	bx	lr
 800a65c:	2020      	movs	r0, #32
 800a65e:	4770      	bx	lr

0800a660 <__i2b>:
 800a660:	b510      	push	{r4, lr}
 800a662:	460c      	mov	r4, r1
 800a664:	2101      	movs	r1, #1
 800a666:	f7ff ff07 	bl	800a478 <_Balloc>
 800a66a:	4602      	mov	r2, r0
 800a66c:	b928      	cbnz	r0, 800a67a <__i2b+0x1a>
 800a66e:	4b05      	ldr	r3, [pc, #20]	@ (800a684 <__i2b+0x24>)
 800a670:	4805      	ldr	r0, [pc, #20]	@ (800a688 <__i2b+0x28>)
 800a672:	f240 1145 	movw	r1, #325	@ 0x145
 800a676:	f7fe ff87 	bl	8009588 <__assert_func>
 800a67a:	2301      	movs	r3, #1
 800a67c:	6144      	str	r4, [r0, #20]
 800a67e:	6103      	str	r3, [r0, #16]
 800a680:	bd10      	pop	{r4, pc}
 800a682:	bf00      	nop
 800a684:	0800bd28 	.word	0x0800bd28
 800a688:	0800bd39 	.word	0x0800bd39

0800a68c <__multiply>:
 800a68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a690:	4617      	mov	r7, r2
 800a692:	690a      	ldr	r2, [r1, #16]
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	429a      	cmp	r2, r3
 800a698:	bfa8      	it	ge
 800a69a:	463b      	movge	r3, r7
 800a69c:	4689      	mov	r9, r1
 800a69e:	bfa4      	itt	ge
 800a6a0:	460f      	movge	r7, r1
 800a6a2:	4699      	movge	r9, r3
 800a6a4:	693d      	ldr	r5, [r7, #16]
 800a6a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	6879      	ldr	r1, [r7, #4]
 800a6ae:	eb05 060a 	add.w	r6, r5, sl
 800a6b2:	42b3      	cmp	r3, r6
 800a6b4:	b085      	sub	sp, #20
 800a6b6:	bfb8      	it	lt
 800a6b8:	3101      	addlt	r1, #1
 800a6ba:	f7ff fedd 	bl	800a478 <_Balloc>
 800a6be:	b930      	cbnz	r0, 800a6ce <__multiply+0x42>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	4b41      	ldr	r3, [pc, #260]	@ (800a7c8 <__multiply+0x13c>)
 800a6c4:	4841      	ldr	r0, [pc, #260]	@ (800a7cc <__multiply+0x140>)
 800a6c6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a6ca:	f7fe ff5d 	bl	8009588 <__assert_func>
 800a6ce:	f100 0414 	add.w	r4, r0, #20
 800a6d2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a6d6:	4623      	mov	r3, r4
 800a6d8:	2200      	movs	r2, #0
 800a6da:	4573      	cmp	r3, lr
 800a6dc:	d320      	bcc.n	800a720 <__multiply+0x94>
 800a6de:	f107 0814 	add.w	r8, r7, #20
 800a6e2:	f109 0114 	add.w	r1, r9, #20
 800a6e6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a6ea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a6ee:	9302      	str	r3, [sp, #8]
 800a6f0:	1beb      	subs	r3, r5, r7
 800a6f2:	3b15      	subs	r3, #21
 800a6f4:	f023 0303 	bic.w	r3, r3, #3
 800a6f8:	3304      	adds	r3, #4
 800a6fa:	3715      	adds	r7, #21
 800a6fc:	42bd      	cmp	r5, r7
 800a6fe:	bf38      	it	cc
 800a700:	2304      	movcc	r3, #4
 800a702:	9301      	str	r3, [sp, #4]
 800a704:	9b02      	ldr	r3, [sp, #8]
 800a706:	9103      	str	r1, [sp, #12]
 800a708:	428b      	cmp	r3, r1
 800a70a:	d80c      	bhi.n	800a726 <__multiply+0x9a>
 800a70c:	2e00      	cmp	r6, #0
 800a70e:	dd03      	ble.n	800a718 <__multiply+0x8c>
 800a710:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a714:	2b00      	cmp	r3, #0
 800a716:	d055      	beq.n	800a7c4 <__multiply+0x138>
 800a718:	6106      	str	r6, [r0, #16]
 800a71a:	b005      	add	sp, #20
 800a71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a720:	f843 2b04 	str.w	r2, [r3], #4
 800a724:	e7d9      	b.n	800a6da <__multiply+0x4e>
 800a726:	f8b1 a000 	ldrh.w	sl, [r1]
 800a72a:	f1ba 0f00 	cmp.w	sl, #0
 800a72e:	d01f      	beq.n	800a770 <__multiply+0xe4>
 800a730:	46c4      	mov	ip, r8
 800a732:	46a1      	mov	r9, r4
 800a734:	2700      	movs	r7, #0
 800a736:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a73a:	f8d9 3000 	ldr.w	r3, [r9]
 800a73e:	fa1f fb82 	uxth.w	fp, r2
 800a742:	b29b      	uxth	r3, r3
 800a744:	fb0a 330b 	mla	r3, sl, fp, r3
 800a748:	443b      	add	r3, r7
 800a74a:	f8d9 7000 	ldr.w	r7, [r9]
 800a74e:	0c12      	lsrs	r2, r2, #16
 800a750:	0c3f      	lsrs	r7, r7, #16
 800a752:	fb0a 7202 	mla	r2, sl, r2, r7
 800a756:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a760:	4565      	cmp	r5, ip
 800a762:	f849 3b04 	str.w	r3, [r9], #4
 800a766:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a76a:	d8e4      	bhi.n	800a736 <__multiply+0xaa>
 800a76c:	9b01      	ldr	r3, [sp, #4]
 800a76e:	50e7      	str	r7, [r4, r3]
 800a770:	9b03      	ldr	r3, [sp, #12]
 800a772:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a776:	3104      	adds	r1, #4
 800a778:	f1b9 0f00 	cmp.w	r9, #0
 800a77c:	d020      	beq.n	800a7c0 <__multiply+0x134>
 800a77e:	6823      	ldr	r3, [r4, #0]
 800a780:	4647      	mov	r7, r8
 800a782:	46a4      	mov	ip, r4
 800a784:	f04f 0a00 	mov.w	sl, #0
 800a788:	f8b7 b000 	ldrh.w	fp, [r7]
 800a78c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a790:	fb09 220b 	mla	r2, r9, fp, r2
 800a794:	4452      	add	r2, sl
 800a796:	b29b      	uxth	r3, r3
 800a798:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a79c:	f84c 3b04 	str.w	r3, [ip], #4
 800a7a0:	f857 3b04 	ldr.w	r3, [r7], #4
 800a7a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7a8:	f8bc 3000 	ldrh.w	r3, [ip]
 800a7ac:	fb09 330a 	mla	r3, r9, sl, r3
 800a7b0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a7b4:	42bd      	cmp	r5, r7
 800a7b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7ba:	d8e5      	bhi.n	800a788 <__multiply+0xfc>
 800a7bc:	9a01      	ldr	r2, [sp, #4]
 800a7be:	50a3      	str	r3, [r4, r2]
 800a7c0:	3404      	adds	r4, #4
 800a7c2:	e79f      	b.n	800a704 <__multiply+0x78>
 800a7c4:	3e01      	subs	r6, #1
 800a7c6:	e7a1      	b.n	800a70c <__multiply+0x80>
 800a7c8:	0800bd28 	.word	0x0800bd28
 800a7cc:	0800bd39 	.word	0x0800bd39

0800a7d0 <__pow5mult>:
 800a7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7d4:	4615      	mov	r5, r2
 800a7d6:	f012 0203 	ands.w	r2, r2, #3
 800a7da:	4607      	mov	r7, r0
 800a7dc:	460e      	mov	r6, r1
 800a7de:	d007      	beq.n	800a7f0 <__pow5mult+0x20>
 800a7e0:	4c25      	ldr	r4, [pc, #148]	@ (800a878 <__pow5mult+0xa8>)
 800a7e2:	3a01      	subs	r2, #1
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7ea:	f7ff fea7 	bl	800a53c <__multadd>
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	10ad      	asrs	r5, r5, #2
 800a7f2:	d03d      	beq.n	800a870 <__pow5mult+0xa0>
 800a7f4:	69fc      	ldr	r4, [r7, #28]
 800a7f6:	b97c      	cbnz	r4, 800a818 <__pow5mult+0x48>
 800a7f8:	2010      	movs	r0, #16
 800a7fa:	f7ff fd87 	bl	800a30c <malloc>
 800a7fe:	4602      	mov	r2, r0
 800a800:	61f8      	str	r0, [r7, #28]
 800a802:	b928      	cbnz	r0, 800a810 <__pow5mult+0x40>
 800a804:	4b1d      	ldr	r3, [pc, #116]	@ (800a87c <__pow5mult+0xac>)
 800a806:	481e      	ldr	r0, [pc, #120]	@ (800a880 <__pow5mult+0xb0>)
 800a808:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a80c:	f7fe febc 	bl	8009588 <__assert_func>
 800a810:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a814:	6004      	str	r4, [r0, #0]
 800a816:	60c4      	str	r4, [r0, #12]
 800a818:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a81c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a820:	b94c      	cbnz	r4, 800a836 <__pow5mult+0x66>
 800a822:	f240 2171 	movw	r1, #625	@ 0x271
 800a826:	4638      	mov	r0, r7
 800a828:	f7ff ff1a 	bl	800a660 <__i2b>
 800a82c:	2300      	movs	r3, #0
 800a82e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a832:	4604      	mov	r4, r0
 800a834:	6003      	str	r3, [r0, #0]
 800a836:	f04f 0900 	mov.w	r9, #0
 800a83a:	07eb      	lsls	r3, r5, #31
 800a83c:	d50a      	bpl.n	800a854 <__pow5mult+0x84>
 800a83e:	4631      	mov	r1, r6
 800a840:	4622      	mov	r2, r4
 800a842:	4638      	mov	r0, r7
 800a844:	f7ff ff22 	bl	800a68c <__multiply>
 800a848:	4631      	mov	r1, r6
 800a84a:	4680      	mov	r8, r0
 800a84c:	4638      	mov	r0, r7
 800a84e:	f7ff fe53 	bl	800a4f8 <_Bfree>
 800a852:	4646      	mov	r6, r8
 800a854:	106d      	asrs	r5, r5, #1
 800a856:	d00b      	beq.n	800a870 <__pow5mult+0xa0>
 800a858:	6820      	ldr	r0, [r4, #0]
 800a85a:	b938      	cbnz	r0, 800a86c <__pow5mult+0x9c>
 800a85c:	4622      	mov	r2, r4
 800a85e:	4621      	mov	r1, r4
 800a860:	4638      	mov	r0, r7
 800a862:	f7ff ff13 	bl	800a68c <__multiply>
 800a866:	6020      	str	r0, [r4, #0]
 800a868:	f8c0 9000 	str.w	r9, [r0]
 800a86c:	4604      	mov	r4, r0
 800a86e:	e7e4      	b.n	800a83a <__pow5mult+0x6a>
 800a870:	4630      	mov	r0, r6
 800a872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a876:	bf00      	nop
 800a878:	0800bdb0 	.word	0x0800bdb0
 800a87c:	0800bbe4 	.word	0x0800bbe4
 800a880:	0800bd39 	.word	0x0800bd39

0800a884 <__lshift>:
 800a884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a888:	460c      	mov	r4, r1
 800a88a:	6849      	ldr	r1, [r1, #4]
 800a88c:	6923      	ldr	r3, [r4, #16]
 800a88e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a892:	68a3      	ldr	r3, [r4, #8]
 800a894:	4607      	mov	r7, r0
 800a896:	4691      	mov	r9, r2
 800a898:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a89c:	f108 0601 	add.w	r6, r8, #1
 800a8a0:	42b3      	cmp	r3, r6
 800a8a2:	db0b      	blt.n	800a8bc <__lshift+0x38>
 800a8a4:	4638      	mov	r0, r7
 800a8a6:	f7ff fde7 	bl	800a478 <_Balloc>
 800a8aa:	4605      	mov	r5, r0
 800a8ac:	b948      	cbnz	r0, 800a8c2 <__lshift+0x3e>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	4b28      	ldr	r3, [pc, #160]	@ (800a954 <__lshift+0xd0>)
 800a8b2:	4829      	ldr	r0, [pc, #164]	@ (800a958 <__lshift+0xd4>)
 800a8b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a8b8:	f7fe fe66 	bl	8009588 <__assert_func>
 800a8bc:	3101      	adds	r1, #1
 800a8be:	005b      	lsls	r3, r3, #1
 800a8c0:	e7ee      	b.n	800a8a0 <__lshift+0x1c>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	f100 0114 	add.w	r1, r0, #20
 800a8c8:	f100 0210 	add.w	r2, r0, #16
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	4553      	cmp	r3, sl
 800a8d0:	db33      	blt.n	800a93a <__lshift+0xb6>
 800a8d2:	6920      	ldr	r0, [r4, #16]
 800a8d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8d8:	f104 0314 	add.w	r3, r4, #20
 800a8dc:	f019 091f 	ands.w	r9, r9, #31
 800a8e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8e8:	d02b      	beq.n	800a942 <__lshift+0xbe>
 800a8ea:	f1c9 0e20 	rsb	lr, r9, #32
 800a8ee:	468a      	mov	sl, r1
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	6818      	ldr	r0, [r3, #0]
 800a8f4:	fa00 f009 	lsl.w	r0, r0, r9
 800a8f8:	4310      	orrs	r0, r2
 800a8fa:	f84a 0b04 	str.w	r0, [sl], #4
 800a8fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a902:	459c      	cmp	ip, r3
 800a904:	fa22 f20e 	lsr.w	r2, r2, lr
 800a908:	d8f3      	bhi.n	800a8f2 <__lshift+0x6e>
 800a90a:	ebac 0304 	sub.w	r3, ip, r4
 800a90e:	3b15      	subs	r3, #21
 800a910:	f023 0303 	bic.w	r3, r3, #3
 800a914:	3304      	adds	r3, #4
 800a916:	f104 0015 	add.w	r0, r4, #21
 800a91a:	4560      	cmp	r0, ip
 800a91c:	bf88      	it	hi
 800a91e:	2304      	movhi	r3, #4
 800a920:	50ca      	str	r2, [r1, r3]
 800a922:	b10a      	cbz	r2, 800a928 <__lshift+0xa4>
 800a924:	f108 0602 	add.w	r6, r8, #2
 800a928:	3e01      	subs	r6, #1
 800a92a:	4638      	mov	r0, r7
 800a92c:	612e      	str	r6, [r5, #16]
 800a92e:	4621      	mov	r1, r4
 800a930:	f7ff fde2 	bl	800a4f8 <_Bfree>
 800a934:	4628      	mov	r0, r5
 800a936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a93a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a93e:	3301      	adds	r3, #1
 800a940:	e7c5      	b.n	800a8ce <__lshift+0x4a>
 800a942:	3904      	subs	r1, #4
 800a944:	f853 2b04 	ldr.w	r2, [r3], #4
 800a948:	f841 2f04 	str.w	r2, [r1, #4]!
 800a94c:	459c      	cmp	ip, r3
 800a94e:	d8f9      	bhi.n	800a944 <__lshift+0xc0>
 800a950:	e7ea      	b.n	800a928 <__lshift+0xa4>
 800a952:	bf00      	nop
 800a954:	0800bd28 	.word	0x0800bd28
 800a958:	0800bd39 	.word	0x0800bd39

0800a95c <__mcmp>:
 800a95c:	690a      	ldr	r2, [r1, #16]
 800a95e:	4603      	mov	r3, r0
 800a960:	6900      	ldr	r0, [r0, #16]
 800a962:	1a80      	subs	r0, r0, r2
 800a964:	b530      	push	{r4, r5, lr}
 800a966:	d10e      	bne.n	800a986 <__mcmp+0x2a>
 800a968:	3314      	adds	r3, #20
 800a96a:	3114      	adds	r1, #20
 800a96c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a970:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a974:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a978:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a97c:	4295      	cmp	r5, r2
 800a97e:	d003      	beq.n	800a988 <__mcmp+0x2c>
 800a980:	d205      	bcs.n	800a98e <__mcmp+0x32>
 800a982:	f04f 30ff 	mov.w	r0, #4294967295
 800a986:	bd30      	pop	{r4, r5, pc}
 800a988:	42a3      	cmp	r3, r4
 800a98a:	d3f3      	bcc.n	800a974 <__mcmp+0x18>
 800a98c:	e7fb      	b.n	800a986 <__mcmp+0x2a>
 800a98e:	2001      	movs	r0, #1
 800a990:	e7f9      	b.n	800a986 <__mcmp+0x2a>
	...

0800a994 <__mdiff>:
 800a994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a998:	4689      	mov	r9, r1
 800a99a:	4606      	mov	r6, r0
 800a99c:	4611      	mov	r1, r2
 800a99e:	4648      	mov	r0, r9
 800a9a0:	4614      	mov	r4, r2
 800a9a2:	f7ff ffdb 	bl	800a95c <__mcmp>
 800a9a6:	1e05      	subs	r5, r0, #0
 800a9a8:	d112      	bne.n	800a9d0 <__mdiff+0x3c>
 800a9aa:	4629      	mov	r1, r5
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	f7ff fd63 	bl	800a478 <_Balloc>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	b928      	cbnz	r0, 800a9c2 <__mdiff+0x2e>
 800a9b6:	4b3f      	ldr	r3, [pc, #252]	@ (800aab4 <__mdiff+0x120>)
 800a9b8:	f240 2137 	movw	r1, #567	@ 0x237
 800a9bc:	483e      	ldr	r0, [pc, #248]	@ (800aab8 <__mdiff+0x124>)
 800a9be:	f7fe fde3 	bl	8009588 <__assert_func>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9c8:	4610      	mov	r0, r2
 800a9ca:	b003      	add	sp, #12
 800a9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d0:	bfbc      	itt	lt
 800a9d2:	464b      	movlt	r3, r9
 800a9d4:	46a1      	movlt	r9, r4
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a9dc:	bfba      	itte	lt
 800a9de:	461c      	movlt	r4, r3
 800a9e0:	2501      	movlt	r5, #1
 800a9e2:	2500      	movge	r5, #0
 800a9e4:	f7ff fd48 	bl	800a478 <_Balloc>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	b918      	cbnz	r0, 800a9f4 <__mdiff+0x60>
 800a9ec:	4b31      	ldr	r3, [pc, #196]	@ (800aab4 <__mdiff+0x120>)
 800a9ee:	f240 2145 	movw	r1, #581	@ 0x245
 800a9f2:	e7e3      	b.n	800a9bc <__mdiff+0x28>
 800a9f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a9f8:	6926      	ldr	r6, [r4, #16]
 800a9fa:	60c5      	str	r5, [r0, #12]
 800a9fc:	f109 0310 	add.w	r3, r9, #16
 800aa00:	f109 0514 	add.w	r5, r9, #20
 800aa04:	f104 0e14 	add.w	lr, r4, #20
 800aa08:	f100 0b14 	add.w	fp, r0, #20
 800aa0c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aa10:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aa14:	9301      	str	r3, [sp, #4]
 800aa16:	46d9      	mov	r9, fp
 800aa18:	f04f 0c00 	mov.w	ip, #0
 800aa1c:	9b01      	ldr	r3, [sp, #4]
 800aa1e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aa22:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aa26:	9301      	str	r3, [sp, #4]
 800aa28:	fa1f f38a 	uxth.w	r3, sl
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	b283      	uxth	r3, r0
 800aa30:	1acb      	subs	r3, r1, r3
 800aa32:	0c00      	lsrs	r0, r0, #16
 800aa34:	4463      	add	r3, ip
 800aa36:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aa3a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aa44:	4576      	cmp	r6, lr
 800aa46:	f849 3b04 	str.w	r3, [r9], #4
 800aa4a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa4e:	d8e5      	bhi.n	800aa1c <__mdiff+0x88>
 800aa50:	1b33      	subs	r3, r6, r4
 800aa52:	3b15      	subs	r3, #21
 800aa54:	f023 0303 	bic.w	r3, r3, #3
 800aa58:	3415      	adds	r4, #21
 800aa5a:	3304      	adds	r3, #4
 800aa5c:	42a6      	cmp	r6, r4
 800aa5e:	bf38      	it	cc
 800aa60:	2304      	movcc	r3, #4
 800aa62:	441d      	add	r5, r3
 800aa64:	445b      	add	r3, fp
 800aa66:	461e      	mov	r6, r3
 800aa68:	462c      	mov	r4, r5
 800aa6a:	4544      	cmp	r4, r8
 800aa6c:	d30e      	bcc.n	800aa8c <__mdiff+0xf8>
 800aa6e:	f108 0103 	add.w	r1, r8, #3
 800aa72:	1b49      	subs	r1, r1, r5
 800aa74:	f021 0103 	bic.w	r1, r1, #3
 800aa78:	3d03      	subs	r5, #3
 800aa7a:	45a8      	cmp	r8, r5
 800aa7c:	bf38      	it	cc
 800aa7e:	2100      	movcc	r1, #0
 800aa80:	440b      	add	r3, r1
 800aa82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa86:	b191      	cbz	r1, 800aaae <__mdiff+0x11a>
 800aa88:	6117      	str	r7, [r2, #16]
 800aa8a:	e79d      	b.n	800a9c8 <__mdiff+0x34>
 800aa8c:	f854 1b04 	ldr.w	r1, [r4], #4
 800aa90:	46e6      	mov	lr, ip
 800aa92:	0c08      	lsrs	r0, r1, #16
 800aa94:	fa1c fc81 	uxtah	ip, ip, r1
 800aa98:	4471      	add	r1, lr
 800aa9a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aa9e:	b289      	uxth	r1, r1
 800aaa0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aaa4:	f846 1b04 	str.w	r1, [r6], #4
 800aaa8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aaac:	e7dd      	b.n	800aa6a <__mdiff+0xd6>
 800aaae:	3f01      	subs	r7, #1
 800aab0:	e7e7      	b.n	800aa82 <__mdiff+0xee>
 800aab2:	bf00      	nop
 800aab4:	0800bd28 	.word	0x0800bd28
 800aab8:	0800bd39 	.word	0x0800bd39

0800aabc <__d2b>:
 800aabc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aac0:	460f      	mov	r7, r1
 800aac2:	2101      	movs	r1, #1
 800aac4:	ec59 8b10 	vmov	r8, r9, d0
 800aac8:	4616      	mov	r6, r2
 800aaca:	f7ff fcd5 	bl	800a478 <_Balloc>
 800aace:	4604      	mov	r4, r0
 800aad0:	b930      	cbnz	r0, 800aae0 <__d2b+0x24>
 800aad2:	4602      	mov	r2, r0
 800aad4:	4b23      	ldr	r3, [pc, #140]	@ (800ab64 <__d2b+0xa8>)
 800aad6:	4824      	ldr	r0, [pc, #144]	@ (800ab68 <__d2b+0xac>)
 800aad8:	f240 310f 	movw	r1, #783	@ 0x30f
 800aadc:	f7fe fd54 	bl	8009588 <__assert_func>
 800aae0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aae4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aae8:	b10d      	cbz	r5, 800aaee <__d2b+0x32>
 800aaea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aaee:	9301      	str	r3, [sp, #4]
 800aaf0:	f1b8 0300 	subs.w	r3, r8, #0
 800aaf4:	d023      	beq.n	800ab3e <__d2b+0x82>
 800aaf6:	4668      	mov	r0, sp
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	f7ff fd84 	bl	800a606 <__lo0bits>
 800aafe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ab02:	b1d0      	cbz	r0, 800ab3a <__d2b+0x7e>
 800ab04:	f1c0 0320 	rsb	r3, r0, #32
 800ab08:	fa02 f303 	lsl.w	r3, r2, r3
 800ab0c:	430b      	orrs	r3, r1
 800ab0e:	40c2      	lsrs	r2, r0
 800ab10:	6163      	str	r3, [r4, #20]
 800ab12:	9201      	str	r2, [sp, #4]
 800ab14:	9b01      	ldr	r3, [sp, #4]
 800ab16:	61a3      	str	r3, [r4, #24]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	bf0c      	ite	eq
 800ab1c:	2201      	moveq	r2, #1
 800ab1e:	2202      	movne	r2, #2
 800ab20:	6122      	str	r2, [r4, #16]
 800ab22:	b1a5      	cbz	r5, 800ab4e <__d2b+0x92>
 800ab24:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ab28:	4405      	add	r5, r0
 800ab2a:	603d      	str	r5, [r7, #0]
 800ab2c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ab30:	6030      	str	r0, [r6, #0]
 800ab32:	4620      	mov	r0, r4
 800ab34:	b003      	add	sp, #12
 800ab36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab3a:	6161      	str	r1, [r4, #20]
 800ab3c:	e7ea      	b.n	800ab14 <__d2b+0x58>
 800ab3e:	a801      	add	r0, sp, #4
 800ab40:	f7ff fd61 	bl	800a606 <__lo0bits>
 800ab44:	9b01      	ldr	r3, [sp, #4]
 800ab46:	6163      	str	r3, [r4, #20]
 800ab48:	3020      	adds	r0, #32
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	e7e8      	b.n	800ab20 <__d2b+0x64>
 800ab4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ab56:	6038      	str	r0, [r7, #0]
 800ab58:	6918      	ldr	r0, [r3, #16]
 800ab5a:	f7ff fd35 	bl	800a5c8 <__hi0bits>
 800ab5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab62:	e7e5      	b.n	800ab30 <__d2b+0x74>
 800ab64:	0800bd28 	.word	0x0800bd28
 800ab68:	0800bd39 	.word	0x0800bd39

0800ab6c <__sfputc_r>:
 800ab6c:	6893      	ldr	r3, [r2, #8]
 800ab6e:	3b01      	subs	r3, #1
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	b410      	push	{r4}
 800ab74:	6093      	str	r3, [r2, #8]
 800ab76:	da08      	bge.n	800ab8a <__sfputc_r+0x1e>
 800ab78:	6994      	ldr	r4, [r2, #24]
 800ab7a:	42a3      	cmp	r3, r4
 800ab7c:	db01      	blt.n	800ab82 <__sfputc_r+0x16>
 800ab7e:	290a      	cmp	r1, #10
 800ab80:	d103      	bne.n	800ab8a <__sfputc_r+0x1e>
 800ab82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab86:	f000 b9f1 	b.w	800af6c <__swbuf_r>
 800ab8a:	6813      	ldr	r3, [r2, #0]
 800ab8c:	1c58      	adds	r0, r3, #1
 800ab8e:	6010      	str	r0, [r2, #0]
 800ab90:	7019      	strb	r1, [r3, #0]
 800ab92:	4608      	mov	r0, r1
 800ab94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <__sfputs_r>:
 800ab9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9c:	4606      	mov	r6, r0
 800ab9e:	460f      	mov	r7, r1
 800aba0:	4614      	mov	r4, r2
 800aba2:	18d5      	adds	r5, r2, r3
 800aba4:	42ac      	cmp	r4, r5
 800aba6:	d101      	bne.n	800abac <__sfputs_r+0x12>
 800aba8:	2000      	movs	r0, #0
 800abaa:	e007      	b.n	800abbc <__sfputs_r+0x22>
 800abac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abb0:	463a      	mov	r2, r7
 800abb2:	4630      	mov	r0, r6
 800abb4:	f7ff ffda 	bl	800ab6c <__sfputc_r>
 800abb8:	1c43      	adds	r3, r0, #1
 800abba:	d1f3      	bne.n	800aba4 <__sfputs_r+0xa>
 800abbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800abc0 <_vfiprintf_r>:
 800abc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc4:	460d      	mov	r5, r1
 800abc6:	b09d      	sub	sp, #116	@ 0x74
 800abc8:	4614      	mov	r4, r2
 800abca:	4698      	mov	r8, r3
 800abcc:	4606      	mov	r6, r0
 800abce:	b118      	cbz	r0, 800abd8 <_vfiprintf_r+0x18>
 800abd0:	6a03      	ldr	r3, [r0, #32]
 800abd2:	b90b      	cbnz	r3, 800abd8 <_vfiprintf_r+0x18>
 800abd4:	f7fe fbbe 	bl	8009354 <__sinit>
 800abd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abda:	07d9      	lsls	r1, r3, #31
 800abdc:	d405      	bmi.n	800abea <_vfiprintf_r+0x2a>
 800abde:	89ab      	ldrh	r3, [r5, #12]
 800abe0:	059a      	lsls	r2, r3, #22
 800abe2:	d402      	bmi.n	800abea <_vfiprintf_r+0x2a>
 800abe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abe6:	f7fe fcbe 	bl	8009566 <__retarget_lock_acquire_recursive>
 800abea:	89ab      	ldrh	r3, [r5, #12]
 800abec:	071b      	lsls	r3, r3, #28
 800abee:	d501      	bpl.n	800abf4 <_vfiprintf_r+0x34>
 800abf0:	692b      	ldr	r3, [r5, #16]
 800abf2:	b99b      	cbnz	r3, 800ac1c <_vfiprintf_r+0x5c>
 800abf4:	4629      	mov	r1, r5
 800abf6:	4630      	mov	r0, r6
 800abf8:	f000 f9f6 	bl	800afe8 <__swsetup_r>
 800abfc:	b170      	cbz	r0, 800ac1c <_vfiprintf_r+0x5c>
 800abfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac00:	07dc      	lsls	r4, r3, #31
 800ac02:	d504      	bpl.n	800ac0e <_vfiprintf_r+0x4e>
 800ac04:	f04f 30ff 	mov.w	r0, #4294967295
 800ac08:	b01d      	add	sp, #116	@ 0x74
 800ac0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac0e:	89ab      	ldrh	r3, [r5, #12]
 800ac10:	0598      	lsls	r0, r3, #22
 800ac12:	d4f7      	bmi.n	800ac04 <_vfiprintf_r+0x44>
 800ac14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac16:	f7fe fca7 	bl	8009568 <__retarget_lock_release_recursive>
 800ac1a:	e7f3      	b.n	800ac04 <_vfiprintf_r+0x44>
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac20:	2320      	movs	r3, #32
 800ac22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac26:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac2a:	2330      	movs	r3, #48	@ 0x30
 800ac2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800addc <_vfiprintf_r+0x21c>
 800ac30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac34:	f04f 0901 	mov.w	r9, #1
 800ac38:	4623      	mov	r3, r4
 800ac3a:	469a      	mov	sl, r3
 800ac3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac40:	b10a      	cbz	r2, 800ac46 <_vfiprintf_r+0x86>
 800ac42:	2a25      	cmp	r2, #37	@ 0x25
 800ac44:	d1f9      	bne.n	800ac3a <_vfiprintf_r+0x7a>
 800ac46:	ebba 0b04 	subs.w	fp, sl, r4
 800ac4a:	d00b      	beq.n	800ac64 <_vfiprintf_r+0xa4>
 800ac4c:	465b      	mov	r3, fp
 800ac4e:	4622      	mov	r2, r4
 800ac50:	4629      	mov	r1, r5
 800ac52:	4630      	mov	r0, r6
 800ac54:	f7ff ffa1 	bl	800ab9a <__sfputs_r>
 800ac58:	3001      	adds	r0, #1
 800ac5a:	f000 80a7 	beq.w	800adac <_vfiprintf_r+0x1ec>
 800ac5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac60:	445a      	add	r2, fp
 800ac62:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac64:	f89a 3000 	ldrb.w	r3, [sl]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f000 809f 	beq.w	800adac <_vfiprintf_r+0x1ec>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	f04f 32ff 	mov.w	r2, #4294967295
 800ac74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac78:	f10a 0a01 	add.w	sl, sl, #1
 800ac7c:	9304      	str	r3, [sp, #16]
 800ac7e:	9307      	str	r3, [sp, #28]
 800ac80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac84:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac86:	4654      	mov	r4, sl
 800ac88:	2205      	movs	r2, #5
 800ac8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac8e:	4853      	ldr	r0, [pc, #332]	@ (800addc <_vfiprintf_r+0x21c>)
 800ac90:	f7f5 fa9e 	bl	80001d0 <memchr>
 800ac94:	9a04      	ldr	r2, [sp, #16]
 800ac96:	b9d8      	cbnz	r0, 800acd0 <_vfiprintf_r+0x110>
 800ac98:	06d1      	lsls	r1, r2, #27
 800ac9a:	bf44      	itt	mi
 800ac9c:	2320      	movmi	r3, #32
 800ac9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aca2:	0713      	lsls	r3, r2, #28
 800aca4:	bf44      	itt	mi
 800aca6:	232b      	movmi	r3, #43	@ 0x2b
 800aca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acac:	f89a 3000 	ldrb.w	r3, [sl]
 800acb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800acb2:	d015      	beq.n	800ace0 <_vfiprintf_r+0x120>
 800acb4:	9a07      	ldr	r2, [sp, #28]
 800acb6:	4654      	mov	r4, sl
 800acb8:	2000      	movs	r0, #0
 800acba:	f04f 0c0a 	mov.w	ip, #10
 800acbe:	4621      	mov	r1, r4
 800acc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acc4:	3b30      	subs	r3, #48	@ 0x30
 800acc6:	2b09      	cmp	r3, #9
 800acc8:	d94b      	bls.n	800ad62 <_vfiprintf_r+0x1a2>
 800acca:	b1b0      	cbz	r0, 800acfa <_vfiprintf_r+0x13a>
 800accc:	9207      	str	r2, [sp, #28]
 800acce:	e014      	b.n	800acfa <_vfiprintf_r+0x13a>
 800acd0:	eba0 0308 	sub.w	r3, r0, r8
 800acd4:	fa09 f303 	lsl.w	r3, r9, r3
 800acd8:	4313      	orrs	r3, r2
 800acda:	9304      	str	r3, [sp, #16]
 800acdc:	46a2      	mov	sl, r4
 800acde:	e7d2      	b.n	800ac86 <_vfiprintf_r+0xc6>
 800ace0:	9b03      	ldr	r3, [sp, #12]
 800ace2:	1d19      	adds	r1, r3, #4
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	9103      	str	r1, [sp, #12]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	bfbb      	ittet	lt
 800acec:	425b      	neglt	r3, r3
 800acee:	f042 0202 	orrlt.w	r2, r2, #2
 800acf2:	9307      	strge	r3, [sp, #28]
 800acf4:	9307      	strlt	r3, [sp, #28]
 800acf6:	bfb8      	it	lt
 800acf8:	9204      	strlt	r2, [sp, #16]
 800acfa:	7823      	ldrb	r3, [r4, #0]
 800acfc:	2b2e      	cmp	r3, #46	@ 0x2e
 800acfe:	d10a      	bne.n	800ad16 <_vfiprintf_r+0x156>
 800ad00:	7863      	ldrb	r3, [r4, #1]
 800ad02:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad04:	d132      	bne.n	800ad6c <_vfiprintf_r+0x1ac>
 800ad06:	9b03      	ldr	r3, [sp, #12]
 800ad08:	1d1a      	adds	r2, r3, #4
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	9203      	str	r2, [sp, #12]
 800ad0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad12:	3402      	adds	r4, #2
 800ad14:	9305      	str	r3, [sp, #20]
 800ad16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800adec <_vfiprintf_r+0x22c>
 800ad1a:	7821      	ldrb	r1, [r4, #0]
 800ad1c:	2203      	movs	r2, #3
 800ad1e:	4650      	mov	r0, sl
 800ad20:	f7f5 fa56 	bl	80001d0 <memchr>
 800ad24:	b138      	cbz	r0, 800ad36 <_vfiprintf_r+0x176>
 800ad26:	9b04      	ldr	r3, [sp, #16]
 800ad28:	eba0 000a 	sub.w	r0, r0, sl
 800ad2c:	2240      	movs	r2, #64	@ 0x40
 800ad2e:	4082      	lsls	r2, r0
 800ad30:	4313      	orrs	r3, r2
 800ad32:	3401      	adds	r4, #1
 800ad34:	9304      	str	r3, [sp, #16]
 800ad36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad3a:	4829      	ldr	r0, [pc, #164]	@ (800ade0 <_vfiprintf_r+0x220>)
 800ad3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad40:	2206      	movs	r2, #6
 800ad42:	f7f5 fa45 	bl	80001d0 <memchr>
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d03f      	beq.n	800adca <_vfiprintf_r+0x20a>
 800ad4a:	4b26      	ldr	r3, [pc, #152]	@ (800ade4 <_vfiprintf_r+0x224>)
 800ad4c:	bb1b      	cbnz	r3, 800ad96 <_vfiprintf_r+0x1d6>
 800ad4e:	9b03      	ldr	r3, [sp, #12]
 800ad50:	3307      	adds	r3, #7
 800ad52:	f023 0307 	bic.w	r3, r3, #7
 800ad56:	3308      	adds	r3, #8
 800ad58:	9303      	str	r3, [sp, #12]
 800ad5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad5c:	443b      	add	r3, r7
 800ad5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad60:	e76a      	b.n	800ac38 <_vfiprintf_r+0x78>
 800ad62:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad66:	460c      	mov	r4, r1
 800ad68:	2001      	movs	r0, #1
 800ad6a:	e7a8      	b.n	800acbe <_vfiprintf_r+0xfe>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	3401      	adds	r4, #1
 800ad70:	9305      	str	r3, [sp, #20]
 800ad72:	4619      	mov	r1, r3
 800ad74:	f04f 0c0a 	mov.w	ip, #10
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad7e:	3a30      	subs	r2, #48	@ 0x30
 800ad80:	2a09      	cmp	r2, #9
 800ad82:	d903      	bls.n	800ad8c <_vfiprintf_r+0x1cc>
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d0c6      	beq.n	800ad16 <_vfiprintf_r+0x156>
 800ad88:	9105      	str	r1, [sp, #20]
 800ad8a:	e7c4      	b.n	800ad16 <_vfiprintf_r+0x156>
 800ad8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad90:	4604      	mov	r4, r0
 800ad92:	2301      	movs	r3, #1
 800ad94:	e7f0      	b.n	800ad78 <_vfiprintf_r+0x1b8>
 800ad96:	ab03      	add	r3, sp, #12
 800ad98:	9300      	str	r3, [sp, #0]
 800ad9a:	462a      	mov	r2, r5
 800ad9c:	4b12      	ldr	r3, [pc, #72]	@ (800ade8 <_vfiprintf_r+0x228>)
 800ad9e:	a904      	add	r1, sp, #16
 800ada0:	4630      	mov	r0, r6
 800ada2:	f7fd fe95 	bl	8008ad0 <_printf_float>
 800ada6:	4607      	mov	r7, r0
 800ada8:	1c78      	adds	r0, r7, #1
 800adaa:	d1d6      	bne.n	800ad5a <_vfiprintf_r+0x19a>
 800adac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adae:	07d9      	lsls	r1, r3, #31
 800adb0:	d405      	bmi.n	800adbe <_vfiprintf_r+0x1fe>
 800adb2:	89ab      	ldrh	r3, [r5, #12]
 800adb4:	059a      	lsls	r2, r3, #22
 800adb6:	d402      	bmi.n	800adbe <_vfiprintf_r+0x1fe>
 800adb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adba:	f7fe fbd5 	bl	8009568 <__retarget_lock_release_recursive>
 800adbe:	89ab      	ldrh	r3, [r5, #12]
 800adc0:	065b      	lsls	r3, r3, #25
 800adc2:	f53f af1f 	bmi.w	800ac04 <_vfiprintf_r+0x44>
 800adc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800adc8:	e71e      	b.n	800ac08 <_vfiprintf_r+0x48>
 800adca:	ab03      	add	r3, sp, #12
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	462a      	mov	r2, r5
 800add0:	4b05      	ldr	r3, [pc, #20]	@ (800ade8 <_vfiprintf_r+0x228>)
 800add2:	a904      	add	r1, sp, #16
 800add4:	4630      	mov	r0, r6
 800add6:	f7fe f913 	bl	8009000 <_printf_i>
 800adda:	e7e4      	b.n	800ada6 <_vfiprintf_r+0x1e6>
 800addc:	0800bd92 	.word	0x0800bd92
 800ade0:	0800bd9c 	.word	0x0800bd9c
 800ade4:	08008ad1 	.word	0x08008ad1
 800ade8:	0800ab9b 	.word	0x0800ab9b
 800adec:	0800bd98 	.word	0x0800bd98

0800adf0 <__sflush_r>:
 800adf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800adf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adf8:	0716      	lsls	r6, r2, #28
 800adfa:	4605      	mov	r5, r0
 800adfc:	460c      	mov	r4, r1
 800adfe:	d454      	bmi.n	800aeaa <__sflush_r+0xba>
 800ae00:	684b      	ldr	r3, [r1, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	dc02      	bgt.n	800ae0c <__sflush_r+0x1c>
 800ae06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	dd48      	ble.n	800ae9e <__sflush_r+0xae>
 800ae0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae0e:	2e00      	cmp	r6, #0
 800ae10:	d045      	beq.n	800ae9e <__sflush_r+0xae>
 800ae12:	2300      	movs	r3, #0
 800ae14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ae18:	682f      	ldr	r7, [r5, #0]
 800ae1a:	6a21      	ldr	r1, [r4, #32]
 800ae1c:	602b      	str	r3, [r5, #0]
 800ae1e:	d030      	beq.n	800ae82 <__sflush_r+0x92>
 800ae20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ae22:	89a3      	ldrh	r3, [r4, #12]
 800ae24:	0759      	lsls	r1, r3, #29
 800ae26:	d505      	bpl.n	800ae34 <__sflush_r+0x44>
 800ae28:	6863      	ldr	r3, [r4, #4]
 800ae2a:	1ad2      	subs	r2, r2, r3
 800ae2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae2e:	b10b      	cbz	r3, 800ae34 <__sflush_r+0x44>
 800ae30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae32:	1ad2      	subs	r2, r2, r3
 800ae34:	2300      	movs	r3, #0
 800ae36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae38:	6a21      	ldr	r1, [r4, #32]
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	47b0      	blx	r6
 800ae3e:	1c43      	adds	r3, r0, #1
 800ae40:	89a3      	ldrh	r3, [r4, #12]
 800ae42:	d106      	bne.n	800ae52 <__sflush_r+0x62>
 800ae44:	6829      	ldr	r1, [r5, #0]
 800ae46:	291d      	cmp	r1, #29
 800ae48:	d82b      	bhi.n	800aea2 <__sflush_r+0xb2>
 800ae4a:	4a2a      	ldr	r2, [pc, #168]	@ (800aef4 <__sflush_r+0x104>)
 800ae4c:	40ca      	lsrs	r2, r1
 800ae4e:	07d6      	lsls	r6, r2, #31
 800ae50:	d527      	bpl.n	800aea2 <__sflush_r+0xb2>
 800ae52:	2200      	movs	r2, #0
 800ae54:	6062      	str	r2, [r4, #4]
 800ae56:	04d9      	lsls	r1, r3, #19
 800ae58:	6922      	ldr	r2, [r4, #16]
 800ae5a:	6022      	str	r2, [r4, #0]
 800ae5c:	d504      	bpl.n	800ae68 <__sflush_r+0x78>
 800ae5e:	1c42      	adds	r2, r0, #1
 800ae60:	d101      	bne.n	800ae66 <__sflush_r+0x76>
 800ae62:	682b      	ldr	r3, [r5, #0]
 800ae64:	b903      	cbnz	r3, 800ae68 <__sflush_r+0x78>
 800ae66:	6560      	str	r0, [r4, #84]	@ 0x54
 800ae68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae6a:	602f      	str	r7, [r5, #0]
 800ae6c:	b1b9      	cbz	r1, 800ae9e <__sflush_r+0xae>
 800ae6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae72:	4299      	cmp	r1, r3
 800ae74:	d002      	beq.n	800ae7c <__sflush_r+0x8c>
 800ae76:	4628      	mov	r0, r5
 800ae78:	f7ff f9fe 	bl	800a278 <_free_r>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae80:	e00d      	b.n	800ae9e <__sflush_r+0xae>
 800ae82:	2301      	movs	r3, #1
 800ae84:	4628      	mov	r0, r5
 800ae86:	47b0      	blx	r6
 800ae88:	4602      	mov	r2, r0
 800ae8a:	1c50      	adds	r0, r2, #1
 800ae8c:	d1c9      	bne.n	800ae22 <__sflush_r+0x32>
 800ae8e:	682b      	ldr	r3, [r5, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d0c6      	beq.n	800ae22 <__sflush_r+0x32>
 800ae94:	2b1d      	cmp	r3, #29
 800ae96:	d001      	beq.n	800ae9c <__sflush_r+0xac>
 800ae98:	2b16      	cmp	r3, #22
 800ae9a:	d11e      	bne.n	800aeda <__sflush_r+0xea>
 800ae9c:	602f      	str	r7, [r5, #0]
 800ae9e:	2000      	movs	r0, #0
 800aea0:	e022      	b.n	800aee8 <__sflush_r+0xf8>
 800aea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aea6:	b21b      	sxth	r3, r3
 800aea8:	e01b      	b.n	800aee2 <__sflush_r+0xf2>
 800aeaa:	690f      	ldr	r7, [r1, #16]
 800aeac:	2f00      	cmp	r7, #0
 800aeae:	d0f6      	beq.n	800ae9e <__sflush_r+0xae>
 800aeb0:	0793      	lsls	r3, r2, #30
 800aeb2:	680e      	ldr	r6, [r1, #0]
 800aeb4:	bf08      	it	eq
 800aeb6:	694b      	ldreq	r3, [r1, #20]
 800aeb8:	600f      	str	r7, [r1, #0]
 800aeba:	bf18      	it	ne
 800aebc:	2300      	movne	r3, #0
 800aebe:	eba6 0807 	sub.w	r8, r6, r7
 800aec2:	608b      	str	r3, [r1, #8]
 800aec4:	f1b8 0f00 	cmp.w	r8, #0
 800aec8:	dde9      	ble.n	800ae9e <__sflush_r+0xae>
 800aeca:	6a21      	ldr	r1, [r4, #32]
 800aecc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aece:	4643      	mov	r3, r8
 800aed0:	463a      	mov	r2, r7
 800aed2:	4628      	mov	r0, r5
 800aed4:	47b0      	blx	r6
 800aed6:	2800      	cmp	r0, #0
 800aed8:	dc08      	bgt.n	800aeec <__sflush_r+0xfc>
 800aeda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aee2:	81a3      	strh	r3, [r4, #12]
 800aee4:	f04f 30ff 	mov.w	r0, #4294967295
 800aee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeec:	4407      	add	r7, r0
 800aeee:	eba8 0800 	sub.w	r8, r8, r0
 800aef2:	e7e7      	b.n	800aec4 <__sflush_r+0xd4>
 800aef4:	20400001 	.word	0x20400001

0800aef8 <_fflush_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	690b      	ldr	r3, [r1, #16]
 800aefc:	4605      	mov	r5, r0
 800aefe:	460c      	mov	r4, r1
 800af00:	b913      	cbnz	r3, 800af08 <_fflush_r+0x10>
 800af02:	2500      	movs	r5, #0
 800af04:	4628      	mov	r0, r5
 800af06:	bd38      	pop	{r3, r4, r5, pc}
 800af08:	b118      	cbz	r0, 800af12 <_fflush_r+0x1a>
 800af0a:	6a03      	ldr	r3, [r0, #32]
 800af0c:	b90b      	cbnz	r3, 800af12 <_fflush_r+0x1a>
 800af0e:	f7fe fa21 	bl	8009354 <__sinit>
 800af12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d0f3      	beq.n	800af02 <_fflush_r+0xa>
 800af1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800af1c:	07d0      	lsls	r0, r2, #31
 800af1e:	d404      	bmi.n	800af2a <_fflush_r+0x32>
 800af20:	0599      	lsls	r1, r3, #22
 800af22:	d402      	bmi.n	800af2a <_fflush_r+0x32>
 800af24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af26:	f7fe fb1e 	bl	8009566 <__retarget_lock_acquire_recursive>
 800af2a:	4628      	mov	r0, r5
 800af2c:	4621      	mov	r1, r4
 800af2e:	f7ff ff5f 	bl	800adf0 <__sflush_r>
 800af32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af34:	07da      	lsls	r2, r3, #31
 800af36:	4605      	mov	r5, r0
 800af38:	d4e4      	bmi.n	800af04 <_fflush_r+0xc>
 800af3a:	89a3      	ldrh	r3, [r4, #12]
 800af3c:	059b      	lsls	r3, r3, #22
 800af3e:	d4e1      	bmi.n	800af04 <_fflush_r+0xc>
 800af40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af42:	f7fe fb11 	bl	8009568 <__retarget_lock_release_recursive>
 800af46:	e7dd      	b.n	800af04 <_fflush_r+0xc>

0800af48 <fiprintf>:
 800af48:	b40e      	push	{r1, r2, r3}
 800af4a:	b503      	push	{r0, r1, lr}
 800af4c:	4601      	mov	r1, r0
 800af4e:	ab03      	add	r3, sp, #12
 800af50:	4805      	ldr	r0, [pc, #20]	@ (800af68 <fiprintf+0x20>)
 800af52:	f853 2b04 	ldr.w	r2, [r3], #4
 800af56:	6800      	ldr	r0, [r0, #0]
 800af58:	9301      	str	r3, [sp, #4]
 800af5a:	f7ff fe31 	bl	800abc0 <_vfiprintf_r>
 800af5e:	b002      	add	sp, #8
 800af60:	f85d eb04 	ldr.w	lr, [sp], #4
 800af64:	b003      	add	sp, #12
 800af66:	4770      	bx	lr
 800af68:	20000064 	.word	0x20000064

0800af6c <__swbuf_r>:
 800af6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af6e:	460e      	mov	r6, r1
 800af70:	4614      	mov	r4, r2
 800af72:	4605      	mov	r5, r0
 800af74:	b118      	cbz	r0, 800af7e <__swbuf_r+0x12>
 800af76:	6a03      	ldr	r3, [r0, #32]
 800af78:	b90b      	cbnz	r3, 800af7e <__swbuf_r+0x12>
 800af7a:	f7fe f9eb 	bl	8009354 <__sinit>
 800af7e:	69a3      	ldr	r3, [r4, #24]
 800af80:	60a3      	str	r3, [r4, #8]
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	071a      	lsls	r2, r3, #28
 800af86:	d501      	bpl.n	800af8c <__swbuf_r+0x20>
 800af88:	6923      	ldr	r3, [r4, #16]
 800af8a:	b943      	cbnz	r3, 800af9e <__swbuf_r+0x32>
 800af8c:	4621      	mov	r1, r4
 800af8e:	4628      	mov	r0, r5
 800af90:	f000 f82a 	bl	800afe8 <__swsetup_r>
 800af94:	b118      	cbz	r0, 800af9e <__swbuf_r+0x32>
 800af96:	f04f 37ff 	mov.w	r7, #4294967295
 800af9a:	4638      	mov	r0, r7
 800af9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	6922      	ldr	r2, [r4, #16]
 800afa2:	1a98      	subs	r0, r3, r2
 800afa4:	6963      	ldr	r3, [r4, #20]
 800afa6:	b2f6      	uxtb	r6, r6
 800afa8:	4283      	cmp	r3, r0
 800afaa:	4637      	mov	r7, r6
 800afac:	dc05      	bgt.n	800afba <__swbuf_r+0x4e>
 800afae:	4621      	mov	r1, r4
 800afb0:	4628      	mov	r0, r5
 800afb2:	f7ff ffa1 	bl	800aef8 <_fflush_r>
 800afb6:	2800      	cmp	r0, #0
 800afb8:	d1ed      	bne.n	800af96 <__swbuf_r+0x2a>
 800afba:	68a3      	ldr	r3, [r4, #8]
 800afbc:	3b01      	subs	r3, #1
 800afbe:	60a3      	str	r3, [r4, #8]
 800afc0:	6823      	ldr	r3, [r4, #0]
 800afc2:	1c5a      	adds	r2, r3, #1
 800afc4:	6022      	str	r2, [r4, #0]
 800afc6:	701e      	strb	r6, [r3, #0]
 800afc8:	6962      	ldr	r2, [r4, #20]
 800afca:	1c43      	adds	r3, r0, #1
 800afcc:	429a      	cmp	r2, r3
 800afce:	d004      	beq.n	800afda <__swbuf_r+0x6e>
 800afd0:	89a3      	ldrh	r3, [r4, #12]
 800afd2:	07db      	lsls	r3, r3, #31
 800afd4:	d5e1      	bpl.n	800af9a <__swbuf_r+0x2e>
 800afd6:	2e0a      	cmp	r6, #10
 800afd8:	d1df      	bne.n	800af9a <__swbuf_r+0x2e>
 800afda:	4621      	mov	r1, r4
 800afdc:	4628      	mov	r0, r5
 800afde:	f7ff ff8b 	bl	800aef8 <_fflush_r>
 800afe2:	2800      	cmp	r0, #0
 800afe4:	d0d9      	beq.n	800af9a <__swbuf_r+0x2e>
 800afe6:	e7d6      	b.n	800af96 <__swbuf_r+0x2a>

0800afe8 <__swsetup_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	4b29      	ldr	r3, [pc, #164]	@ (800b090 <__swsetup_r+0xa8>)
 800afec:	4605      	mov	r5, r0
 800afee:	6818      	ldr	r0, [r3, #0]
 800aff0:	460c      	mov	r4, r1
 800aff2:	b118      	cbz	r0, 800affc <__swsetup_r+0x14>
 800aff4:	6a03      	ldr	r3, [r0, #32]
 800aff6:	b90b      	cbnz	r3, 800affc <__swsetup_r+0x14>
 800aff8:	f7fe f9ac 	bl	8009354 <__sinit>
 800affc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b000:	0719      	lsls	r1, r3, #28
 800b002:	d422      	bmi.n	800b04a <__swsetup_r+0x62>
 800b004:	06da      	lsls	r2, r3, #27
 800b006:	d407      	bmi.n	800b018 <__swsetup_r+0x30>
 800b008:	2209      	movs	r2, #9
 800b00a:	602a      	str	r2, [r5, #0]
 800b00c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b010:	81a3      	strh	r3, [r4, #12]
 800b012:	f04f 30ff 	mov.w	r0, #4294967295
 800b016:	e033      	b.n	800b080 <__swsetup_r+0x98>
 800b018:	0758      	lsls	r0, r3, #29
 800b01a:	d512      	bpl.n	800b042 <__swsetup_r+0x5a>
 800b01c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b01e:	b141      	cbz	r1, 800b032 <__swsetup_r+0x4a>
 800b020:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b024:	4299      	cmp	r1, r3
 800b026:	d002      	beq.n	800b02e <__swsetup_r+0x46>
 800b028:	4628      	mov	r0, r5
 800b02a:	f7ff f925 	bl	800a278 <_free_r>
 800b02e:	2300      	movs	r3, #0
 800b030:	6363      	str	r3, [r4, #52]	@ 0x34
 800b032:	89a3      	ldrh	r3, [r4, #12]
 800b034:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b038:	81a3      	strh	r3, [r4, #12]
 800b03a:	2300      	movs	r3, #0
 800b03c:	6063      	str	r3, [r4, #4]
 800b03e:	6923      	ldr	r3, [r4, #16]
 800b040:	6023      	str	r3, [r4, #0]
 800b042:	89a3      	ldrh	r3, [r4, #12]
 800b044:	f043 0308 	orr.w	r3, r3, #8
 800b048:	81a3      	strh	r3, [r4, #12]
 800b04a:	6923      	ldr	r3, [r4, #16]
 800b04c:	b94b      	cbnz	r3, 800b062 <__swsetup_r+0x7a>
 800b04e:	89a3      	ldrh	r3, [r4, #12]
 800b050:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b058:	d003      	beq.n	800b062 <__swsetup_r+0x7a>
 800b05a:	4621      	mov	r1, r4
 800b05c:	4628      	mov	r0, r5
 800b05e:	f000 f889 	bl	800b174 <__smakebuf_r>
 800b062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b066:	f013 0201 	ands.w	r2, r3, #1
 800b06a:	d00a      	beq.n	800b082 <__swsetup_r+0x9a>
 800b06c:	2200      	movs	r2, #0
 800b06e:	60a2      	str	r2, [r4, #8]
 800b070:	6962      	ldr	r2, [r4, #20]
 800b072:	4252      	negs	r2, r2
 800b074:	61a2      	str	r2, [r4, #24]
 800b076:	6922      	ldr	r2, [r4, #16]
 800b078:	b942      	cbnz	r2, 800b08c <__swsetup_r+0xa4>
 800b07a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b07e:	d1c5      	bne.n	800b00c <__swsetup_r+0x24>
 800b080:	bd38      	pop	{r3, r4, r5, pc}
 800b082:	0799      	lsls	r1, r3, #30
 800b084:	bf58      	it	pl
 800b086:	6962      	ldrpl	r2, [r4, #20]
 800b088:	60a2      	str	r2, [r4, #8]
 800b08a:	e7f4      	b.n	800b076 <__swsetup_r+0x8e>
 800b08c:	2000      	movs	r0, #0
 800b08e:	e7f7      	b.n	800b080 <__swsetup_r+0x98>
 800b090:	20000064 	.word	0x20000064

0800b094 <_sbrk_r>:
 800b094:	b538      	push	{r3, r4, r5, lr}
 800b096:	4d06      	ldr	r5, [pc, #24]	@ (800b0b0 <_sbrk_r+0x1c>)
 800b098:	2300      	movs	r3, #0
 800b09a:	4604      	mov	r4, r0
 800b09c:	4608      	mov	r0, r1
 800b09e:	602b      	str	r3, [r5, #0]
 800b0a0:	f7f6 ffac 	bl	8001ffc <_sbrk>
 800b0a4:	1c43      	adds	r3, r0, #1
 800b0a6:	d102      	bne.n	800b0ae <_sbrk_r+0x1a>
 800b0a8:	682b      	ldr	r3, [r5, #0]
 800b0aa:	b103      	cbz	r3, 800b0ae <_sbrk_r+0x1a>
 800b0ac:	6023      	str	r3, [r4, #0]
 800b0ae:	bd38      	pop	{r3, r4, r5, pc}
 800b0b0:	20002220 	.word	0x20002220

0800b0b4 <abort>:
 800b0b4:	b508      	push	{r3, lr}
 800b0b6:	2006      	movs	r0, #6
 800b0b8:	f000 f8c0 	bl	800b23c <raise>
 800b0bc:	2001      	movs	r0, #1
 800b0be:	f7f6 ff24 	bl	8001f0a <_exit>

0800b0c2 <_calloc_r>:
 800b0c2:	b570      	push	{r4, r5, r6, lr}
 800b0c4:	fba1 5402 	umull	r5, r4, r1, r2
 800b0c8:	b934      	cbnz	r4, 800b0d8 <_calloc_r+0x16>
 800b0ca:	4629      	mov	r1, r5
 800b0cc:	f7ff f948 	bl	800a360 <_malloc_r>
 800b0d0:	4606      	mov	r6, r0
 800b0d2:	b928      	cbnz	r0, 800b0e0 <_calloc_r+0x1e>
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	bd70      	pop	{r4, r5, r6, pc}
 800b0d8:	220c      	movs	r2, #12
 800b0da:	6002      	str	r2, [r0, #0]
 800b0dc:	2600      	movs	r6, #0
 800b0de:	e7f9      	b.n	800b0d4 <_calloc_r+0x12>
 800b0e0:	462a      	mov	r2, r5
 800b0e2:	4621      	mov	r1, r4
 800b0e4:	f7fe f9c1 	bl	800946a <memset>
 800b0e8:	e7f4      	b.n	800b0d4 <_calloc_r+0x12>

0800b0ea <__ascii_mbtowc>:
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	b901      	cbnz	r1, 800b0f0 <__ascii_mbtowc+0x6>
 800b0ee:	a901      	add	r1, sp, #4
 800b0f0:	b142      	cbz	r2, 800b104 <__ascii_mbtowc+0x1a>
 800b0f2:	b14b      	cbz	r3, 800b108 <__ascii_mbtowc+0x1e>
 800b0f4:	7813      	ldrb	r3, [r2, #0]
 800b0f6:	600b      	str	r3, [r1, #0]
 800b0f8:	7812      	ldrb	r2, [r2, #0]
 800b0fa:	1e10      	subs	r0, r2, #0
 800b0fc:	bf18      	it	ne
 800b0fe:	2001      	movne	r0, #1
 800b100:	b002      	add	sp, #8
 800b102:	4770      	bx	lr
 800b104:	4610      	mov	r0, r2
 800b106:	e7fb      	b.n	800b100 <__ascii_mbtowc+0x16>
 800b108:	f06f 0001 	mvn.w	r0, #1
 800b10c:	e7f8      	b.n	800b100 <__ascii_mbtowc+0x16>

0800b10e <__ascii_wctomb>:
 800b10e:	4603      	mov	r3, r0
 800b110:	4608      	mov	r0, r1
 800b112:	b141      	cbz	r1, 800b126 <__ascii_wctomb+0x18>
 800b114:	2aff      	cmp	r2, #255	@ 0xff
 800b116:	d904      	bls.n	800b122 <__ascii_wctomb+0x14>
 800b118:	228a      	movs	r2, #138	@ 0x8a
 800b11a:	601a      	str	r2, [r3, #0]
 800b11c:	f04f 30ff 	mov.w	r0, #4294967295
 800b120:	4770      	bx	lr
 800b122:	700a      	strb	r2, [r1, #0]
 800b124:	2001      	movs	r0, #1
 800b126:	4770      	bx	lr

0800b128 <__swhatbuf_r>:
 800b128:	b570      	push	{r4, r5, r6, lr}
 800b12a:	460c      	mov	r4, r1
 800b12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b130:	2900      	cmp	r1, #0
 800b132:	b096      	sub	sp, #88	@ 0x58
 800b134:	4615      	mov	r5, r2
 800b136:	461e      	mov	r6, r3
 800b138:	da0d      	bge.n	800b156 <__swhatbuf_r+0x2e>
 800b13a:	89a3      	ldrh	r3, [r4, #12]
 800b13c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b140:	f04f 0100 	mov.w	r1, #0
 800b144:	bf14      	ite	ne
 800b146:	2340      	movne	r3, #64	@ 0x40
 800b148:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b14c:	2000      	movs	r0, #0
 800b14e:	6031      	str	r1, [r6, #0]
 800b150:	602b      	str	r3, [r5, #0]
 800b152:	b016      	add	sp, #88	@ 0x58
 800b154:	bd70      	pop	{r4, r5, r6, pc}
 800b156:	466a      	mov	r2, sp
 800b158:	f000 f878 	bl	800b24c <_fstat_r>
 800b15c:	2800      	cmp	r0, #0
 800b15e:	dbec      	blt.n	800b13a <__swhatbuf_r+0x12>
 800b160:	9901      	ldr	r1, [sp, #4]
 800b162:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b166:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b16a:	4259      	negs	r1, r3
 800b16c:	4159      	adcs	r1, r3
 800b16e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b172:	e7eb      	b.n	800b14c <__swhatbuf_r+0x24>

0800b174 <__smakebuf_r>:
 800b174:	898b      	ldrh	r3, [r1, #12]
 800b176:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b178:	079d      	lsls	r5, r3, #30
 800b17a:	4606      	mov	r6, r0
 800b17c:	460c      	mov	r4, r1
 800b17e:	d507      	bpl.n	800b190 <__smakebuf_r+0x1c>
 800b180:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b184:	6023      	str	r3, [r4, #0]
 800b186:	6123      	str	r3, [r4, #16]
 800b188:	2301      	movs	r3, #1
 800b18a:	6163      	str	r3, [r4, #20]
 800b18c:	b003      	add	sp, #12
 800b18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b190:	ab01      	add	r3, sp, #4
 800b192:	466a      	mov	r2, sp
 800b194:	f7ff ffc8 	bl	800b128 <__swhatbuf_r>
 800b198:	9f00      	ldr	r7, [sp, #0]
 800b19a:	4605      	mov	r5, r0
 800b19c:	4639      	mov	r1, r7
 800b19e:	4630      	mov	r0, r6
 800b1a0:	f7ff f8de 	bl	800a360 <_malloc_r>
 800b1a4:	b948      	cbnz	r0, 800b1ba <__smakebuf_r+0x46>
 800b1a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1aa:	059a      	lsls	r2, r3, #22
 800b1ac:	d4ee      	bmi.n	800b18c <__smakebuf_r+0x18>
 800b1ae:	f023 0303 	bic.w	r3, r3, #3
 800b1b2:	f043 0302 	orr.w	r3, r3, #2
 800b1b6:	81a3      	strh	r3, [r4, #12]
 800b1b8:	e7e2      	b.n	800b180 <__smakebuf_r+0xc>
 800b1ba:	89a3      	ldrh	r3, [r4, #12]
 800b1bc:	6020      	str	r0, [r4, #0]
 800b1be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1c2:	81a3      	strh	r3, [r4, #12]
 800b1c4:	9b01      	ldr	r3, [sp, #4]
 800b1c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b1ca:	b15b      	cbz	r3, 800b1e4 <__smakebuf_r+0x70>
 800b1cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1d0:	4630      	mov	r0, r6
 800b1d2:	f000 f84d 	bl	800b270 <_isatty_r>
 800b1d6:	b128      	cbz	r0, 800b1e4 <__smakebuf_r+0x70>
 800b1d8:	89a3      	ldrh	r3, [r4, #12]
 800b1da:	f023 0303 	bic.w	r3, r3, #3
 800b1de:	f043 0301 	orr.w	r3, r3, #1
 800b1e2:	81a3      	strh	r3, [r4, #12]
 800b1e4:	89a3      	ldrh	r3, [r4, #12]
 800b1e6:	431d      	orrs	r5, r3
 800b1e8:	81a5      	strh	r5, [r4, #12]
 800b1ea:	e7cf      	b.n	800b18c <__smakebuf_r+0x18>

0800b1ec <_raise_r>:
 800b1ec:	291f      	cmp	r1, #31
 800b1ee:	b538      	push	{r3, r4, r5, lr}
 800b1f0:	4605      	mov	r5, r0
 800b1f2:	460c      	mov	r4, r1
 800b1f4:	d904      	bls.n	800b200 <_raise_r+0x14>
 800b1f6:	2316      	movs	r3, #22
 800b1f8:	6003      	str	r3, [r0, #0]
 800b1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b1fe:	bd38      	pop	{r3, r4, r5, pc}
 800b200:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b202:	b112      	cbz	r2, 800b20a <_raise_r+0x1e>
 800b204:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b208:	b94b      	cbnz	r3, 800b21e <_raise_r+0x32>
 800b20a:	4628      	mov	r0, r5
 800b20c:	f000 f852 	bl	800b2b4 <_getpid_r>
 800b210:	4622      	mov	r2, r4
 800b212:	4601      	mov	r1, r0
 800b214:	4628      	mov	r0, r5
 800b216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b21a:	f000 b839 	b.w	800b290 <_kill_r>
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d00a      	beq.n	800b238 <_raise_r+0x4c>
 800b222:	1c59      	adds	r1, r3, #1
 800b224:	d103      	bne.n	800b22e <_raise_r+0x42>
 800b226:	2316      	movs	r3, #22
 800b228:	6003      	str	r3, [r0, #0]
 800b22a:	2001      	movs	r0, #1
 800b22c:	e7e7      	b.n	800b1fe <_raise_r+0x12>
 800b22e:	2100      	movs	r1, #0
 800b230:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b234:	4620      	mov	r0, r4
 800b236:	4798      	blx	r3
 800b238:	2000      	movs	r0, #0
 800b23a:	e7e0      	b.n	800b1fe <_raise_r+0x12>

0800b23c <raise>:
 800b23c:	4b02      	ldr	r3, [pc, #8]	@ (800b248 <raise+0xc>)
 800b23e:	4601      	mov	r1, r0
 800b240:	6818      	ldr	r0, [r3, #0]
 800b242:	f7ff bfd3 	b.w	800b1ec <_raise_r>
 800b246:	bf00      	nop
 800b248:	20000064 	.word	0x20000064

0800b24c <_fstat_r>:
 800b24c:	b538      	push	{r3, r4, r5, lr}
 800b24e:	4d07      	ldr	r5, [pc, #28]	@ (800b26c <_fstat_r+0x20>)
 800b250:	2300      	movs	r3, #0
 800b252:	4604      	mov	r4, r0
 800b254:	4608      	mov	r0, r1
 800b256:	4611      	mov	r1, r2
 800b258:	602b      	str	r3, [r5, #0]
 800b25a:	f7f6 fea6 	bl	8001faa <_fstat>
 800b25e:	1c43      	adds	r3, r0, #1
 800b260:	d102      	bne.n	800b268 <_fstat_r+0x1c>
 800b262:	682b      	ldr	r3, [r5, #0]
 800b264:	b103      	cbz	r3, 800b268 <_fstat_r+0x1c>
 800b266:	6023      	str	r3, [r4, #0]
 800b268:	bd38      	pop	{r3, r4, r5, pc}
 800b26a:	bf00      	nop
 800b26c:	20002220 	.word	0x20002220

0800b270 <_isatty_r>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	4d06      	ldr	r5, [pc, #24]	@ (800b28c <_isatty_r+0x1c>)
 800b274:	2300      	movs	r3, #0
 800b276:	4604      	mov	r4, r0
 800b278:	4608      	mov	r0, r1
 800b27a:	602b      	str	r3, [r5, #0]
 800b27c:	f7f6 fea5 	bl	8001fca <_isatty>
 800b280:	1c43      	adds	r3, r0, #1
 800b282:	d102      	bne.n	800b28a <_isatty_r+0x1a>
 800b284:	682b      	ldr	r3, [r5, #0]
 800b286:	b103      	cbz	r3, 800b28a <_isatty_r+0x1a>
 800b288:	6023      	str	r3, [r4, #0]
 800b28a:	bd38      	pop	{r3, r4, r5, pc}
 800b28c:	20002220 	.word	0x20002220

0800b290 <_kill_r>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	4d07      	ldr	r5, [pc, #28]	@ (800b2b0 <_kill_r+0x20>)
 800b294:	2300      	movs	r3, #0
 800b296:	4604      	mov	r4, r0
 800b298:	4608      	mov	r0, r1
 800b29a:	4611      	mov	r1, r2
 800b29c:	602b      	str	r3, [r5, #0]
 800b29e:	f7f6 fe24 	bl	8001eea <_kill>
 800b2a2:	1c43      	adds	r3, r0, #1
 800b2a4:	d102      	bne.n	800b2ac <_kill_r+0x1c>
 800b2a6:	682b      	ldr	r3, [r5, #0]
 800b2a8:	b103      	cbz	r3, 800b2ac <_kill_r+0x1c>
 800b2aa:	6023      	str	r3, [r4, #0]
 800b2ac:	bd38      	pop	{r3, r4, r5, pc}
 800b2ae:	bf00      	nop
 800b2b0:	20002220 	.word	0x20002220

0800b2b4 <_getpid_r>:
 800b2b4:	f7f6 be11 	b.w	8001eda <_getpid>

0800b2b8 <_init>:
 800b2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ba:	bf00      	nop
 800b2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2be:	bc08      	pop	{r3}
 800b2c0:	469e      	mov	lr, r3
 800b2c2:	4770      	bx	lr

0800b2c4 <_fini>:
 800b2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c6:	bf00      	nop
 800b2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ca:	bc08      	pop	{r3}
 800b2cc:	469e      	mov	lr, r3
 800b2ce:	4770      	bx	lr
