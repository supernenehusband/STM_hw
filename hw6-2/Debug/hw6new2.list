
hw6new2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adb0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800af40  0800af40  0000bf40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b02c  0800b02c  0000d06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b02c  0800b02c  0000c02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b034  0800b034  0000d06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b034  0800b034  0000c034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b038  0800b038  0000c038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800b03c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024c8  2000006c  0800b0a8  0000d06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002534  0800b0a8  0000d534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a84c  00000000  00000000  0000d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005325  00000000  00000000  000378e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002838  00000000  00000000  0003cc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f63  00000000  00000000  0003f448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006e6e  00000000  00000000  000413ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cd76  00000000  00000000  00048219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011dd98  00000000  00000000  00074f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00192d27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b730  00000000  00000000  00192d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0019e49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af28 	.word	0x0800af28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800af28 	.word	0x0800af28

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <__NVIC_SetVector>:
           VTOR must been relocated to SRAM before.
  \param [in]   IRQn      Interrupt number
  \param [in]   vector    Address of interrupt handler function
 */
__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	6039      	str	r1, [r7, #0]
 80005a6:	71fb      	strb	r3, [r7, #7]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 80005a8:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <__NVIC_SetVector+0x34>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	60fb      	str	r3, [r7, #12]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 80005ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b2:	3310      	adds	r3, #16
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	461a      	mov	r2, r3
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4413      	add	r3, r2
 80005bc:	461a      	mov	r2, r3
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	6013      	str	r3, [r2, #0]
  /* ARM Application Note 321 states that the M4 does not require the architectural barrier */
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	e000ed00 	.word	0xe000ed00

080005d4 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#include<stdio.h>
int __io_putchar(int ch){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0xFFFF);
 80005dc:	1d39      	adds	r1, r7, #4
 80005de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005e2:	2201      	movs	r2, #1
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <__io_putchar+0x20>)
 80005e6:	f005 fdcb 	bl	8006180 <HAL_UART_Transmit>
	return ch;
 80005ea:	687b      	ldr	r3, [r7, #4]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200001bc 	.word	0x200001bc

080005f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a0a      	ldr	r2, [pc, #40]	@ (8000630 <HAL_ADC_MspInit+0x38>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d10b      	bne.n	8000622 <HAL_ADC_MspInit+0x2a>
    {
        /* Peripheral clock enable */
        __HAL_RCC_ADC_CLK_ENABLE();
 800060a:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <HAL_ADC_MspInit+0x3c>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	4a09      	ldr	r2, [pc, #36]	@ (8000634 <HAL_ADC_MspInit+0x3c>)
 8000610:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000616:	4b07      	ldr	r3, [pc, #28]	@ (8000634 <HAL_ADC_MspInit+0x3c>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
    }

}
 8000622:	bf00      	nop
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	50040000 	.word	0x50040000
 8000634:	40021000 	.word	0x40021000

08000638 <ADC1_Init>:
    }

}

void ADC1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	@ 0x28
 800063c:	af00      	add	r7, sp, #0
    ADC_MultiModeTypeDef multimode = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
 8000658:	615a      	str	r2, [r3, #20]

  /** Common config
  */
    hadc1.Instance = ADC1;
 800065a:	4b35      	ldr	r3, [pc, #212]	@ (8000730 <ADC1_Init+0xf8>)
 800065c:	4a35      	ldr	r2, [pc, #212]	@ (8000734 <ADC1_Init+0xfc>)
 800065e:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;//ADC_CLOCK_ASYNC_DIV1;
 8000660:	4b33      	ldr	r3, [pc, #204]	@ (8000730 <ADC1_Init+0xf8>)
 8000662:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000666:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000668:	4b31      	ldr	r3, [pc, #196]	@ (8000730 <ADC1_Init+0xf8>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066e:	4b30      	ldr	r3, [pc, #192]	@ (8000730 <ADC1_Init+0xf8>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000674:	4b2e      	ldr	r3, [pc, #184]	@ (8000730 <ADC1_Init+0xf8>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800067a:	4b2d      	ldr	r3, [pc, #180]	@ (8000730 <ADC1_Init+0xf8>)
 800067c:	2204      	movs	r2, #4
 800067e:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8000680:	4b2b      	ldr	r3, [pc, #172]	@ (8000730 <ADC1_Init+0xf8>)
 8000682:	2200      	movs	r2, #0
 8000684:	761a      	strb	r2, [r3, #24]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8000686:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <ADC1_Init+0xf8>)
 8000688:	2200      	movs	r2, #0
 800068a:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;
 800068c:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <ADC1_Init+0xf8>)
 800068e:	2201      	movs	r2, #1
 8000690:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000692:	4b27      	ldr	r3, [pc, #156]	@ (8000730 <ADC1_Init+0xf8>)
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800069a:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <ADC1_Init+0xf8>)
 800069c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80006a0:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006a2:	4b23      	ldr	r3, [pc, #140]	@ (8000730 <ADC1_Init+0xf8>)
 80006a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80006aa:	4b21      	ldr	r3, [pc, #132]	@ (8000730 <ADC1_Init+0xf8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <ADC1_Init+0xf8>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc1.Init.OversamplingMode = DISABLE;
 80006b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000730 <ADC1_Init+0xf8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c0:	481b      	ldr	r0, [pc, #108]	@ (8000730 <ADC1_Init+0xf8>)
 80006c2:	f001 fbc3 	bl	8001e4c <HAL_ADC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <ADC1_Init+0x98>
    {
        Error_Handler();
 80006cc:	f000 fd42 	bl	8001154 <Error_Handler>
    }

    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 80006d0:	217f      	movs	r1, #127	@ 0x7f
 80006d2:	4817      	ldr	r0, [pc, #92]	@ (8000730 <ADC1_Init+0xf8>)
 80006d4:	f002 fb8e 	bl	8002df4 <HAL_ADCEx_Calibration_Start>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <ADC1_Init+0xaa>
    {
        Error_Handler();
 80006de:	f000 fd39 	bl	8001154 <Error_Handler>
    }

  /** Configure the ADC multi-mode
  */
    multimode.Mode = ADC_MODE_INDEPENDENT;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	4810      	ldr	r0, [pc, #64]	@ (8000730 <ADC1_Init+0xf8>)
 80006ee:	f002 fbe1 	bl	8002eb4 <HAL_ADCEx_MultiModeConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <ADC1_Init+0xc4>
    {
        Error_Handler();
 80006f8:	f000 fd2c 	bl	8001154 <Error_Handler>
    }

  /** Configure Regular Channel
  */
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <ADC1_Init+0x100>)
 80006fe:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000700:	2306      	movs	r3, #6
 8000702:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;//ADC_SAMPLETIME_247CYCLES_5;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000708:	237f      	movs	r3, #127	@ 0x7f
 800070a:	613b      	str	r3, [r7, #16]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800070c:	2304      	movs	r3, #4
 800070e:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4805      	ldr	r0, [pc, #20]	@ (8000730 <ADC1_Init+0xf8>)
 800071a:	f001 fdad 	bl	8002278 <HAL_ADC_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <ADC1_Init+0xf0>
    {
        Error_Handler();
 8000724:	f000 fd16 	bl	8001154 <Error_Handler>
    }

}
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	@ 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000804 	.word	0x20000804
 8000734:	50040000 	.word	0x50040000
 8000738:	c7520000 	.word	0xc7520000

0800073c <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
    SET_BIT(hadc1.Instance->CFGR, ADC_CFGR_DMACFG);
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <DMA1_Channel1_IRQHandler+0x20>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	68da      	ldr	r2, [r3, #12]
 8000746:	4b05      	ldr	r3, [pc, #20]	@ (800075c <DMA1_Channel1_IRQHandler+0x20>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f042 0202 	orr.w	r2, r2, #2
 800074e:	60da      	str	r2, [r3, #12]
    HAL_DMA_IRQHandler(&hdma1);
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <DMA1_Channel1_IRQHandler+0x24>)
 8000752:	f002 ff95 	bl	8003680 <HAL_DMA_IRQHandler>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000804 	.word	0x20000804
 8000760:	20000868 	.word	0x20000868

08000764 <ADC1_DMA1CH1_init>:

void ADC1_DMA1CH1_init()
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 800076a:	4b24      	ldr	r3, [pc, #144]	@ (80007fc <ADC1_DMA1CH1_init+0x98>)
 800076c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800076e:	4a23      	ldr	r2, [pc, #140]	@ (80007fc <ADC1_DMA1CH1_init+0x98>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6493      	str	r3, [r2, #72]	@ 0x48
 8000776:	4b21      	ldr	r3, [pc, #132]	@ (80007fc <ADC1_DMA1CH1_init+0x98>)
 8000778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

    hdma1.Instance = DMA1_Channel1;
 8000782:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <ADC1_DMA1CH1_init+0x9c>)
 8000784:	4a1f      	ldr	r2, [pc, #124]	@ (8000804 <ADC1_DMA1CH1_init+0xa0>)
 8000786:	601a      	str	r2, [r3, #0]
    hdma1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000788:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <ADC1_DMA1CH1_init+0x9c>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
    hdma1.Init.PeriphInc = DMA_PINC_DISABLE;
 800078e:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <ADC1_DMA1CH1_init+0x9c>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
    hdma1.Init.MemInc = DMA_MINC_ENABLE;
 8000794:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <ADC1_DMA1CH1_init+0x9c>)
 8000796:	2280      	movs	r2, #128	@ 0x80
 8000798:	611a      	str	r2, [r3, #16]
    hdma1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800079a:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <ADC1_DMA1CH1_init+0x9c>)
 800079c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007a0:	615a      	str	r2, [r3, #20]
    hdma1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007a2:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <ADC1_DMA1CH1_init+0x9c>)
 80007a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007a8:	619a      	str	r2, [r3, #24]
    hdma1.Init.Mode = DMA_CIRCULAR;
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <ADC1_DMA1CH1_init+0x9c>)
 80007ac:	2220      	movs	r2, #32
 80007ae:	61da      	str	r2, [r3, #28]
    hdma1.Init.Priority = DMA_PRIORITY_HIGH;
 80007b0:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <ADC1_DMA1CH1_init+0x9c>)
 80007b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007b6:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma1) != HAL_OK)
 80007b8:	4811      	ldr	r0, [pc, #68]	@ (8000800 <ADC1_DMA1CH1_init+0x9c>)
 80007ba:	f002 fe49 	bl	8003450 <HAL_DMA_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <ADC1_DMA1CH1_init+0x64>
    {
        Error_Handler();
 80007c4:	f000 fcc6 	bl	8001154 <Error_Handler>
    }

    __HAL_LINKDMA(&hadc1, DMA_Handle, hdma1);
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <ADC1_DMA1CH1_init+0xa4>)
 80007ca:	4a0d      	ldr	r2, [pc, #52]	@ (8000800 <ADC1_DMA1CH1_init+0x9c>)
 80007cc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80007ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <ADC1_DMA1CH1_init+0x9c>)
 80007d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000808 <ADC1_DMA1CH1_init+0xa4>)
 80007d2:	629a      	str	r2, [r3, #40]	@ 0x28

    ADC1_Init();
 80007d4:	f7ff ff30 	bl	8000638 <ADC1_Init>

    NVIC_SetVector(DMA1_Channel1_IRQn, (uint32_t)&DMA1_Channel1_IRQHandler);
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <ADC1_DMA1CH1_init+0xa8>)
 80007da:	4619      	mov	r1, r3
 80007dc:	200b      	movs	r0, #11
 80007de:	f7ff fedd 	bl	800059c <__NVIC_SetVector>
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);//to do
 80007e2:	2200      	movs	r2, #0
 80007e4:	2105      	movs	r1, #5
 80007e6:	200b      	movs	r0, #11
 80007e8:	f002 fcef 	bl	80031ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007ec:	200b      	movs	r0, #11
 80007ee:	f002 fd08 	bl	8003202 <HAL_NVIC_EnableIRQ>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000
 8000800:	20000868 	.word	0x20000868
 8000804:	40020008 	.word	0x40020008
 8000808:	20000804 	.word	0x20000804
 800080c:	0800073d 	.word	0x0800073d

08000810 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	//to do: inform RTOS task to print out sensor data
	uint16_t val = 1;
 8000818:	2301      	movs	r3, #1
 800081a:	81fb      	strh	r3, [r7, #14]
	osMessageQueuePut(myQueue01Handle, &val, 0, 0);
 800081c:	4b05      	ldr	r3, [pc, #20]	@ (8000834 <HAL_ADC_ConvCpltCallback+0x24>)
 800081e:	6818      	ldr	r0, [r3, #0]
 8000820:	f107 010e 	add.w	r1, r7, #14
 8000824:	2300      	movs	r3, #0
 8000826:	2200      	movs	r2, #0
 8000828:	f006 fe38 	bl	800749c <osMessageQueuePut>
//	for (int i = SAMPLE_BUFFER_SIZE/2; i < SAMPLE_BUFFER_SIZE; ++i){
//			printf("%d ", sample_buffer[i]);
//		}
//	printf("\n");
}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200007b4 	.word	0x200007b4

08000838 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    	//to do: inform RTOS task to print out sensor data
	uint16_t val = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	81fb      	strh	r3, [r7, #14]
	osMessageQueuePut(myQueue01Handle, &val, 0, 0);
 8000844:	4b05      	ldr	r3, [pc, #20]	@ (800085c <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8000846:	6818      	ldr	r0, [r3, #0]
 8000848:	f107 010e 	add.w	r1, r7, #14
 800084c:	2300      	movs	r3, #0
 800084e:	2200      	movs	r2, #0
 8000850:	f006 fe24 	bl	800749c <osMessageQueuePut>
//	for (int i = 0; i < SAMPLE_BUFFER_SIZE/2; ++i){
//		printf("%d ", sample_buffer[i]);
//	}
//	printf("\n");
}
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200007b4 	.word	0x200007b4

08000860 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
    if(htim_base->Instance == TIM1)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a0a      	ldr	r2, [pc, #40]	@ (8000898 <HAL_TIM_Base_MspInit+0x38>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d10b      	bne.n	800088a <HAL_TIM_Base_MspInit+0x2a>
    {
        __HAL_RCC_TIM1_CLK_ENABLE();
 8000872:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <HAL_TIM_Base_MspInit+0x3c>)
 8000874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000876:	4a09      	ldr	r2, [pc, #36]	@ (800089c <HAL_TIM_Base_MspInit+0x3c>)
 8000878:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800087c:	6613      	str	r3, [r2, #96]	@ 0x60
 800087e:	4b07      	ldr	r3, [pc, #28]	@ (800089c <HAL_TIM_Base_MspInit+0x3c>)
 8000880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000882:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
    }
}
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40012c00 	.word	0x40012c00
 800089c:	40021000 	.word	0x40021000

080008a0 <TIM1_Init>:
    }
}


static void TIM1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]

    htim1.Instance = TIM1;
 80008be:	4b1e      	ldr	r3, [pc, #120]	@ (8000938 <TIM1_Init+0x98>)
 80008c0:	4a1e      	ldr	r2, [pc, #120]	@ (800093c <TIM1_Init+0x9c>)
 80008c2:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 4000 - 1;
 80008c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <TIM1_Init+0x98>)
 80008c6:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80008ca:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <TIM1_Init+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 1000 - 1;
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <TIM1_Init+0x98>)
 80008d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008d8:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008da:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <TIM1_Init+0x98>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e0:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <TIM1_Init+0x98>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008e6:	4814      	ldr	r0, [pc, #80]	@ (8000938 <TIM1_Init+0x98>)
 80008e8:	f005 f8a3 	bl	8005a32 <HAL_TIM_Base_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <TIM1_Init+0x56>
    {
        Error_Handler();
 80008f2:	f000 fc2f 	bl	8001154 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008fa:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	@ (8000938 <TIM1_Init+0x98>)
 8000904:	f005 f95c 	bl	8005bc0 <HAL_TIM_ConfigClockSource>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <TIM1_Init+0x72>
    {
        Error_Handler();
 800090e:	f000 fc21 	bl	8001154 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000912:	2320      	movs	r3, #32
 8000914:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	@ (8000938 <TIM1_Init+0x98>)
 8000920:	f005 fb58 	bl	8005fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <TIM1_Init+0x8e>
    {
        Error_Handler();
 800092a:	f000 fc13 	bl	8001154 <Error_Handler>
    }
}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200007b8 	.word	0x200007b8
 800093c:	40012c00 	.word	0x40012c00

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000944:	f000 ffed 	bl	8001922 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000948:	f000 f844 	bl	80009d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094c:	f000 fa0c 	bl	8000d68 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000950:	f000 f8a2 	bl	8000a98 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000954:	f000 f8d8 	bl	8000b08 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000958:	f000 f914 	bl	8000b84 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800095c:	f000 f938 	bl	8000bd0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000960:	f000 f974 	bl	8000c4c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000964:	f000 f9a2 	bl	8000cac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000968:	f000 f9d0 	bl	8000d0c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  TIM1_Init();
 800096c:	f7ff ff98 	bl	80008a0 <TIM1_Init>
  ADC1_DMA1CH1_init();
 8000970:	f7ff fef8 	bl	8000764 <ADC1_DMA1CH1_init>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)sample_buffer, SAMPLE_BUFFER_SIZE);
 8000974:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000978:	490e      	ldr	r1, [pc, #56]	@ (80009b4 <main+0x74>)
 800097a:	480f      	ldr	r0, [pc, #60]	@ (80009b8 <main+0x78>)
 800097c:	f001 fbb6 	bl	80020ec <HAL_ADC_Start_DMA>
   HAL_TIM_Base_Start_IT(&htim1);
 8000980:	480e      	ldr	r0, [pc, #56]	@ (80009bc <main+0x7c>)
 8000982:	f005 f8ad 	bl	8005ae0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000986:	f006 fc39 	bl	80071fc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 800098a:	4a0d      	ldr	r2, [pc, #52]	@ (80009c0 <main+0x80>)
 800098c:	2102      	movs	r1, #2
 800098e:	2010      	movs	r0, #16
 8000990:	f006 fd10 	bl	80073b4 <osMessageQueueNew>
 8000994:	4603      	mov	r3, r0
 8000996:	4a0b      	ldr	r2, [pc, #44]	@ (80009c4 <main+0x84>)
 8000998:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800099a:	4a0b      	ldr	r2, [pc, #44]	@ (80009c8 <main+0x88>)
 800099c:	2100      	movs	r1, #0
 800099e:	480b      	ldr	r0, [pc, #44]	@ (80009cc <main+0x8c>)
 80009a0:	f006 fc76 	bl	8007290 <osThreadNew>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <main+0x90>)
 80009a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009aa:	f006 fc4b 	bl	8007244 <osKernelStart>
//   HAL_TIM_Base_Start_IT(&htim1);
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ae:	bf00      	nop
 80009b0:	e7fd      	b.n	80009ae <main+0x6e>
 80009b2:	bf00      	nop
 80009b4:	200008b0 	.word	0x200008b0
 80009b8:	20000804 	.word	0x20000804
 80009bc:	200007b8 	.word	0x200007b8
 80009c0:	0800af98 	.word	0x0800af98
 80009c4:	200007b4 	.word	0x200007b4
 80009c8:	0800af74 	.word	0x0800af74
 80009cc:	080010cd 	.word	0x080010cd
 80009d0:	200007b0 	.word	0x200007b0

080009d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b096      	sub	sp, #88	@ 0x58
 80009d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	2244      	movs	r2, #68	@ 0x44
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f009 fc47 	bl	800a276 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	463b      	mov	r3, r7
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009fa:	f003 fb89 	bl	8004110 <HAL_PWREx_ControlVoltageScaling>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a04:	f000 fba6 	bl	8001154 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a08:	f003 fb64 	bl	80040d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a0c:	4b21      	ldr	r3, [pc, #132]	@ (8000a94 <SystemClock_Config+0xc0>)
 8000a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000a12:	4a20      	ldr	r2, [pc, #128]	@ (8000a94 <SystemClock_Config+0xc0>)
 8000a14:	f023 0318 	bic.w	r3, r3, #24
 8000a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000a1c:	2314      	movs	r3, #20
 8000a1e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a24:	2301      	movs	r3, #1
 8000a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a2c:	2360      	movs	r3, #96	@ 0x60
 8000a2e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a30:	2302      	movs	r3, #2
 8000a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a34:	2301      	movs	r3, #1
 8000a36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000a3c:	2328      	movs	r3, #40	@ 0x28
 8000a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a40:	2307      	movs	r3, #7
 8000a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4618      	mov	r0, r3
 8000a52:	f003 fc7f 	bl	8004354 <HAL_RCC_OscConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a5c:	f000 fb7a 	bl	8001154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a60:	230f      	movs	r3, #15
 8000a62:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a64:	2303      	movs	r3, #3
 8000a66:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a74:	463b      	mov	r3, r7
 8000a76:	2104      	movs	r1, #4
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f004 f847 	bl	8004b0c <HAL_RCC_ClockConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a84:	f000 fb66 	bl	8001154 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a88:	f004 fd4e 	bl	8005528 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a8c:	bf00      	nop
 8000a8e:	3758      	adds	r7, #88	@ 0x58
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40021000 	.word	0x40021000

08000a98 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	@ (8000b00 <MX_DFSDM1_Init+0x68>)
 8000a9e:	4a19      	ldr	r2, [pc, #100]	@ (8000b04 <MX_DFSDM1_Init+0x6c>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000aa2:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <MX_DFSDM1_Init+0x68>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <MX_DFSDM1_Init+0x68>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000aae:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_DFSDM1_Init+0x68>)
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <MX_DFSDM1_Init+0x68>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_DFSDM1_Init+0x68>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_DFSDM1_Init+0x68>)
 8000ac2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ac6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b00 <MX_DFSDM1_Init+0x68>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000ace:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_DFSDM1_Init+0x68>)
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <MX_DFSDM1_Init+0x68>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_DFSDM1_Init+0x68>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000ae0:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <MX_DFSDM1_Init+0x68>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <MX_DFSDM1_Init+0x68>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000aec:	4804      	ldr	r0, [pc, #16]	@ (8000b00 <MX_DFSDM1_Init+0x68>)
 8000aee:	f002 fba3 	bl	8003238 <HAL_DFSDM_ChannelInit>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000af8:	f000 fb2c 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000088 	.word	0x20000088
 8000b04:	40016020 	.word	0x40016020

08000b08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b80 <MX_I2C2_Init+0x78>)
 8000b10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000b12:	4b1a      	ldr	r3, [pc, #104]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b14:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000b18:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b1a:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b20:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b2c:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b32:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b38:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b44:	480d      	ldr	r0, [pc, #52]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b46:	f003 f860 	bl	8003c0a <HAL_I2C_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b50:	f000 fb00 	bl	8001154 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b54:	2100      	movs	r1, #0
 8000b56:	4809      	ldr	r0, [pc, #36]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b58:	f003 f8f2 	bl	8003d40 <HAL_I2CEx_ConfigAnalogFilter>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000b62:	f000 faf7 	bl	8001154 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b66:	2100      	movs	r1, #0
 8000b68:	4804      	ldr	r0, [pc, #16]	@ (8000b7c <MX_I2C2_Init+0x74>)
 8000b6a:	f003 f934 	bl	8003dd6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000b74:	f000 faee 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200000c0 	.word	0x200000c0
 8000b80:	40005800 	.word	0x40005800

08000b84 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <MX_QUADSPI_Init+0x44>)
 8000b8a:	4a10      	ldr	r2, [pc, #64]	@ (8000bcc <MX_QUADSPI_Init+0x48>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <MX_QUADSPI_Init+0x44>)
 8000b90:	2202      	movs	r2, #2
 8000b92:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <MX_QUADSPI_Init+0x44>)
 8000b96:	2204      	movs	r2, #4
 8000b98:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <MX_QUADSPI_Init+0x44>)
 8000b9c:	2210      	movs	r2, #16
 8000b9e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <MX_QUADSPI_Init+0x44>)
 8000ba2:	2217      	movs	r2, #23
 8000ba4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <MX_QUADSPI_Init+0x44>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <MX_QUADSPI_Init+0x44>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <MX_QUADSPI_Init+0x44>)
 8000bb4:	f003 fb12 	bl	80041dc <HAL_QSPI_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000bbe:	f000 fac9 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000114 	.word	0x20000114
 8000bcc:	a0001000 	.word	0xa0001000

08000bd0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <MX_SPI3_Init+0x74>)
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c48 <MX_SPI3_Init+0x78>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	@ (8000c44 <MX_SPI3_Init+0x74>)
 8000bdc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000be0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000be2:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <MX_SPI3_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000be8:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <MX_SPI3_Init+0x74>)
 8000bea:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000bee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	@ (8000c44 <MX_SPI3_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <MX_SPI3_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <MX_SPI3_Init+0x74>)
 8000bfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c02:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <MX_SPI3_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <MX_SPI3_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <MX_SPI3_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <MX_SPI3_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <MX_SPI3_Init+0x74>)
 8000c1e:	2207      	movs	r2, #7
 8000c20:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <MX_SPI3_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <MX_SPI3_Init+0x74>)
 8000c2a:	2208      	movs	r2, #8
 8000c2c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <MX_SPI3_Init+0x74>)
 8000c30:	f004 fe5c 	bl	80058ec <HAL_SPI_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000c3a:	f000 fa8b 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000158 	.word	0x20000158
 8000c48:	40003c00 	.word	0x40003c00

08000c4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c52:	4a15      	ldr	r2, [pc, #84]	@ (8000ca8 <MX_USART1_UART_Init+0x5c>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c82:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c8e:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <MX_USART1_UART_Init+0x58>)
 8000c90:	f005 fa28 	bl	80060e4 <HAL_UART_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c9a:	f000 fa5b 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200001bc 	.word	0x200001bc
 8000ca8:	40013800 	.word	0x40013800

08000cac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cb0:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cb2:	4a15      	ldr	r2, [pc, #84]	@ (8000d08 <MX_USART3_UART_Init+0x5c>)
 8000cb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cb6:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <MX_USART3_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <MX_USART3_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <MX_USART3_UART_Init+0x58>)
 8000cf0:	f005 f9f8 	bl	80060e4 <HAL_UART_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cfa:	f000 fa2b 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000244 	.word	0x20000244
 8000d08:	40004800 	.word	0x40004800

08000d0c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d10:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d12:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d18:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d1a:	2206      	movs	r2, #6
 8000d1c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d20:	2202      	movs	r2, #2
 8000d22:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d26:	2202      	movs	r2, #2
 8000d28:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	@ (8000d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d42:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000d48:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d4e:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d50:	f003 f88d 	bl	8003e6e <HAL_PCD_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d5a:	f000 f9fb 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200002cc 	.word	0x200002cc

08000d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	@ 0x28
 8000d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d7e:	4bbd      	ldr	r3, [pc, #756]	@ (8001074 <MX_GPIO_Init+0x30c>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	4abc      	ldr	r2, [pc, #752]	@ (8001074 <MX_GPIO_Init+0x30c>)
 8000d84:	f043 0310 	orr.w	r3, r3, #16
 8000d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8a:	4bba      	ldr	r3, [pc, #744]	@ (8001074 <MX_GPIO_Init+0x30c>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	f003 0310 	and.w	r3, r3, #16
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	4bb7      	ldr	r3, [pc, #732]	@ (8001074 <MX_GPIO_Init+0x30c>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	4ab6      	ldr	r2, [pc, #728]	@ (8001074 <MX_GPIO_Init+0x30c>)
 8000d9c:	f043 0304 	orr.w	r3, r3, #4
 8000da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da2:	4bb4      	ldr	r3, [pc, #720]	@ (8001074 <MX_GPIO_Init+0x30c>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	f003 0304 	and.w	r3, r3, #4
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4bb1      	ldr	r3, [pc, #708]	@ (8001074 <MX_GPIO_Init+0x30c>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db2:	4ab0      	ldr	r2, [pc, #704]	@ (8001074 <MX_GPIO_Init+0x30c>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dba:	4bae      	ldr	r3, [pc, #696]	@ (8001074 <MX_GPIO_Init+0x30c>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	4bab      	ldr	r3, [pc, #684]	@ (8001074 <MX_GPIO_Init+0x30c>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	4aaa      	ldr	r2, [pc, #680]	@ (8001074 <MX_GPIO_Init+0x30c>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd2:	4ba8      	ldr	r3, [pc, #672]	@ (8001074 <MX_GPIO_Init+0x30c>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dde:	4ba5      	ldr	r3, [pc, #660]	@ (8001074 <MX_GPIO_Init+0x30c>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de2:	4aa4      	ldr	r2, [pc, #656]	@ (8001074 <MX_GPIO_Init+0x30c>)
 8000de4:	f043 0308 	orr.w	r3, r3, #8
 8000de8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dea:	4ba2      	ldr	r3, [pc, #648]	@ (8001074 <MX_GPIO_Init+0x30c>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dee:	f003 0308 	and.w	r3, r3, #8
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000dfc:	489e      	ldr	r0, [pc, #632]	@ (8001078 <MX_GPIO_Init+0x310>)
 8000dfe:	f002 fec9 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f248 1104 	movw	r1, #33028	@ 0x8104
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e0c:	f002 fec2 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000e10:	2200      	movs	r2, #0
 8000e12:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8000e16:	4899      	ldr	r0, [pc, #612]	@ (800107c <MX_GPIO_Init+0x314>)
 8000e18:	f002 febc 	bl	8003b94 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000e22:	4897      	ldr	r0, [pc, #604]	@ (8001080 <MX_GPIO_Init+0x318>)
 8000e24:	f002 feb6 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e2e:	4894      	ldr	r0, [pc, #592]	@ (8001080 <MX_GPIO_Init+0x318>)
 8000e30:	f002 feb0 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000e3a:	4892      	ldr	r0, [pc, #584]	@ (8001084 <MX_GPIO_Init+0x31c>)
 8000e3c:	f002 feaa 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	2120      	movs	r1, #32
 8000e44:	488d      	ldr	r0, [pc, #564]	@ (800107c <MX_GPIO_Init+0x314>)
 8000e46:	f002 fea5 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	488a      	ldr	r0, [pc, #552]	@ (8001078 <MX_GPIO_Init+0x310>)
 8000e50:	f002 fea0 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e54:	f240 1315 	movw	r3, #277	@ 0x115
 8000e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4882      	ldr	r0, [pc, #520]	@ (8001078 <MX_GPIO_Init+0x310>)
 8000e6e:	f002 fce7 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000e72:	236a      	movs	r3, #106	@ 0x6a
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e76:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	487c      	ldr	r0, [pc, #496]	@ (8001078 <MX_GPIO_Init+0x310>)
 8000e88:	f002 fcda 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000e8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e92:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4878      	ldr	r0, [pc, #480]	@ (8001084 <MX_GPIO_Init+0x31c>)
 8000ea4:	f002 fccc 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000ea8:	233f      	movs	r3, #63	@ 0x3f
 8000eaa:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000eac:	230b      	movs	r3, #11
 8000eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4872      	ldr	r0, [pc, #456]	@ (8001084 <MX_GPIO_Init+0x31c>)
 8000ebc:	f002 fcc0 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ede:	f002 fcaf 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000ee2:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000efe:	f002 fc9f 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000f02:	2308      	movs	r3, #8
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f12:	2301      	movs	r3, #1
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f20:	f002 fc8e 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000f24:	2310      	movs	r3, #16
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f28:	230b      	movs	r3, #11
 8000f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3a:	f002 fc81 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000f3e:	23e0      	movs	r3, #224	@ 0xe0
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f4e:	2305      	movs	r3, #5
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5c:	f002 fc70 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000f60:	2301      	movs	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f64:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4841      	ldr	r0, [pc, #260]	@ (800107c <MX_GPIO_Init+0x314>)
 8000f76:	f002 fc63 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f7e:	230b      	movs	r3, #11
 8000f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	483b      	ldr	r0, [pc, #236]	@ (800107c <MX_GPIO_Init+0x314>)
 8000f8e:	f002 fc57 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f92:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000f96:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4834      	ldr	r0, [pc, #208]	@ (800107c <MX_GPIO_Init+0x314>)
 8000fac:	f002 fc48 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000fb0:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000fb4:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	482e      	ldr	r0, [pc, #184]	@ (8001080 <MX_GPIO_Init+0x318>)
 8000fc8:	f002 fc3a 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000fcc:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4826      	ldr	r0, [pc, #152]	@ (8001080 <MX_GPIO_Init+0x318>)
 8000fe6:	f002 fc2b 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000fea:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4820      	ldr	r0, [pc, #128]	@ (8001084 <MX_GPIO_Init+0x31c>)
 8001004:	f002 fc1c 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001008:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800100c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800100e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	4819      	ldr	r0, [pc, #100]	@ (8001084 <MX_GPIO_Init+0x31c>)
 8001020:	f002 fc0e 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001024:	2302      	movs	r3, #2
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001034:	2305      	movs	r3, #5
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4810      	ldr	r0, [pc, #64]	@ (8001080 <MX_GPIO_Init+0x318>)
 8001040:	f002 fbfe 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001044:	2378      	movs	r3, #120	@ 0x78
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001054:	2307      	movs	r3, #7
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4808      	ldr	r0, [pc, #32]	@ (8001080 <MX_GPIO_Init+0x318>)
 8001060:	f002 fbee 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001064:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800106a:	2312      	movs	r3, #18
 800106c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	e00a      	b.n	8001088 <MX_GPIO_Init+0x320>
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	48001000 	.word	0x48001000
 800107c:	48000400 	.word	0x48000400
 8001080:	48000c00 	.word	0x48000c00
 8001084:	48000800 	.word	0x48000800
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800108e:	2304      	movs	r3, #4
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	480b      	ldr	r0, [pc, #44]	@ (80010c8 <MX_GPIO_Init+0x360>)
 800109a:	f002 fbd1 	bl	8003840 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2105      	movs	r1, #5
 80010a2:	2017      	movs	r0, #23
 80010a4:	f002 f891 	bl	80031ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010a8:	2017      	movs	r0, #23
 80010aa:	f002 f8aa 	bl	8003202 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2105      	movs	r1, #5
 80010b2:	2028      	movs	r0, #40	@ 0x28
 80010b4:	f002 f889 	bl	80031ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010b8:	2028      	movs	r0, #40	@ 0x28
 80010ba:	f002 f8a2 	bl	8003202 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010be:	bf00      	nop
 80010c0:	3728      	adds	r7, #40	@ 0x28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	48000400 	.word	0x48000400

080010cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint16_t adc_val;

		for (;;) {
			if (osMessageQueueGet(myQueue01Handle, &adc_val, NULL, osWaitForever) == osOK) {
 80010d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001148 <StartDefaultTask+0x7c>)
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	f107 010e 	add.w	r1, r7, #14
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2200      	movs	r2, #0
 80010e2:	f006 fa3b 	bl	800755c <osMessageQueueGet>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1f3      	bne.n	80010d4 <StartDefaultTask+0x8>
				if (adc_val == 1){
 80010ec:	89fb      	ldrh	r3, [r7, #14]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d114      	bne.n	800111c <StartDefaultTask+0x50>
//					osMessageQueuePut(myQueue01Handle, &val, 0, 0);
						for (int i = SAMPLE_BUFFER_SIZE/2; i < SAMPLE_BUFFER_SIZE; ++i){
 80010f2:	2380      	movs	r3, #128	@ 0x80
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	e00a      	b.n	800110e <StartDefaultTask+0x42>
								printf("%d ", sample_buffer[i]);
 80010f8:	4a14      	ldr	r2, [pc, #80]	@ (800114c <StartDefaultTask+0x80>)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001100:	4619      	mov	r1, r3
 8001102:	4813      	ldr	r0, [pc, #76]	@ (8001150 <StartDefaultTask+0x84>)
 8001104:	f009 f85a 	bl	800a1bc <iprintf>
						for (int i = SAMPLE_BUFFER_SIZE/2; i < SAMPLE_BUFFER_SIZE; ++i){
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	3301      	adds	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	2bff      	cmp	r3, #255	@ 0xff
 8001112:	ddf1      	ble.n	80010f8 <StartDefaultTask+0x2c>
							}
						printf("\n");
 8001114:	200a      	movs	r0, #10
 8001116:	f009 f863 	bl	800a1e0 <putchar>
 800111a:	e7db      	b.n	80010d4 <StartDefaultTask+0x8>
				}else{
//					osMessageQueuePut(myQueue01Handle, &val, 0, 0);
						for (int i = 0; i < SAMPLE_BUFFER_SIZE/2; ++i){
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	e00a      	b.n	8001138 <StartDefaultTask+0x6c>
								printf("%d ", sample_buffer[i]);
 8001122:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <StartDefaultTask+0x80>)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800112a:	4619      	mov	r1, r3
 800112c:	4808      	ldr	r0, [pc, #32]	@ (8001150 <StartDefaultTask+0x84>)
 800112e:	f009 f845 	bl	800a1bc <iprintf>
						for (int i = 0; i < SAMPLE_BUFFER_SIZE/2; ++i){
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	3301      	adds	r3, #1
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	2b7f      	cmp	r3, #127	@ 0x7f
 800113c:	ddf1      	ble.n	8001122 <StartDefaultTask+0x56>
							}
						printf("\n");
 800113e:	200a      	movs	r0, #10
 8001140:	f009 f84e 	bl	800a1e0 <putchar>
			if (osMessageQueueGet(myQueue01Handle, &adc_val, NULL, osWaitForever) == osOK) {
 8001144:	e7c6      	b.n	80010d4 <StartDefaultTask+0x8>
 8001146:	bf00      	nop
 8001148:	200007b4 	.word	0x200007b4
 800114c:	200008b0 	.word	0x200008b0
 8001150:	0800af58 	.word	0x0800af58

08001154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
}
 800115a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <Error_Handler+0x8>

08001160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <HAL_MspInit+0x4c>)
 8001168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800116a:	4a10      	ldr	r2, [pc, #64]	@ (80011ac <HAL_MspInit+0x4c>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6613      	str	r3, [r2, #96]	@ 0x60
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <HAL_MspInit+0x4c>)
 8001174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <HAL_MspInit+0x4c>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001182:	4a0a      	ldr	r2, [pc, #40]	@ (80011ac <HAL_MspInit+0x4c>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001188:	6593      	str	r3, [r2, #88]	@ 0x58
 800118a:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <HAL_MspInit+0x4c>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	210f      	movs	r1, #15
 800119a:	f06f 0001 	mvn.w	r0, #1
 800119e:	f002 f814 	bl	80031ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000

080011b0 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b0ac      	sub	sp, #176	@ 0xb0
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2288      	movs	r2, #136	@ 0x88
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f009 f850 	bl	800a276 <memset>
  if(DFSDM1_Init == 0)
 80011d6:	4b25      	ldr	r3, [pc, #148]	@ (800126c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d142      	bne.n	8001264 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80011de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 feb0 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80011fa:	f7ff ffab 	bl	8001154 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80011fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001270 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001202:	4a1b      	ldr	r2, [pc, #108]	@ (8001270 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001204:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001208:	6613      	str	r3, [r2, #96]	@ 0x60
 800120a:	4b19      	ldr	r3, [pc, #100]	@ (8001270 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800120c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800120e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001216:	4b16      	ldr	r3, [pc, #88]	@ (8001270 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121a:	4a15      	ldr	r2, [pc, #84]	@ (8001270 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800121c:	f043 0310 	orr.w	r3, r3, #16
 8001220:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001222:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800122e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001232:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001248:	2306      	movs	r3, #6
 800124a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800124e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001252:	4619      	mov	r1, r3
 8001254:	4807      	ldr	r0, [pc, #28]	@ (8001274 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001256:	f002 faf3 	bl	8003840 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800125a:	4b04      	ldr	r3, [pc, #16]	@ (800126c <HAL_DFSDM_ChannelMspInit+0xbc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	3301      	adds	r3, #1
 8001260:	4a02      	ldr	r2, [pc, #8]	@ (800126c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001262:	6013      	str	r3, [r2, #0]
  }

}
 8001264:	bf00      	nop
 8001266:	37b0      	adds	r7, #176	@ 0xb0
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000ab0 	.word	0x20000ab0
 8001270:	40021000 	.word	0x40021000
 8001274:	48001000 	.word	0x48001000

08001278 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b0ac      	sub	sp, #176	@ 0xb0
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2288      	movs	r2, #136	@ 0x88
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f008 ffec 	bl	800a276 <memset>
  if(hi2c->Instance==I2C2)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a21      	ldr	r2, [pc, #132]	@ (8001328 <HAL_I2C_MspInit+0xb0>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d13b      	bne.n	8001320 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80012a8:	2380      	movs	r3, #128	@ 0x80
 80012aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4618      	mov	r0, r3
 80012b6:	f003 fe4d 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012c0:	f7ff ff48 	bl	8001154 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c4:	4b19      	ldr	r3, [pc, #100]	@ (800132c <HAL_I2C_MspInit+0xb4>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c8:	4a18      	ldr	r2, [pc, #96]	@ (800132c <HAL_I2C_MspInit+0xb4>)
 80012ca:	f043 0302 	orr.w	r3, r3, #2
 80012ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d0:	4b16      	ldr	r3, [pc, #88]	@ (800132c <HAL_I2C_MspInit+0xb4>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80012dc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80012e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e4:	2312      	movs	r3, #18
 80012e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012f6:	2304      	movs	r3, #4
 80012f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001300:	4619      	mov	r1, r3
 8001302:	480b      	ldr	r0, [pc, #44]	@ (8001330 <HAL_I2C_MspInit+0xb8>)
 8001304:	f002 fa9c 	bl	8003840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001308:	4b08      	ldr	r3, [pc, #32]	@ (800132c <HAL_I2C_MspInit+0xb4>)
 800130a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130c:	4a07      	ldr	r2, [pc, #28]	@ (800132c <HAL_I2C_MspInit+0xb4>)
 800130e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001312:	6593      	str	r3, [r2, #88]	@ 0x58
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <HAL_I2C_MspInit+0xb4>)
 8001316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001318:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001320:	bf00      	nop
 8001322:	37b0      	adds	r7, #176	@ 0xb0
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40005800 	.word	0x40005800
 800132c:	40021000 	.word	0x40021000
 8001330:	48000400 	.word	0x48000400

08001334 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	@ 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a17      	ldr	r2, [pc, #92]	@ (80013b0 <HAL_QSPI_MspInit+0x7c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d128      	bne.n	80013a8 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001356:	4b17      	ldr	r3, [pc, #92]	@ (80013b4 <HAL_QSPI_MspInit+0x80>)
 8001358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800135a:	4a16      	ldr	r2, [pc, #88]	@ (80013b4 <HAL_QSPI_MspInit+0x80>)
 800135c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001360:	6513      	str	r3, [r2, #80]	@ 0x50
 8001362:	4b14      	ldr	r3, [pc, #80]	@ (80013b4 <HAL_QSPI_MspInit+0x80>)
 8001364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800136e:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <HAL_QSPI_MspInit+0x80>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	4a10      	ldr	r2, [pc, #64]	@ (80013b4 <HAL_QSPI_MspInit+0x80>)
 8001374:	f043 0310 	orr.w	r3, r3, #16
 8001378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <HAL_QSPI_MspInit+0x80>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001386:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800138a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001398:	230a      	movs	r3, #10
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <HAL_QSPI_MspInit+0x84>)
 80013a4:	f002 fa4c 	bl	8003840 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	@ 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	a0001000 	.word	0xa0001000
 80013b4:	40021000 	.word	0x40021000
 80013b8:	48001000 	.word	0x48001000

080013bc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	@ 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a17      	ldr	r2, [pc, #92]	@ (8001438 <HAL_SPI_MspInit+0x7c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d128      	bne.n	8001430 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013de:	4b17      	ldr	r3, [pc, #92]	@ (800143c <HAL_SPI_MspInit+0x80>)
 80013e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e2:	4a16      	ldr	r2, [pc, #88]	@ (800143c <HAL_SPI_MspInit+0x80>)
 80013e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ea:	4b14      	ldr	r3, [pc, #80]	@ (800143c <HAL_SPI_MspInit+0x80>)
 80013ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <HAL_SPI_MspInit+0x80>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	4a10      	ldr	r2, [pc, #64]	@ (800143c <HAL_SPI_MspInit+0x80>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <HAL_SPI_MspInit+0x80>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800140e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001420:	2306      	movs	r3, #6
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	4805      	ldr	r0, [pc, #20]	@ (8001440 <HAL_SPI_MspInit+0x84>)
 800142c:	f002 fa08 	bl	8003840 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001430:	bf00      	nop
 8001432:	3728      	adds	r7, #40	@ 0x28
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40003c00 	.word	0x40003c00
 800143c:	40021000 	.word	0x40021000
 8001440:	48000800 	.word	0x48000800

08001444 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b0ae      	sub	sp, #184	@ 0xb8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	2288      	movs	r2, #136	@ 0x88
 8001462:	2100      	movs	r1, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f008 ff06 	bl	800a276 <memset>
  if(huart->Instance==USART1)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a42      	ldr	r2, [pc, #264]	@ (8001578 <HAL_UART_MspInit+0x134>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d13b      	bne.n	80014ec <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001474:	2301      	movs	r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001478:	2300      	movs	r3, #0
 800147a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fd67 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800148c:	f7ff fe62 	bl	8001154 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001490:	4b3a      	ldr	r3, [pc, #232]	@ (800157c <HAL_UART_MspInit+0x138>)
 8001492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001494:	4a39      	ldr	r2, [pc, #228]	@ (800157c <HAL_UART_MspInit+0x138>)
 8001496:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800149a:	6613      	str	r3, [r2, #96]	@ 0x60
 800149c:	4b37      	ldr	r3, [pc, #220]	@ (800157c <HAL_UART_MspInit+0x138>)
 800149e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a4:	61bb      	str	r3, [r7, #24]
 80014a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a8:	4b34      	ldr	r3, [pc, #208]	@ (800157c <HAL_UART_MspInit+0x138>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ac:	4a33      	ldr	r2, [pc, #204]	@ (800157c <HAL_UART_MspInit+0x138>)
 80014ae:	f043 0302 	orr.w	r3, r3, #2
 80014b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b4:	4b31      	ldr	r3, [pc, #196]	@ (800157c <HAL_UART_MspInit+0x138>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80014c0:	23c0      	movs	r3, #192	@ 0xc0
 80014c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014d8:	2307      	movs	r3, #7
 80014da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014e2:	4619      	mov	r1, r3
 80014e4:	4826      	ldr	r0, [pc, #152]	@ (8001580 <HAL_UART_MspInit+0x13c>)
 80014e6:	f002 f9ab 	bl	8003840 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80014ea:	e040      	b.n	800156e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a24      	ldr	r2, [pc, #144]	@ (8001584 <HAL_UART_MspInit+0x140>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d13b      	bne.n	800156e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014f6:	2304      	movs	r3, #4
 80014f8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4618      	mov	r0, r3
 8001504:	f003 fd26 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800150e:	f7ff fe21 	bl	8001154 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001512:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <HAL_UART_MspInit+0x138>)
 8001514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001516:	4a19      	ldr	r2, [pc, #100]	@ (800157c <HAL_UART_MspInit+0x138>)
 8001518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800151c:	6593      	str	r3, [r2, #88]	@ 0x58
 800151e:	4b17      	ldr	r3, [pc, #92]	@ (800157c <HAL_UART_MspInit+0x138>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800152a:	4b14      	ldr	r3, [pc, #80]	@ (800157c <HAL_UART_MspInit+0x138>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152e:	4a13      	ldr	r2, [pc, #76]	@ (800157c <HAL_UART_MspInit+0x138>)
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <HAL_UART_MspInit+0x138>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001542:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001546:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800155c:	2307      	movs	r3, #7
 800155e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001562:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001566:	4619      	mov	r1, r3
 8001568:	4807      	ldr	r0, [pc, #28]	@ (8001588 <HAL_UART_MspInit+0x144>)
 800156a:	f002 f969 	bl	8003840 <HAL_GPIO_Init>
}
 800156e:	bf00      	nop
 8001570:	37b8      	adds	r7, #184	@ 0xb8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40013800 	.word	0x40013800
 800157c:	40021000 	.word	0x40021000
 8001580:	48000400 	.word	0x48000400
 8001584:	40004800 	.word	0x40004800
 8001588:	48000c00 	.word	0x48000c00

0800158c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b0ac      	sub	sp, #176	@ 0xb0
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2288      	movs	r2, #136	@ 0x88
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f008 fe62 	bl	800a276 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015ba:	d17c      	bne.n	80016b6 <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80015bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80015c2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80015c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80015d2:	2318      	movs	r3, #24
 80015d4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80015d6:	2307      	movs	r3, #7
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80015da:	2302      	movs	r3, #2
 80015dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80015de:	2302      	movs	r3, #2
 80015e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80015e2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80015e6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4618      	mov	r0, r3
 80015ee:	f003 fcb1 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80015f8:	f7ff fdac 	bl	8001154 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	4b30      	ldr	r3, [pc, #192]	@ (80016c0 <HAL_PCD_MspInit+0x134>)
 80015fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001600:	4a2f      	ldr	r2, [pc, #188]	@ (80016c0 <HAL_PCD_MspInit+0x134>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001608:	4b2d      	ldr	r3, [pc, #180]	@ (80016c0 <HAL_PCD_MspInit+0x134>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001614:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001618:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001628:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800162c:	4619      	mov	r1, r3
 800162e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001632:	f002 f905 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001636:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800163a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001650:	230a      	movs	r3, #10
 8001652:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800165a:	4619      	mov	r1, r3
 800165c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001660:	f002 f8ee 	bl	8003840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001664:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <HAL_PCD_MspInit+0x134>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001668:	4a15      	ldr	r2, [pc, #84]	@ (80016c0 <HAL_PCD_MspInit+0x134>)
 800166a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800166e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001670:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <HAL_PCD_MspInit+0x134>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001674:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167c:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <HAL_PCD_MspInit+0x134>)
 800167e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d114      	bne.n	80016b2 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001688:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <HAL_PCD_MspInit+0x134>)
 800168a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168c:	4a0c      	ldr	r2, [pc, #48]	@ (80016c0 <HAL_PCD_MspInit+0x134>)
 800168e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001692:	6593      	str	r3, [r2, #88]	@ 0x58
 8001694:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <HAL_PCD_MspInit+0x134>)
 8001696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80016a0:	f002 fd8c 	bl	80041bc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <HAL_PCD_MspInit+0x134>)
 80016a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a8:	4a05      	ldr	r2, [pc, #20]	@ (80016c0 <HAL_PCD_MspInit+0x134>)
 80016aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016ae:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80016b0:	e001      	b.n	80016b6 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80016b2:	f002 fd83 	bl	80041bc <HAL_PWREx_EnableVddUSB>
}
 80016b6:	bf00      	nop
 80016b8:	37b0      	adds	r7, #176	@ 0xb0
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000

080016c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <NMI_Handler+0x4>

080016cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <HardFault_Handler+0x4>

080016d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <MemManage_Handler+0x4>

080016dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <BusFault_Handler+0x4>

080016e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <UsageFault_Handler+0x4>

080016ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fe:	f000 f965 	bl	80019cc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001702:	f007 fc1d 	bl	8008f40 <xTaskGetSchedulerState>
 8001706:	4603      	mov	r3, r0
 8001708:	2b01      	cmp	r3, #1
 800170a:	d001      	beq.n	8001710 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800170c:	f008 fa14 	bl	8009b38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}

08001714 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001718:	2020      	movs	r0, #32
 800171a:	f002 fa53 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800171e:	2040      	movs	r0, #64	@ 0x40
 8001720:	f002 fa50 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001724:	2080      	movs	r0, #128	@ 0x80
 8001726:	f002 fa4d 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800172a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800172e:	f002 fa49 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}

08001736 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800173a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800173e:	f002 fa41 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001742:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001746:	f002 fa3d 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800174a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800174e:	f002 fa39 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001752:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001756:	f002 fa35 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800175a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800175e:	f002 fa31 	bl	8003bc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}

08001766 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af00      	add	r7, sp, #0
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	e00a      	b.n	800178e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001778:	f3af 8000 	nop.w
 800177c:	4601      	mov	r1, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	60ba      	str	r2, [r7, #8]
 8001784:	b2ca      	uxtb	r2, r1
 8001786:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3301      	adds	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	429a      	cmp	r2, r3
 8001794:	dbf0      	blt.n	8001778 <_read+0x12>
  }

  return len;
 8001796:	687b      	ldr	r3, [r7, #4]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	e009      	b.n	80017c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	60ba      	str	r2, [r7, #8]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe ff0a 	bl	80005d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3301      	adds	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	dbf1      	blt.n	80017b2 <_write+0x12>
  }
  return len;
 80017ce:	687b      	ldr	r3, [r7, #4]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <_close>:

int _close(int file)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001800:	605a      	str	r2, [r3, #4]
  return 0;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_isatty>:

int _isatty(int file)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001818:	2301      	movs	r3, #1
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	@ (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	@ (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001870:	f008 fd50 	bl	800a314 <__errno>
 8001874:	4603      	mov	r3, r0
 8001876:	220c      	movs	r2, #12
 8001878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	e009      	b.n	8001894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001880:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001886:	4b07      	ldr	r3, [pc, #28]	@ (80018a4 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <_sbrk+0x64>)
 8001890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20018000 	.word	0x20018000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	20000ab4 	.word	0x20000ab4
 80018a8:	20002538 	.word	0x20002538

080018ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <SystemInit+0x20>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018b6:	4a05      	ldr	r2, [pc, #20]	@ (80018cc <SystemInit+0x20>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001908 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018d4:	f7ff ffea 	bl	80018ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d8:	480c      	ldr	r0, [pc, #48]	@ (800190c <LoopForever+0x6>)
  ldr r1, =_edata
 80018da:	490d      	ldr	r1, [pc, #52]	@ (8001910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001914 <LoopForever+0xe>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e0:	e002      	b.n	80018e8 <LoopCopyDataInit>

080018e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e6:	3304      	adds	r3, #4

080018e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ec:	d3f9      	bcc.n	80018e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018f0:	4c0a      	ldr	r4, [pc, #40]	@ (800191c <LoopForever+0x16>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f4:	e001      	b.n	80018fa <LoopFillZerobss>

080018f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f8:	3204      	adds	r2, #4

080018fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018fc:	d3fb      	bcc.n	80018f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018fe:	f008 fd0f 	bl	800a320 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001902:	f7ff f81d 	bl	8000940 <main>

08001906 <LoopForever>:

LoopForever:
    b LoopForever
 8001906:	e7fe      	b.n	8001906 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001908:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001910:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001914:	0800b03c 	.word	0x0800b03c
  ldr r2, =_sbss
 8001918:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800191c:	20002534 	.word	0x20002534

08001920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001920:	e7fe      	b.n	8001920 <ADC1_2_IRQHandler>

08001922 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800192c:	2003      	movs	r0, #3
 800192e:	f001 fc41 	bl	80031b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001932:	200f      	movs	r0, #15
 8001934:	f000 f80e 	bl	8001954 <HAL_InitTick>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	71fb      	strb	r3, [r7, #7]
 8001942:	e001      	b.n	8001948 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001944:	f7ff fc0c 	bl	8001160 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001948:	79fb      	ldrb	r3, [r7, #7]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001960:	4b17      	ldr	r3, [pc, #92]	@ (80019c0 <HAL_InitTick+0x6c>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d023      	beq.n	80019b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001968:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <HAL_InitTick+0x70>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b14      	ldr	r3, [pc, #80]	@ (80019c0 <HAL_InitTick+0x6c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001976:	fbb3 f3f1 	udiv	r3, r3, r1
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f001 fc4d 	bl	800321e <HAL_SYSTICK_Config>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10f      	bne.n	80019aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b0f      	cmp	r3, #15
 800198e:	d809      	bhi.n	80019a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001990:	2200      	movs	r2, #0
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f001 fc17 	bl	80031ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800199c:	4a0a      	ldr	r2, [pc, #40]	@ (80019c8 <HAL_InitTick+0x74>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	e007      	b.n	80019b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
 80019a8:	e004      	b.n	80019b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	73fb      	strb	r3, [r7, #15]
 80019ae:	e001      	b.n	80019b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000008 	.word	0x20000008
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_IncTick+0x20>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_IncTick+0x24>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <HAL_IncTick+0x24>)
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008
 80019f0:	20000ab8 	.word	0x20000ab8

080019f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return uwTick;
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <HAL_GetTick+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000ab8 	.word	0x20000ab8

08001a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a14:	f7ff ffee 	bl	80019f4 <HAL_GetTick>
 8001a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a24:	d005      	beq.n	8001a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a26:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <HAL_Delay+0x44>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a32:	bf00      	nop
 8001a34:	f7ff ffde 	bl	80019f4 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d8f7      	bhi.n	8001a34 <HAL_Delay+0x28>
  {
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000008 	.word	0x20000008

08001a54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	609a      	str	r2, [r3, #8]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b087      	sub	sp, #28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
 8001ac8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3360      	adds	r3, #96	@ 0x60
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b08      	ldr	r3, [pc, #32]	@ (8001b00 <LL_ADC_SetOffset+0x44>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	4313      	orrs	r3, r2
 8001aec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001af4:	bf00      	nop
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	03fff000 	.word	0x03fff000

08001b04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3360      	adds	r3, #96	@ 0x60
 8001b12:	461a      	mov	r2, r3
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	3360      	adds	r3, #96	@ 0x60
 8001b40:	461a      	mov	r2, r3
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	431a      	orrs	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b5a:	bf00      	nop
 8001b5c:	371c      	adds	r7, #28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3330      	adds	r3, #48	@ 0x30
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	f003 030c 	and.w	r3, r3, #12
 8001ba8:	4413      	add	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f003 031f 	and.w	r3, r3, #31
 8001bb6:	211f      	movs	r1, #31
 8001bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	0e9b      	lsrs	r3, r3, #26
 8001bc4:	f003 011f 	and.w	r1, r3, #31
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bd8:	bf00      	nop
 8001bda:	371c      	adds	r7, #28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3314      	adds	r3, #20
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	0e5b      	lsrs	r3, r3, #25
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	4413      	add	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	0d1b      	lsrs	r3, r3, #20
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	2107      	movs	r1, #7
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	401a      	ands	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	0d1b      	lsrs	r3, r3, #20
 8001c1e:	f003 031f 	and.w	r3, r3, #31
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	fa01 f303 	lsl.w	r3, r1, r3
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c2e:	bf00      	nop
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c54:	43db      	mvns	r3, r3
 8001c56:	401a      	ands	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0318 	and.w	r3, r3, #24
 8001c5e:	4908      	ldr	r1, [pc, #32]	@ (8001c80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c60:	40d9      	lsrs	r1, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	400b      	ands	r3, r1
 8001c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	0007ffff 	.word	0x0007ffff

08001c84 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 031f 	and.w	r3, r3, #31
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001cb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6093      	str	r3, [r2, #8]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001cd8:	d101      	bne.n	8001cde <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001cfc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d28:	d101      	bne.n	8001d2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d50:	f043 0201 	orr.w	r2, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d78:	f043 0202 	orr.w	r2, r3, #2
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <LL_ADC_IsEnabled+0x18>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <LL_ADC_IsEnabled+0x1a>
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d101      	bne.n	8001dca <LL_ADC_IsDisableOngoing+0x18>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <LL_ADC_IsDisableOngoing+0x1a>
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001de8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dec:	f043 0204 	orr.w	r2, r3, #4
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d101      	bne.n	8001e18 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d101      	bne.n	8001e3e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b089      	sub	sp, #36	@ 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e130      	b.n	80020c8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d109      	bne.n	8001e88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7fe fbbf 	bl	80005f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff19 	bl	8001cc4 <LL_ADC_IsDeepPowerDownEnabled>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d004      	beq.n	8001ea2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff feff 	bl	8001ca0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ff34 	bl	8001d14 <LL_ADC_IsInternalRegulatorEnabled>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d115      	bne.n	8001ede <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ff18 	bl	8001cec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ebc:	4b84      	ldr	r3, [pc, #528]	@ (80020d0 <HAL_ADC_Init+0x284>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	099b      	lsrs	r3, r3, #6
 8001ec2:	4a84      	ldr	r2, [pc, #528]	@ (80020d4 <HAL_ADC_Init+0x288>)
 8001ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec8:	099b      	lsrs	r3, r3, #6
 8001eca:	3301      	adds	r3, #1
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ed0:	e002      	b.n	8001ed8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f9      	bne.n	8001ed2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ff16 	bl	8001d14 <LL_ADC_IsInternalRegulatorEnabled>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10d      	bne.n	8001f0a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef2:	f043 0210 	orr.w	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efe:	f043 0201 	orr.w	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff76 	bl	8001e00 <LL_ADC_REG_IsConversionOngoing>
 8001f14:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f040 80c9 	bne.w	80020b6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 80c5 	bne.w	80020b6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f30:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f34:	f043 0202 	orr.w	r2, r3, #2
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff23 	bl	8001d8c <LL_ADC_IsEnabled>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d115      	bne.n	8001f78 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f4c:	4862      	ldr	r0, [pc, #392]	@ (80020d8 <HAL_ADC_Init+0x28c>)
 8001f4e:	f7ff ff1d 	bl	8001d8c <LL_ADC_IsEnabled>
 8001f52:	4604      	mov	r4, r0
 8001f54:	4861      	ldr	r0, [pc, #388]	@ (80020dc <HAL_ADC_Init+0x290>)
 8001f56:	f7ff ff19 	bl	8001d8c <LL_ADC_IsEnabled>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	431c      	orrs	r4, r3
 8001f5e:	4860      	ldr	r0, [pc, #384]	@ (80020e0 <HAL_ADC_Init+0x294>)
 8001f60:	f7ff ff14 	bl	8001d8c <LL_ADC_IsEnabled>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4323      	orrs	r3, r4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d105      	bne.n	8001f78 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4619      	mov	r1, r3
 8001f72:	485c      	ldr	r0, [pc, #368]	@ (80020e4 <HAL_ADC_Init+0x298>)
 8001f74:	f7ff fd6e 	bl	8001a54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7e5b      	ldrb	r3, [r3, #25]
 8001f7c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f82:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f88:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f8e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f96:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d106      	bne.n	8001fb4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001faa:	3b01      	subs	r3, #1
 8001fac:	045b      	lsls	r3, r3, #17
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d009      	beq.n	8001fd0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	4b44      	ldr	r3, [pc, #272]	@ (80020e8 <HAL_ADC_Init+0x29c>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6812      	ldr	r2, [r2, #0]
 8001fde:	69b9      	ldr	r1, [r7, #24]
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff1c 	bl	8001e26 <LL_ADC_INJ_IsConversionOngoing>
 8001fee:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d13d      	bne.n	8002072 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d13a      	bne.n	8002072 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002000:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002008:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002018:	f023 0302 	bic.w	r3, r3, #2
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	69b9      	ldr	r1, [r7, #24]
 8002022:	430b      	orrs	r3, r1
 8002024:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800202c:	2b01      	cmp	r3, #1
 800202e:	d118      	bne.n	8002062 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800203a:	f023 0304 	bic.w	r3, r3, #4
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002046:	4311      	orrs	r1, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800204c:	4311      	orrs	r1, r2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002052:	430a      	orrs	r2, r1
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	611a      	str	r2, [r3, #16]
 8002060:	e007      	b.n	8002072 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0201 	bic.w	r2, r2, #1
 8002070:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d10c      	bne.n	8002094 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002080:	f023 010f 	bic.w	r1, r3, #15
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	1e5a      	subs	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	631a      	str	r2, [r3, #48]	@ 0x30
 8002092:	e007      	b.n	80020a4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 020f 	bic.w	r2, r2, #15
 80020a2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a8:	f023 0303 	bic.w	r3, r3, #3
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80020b4:	e007      	b.n	80020c6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ba:	f043 0210 	orr.w	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3724      	adds	r7, #36	@ 0x24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd90      	pop	{r4, r7, pc}
 80020d0:	20000000 	.word	0x20000000
 80020d4:	053e2d63 	.word	0x053e2d63
 80020d8:	50040000 	.word	0x50040000
 80020dc:	50040100 	.word	0x50040100
 80020e0:	50040200 	.word	0x50040200
 80020e4:	50040300 	.word	0x50040300
 80020e8:	fff0c007 	.word	0xfff0c007

080020ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020f8:	4853      	ldr	r0, [pc, #332]	@ (8002248 <HAL_ADC_Start_DMA+0x15c>)
 80020fa:	f7ff fdc3 	bl	8001c84 <LL_ADC_GetMultimode>
 80020fe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fe7b 	bl	8001e00 <LL_ADC_REG_IsConversionOngoing>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	f040 8093 	bne.w	8002238 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_ADC_Start_DMA+0x34>
 800211c:	2302      	movs	r3, #2
 800211e:	e08e      	b.n	800223e <HAL_ADC_Start_DMA+0x152>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a47      	ldr	r2, [pc, #284]	@ (800224c <HAL_ADC_Start_DMA+0x160>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d008      	beq.n	8002144 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	2b05      	cmp	r3, #5
 800213c:	d002      	beq.n	8002144 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b09      	cmp	r3, #9
 8002142:	d172      	bne.n	800222a <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 fc89 	bl	8002a5c <ADC_Enable>
 800214a:	4603      	mov	r3, r0
 800214c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800214e:	7dfb      	ldrb	r3, [r7, #23]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d165      	bne.n	8002220 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002158:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800215c:	f023 0301 	bic.w	r3, r3, #1
 8002160:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a38      	ldr	r2, [pc, #224]	@ (8002250 <HAL_ADC_Start_DMA+0x164>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d002      	beq.n	8002178 <HAL_ADC_Start_DMA+0x8c>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	e000      	b.n	800217a <HAL_ADC_Start_DMA+0x8e>
 8002178:	4b36      	ldr	r3, [pc, #216]	@ (8002254 <HAL_ADC_Start_DMA+0x168>)
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	4293      	cmp	r3, r2
 8002180:	d002      	beq.n	8002188 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d105      	bne.n	8002194 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002198:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d006      	beq.n	80021ae <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a4:	f023 0206 	bic.w	r2, r3, #6
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80021ac:	e002      	b.n	80021b4 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b8:	4a27      	ldr	r2, [pc, #156]	@ (8002258 <HAL_ADC_Start_DMA+0x16c>)
 80021ba:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c0:	4a26      	ldr	r2, [pc, #152]	@ (800225c <HAL_ADC_Start_DMA+0x170>)
 80021c2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c8:	4a25      	ldr	r2, [pc, #148]	@ (8002260 <HAL_ADC_Start_DMA+0x174>)
 80021ca:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	221c      	movs	r2, #28
 80021d2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0210 	orr.w	r2, r2, #16
 80021ea:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	3340      	adds	r3, #64	@ 0x40
 8002206:	4619      	mov	r1, r3
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f001 f9d8 	bl	80035c0 <HAL_DMA_Start_IT>
 8002210:	4603      	mov	r3, r0
 8002212:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fddd 	bl	8001dd8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800221e:	e00d      	b.n	800223c <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002228:	e008      	b.n	800223c <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002236:	e001      	b.n	800223c <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002238:	2302      	movs	r3, #2
 800223a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800223c:	7dfb      	ldrb	r3, [r7, #23]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	50040300 	.word	0x50040300
 800224c:	50040200 	.word	0x50040200
 8002250:	50040100 	.word	0x50040100
 8002254:	50040000 	.word	0x50040000
 8002258:	08002c27 	.word	0x08002c27
 800225c:	08002cff 	.word	0x08002cff
 8002260:	08002d1b 	.word	0x08002d1b

08002264 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b0b6      	sub	sp, #216	@ 0xd8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002288:	2300      	movs	r3, #0
 800228a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_ADC_ConfigChannel+0x22>
 8002296:	2302      	movs	r3, #2
 8002298:	e3c9      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x7b6>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fdaa 	bl	8001e00 <LL_ADC_REG_IsConversionOngoing>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 83aa 	bne.w	8002a08 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b05      	cmp	r3, #5
 80022c2:	d824      	bhi.n	800230e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	3b02      	subs	r3, #2
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d81b      	bhi.n	8002306 <HAL_ADC_ConfigChannel+0x8e>
 80022ce:	a201      	add	r2, pc, #4	@ (adr r2, 80022d4 <HAL_ADC_ConfigChannel+0x5c>)
 80022d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d4:	080022e5 	.word	0x080022e5
 80022d8:	080022ed 	.word	0x080022ed
 80022dc:	080022f5 	.word	0x080022f5
 80022e0:	080022fd 	.word	0x080022fd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80022e4:	230c      	movs	r3, #12
 80022e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022ea:	e010      	b.n	800230e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80022ec:	2312      	movs	r3, #18
 80022ee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022f2:	e00c      	b.n	800230e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80022f4:	2318      	movs	r3, #24
 80022f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80022fa:	e008      	b.n	800230e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80022fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002300:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002304:	e003      	b.n	800230e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002306:	2306      	movs	r3, #6
 8002308:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800230c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800231c:	f7ff fc36 	bl	8001b8c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fd6b 	bl	8001e00 <LL_ADC_REG_IsConversionOngoing>
 800232a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fd77 	bl	8001e26 <LL_ADC_INJ_IsConversionOngoing>
 8002338:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800233c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002340:	2b00      	cmp	r3, #0
 8002342:	f040 81a4 	bne.w	800268e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002346:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 819f 	bne.w	800268e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	6819      	ldr	r1, [r3, #0]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	461a      	mov	r2, r3
 800235e:	f7ff fc41 	bl	8001be4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	08db      	lsrs	r3, r3, #3
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	2b04      	cmp	r3, #4
 8002382:	d00a      	beq.n	800239a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	6919      	ldr	r1, [r3, #16]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002394:	f7ff fb92 	bl	8001abc <LL_ADC_SetOffset>
 8002398:	e179      	b.n	800268e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fbaf 	bl	8001b04 <LL_ADC_GetOffsetChannel>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10a      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x14e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fba4 	bl	8001b04 <LL_ADC_GetOffsetChannel>
 80023bc:	4603      	mov	r3, r0
 80023be:	0e9b      	lsrs	r3, r3, #26
 80023c0:	f003 021f 	and.w	r2, r3, #31
 80023c4:	e01e      	b.n	8002404 <HAL_ADC_ConfigChannel+0x18c>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2100      	movs	r1, #0
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fb99 	bl	8001b04 <LL_ADC_GetOffsetChannel>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80023f4:	2320      	movs	r3, #32
 80023f6:	e004      	b.n	8002402 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80023f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023fc:	fab3 f383 	clz	r3, r3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240c:	2b00      	cmp	r3, #0
 800240e:	d105      	bne.n	800241c <HAL_ADC_ConfigChannel+0x1a4>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	0e9b      	lsrs	r3, r3, #26
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	e018      	b.n	800244e <HAL_ADC_ConfigChannel+0x1d6>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002430:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002434:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002438:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002440:	2320      	movs	r3, #32
 8002442:	e004      	b.n	800244e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002444:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800244e:	429a      	cmp	r2, r3
 8002450:	d106      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2200      	movs	r2, #0
 8002458:	2100      	movs	r1, #0
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fb68 	bl	8001b30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2101      	movs	r1, #1
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fb4c 	bl	8001b04 <LL_ADC_GetOffsetChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10a      	bne.n	800248c <HAL_ADC_ConfigChannel+0x214>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2101      	movs	r1, #1
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fb41 	bl	8001b04 <LL_ADC_GetOffsetChannel>
 8002482:	4603      	mov	r3, r0
 8002484:	0e9b      	lsrs	r3, r3, #26
 8002486:	f003 021f 	and.w	r2, r3, #31
 800248a:	e01e      	b.n	80024ca <HAL_ADC_ConfigChannel+0x252>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2101      	movs	r1, #1
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fb36 	bl	8001b04 <LL_ADC_GetOffsetChannel>
 8002498:	4603      	mov	r3, r0
 800249a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80024aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80024b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80024ba:	2320      	movs	r3, #32
 80024bc:	e004      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80024be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d105      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x26a>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	0e9b      	lsrs	r3, r3, #26
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	e018      	b.n	8002514 <HAL_ADC_ConfigChannel+0x29c>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80024f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80024fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002506:	2320      	movs	r3, #32
 8002508:	e004      	b.n	8002514 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800250a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002514:	429a      	cmp	r2, r3
 8002516:	d106      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2200      	movs	r2, #0
 800251e:	2101      	movs	r1, #1
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fb05 	bl	8001b30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2102      	movs	r1, #2
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fae9 	bl	8001b04 <LL_ADC_GetOffsetChannel>
 8002532:	4603      	mov	r3, r0
 8002534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x2da>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2102      	movs	r1, #2
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fade 	bl	8001b04 <LL_ADC_GetOffsetChannel>
 8002548:	4603      	mov	r3, r0
 800254a:	0e9b      	lsrs	r3, r3, #26
 800254c:	f003 021f 	and.w	r2, r3, #31
 8002550:	e01e      	b.n	8002590 <HAL_ADC_ConfigChannel+0x318>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2102      	movs	r1, #2
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fad3 	bl	8001b04 <LL_ADC_GetOffsetChannel>
 800255e:	4603      	mov	r3, r0
 8002560:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002568:	fa93 f3a3 	rbit	r3, r3
 800256c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002570:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002574:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002578:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002580:	2320      	movs	r3, #32
 8002582:	e004      	b.n	800258e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002584:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002588:	fab3 f383 	clz	r3, r3
 800258c:	b2db      	uxtb	r3, r3
 800258e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002598:	2b00      	cmp	r3, #0
 800259a:	d105      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x330>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0e9b      	lsrs	r3, r3, #26
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	e014      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x35a>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80025b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80025bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80025c4:	2320      	movs	r3, #32
 80025c6:	e004      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80025c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025cc:	fab3 f383 	clz	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d106      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2200      	movs	r2, #0
 80025dc:	2102      	movs	r1, #2
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff faa6 	bl	8001b30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2103      	movs	r1, #3
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fa8a 	bl	8001b04 <LL_ADC_GetOffsetChannel>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10a      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x398>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2103      	movs	r1, #3
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fa7f 	bl	8001b04 <LL_ADC_GetOffsetChannel>
 8002606:	4603      	mov	r3, r0
 8002608:	0e9b      	lsrs	r3, r3, #26
 800260a:	f003 021f 	and.w	r2, r3, #31
 800260e:	e017      	b.n	8002640 <HAL_ADC_ConfigChannel+0x3c8>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2103      	movs	r1, #3
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fa74 	bl	8001b04 <LL_ADC_GetOffsetChannel>
 800261c:	4603      	mov	r3, r0
 800261e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800262a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800262c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002632:	2320      	movs	r3, #32
 8002634:	e003      	b.n	800263e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002636:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002638:	fab3 f383 	clz	r3, r3
 800263c:	b2db      	uxtb	r3, r3
 800263e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002648:	2b00      	cmp	r3, #0
 800264a:	d105      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x3e0>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	0e9b      	lsrs	r3, r3, #26
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	e011      	b.n	800267c <HAL_ADC_ConfigChannel+0x404>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002666:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002668:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800266a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002670:	2320      	movs	r3, #32
 8002672:	e003      	b.n	800267c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002674:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800267c:	429a      	cmp	r2, r3
 800267e:	d106      	bne.n	800268e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2200      	movs	r2, #0
 8002686:	2103      	movs	r1, #3
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fa51 	bl	8001b30 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fb7a 	bl	8001d8c <LL_ADC_IsEnabled>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	f040 8140 	bne.w	8002920 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	6819      	ldr	r1, [r3, #0]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	461a      	mov	r2, r3
 80026ae:	f7ff fac5 	bl	8001c3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	4a8f      	ldr	r2, [pc, #572]	@ (80028f4 <HAL_ADC_ConfigChannel+0x67c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	f040 8131 	bne.w	8002920 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10b      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x46e>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	0e9b      	lsrs	r3, r3, #26
 80026d4:	3301      	adds	r3, #1
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	2b09      	cmp	r3, #9
 80026dc:	bf94      	ite	ls
 80026de:	2301      	movls	r3, #1
 80026e0:	2300      	movhi	r3, #0
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	e019      	b.n	800271a <HAL_ADC_ConfigChannel+0x4a2>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026ee:	fa93 f3a3 	rbit	r3, r3
 80026f2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80026f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80026f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80026fe:	2320      	movs	r3, #32
 8002700:	e003      	b.n	800270a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002702:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002704:	fab3 f383 	clz	r3, r3
 8002708:	b2db      	uxtb	r3, r3
 800270a:	3301      	adds	r3, #1
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	2b09      	cmp	r3, #9
 8002712:	bf94      	ite	ls
 8002714:	2301      	movls	r3, #1
 8002716:	2300      	movhi	r3, #0
 8002718:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271a:	2b00      	cmp	r3, #0
 800271c:	d079      	beq.n	8002812 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002726:	2b00      	cmp	r3, #0
 8002728:	d107      	bne.n	800273a <HAL_ADC_ConfigChannel+0x4c2>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0e9b      	lsrs	r3, r3, #26
 8002730:	3301      	adds	r3, #1
 8002732:	069b      	lsls	r3, r3, #26
 8002734:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002738:	e015      	b.n	8002766 <HAL_ADC_ConfigChannel+0x4ee>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002748:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800274a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800274c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002752:	2320      	movs	r3, #32
 8002754:	e003      	b.n	800275e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002758:	fab3 f383 	clz	r3, r3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	3301      	adds	r3, #1
 8002760:	069b      	lsls	r3, r3, #26
 8002762:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x50e>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	0e9b      	lsrs	r3, r3, #26
 8002778:	3301      	adds	r3, #1
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	2101      	movs	r1, #1
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	e017      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x53e>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002796:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800279e:	2320      	movs	r3, #32
 80027a0:	e003      	b.n	80027aa <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80027a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	3301      	adds	r3, #1
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	2101      	movs	r1, #1
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	ea42 0103 	orr.w	r1, r2, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10a      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x564>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	0e9b      	lsrs	r3, r3, #26
 80027cc:	3301      	adds	r3, #1
 80027ce:	f003 021f 	and.w	r2, r3, #31
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	051b      	lsls	r3, r3, #20
 80027da:	e018      	b.n	800280e <HAL_ADC_ConfigChannel+0x596>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80027ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80027ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80027f4:	2320      	movs	r3, #32
 80027f6:	e003      	b.n	8002800 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80027f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027fa:	fab3 f383 	clz	r3, r3
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	3301      	adds	r3, #1
 8002802:	f003 021f 	and.w	r2, r3, #31
 8002806:	4613      	mov	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800280e:	430b      	orrs	r3, r1
 8002810:	e081      	b.n	8002916 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281a:	2b00      	cmp	r3, #0
 800281c:	d107      	bne.n	800282e <HAL_ADC_ConfigChannel+0x5b6>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	0e9b      	lsrs	r3, r3, #26
 8002824:	3301      	adds	r3, #1
 8002826:	069b      	lsls	r3, r3, #26
 8002828:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800282c:	e015      	b.n	800285a <HAL_ADC_ConfigChannel+0x5e2>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002846:	2320      	movs	r3, #32
 8002848:	e003      	b.n	8002852 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800284a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800284c:	fab3 f383 	clz	r3, r3
 8002850:	b2db      	uxtb	r3, r3
 8002852:	3301      	adds	r3, #1
 8002854:	069b      	lsls	r3, r3, #26
 8002856:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002862:	2b00      	cmp	r3, #0
 8002864:	d109      	bne.n	800287a <HAL_ADC_ConfigChannel+0x602>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	0e9b      	lsrs	r3, r3, #26
 800286c:	3301      	adds	r3, #1
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	2101      	movs	r1, #1
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	e017      	b.n	80028aa <HAL_ADC_ConfigChannel+0x632>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	61bb      	str	r3, [r7, #24]
  return result;
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002892:	2320      	movs	r3, #32
 8002894:	e003      	b.n	800289e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	fab3 f383 	clz	r3, r3
 800289c:	b2db      	uxtb	r3, r3
 800289e:	3301      	adds	r3, #1
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	2101      	movs	r1, #1
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	ea42 0103 	orr.w	r1, r2, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10d      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x65e>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	0e9b      	lsrs	r3, r3, #26
 80028c0:	3301      	adds	r3, #1
 80028c2:	f003 021f 	and.w	r2, r3, #31
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	3b1e      	subs	r3, #30
 80028ce:	051b      	lsls	r3, r3, #20
 80028d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028d4:	e01e      	b.n	8002914 <HAL_ADC_ConfigChannel+0x69c>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	fa93 f3a3 	rbit	r3, r3
 80028e2:	60fb      	str	r3, [r7, #12]
  return result;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d104      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80028ee:	2320      	movs	r3, #32
 80028f0:	e006      	b.n	8002900 <HAL_ADC_ConfigChannel+0x688>
 80028f2:	bf00      	nop
 80028f4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	fab3 f383 	clz	r3, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	3301      	adds	r3, #1
 8002902:	f003 021f 	and.w	r2, r3, #31
 8002906:	4613      	mov	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4413      	add	r3, r2
 800290c:	3b1e      	subs	r3, #30
 800290e:	051b      	lsls	r3, r3, #20
 8002910:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002914:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800291a:	4619      	mov	r1, r3
 800291c:	f7ff f962 	bl	8001be4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b44      	ldr	r3, [pc, #272]	@ (8002a38 <HAL_ADC_ConfigChannel+0x7c0>)
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d07a      	beq.n	8002a22 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800292c:	4843      	ldr	r0, [pc, #268]	@ (8002a3c <HAL_ADC_ConfigChannel+0x7c4>)
 800292e:	f7ff f8b7 	bl	8001aa0 <LL_ADC_GetCommonPathInternalCh>
 8002932:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a41      	ldr	r2, [pc, #260]	@ (8002a40 <HAL_ADC_ConfigChannel+0x7c8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d12c      	bne.n	800299a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002940:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002944:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d126      	bne.n	800299a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a3c      	ldr	r2, [pc, #240]	@ (8002a44 <HAL_ADC_ConfigChannel+0x7cc>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_ADC_ConfigChannel+0x6e8>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a3b      	ldr	r2, [pc, #236]	@ (8002a48 <HAL_ADC_ConfigChannel+0x7d0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d15d      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002960:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002964:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002968:	4619      	mov	r1, r3
 800296a:	4834      	ldr	r0, [pc, #208]	@ (8002a3c <HAL_ADC_ConfigChannel+0x7c4>)
 800296c:	f7ff f885 	bl	8001a7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002970:	4b36      	ldr	r3, [pc, #216]	@ (8002a4c <HAL_ADC_ConfigChannel+0x7d4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	099b      	lsrs	r3, r3, #6
 8002976:	4a36      	ldr	r2, [pc, #216]	@ (8002a50 <HAL_ADC_ConfigChannel+0x7d8>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	099b      	lsrs	r3, r3, #6
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	4613      	mov	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800298a:	e002      	b.n	8002992 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	3b01      	subs	r3, #1
 8002990:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f9      	bne.n	800298c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002998:	e040      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a2d      	ldr	r2, [pc, #180]	@ (8002a54 <HAL_ADC_ConfigChannel+0x7dc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d118      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d112      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a23      	ldr	r2, [pc, #140]	@ (8002a44 <HAL_ADC_ConfigChannel+0x7cc>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d004      	beq.n	80029c4 <HAL_ADC_ConfigChannel+0x74c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a22      	ldr	r2, [pc, #136]	@ (8002a48 <HAL_ADC_ConfigChannel+0x7d0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d12d      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029cc:	4619      	mov	r1, r3
 80029ce:	481b      	ldr	r0, [pc, #108]	@ (8002a3c <HAL_ADC_ConfigChannel+0x7c4>)
 80029d0:	f7ff f853 	bl	8001a7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029d4:	e024      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1f      	ldr	r2, [pc, #124]	@ (8002a58 <HAL_ADC_ConfigChannel+0x7e0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d120      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d11a      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a14      	ldr	r2, [pc, #80]	@ (8002a44 <HAL_ADC_ConfigChannel+0x7cc>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d115      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029fe:	4619      	mov	r1, r3
 8002a00:	480e      	ldr	r0, [pc, #56]	@ (8002a3c <HAL_ADC_ConfigChannel+0x7c4>)
 8002a02:	f7ff f83a 	bl	8001a7a <LL_ADC_SetCommonPathInternalCh>
 8002a06:	e00c      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0c:	f043 0220 	orr.w	r2, r3, #32
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002a1a:	e002      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a1c:	bf00      	nop
 8002a1e:	e000      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a20:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a2a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	37d8      	adds	r7, #216	@ 0xd8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	80080000 	.word	0x80080000
 8002a3c:	50040300 	.word	0x50040300
 8002a40:	c7520000 	.word	0xc7520000
 8002a44:	50040000 	.word	0x50040000
 8002a48:	50040200 	.word	0x50040200
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	053e2d63 	.word	0x053e2d63
 8002a54:	cb840000 	.word	0xcb840000
 8002a58:	80000001 	.word	0x80000001

08002a5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff f98d 	bl	8001d8c <LL_ADC_IsEnabled>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d169      	bne.n	8002b4c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	4b36      	ldr	r3, [pc, #216]	@ (8002b58 <ADC_Enable+0xfc>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00d      	beq.n	8002aa2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8a:	f043 0210 	orr.w	r2, r3, #16
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a96:	f043 0201 	orr.w	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e055      	b.n	8002b4e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff f948 	bl	8001d3c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002aac:	482b      	ldr	r0, [pc, #172]	@ (8002b5c <ADC_Enable+0x100>)
 8002aae:	f7fe fff7 	bl	8001aa0 <LL_ADC_GetCommonPathInternalCh>
 8002ab2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ab4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d013      	beq.n	8002ae4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002abc:	4b28      	ldr	r3, [pc, #160]	@ (8002b60 <ADC_Enable+0x104>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	099b      	lsrs	r3, r3, #6
 8002ac2:	4a28      	ldr	r2, [pc, #160]	@ (8002b64 <ADC_Enable+0x108>)
 8002ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac8:	099b      	lsrs	r3, r3, #6
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	4613      	mov	r3, r2
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ad6:	e002      	b.n	8002ade <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f9      	bne.n	8002ad8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ae4:	f7fe ff86 	bl	80019f4 <HAL_GetTick>
 8002ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002aea:	e028      	b.n	8002b3e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff f94b 	bl	8001d8c <LL_ADC_IsEnabled>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d104      	bne.n	8002b06 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff f91b 	bl	8001d3c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b06:	f7fe ff75 	bl	80019f4 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d914      	bls.n	8002b3e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d00d      	beq.n	8002b3e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b26:	f043 0210 	orr.w	r2, r3, #16
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b32:	f043 0201 	orr.w	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e007      	b.n	8002b4e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d1cf      	bne.n	8002aec <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	8000003f 	.word	0x8000003f
 8002b5c:	50040300 	.word	0x50040300
 8002b60:	20000000 	.word	0x20000000
 8002b64:	053e2d63 	.word	0x053e2d63

08002b68 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff f91c 	bl	8001db2 <LL_ADC_IsDisableOngoing>
 8002b7a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff f903 	bl	8001d8c <LL_ADC_IsEnabled>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d047      	beq.n	8002c1c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d144      	bne.n	8002c1c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 030d 	and.w	r3, r3, #13
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d10c      	bne.n	8002bba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff f8dd 	bl	8001d64 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2203      	movs	r2, #3
 8002bb0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bb2:	f7fe ff1f 	bl	80019f4 <HAL_GetTick>
 8002bb6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bb8:	e029      	b.n	8002c0e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bbe:	f043 0210 	orr.w	r2, r3, #16
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bca:	f043 0201 	orr.w	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e023      	b.n	8002c1e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bd6:	f7fe ff0d 	bl	80019f4 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d914      	bls.n	8002c0e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00d      	beq.n	8002c0e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf6:	f043 0210 	orr.w	r2, r3, #16
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c02:	f043 0201 	orr.w	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e007      	b.n	8002c1e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1dc      	bne.n	8002bd6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d14b      	bne.n	8002cd8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c44:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d021      	beq.n	8002c9e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe ff81 	bl	8001b66 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d032      	beq.n	8002cd0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d12b      	bne.n	8002cd0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d11f      	bne.n	8002cd0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c94:	f043 0201 	orr.w	r2, r3, #1
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c9c:	e018      	b.n	8002cd0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d111      	bne.n	8002cd0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc8:	f043 0201 	orr.w	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f7fd fd9d 	bl	8000810 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cd6:	e00e      	b.n	8002cf6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f7ff fabd 	bl	8002264 <HAL_ADC_ErrorCallback>
}
 8002cea:	e004      	b.n	8002cf6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	4798      	blx	r3
}
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f7fd fd93 	bl	8000838 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d38:	f043 0204 	orr.w	r2, r3, #4
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7ff fa8f 	bl	8002264 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d46:	bf00      	nop
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <LL_ADC_IsEnabled>:
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <LL_ADC_IsEnabled+0x18>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <LL_ADC_IsEnabled+0x1a>
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <LL_ADC_StartCalibration>:
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002d86:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	609a      	str	r2, [r3, #8]
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <LL_ADC_IsCalibrationOnGoing>:
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002db6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dba:	d101      	bne.n	8002dc0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <LL_ADC_REG_IsConversionOngoing>:
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d101      	bne.n	8002de6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_ADCEx_Calibration_Start+0x1c>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e04d      	b.n	8002eac <HAL_ADCEx_Calibration_Start+0xb8>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff fea5 	bl	8002b68 <ADC_Disable>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d136      	bne.n	8002e96 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e2c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e30:	f023 0302 	bic.w	r3, r3, #2
 8002e34:	f043 0202 	orr.w	r2, r3, #2
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6839      	ldr	r1, [r7, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff96 	bl	8002d74 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e48:	e014      	b.n	8002e74 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002e56:	d30d      	bcc.n	8002e74 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5c:	f023 0312 	bic.w	r3, r3, #18
 8002e60:	f043 0210 	orr.w	r2, r3, #16
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e01b      	b.n	8002eac <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff94 	bl	8002da6 <LL_ADC_IsCalibrationOnGoing>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1e2      	bne.n	8002e4a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e88:	f023 0303 	bic.w	r3, r3, #3
 8002e8c:	f043 0201 	orr.w	r2, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e94:	e005      	b.n	8002ea2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9a:	f043 0210 	orr.w	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b09f      	sub	sp, #124	@ 0x7c
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e093      	b.n	8002ffa <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002eda:	2300      	movs	r3, #0
 8002edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a47      	ldr	r2, [pc, #284]	@ (8003004 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d102      	bne.n	8002ef2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002eec:	4b46      	ldr	r3, [pc, #280]	@ (8003008 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	e001      	b.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10b      	bne.n	8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f00:	f043 0220 	orr.w	r2, r3, #32
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e072      	b.n	8002ffa <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ff59 	bl	8002dce <LL_ADC_REG_IsConversionOngoing>
 8002f1c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff ff53 	bl	8002dce <LL_ADC_REG_IsConversionOngoing>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d154      	bne.n	8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d151      	bne.n	8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f34:	4b35      	ldr	r3, [pc, #212]	@ (800300c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002f36:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d02c      	beq.n	8002f9a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f52:	035b      	lsls	r3, r3, #13
 8002f54:	430b      	orrs	r3, r1
 8002f56:	431a      	orrs	r2, r3
 8002f58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f5c:	4829      	ldr	r0, [pc, #164]	@ (8003004 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f5e:	f7ff fef6 	bl	8002d4e <LL_ADC_IsEnabled>
 8002f62:	4604      	mov	r4, r0
 8002f64:	4828      	ldr	r0, [pc, #160]	@ (8003008 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f66:	f7ff fef2 	bl	8002d4e <LL_ADC_IsEnabled>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	431c      	orrs	r4, r3
 8002f6e:	4828      	ldr	r0, [pc, #160]	@ (8003010 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f70:	f7ff feed 	bl	8002d4e <LL_ADC_IsEnabled>
 8002f74:	4603      	mov	r3, r0
 8002f76:	4323      	orrs	r3, r4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d137      	bne.n	8002fec <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f84:	f023 030f 	bic.w	r3, r3, #15
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	6811      	ldr	r1, [r2, #0]
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	6892      	ldr	r2, [r2, #8]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	431a      	orrs	r2, r3
 8002f94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f96:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f98:	e028      	b.n	8002fec <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fa4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fa6:	4817      	ldr	r0, [pc, #92]	@ (8003004 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fa8:	f7ff fed1 	bl	8002d4e <LL_ADC_IsEnabled>
 8002fac:	4604      	mov	r4, r0
 8002fae:	4816      	ldr	r0, [pc, #88]	@ (8003008 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fb0:	f7ff fecd 	bl	8002d4e <LL_ADC_IsEnabled>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	431c      	orrs	r4, r3
 8002fb8:	4815      	ldr	r0, [pc, #84]	@ (8003010 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002fba:	f7ff fec8 	bl	8002d4e <LL_ADC_IsEnabled>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	4323      	orrs	r3, r4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d112      	bne.n	8002fec <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002fce:	f023 030f 	bic.w	r3, r3, #15
 8002fd2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002fd4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fd6:	e009      	b.n	8002fec <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002fea:	e000      	b.n	8002fee <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ff6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	377c      	adds	r7, #124	@ 0x7c
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd90      	pop	{r4, r7, pc}
 8003002:	bf00      	nop
 8003004:	50040000 	.word	0x50040000
 8003008:	50040100 	.word	0x50040100
 800300c:	50040300 	.word	0x50040300
 8003010:	50040200 	.word	0x50040200

08003014 <__NVIC_SetPriorityGrouping>:
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003024:	4b0c      	ldr	r3, [pc, #48]	@ (8003058 <__NVIC_SetPriorityGrouping+0x44>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003030:	4013      	ands	r3, r2
 8003032:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800303c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003046:	4a04      	ldr	r2, [pc, #16]	@ (8003058 <__NVIC_SetPriorityGrouping+0x44>)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	60d3      	str	r3, [r2, #12]
}
 800304c:	bf00      	nop
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <__NVIC_GetPriorityGrouping>:
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003060:	4b04      	ldr	r3, [pc, #16]	@ (8003074 <__NVIC_GetPriorityGrouping+0x18>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	0a1b      	lsrs	r3, r3, #8
 8003066:	f003 0307 	and.w	r3, r3, #7
}
 800306a:	4618      	mov	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <__NVIC_EnableIRQ>:
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	2b00      	cmp	r3, #0
 8003088:	db0b      	blt.n	80030a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	f003 021f 	and.w	r2, r3, #31
 8003090:	4907      	ldr	r1, [pc, #28]	@ (80030b0 <__NVIC_EnableIRQ+0x38>)
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	2001      	movs	r0, #1
 800309a:	fa00 f202 	lsl.w	r2, r0, r2
 800309e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000e100 	.word	0xe000e100

080030b4 <__NVIC_SetPriority>:
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	6039      	str	r1, [r7, #0]
 80030be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	db0a      	blt.n	80030de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	490c      	ldr	r1, [pc, #48]	@ (8003100 <__NVIC_SetPriority+0x4c>)
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	0112      	lsls	r2, r2, #4
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	440b      	add	r3, r1
 80030d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80030dc:	e00a      	b.n	80030f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4908      	ldr	r1, [pc, #32]	@ (8003104 <__NVIC_SetPriority+0x50>)
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	3b04      	subs	r3, #4
 80030ec:	0112      	lsls	r2, r2, #4
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	440b      	add	r3, r1
 80030f2:	761a      	strb	r2, [r3, #24]
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000e100 	.word	0xe000e100
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <NVIC_EncodePriority>:
{
 8003108:	b480      	push	{r7}
 800310a:	b089      	sub	sp, #36	@ 0x24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f1c3 0307 	rsb	r3, r3, #7
 8003122:	2b04      	cmp	r3, #4
 8003124:	bf28      	it	cs
 8003126:	2304      	movcs	r3, #4
 8003128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3304      	adds	r3, #4
 800312e:	2b06      	cmp	r3, #6
 8003130:	d902      	bls.n	8003138 <NVIC_EncodePriority+0x30>
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3b03      	subs	r3, #3
 8003136:	e000      	b.n	800313a <NVIC_EncodePriority+0x32>
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	f04f 32ff 	mov.w	r2, #4294967295
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43da      	mvns	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	401a      	ands	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003150:	f04f 31ff 	mov.w	r1, #4294967295
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	fa01 f303 	lsl.w	r3, r1, r3
 800315a:	43d9      	mvns	r1, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	4313      	orrs	r3, r2
}
 8003162:	4618      	mov	r0, r3
 8003164:	3724      	adds	r7, #36	@ 0x24
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3b01      	subs	r3, #1
 800317c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003180:	d301      	bcc.n	8003186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003182:	2301      	movs	r3, #1
 8003184:	e00f      	b.n	80031a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003186:	4a0a      	ldr	r2, [pc, #40]	@ (80031b0 <SysTick_Config+0x40>)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3b01      	subs	r3, #1
 800318c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800318e:	210f      	movs	r1, #15
 8003190:	f04f 30ff 	mov.w	r0, #4294967295
 8003194:	f7ff ff8e 	bl	80030b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003198:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <SysTick_Config+0x40>)
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800319e:	4b04      	ldr	r3, [pc, #16]	@ (80031b0 <SysTick_Config+0x40>)
 80031a0:	2207      	movs	r2, #7
 80031a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	e000e010 	.word	0xe000e010

080031b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff ff29 	bl	8003014 <__NVIC_SetPriorityGrouping>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b086      	sub	sp, #24
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	4603      	mov	r3, r0
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031dc:	f7ff ff3e 	bl	800305c <__NVIC_GetPriorityGrouping>
 80031e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68b9      	ldr	r1, [r7, #8]
 80031e6:	6978      	ldr	r0, [r7, #20]
 80031e8:	f7ff ff8e 	bl	8003108 <NVIC_EncodePriority>
 80031ec:	4602      	mov	r2, r0
 80031ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031f2:	4611      	mov	r1, r2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff ff5d 	bl	80030b4 <__NVIC_SetPriority>
}
 80031fa:	bf00      	nop
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	4603      	mov	r3, r0
 800320a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800320c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff ff31 	bl	8003078 <__NVIC_EnableIRQ>
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff ffa2 	bl	8003170 <SysTick_Config>
 800322c:	4603      	mov	r3, r0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e0ac      	b.n	80033a4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 f8b2 	bl	80033b8 <DFSDM_GetChannelFromInstance>
 8003254:	4603      	mov	r3, r0
 8003256:	4a55      	ldr	r2, [pc, #340]	@ (80033ac <HAL_DFSDM_ChannelInit+0x174>)
 8003258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e09f      	b.n	80033a4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7fd ffa3 	bl	80011b0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800326a:	4b51      	ldr	r3, [pc, #324]	@ (80033b0 <HAL_DFSDM_ChannelInit+0x178>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3301      	adds	r3, #1
 8003270:	4a4f      	ldr	r2, [pc, #316]	@ (80033b0 <HAL_DFSDM_ChannelInit+0x178>)
 8003272:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003274:	4b4e      	ldr	r3, [pc, #312]	@ (80033b0 <HAL_DFSDM_ChannelInit+0x178>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d125      	bne.n	80032c8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800327c:	4b4d      	ldr	r3, [pc, #308]	@ (80033b4 <HAL_DFSDM_ChannelInit+0x17c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a4c      	ldr	r2, [pc, #304]	@ (80033b4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003282:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003286:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003288:	4b4a      	ldr	r3, [pc, #296]	@ (80033b4 <HAL_DFSDM_ChannelInit+0x17c>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	4948      	ldr	r1, [pc, #288]	@ (80033b4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003296:	4b47      	ldr	r3, [pc, #284]	@ (80033b4 <HAL_DFSDM_ChannelInit+0x17c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a46      	ldr	r2, [pc, #280]	@ (80033b4 <HAL_DFSDM_ChannelInit+0x17c>)
 800329c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80032a0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	791b      	ldrb	r3, [r3, #4]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d108      	bne.n	80032bc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80032aa:	4b42      	ldr	r3, [pc, #264]	@ (80033b4 <HAL_DFSDM_ChannelInit+0x17c>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	041b      	lsls	r3, r3, #16
 80032b6:	493f      	ldr	r1, [pc, #252]	@ (80033b4 <HAL_DFSDM_ChannelInit+0x17c>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80032bc:	4b3d      	ldr	r3, [pc, #244]	@ (80033b4 <HAL_DFSDM_ChannelInit+0x17c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a3c      	ldr	r2, [pc, #240]	@ (80033b4 <HAL_DFSDM_ChannelInit+0x17c>)
 80032c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032c6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80032d6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6819      	ldr	r1, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80032e6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80032ec:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 020f 	bic.w	r2, r2, #15
 8003304:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6819      	ldr	r1, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800332c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6899      	ldr	r1, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333c:	3b01      	subs	r3, #1
 800333e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f002 0207 	and.w	r2, r2, #7
 8003358:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6859      	ldr	r1, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003384:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f000 f810 	bl	80033b8 <DFSDM_GetChannelFromInstance>
 8003398:	4602      	mov	r2, r0
 800339a:	4904      	ldr	r1, [pc, #16]	@ (80033ac <HAL_DFSDM_ChannelInit+0x174>)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	20000ac0 	.word	0x20000ac0
 80033b0:	20000abc 	.word	0x20000abc
 80033b4:	40016000 	.word	0x40016000

080033b8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003434 <DFSDM_GetChannelFromInstance+0x7c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d102      	bne.n	80033ce <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	e02b      	b.n	8003426 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a19      	ldr	r2, [pc, #100]	@ (8003438 <DFSDM_GetChannelFromInstance+0x80>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d102      	bne.n	80033dc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80033d6:	2301      	movs	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	e024      	b.n	8003426 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a17      	ldr	r2, [pc, #92]	@ (800343c <DFSDM_GetChannelFromInstance+0x84>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d102      	bne.n	80033ea <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80033e4:	2302      	movs	r3, #2
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	e01d      	b.n	8003426 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a14      	ldr	r2, [pc, #80]	@ (8003440 <DFSDM_GetChannelFromInstance+0x88>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d102      	bne.n	80033f8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80033f2:	2304      	movs	r3, #4
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	e016      	b.n	8003426 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a12      	ldr	r2, [pc, #72]	@ (8003444 <DFSDM_GetChannelFromInstance+0x8c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d102      	bne.n	8003406 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003400:	2305      	movs	r3, #5
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	e00f      	b.n	8003426 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a0f      	ldr	r2, [pc, #60]	@ (8003448 <DFSDM_GetChannelFromInstance+0x90>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d102      	bne.n	8003414 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800340e:	2306      	movs	r3, #6
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	e008      	b.n	8003426 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a0d      	ldr	r2, [pc, #52]	@ (800344c <DFSDM_GetChannelFromInstance+0x94>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d102      	bne.n	8003422 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800341c:	2307      	movs	r3, #7
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	e001      	b.n	8003426 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003422:	2303      	movs	r3, #3
 8003424:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003426:	68fb      	ldr	r3, [r7, #12]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	40016000 	.word	0x40016000
 8003438:	40016020 	.word	0x40016020
 800343c:	40016040 	.word	0x40016040
 8003440:	40016080 	.word	0x40016080
 8003444:	400160a0 	.word	0x400160a0
 8003448:	400160c0 	.word	0x400160c0
 800344c:	400160e0 	.word	0x400160e0

08003450 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e098      	b.n	8003594 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	4b4d      	ldr	r3, [pc, #308]	@ (80035a0 <HAL_DMA_Init+0x150>)
 800346a:	429a      	cmp	r2, r3
 800346c:	d80f      	bhi.n	800348e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	4b4b      	ldr	r3, [pc, #300]	@ (80035a4 <HAL_DMA_Init+0x154>)
 8003476:	4413      	add	r3, r2
 8003478:	4a4b      	ldr	r2, [pc, #300]	@ (80035a8 <HAL_DMA_Init+0x158>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	091b      	lsrs	r3, r3, #4
 8003480:	009a      	lsls	r2, r3, #2
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a48      	ldr	r2, [pc, #288]	@ (80035ac <HAL_DMA_Init+0x15c>)
 800348a:	641a      	str	r2, [r3, #64]	@ 0x40
 800348c:	e00e      	b.n	80034ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	4b46      	ldr	r3, [pc, #280]	@ (80035b0 <HAL_DMA_Init+0x160>)
 8003496:	4413      	add	r3, r2
 8003498:	4a43      	ldr	r2, [pc, #268]	@ (80035a8 <HAL_DMA_Init+0x158>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	091b      	lsrs	r3, r3, #4
 80034a0:	009a      	lsls	r2, r3, #2
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a42      	ldr	r2, [pc, #264]	@ (80035b4 <HAL_DMA_Init+0x164>)
 80034aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80034c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80034d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003506:	d039      	beq.n	800357c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	4a27      	ldr	r2, [pc, #156]	@ (80035ac <HAL_DMA_Init+0x15c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d11a      	bne.n	8003548 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003512:	4b29      	ldr	r3, [pc, #164]	@ (80035b8 <HAL_DMA_Init+0x168>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351a:	f003 031c 	and.w	r3, r3, #28
 800351e:	210f      	movs	r1, #15
 8003520:	fa01 f303 	lsl.w	r3, r1, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	4924      	ldr	r1, [pc, #144]	@ (80035b8 <HAL_DMA_Init+0x168>)
 8003528:	4013      	ands	r3, r2
 800352a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800352c:	4b22      	ldr	r3, [pc, #136]	@ (80035b8 <HAL_DMA_Init+0x168>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003538:	f003 031c 	and.w	r3, r3, #28
 800353c:	fa01 f303 	lsl.w	r3, r1, r3
 8003540:	491d      	ldr	r1, [pc, #116]	@ (80035b8 <HAL_DMA_Init+0x168>)
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]
 8003546:	e019      	b.n	800357c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003548:	4b1c      	ldr	r3, [pc, #112]	@ (80035bc <HAL_DMA_Init+0x16c>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003550:	f003 031c 	and.w	r3, r3, #28
 8003554:	210f      	movs	r1, #15
 8003556:	fa01 f303 	lsl.w	r3, r1, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	4917      	ldr	r1, [pc, #92]	@ (80035bc <HAL_DMA_Init+0x16c>)
 800355e:	4013      	ands	r3, r2
 8003560:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003562:	4b16      	ldr	r3, [pc, #88]	@ (80035bc <HAL_DMA_Init+0x16c>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6859      	ldr	r1, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356e:	f003 031c 	and.w	r3, r3, #28
 8003572:	fa01 f303 	lsl.w	r3, r1, r3
 8003576:	4911      	ldr	r1, [pc, #68]	@ (80035bc <HAL_DMA_Init+0x16c>)
 8003578:	4313      	orrs	r3, r2
 800357a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	40020407 	.word	0x40020407
 80035a4:	bffdfff8 	.word	0xbffdfff8
 80035a8:	cccccccd 	.word	0xcccccccd
 80035ac:	40020000 	.word	0x40020000
 80035b0:	bffdfbf8 	.word	0xbffdfbf8
 80035b4:	40020400 	.word	0x40020400
 80035b8:	400200a8 	.word	0x400200a8
 80035bc:	400204a8 	.word	0x400204a8

080035c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_DMA_Start_IT+0x20>
 80035dc:	2302      	movs	r3, #2
 80035de:	e04b      	b.n	8003678 <HAL_DMA_Start_IT+0xb8>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d13a      	bne.n	800366a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0201 	bic.w	r2, r2, #1
 8003610:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f8e0 	bl	80037de <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 020e 	orr.w	r2, r2, #14
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	e00f      	b.n	8003658 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0204 	bic.w	r2, r2, #4
 8003646:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 020a 	orr.w	r2, r2, #10
 8003656:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	e005      	b.n	8003676 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003672:	2302      	movs	r3, #2
 8003674:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003676:	7dfb      	ldrb	r3, [r7, #23]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369c:	f003 031c 	and.w	r3, r3, #28
 80036a0:	2204      	movs	r2, #4
 80036a2:	409a      	lsls	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d026      	beq.n	80036fa <HAL_DMA_IRQHandler+0x7a>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d021      	beq.n	80036fa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d107      	bne.n	80036d4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0204 	bic.w	r2, r2, #4
 80036d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d8:	f003 021c 	and.w	r2, r3, #28
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e0:	2104      	movs	r1, #4
 80036e2:	fa01 f202 	lsl.w	r2, r1, r2
 80036e6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d071      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80036f8:	e06c      	b.n	80037d4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fe:	f003 031c 	and.w	r3, r3, #28
 8003702:	2202      	movs	r2, #2
 8003704:	409a      	lsls	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4013      	ands	r3, r2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d02e      	beq.n	800376c <HAL_DMA_IRQHandler+0xec>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d029      	beq.n	800376c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10b      	bne.n	800373e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 020a 	bic.w	r2, r2, #10
 8003734:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003742:	f003 021c 	and.w	r2, r3, #28
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	2102      	movs	r1, #2
 800374c:	fa01 f202 	lsl.w	r2, r1, r2
 8003750:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375e:	2b00      	cmp	r3, #0
 8003760:	d038      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800376a:	e033      	b.n	80037d4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003770:	f003 031c 	and.w	r3, r3, #28
 8003774:	2208      	movs	r2, #8
 8003776:	409a      	lsls	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d02a      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x156>
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d025      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 020e 	bic.w	r2, r2, #14
 8003798:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379e:	f003 021c 	and.w	r2, r3, #28
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	2101      	movs	r1, #1
 80037a8:	fa01 f202 	lsl.w	r2, r1, r2
 80037ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d004      	beq.n	80037d6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop
}
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037de:	b480      	push	{r7}
 80037e0:	b085      	sub	sp, #20
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f0:	f003 021c 	and.w	r2, r3, #28
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f8:	2101      	movs	r1, #1
 80037fa:	fa01 f202 	lsl.w	r2, r1, r2
 80037fe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b10      	cmp	r3, #16
 800380e:	d108      	bne.n	8003822 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003820:	e007      	b.n	8003832 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	60da      	str	r2, [r3, #12]
}
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
	...

08003840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800384e:	e17f      	b.n	8003b50 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	2101      	movs	r1, #1
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	fa01 f303 	lsl.w	r3, r1, r3
 800385c:	4013      	ands	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8171 	beq.w	8003b4a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	2b01      	cmp	r3, #1
 8003872:	d005      	beq.n	8003880 <HAL_GPIO_Init+0x40>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d130      	bne.n	80038e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	2203      	movs	r2, #3
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4013      	ands	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038b6:	2201      	movs	r2, #1
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4013      	ands	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	091b      	lsrs	r3, r3, #4
 80038cc:	f003 0201 	and.w	r2, r3, #1
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d118      	bne.n	8003920 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80038f4:	2201      	movs	r2, #1
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	08db      	lsrs	r3, r3, #3
 800390a:	f003 0201 	and.w	r2, r3, #1
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	2b03      	cmp	r3, #3
 800392a:	d017      	beq.n	800395c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	2203      	movs	r2, #3
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4013      	ands	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d123      	bne.n	80039b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	08da      	lsrs	r2, r3, #3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3208      	adds	r2, #8
 8003970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	220f      	movs	r2, #15
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	43db      	mvns	r3, r3
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	4013      	ands	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	08da      	lsrs	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3208      	adds	r2, #8
 80039aa:	6939      	ldr	r1, [r7, #16]
 80039ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	2203      	movs	r2, #3
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4013      	ands	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0203 	and.w	r2, r3, #3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80ac 	beq.w	8003b4a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f2:	4b5f      	ldr	r3, [pc, #380]	@ (8003b70 <HAL_GPIO_Init+0x330>)
 80039f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f6:	4a5e      	ldr	r2, [pc, #376]	@ (8003b70 <HAL_GPIO_Init+0x330>)
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80039fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003b70 <HAL_GPIO_Init+0x330>)
 8003a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a0a:	4a5a      	ldr	r2, [pc, #360]	@ (8003b74 <HAL_GPIO_Init+0x334>)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	089b      	lsrs	r3, r3, #2
 8003a10:	3302      	adds	r3, #2
 8003a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a16:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	220f      	movs	r2, #15
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43db      	mvns	r3, r3
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a34:	d025      	beq.n	8003a82 <HAL_GPIO_Init+0x242>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a4f      	ldr	r2, [pc, #316]	@ (8003b78 <HAL_GPIO_Init+0x338>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01f      	beq.n	8003a7e <HAL_GPIO_Init+0x23e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a4e      	ldr	r2, [pc, #312]	@ (8003b7c <HAL_GPIO_Init+0x33c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d019      	beq.n	8003a7a <HAL_GPIO_Init+0x23a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a4d      	ldr	r2, [pc, #308]	@ (8003b80 <HAL_GPIO_Init+0x340>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d013      	beq.n	8003a76 <HAL_GPIO_Init+0x236>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a4c      	ldr	r2, [pc, #304]	@ (8003b84 <HAL_GPIO_Init+0x344>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00d      	beq.n	8003a72 <HAL_GPIO_Init+0x232>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a4b      	ldr	r2, [pc, #300]	@ (8003b88 <HAL_GPIO_Init+0x348>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d007      	beq.n	8003a6e <HAL_GPIO_Init+0x22e>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a4a      	ldr	r2, [pc, #296]	@ (8003b8c <HAL_GPIO_Init+0x34c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d101      	bne.n	8003a6a <HAL_GPIO_Init+0x22a>
 8003a66:	2306      	movs	r3, #6
 8003a68:	e00c      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a6a:	2307      	movs	r3, #7
 8003a6c:	e00a      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a6e:	2305      	movs	r3, #5
 8003a70:	e008      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a72:	2304      	movs	r3, #4
 8003a74:	e006      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a76:	2303      	movs	r3, #3
 8003a78:	e004      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e002      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_GPIO_Init+0x244>
 8003a82:	2300      	movs	r3, #0
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	f002 0203 	and.w	r2, r2, #3
 8003a8a:	0092      	lsls	r2, r2, #2
 8003a8c:	4093      	lsls	r3, r2
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a94:	4937      	ldr	r1, [pc, #220]	@ (8003b74 <HAL_GPIO_Init+0x334>)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	089b      	lsrs	r3, r3, #2
 8003a9a:	3302      	adds	r3, #2
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8003b90 <HAL_GPIO_Init+0x350>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ac6:	4a32      	ldr	r2, [pc, #200]	@ (8003b90 <HAL_GPIO_Init+0x350>)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003acc:	4b30      	ldr	r3, [pc, #192]	@ (8003b90 <HAL_GPIO_Init+0x350>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003af0:	4a27      	ldr	r2, [pc, #156]	@ (8003b90 <HAL_GPIO_Init+0x350>)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003af6:	4b26      	ldr	r3, [pc, #152]	@ (8003b90 <HAL_GPIO_Init+0x350>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	43db      	mvns	r3, r3
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4013      	ands	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003b90 <HAL_GPIO_Init+0x350>)
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b20:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <HAL_GPIO_Init+0x350>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b44:	4a12      	ldr	r2, [pc, #72]	@ (8003b90 <HAL_GPIO_Init+0x350>)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f47f ae78 	bne.w	8003850 <HAL_GPIO_Init+0x10>
  }
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	371c      	adds	r7, #28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40010000 	.word	0x40010000
 8003b78:	48000400 	.word	0x48000400
 8003b7c:	48000800 	.word	0x48000800
 8003b80:	48000c00 	.word	0x48000c00
 8003b84:	48001000 	.word	0x48001000
 8003b88:	48001400 	.word	0x48001400
 8003b8c:	48001800 	.word	0x48001800
 8003b90:	40010400 	.word	0x40010400

08003b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	807b      	strh	r3, [r7, #2]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba4:	787b      	ldrb	r3, [r7, #1]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003baa:	887a      	ldrh	r2, [r7, #2]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bb0:	e002      	b.n	8003bb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003bce:	4b08      	ldr	r3, [pc, #32]	@ (8003bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	88fb      	ldrh	r3, [r7, #6]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d006      	beq.n	8003be8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bda:	4a05      	ldr	r2, [pc, #20]	@ (8003bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bdc:	88fb      	ldrh	r3, [r7, #6]
 8003bde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 f806 	bl	8003bf4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003be8:	bf00      	nop
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40010400 	.word	0x40010400

08003bf4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e08d      	b.n	8003d38 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d106      	bne.n	8003c36 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7fd fb21 	bl	8001278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2224      	movs	r2, #36	@ 0x24
 8003c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0201 	bic.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c5a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c6a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d107      	bne.n	8003c84 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c80:	609a      	str	r2, [r3, #8]
 8003c82:	e006      	b.n	8003c92 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c90:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d108      	bne.n	8003cac <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	e007      	b.n	8003cbc <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6812      	ldr	r2, [r2, #0]
 8003cc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cce:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cde:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69d9      	ldr	r1, [r3, #28]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1a      	ldr	r2, [r3, #32]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0201 	orr.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d138      	bne.n	8003dc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e032      	b.n	8003dca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2224      	movs	r2, #36	@ 0x24
 8003d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0201 	bic.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6819      	ldr	r1, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e000      	b.n	8003dca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dc8:	2302      	movs	r3, #2
  }
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b085      	sub	sp, #20
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
 8003dde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b20      	cmp	r3, #32
 8003dea:	d139      	bne.n	8003e60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e033      	b.n	8003e62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2224      	movs	r2, #36	@ 0x24
 8003e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0201 	bic.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	021b      	lsls	r3, r3, #8
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	e000      	b.n	8003e62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
  }
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b086      	sub	sp, #24
 8003e72:	af02      	add	r7, sp, #8
 8003e74:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e101      	b.n	8004084 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d106      	bne.n	8003e9a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7fd fb79 	bl	800158c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f002 fef1 	bl	8006c94 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	7c1a      	ldrb	r2, [r3, #16]
 8003eba:	f88d 2000 	strb.w	r2, [sp]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ec2:	f002 feba 	bl	8006c3a <USB_CoreInit>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0d5      	b.n	8004084 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f002 fee9 	bl	8006cb6 <USB_SetCurrentMode>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e0c6      	b.n	8004084 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	73fb      	strb	r3, [r7, #15]
 8003efa:	e04a      	b.n	8003f92 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003efc:	7bfa      	ldrb	r2, [r7, #15]
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	4613      	mov	r3, r2
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	3315      	adds	r3, #21
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f10:	7bfa      	ldrb	r2, [r7, #15]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	3314      	adds	r3, #20
 8003f20:	7bfa      	ldrb	r2, [r7, #15]
 8003f22:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f24:	7bfa      	ldrb	r2, [r7, #15]
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	b298      	uxth	r0, r3
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	332e      	adds	r3, #46	@ 0x2e
 8003f38:	4602      	mov	r2, r0
 8003f3a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f3c:	7bfa      	ldrb	r2, [r7, #15]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4413      	add	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	3318      	adds	r3, #24
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f50:	7bfa      	ldrb	r2, [r7, #15]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	4413      	add	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	331c      	adds	r3, #28
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f64:	7bfa      	ldrb	r2, [r7, #15]
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	3320      	adds	r3, #32
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f78:	7bfa      	ldrb	r2, [r7, #15]
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	3324      	adds	r3, #36	@ 0x24
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	73fb      	strb	r3, [r7, #15]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	791b      	ldrb	r3, [r3, #4]
 8003f96:	7bfa      	ldrb	r2, [r7, #15]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d3af      	bcc.n	8003efc <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	73fb      	strb	r3, [r7, #15]
 8003fa0:	e044      	b.n	800402c <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fa2:	7bfa      	ldrb	r2, [r7, #15]
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fb8:	7bfa      	ldrb	r2, [r7, #15]
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003fca:	7bfa      	ldrb	r2, [r7, #15]
 8003fcc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fce:	7bfa      	ldrb	r2, [r7, #15]
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fe4:	7bfa      	ldrb	r2, [r7, #15]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4413      	add	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ffa:	7bfa      	ldrb	r2, [r7, #15]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	4413      	add	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004010:	7bfa      	ldrb	r2, [r7, #15]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	4413      	add	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004026:	7bfb      	ldrb	r3, [r7, #15]
 8004028:	3301      	adds	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	791b      	ldrb	r3, [r3, #4]
 8004030:	7bfa      	ldrb	r2, [r7, #15]
 8004032:	429a      	cmp	r2, r3
 8004034:	d3b5      	bcc.n	8003fa2 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	7c1a      	ldrb	r2, [r3, #16]
 800403e:	f88d 2000 	strb.w	r2, [sp]
 8004042:	3304      	adds	r3, #4
 8004044:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004046:	f002 fe83 	bl	8006d50 <USB_DevInit>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e013      	b.n	8004084 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	7b1b      	ldrb	r3, [r3, #12]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d102      	bne.n	8004078 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f80a 	bl	800408c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f003 f828 	bl	80070d2 <USB_DevDisconnect>

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040be:	f043 0303 	orr.w	r3, r3, #3
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040d8:	4b05      	ldr	r3, [pc, #20]	@ (80040f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a04      	ldr	r2, [pc, #16]	@ (80040f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040e2:	6013      	str	r3, [r2, #0]
}
 80040e4:	bf00      	nop
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40007000 	.word	0x40007000

080040f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80040f8:	4b04      	ldr	r3, [pc, #16]	@ (800410c <HAL_PWREx_GetVoltageRange+0x18>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004100:	4618      	mov	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40007000 	.word	0x40007000

08004110 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800411e:	d130      	bne.n	8004182 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004120:	4b23      	ldr	r3, [pc, #140]	@ (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800412c:	d038      	beq.n	80041a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800412e:	4b20      	ldr	r3, [pc, #128]	@ (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004136:	4a1e      	ldr	r2, [pc, #120]	@ (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004138:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800413c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800413e:	4b1d      	ldr	r3, [pc, #116]	@ (80041b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2232      	movs	r2, #50	@ 0x32
 8004144:	fb02 f303 	mul.w	r3, r2, r3
 8004148:	4a1b      	ldr	r2, [pc, #108]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	0c9b      	lsrs	r3, r3, #18
 8004150:	3301      	adds	r3, #1
 8004152:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004154:	e002      	b.n	800415c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3b01      	subs	r3, #1
 800415a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800415c:	4b14      	ldr	r3, [pc, #80]	@ (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004168:	d102      	bne.n	8004170 <HAL_PWREx_ControlVoltageScaling+0x60>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f2      	bne.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004170:	4b0f      	ldr	r3, [pc, #60]	@ (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800417c:	d110      	bne.n	80041a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e00f      	b.n	80041a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004182:	4b0b      	ldr	r3, [pc, #44]	@ (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800418a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800418e:	d007      	beq.n	80041a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004190:	4b07      	ldr	r3, [pc, #28]	@ (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004198:	4a05      	ldr	r2, [pc, #20]	@ (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800419a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800419e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40007000 	.word	0x40007000
 80041b4:	20000000 	.word	0x20000000
 80041b8:	431bde83 	.word	0x431bde83

080041bc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80041c0:	4b05      	ldr	r3, [pc, #20]	@ (80041d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	4a04      	ldr	r2, [pc, #16]	@ (80041d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80041c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041ca:	6053      	str	r3, [r2, #4]
}
 80041cc:	bf00      	nop
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40007000 	.word	0x40007000

080041dc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80041e4:	f7fd fc06 	bl	80019f4 <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e063      	b.n	80042bc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10b      	bne.n	8004218 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fd f893 	bl	8001334 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800420e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f858 	bl	80042c8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	3b01      	subs	r3, #1
 8004228:	021a      	lsls	r2, r3, #8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	2120      	movs	r1, #32
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f850 	bl	80042e4 <QSPI_WaitFlagStateUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004248:	7afb      	ldrb	r3, [r7, #11]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d131      	bne.n	80042b2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004258:	f023 0310 	bic.w	r3, r3, #16
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6852      	ldr	r2, [r2, #4]
 8004260:	0611      	lsls	r1, r2, #24
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	68d2      	ldr	r2, [r2, #12]
 8004266:	4311      	orrs	r1, r2
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	430b      	orrs	r3, r1
 800426e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	4b13      	ldr	r3, [pc, #76]	@ (80042c4 <HAL_QSPI_Init+0xe8>)
 8004278:	4013      	ands	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6912      	ldr	r2, [r2, #16]
 800427e:	0411      	lsls	r1, r2, #16
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6952      	ldr	r2, [r2, #20]
 8004284:	4311      	orrs	r1, r2
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6992      	ldr	r2, [r2, #24]
 800428a:	4311      	orrs	r1, r2
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6812      	ldr	r2, [r2, #0]
 8004290:	430b      	orrs	r3, r1
 8004292:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80042ba:	7afb      	ldrb	r3, [r7, #11]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	ffe0f8fe 	.word	0xffe0f8fe

080042c8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	4613      	mov	r3, r2
 80042f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80042f4:	e01a      	b.n	800432c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fc:	d016      	beq.n	800432c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fe:	f7fd fb79 	bl	80019f4 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	429a      	cmp	r2, r3
 800430c:	d302      	bcc.n	8004314 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10b      	bne.n	800432c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2204      	movs	r2, #4
 8004318:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004320:	f043 0201 	orr.w	r2, r3, #1
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e00e      	b.n	800434a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4013      	ands	r3, r2
 8004336:	2b00      	cmp	r3, #0
 8004338:	bf14      	ite	ne
 800433a:	2301      	movne	r3, #1
 800433c:	2300      	moveq	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	429a      	cmp	r2, r3
 8004346:	d1d6      	bne.n	80042f6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e3ca      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004366:	4b97      	ldr	r3, [pc, #604]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004370:	4b94      	ldr	r3, [pc, #592]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 80e4 	beq.w	8004550 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d007      	beq.n	800439e <HAL_RCC_OscConfig+0x4a>
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	2b0c      	cmp	r3, #12
 8004392:	f040 808b 	bne.w	80044ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b01      	cmp	r3, #1
 800439a:	f040 8087 	bne.w	80044ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800439e:	4b89      	ldr	r3, [pc, #548]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <HAL_RCC_OscConfig+0x62>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e3a2      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1a      	ldr	r2, [r3, #32]
 80043ba:	4b82      	ldr	r3, [pc, #520]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d004      	beq.n	80043d0 <HAL_RCC_OscConfig+0x7c>
 80043c6:	4b7f      	ldr	r3, [pc, #508]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043ce:	e005      	b.n	80043dc <HAL_RCC_OscConfig+0x88>
 80043d0:	4b7c      	ldr	r3, [pc, #496]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 80043d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043d6:	091b      	lsrs	r3, r3, #4
 80043d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043dc:	4293      	cmp	r3, r2
 80043de:	d223      	bcs.n	8004428 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fd55 	bl	8004e94 <RCC_SetFlashLatencyFromMSIRange>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e383      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043f4:	4b73      	ldr	r3, [pc, #460]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a72      	ldr	r2, [pc, #456]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 80043fa:	f043 0308 	orr.w	r3, r3, #8
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	4b70      	ldr	r3, [pc, #448]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	496d      	ldr	r1, [pc, #436]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 800440e:	4313      	orrs	r3, r2
 8004410:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004412:	4b6c      	ldr	r3, [pc, #432]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	021b      	lsls	r3, r3, #8
 8004420:	4968      	ldr	r1, [pc, #416]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 8004422:	4313      	orrs	r3, r2
 8004424:	604b      	str	r3, [r1, #4]
 8004426:	e025      	b.n	8004474 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004428:	4b66      	ldr	r3, [pc, #408]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a65      	ldr	r2, [pc, #404]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 800442e:	f043 0308 	orr.w	r3, r3, #8
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	4b63      	ldr	r3, [pc, #396]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	4960      	ldr	r1, [pc, #384]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 8004442:	4313      	orrs	r3, r2
 8004444:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004446:	4b5f      	ldr	r3, [pc, #380]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	495b      	ldr	r1, [pc, #364]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 8004456:	4313      	orrs	r3, r2
 8004458:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d109      	bne.n	8004474 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fd15 	bl	8004e94 <RCC_SetFlashLatencyFromMSIRange>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e343      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004474:	f000 fc4a 	bl	8004d0c <HAL_RCC_GetSysClockFreq>
 8004478:	4602      	mov	r2, r0
 800447a:	4b52      	ldr	r3, [pc, #328]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	091b      	lsrs	r3, r3, #4
 8004480:	f003 030f 	and.w	r3, r3, #15
 8004484:	4950      	ldr	r1, [pc, #320]	@ (80045c8 <HAL_RCC_OscConfig+0x274>)
 8004486:	5ccb      	ldrb	r3, [r1, r3]
 8004488:	f003 031f 	and.w	r3, r3, #31
 800448c:	fa22 f303 	lsr.w	r3, r2, r3
 8004490:	4a4e      	ldr	r2, [pc, #312]	@ (80045cc <HAL_RCC_OscConfig+0x278>)
 8004492:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004494:	4b4e      	ldr	r3, [pc, #312]	@ (80045d0 <HAL_RCC_OscConfig+0x27c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f7fd fa5b 	bl	8001954 <HAL_InitTick>
 800449e:	4603      	mov	r3, r0
 80044a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d052      	beq.n	800454e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	e327      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d032      	beq.n	800451a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044b4:	4b43      	ldr	r3, [pc, #268]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a42      	ldr	r2, [pc, #264]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044c0:	f7fd fa98 	bl	80019f4 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044c8:	f7fd fa94 	bl	80019f4 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e310      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044da:	4b3a      	ldr	r3, [pc, #232]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f0      	beq.n	80044c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044e6:	4b37      	ldr	r3, [pc, #220]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a36      	ldr	r2, [pc, #216]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 80044ec:	f043 0308 	orr.w	r3, r3, #8
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	4b34      	ldr	r3, [pc, #208]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	4931      	ldr	r1, [pc, #196]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 8004500:	4313      	orrs	r3, r2
 8004502:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004504:	4b2f      	ldr	r3, [pc, #188]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	021b      	lsls	r3, r3, #8
 8004512:	492c      	ldr	r1, [pc, #176]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 8004514:	4313      	orrs	r3, r2
 8004516:	604b      	str	r3, [r1, #4]
 8004518:	e01a      	b.n	8004550 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800451a:	4b2a      	ldr	r3, [pc, #168]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a29      	ldr	r2, [pc, #164]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 8004520:	f023 0301 	bic.w	r3, r3, #1
 8004524:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004526:	f7fd fa65 	bl	80019f4 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800452e:	f7fd fa61 	bl	80019f4 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e2dd      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004540:	4b20      	ldr	r3, [pc, #128]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f0      	bne.n	800452e <HAL_RCC_OscConfig+0x1da>
 800454c:	e000      	b.n	8004550 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800454e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d074      	beq.n	8004646 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b08      	cmp	r3, #8
 8004560:	d005      	beq.n	800456e <HAL_RCC_OscConfig+0x21a>
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	2b0c      	cmp	r3, #12
 8004566:	d10e      	bne.n	8004586 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2b03      	cmp	r3, #3
 800456c:	d10b      	bne.n	8004586 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800456e:	4b15      	ldr	r3, [pc, #84]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d064      	beq.n	8004644 <HAL_RCC_OscConfig+0x2f0>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d160      	bne.n	8004644 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e2ba      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800458e:	d106      	bne.n	800459e <HAL_RCC_OscConfig+0x24a>
 8004590:	4b0c      	ldr	r3, [pc, #48]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a0b      	ldr	r2, [pc, #44]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 8004596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	e026      	b.n	80045ec <HAL_RCC_OscConfig+0x298>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045a6:	d115      	bne.n	80045d4 <HAL_RCC_OscConfig+0x280>
 80045a8:	4b06      	ldr	r3, [pc, #24]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a05      	ldr	r2, [pc, #20]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 80045ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	4b03      	ldr	r3, [pc, #12]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a02      	ldr	r2, [pc, #8]	@ (80045c4 <HAL_RCC_OscConfig+0x270>)
 80045ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	e014      	b.n	80045ec <HAL_RCC_OscConfig+0x298>
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000
 80045c8:	0800afb0 	.word	0x0800afb0
 80045cc:	20000000 	.word	0x20000000
 80045d0:	20000004 	.word	0x20000004
 80045d4:	4ba0      	ldr	r3, [pc, #640]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a9f      	ldr	r2, [pc, #636]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 80045da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	4b9d      	ldr	r3, [pc, #628]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a9c      	ldr	r2, [pc, #624]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 80045e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d013      	beq.n	800461c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fd f9fe 	bl	80019f4 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045fc:	f7fd f9fa 	bl	80019f4 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b64      	cmp	r3, #100	@ 0x64
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e276      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800460e:	4b92      	ldr	r3, [pc, #584]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0f0      	beq.n	80045fc <HAL_RCC_OscConfig+0x2a8>
 800461a:	e014      	b.n	8004646 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fd f9ea 	bl	80019f4 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004624:	f7fd f9e6 	bl	80019f4 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	@ 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e262      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004636:	4b88      	ldr	r3, [pc, #544]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f0      	bne.n	8004624 <HAL_RCC_OscConfig+0x2d0>
 8004642:	e000      	b.n	8004646 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d060      	beq.n	8004714 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	2b04      	cmp	r3, #4
 8004656:	d005      	beq.n	8004664 <HAL_RCC_OscConfig+0x310>
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	2b0c      	cmp	r3, #12
 800465c:	d119      	bne.n	8004692 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d116      	bne.n	8004692 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004664:	4b7c      	ldr	r3, [pc, #496]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_RCC_OscConfig+0x328>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e23f      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467c:	4b76      	ldr	r3, [pc, #472]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	061b      	lsls	r3, r3, #24
 800468a:	4973      	ldr	r1, [pc, #460]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004690:	e040      	b.n	8004714 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d023      	beq.n	80046e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800469a:	4b6f      	ldr	r3, [pc, #444]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a6e      	ldr	r2, [pc, #440]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 80046a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a6:	f7fd f9a5 	bl	80019f4 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ae:	f7fd f9a1 	bl	80019f4 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e21d      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046c0:	4b65      	ldr	r3, [pc, #404]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f0      	beq.n	80046ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046cc:	4b62      	ldr	r3, [pc, #392]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	061b      	lsls	r3, r3, #24
 80046da:	495f      	ldr	r1, [pc, #380]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	604b      	str	r3, [r1, #4]
 80046e0:	e018      	b.n	8004714 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046e2:	4b5d      	ldr	r3, [pc, #372]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a5c      	ldr	r2, [pc, #368]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 80046e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ee:	f7fd f981 	bl	80019f4 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f6:	f7fd f97d 	bl	80019f4 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e1f9      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004708:	4b53      	ldr	r3, [pc, #332]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1f0      	bne.n	80046f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d03c      	beq.n	800479a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d01c      	beq.n	8004762 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004728:	4b4b      	ldr	r3, [pc, #300]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 800472a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800472e:	4a4a      	ldr	r2, [pc, #296]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 8004730:	f043 0301 	orr.w	r3, r3, #1
 8004734:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004738:	f7fd f95c 	bl	80019f4 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004740:	f7fd f958 	bl	80019f4 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e1d4      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004752:	4b41      	ldr	r3, [pc, #260]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 8004754:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0ef      	beq.n	8004740 <HAL_RCC_OscConfig+0x3ec>
 8004760:	e01b      	b.n	800479a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004762:	4b3d      	ldr	r3, [pc, #244]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 8004764:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004768:	4a3b      	ldr	r2, [pc, #236]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 800476a:	f023 0301 	bic.w	r3, r3, #1
 800476e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004772:	f7fd f93f 	bl	80019f4 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800477a:	f7fd f93b 	bl	80019f4 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e1b7      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800478c:	4b32      	ldr	r3, [pc, #200]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 800478e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1ef      	bne.n	800477a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 80a6 	beq.w	80048f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a8:	2300      	movs	r3, #0
 80047aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 80047ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10d      	bne.n	80047d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b8:	4b27      	ldr	r3, [pc, #156]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 80047ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047bc:	4a26      	ldr	r2, [pc, #152]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 80047be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80047c4:	4b24      	ldr	r3, [pc, #144]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 80047c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d0:	2301      	movs	r3, #1
 80047d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047d4:	4b21      	ldr	r3, [pc, #132]	@ (800485c <HAL_RCC_OscConfig+0x508>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d118      	bne.n	8004812 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047e0:	4b1e      	ldr	r3, [pc, #120]	@ (800485c <HAL_RCC_OscConfig+0x508>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1d      	ldr	r2, [pc, #116]	@ (800485c <HAL_RCC_OscConfig+0x508>)
 80047e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ec:	f7fd f902 	bl	80019f4 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f4:	f7fd f8fe 	bl	80019f4 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e17a      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004806:	4b15      	ldr	r3, [pc, #84]	@ (800485c <HAL_RCC_OscConfig+0x508>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0f0      	beq.n	80047f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d108      	bne.n	800482c <HAL_RCC_OscConfig+0x4d8>
 800481a:	4b0f      	ldr	r3, [pc, #60]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 800481c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004820:	4a0d      	ldr	r2, [pc, #52]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800482a:	e029      	b.n	8004880 <HAL_RCC_OscConfig+0x52c>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	2b05      	cmp	r3, #5
 8004832:	d115      	bne.n	8004860 <HAL_RCC_OscConfig+0x50c>
 8004834:	4b08      	ldr	r3, [pc, #32]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483a:	4a07      	ldr	r2, [pc, #28]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 800483c:	f043 0304 	orr.w	r3, r3, #4
 8004840:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004844:	4b04      	ldr	r3, [pc, #16]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 8004846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484a:	4a03      	ldr	r2, [pc, #12]	@ (8004858 <HAL_RCC_OscConfig+0x504>)
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004854:	e014      	b.n	8004880 <HAL_RCC_OscConfig+0x52c>
 8004856:	bf00      	nop
 8004858:	40021000 	.word	0x40021000
 800485c:	40007000 	.word	0x40007000
 8004860:	4b9c      	ldr	r3, [pc, #624]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004866:	4a9b      	ldr	r2, [pc, #620]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 8004868:	f023 0301 	bic.w	r3, r3, #1
 800486c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004870:	4b98      	ldr	r3, [pc, #608]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004876:	4a97      	ldr	r2, [pc, #604]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 8004878:	f023 0304 	bic.w	r3, r3, #4
 800487c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d016      	beq.n	80048b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004888:	f7fd f8b4 	bl	80019f4 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004890:	f7fd f8b0 	bl	80019f4 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e12a      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a6:	4b8b      	ldr	r3, [pc, #556]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 80048a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0ed      	beq.n	8004890 <HAL_RCC_OscConfig+0x53c>
 80048b4:	e015      	b.n	80048e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b6:	f7fd f89d 	bl	80019f4 <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048bc:	e00a      	b.n	80048d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048be:	f7fd f899 	bl	80019f4 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e113      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048d4:	4b7f      	ldr	r3, [pc, #508]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1ed      	bne.n	80048be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048e2:	7ffb      	ldrb	r3, [r7, #31]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d105      	bne.n	80048f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e8:	4b7a      	ldr	r3, [pc, #488]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 80048ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ec:	4a79      	ldr	r2, [pc, #484]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 80048ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048f2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 80fe 	beq.w	8004afa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004902:	2b02      	cmp	r3, #2
 8004904:	f040 80d0 	bne.w	8004aa8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004908:	4b72      	ldr	r3, [pc, #456]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f003 0203 	and.w	r2, r3, #3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004918:	429a      	cmp	r2, r3
 800491a:	d130      	bne.n	800497e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004926:	3b01      	subs	r3, #1
 8004928:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800492a:	429a      	cmp	r2, r3
 800492c:	d127      	bne.n	800497e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004938:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800493a:	429a      	cmp	r2, r3
 800493c:	d11f      	bne.n	800497e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004948:	2a07      	cmp	r2, #7
 800494a:	bf14      	ite	ne
 800494c:	2201      	movne	r2, #1
 800494e:	2200      	moveq	r2, #0
 8004950:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004952:	4293      	cmp	r3, r2
 8004954:	d113      	bne.n	800497e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004960:	085b      	lsrs	r3, r3, #1
 8004962:	3b01      	subs	r3, #1
 8004964:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004966:	429a      	cmp	r2, r3
 8004968:	d109      	bne.n	800497e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004974:	085b      	lsrs	r3, r3, #1
 8004976:	3b01      	subs	r3, #1
 8004978:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800497a:	429a      	cmp	r2, r3
 800497c:	d06e      	beq.n	8004a5c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b0c      	cmp	r3, #12
 8004982:	d069      	beq.n	8004a58 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004984:	4b53      	ldr	r3, [pc, #332]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d105      	bne.n	800499c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004990:	4b50      	ldr	r3, [pc, #320]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0ad      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049a0:	4b4c      	ldr	r3, [pc, #304]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a4b      	ldr	r2, [pc, #300]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 80049a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049ac:	f7fd f822 	bl	80019f4 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b4:	f7fd f81e 	bl	80019f4 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e09a      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c6:	4b43      	ldr	r3, [pc, #268]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049d2:	4b40      	ldr	r3, [pc, #256]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	4b40      	ldr	r3, [pc, #256]	@ (8004ad8 <HAL_RCC_OscConfig+0x784>)
 80049d8:	4013      	ands	r3, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80049e2:	3a01      	subs	r2, #1
 80049e4:	0112      	lsls	r2, r2, #4
 80049e6:	4311      	orrs	r1, r2
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049ec:	0212      	lsls	r2, r2, #8
 80049ee:	4311      	orrs	r1, r2
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049f4:	0852      	lsrs	r2, r2, #1
 80049f6:	3a01      	subs	r2, #1
 80049f8:	0552      	lsls	r2, r2, #21
 80049fa:	4311      	orrs	r1, r2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a00:	0852      	lsrs	r2, r2, #1
 8004a02:	3a01      	subs	r2, #1
 8004a04:	0652      	lsls	r2, r2, #25
 8004a06:	4311      	orrs	r1, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a0c:	0912      	lsrs	r2, r2, #4
 8004a0e:	0452      	lsls	r2, r2, #17
 8004a10:	430a      	orrs	r2, r1
 8004a12:	4930      	ldr	r1, [pc, #192]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a18:	4b2e      	ldr	r3, [pc, #184]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 8004a1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a24:	4b2b      	ldr	r3, [pc, #172]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4a2a      	ldr	r2, [pc, #168]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 8004a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a30:	f7fc ffe0 	bl	80019f4 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a38:	f7fc ffdc 	bl	80019f4 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e058      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a4a:	4b22      	ldr	r3, [pc, #136]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f0      	beq.n	8004a38 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a56:	e050      	b.n	8004afa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e04f      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d148      	bne.n	8004afa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a68:	4b1a      	ldr	r3, [pc, #104]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a19      	ldr	r2, [pc, #100]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 8004a6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a74:	4b17      	ldr	r3, [pc, #92]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	4a16      	ldr	r2, [pc, #88]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 8004a7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a80:	f7fc ffb8 	bl	80019f4 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a88:	f7fc ffb4 	bl	80019f4 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e030      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0f0      	beq.n	8004a88 <HAL_RCC_OscConfig+0x734>
 8004aa6:	e028      	b.n	8004afa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	2b0c      	cmp	r3, #12
 8004aac:	d023      	beq.n	8004af6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aae:	4b09      	ldr	r3, [pc, #36]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a08      	ldr	r2, [pc, #32]	@ (8004ad4 <HAL_RCC_OscConfig+0x780>)
 8004ab4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aba:	f7fc ff9b 	bl	80019f4 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac0:	e00c      	b.n	8004adc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac2:	f7fc ff97 	bl	80019f4 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d905      	bls.n	8004adc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e013      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004adc:	4b09      	ldr	r3, [pc, #36]	@ (8004b04 <HAL_RCC_OscConfig+0x7b0>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1ec      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ae8:	4b06      	ldr	r3, [pc, #24]	@ (8004b04 <HAL_RCC_OscConfig+0x7b0>)
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	4905      	ldr	r1, [pc, #20]	@ (8004b04 <HAL_RCC_OscConfig+0x7b0>)
 8004aee:	4b06      	ldr	r3, [pc, #24]	@ (8004b08 <HAL_RCC_OscConfig+0x7b4>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	60cb      	str	r3, [r1, #12]
 8004af4:	e001      	b.n	8004afa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e000      	b.n	8004afc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3720      	adds	r7, #32
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40021000 	.word	0x40021000
 8004b08:	feeefffc 	.word	0xfeeefffc

08004b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0e7      	b.n	8004cf0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b20:	4b75      	ldr	r3, [pc, #468]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d910      	bls.n	8004b50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2e:	4b72      	ldr	r3, [pc, #456]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f023 0207 	bic.w	r2, r3, #7
 8004b36:	4970      	ldr	r1, [pc, #448]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3e:	4b6e      	ldr	r3, [pc, #440]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0cf      	b.n	8004cf0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d010      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	4b66      	ldr	r3, [pc, #408]	@ (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d908      	bls.n	8004b7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b6c:	4b63      	ldr	r3, [pc, #396]	@ (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	4960      	ldr	r1, [pc, #384]	@ (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d04c      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d107      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b92:	4b5a      	ldr	r3, [pc, #360]	@ (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d121      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e0a6      	b.n	8004cf0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d107      	bne.n	8004bba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004baa:	4b54      	ldr	r3, [pc, #336]	@ (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d115      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e09a      	b.n	8004cf0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d107      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bc2:	4b4e      	ldr	r3, [pc, #312]	@ (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e08e      	b.n	8004cf0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e086      	b.n	8004cf0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004be2:	4b46      	ldr	r3, [pc, #280]	@ (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f023 0203 	bic.w	r2, r3, #3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	4943      	ldr	r1, [pc, #268]	@ (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf4:	f7fc fefe 	bl	80019f4 <HAL_GetTick>
 8004bf8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfa:	e00a      	b.n	8004c12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bfc:	f7fc fefa 	bl	80019f4 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e06e      	b.n	8004cf0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c12:	4b3a      	ldr	r3, [pc, #232]	@ (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 020c 	and.w	r2, r3, #12
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d1eb      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d010      	beq.n	8004c52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	4b31      	ldr	r3, [pc, #196]	@ (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d208      	bcs.n	8004c52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c40:	4b2e      	ldr	r3, [pc, #184]	@ (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	492b      	ldr	r1, [pc, #172]	@ (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c52:	4b29      	ldr	r3, [pc, #164]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d210      	bcs.n	8004c82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c60:	4b25      	ldr	r3, [pc, #148]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f023 0207 	bic.w	r2, r3, #7
 8004c68:	4923      	ldr	r1, [pc, #140]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c70:	4b21      	ldr	r3, [pc, #132]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d001      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e036      	b.n	8004cf0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d008      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4918      	ldr	r1, [pc, #96]	@ (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d009      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cac:	4b13      	ldr	r3, [pc, #76]	@ (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	4910      	ldr	r1, [pc, #64]	@ (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cc0:	f000 f824 	bl	8004d0c <HAL_RCC_GetSysClockFreq>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	091b      	lsrs	r3, r3, #4
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	490b      	ldr	r1, [pc, #44]	@ (8004d00 <HAL_RCC_ClockConfig+0x1f4>)
 8004cd2:	5ccb      	ldrb	r3, [r1, r3]
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cdc:	4a09      	ldr	r2, [pc, #36]	@ (8004d04 <HAL_RCC_ClockConfig+0x1f8>)
 8004cde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ce0:	4b09      	ldr	r3, [pc, #36]	@ (8004d08 <HAL_RCC_ClockConfig+0x1fc>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fc fe35 	bl	8001954 <HAL_InitTick>
 8004cea:	4603      	mov	r3, r0
 8004cec:	72fb      	strb	r3, [r7, #11]

  return status;
 8004cee:	7afb      	ldrb	r3, [r7, #11]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40022000 	.word	0x40022000
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	0800afb0 	.word	0x0800afb0
 8004d04:	20000000 	.word	0x20000000
 8004d08:	20000004 	.word	0x20000004

08004d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b089      	sub	sp, #36	@ 0x24
 8004d10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	61fb      	str	r3, [r7, #28]
 8004d16:	2300      	movs	r3, #0
 8004d18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d1a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 030c 	and.w	r3, r3, #12
 8004d22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d24:	4b3b      	ldr	r3, [pc, #236]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f003 0303 	and.w	r3, r3, #3
 8004d2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d005      	beq.n	8004d40 <HAL_RCC_GetSysClockFreq+0x34>
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	2b0c      	cmp	r3, #12
 8004d38:	d121      	bne.n	8004d7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d11e      	bne.n	8004d7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d40:	4b34      	ldr	r3, [pc, #208]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d107      	bne.n	8004d5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d4c:	4b31      	ldr	r3, [pc, #196]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d52:	0a1b      	lsrs	r3, r3, #8
 8004d54:	f003 030f 	and.w	r3, r3, #15
 8004d58:	61fb      	str	r3, [r7, #28]
 8004d5a:	e005      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	091b      	lsrs	r3, r3, #4
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d68:	4a2b      	ldr	r2, [pc, #172]	@ (8004e18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10d      	bne.n	8004d94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d7c:	e00a      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d102      	bne.n	8004d8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d84:	4b25      	ldr	r3, [pc, #148]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x110>)
 8004d86:	61bb      	str	r3, [r7, #24]
 8004d88:	e004      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d101      	bne.n	8004d94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d90:	4b23      	ldr	r3, [pc, #140]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2b0c      	cmp	r3, #12
 8004d98:	d134      	bne.n	8004e04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d003      	beq.n	8004db2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d003      	beq.n	8004db8 <HAL_RCC_GetSysClockFreq+0xac>
 8004db0:	e005      	b.n	8004dbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004db2:	4b1a      	ldr	r3, [pc, #104]	@ (8004e1c <HAL_RCC_GetSysClockFreq+0x110>)
 8004db4:	617b      	str	r3, [r7, #20]
      break;
 8004db6:	e005      	b.n	8004dc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004db8:	4b19      	ldr	r3, [pc, #100]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dba:	617b      	str	r3, [r7, #20]
      break;
 8004dbc:	e002      	b.n	8004dc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	617b      	str	r3, [r7, #20]
      break;
 8004dc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dc4:	4b13      	ldr	r3, [pc, #76]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	091b      	lsrs	r3, r3, #4
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	3301      	adds	r3, #1
 8004dd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004dd2:	4b10      	ldr	r3, [pc, #64]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	0a1b      	lsrs	r3, r3, #8
 8004dd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	fb03 f202 	mul.w	r2, r3, r2
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dea:	4b0a      	ldr	r3, [pc, #40]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	0e5b      	lsrs	r3, r3, #25
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	3301      	adds	r3, #1
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e04:	69bb      	ldr	r3, [r7, #24]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3724      	adds	r7, #36	@ 0x24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40021000 	.word	0x40021000
 8004e18:	0800afc8 	.word	0x0800afc8
 8004e1c:	00f42400 	.word	0x00f42400
 8004e20:	007a1200 	.word	0x007a1200

08004e24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e28:	4b03      	ldr	r3, [pc, #12]	@ (8004e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	20000000 	.word	0x20000000

08004e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e40:	f7ff fff0 	bl	8004e24 <HAL_RCC_GetHCLKFreq>
 8004e44:	4602      	mov	r2, r0
 8004e46:	4b06      	ldr	r3, [pc, #24]	@ (8004e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	0a1b      	lsrs	r3, r3, #8
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	4904      	ldr	r1, [pc, #16]	@ (8004e64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e52:	5ccb      	ldrb	r3, [r1, r3]
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40021000 	.word	0x40021000
 8004e64:	0800afc0 	.word	0x0800afc0

08004e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e6c:	f7ff ffda 	bl	8004e24 <HAL_RCC_GetHCLKFreq>
 8004e70:	4602      	mov	r2, r0
 8004e72:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	0adb      	lsrs	r3, r3, #11
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	4904      	ldr	r1, [pc, #16]	@ (8004e90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e7e:	5ccb      	ldrb	r3, [r1, r3]
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	0800afc0 	.word	0x0800afc0

08004e94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8004f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004eac:	f7ff f922 	bl	80040f4 <HAL_PWREx_GetVoltageRange>
 8004eb0:	6178      	str	r0, [r7, #20]
 8004eb2:	e014      	b.n	8004ede <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004eb4:	4b25      	ldr	r3, [pc, #148]	@ (8004f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb8:	4a24      	ldr	r2, [pc, #144]	@ (8004f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ebe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ec0:	4b22      	ldr	r3, [pc, #136]	@ (8004f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ecc:	f7ff f912 	bl	80040f4 <HAL_PWREx_GetVoltageRange>
 8004ed0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8004f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8004f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ed8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004edc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ee4:	d10b      	bne.n	8004efe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b80      	cmp	r3, #128	@ 0x80
 8004eea:	d919      	bls.n	8004f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2ba0      	cmp	r3, #160	@ 0xa0
 8004ef0:	d902      	bls.n	8004ef8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	e013      	b.n	8004f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ef8:	2301      	movs	r3, #1
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	e010      	b.n	8004f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b80      	cmp	r3, #128	@ 0x80
 8004f02:	d902      	bls.n	8004f0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f04:	2303      	movs	r3, #3
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	e00a      	b.n	8004f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b80      	cmp	r3, #128	@ 0x80
 8004f0e:	d102      	bne.n	8004f16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f10:	2302      	movs	r3, #2
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	e004      	b.n	8004f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b70      	cmp	r3, #112	@ 0x70
 8004f1a:	d101      	bne.n	8004f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f20:	4b0b      	ldr	r3, [pc, #44]	@ (8004f50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f023 0207 	bic.w	r2, r3, #7
 8004f28:	4909      	ldr	r1, [pc, #36]	@ (8004f50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f30:	4b07      	ldr	r3, [pc, #28]	@ (8004f50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d001      	beq.n	8004f42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	40022000 	.word	0x40022000

08004f54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f60:	2300      	movs	r3, #0
 8004f62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d041      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f74:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f78:	d02a      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f7a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f7e:	d824      	bhi.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f84:	d008      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f8a:	d81e      	bhi.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f94:	d010      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f96:	e018      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f98:	4b86      	ldr	r3, [pc, #536]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	4a85      	ldr	r2, [pc, #532]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fa2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fa4:	e015      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	2100      	movs	r1, #0
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 facb 	bl	8005548 <RCCEx_PLLSAI1_Config>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fb6:	e00c      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3320      	adds	r3, #32
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fbb6 	bl	8005730 <RCCEx_PLLSAI2_Config>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fc8:	e003      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	74fb      	strb	r3, [r7, #19]
      break;
 8004fce:	e000      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fd2:	7cfb      	ldrb	r3, [r7, #19]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10b      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fd8:	4b76      	ldr	r3, [pc, #472]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fde:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fe6:	4973      	ldr	r1, [pc, #460]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004fee:	e001      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff0:	7cfb      	ldrb	r3, [r7, #19]
 8004ff2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d041      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005004:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005008:	d02a      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800500a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800500e:	d824      	bhi.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005010:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005014:	d008      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005016:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800501a:	d81e      	bhi.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005020:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005024:	d010      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005026:	e018      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005028:	4b62      	ldr	r3, [pc, #392]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	4a61      	ldr	r2, [pc, #388]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005032:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005034:	e015      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3304      	adds	r3, #4
 800503a:	2100      	movs	r1, #0
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fa83 	bl	8005548 <RCCEx_PLLSAI1_Config>
 8005042:	4603      	mov	r3, r0
 8005044:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005046:	e00c      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3320      	adds	r3, #32
 800504c:	2100      	movs	r1, #0
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fb6e 	bl	8005730 <RCCEx_PLLSAI2_Config>
 8005054:	4603      	mov	r3, r0
 8005056:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005058:	e003      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	74fb      	strb	r3, [r7, #19]
      break;
 800505e:	e000      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005062:	7cfb      	ldrb	r3, [r7, #19]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10b      	bne.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005068:	4b52      	ldr	r3, [pc, #328]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800506e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005076:	494f      	ldr	r1, [pc, #316]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800507e:	e001      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005080:	7cfb      	ldrb	r3, [r7, #19]
 8005082:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 80a0 	beq.w	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005092:	2300      	movs	r3, #0
 8005094:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005096:	4b47      	ldr	r3, [pc, #284]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800509a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80050a6:	2300      	movs	r3, #0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00d      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ac:	4b41      	ldr	r3, [pc, #260]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b0:	4a40      	ldr	r2, [pc, #256]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80050b8:	4b3e      	ldr	r3, [pc, #248]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050c0:	60bb      	str	r3, [r7, #8]
 80050c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050c4:	2301      	movs	r3, #1
 80050c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050c8:	4b3b      	ldr	r3, [pc, #236]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a3a      	ldr	r2, [pc, #232]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050d4:	f7fc fc8e 	bl	80019f4 <HAL_GetTick>
 80050d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050da:	e009      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050dc:	f7fc fc8a 	bl	80019f4 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d902      	bls.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	74fb      	strb	r3, [r7, #19]
        break;
 80050ee:	e005      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050f0:	4b31      	ldr	r3, [pc, #196]	@ (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0ef      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80050fc:	7cfb      	ldrb	r3, [r7, #19]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d15c      	bne.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005102:	4b2c      	ldr	r3, [pc, #176]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005108:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800510c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d01f      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	429a      	cmp	r2, r3
 800511e:	d019      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005120:	4b24      	ldr	r3, [pc, #144]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005126:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800512a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800512c:	4b21      	ldr	r3, [pc, #132]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800512e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005132:	4a20      	ldr	r2, [pc, #128]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800513c:	4b1d      	ldr	r3, [pc, #116]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800513e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005142:	4a1c      	ldr	r2, [pc, #112]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800514c:	4a19      	ldr	r2, [pc, #100]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d016      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515e:	f7fc fc49 	bl	80019f4 <HAL_GetTick>
 8005162:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005164:	e00b      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005166:	f7fc fc45 	bl	80019f4 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005174:	4293      	cmp	r3, r2
 8005176:	d902      	bls.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	74fb      	strb	r3, [r7, #19]
            break;
 800517c:	e006      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800517e:	4b0d      	ldr	r3, [pc, #52]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0ec      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800518c:	7cfb      	ldrb	r3, [r7, #19]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10c      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005192:	4b08      	ldr	r3, [pc, #32]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005198:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051a2:	4904      	ldr	r1, [pc, #16]	@ (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80051aa:	e009      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051ac:	7cfb      	ldrb	r3, [r7, #19]
 80051ae:	74bb      	strb	r3, [r7, #18]
 80051b0:	e006      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80051b2:	bf00      	nop
 80051b4:	40021000 	.word	0x40021000
 80051b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051bc:	7cfb      	ldrb	r3, [r7, #19]
 80051be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051c0:	7c7b      	ldrb	r3, [r7, #17]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d105      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c6:	4b9e      	ldr	r3, [pc, #632]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ca:	4a9d      	ldr	r2, [pc, #628]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051de:	4b98      	ldr	r3, [pc, #608]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e4:	f023 0203 	bic.w	r2, r3, #3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ec:	4994      	ldr	r1, [pc, #592]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00a      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005200:	4b8f      	ldr	r3, [pc, #572]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005206:	f023 020c 	bic.w	r2, r3, #12
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520e:	498c      	ldr	r1, [pc, #560]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0304 	and.w	r3, r3, #4
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005222:	4b87      	ldr	r3, [pc, #540]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005228:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005230:	4983      	ldr	r1, [pc, #524]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005244:	4b7e      	ldr	r3, [pc, #504]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005252:	497b      	ldr	r1, [pc, #492]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0310 	and.w	r3, r3, #16
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005266:	4b76      	ldr	r3, [pc, #472]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800526c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005274:	4972      	ldr	r1, [pc, #456]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005288:	4b6d      	ldr	r3, [pc, #436]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005296:	496a      	ldr	r1, [pc, #424]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052aa:	4b65      	ldr	r3, [pc, #404]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052b8:	4961      	ldr	r1, [pc, #388]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052cc:	4b5c      	ldr	r3, [pc, #368]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052da:	4959      	ldr	r1, [pc, #356]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052ee:	4b54      	ldr	r3, [pc, #336]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052fc:	4950      	ldr	r1, [pc, #320]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005310:	4b4b      	ldr	r3, [pc, #300]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005316:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800531e:	4948      	ldr	r1, [pc, #288]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005332:	4b43      	ldr	r3, [pc, #268]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005338:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005340:	493f      	ldr	r1, [pc, #252]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d028      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005354:	4b3a      	ldr	r3, [pc, #232]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800535a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005362:	4937      	ldr	r1, [pc, #220]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005364:	4313      	orrs	r3, r2
 8005366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800536e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005372:	d106      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005374:	4b32      	ldr	r3, [pc, #200]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	4a31      	ldr	r2, [pc, #196]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800537e:	60d3      	str	r3, [r2, #12]
 8005380:	e011      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005386:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800538a:	d10c      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3304      	adds	r3, #4
 8005390:	2101      	movs	r1, #1
 8005392:	4618      	mov	r0, r3
 8005394:	f000 f8d8 	bl	8005548 <RCCEx_PLLSAI1_Config>
 8005398:	4603      	mov	r3, r0
 800539a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800539c:	7cfb      	ldrb	r3, [r7, #19]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80053a2:	7cfb      	ldrb	r3, [r7, #19]
 80053a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d028      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053b2:	4b23      	ldr	r3, [pc, #140]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c0:	491f      	ldr	r1, [pc, #124]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053d0:	d106      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053dc:	60d3      	str	r3, [r2, #12]
 80053de:	e011      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053e8:	d10c      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3304      	adds	r3, #4
 80053ee:	2101      	movs	r1, #1
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 f8a9 	bl	8005548 <RCCEx_PLLSAI1_Config>
 80053f6:	4603      	mov	r3, r0
 80053f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053fa:	7cfb      	ldrb	r3, [r7, #19]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005400:	7cfb      	ldrb	r3, [r7, #19]
 8005402:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d02b      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005410:	4b0b      	ldr	r3, [pc, #44]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005416:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800541e:	4908      	ldr	r1, [pc, #32]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800542a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800542e:	d109      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005430:	4b03      	ldr	r3, [pc, #12]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	4a02      	ldr	r2, [pc, #8]	@ (8005440 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005436:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800543a:	60d3      	str	r3, [r2, #12]
 800543c:	e014      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800543e:	bf00      	nop
 8005440:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005448:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800544c:	d10c      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3304      	adds	r3, #4
 8005452:	2101      	movs	r1, #1
 8005454:	4618      	mov	r0, r3
 8005456:	f000 f877 	bl	8005548 <RCCEx_PLLSAI1_Config>
 800545a:	4603      	mov	r3, r0
 800545c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800545e:	7cfb      	ldrb	r3, [r7, #19]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005464:	7cfb      	ldrb	r3, [r7, #19]
 8005466:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d02f      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005474:	4b2b      	ldr	r3, [pc, #172]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005482:	4928      	ldr	r1, [pc, #160]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800548e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005492:	d10d      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3304      	adds	r3, #4
 8005498:	2102      	movs	r1, #2
 800549a:	4618      	mov	r0, r3
 800549c:	f000 f854 	bl	8005548 <RCCEx_PLLSAI1_Config>
 80054a0:	4603      	mov	r3, r0
 80054a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054a4:	7cfb      	ldrb	r3, [r7, #19]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d014      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054aa:	7cfb      	ldrb	r3, [r7, #19]
 80054ac:	74bb      	strb	r3, [r7, #18]
 80054ae:	e011      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054b8:	d10c      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3320      	adds	r3, #32
 80054be:	2102      	movs	r1, #2
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 f935 	bl	8005730 <RCCEx_PLLSAI2_Config>
 80054c6:	4603      	mov	r3, r0
 80054c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054ca:	7cfb      	ldrb	r3, [r7, #19]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054d0:	7cfb      	ldrb	r3, [r7, #19]
 80054d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00a      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054e0:	4b10      	ldr	r3, [pc, #64]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054ee:	490d      	ldr	r1, [pc, #52]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00b      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005502:	4b08      	ldr	r3, [pc, #32]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005508:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005512:	4904      	ldr	r1, [pc, #16]	@ (8005524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005514:	4313      	orrs	r3, r2
 8005516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800551a:	7cbb      	ldrb	r3, [r7, #18]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40021000 	.word	0x40021000

08005528 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800552c:	4b05      	ldr	r3, [pc, #20]	@ (8005544 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a04      	ldr	r2, [pc, #16]	@ (8005544 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005532:	f043 0304 	orr.w	r3, r3, #4
 8005536:	6013      	str	r3, [r2, #0]
}
 8005538:	bf00      	nop
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40021000 	.word	0x40021000

08005548 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005556:	4b75      	ldr	r3, [pc, #468]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d018      	beq.n	8005594 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005562:	4b72      	ldr	r3, [pc, #456]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f003 0203 	and.w	r2, r3, #3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d10d      	bne.n	800558e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
       ||
 8005576:	2b00      	cmp	r3, #0
 8005578:	d009      	beq.n	800558e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800557a:	4b6c      	ldr	r3, [pc, #432]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	091b      	lsrs	r3, r3, #4
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
       ||
 800558a:	429a      	cmp	r2, r3
 800558c:	d047      	beq.n	800561e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	73fb      	strb	r3, [r7, #15]
 8005592:	e044      	b.n	800561e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b03      	cmp	r3, #3
 800559a:	d018      	beq.n	80055ce <RCCEx_PLLSAI1_Config+0x86>
 800559c:	2b03      	cmp	r3, #3
 800559e:	d825      	bhi.n	80055ec <RCCEx_PLLSAI1_Config+0xa4>
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d002      	beq.n	80055aa <RCCEx_PLLSAI1_Config+0x62>
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d009      	beq.n	80055bc <RCCEx_PLLSAI1_Config+0x74>
 80055a8:	e020      	b.n	80055ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055aa:	4b60      	ldr	r3, [pc, #384]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d11d      	bne.n	80055f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055ba:	e01a      	b.n	80055f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055bc:	4b5b      	ldr	r3, [pc, #364]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d116      	bne.n	80055f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055cc:	e013      	b.n	80055f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055ce:	4b57      	ldr	r3, [pc, #348]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10f      	bne.n	80055fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055da:	4b54      	ldr	r3, [pc, #336]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d109      	bne.n	80055fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055ea:	e006      	b.n	80055fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	73fb      	strb	r3, [r7, #15]
      break;
 80055f0:	e004      	b.n	80055fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055f2:	bf00      	nop
 80055f4:	e002      	b.n	80055fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055f6:	bf00      	nop
 80055f8:	e000      	b.n	80055fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10d      	bne.n	800561e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005602:	4b4a      	ldr	r3, [pc, #296]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6819      	ldr	r1, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	3b01      	subs	r3, #1
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	430b      	orrs	r3, r1
 8005618:	4944      	ldr	r1, [pc, #272]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 800561a:	4313      	orrs	r3, r2
 800561c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d17d      	bne.n	8005720 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005624:	4b41      	ldr	r3, [pc, #260]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a40      	ldr	r2, [pc, #256]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 800562a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800562e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005630:	f7fc f9e0 	bl	80019f4 <HAL_GetTick>
 8005634:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005636:	e009      	b.n	800564c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005638:	f7fc f9dc 	bl	80019f4 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d902      	bls.n	800564c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	73fb      	strb	r3, [r7, #15]
        break;
 800564a:	e005      	b.n	8005658 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800564c:	4b37      	ldr	r3, [pc, #220]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1ef      	bne.n	8005638 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d160      	bne.n	8005720 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d111      	bne.n	8005688 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005664:	4b31      	ldr	r3, [pc, #196]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800566c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6892      	ldr	r2, [r2, #8]
 8005674:	0211      	lsls	r1, r2, #8
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	68d2      	ldr	r2, [r2, #12]
 800567a:	0912      	lsrs	r2, r2, #4
 800567c:	0452      	lsls	r2, r2, #17
 800567e:	430a      	orrs	r2, r1
 8005680:	492a      	ldr	r1, [pc, #168]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005682:	4313      	orrs	r3, r2
 8005684:	610b      	str	r3, [r1, #16]
 8005686:	e027      	b.n	80056d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d112      	bne.n	80056b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800568e:	4b27      	ldr	r3, [pc, #156]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005696:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6892      	ldr	r2, [r2, #8]
 800569e:	0211      	lsls	r1, r2, #8
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6912      	ldr	r2, [r2, #16]
 80056a4:	0852      	lsrs	r2, r2, #1
 80056a6:	3a01      	subs	r2, #1
 80056a8:	0552      	lsls	r2, r2, #21
 80056aa:	430a      	orrs	r2, r1
 80056ac:	491f      	ldr	r1, [pc, #124]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	610b      	str	r3, [r1, #16]
 80056b2:	e011      	b.n	80056d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056b4:	4b1d      	ldr	r3, [pc, #116]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80056bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6892      	ldr	r2, [r2, #8]
 80056c4:	0211      	lsls	r1, r2, #8
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6952      	ldr	r2, [r2, #20]
 80056ca:	0852      	lsrs	r2, r2, #1
 80056cc:	3a01      	subs	r2, #1
 80056ce:	0652      	lsls	r2, r2, #25
 80056d0:	430a      	orrs	r2, r1
 80056d2:	4916      	ldr	r1, [pc, #88]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056d8:	4b14      	ldr	r3, [pc, #80]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a13      	ldr	r2, [pc, #76]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e4:	f7fc f986 	bl	80019f4 <HAL_GetTick>
 80056e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056ea:	e009      	b.n	8005700 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056ec:	f7fc f982 	bl	80019f4 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d902      	bls.n	8005700 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	73fb      	strb	r3, [r7, #15]
          break;
 80056fe:	e005      	b.n	800570c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005700:	4b0a      	ldr	r3, [pc, #40]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0ef      	beq.n	80056ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005712:	4b06      	ldr	r3, [pc, #24]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	4904      	ldr	r1, [pc, #16]	@ (800572c <RCCEx_PLLSAI1_Config+0x1e4>)
 800571c:	4313      	orrs	r3, r2
 800571e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005720:	7bfb      	ldrb	r3, [r7, #15]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	40021000 	.word	0x40021000

08005730 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800573e:	4b6a      	ldr	r3, [pc, #424]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d018      	beq.n	800577c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800574a:	4b67      	ldr	r3, [pc, #412]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f003 0203 	and.w	r2, r3, #3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d10d      	bne.n	8005776 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
       ||
 800575e:	2b00      	cmp	r3, #0
 8005760:	d009      	beq.n	8005776 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005762:	4b61      	ldr	r3, [pc, #388]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	091b      	lsrs	r3, r3, #4
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
       ||
 8005772:	429a      	cmp	r2, r3
 8005774:	d047      	beq.n	8005806 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	73fb      	strb	r3, [r7, #15]
 800577a:	e044      	b.n	8005806 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b03      	cmp	r3, #3
 8005782:	d018      	beq.n	80057b6 <RCCEx_PLLSAI2_Config+0x86>
 8005784:	2b03      	cmp	r3, #3
 8005786:	d825      	bhi.n	80057d4 <RCCEx_PLLSAI2_Config+0xa4>
 8005788:	2b01      	cmp	r3, #1
 800578a:	d002      	beq.n	8005792 <RCCEx_PLLSAI2_Config+0x62>
 800578c:	2b02      	cmp	r3, #2
 800578e:	d009      	beq.n	80057a4 <RCCEx_PLLSAI2_Config+0x74>
 8005790:	e020      	b.n	80057d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005792:	4b55      	ldr	r3, [pc, #340]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d11d      	bne.n	80057da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057a2:	e01a      	b.n	80057da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057a4:	4b50      	ldr	r3, [pc, #320]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d116      	bne.n	80057de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057b4:	e013      	b.n	80057de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057b6:	4b4c      	ldr	r3, [pc, #304]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10f      	bne.n	80057e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057c2:	4b49      	ldr	r3, [pc, #292]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d109      	bne.n	80057e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057d2:	e006      	b.n	80057e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	73fb      	strb	r3, [r7, #15]
      break;
 80057d8:	e004      	b.n	80057e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057da:	bf00      	nop
 80057dc:	e002      	b.n	80057e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057de:	bf00      	nop
 80057e0:	e000      	b.n	80057e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10d      	bne.n	8005806 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057ea:	4b3f      	ldr	r3, [pc, #252]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6819      	ldr	r1, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	430b      	orrs	r3, r1
 8005800:	4939      	ldr	r1, [pc, #228]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005802:	4313      	orrs	r3, r2
 8005804:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005806:	7bfb      	ldrb	r3, [r7, #15]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d167      	bne.n	80058dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800580c:	4b36      	ldr	r3, [pc, #216]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a35      	ldr	r2, [pc, #212]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005812:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005816:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005818:	f7fc f8ec 	bl	80019f4 <HAL_GetTick>
 800581c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800581e:	e009      	b.n	8005834 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005820:	f7fc f8e8 	bl	80019f4 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d902      	bls.n	8005834 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	73fb      	strb	r3, [r7, #15]
        break;
 8005832:	e005      	b.n	8005840 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005834:	4b2c      	ldr	r3, [pc, #176]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1ef      	bne.n	8005820 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d14a      	bne.n	80058dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d111      	bne.n	8005870 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800584c:	4b26      	ldr	r3, [pc, #152]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005854:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6892      	ldr	r2, [r2, #8]
 800585c:	0211      	lsls	r1, r2, #8
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	68d2      	ldr	r2, [r2, #12]
 8005862:	0912      	lsrs	r2, r2, #4
 8005864:	0452      	lsls	r2, r2, #17
 8005866:	430a      	orrs	r2, r1
 8005868:	491f      	ldr	r1, [pc, #124]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800586a:	4313      	orrs	r3, r2
 800586c:	614b      	str	r3, [r1, #20]
 800586e:	e011      	b.n	8005894 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005870:	4b1d      	ldr	r3, [pc, #116]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005878:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6892      	ldr	r2, [r2, #8]
 8005880:	0211      	lsls	r1, r2, #8
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6912      	ldr	r2, [r2, #16]
 8005886:	0852      	lsrs	r2, r2, #1
 8005888:	3a01      	subs	r2, #1
 800588a:	0652      	lsls	r2, r2, #25
 800588c:	430a      	orrs	r2, r1
 800588e:	4916      	ldr	r1, [pc, #88]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005890:	4313      	orrs	r3, r2
 8005892:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005894:	4b14      	ldr	r3, [pc, #80]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a13      	ldr	r2, [pc, #76]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800589a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800589e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a0:	f7fc f8a8 	bl	80019f4 <HAL_GetTick>
 80058a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058a6:	e009      	b.n	80058bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058a8:	f7fc f8a4 	bl	80019f4 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d902      	bls.n	80058bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	73fb      	strb	r3, [r7, #15]
          break;
 80058ba:	e005      	b.n	80058c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058bc:	4b0a      	ldr	r3, [pc, #40]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0ef      	beq.n	80058a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80058ce:	4b06      	ldr	r3, [pc, #24]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d0:	695a      	ldr	r2, [r3, #20]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	4904      	ldr	r1, [pc, #16]	@ (80058e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	40021000 	.word	0x40021000

080058ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e095      	b.n	8005a2a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005902:	2b00      	cmp	r3, #0
 8005904:	d108      	bne.n	8005918 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800590e:	d009      	beq.n	8005924 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	61da      	str	r2, [r3, #28]
 8005916:	e005      	b.n	8005924 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d106      	bne.n	8005944 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fb fd3c 	bl	80013bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800595a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005964:	d902      	bls.n	800596c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	e002      	b.n	8005972 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800596c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005970:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800597a:	d007      	beq.n	800598c <HAL_SPI_Init+0xa0>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005984:	d002      	beq.n	800598c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800599c:	431a      	orrs	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ce:	ea42 0103 	orr.w	r1, r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	0c1b      	lsrs	r3, r3, #16
 80059e8:	f003 0204 	and.w	r2, r3, #4
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f0:	f003 0310 	and.w	r3, r3, #16
 80059f4:	431a      	orrs	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005a08:	ea42 0103 	orr.w	r1, r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b082      	sub	sp, #8
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e049      	b.n	8005ad8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d106      	bne.n	8005a5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7fa ff01 	bl	8000860 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2202      	movs	r2, #2
 8005a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4610      	mov	r0, r2
 8005a72:	f000 f96f 	bl	8005d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d001      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e04f      	b.n	8005b98 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f042 0201 	orr.w	r2, r2, #1
 8005b0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a23      	ldr	r2, [pc, #140]	@ (8005ba4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d01d      	beq.n	8005b56 <HAL_TIM_Base_Start_IT+0x76>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b22:	d018      	beq.n	8005b56 <HAL_TIM_Base_Start_IT+0x76>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a1f      	ldr	r2, [pc, #124]	@ (8005ba8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d013      	beq.n	8005b56 <HAL_TIM_Base_Start_IT+0x76>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a1e      	ldr	r2, [pc, #120]	@ (8005bac <HAL_TIM_Base_Start_IT+0xcc>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00e      	beq.n	8005b56 <HAL_TIM_Base_Start_IT+0x76>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d009      	beq.n	8005b56 <HAL_TIM_Base_Start_IT+0x76>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a1b      	ldr	r2, [pc, #108]	@ (8005bb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d004      	beq.n	8005b56 <HAL_TIM_Base_Start_IT+0x76>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a19      	ldr	r2, [pc, #100]	@ (8005bb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d115      	bne.n	8005b82 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	4b17      	ldr	r3, [pc, #92]	@ (8005bbc <HAL_TIM_Base_Start_IT+0xdc>)
 8005b5e:	4013      	ands	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2b06      	cmp	r3, #6
 8005b66:	d015      	beq.n	8005b94 <HAL_TIM_Base_Start_IT+0xb4>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b6e:	d011      	beq.n	8005b94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0201 	orr.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b80:	e008      	b.n	8005b94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f042 0201 	orr.w	r2, r2, #1
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	e000      	b.n	8005b96 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	40012c00 	.word	0x40012c00
 8005ba8:	40000400 	.word	0x40000400
 8005bac:	40000800 	.word	0x40000800
 8005bb0:	40000c00 	.word	0x40000c00
 8005bb4:	40013400 	.word	0x40013400
 8005bb8:	40014000 	.word	0x40014000
 8005bbc:	00010007 	.word	0x00010007

08005bc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d101      	bne.n	8005bdc <HAL_TIM_ConfigClockSource+0x1c>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e0b6      	b.n	8005d4a <HAL_TIM_ConfigClockSource+0x18a>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bfa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c18:	d03e      	beq.n	8005c98 <HAL_TIM_ConfigClockSource+0xd8>
 8005c1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c1e:	f200 8087 	bhi.w	8005d30 <HAL_TIM_ConfigClockSource+0x170>
 8005c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c26:	f000 8086 	beq.w	8005d36 <HAL_TIM_ConfigClockSource+0x176>
 8005c2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c2e:	d87f      	bhi.n	8005d30 <HAL_TIM_ConfigClockSource+0x170>
 8005c30:	2b70      	cmp	r3, #112	@ 0x70
 8005c32:	d01a      	beq.n	8005c6a <HAL_TIM_ConfigClockSource+0xaa>
 8005c34:	2b70      	cmp	r3, #112	@ 0x70
 8005c36:	d87b      	bhi.n	8005d30 <HAL_TIM_ConfigClockSource+0x170>
 8005c38:	2b60      	cmp	r3, #96	@ 0x60
 8005c3a:	d050      	beq.n	8005cde <HAL_TIM_ConfigClockSource+0x11e>
 8005c3c:	2b60      	cmp	r3, #96	@ 0x60
 8005c3e:	d877      	bhi.n	8005d30 <HAL_TIM_ConfigClockSource+0x170>
 8005c40:	2b50      	cmp	r3, #80	@ 0x50
 8005c42:	d03c      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0xfe>
 8005c44:	2b50      	cmp	r3, #80	@ 0x50
 8005c46:	d873      	bhi.n	8005d30 <HAL_TIM_ConfigClockSource+0x170>
 8005c48:	2b40      	cmp	r3, #64	@ 0x40
 8005c4a:	d058      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0x13e>
 8005c4c:	2b40      	cmp	r3, #64	@ 0x40
 8005c4e:	d86f      	bhi.n	8005d30 <HAL_TIM_ConfigClockSource+0x170>
 8005c50:	2b30      	cmp	r3, #48	@ 0x30
 8005c52:	d064      	beq.n	8005d1e <HAL_TIM_ConfigClockSource+0x15e>
 8005c54:	2b30      	cmp	r3, #48	@ 0x30
 8005c56:	d86b      	bhi.n	8005d30 <HAL_TIM_ConfigClockSource+0x170>
 8005c58:	2b20      	cmp	r3, #32
 8005c5a:	d060      	beq.n	8005d1e <HAL_TIM_ConfigClockSource+0x15e>
 8005c5c:	2b20      	cmp	r3, #32
 8005c5e:	d867      	bhi.n	8005d30 <HAL_TIM_ConfigClockSource+0x170>
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d05c      	beq.n	8005d1e <HAL_TIM_ConfigClockSource+0x15e>
 8005c64:	2b10      	cmp	r3, #16
 8005c66:	d05a      	beq.n	8005d1e <HAL_TIM_ConfigClockSource+0x15e>
 8005c68:	e062      	b.n	8005d30 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c7a:	f000 f98b 	bl	8005f94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	609a      	str	r2, [r3, #8]
      break;
 8005c96:	e04f      	b.n	8005d38 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ca8:	f000 f974 	bl	8005f94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cba:	609a      	str	r2, [r3, #8]
      break;
 8005cbc:	e03c      	b.n	8005d38 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f000 f8e8 	bl	8005ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2150      	movs	r1, #80	@ 0x50
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 f941 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 8005cdc:	e02c      	b.n	8005d38 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cea:	461a      	mov	r2, r3
 8005cec:	f000 f907 	bl	8005efe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2160      	movs	r1, #96	@ 0x60
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 f931 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 8005cfc:	e01c      	b.n	8005d38 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f000 f8c8 	bl	8005ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2140      	movs	r1, #64	@ 0x40
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 f921 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 8005d1c:	e00c      	b.n	8005d38 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4619      	mov	r1, r3
 8005d28:	4610      	mov	r0, r2
 8005d2a:	f000 f918 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 8005d2e:	e003      	b.n	8005d38 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	73fb      	strb	r3, [r7, #15]
      break;
 8005d34:	e000      	b.n	8005d38 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a46      	ldr	r2, [pc, #280]	@ (8005e80 <TIM_Base_SetConfig+0x12c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d013      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d72:	d00f      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a43      	ldr	r2, [pc, #268]	@ (8005e84 <TIM_Base_SetConfig+0x130>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d00b      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a42      	ldr	r2, [pc, #264]	@ (8005e88 <TIM_Base_SetConfig+0x134>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d007      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a41      	ldr	r2, [pc, #260]	@ (8005e8c <TIM_Base_SetConfig+0x138>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d003      	beq.n	8005d94 <TIM_Base_SetConfig+0x40>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a40      	ldr	r2, [pc, #256]	@ (8005e90 <TIM_Base_SetConfig+0x13c>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d108      	bne.n	8005da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a35      	ldr	r2, [pc, #212]	@ (8005e80 <TIM_Base_SetConfig+0x12c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d01f      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005db4:	d01b      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a32      	ldr	r2, [pc, #200]	@ (8005e84 <TIM_Base_SetConfig+0x130>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d017      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a31      	ldr	r2, [pc, #196]	@ (8005e88 <TIM_Base_SetConfig+0x134>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d013      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a30      	ldr	r2, [pc, #192]	@ (8005e8c <TIM_Base_SetConfig+0x138>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00f      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a2f      	ldr	r2, [pc, #188]	@ (8005e90 <TIM_Base_SetConfig+0x13c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00b      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a2e      	ldr	r2, [pc, #184]	@ (8005e94 <TIM_Base_SetConfig+0x140>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d007      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a2d      	ldr	r2, [pc, #180]	@ (8005e98 <TIM_Base_SetConfig+0x144>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d003      	beq.n	8005dee <TIM_Base_SetConfig+0x9a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a2c      	ldr	r2, [pc, #176]	@ (8005e9c <TIM_Base_SetConfig+0x148>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d108      	bne.n	8005e00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a16      	ldr	r2, [pc, #88]	@ (8005e80 <TIM_Base_SetConfig+0x12c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d00f      	beq.n	8005e4c <TIM_Base_SetConfig+0xf8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a18      	ldr	r2, [pc, #96]	@ (8005e90 <TIM_Base_SetConfig+0x13c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d00b      	beq.n	8005e4c <TIM_Base_SetConfig+0xf8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a17      	ldr	r2, [pc, #92]	@ (8005e94 <TIM_Base_SetConfig+0x140>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d007      	beq.n	8005e4c <TIM_Base_SetConfig+0xf8>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a16      	ldr	r2, [pc, #88]	@ (8005e98 <TIM_Base_SetConfig+0x144>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d003      	beq.n	8005e4c <TIM_Base_SetConfig+0xf8>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a15      	ldr	r2, [pc, #84]	@ (8005e9c <TIM_Base_SetConfig+0x148>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d103      	bne.n	8005e54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d105      	bne.n	8005e72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f023 0201 	bic.w	r2, r3, #1
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	611a      	str	r2, [r3, #16]
  }
}
 8005e72:	bf00      	nop
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	40012c00 	.word	0x40012c00
 8005e84:	40000400 	.word	0x40000400
 8005e88:	40000800 	.word	0x40000800
 8005e8c:	40000c00 	.word	0x40000c00
 8005e90:	40013400 	.word	0x40013400
 8005e94:	40014000 	.word	0x40014000
 8005e98:	40014400 	.word	0x40014400
 8005e9c:	40014800 	.word	0x40014800

08005ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f023 0201 	bic.w	r2, r3, #1
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f023 030a 	bic.w	r3, r3, #10
 8005edc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	621a      	str	r2, [r3, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b087      	sub	sp, #28
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	60f8      	str	r0, [r7, #12]
 8005f06:	60b9      	str	r1, [r7, #8]
 8005f08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	f023 0210 	bic.w	r2, r3, #16
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	031b      	lsls	r3, r3, #12
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	621a      	str	r2, [r3, #32]
}
 8005f52:	bf00      	nop
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b085      	sub	sp, #20
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	f043 0307 	orr.w	r3, r3, #7
 8005f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	609a      	str	r2, [r3, #8]
}
 8005f88:	bf00      	nop
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	021a      	lsls	r2, r3, #8
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	609a      	str	r2, [r3, #8]
}
 8005fc8:	bf00      	nop
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d101      	bne.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e068      	b.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a2e      	ldr	r2, [pc, #184]	@ (80060cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d004      	beq.n	8006020 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a2d      	ldr	r2, [pc, #180]	@ (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d108      	bne.n	8006032 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006026:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006038:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a1e      	ldr	r2, [pc, #120]	@ (80060cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d01d      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800605e:	d018      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a1b      	ldr	r2, [pc, #108]	@ (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d013      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1a      	ldr	r2, [pc, #104]	@ (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00e      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a18      	ldr	r2, [pc, #96]	@ (80060dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d009      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a13      	ldr	r2, [pc, #76]	@ (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d004      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a14      	ldr	r2, [pc, #80]	@ (80060e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d10c      	bne.n	80060ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40012c00 	.word	0x40012c00
 80060d0:	40013400 	.word	0x40013400
 80060d4:	40000400 	.word	0x40000400
 80060d8:	40000800 	.word	0x40000800
 80060dc:	40000c00 	.word	0x40000c00
 80060e0:	40014000 	.word	0x40014000

080060e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e040      	b.n	8006178 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d106      	bne.n	800610c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7fb f99c 	bl	8001444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2224      	movs	r2, #36	@ 0x24
 8006110:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0201 	bic.w	r2, r2, #1
 8006120:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fb6a 	bl	8006804 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f8af 	bl	8006294 <UART_SetConfig>
 8006136:	4603      	mov	r3, r0
 8006138:	2b01      	cmp	r3, #1
 800613a:	d101      	bne.n	8006140 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e01b      	b.n	8006178 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800614e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800615e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fbe9 	bl	8006948 <UART_CheckIdleState>
 8006176:	4603      	mov	r3, r0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08a      	sub	sp, #40	@ 0x28
 8006184:	af02      	add	r7, sp, #8
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	603b      	str	r3, [r7, #0]
 800618c:	4613      	mov	r3, r2
 800618e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006194:	2b20      	cmp	r3, #32
 8006196:	d177      	bne.n	8006288 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <HAL_UART_Transmit+0x24>
 800619e:	88fb      	ldrh	r3, [r7, #6]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e070      	b.n	800628a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2221      	movs	r2, #33	@ 0x21
 80061b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061b6:	f7fb fc1d 	bl	80019f4 <HAL_GetTick>
 80061ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	88fa      	ldrh	r2, [r7, #6]
 80061c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061d4:	d108      	bne.n	80061e8 <HAL_UART_Transmit+0x68>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d104      	bne.n	80061e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	e003      	b.n	80061f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061ec:	2300      	movs	r3, #0
 80061ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061f0:	e02f      	b.n	8006252 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2200      	movs	r2, #0
 80061fa:	2180      	movs	r1, #128	@ 0x80
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 fc4b 	bl	8006a98 <UART_WaitOnFlagUntilTimeout>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d004      	beq.n	8006212 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2220      	movs	r2, #32
 800620c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e03b      	b.n	800628a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10b      	bne.n	8006230 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	881a      	ldrh	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006224:	b292      	uxth	r2, r2
 8006226:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	3302      	adds	r3, #2
 800622c:	61bb      	str	r3, [r7, #24]
 800622e:	e007      	b.n	8006240 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	781a      	ldrb	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	3301      	adds	r3, #1
 800623e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006246:	b29b      	uxth	r3, r3
 8006248:	3b01      	subs	r3, #1
 800624a:	b29a      	uxth	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1c9      	bne.n	80061f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2200      	movs	r2, #0
 8006266:	2140      	movs	r1, #64	@ 0x40
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 fc15 	bl	8006a98 <UART_WaitOnFlagUntilTimeout>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d004      	beq.n	800627e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2220      	movs	r2, #32
 8006278:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e005      	b.n	800628a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2220      	movs	r2, #32
 8006282:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	e000      	b.n	800628a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006288:	2302      	movs	r3, #2
  }
}
 800628a:	4618      	mov	r0, r3
 800628c:	3720      	adds	r7, #32
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
	...

08006294 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006298:	b08a      	sub	sp, #40	@ 0x28
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	431a      	orrs	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	4ba4      	ldr	r3, [pc, #656]	@ (8006554 <UART_SetConfig+0x2c0>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	6812      	ldr	r2, [r2, #0]
 80062ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062cc:	430b      	orrs	r3, r1
 80062ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a99      	ldr	r2, [pc, #612]	@ (8006558 <UART_SetConfig+0x2c4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d004      	beq.n	8006300 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062fc:	4313      	orrs	r3, r2
 80062fe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006310:	430a      	orrs	r2, r1
 8006312:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a90      	ldr	r2, [pc, #576]	@ (800655c <UART_SetConfig+0x2c8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d126      	bne.n	800636c <UART_SetConfig+0xd8>
 800631e:	4b90      	ldr	r3, [pc, #576]	@ (8006560 <UART_SetConfig+0x2cc>)
 8006320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006324:	f003 0303 	and.w	r3, r3, #3
 8006328:	2b03      	cmp	r3, #3
 800632a:	d81b      	bhi.n	8006364 <UART_SetConfig+0xd0>
 800632c:	a201      	add	r2, pc, #4	@ (adr r2, 8006334 <UART_SetConfig+0xa0>)
 800632e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006332:	bf00      	nop
 8006334:	08006345 	.word	0x08006345
 8006338:	08006355 	.word	0x08006355
 800633c:	0800634d 	.word	0x0800634d
 8006340:	0800635d 	.word	0x0800635d
 8006344:	2301      	movs	r3, #1
 8006346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800634a:	e116      	b.n	800657a <UART_SetConfig+0x2e6>
 800634c:	2302      	movs	r3, #2
 800634e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006352:	e112      	b.n	800657a <UART_SetConfig+0x2e6>
 8006354:	2304      	movs	r3, #4
 8006356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800635a:	e10e      	b.n	800657a <UART_SetConfig+0x2e6>
 800635c:	2308      	movs	r3, #8
 800635e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006362:	e10a      	b.n	800657a <UART_SetConfig+0x2e6>
 8006364:	2310      	movs	r3, #16
 8006366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800636a:	e106      	b.n	800657a <UART_SetConfig+0x2e6>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a7c      	ldr	r2, [pc, #496]	@ (8006564 <UART_SetConfig+0x2d0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d138      	bne.n	80063e8 <UART_SetConfig+0x154>
 8006376:	4b7a      	ldr	r3, [pc, #488]	@ (8006560 <UART_SetConfig+0x2cc>)
 8006378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800637c:	f003 030c 	and.w	r3, r3, #12
 8006380:	2b0c      	cmp	r3, #12
 8006382:	d82d      	bhi.n	80063e0 <UART_SetConfig+0x14c>
 8006384:	a201      	add	r2, pc, #4	@ (adr r2, 800638c <UART_SetConfig+0xf8>)
 8006386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638a:	bf00      	nop
 800638c:	080063c1 	.word	0x080063c1
 8006390:	080063e1 	.word	0x080063e1
 8006394:	080063e1 	.word	0x080063e1
 8006398:	080063e1 	.word	0x080063e1
 800639c:	080063d1 	.word	0x080063d1
 80063a0:	080063e1 	.word	0x080063e1
 80063a4:	080063e1 	.word	0x080063e1
 80063a8:	080063e1 	.word	0x080063e1
 80063ac:	080063c9 	.word	0x080063c9
 80063b0:	080063e1 	.word	0x080063e1
 80063b4:	080063e1 	.word	0x080063e1
 80063b8:	080063e1 	.word	0x080063e1
 80063bc:	080063d9 	.word	0x080063d9
 80063c0:	2300      	movs	r3, #0
 80063c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063c6:	e0d8      	b.n	800657a <UART_SetConfig+0x2e6>
 80063c8:	2302      	movs	r3, #2
 80063ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ce:	e0d4      	b.n	800657a <UART_SetConfig+0x2e6>
 80063d0:	2304      	movs	r3, #4
 80063d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063d6:	e0d0      	b.n	800657a <UART_SetConfig+0x2e6>
 80063d8:	2308      	movs	r3, #8
 80063da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063de:	e0cc      	b.n	800657a <UART_SetConfig+0x2e6>
 80063e0:	2310      	movs	r3, #16
 80063e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063e6:	e0c8      	b.n	800657a <UART_SetConfig+0x2e6>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a5e      	ldr	r2, [pc, #376]	@ (8006568 <UART_SetConfig+0x2d4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d125      	bne.n	800643e <UART_SetConfig+0x1aa>
 80063f2:	4b5b      	ldr	r3, [pc, #364]	@ (8006560 <UART_SetConfig+0x2cc>)
 80063f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80063fc:	2b30      	cmp	r3, #48	@ 0x30
 80063fe:	d016      	beq.n	800642e <UART_SetConfig+0x19a>
 8006400:	2b30      	cmp	r3, #48	@ 0x30
 8006402:	d818      	bhi.n	8006436 <UART_SetConfig+0x1a2>
 8006404:	2b20      	cmp	r3, #32
 8006406:	d00a      	beq.n	800641e <UART_SetConfig+0x18a>
 8006408:	2b20      	cmp	r3, #32
 800640a:	d814      	bhi.n	8006436 <UART_SetConfig+0x1a2>
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <UART_SetConfig+0x182>
 8006410:	2b10      	cmp	r3, #16
 8006412:	d008      	beq.n	8006426 <UART_SetConfig+0x192>
 8006414:	e00f      	b.n	8006436 <UART_SetConfig+0x1a2>
 8006416:	2300      	movs	r3, #0
 8006418:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800641c:	e0ad      	b.n	800657a <UART_SetConfig+0x2e6>
 800641e:	2302      	movs	r3, #2
 8006420:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006424:	e0a9      	b.n	800657a <UART_SetConfig+0x2e6>
 8006426:	2304      	movs	r3, #4
 8006428:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800642c:	e0a5      	b.n	800657a <UART_SetConfig+0x2e6>
 800642e:	2308      	movs	r3, #8
 8006430:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006434:	e0a1      	b.n	800657a <UART_SetConfig+0x2e6>
 8006436:	2310      	movs	r3, #16
 8006438:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800643c:	e09d      	b.n	800657a <UART_SetConfig+0x2e6>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a4a      	ldr	r2, [pc, #296]	@ (800656c <UART_SetConfig+0x2d8>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d125      	bne.n	8006494 <UART_SetConfig+0x200>
 8006448:	4b45      	ldr	r3, [pc, #276]	@ (8006560 <UART_SetConfig+0x2cc>)
 800644a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800644e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006452:	2bc0      	cmp	r3, #192	@ 0xc0
 8006454:	d016      	beq.n	8006484 <UART_SetConfig+0x1f0>
 8006456:	2bc0      	cmp	r3, #192	@ 0xc0
 8006458:	d818      	bhi.n	800648c <UART_SetConfig+0x1f8>
 800645a:	2b80      	cmp	r3, #128	@ 0x80
 800645c:	d00a      	beq.n	8006474 <UART_SetConfig+0x1e0>
 800645e:	2b80      	cmp	r3, #128	@ 0x80
 8006460:	d814      	bhi.n	800648c <UART_SetConfig+0x1f8>
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <UART_SetConfig+0x1d8>
 8006466:	2b40      	cmp	r3, #64	@ 0x40
 8006468:	d008      	beq.n	800647c <UART_SetConfig+0x1e8>
 800646a:	e00f      	b.n	800648c <UART_SetConfig+0x1f8>
 800646c:	2300      	movs	r3, #0
 800646e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006472:	e082      	b.n	800657a <UART_SetConfig+0x2e6>
 8006474:	2302      	movs	r3, #2
 8006476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800647a:	e07e      	b.n	800657a <UART_SetConfig+0x2e6>
 800647c:	2304      	movs	r3, #4
 800647e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006482:	e07a      	b.n	800657a <UART_SetConfig+0x2e6>
 8006484:	2308      	movs	r3, #8
 8006486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800648a:	e076      	b.n	800657a <UART_SetConfig+0x2e6>
 800648c:	2310      	movs	r3, #16
 800648e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006492:	e072      	b.n	800657a <UART_SetConfig+0x2e6>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a35      	ldr	r2, [pc, #212]	@ (8006570 <UART_SetConfig+0x2dc>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d12a      	bne.n	80064f4 <UART_SetConfig+0x260>
 800649e:	4b30      	ldr	r3, [pc, #192]	@ (8006560 <UART_SetConfig+0x2cc>)
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064ac:	d01a      	beq.n	80064e4 <UART_SetConfig+0x250>
 80064ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064b2:	d81b      	bhi.n	80064ec <UART_SetConfig+0x258>
 80064b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064b8:	d00c      	beq.n	80064d4 <UART_SetConfig+0x240>
 80064ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064be:	d815      	bhi.n	80064ec <UART_SetConfig+0x258>
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <UART_SetConfig+0x238>
 80064c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064c8:	d008      	beq.n	80064dc <UART_SetConfig+0x248>
 80064ca:	e00f      	b.n	80064ec <UART_SetConfig+0x258>
 80064cc:	2300      	movs	r3, #0
 80064ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064d2:	e052      	b.n	800657a <UART_SetConfig+0x2e6>
 80064d4:	2302      	movs	r3, #2
 80064d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064da:	e04e      	b.n	800657a <UART_SetConfig+0x2e6>
 80064dc:	2304      	movs	r3, #4
 80064de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064e2:	e04a      	b.n	800657a <UART_SetConfig+0x2e6>
 80064e4:	2308      	movs	r3, #8
 80064e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ea:	e046      	b.n	800657a <UART_SetConfig+0x2e6>
 80064ec:	2310      	movs	r3, #16
 80064ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064f2:	e042      	b.n	800657a <UART_SetConfig+0x2e6>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a17      	ldr	r2, [pc, #92]	@ (8006558 <UART_SetConfig+0x2c4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d13a      	bne.n	8006574 <UART_SetConfig+0x2e0>
 80064fe:	4b18      	ldr	r3, [pc, #96]	@ (8006560 <UART_SetConfig+0x2cc>)
 8006500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006504:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006508:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800650c:	d01a      	beq.n	8006544 <UART_SetConfig+0x2b0>
 800650e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006512:	d81b      	bhi.n	800654c <UART_SetConfig+0x2b8>
 8006514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006518:	d00c      	beq.n	8006534 <UART_SetConfig+0x2a0>
 800651a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800651e:	d815      	bhi.n	800654c <UART_SetConfig+0x2b8>
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <UART_SetConfig+0x298>
 8006524:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006528:	d008      	beq.n	800653c <UART_SetConfig+0x2a8>
 800652a:	e00f      	b.n	800654c <UART_SetConfig+0x2b8>
 800652c:	2300      	movs	r3, #0
 800652e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006532:	e022      	b.n	800657a <UART_SetConfig+0x2e6>
 8006534:	2302      	movs	r3, #2
 8006536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800653a:	e01e      	b.n	800657a <UART_SetConfig+0x2e6>
 800653c:	2304      	movs	r3, #4
 800653e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006542:	e01a      	b.n	800657a <UART_SetConfig+0x2e6>
 8006544:	2308      	movs	r3, #8
 8006546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800654a:	e016      	b.n	800657a <UART_SetConfig+0x2e6>
 800654c:	2310      	movs	r3, #16
 800654e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006552:	e012      	b.n	800657a <UART_SetConfig+0x2e6>
 8006554:	efff69f3 	.word	0xefff69f3
 8006558:	40008000 	.word	0x40008000
 800655c:	40013800 	.word	0x40013800
 8006560:	40021000 	.word	0x40021000
 8006564:	40004400 	.word	0x40004400
 8006568:	40004800 	.word	0x40004800
 800656c:	40004c00 	.word	0x40004c00
 8006570:	40005000 	.word	0x40005000
 8006574:	2310      	movs	r3, #16
 8006576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a9f      	ldr	r2, [pc, #636]	@ (80067fc <UART_SetConfig+0x568>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d17a      	bne.n	800667a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006584:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006588:	2b08      	cmp	r3, #8
 800658a:	d824      	bhi.n	80065d6 <UART_SetConfig+0x342>
 800658c:	a201      	add	r2, pc, #4	@ (adr r2, 8006594 <UART_SetConfig+0x300>)
 800658e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006592:	bf00      	nop
 8006594:	080065b9 	.word	0x080065b9
 8006598:	080065d7 	.word	0x080065d7
 800659c:	080065c1 	.word	0x080065c1
 80065a0:	080065d7 	.word	0x080065d7
 80065a4:	080065c7 	.word	0x080065c7
 80065a8:	080065d7 	.word	0x080065d7
 80065ac:	080065d7 	.word	0x080065d7
 80065b0:	080065d7 	.word	0x080065d7
 80065b4:	080065cf 	.word	0x080065cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065b8:	f7fe fc40 	bl	8004e3c <HAL_RCC_GetPCLK1Freq>
 80065bc:	61f8      	str	r0, [r7, #28]
        break;
 80065be:	e010      	b.n	80065e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065c0:	4b8f      	ldr	r3, [pc, #572]	@ (8006800 <UART_SetConfig+0x56c>)
 80065c2:	61fb      	str	r3, [r7, #28]
        break;
 80065c4:	e00d      	b.n	80065e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065c6:	f7fe fba1 	bl	8004d0c <HAL_RCC_GetSysClockFreq>
 80065ca:	61f8      	str	r0, [r7, #28]
        break;
 80065cc:	e009      	b.n	80065e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065d2:	61fb      	str	r3, [r7, #28]
        break;
 80065d4:	e005      	b.n	80065e2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80065e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 80fb 	beq.w	80067e0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	4613      	mov	r3, r2
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	4413      	add	r3, r2
 80065f4:	69fa      	ldr	r2, [r7, #28]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d305      	bcc.n	8006606 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006600:	69fa      	ldr	r2, [r7, #28]
 8006602:	429a      	cmp	r2, r3
 8006604:	d903      	bls.n	800660e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800660c:	e0e8      	b.n	80067e0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	2200      	movs	r2, #0
 8006612:	461c      	mov	r4, r3
 8006614:	4615      	mov	r5, r2
 8006616:	f04f 0200 	mov.w	r2, #0
 800661a:	f04f 0300 	mov.w	r3, #0
 800661e:	022b      	lsls	r3, r5, #8
 8006620:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006624:	0222      	lsls	r2, r4, #8
 8006626:	68f9      	ldr	r1, [r7, #12]
 8006628:	6849      	ldr	r1, [r1, #4]
 800662a:	0849      	lsrs	r1, r1, #1
 800662c:	2000      	movs	r0, #0
 800662e:	4688      	mov	r8, r1
 8006630:	4681      	mov	r9, r0
 8006632:	eb12 0a08 	adds.w	sl, r2, r8
 8006636:	eb43 0b09 	adc.w	fp, r3, r9
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	603b      	str	r3, [r7, #0]
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006648:	4650      	mov	r0, sl
 800664a:	4659      	mov	r1, fp
 800664c:	f7f9 fe10 	bl	8000270 <__aeabi_uldivmod>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4613      	mov	r3, r2
 8006656:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800665e:	d308      	bcc.n	8006672 <UART_SetConfig+0x3de>
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006666:	d204      	bcs.n	8006672 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	60da      	str	r2, [r3, #12]
 8006670:	e0b6      	b.n	80067e0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006678:	e0b2      	b.n	80067e0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006682:	d15e      	bne.n	8006742 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006684:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006688:	2b08      	cmp	r3, #8
 800668a:	d828      	bhi.n	80066de <UART_SetConfig+0x44a>
 800668c:	a201      	add	r2, pc, #4	@ (adr r2, 8006694 <UART_SetConfig+0x400>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	080066b9 	.word	0x080066b9
 8006698:	080066c1 	.word	0x080066c1
 800669c:	080066c9 	.word	0x080066c9
 80066a0:	080066df 	.word	0x080066df
 80066a4:	080066cf 	.word	0x080066cf
 80066a8:	080066df 	.word	0x080066df
 80066ac:	080066df 	.word	0x080066df
 80066b0:	080066df 	.word	0x080066df
 80066b4:	080066d7 	.word	0x080066d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066b8:	f7fe fbc0 	bl	8004e3c <HAL_RCC_GetPCLK1Freq>
 80066bc:	61f8      	str	r0, [r7, #28]
        break;
 80066be:	e014      	b.n	80066ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066c0:	f7fe fbd2 	bl	8004e68 <HAL_RCC_GetPCLK2Freq>
 80066c4:	61f8      	str	r0, [r7, #28]
        break;
 80066c6:	e010      	b.n	80066ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066c8:	4b4d      	ldr	r3, [pc, #308]	@ (8006800 <UART_SetConfig+0x56c>)
 80066ca:	61fb      	str	r3, [r7, #28]
        break;
 80066cc:	e00d      	b.n	80066ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ce:	f7fe fb1d 	bl	8004d0c <HAL_RCC_GetSysClockFreq>
 80066d2:	61f8      	str	r0, [r7, #28]
        break;
 80066d4:	e009      	b.n	80066ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066da:	61fb      	str	r3, [r7, #28]
        break;
 80066dc:	e005      	b.n	80066ea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80066e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d077      	beq.n	80067e0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	005a      	lsls	r2, r3, #1
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	085b      	lsrs	r3, r3, #1
 80066fa:	441a      	add	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	fbb2 f3f3 	udiv	r3, r2, r3
 8006704:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	2b0f      	cmp	r3, #15
 800670a:	d916      	bls.n	800673a <UART_SetConfig+0x4a6>
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006712:	d212      	bcs.n	800673a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	b29b      	uxth	r3, r3
 8006718:	f023 030f 	bic.w	r3, r3, #15
 800671c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	085b      	lsrs	r3, r3, #1
 8006722:	b29b      	uxth	r3, r3
 8006724:	f003 0307 	and.w	r3, r3, #7
 8006728:	b29a      	uxth	r2, r3
 800672a:	8afb      	ldrh	r3, [r7, #22]
 800672c:	4313      	orrs	r3, r2
 800672e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	8afa      	ldrh	r2, [r7, #22]
 8006736:	60da      	str	r2, [r3, #12]
 8006738:	e052      	b.n	80067e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006740:	e04e      	b.n	80067e0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006742:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006746:	2b08      	cmp	r3, #8
 8006748:	d827      	bhi.n	800679a <UART_SetConfig+0x506>
 800674a:	a201      	add	r2, pc, #4	@ (adr r2, 8006750 <UART_SetConfig+0x4bc>)
 800674c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006750:	08006775 	.word	0x08006775
 8006754:	0800677d 	.word	0x0800677d
 8006758:	08006785 	.word	0x08006785
 800675c:	0800679b 	.word	0x0800679b
 8006760:	0800678b 	.word	0x0800678b
 8006764:	0800679b 	.word	0x0800679b
 8006768:	0800679b 	.word	0x0800679b
 800676c:	0800679b 	.word	0x0800679b
 8006770:	08006793 	.word	0x08006793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006774:	f7fe fb62 	bl	8004e3c <HAL_RCC_GetPCLK1Freq>
 8006778:	61f8      	str	r0, [r7, #28]
        break;
 800677a:	e014      	b.n	80067a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800677c:	f7fe fb74 	bl	8004e68 <HAL_RCC_GetPCLK2Freq>
 8006780:	61f8      	str	r0, [r7, #28]
        break;
 8006782:	e010      	b.n	80067a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006784:	4b1e      	ldr	r3, [pc, #120]	@ (8006800 <UART_SetConfig+0x56c>)
 8006786:	61fb      	str	r3, [r7, #28]
        break;
 8006788:	e00d      	b.n	80067a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800678a:	f7fe fabf 	bl	8004d0c <HAL_RCC_GetSysClockFreq>
 800678e:	61f8      	str	r0, [r7, #28]
        break;
 8006790:	e009      	b.n	80067a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006792:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006796:	61fb      	str	r3, [r7, #28]
        break;
 8006798:	e005      	b.n	80067a6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800679a:	2300      	movs	r3, #0
 800679c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80067a4:	bf00      	nop
    }

    if (pclk != 0U)
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d019      	beq.n	80067e0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	085a      	lsrs	r2, r3, #1
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	441a      	add	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80067be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	2b0f      	cmp	r3, #15
 80067c4:	d909      	bls.n	80067da <UART_SetConfig+0x546>
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067cc:	d205      	bcs.n	80067da <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60da      	str	r2, [r3, #12]
 80067d8:	e002      	b.n	80067e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80067ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3728      	adds	r7, #40	@ 0x28
 80067f4:	46bd      	mov	sp, r7
 80067f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067fa:	bf00      	nop
 80067fc:	40008000 	.word	0x40008000
 8006800:	00f42400 	.word	0x00f42400

08006804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006810:	f003 0308 	and.w	r3, r3, #8
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00a      	beq.n	800682e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006898:	f003 0310 	and.w	r3, r3, #16
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00a      	beq.n	80068b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00a      	beq.n	80068d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	430a      	orrs	r2, r1
 80068d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d01a      	beq.n	800691a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006902:	d10a      	bne.n	800691a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00a      	beq.n	800693c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	605a      	str	r2, [r3, #4]
  }
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b098      	sub	sp, #96	@ 0x60
 800694c:	af02      	add	r7, sp, #8
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006958:	f7fb f84c 	bl	80019f4 <HAL_GetTick>
 800695c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0308 	and.w	r3, r3, #8
 8006968:	2b08      	cmp	r3, #8
 800696a:	d12e      	bne.n	80069ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800696c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006974:	2200      	movs	r2, #0
 8006976:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f88c 	bl	8006a98 <UART_WaitOnFlagUntilTimeout>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d021      	beq.n	80069ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006996:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800699a:	653b      	str	r3, [r7, #80]	@ 0x50
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	461a      	mov	r2, r3
 80069a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80069a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e6      	bne.n	8006986 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2220      	movs	r2, #32
 80069bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e062      	b.n	8006a90 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d149      	bne.n	8006a6c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069e0:	2200      	movs	r2, #0
 80069e2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f856 	bl	8006a98 <UART_WaitOnFlagUntilTimeout>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d03c      	beq.n	8006a6c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fa:	e853 3f00 	ldrex	r3, [r3]
 80069fe:	623b      	str	r3, [r7, #32]
   return(result);
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a10:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a12:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a18:	e841 2300 	strex	r3, r2, [r1]
 8006a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1e6      	bne.n	80069f2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3308      	adds	r3, #8
 8006a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	e853 3f00 	ldrex	r3, [r3]
 8006a32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0301 	bic.w	r3, r3, #1
 8006a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3308      	adds	r3, #8
 8006a42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a44:	61fa      	str	r2, [r7, #28]
 8006a46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a48:	69b9      	ldr	r1, [r7, #24]
 8006a4a:	69fa      	ldr	r2, [r7, #28]
 8006a4c:	e841 2300 	strex	r3, r2, [r1]
 8006a50:	617b      	str	r3, [r7, #20]
   return(result);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1e5      	bne.n	8006a24 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e011      	b.n	8006a90 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3758      	adds	r7, #88	@ 0x58
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	603b      	str	r3, [r7, #0]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aa8:	e04f      	b.n	8006b4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab0:	d04b      	beq.n	8006b4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ab2:	f7fa ff9f 	bl	80019f4 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d302      	bcc.n	8006ac8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e04e      	b.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0304 	and.w	r3, r3, #4
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d037      	beq.n	8006b4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2b80      	cmp	r3, #128	@ 0x80
 8006ade:	d034      	beq.n	8006b4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b40      	cmp	r3, #64	@ 0x40
 8006ae4:	d031      	beq.n	8006b4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	f003 0308 	and.w	r3, r3, #8
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d110      	bne.n	8006b16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2208      	movs	r2, #8
 8006afa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 f838 	bl	8006b72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2208      	movs	r2, #8
 8006b06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e029      	b.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b24:	d111      	bne.n	8006b4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 f81e 	bl	8006b72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e00f      	b.n	8006b6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	4013      	ands	r3, r2
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	bf0c      	ite	eq
 8006b5a:	2301      	moveq	r3, #1
 8006b5c:	2300      	movne	r3, #0
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	461a      	mov	r2, r3
 8006b62:	79fb      	ldrb	r3, [r7, #7]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d0a0      	beq.n	8006aaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b095      	sub	sp, #84	@ 0x54
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b82:	e853 3f00 	ldrex	r3, [r3]
 8006b86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
 8006b96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b98:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e6      	bne.n	8006b7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	e853 3f00 	ldrex	r3, [r3]
 8006bba:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	f023 0301 	bic.w	r3, r3, #1
 8006bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3308      	adds	r3, #8
 8006bca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bd4:	e841 2300 	strex	r3, r2, [r1]
 8006bd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e5      	bne.n	8006bac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d118      	bne.n	8006c1a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	e853 3f00 	ldrex	r3, [r3]
 8006bf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	f023 0310 	bic.w	r3, r3, #16
 8006bfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	461a      	mov	r2, r3
 8006c04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c06:	61bb      	str	r3, [r7, #24]
 8006c08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	6979      	ldr	r1, [r7, #20]
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	613b      	str	r3, [r7, #16]
   return(result);
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1e6      	bne.n	8006be8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006c2e:	bf00      	nop
 8006c30:	3754      	adds	r7, #84	@ 0x54
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	f107 001c 	add.w	r0, r7, #28
 8006c48:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fa69 	bl	8007130 <USB_CoreReset>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006c62:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d106      	bne.n	8006c78 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c76:	e005      	b.n	8006c84 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c90:	b004      	add	sp, #16
 8006c92:	4770      	bx	lr

08006c94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f023 0201 	bic.w	r2, r3, #1
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b084      	sub	sp, #16
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cd2:	78fb      	ldrb	r3, [r7, #3]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d115      	bne.n	8006d04 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ce4:	200a      	movs	r0, #10
 8006ce6:	f7fa fe91 	bl	8001a0c <HAL_Delay>
      ms += 10U;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	330a      	adds	r3, #10
 8006cee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fa0f 	bl	8007114 <USB_GetMode>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d01e      	beq.n	8006d3a <USB_SetCurrentMode+0x84>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d00:	d9f0      	bls.n	8006ce4 <USB_SetCurrentMode+0x2e>
 8006d02:	e01a      	b.n	8006d3a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d04:	78fb      	ldrb	r3, [r7, #3]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d115      	bne.n	8006d36 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d16:	200a      	movs	r0, #10
 8006d18:	f7fa fe78 	bl	8001a0c <HAL_Delay>
      ms += 10U;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	330a      	adds	r3, #10
 8006d20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f9f6 	bl	8007114 <USB_GetMode>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d005      	beq.n	8006d3a <USB_SetCurrentMode+0x84>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d32:	d9f0      	bls.n	8006d16 <USB_SetCurrentMode+0x60>
 8006d34:	e001      	b.n	8006d3a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e005      	b.n	8006d46 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2bc8      	cmp	r3, #200	@ 0xc8
 8006d3e:	d101      	bne.n	8006d44 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e000      	b.n	8006d46 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
	...

08006d50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d50:	b084      	sub	sp, #16
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b086      	sub	sp, #24
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	613b      	str	r3, [r7, #16]
 8006d6e:	e009      	b.n	8006d84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	3340      	adds	r3, #64	@ 0x40
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	3301      	adds	r3, #1
 8006d82:	613b      	str	r3, [r7, #16]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	2b0e      	cmp	r3, #14
 8006d88:	d9f2      	bls.n	8006d70 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d8a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d11c      	bne.n	8006dcc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006da0:	f043 0302 	orr.w	r3, r3, #2
 8006da4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006daa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	601a      	str	r2, [r3, #0]
 8006dca:	e005      	b.n	8006dd8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006dde:	461a      	mov	r2, r3
 8006de0:	2300      	movs	r3, #0
 8006de2:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006de4:	2103      	movs	r1, #3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f95a 	bl	80070a0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006dec:	2110      	movs	r1, #16
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f8f6 	bl	8006fe0 <USB_FlushTxFifo>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f920 	bl	8007044 <USB_FlushRxFifo>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e14:	461a      	mov	r2, r3
 8006e16:	2300      	movs	r3, #0
 8006e18:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e20:	461a      	mov	r2, r3
 8006e22:	2300      	movs	r3, #0
 8006e24:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	2300      	movs	r3, #0
 8006e30:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e32:	2300      	movs	r3, #0
 8006e34:	613b      	str	r3, [r7, #16]
 8006e36:	e043      	b.n	8006ec0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e4e:	d118      	bne.n	8006e82 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10a      	bne.n	8006e6c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	015a      	lsls	r2, r3, #5
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e62:	461a      	mov	r2, r3
 8006e64:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	e013      	b.n	8006e94 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e78:	461a      	mov	r2, r3
 8006e7a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	e008      	b.n	8006e94 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e8e:	461a      	mov	r2, r3
 8006e90:	2300      	movs	r3, #0
 8006e92:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006eb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d3b5      	bcc.n	8006e38 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ecc:	2300      	movs	r3, #0
 8006ece:	613b      	str	r3, [r7, #16]
 8006ed0:	e043      	b.n	8006f5a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ee8:	d118      	bne.n	8006f1c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006efc:	461a      	mov	r2, r3
 8006efe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	e013      	b.n	8006f2e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f12:	461a      	mov	r2, r3
 8006f14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	e008      	b.n	8006f2e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f28:	461a      	mov	r2, r3
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	3301      	adds	r3, #1
 8006f58:	613b      	str	r3, [r7, #16]
 8006f5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f5e:	461a      	mov	r2, r3
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d3b5      	bcc.n	8006ed2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f78:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006f86:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	f043 0210 	orr.w	r2, r3, #16
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	699a      	ldr	r2, [r3, #24]
 8006f98:	4b10      	ldr	r3, [pc, #64]	@ (8006fdc <USB_DevInit+0x28c>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006fa0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d005      	beq.n	8006fb4 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	f043 0208 	orr.w	r2, r3, #8
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fb4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d107      	bne.n	8006fcc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fc4:	f043 0304 	orr.w	r3, r3, #4
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fd8:	b004      	add	sp, #16
 8006fda:	4770      	bx	lr
 8006fdc:	803c3800 	.word	0x803c3800

08006fe0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ffa:	d901      	bls.n	8007000 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e01b      	b.n	8007038 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	daf2      	bge.n	8006fee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	019b      	lsls	r3, r3, #6
 8007010:	f043 0220 	orr.w	r2, r3, #32
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3301      	adds	r3, #1
 800701c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007024:	d901      	bls.n	800702a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e006      	b.n	8007038 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	f003 0320 	and.w	r3, r3, #32
 8007032:	2b20      	cmp	r3, #32
 8007034:	d0f0      	beq.n	8007018 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	3301      	adds	r3, #1
 8007054:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800705c:	d901      	bls.n	8007062 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e018      	b.n	8007094 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	2b00      	cmp	r3, #0
 8007068:	daf2      	bge.n	8007050 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2210      	movs	r2, #16
 8007072:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	3301      	adds	r3, #1
 8007078:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007080:	d901      	bls.n	8007086 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e006      	b.n	8007094 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	f003 0310 	and.w	r3, r3, #16
 800708e:	2b10      	cmp	r3, #16
 8007090:	d0f0      	beq.n	8007074 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	78fb      	ldrb	r3, [r7, #3]
 80070ba:	68f9      	ldr	r1, [r7, #12]
 80070bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070c0:	4313      	orrs	r3, r2
 80070c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b085      	sub	sp, #20
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80070ec:	f023 0303 	bic.w	r3, r3, #3
 80070f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007100:	f043 0302 	orr.w	r3, r3, #2
 8007104:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	f003 0301 	and.w	r3, r3, #1
}
 8007124:	4618      	mov	r0, r3
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3301      	adds	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007148:	d901      	bls.n	800714e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e01b      	b.n	8007186 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	daf2      	bge.n	800713c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	f043 0201 	orr.w	r2, r3, #1
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3301      	adds	r3, #1
 800716a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007172:	d901      	bls.n	8007178 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e006      	b.n	8007186 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b01      	cmp	r3, #1
 8007182:	d0f0      	beq.n	8007166 <USB_CoreReset+0x36>

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
	...

08007194 <__NVIC_SetPriority>:
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	4603      	mov	r3, r0
 800719c:	6039      	str	r1, [r7, #0]
 800719e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	db0a      	blt.n	80071be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	490c      	ldr	r1, [pc, #48]	@ (80071e0 <__NVIC_SetPriority+0x4c>)
 80071ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071b2:	0112      	lsls	r2, r2, #4
 80071b4:	b2d2      	uxtb	r2, r2
 80071b6:	440b      	add	r3, r1
 80071b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80071bc:	e00a      	b.n	80071d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	4908      	ldr	r1, [pc, #32]	@ (80071e4 <__NVIC_SetPriority+0x50>)
 80071c4:	79fb      	ldrb	r3, [r7, #7]
 80071c6:	f003 030f 	and.w	r3, r3, #15
 80071ca:	3b04      	subs	r3, #4
 80071cc:	0112      	lsls	r2, r2, #4
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	440b      	add	r3, r1
 80071d2:	761a      	strb	r2, [r3, #24]
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	e000e100 	.word	0xe000e100
 80071e4:	e000ed00 	.word	0xe000ed00

080071e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80071e8:	b580      	push	{r7, lr}
 80071ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80071ec:	2100      	movs	r1, #0
 80071ee:	f06f 0004 	mvn.w	r0, #4
 80071f2:	f7ff ffcf 	bl	8007194 <__NVIC_SetPriority>
#endif
}
 80071f6:	bf00      	nop
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007202:	f3ef 8305 	mrs	r3, IPSR
 8007206:	603b      	str	r3, [r7, #0]
  return(result);
 8007208:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800720e:	f06f 0305 	mvn.w	r3, #5
 8007212:	607b      	str	r3, [r7, #4]
 8007214:	e00c      	b.n	8007230 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007216:	4b0a      	ldr	r3, [pc, #40]	@ (8007240 <osKernelInitialize+0x44>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d105      	bne.n	800722a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800721e:	4b08      	ldr	r3, [pc, #32]	@ (8007240 <osKernelInitialize+0x44>)
 8007220:	2201      	movs	r2, #1
 8007222:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007224:	2300      	movs	r3, #0
 8007226:	607b      	str	r3, [r7, #4]
 8007228:	e002      	b.n	8007230 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800722a:	f04f 33ff 	mov.w	r3, #4294967295
 800722e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007230:	687b      	ldr	r3, [r7, #4]
}
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	20000ae0 	.word	0x20000ae0

08007244 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800724a:	f3ef 8305 	mrs	r3, IPSR
 800724e:	603b      	str	r3, [r7, #0]
  return(result);
 8007250:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007256:	f06f 0305 	mvn.w	r3, #5
 800725a:	607b      	str	r3, [r7, #4]
 800725c:	e010      	b.n	8007280 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800725e:	4b0b      	ldr	r3, [pc, #44]	@ (800728c <osKernelStart+0x48>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d109      	bne.n	800727a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007266:	f7ff ffbf 	bl	80071e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800726a:	4b08      	ldr	r3, [pc, #32]	@ (800728c <osKernelStart+0x48>)
 800726c:	2202      	movs	r2, #2
 800726e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007270:	f001 fa18 	bl	80086a4 <vTaskStartScheduler>
      stat = osOK;
 8007274:	2300      	movs	r3, #0
 8007276:	607b      	str	r3, [r7, #4]
 8007278:	e002      	b.n	8007280 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800727a:	f04f 33ff 	mov.w	r3, #4294967295
 800727e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007280:	687b      	ldr	r3, [r7, #4]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20000ae0 	.word	0x20000ae0

08007290 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007290:	b580      	push	{r7, lr}
 8007292:	b08e      	sub	sp, #56	@ 0x38
 8007294:	af04      	add	r7, sp, #16
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800729c:	2300      	movs	r3, #0
 800729e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072a0:	f3ef 8305 	mrs	r3, IPSR
 80072a4:	617b      	str	r3, [r7, #20]
  return(result);
 80072a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d17e      	bne.n	80073aa <osThreadNew+0x11a>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d07b      	beq.n	80073aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80072b2:	2380      	movs	r3, #128	@ 0x80
 80072b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80072b6:	2318      	movs	r3, #24
 80072b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80072be:	f04f 33ff 	mov.w	r3, #4294967295
 80072c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d045      	beq.n	8007356 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <osThreadNew+0x48>
        name = attr->name;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d008      	beq.n	80072fe <osThreadNew+0x6e>
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	2b38      	cmp	r3, #56	@ 0x38
 80072f0:	d805      	bhi.n	80072fe <osThreadNew+0x6e>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <osThreadNew+0x72>
        return (NULL);
 80072fe:	2300      	movs	r3, #0
 8007300:	e054      	b.n	80073ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	089b      	lsrs	r3, r3, #2
 8007310:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00e      	beq.n	8007338 <osThreadNew+0xa8>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	2b5b      	cmp	r3, #91	@ 0x5b
 8007320:	d90a      	bls.n	8007338 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007326:	2b00      	cmp	r3, #0
 8007328:	d006      	beq.n	8007338 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <osThreadNew+0xa8>
        mem = 1;
 8007332:	2301      	movs	r3, #1
 8007334:	61bb      	str	r3, [r7, #24]
 8007336:	e010      	b.n	800735a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10c      	bne.n	800735a <osThreadNew+0xca>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d108      	bne.n	800735a <osThreadNew+0xca>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d104      	bne.n	800735a <osThreadNew+0xca>
          mem = 0;
 8007350:	2300      	movs	r3, #0
 8007352:	61bb      	str	r3, [r7, #24]
 8007354:	e001      	b.n	800735a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007356:	2300      	movs	r3, #0
 8007358:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d110      	bne.n	8007382 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007368:	9202      	str	r2, [sp, #8]
 800736a:	9301      	str	r3, [sp, #4]
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	6a3a      	ldr	r2, [r7, #32]
 8007374:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f000 ffee 	bl	8008358 <xTaskCreateStatic>
 800737c:	4603      	mov	r3, r0
 800737e:	613b      	str	r3, [r7, #16]
 8007380:	e013      	b.n	80073aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d110      	bne.n	80073aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	b29a      	uxth	r2, r3
 800738c:	f107 0310 	add.w	r3, r7, #16
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f001 f83c 	bl	8008418 <xTaskCreate>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d001      	beq.n	80073aa <osThreadNew+0x11a>
            hTask = NULL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80073aa:	693b      	ldr	r3, [r7, #16]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3728      	adds	r7, #40	@ 0x28
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b08a      	sub	sp, #40	@ 0x28
 80073b8:	af02      	add	r7, sp, #8
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80073c0:	2300      	movs	r3, #0
 80073c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073c4:	f3ef 8305 	mrs	r3, IPSR
 80073c8:	613b      	str	r3, [r7, #16]
  return(result);
 80073ca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d15f      	bne.n	8007490 <osMessageQueueNew+0xdc>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d05c      	beq.n	8007490 <osMessageQueueNew+0xdc>
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d059      	beq.n	8007490 <osMessageQueueNew+0xdc>
    mem = -1;
 80073dc:	f04f 33ff 	mov.w	r3, #4294967295
 80073e0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d029      	beq.n	800743c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d012      	beq.n	8007416 <osMessageQueueNew+0x62>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	2b4f      	cmp	r3, #79	@ 0x4f
 80073f6:	d90e      	bls.n	8007416 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00a      	beq.n	8007416 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	695a      	ldr	r2, [r3, #20]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	68b9      	ldr	r1, [r7, #8]
 8007408:	fb01 f303 	mul.w	r3, r1, r3
 800740c:	429a      	cmp	r2, r3
 800740e:	d302      	bcc.n	8007416 <osMessageQueueNew+0x62>
        mem = 1;
 8007410:	2301      	movs	r3, #1
 8007412:	61bb      	str	r3, [r7, #24]
 8007414:	e014      	b.n	8007440 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d110      	bne.n	8007440 <osMessageQueueNew+0x8c>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10c      	bne.n	8007440 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800742a:	2b00      	cmp	r3, #0
 800742c:	d108      	bne.n	8007440 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d104      	bne.n	8007440 <osMessageQueueNew+0x8c>
          mem = 0;
 8007436:	2300      	movs	r3, #0
 8007438:	61bb      	str	r3, [r7, #24]
 800743a:	e001      	b.n	8007440 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800743c:	2300      	movs	r3, #0
 800743e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d10b      	bne.n	800745e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	691a      	ldr	r2, [r3, #16]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	2100      	movs	r1, #0
 8007450:	9100      	str	r1, [sp, #0]
 8007452:	68b9      	ldr	r1, [r7, #8]
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 fa31 	bl	80078bc <xQueueGenericCreateStatic>
 800745a:	61f8      	str	r0, [r7, #28]
 800745c:	e008      	b.n	8007470 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d105      	bne.n	8007470 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007464:	2200      	movs	r2, #0
 8007466:	68b9      	ldr	r1, [r7, #8]
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 faa4 	bl	80079b6 <xQueueGenericCreate>
 800746e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00c      	beq.n	8007490 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <osMessageQueueNew+0xd0>
        name = attr->name;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	617b      	str	r3, [r7, #20]
 8007482:	e001      	b.n	8007488 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007484:	2300      	movs	r3, #0
 8007486:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007488:	6979      	ldr	r1, [r7, #20]
 800748a:	69f8      	ldr	r0, [r7, #28]
 800748c:	f000 ff06 	bl	800829c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007490:	69fb      	ldr	r3, [r7, #28]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3720      	adds	r7, #32
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	603b      	str	r3, [r7, #0]
 80074a8:	4613      	mov	r3, r2
 80074aa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074b4:	f3ef 8305 	mrs	r3, IPSR
 80074b8:	617b      	str	r3, [r7, #20]
  return(result);
 80074ba:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d028      	beq.n	8007512 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d005      	beq.n	80074d2 <osMessageQueuePut+0x36>
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <osMessageQueuePut+0x36>
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d003      	beq.n	80074da <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80074d2:	f06f 0303 	mvn.w	r3, #3
 80074d6:	61fb      	str	r3, [r7, #28]
 80074d8:	e038      	b.n	800754c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80074da:	2300      	movs	r3, #0
 80074dc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80074de:	f107 0210 	add.w	r2, r7, #16
 80074e2:	2300      	movs	r3, #0
 80074e4:	68b9      	ldr	r1, [r7, #8]
 80074e6:	69b8      	ldr	r0, [r7, #24]
 80074e8:	f000 fbc6 	bl	8007c78 <xQueueGenericSendFromISR>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d003      	beq.n	80074fa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80074f2:	f06f 0302 	mvn.w	r3, #2
 80074f6:	61fb      	str	r3, [r7, #28]
 80074f8:	e028      	b.n	800754c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d025      	beq.n	800754c <osMessageQueuePut+0xb0>
 8007500:	4b15      	ldr	r3, [pc, #84]	@ (8007558 <osMessageQueuePut+0xbc>)
 8007502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	e01c      	b.n	800754c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <osMessageQueuePut+0x82>
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d103      	bne.n	8007526 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800751e:	f06f 0303 	mvn.w	r3, #3
 8007522:	61fb      	str	r3, [r7, #28]
 8007524:	e012      	b.n	800754c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007526:	2300      	movs	r3, #0
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	68b9      	ldr	r1, [r7, #8]
 800752c:	69b8      	ldr	r0, [r7, #24]
 800752e:	f000 faa1 	bl	8007a74 <xQueueGenericSend>
 8007532:	4603      	mov	r3, r0
 8007534:	2b01      	cmp	r3, #1
 8007536:	d009      	beq.n	800754c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d003      	beq.n	8007546 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800753e:	f06f 0301 	mvn.w	r3, #1
 8007542:	61fb      	str	r3, [r7, #28]
 8007544:	e002      	b.n	800754c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007546:	f06f 0302 	mvn.w	r3, #2
 800754a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800754c:	69fb      	ldr	r3, [r7, #28]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3720      	adds	r7, #32
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	e000ed04 	.word	0xe000ed04

0800755c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800755c:	b580      	push	{r7, lr}
 800755e:	b088      	sub	sp, #32
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
 8007568:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800756e:	2300      	movs	r3, #0
 8007570:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007572:	f3ef 8305 	mrs	r3, IPSR
 8007576:	617b      	str	r3, [r7, #20]
  return(result);
 8007578:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800757a:	2b00      	cmp	r3, #0
 800757c:	d028      	beq.n	80075d0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d005      	beq.n	8007590 <osMessageQueueGet+0x34>
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <osMessageQueueGet+0x34>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007590:	f06f 0303 	mvn.w	r3, #3
 8007594:	61fb      	str	r3, [r7, #28]
 8007596:	e037      	b.n	8007608 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007598:	2300      	movs	r3, #0
 800759a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800759c:	f107 0310 	add.w	r3, r7, #16
 80075a0:	461a      	mov	r2, r3
 80075a2:	68b9      	ldr	r1, [r7, #8]
 80075a4:	69b8      	ldr	r0, [r7, #24]
 80075a6:	f000 fce7 	bl	8007f78 <xQueueReceiveFromISR>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d003      	beq.n	80075b8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80075b0:	f06f 0302 	mvn.w	r3, #2
 80075b4:	61fb      	str	r3, [r7, #28]
 80075b6:	e027      	b.n	8007608 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d024      	beq.n	8007608 <osMessageQueueGet+0xac>
 80075be:	4b15      	ldr	r3, [pc, #84]	@ (8007614 <osMessageQueueGet+0xb8>)
 80075c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	e01b      	b.n	8007608 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d002      	beq.n	80075dc <osMessageQueueGet+0x80>
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d103      	bne.n	80075e4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80075dc:	f06f 0303 	mvn.w	r3, #3
 80075e0:	61fb      	str	r3, [r7, #28]
 80075e2:	e011      	b.n	8007608 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	68b9      	ldr	r1, [r7, #8]
 80075e8:	69b8      	ldr	r0, [r7, #24]
 80075ea:	f000 fbe3 	bl	8007db4 <xQueueReceive>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d009      	beq.n	8007608 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d003      	beq.n	8007602 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80075fa:	f06f 0301 	mvn.w	r3, #1
 80075fe:	61fb      	str	r3, [r7, #28]
 8007600:	e002      	b.n	8007608 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007602:	f06f 0302 	mvn.w	r3, #2
 8007606:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007608:	69fb      	ldr	r3, [r7, #28]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3720      	adds	r7, #32
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	e000ed04 	.word	0xe000ed04

08007618 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4a07      	ldr	r2, [pc, #28]	@ (8007644 <vApplicationGetIdleTaskMemory+0x2c>)
 8007628:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	4a06      	ldr	r2, [pc, #24]	@ (8007648 <vApplicationGetIdleTaskMemory+0x30>)
 800762e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2280      	movs	r2, #128	@ 0x80
 8007634:	601a      	str	r2, [r3, #0]
}
 8007636:	bf00      	nop
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	20000ae4 	.word	0x20000ae4
 8007648:	20000b40 	.word	0x20000b40

0800764c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4a07      	ldr	r2, [pc, #28]	@ (8007678 <vApplicationGetTimerTaskMemory+0x2c>)
 800765c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	4a06      	ldr	r2, [pc, #24]	@ (800767c <vApplicationGetTimerTaskMemory+0x30>)
 8007662:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800766a:	601a      	str	r2, [r3, #0]
}
 800766c:	bf00      	nop
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	20000d40 	.word	0x20000d40
 800767c:	20000d9c 	.word	0x20000d9c

08007680 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f103 0208 	add.w	r2, r3, #8
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f04f 32ff 	mov.w	r2, #4294967295
 8007698:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f103 0208 	add.w	r2, r3, #8
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f103 0208 	add.w	r2, r3, #8
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076ce:	bf00      	nop
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076da:	b480      	push	{r7}
 80076dc:	b085      	sub	sp, #20
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	689a      	ldr	r2, [r3, #8]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]
}
 8007716:	bf00      	nop
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007722:	b480      	push	{r7}
 8007724:	b085      	sub	sp, #20
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007738:	d103      	bne.n	8007742 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	e00c      	b.n	800775c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3308      	adds	r3, #8
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	e002      	b.n	8007750 <vListInsert+0x2e>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	429a      	cmp	r2, r3
 800775a:	d2f6      	bcs.n	800774a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	601a      	str	r2, [r3, #0]
}
 8007788:	bf00      	nop
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	6892      	ldr	r2, [r2, #8]
 80077aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	6852      	ldr	r2, [r2, #4]
 80077b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d103      	bne.n	80077c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	689a      	ldr	r2, [r3, #8]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	1e5a      	subs	r2, r3, #1
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10b      	bne.n	8007814 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80077fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800780e:	bf00      	nop
 8007810:	bf00      	nop
 8007812:	e7fd      	b.n	8007810 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007814:	f002 f900 	bl	8009a18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007820:	68f9      	ldr	r1, [r7, #12]
 8007822:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007824:	fb01 f303 	mul.w	r3, r1, r3
 8007828:	441a      	add	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007844:	3b01      	subs	r3, #1
 8007846:	68f9      	ldr	r1, [r7, #12]
 8007848:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800784a:	fb01 f303 	mul.w	r3, r1, r3
 800784e:	441a      	add	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	22ff      	movs	r2, #255	@ 0xff
 8007858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	22ff      	movs	r2, #255	@ 0xff
 8007860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d114      	bne.n	8007894 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d01a      	beq.n	80078a8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3310      	adds	r3, #16
 8007876:	4618      	mov	r0, r3
 8007878:	f001 f9a2 	bl	8008bc0 <xTaskRemoveFromEventList>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d012      	beq.n	80078a8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007882:	4b0d      	ldr	r3, [pc, #52]	@ (80078b8 <xQueueGenericReset+0xd0>)
 8007884:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007888:	601a      	str	r2, [r3, #0]
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	e009      	b.n	80078a8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	3310      	adds	r3, #16
 8007898:	4618      	mov	r0, r3
 800789a:	f7ff fef1 	bl	8007680 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	3324      	adds	r3, #36	@ 0x24
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7ff feec 	bl	8007680 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80078a8:	f002 f8e8 	bl	8009a7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078ac:	2301      	movs	r3, #1
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	e000ed04 	.word	0xe000ed04

080078bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08e      	sub	sp, #56	@ 0x38
 80078c0:	af02      	add	r7, sp, #8
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10b      	bne.n	80078e8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80078e2:	bf00      	nop
 80078e4:	bf00      	nop
 80078e6:	e7fd      	b.n	80078e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10b      	bne.n	8007906 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80078ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007900:	bf00      	nop
 8007902:	bf00      	nop
 8007904:	e7fd      	b.n	8007902 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d002      	beq.n	8007912 <xQueueGenericCreateStatic+0x56>
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <xQueueGenericCreateStatic+0x5a>
 8007912:	2301      	movs	r3, #1
 8007914:	e000      	b.n	8007918 <xQueueGenericCreateStatic+0x5c>
 8007916:	2300      	movs	r3, #0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10b      	bne.n	8007934 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	623b      	str	r3, [r7, #32]
}
 800792e:	bf00      	nop
 8007930:	bf00      	nop
 8007932:	e7fd      	b.n	8007930 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d102      	bne.n	8007940 <xQueueGenericCreateStatic+0x84>
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <xQueueGenericCreateStatic+0x88>
 8007940:	2301      	movs	r3, #1
 8007942:	e000      	b.n	8007946 <xQueueGenericCreateStatic+0x8a>
 8007944:	2300      	movs	r3, #0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10b      	bne.n	8007962 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	61fb      	str	r3, [r7, #28]
}
 800795c:	bf00      	nop
 800795e:	bf00      	nop
 8007960:	e7fd      	b.n	800795e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007962:	2350      	movs	r3, #80	@ 0x50
 8007964:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	2b50      	cmp	r3, #80	@ 0x50
 800796a:	d00b      	beq.n	8007984 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	61bb      	str	r3, [r7, #24]
}
 800797e:	bf00      	nop
 8007980:	bf00      	nop
 8007982:	e7fd      	b.n	8007980 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007984:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800798a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00d      	beq.n	80079ac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007998:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800799c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	4613      	mov	r3, r2
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	68b9      	ldr	r1, [r7, #8]
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 f840 	bl	8007a2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3730      	adds	r7, #48	@ 0x30
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b08a      	sub	sp, #40	@ 0x28
 80079ba:	af02      	add	r7, sp, #8
 80079bc:	60f8      	str	r0, [r7, #12]
 80079be:	60b9      	str	r1, [r7, #8]
 80079c0:	4613      	mov	r3, r2
 80079c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10b      	bne.n	80079e2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80079ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	613b      	str	r3, [r7, #16]
}
 80079dc:	bf00      	nop
 80079de:	bf00      	nop
 80079e0:	e7fd      	b.n	80079de <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	fb02 f303 	mul.w	r3, r2, r3
 80079ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	3350      	adds	r3, #80	@ 0x50
 80079f0:	4618      	mov	r0, r3
 80079f2:	f002 f933 	bl	8009c5c <pvPortMalloc>
 80079f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d011      	beq.n	8007a22 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	3350      	adds	r3, #80	@ 0x50
 8007a06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a10:	79fa      	ldrb	r2, [r7, #7]
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	4613      	mov	r3, r2
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	68b9      	ldr	r1, [r7, #8]
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 f805 	bl	8007a2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a22:	69bb      	ldr	r3, [r7, #24]
	}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3720      	adds	r7, #32
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
 8007a38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d103      	bne.n	8007a48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	69ba      	ldr	r2, [r7, #24]
 8007a44:	601a      	str	r2, [r3, #0]
 8007a46:	e002      	b.n	8007a4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a5a:	2101      	movs	r1, #1
 8007a5c:	69b8      	ldr	r0, [r7, #24]
 8007a5e:	f7ff fec3 	bl	80077e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	78fa      	ldrb	r2, [r7, #3]
 8007a66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a6a:	bf00      	nop
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
	...

08007a74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b08e      	sub	sp, #56	@ 0x38
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a82:	2300      	movs	r3, #0
 8007a84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10b      	bne.n	8007aa8 <xQueueGenericSend+0x34>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007aa2:	bf00      	nop
 8007aa4:	bf00      	nop
 8007aa6:	e7fd      	b.n	8007aa4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d103      	bne.n	8007ab6 <xQueueGenericSend+0x42>
 8007aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <xQueueGenericSend+0x46>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e000      	b.n	8007abc <xQueueGenericSend+0x48>
 8007aba:	2300      	movs	r3, #0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10b      	bne.n	8007ad8 <xQueueGenericSend+0x64>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ad2:	bf00      	nop
 8007ad4:	bf00      	nop
 8007ad6:	e7fd      	b.n	8007ad4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d103      	bne.n	8007ae6 <xQueueGenericSend+0x72>
 8007ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d101      	bne.n	8007aea <xQueueGenericSend+0x76>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e000      	b.n	8007aec <xQueueGenericSend+0x78>
 8007aea:	2300      	movs	r3, #0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10b      	bne.n	8007b08 <xQueueGenericSend+0x94>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	623b      	str	r3, [r7, #32]
}
 8007b02:	bf00      	nop
 8007b04:	bf00      	nop
 8007b06:	e7fd      	b.n	8007b04 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b08:	f001 fa1a 	bl	8008f40 <xTaskGetSchedulerState>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <xQueueGenericSend+0xa4>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d101      	bne.n	8007b1c <xQueueGenericSend+0xa8>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e000      	b.n	8007b1e <xQueueGenericSend+0xaa>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10b      	bne.n	8007b3a <xQueueGenericSend+0xc6>
	__asm volatile
 8007b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	61fb      	str	r3, [r7, #28]
}
 8007b34:	bf00      	nop
 8007b36:	bf00      	nop
 8007b38:	e7fd      	b.n	8007b36 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b3a:	f001 ff6d 	bl	8009a18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d302      	bcc.n	8007b50 <xQueueGenericSend+0xdc>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d129      	bne.n	8007ba4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	68b9      	ldr	r1, [r7, #8]
 8007b54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b56:	f000 fa91 	bl	800807c <prvCopyDataToQueue>
 8007b5a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d010      	beq.n	8007b86 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b66:	3324      	adds	r3, #36	@ 0x24
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f001 f829 	bl	8008bc0 <xTaskRemoveFromEventList>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d013      	beq.n	8007b9c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b74:	4b3f      	ldr	r3, [pc, #252]	@ (8007c74 <xQueueGenericSend+0x200>)
 8007b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b7a:	601a      	str	r2, [r3, #0]
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	e00a      	b.n	8007b9c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d007      	beq.n	8007b9c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b8c:	4b39      	ldr	r3, [pc, #228]	@ (8007c74 <xQueueGenericSend+0x200>)
 8007b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007b9c:	f001 ff6e 	bl	8009a7c <vPortExitCritical>
				return pdPASS;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e063      	b.n	8007c6c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d103      	bne.n	8007bb2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007baa:	f001 ff67 	bl	8009a7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	e05c      	b.n	8007c6c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d106      	bne.n	8007bc6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bb8:	f107 0314 	add.w	r3, r7, #20
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f001 f863 	bl	8008c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bc6:	f001 ff59 	bl	8009a7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bca:	f000 fdd3 	bl	8008774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bce:	f001 ff23 	bl	8009a18 <vPortEnterCritical>
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007bd8:	b25b      	sxtb	r3, r3
 8007bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bde:	d103      	bne.n	8007be8 <xQueueGenericSend+0x174>
 8007be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bee:	b25b      	sxtb	r3, r3
 8007bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf4:	d103      	bne.n	8007bfe <xQueueGenericSend+0x18a>
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007bfe:	f001 ff3d 	bl	8009a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c02:	1d3a      	adds	r2, r7, #4
 8007c04:	f107 0314 	add.w	r3, r7, #20
 8007c08:	4611      	mov	r1, r2
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f001 f852 	bl	8008cb4 <xTaskCheckForTimeOut>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d124      	bne.n	8007c60 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c18:	f000 fb28 	bl	800826c <prvIsQueueFull>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d018      	beq.n	8007c54 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c24:	3310      	adds	r3, #16
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	4611      	mov	r1, r2
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 ff76 	bl	8008b1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c32:	f000 fab3 	bl	800819c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c36:	f000 fdab 	bl	8008790 <xTaskResumeAll>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f47f af7c 	bne.w	8007b3a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007c42:	4b0c      	ldr	r3, [pc, #48]	@ (8007c74 <xQueueGenericSend+0x200>)
 8007c44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	e772      	b.n	8007b3a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c56:	f000 faa1 	bl	800819c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c5a:	f000 fd99 	bl	8008790 <xTaskResumeAll>
 8007c5e:	e76c      	b.n	8007b3a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c62:	f000 fa9b 	bl	800819c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c66:	f000 fd93 	bl	8008790 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3738      	adds	r7, #56	@ 0x38
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	e000ed04 	.word	0xe000ed04

08007c78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b090      	sub	sp, #64	@ 0x40
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
 8007c84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10b      	bne.n	8007ca8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ca2:	bf00      	nop
 8007ca4:	bf00      	nop
 8007ca6:	e7fd      	b.n	8007ca4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d103      	bne.n	8007cb6 <xQueueGenericSendFromISR+0x3e>
 8007cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <xQueueGenericSendFromISR+0x42>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e000      	b.n	8007cbc <xQueueGenericSendFromISR+0x44>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10b      	bne.n	8007cd8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007cd2:	bf00      	nop
 8007cd4:	bf00      	nop
 8007cd6:	e7fd      	b.n	8007cd4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d103      	bne.n	8007ce6 <xQueueGenericSendFromISR+0x6e>
 8007cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d101      	bne.n	8007cea <xQueueGenericSendFromISR+0x72>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e000      	b.n	8007cec <xQueueGenericSendFromISR+0x74>
 8007cea:	2300      	movs	r3, #0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10b      	bne.n	8007d08 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	623b      	str	r3, [r7, #32]
}
 8007d02:	bf00      	nop
 8007d04:	bf00      	nop
 8007d06:	e7fd      	b.n	8007d04 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d08:	f001 ff66 	bl	8009bd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d0c:	f3ef 8211 	mrs	r2, BASEPRI
 8007d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	61fa      	str	r2, [r7, #28]
 8007d22:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d24:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d26:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d302      	bcc.n	8007d3a <xQueueGenericSendFromISR+0xc2>
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d12f      	bne.n	8007d9a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d4a:	683a      	ldr	r2, [r7, #0]
 8007d4c:	68b9      	ldr	r1, [r7, #8]
 8007d4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007d50:	f000 f994 	bl	800807c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d54:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5c:	d112      	bne.n	8007d84 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d016      	beq.n	8007d94 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d68:	3324      	adds	r3, #36	@ 0x24
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 ff28 	bl	8008bc0 <xTaskRemoveFromEventList>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00e      	beq.n	8007d94 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00b      	beq.n	8007d94 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	e007      	b.n	8007d94 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007d88:	3301      	adds	r3, #1
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	b25a      	sxtb	r2, r3
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007d94:	2301      	movs	r3, #1
 8007d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007d98:	e001      	b.n	8007d9e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007da8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3740      	adds	r7, #64	@ 0x40
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b08c      	sub	sp, #48	@ 0x30
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10b      	bne.n	8007de6 <xQueueReceive+0x32>
	__asm volatile
 8007dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd2:	f383 8811 	msr	BASEPRI, r3
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	623b      	str	r3, [r7, #32]
}
 8007de0:	bf00      	nop
 8007de2:	bf00      	nop
 8007de4:	e7fd      	b.n	8007de2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d103      	bne.n	8007df4 <xQueueReceive+0x40>
 8007dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <xQueueReceive+0x44>
 8007df4:	2301      	movs	r3, #1
 8007df6:	e000      	b.n	8007dfa <xQueueReceive+0x46>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10b      	bne.n	8007e16 <xQueueReceive+0x62>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	61fb      	str	r3, [r7, #28]
}
 8007e10:	bf00      	nop
 8007e12:	bf00      	nop
 8007e14:	e7fd      	b.n	8007e12 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e16:	f001 f893 	bl	8008f40 <xTaskGetSchedulerState>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d102      	bne.n	8007e26 <xQueueReceive+0x72>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <xQueueReceive+0x76>
 8007e26:	2301      	movs	r3, #1
 8007e28:	e000      	b.n	8007e2c <xQueueReceive+0x78>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10b      	bne.n	8007e48 <xQueueReceive+0x94>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	61bb      	str	r3, [r7, #24]
}
 8007e42:	bf00      	nop
 8007e44:	bf00      	nop
 8007e46:	e7fd      	b.n	8007e44 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e48:	f001 fde6 	bl	8009a18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e50:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d01f      	beq.n	8007e98 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e58:	68b9      	ldr	r1, [r7, #8]
 8007e5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e5c:	f000 f978 	bl	8008150 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e62:	1e5a      	subs	r2, r3, #1
 8007e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e66:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00f      	beq.n	8007e90 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e72:	3310      	adds	r3, #16
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 fea3 	bl	8008bc0 <xTaskRemoveFromEventList>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d007      	beq.n	8007e90 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e80:	4b3c      	ldr	r3, [pc, #240]	@ (8007f74 <xQueueReceive+0x1c0>)
 8007e82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e90:	f001 fdf4 	bl	8009a7c <vPortExitCritical>
				return pdPASS;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e069      	b.n	8007f6c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d103      	bne.n	8007ea6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e9e:	f001 fded 	bl	8009a7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e062      	b.n	8007f6c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d106      	bne.n	8007eba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007eac:	f107 0310 	add.w	r3, r7, #16
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 fee9 	bl	8008c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007eba:	f001 fddf 	bl	8009a7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ebe:	f000 fc59 	bl	8008774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ec2:	f001 fda9 	bl	8009a18 <vPortEnterCritical>
 8007ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ecc:	b25b      	sxtb	r3, r3
 8007ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed2:	d103      	bne.n	8007edc <xQueueReceive+0x128>
 8007ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ede:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ee2:	b25b      	sxtb	r3, r3
 8007ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee8:	d103      	bne.n	8007ef2 <xQueueReceive+0x13e>
 8007eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ef2:	f001 fdc3 	bl	8009a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ef6:	1d3a      	adds	r2, r7, #4
 8007ef8:	f107 0310 	add.w	r3, r7, #16
 8007efc:	4611      	mov	r1, r2
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 fed8 	bl	8008cb4 <xTaskCheckForTimeOut>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d123      	bne.n	8007f52 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f0c:	f000 f998 	bl	8008240 <prvIsQueueEmpty>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d017      	beq.n	8007f46 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f18:	3324      	adds	r3, #36	@ 0x24
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 fdfc 	bl	8008b1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f26:	f000 f939 	bl	800819c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f2a:	f000 fc31 	bl	8008790 <xTaskResumeAll>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d189      	bne.n	8007e48 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007f34:	4b0f      	ldr	r3, [pc, #60]	@ (8007f74 <xQueueReceive+0x1c0>)
 8007f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	e780      	b.n	8007e48 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f48:	f000 f928 	bl	800819c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f4c:	f000 fc20 	bl	8008790 <xTaskResumeAll>
 8007f50:	e77a      	b.n	8007e48 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f54:	f000 f922 	bl	800819c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f58:	f000 fc1a 	bl	8008790 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f5e:	f000 f96f 	bl	8008240 <prvIsQueueEmpty>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f43f af6f 	beq.w	8007e48 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3730      	adds	r7, #48	@ 0x30
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	e000ed04 	.word	0xe000ed04

08007f78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08e      	sub	sp, #56	@ 0x38
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10b      	bne.n	8007fa6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	623b      	str	r3, [r7, #32]
}
 8007fa0:	bf00      	nop
 8007fa2:	bf00      	nop
 8007fa4:	e7fd      	b.n	8007fa2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d103      	bne.n	8007fb4 <xQueueReceiveFromISR+0x3c>
 8007fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d101      	bne.n	8007fb8 <xQueueReceiveFromISR+0x40>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e000      	b.n	8007fba <xQueueReceiveFromISR+0x42>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10b      	bne.n	8007fd6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	61fb      	str	r3, [r7, #28]
}
 8007fd0:	bf00      	nop
 8007fd2:	bf00      	nop
 8007fd4:	e7fd      	b.n	8007fd2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fd6:	f001 fdff 	bl	8009bd8 <vPortValidateInterruptPriority>
	__asm volatile
 8007fda:	f3ef 8211 	mrs	r2, BASEPRI
 8007fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	61ba      	str	r2, [r7, #24]
 8007ff0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007ff2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ffa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d02f      	beq.n	8008062 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008004:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008008:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800800c:	68b9      	ldr	r1, [r7, #8]
 800800e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008010:	f000 f89e 	bl	8008150 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008016:	1e5a      	subs	r2, r3, #1
 8008018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800801c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008024:	d112      	bne.n	800804c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d016      	beq.n	800805c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800802e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008030:	3310      	adds	r3, #16
 8008032:	4618      	mov	r0, r3
 8008034:	f000 fdc4 	bl	8008bc0 <xTaskRemoveFromEventList>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00e      	beq.n	800805c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00b      	beq.n	800805c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	e007      	b.n	800805c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800804c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008050:	3301      	adds	r3, #1
 8008052:	b2db      	uxtb	r3, r3
 8008054:	b25a      	sxtb	r2, r3
 8008056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800805c:	2301      	movs	r3, #1
 800805e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008060:	e001      	b.n	8008066 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008062:	2300      	movs	r3, #0
 8008064:	637b      	str	r3, [r7, #52]	@ 0x34
 8008066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008068:	613b      	str	r3, [r7, #16]
	__asm volatile
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	f383 8811 	msr	BASEPRI, r3
}
 8008070:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008074:	4618      	mov	r0, r3
 8008076:	3738      	adds	r7, #56	@ 0x38
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008088:	2300      	movs	r3, #0
 800808a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008090:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10d      	bne.n	80080b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d14d      	bne.n	800813e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 ff68 	bl	8008f7c <xTaskPriorityDisinherit>
 80080ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	609a      	str	r2, [r3, #8]
 80080b4:	e043      	b.n	800813e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d119      	bne.n	80080f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6858      	ldr	r0, [r3, #4]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c4:	461a      	mov	r2, r3
 80080c6:	68b9      	ldr	r1, [r7, #8]
 80080c8:	f002 f951 	bl	800a36e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080d4:	441a      	add	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d32b      	bcc.n	800813e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	605a      	str	r2, [r3, #4]
 80080ee:	e026      	b.n	800813e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	68d8      	ldr	r0, [r3, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080f8:	461a      	mov	r2, r3
 80080fa:	68b9      	ldr	r1, [r7, #8]
 80080fc:	f002 f937 	bl	800a36e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008108:	425b      	negs	r3, r3
 800810a:	441a      	add	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	68da      	ldr	r2, [r3, #12]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	429a      	cmp	r2, r3
 800811a:	d207      	bcs.n	800812c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008124:	425b      	negs	r3, r3
 8008126:	441a      	add	r2, r3
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2b02      	cmp	r3, #2
 8008130:	d105      	bne.n	800813e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d002      	beq.n	800813e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	3b01      	subs	r3, #1
 800813c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	1c5a      	adds	r2, r3, #1
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008146:	697b      	ldr	r3, [r7, #20]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3718      	adds	r7, #24
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800815e:	2b00      	cmp	r3, #0
 8008160:	d018      	beq.n	8008194 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800816a:	441a      	add	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	68da      	ldr	r2, [r3, #12]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	429a      	cmp	r2, r3
 800817a:	d303      	bcc.n	8008184 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	68d9      	ldr	r1, [r3, #12]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800818c:	461a      	mov	r2, r3
 800818e:	6838      	ldr	r0, [r7, #0]
 8008190:	f002 f8ed 	bl	800a36e <memcpy>
	}
}
 8008194:	bf00      	nop
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80081a4:	f001 fc38 	bl	8009a18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081b0:	e011      	b.n	80081d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d012      	beq.n	80081e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	3324      	adds	r3, #36	@ 0x24
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 fcfe 	bl	8008bc0 <xTaskRemoveFromEventList>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d001      	beq.n	80081ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80081ca:	f000 fdd7 	bl	8008d7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
 80081d0:	3b01      	subs	r3, #1
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	dce9      	bgt.n	80081b2 <prvUnlockQueue+0x16>
 80081de:	e000      	b.n	80081e2 <prvUnlockQueue+0x46>
					break;
 80081e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	22ff      	movs	r2, #255	@ 0xff
 80081e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80081ea:	f001 fc47 	bl	8009a7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80081ee:	f001 fc13 	bl	8009a18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081fa:	e011      	b.n	8008220 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d012      	beq.n	800822a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3310      	adds	r3, #16
 8008208:	4618      	mov	r0, r3
 800820a:	f000 fcd9 	bl	8008bc0 <xTaskRemoveFromEventList>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008214:	f000 fdb2 	bl	8008d7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008218:	7bbb      	ldrb	r3, [r7, #14]
 800821a:	3b01      	subs	r3, #1
 800821c:	b2db      	uxtb	r3, r3
 800821e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008220:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008224:	2b00      	cmp	r3, #0
 8008226:	dce9      	bgt.n	80081fc <prvUnlockQueue+0x60>
 8008228:	e000      	b.n	800822c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800822a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	22ff      	movs	r2, #255	@ 0xff
 8008230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008234:	f001 fc22 	bl	8009a7c <vPortExitCritical>
}
 8008238:	bf00      	nop
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008248:	f001 fbe6 	bl	8009a18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008250:	2b00      	cmp	r3, #0
 8008252:	d102      	bne.n	800825a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008254:	2301      	movs	r3, #1
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	e001      	b.n	800825e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800825a:	2300      	movs	r3, #0
 800825c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800825e:	f001 fc0d 	bl	8009a7c <vPortExitCritical>

	return xReturn;
 8008262:	68fb      	ldr	r3, [r7, #12]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008274:	f001 fbd0 	bl	8009a18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008280:	429a      	cmp	r2, r3
 8008282:	d102      	bne.n	800828a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008284:	2301      	movs	r3, #1
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	e001      	b.n	800828e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800828a:	2300      	movs	r3, #0
 800828c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800828e:	f001 fbf5 	bl	8009a7c <vPortExitCritical>

	return xReturn;
 8008292:	68fb      	ldr	r3, [r7, #12]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082a6:	2300      	movs	r3, #0
 80082a8:	60fb      	str	r3, [r7, #12]
 80082aa:	e014      	b.n	80082d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80082ac:	4a0f      	ldr	r2, [pc, #60]	@ (80082ec <vQueueAddToRegistry+0x50>)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10b      	bne.n	80082d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80082b8:	490c      	ldr	r1, [pc, #48]	@ (80082ec <vQueueAddToRegistry+0x50>)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80082c2:	4a0a      	ldr	r2, [pc, #40]	@ (80082ec <vQueueAddToRegistry+0x50>)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	4413      	add	r3, r2
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80082ce:	e006      	b.n	80082de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3301      	adds	r3, #1
 80082d4:	60fb      	str	r3, [r7, #12]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2b07      	cmp	r3, #7
 80082da:	d9e7      	bls.n	80082ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80082dc:	bf00      	nop
 80082de:	bf00      	nop
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	2000119c 	.word	0x2000119c

080082f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008300:	f001 fb8a 	bl	8009a18 <vPortEnterCritical>
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800830a:	b25b      	sxtb	r3, r3
 800830c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008310:	d103      	bne.n	800831a <vQueueWaitForMessageRestricted+0x2a>
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008320:	b25b      	sxtb	r3, r3
 8008322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008326:	d103      	bne.n	8008330 <vQueueWaitForMessageRestricted+0x40>
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008330:	f001 fba4 	bl	8009a7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008338:	2b00      	cmp	r3, #0
 800833a:	d106      	bne.n	800834a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	3324      	adds	r3, #36	@ 0x24
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	68b9      	ldr	r1, [r7, #8]
 8008344:	4618      	mov	r0, r3
 8008346:	f000 fc0f 	bl	8008b68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800834a:	6978      	ldr	r0, [r7, #20]
 800834c:	f7ff ff26 	bl	800819c <prvUnlockQueue>
	}
 8008350:	bf00      	nop
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08e      	sub	sp, #56	@ 0x38
 800835c:	af04      	add	r7, sp, #16
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
 8008364:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10b      	bne.n	8008384 <xTaskCreateStatic+0x2c>
	__asm volatile
 800836c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	623b      	str	r3, [r7, #32]
}
 800837e:	bf00      	nop
 8008380:	bf00      	nop
 8008382:	e7fd      	b.n	8008380 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10b      	bne.n	80083a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	61fb      	str	r3, [r7, #28]
}
 800839c:	bf00      	nop
 800839e:	bf00      	nop
 80083a0:	e7fd      	b.n	800839e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80083a2:	235c      	movs	r3, #92	@ 0x5c
 80083a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	2b5c      	cmp	r3, #92	@ 0x5c
 80083aa:	d00b      	beq.n	80083c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80083ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b0:	f383 8811 	msr	BASEPRI, r3
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	61bb      	str	r3, [r7, #24]
}
 80083be:	bf00      	nop
 80083c0:	bf00      	nop
 80083c2:	e7fd      	b.n	80083c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80083c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80083c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d01e      	beq.n	800840a <xTaskCreateStatic+0xb2>
 80083cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d01b      	beq.n	800840a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80083d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80083dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083de:	2202      	movs	r2, #2
 80083e0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80083e4:	2300      	movs	r3, #0
 80083e6:	9303      	str	r3, [sp, #12]
 80083e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ea:	9302      	str	r3, [sp, #8]
 80083ec:	f107 0314 	add.w	r3, r7, #20
 80083f0:	9301      	str	r3, [sp, #4]
 80083f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	68b9      	ldr	r1, [r7, #8]
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 f850 	bl	80084a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008402:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008404:	f000 f8de 	bl	80085c4 <prvAddNewTaskToReadyList>
 8008408:	e001      	b.n	800840e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800840a:	2300      	movs	r3, #0
 800840c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800840e:	697b      	ldr	r3, [r7, #20]
	}
 8008410:	4618      	mov	r0, r3
 8008412:	3728      	adds	r7, #40	@ 0x28
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008418:	b580      	push	{r7, lr}
 800841a:	b08c      	sub	sp, #48	@ 0x30
 800841c:	af04      	add	r7, sp, #16
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	603b      	str	r3, [r7, #0]
 8008424:	4613      	mov	r3, r2
 8008426:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008428:	88fb      	ldrh	r3, [r7, #6]
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4618      	mov	r0, r3
 800842e:	f001 fc15 	bl	8009c5c <pvPortMalloc>
 8008432:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00e      	beq.n	8008458 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800843a:	205c      	movs	r0, #92	@ 0x5c
 800843c:	f001 fc0e 	bl	8009c5c <pvPortMalloc>
 8008440:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d003      	beq.n	8008450 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	631a      	str	r2, [r3, #48]	@ 0x30
 800844e:	e005      	b.n	800845c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008450:	6978      	ldr	r0, [r7, #20]
 8008452:	f001 fcd1 	bl	8009df8 <vPortFree>
 8008456:	e001      	b.n	800845c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008458:	2300      	movs	r3, #0
 800845a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d017      	beq.n	8008492 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800846a:	88fa      	ldrh	r2, [r7, #6]
 800846c:	2300      	movs	r3, #0
 800846e:	9303      	str	r3, [sp, #12]
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	9302      	str	r3, [sp, #8]
 8008474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008476:	9301      	str	r3, [sp, #4]
 8008478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	68b9      	ldr	r1, [r7, #8]
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 f80e 	bl	80084a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008486:	69f8      	ldr	r0, [r7, #28]
 8008488:	f000 f89c 	bl	80085c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800848c:	2301      	movs	r3, #1
 800848e:	61bb      	str	r3, [r7, #24]
 8008490:	e002      	b.n	8008498 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008492:	f04f 33ff 	mov.w	r3, #4294967295
 8008496:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008498:	69bb      	ldr	r3, [r7, #24]
	}
 800849a:	4618      	mov	r0, r3
 800849c:	3720      	adds	r7, #32
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b088      	sub	sp, #32
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	60f8      	str	r0, [r7, #12]
 80084aa:	60b9      	str	r1, [r7, #8]
 80084ac:	607a      	str	r2, [r7, #4]
 80084ae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80084b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	461a      	mov	r2, r3
 80084ba:	21a5      	movs	r1, #165	@ 0xa5
 80084bc:	f001 fedb 	bl	800a276 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80084c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80084ca:	3b01      	subs	r3, #1
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	f023 0307 	bic.w	r3, r3, #7
 80084d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	f003 0307 	and.w	r3, r3, #7
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00b      	beq.n	80084fc <prvInitialiseNewTask+0x5a>
	__asm volatile
 80084e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e8:	f383 8811 	msr	BASEPRI, r3
 80084ec:	f3bf 8f6f 	isb	sy
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	617b      	str	r3, [r7, #20]
}
 80084f6:	bf00      	nop
 80084f8:	bf00      	nop
 80084fa:	e7fd      	b.n	80084f8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d01f      	beq.n	8008542 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008502:	2300      	movs	r3, #0
 8008504:	61fb      	str	r3, [r7, #28]
 8008506:	e012      	b.n	800852e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	4413      	add	r3, r2
 800850e:	7819      	ldrb	r1, [r3, #0]
 8008510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	4413      	add	r3, r2
 8008516:	3334      	adds	r3, #52	@ 0x34
 8008518:	460a      	mov	r2, r1
 800851a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	4413      	add	r3, r2
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d006      	beq.n	8008536 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	3301      	adds	r3, #1
 800852c:	61fb      	str	r3, [r7, #28]
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	2b0f      	cmp	r3, #15
 8008532:	d9e9      	bls.n	8008508 <prvInitialiseNewTask+0x66>
 8008534:	e000      	b.n	8008538 <prvInitialiseNewTask+0x96>
			{
				break;
 8008536:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853a:	2200      	movs	r2, #0
 800853c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008540:	e003      	b.n	800854a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800854a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800854c:	2b37      	cmp	r3, #55	@ 0x37
 800854e:	d901      	bls.n	8008554 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008550:	2337      	movs	r3, #55	@ 0x37
 8008552:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008556:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008558:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800855a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800855e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008562:	2200      	movs	r2, #0
 8008564:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008568:	3304      	adds	r3, #4
 800856a:	4618      	mov	r0, r3
 800856c:	f7ff f8a8 	bl	80076c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008572:	3318      	adds	r3, #24
 8008574:	4618      	mov	r0, r3
 8008576:	f7ff f8a3 	bl	80076c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800857a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800857e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008582:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008588:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800858a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800858e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008592:	2200      	movs	r2, #0
 8008594:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	68f9      	ldr	r1, [r7, #12]
 80085a2:	69b8      	ldr	r0, [r7, #24]
 80085a4:	f001 f908 	bl	80097b8 <pxPortInitialiseStack>
 80085a8:	4602      	mov	r2, r0
 80085aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80085ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d002      	beq.n	80085ba <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80085b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085ba:	bf00      	nop
 80085bc:	3720      	adds	r7, #32
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
	...

080085c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80085cc:	f001 fa24 	bl	8009a18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80085d0:	4b2d      	ldr	r3, [pc, #180]	@ (8008688 <prvAddNewTaskToReadyList+0xc4>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	3301      	adds	r3, #1
 80085d6:	4a2c      	ldr	r2, [pc, #176]	@ (8008688 <prvAddNewTaskToReadyList+0xc4>)
 80085d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80085da:	4b2c      	ldr	r3, [pc, #176]	@ (800868c <prvAddNewTaskToReadyList+0xc8>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d109      	bne.n	80085f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80085e2:	4a2a      	ldr	r2, [pc, #168]	@ (800868c <prvAddNewTaskToReadyList+0xc8>)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085e8:	4b27      	ldr	r3, [pc, #156]	@ (8008688 <prvAddNewTaskToReadyList+0xc4>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d110      	bne.n	8008612 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80085f0:	f000 fbe8 	bl	8008dc4 <prvInitialiseTaskLists>
 80085f4:	e00d      	b.n	8008612 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80085f6:	4b26      	ldr	r3, [pc, #152]	@ (8008690 <prvAddNewTaskToReadyList+0xcc>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d109      	bne.n	8008612 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085fe:	4b23      	ldr	r3, [pc, #140]	@ (800868c <prvAddNewTaskToReadyList+0xc8>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008608:	429a      	cmp	r2, r3
 800860a:	d802      	bhi.n	8008612 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800860c:	4a1f      	ldr	r2, [pc, #124]	@ (800868c <prvAddNewTaskToReadyList+0xc8>)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008612:	4b20      	ldr	r3, [pc, #128]	@ (8008694 <prvAddNewTaskToReadyList+0xd0>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3301      	adds	r3, #1
 8008618:	4a1e      	ldr	r2, [pc, #120]	@ (8008694 <prvAddNewTaskToReadyList+0xd0>)
 800861a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800861c:	4b1d      	ldr	r3, [pc, #116]	@ (8008694 <prvAddNewTaskToReadyList+0xd0>)
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008628:	4b1b      	ldr	r3, [pc, #108]	@ (8008698 <prvAddNewTaskToReadyList+0xd4>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	429a      	cmp	r2, r3
 800862e:	d903      	bls.n	8008638 <prvAddNewTaskToReadyList+0x74>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008634:	4a18      	ldr	r2, [pc, #96]	@ (8008698 <prvAddNewTaskToReadyList+0xd4>)
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800863c:	4613      	mov	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4a15      	ldr	r2, [pc, #84]	@ (800869c <prvAddNewTaskToReadyList+0xd8>)
 8008646:	441a      	add	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	3304      	adds	r3, #4
 800864c:	4619      	mov	r1, r3
 800864e:	4610      	mov	r0, r2
 8008650:	f7ff f843 	bl	80076da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008654:	f001 fa12 	bl	8009a7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008658:	4b0d      	ldr	r3, [pc, #52]	@ (8008690 <prvAddNewTaskToReadyList+0xcc>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00e      	beq.n	800867e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008660:	4b0a      	ldr	r3, [pc, #40]	@ (800868c <prvAddNewTaskToReadyList+0xc8>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866a:	429a      	cmp	r2, r3
 800866c:	d207      	bcs.n	800867e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800866e:	4b0c      	ldr	r3, [pc, #48]	@ (80086a0 <prvAddNewTaskToReadyList+0xdc>)
 8008670:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800867e:	bf00      	nop
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	200016b0 	.word	0x200016b0
 800868c:	200011dc 	.word	0x200011dc
 8008690:	200016bc 	.word	0x200016bc
 8008694:	200016cc 	.word	0x200016cc
 8008698:	200016b8 	.word	0x200016b8
 800869c:	200011e0 	.word	0x200011e0
 80086a0:	e000ed04 	.word	0xe000ed04

080086a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08a      	sub	sp, #40	@ 0x28
 80086a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80086aa:	2300      	movs	r3, #0
 80086ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80086ae:	2300      	movs	r3, #0
 80086b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80086b2:	463a      	mov	r2, r7
 80086b4:	1d39      	adds	r1, r7, #4
 80086b6:	f107 0308 	add.w	r3, r7, #8
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fe ffac 	bl	8007618 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	9202      	str	r2, [sp, #8]
 80086c8:	9301      	str	r3, [sp, #4]
 80086ca:	2300      	movs	r3, #0
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	2300      	movs	r3, #0
 80086d0:	460a      	mov	r2, r1
 80086d2:	4922      	ldr	r1, [pc, #136]	@ (800875c <vTaskStartScheduler+0xb8>)
 80086d4:	4822      	ldr	r0, [pc, #136]	@ (8008760 <vTaskStartScheduler+0xbc>)
 80086d6:	f7ff fe3f 	bl	8008358 <xTaskCreateStatic>
 80086da:	4603      	mov	r3, r0
 80086dc:	4a21      	ldr	r2, [pc, #132]	@ (8008764 <vTaskStartScheduler+0xc0>)
 80086de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80086e0:	4b20      	ldr	r3, [pc, #128]	@ (8008764 <vTaskStartScheduler+0xc0>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d002      	beq.n	80086ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086e8:	2301      	movs	r3, #1
 80086ea:	617b      	str	r3, [r7, #20]
 80086ec:	e001      	b.n	80086f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80086ee:	2300      	movs	r3, #0
 80086f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d102      	bne.n	80086fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80086f8:	f000 fd04 	bl	8009104 <xTimerCreateTimerTask>
 80086fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d116      	bne.n	8008732 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	613b      	str	r3, [r7, #16]
}
 8008716:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008718:	4b13      	ldr	r3, [pc, #76]	@ (8008768 <vTaskStartScheduler+0xc4>)
 800871a:	f04f 32ff 	mov.w	r2, #4294967295
 800871e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008720:	4b12      	ldr	r3, [pc, #72]	@ (800876c <vTaskStartScheduler+0xc8>)
 8008722:	2201      	movs	r2, #1
 8008724:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008726:	4b12      	ldr	r3, [pc, #72]	@ (8008770 <vTaskStartScheduler+0xcc>)
 8008728:	2200      	movs	r2, #0
 800872a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800872c:	f001 f8d0 	bl	80098d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008730:	e00f      	b.n	8008752 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008738:	d10b      	bne.n	8008752 <vTaskStartScheduler+0xae>
	__asm volatile
 800873a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	60fb      	str	r3, [r7, #12]
}
 800874c:	bf00      	nop
 800874e:	bf00      	nop
 8008750:	e7fd      	b.n	800874e <vTaskStartScheduler+0xaa>
}
 8008752:	bf00      	nop
 8008754:	3718      	adds	r7, #24
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	0800af5c 	.word	0x0800af5c
 8008760:	08008d95 	.word	0x08008d95
 8008764:	200016d4 	.word	0x200016d4
 8008768:	200016d0 	.word	0x200016d0
 800876c:	200016bc 	.word	0x200016bc
 8008770:	200016b4 	.word	0x200016b4

08008774 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008774:	b480      	push	{r7}
 8008776:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008778:	4b04      	ldr	r3, [pc, #16]	@ (800878c <vTaskSuspendAll+0x18>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3301      	adds	r3, #1
 800877e:	4a03      	ldr	r2, [pc, #12]	@ (800878c <vTaskSuspendAll+0x18>)
 8008780:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008782:	bf00      	nop
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	200016d8 	.word	0x200016d8

08008790 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008796:	2300      	movs	r3, #0
 8008798:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800879a:	2300      	movs	r3, #0
 800879c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800879e:	4b42      	ldr	r3, [pc, #264]	@ (80088a8 <xTaskResumeAll+0x118>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10b      	bne.n	80087be <xTaskResumeAll+0x2e>
	__asm volatile
 80087a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087aa:	f383 8811 	msr	BASEPRI, r3
 80087ae:	f3bf 8f6f 	isb	sy
 80087b2:	f3bf 8f4f 	dsb	sy
 80087b6:	603b      	str	r3, [r7, #0]
}
 80087b8:	bf00      	nop
 80087ba:	bf00      	nop
 80087bc:	e7fd      	b.n	80087ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80087be:	f001 f92b 	bl	8009a18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80087c2:	4b39      	ldr	r3, [pc, #228]	@ (80088a8 <xTaskResumeAll+0x118>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	3b01      	subs	r3, #1
 80087c8:	4a37      	ldr	r2, [pc, #220]	@ (80088a8 <xTaskResumeAll+0x118>)
 80087ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087cc:	4b36      	ldr	r3, [pc, #216]	@ (80088a8 <xTaskResumeAll+0x118>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d162      	bne.n	800889a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087d4:	4b35      	ldr	r3, [pc, #212]	@ (80088ac <xTaskResumeAll+0x11c>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d05e      	beq.n	800889a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087dc:	e02f      	b.n	800883e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087de:	4b34      	ldr	r3, [pc, #208]	@ (80088b0 <xTaskResumeAll+0x120>)
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	3318      	adds	r3, #24
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fe ffd2 	bl	8007794 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3304      	adds	r3, #4
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7fe ffcd 	bl	8007794 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087fe:	4b2d      	ldr	r3, [pc, #180]	@ (80088b4 <xTaskResumeAll+0x124>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	429a      	cmp	r2, r3
 8008804:	d903      	bls.n	800880e <xTaskResumeAll+0x7e>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800880a:	4a2a      	ldr	r2, [pc, #168]	@ (80088b4 <xTaskResumeAll+0x124>)
 800880c:	6013      	str	r3, [r2, #0]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4a27      	ldr	r2, [pc, #156]	@ (80088b8 <xTaskResumeAll+0x128>)
 800881c:	441a      	add	r2, r3
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3304      	adds	r3, #4
 8008822:	4619      	mov	r1, r3
 8008824:	4610      	mov	r0, r2
 8008826:	f7fe ff58 	bl	80076da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800882e:	4b23      	ldr	r3, [pc, #140]	@ (80088bc <xTaskResumeAll+0x12c>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008834:	429a      	cmp	r2, r3
 8008836:	d302      	bcc.n	800883e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008838:	4b21      	ldr	r3, [pc, #132]	@ (80088c0 <xTaskResumeAll+0x130>)
 800883a:	2201      	movs	r2, #1
 800883c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800883e:	4b1c      	ldr	r3, [pc, #112]	@ (80088b0 <xTaskResumeAll+0x120>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1cb      	bne.n	80087de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800884c:	f000 fb58 	bl	8008f00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008850:	4b1c      	ldr	r3, [pc, #112]	@ (80088c4 <xTaskResumeAll+0x134>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d010      	beq.n	800887e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800885c:	f000 f846 	bl	80088ec <xTaskIncrementTick>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d002      	beq.n	800886c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008866:	4b16      	ldr	r3, [pc, #88]	@ (80088c0 <xTaskResumeAll+0x130>)
 8008868:	2201      	movs	r2, #1
 800886a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	3b01      	subs	r3, #1
 8008870:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1f1      	bne.n	800885c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008878:	4b12      	ldr	r3, [pc, #72]	@ (80088c4 <xTaskResumeAll+0x134>)
 800887a:	2200      	movs	r2, #0
 800887c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800887e:	4b10      	ldr	r3, [pc, #64]	@ (80088c0 <xTaskResumeAll+0x130>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d009      	beq.n	800889a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008886:	2301      	movs	r3, #1
 8008888:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800888a:	4b0f      	ldr	r3, [pc, #60]	@ (80088c8 <xTaskResumeAll+0x138>)
 800888c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008890:	601a      	str	r2, [r3, #0]
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800889a:	f001 f8ef 	bl	8009a7c <vPortExitCritical>

	return xAlreadyYielded;
 800889e:	68bb      	ldr	r3, [r7, #8]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	200016d8 	.word	0x200016d8
 80088ac:	200016b0 	.word	0x200016b0
 80088b0:	20001670 	.word	0x20001670
 80088b4:	200016b8 	.word	0x200016b8
 80088b8:	200011e0 	.word	0x200011e0
 80088bc:	200011dc 	.word	0x200011dc
 80088c0:	200016c4 	.word	0x200016c4
 80088c4:	200016c0 	.word	0x200016c0
 80088c8:	e000ed04 	.word	0xe000ed04

080088cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80088d2:	4b05      	ldr	r3, [pc, #20]	@ (80088e8 <xTaskGetTickCount+0x1c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80088d8:	687b      	ldr	r3, [r7, #4]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	370c      	adds	r7, #12
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	200016b4 	.word	0x200016b4

080088ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80088f2:	2300      	movs	r3, #0
 80088f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088f6:	4b4f      	ldr	r3, [pc, #316]	@ (8008a34 <xTaskIncrementTick+0x148>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f040 8090 	bne.w	8008a20 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008900:	4b4d      	ldr	r3, [pc, #308]	@ (8008a38 <xTaskIncrementTick+0x14c>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3301      	adds	r3, #1
 8008906:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008908:	4a4b      	ldr	r2, [pc, #300]	@ (8008a38 <xTaskIncrementTick+0x14c>)
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d121      	bne.n	8008958 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008914:	4b49      	ldr	r3, [pc, #292]	@ (8008a3c <xTaskIncrementTick+0x150>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00b      	beq.n	8008936 <xTaskIncrementTick+0x4a>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	603b      	str	r3, [r7, #0]
}
 8008930:	bf00      	nop
 8008932:	bf00      	nop
 8008934:	e7fd      	b.n	8008932 <xTaskIncrementTick+0x46>
 8008936:	4b41      	ldr	r3, [pc, #260]	@ (8008a3c <xTaskIncrementTick+0x150>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	4b40      	ldr	r3, [pc, #256]	@ (8008a40 <xTaskIncrementTick+0x154>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a3e      	ldr	r2, [pc, #248]	@ (8008a3c <xTaskIncrementTick+0x150>)
 8008942:	6013      	str	r3, [r2, #0]
 8008944:	4a3e      	ldr	r2, [pc, #248]	@ (8008a40 <xTaskIncrementTick+0x154>)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6013      	str	r3, [r2, #0]
 800894a:	4b3e      	ldr	r3, [pc, #248]	@ (8008a44 <xTaskIncrementTick+0x158>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	3301      	adds	r3, #1
 8008950:	4a3c      	ldr	r2, [pc, #240]	@ (8008a44 <xTaskIncrementTick+0x158>)
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	f000 fad4 	bl	8008f00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008958:	4b3b      	ldr	r3, [pc, #236]	@ (8008a48 <xTaskIncrementTick+0x15c>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	429a      	cmp	r2, r3
 8008960:	d349      	bcc.n	80089f6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008962:	4b36      	ldr	r3, [pc, #216]	@ (8008a3c <xTaskIncrementTick+0x150>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d104      	bne.n	8008976 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800896c:	4b36      	ldr	r3, [pc, #216]	@ (8008a48 <xTaskIncrementTick+0x15c>)
 800896e:	f04f 32ff 	mov.w	r2, #4294967295
 8008972:	601a      	str	r2, [r3, #0]
					break;
 8008974:	e03f      	b.n	80089f6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008976:	4b31      	ldr	r3, [pc, #196]	@ (8008a3c <xTaskIncrementTick+0x150>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008986:	693a      	ldr	r2, [r7, #16]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	429a      	cmp	r2, r3
 800898c:	d203      	bcs.n	8008996 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800898e:	4a2e      	ldr	r2, [pc, #184]	@ (8008a48 <xTaskIncrementTick+0x15c>)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008994:	e02f      	b.n	80089f6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	3304      	adds	r3, #4
 800899a:	4618      	mov	r0, r3
 800899c:	f7fe fefa 	bl	8007794 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d004      	beq.n	80089b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	3318      	adds	r3, #24
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fe fef1 	bl	8007794 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089b6:	4b25      	ldr	r3, [pc, #148]	@ (8008a4c <xTaskIncrementTick+0x160>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d903      	bls.n	80089c6 <xTaskIncrementTick+0xda>
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c2:	4a22      	ldr	r2, [pc, #136]	@ (8008a4c <xTaskIncrementTick+0x160>)
 80089c4:	6013      	str	r3, [r2, #0]
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ca:	4613      	mov	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4a1f      	ldr	r2, [pc, #124]	@ (8008a50 <xTaskIncrementTick+0x164>)
 80089d4:	441a      	add	r2, r3
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	3304      	adds	r3, #4
 80089da:	4619      	mov	r1, r3
 80089dc:	4610      	mov	r0, r2
 80089de:	f7fe fe7c 	bl	80076da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089e6:	4b1b      	ldr	r3, [pc, #108]	@ (8008a54 <xTaskIncrementTick+0x168>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d3b8      	bcc.n	8008962 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80089f0:	2301      	movs	r3, #1
 80089f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089f4:	e7b5      	b.n	8008962 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089f6:	4b17      	ldr	r3, [pc, #92]	@ (8008a54 <xTaskIncrementTick+0x168>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089fc:	4914      	ldr	r1, [pc, #80]	@ (8008a50 <xTaskIncrementTick+0x164>)
 80089fe:	4613      	mov	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4413      	add	r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	440b      	add	r3, r1
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d901      	bls.n	8008a12 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008a12:	4b11      	ldr	r3, [pc, #68]	@ (8008a58 <xTaskIncrementTick+0x16c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d007      	beq.n	8008a2a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	617b      	str	r3, [r7, #20]
 8008a1e:	e004      	b.n	8008a2a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008a20:	4b0e      	ldr	r3, [pc, #56]	@ (8008a5c <xTaskIncrementTick+0x170>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	3301      	adds	r3, #1
 8008a26:	4a0d      	ldr	r2, [pc, #52]	@ (8008a5c <xTaskIncrementTick+0x170>)
 8008a28:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008a2a:	697b      	ldr	r3, [r7, #20]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3718      	adds	r7, #24
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	200016d8 	.word	0x200016d8
 8008a38:	200016b4 	.word	0x200016b4
 8008a3c:	20001668 	.word	0x20001668
 8008a40:	2000166c 	.word	0x2000166c
 8008a44:	200016c8 	.word	0x200016c8
 8008a48:	200016d0 	.word	0x200016d0
 8008a4c:	200016b8 	.word	0x200016b8
 8008a50:	200011e0 	.word	0x200011e0
 8008a54:	200011dc 	.word	0x200011dc
 8008a58:	200016c4 	.word	0x200016c4
 8008a5c:	200016c0 	.word	0x200016c0

08008a60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a66:	4b28      	ldr	r3, [pc, #160]	@ (8008b08 <vTaskSwitchContext+0xa8>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d003      	beq.n	8008a76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a6e:	4b27      	ldr	r3, [pc, #156]	@ (8008b0c <vTaskSwitchContext+0xac>)
 8008a70:	2201      	movs	r2, #1
 8008a72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a74:	e042      	b.n	8008afc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008a76:	4b25      	ldr	r3, [pc, #148]	@ (8008b0c <vTaskSwitchContext+0xac>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a7c:	4b24      	ldr	r3, [pc, #144]	@ (8008b10 <vTaskSwitchContext+0xb0>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	60fb      	str	r3, [r7, #12]
 8008a82:	e011      	b.n	8008aa8 <vTaskSwitchContext+0x48>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10b      	bne.n	8008aa2 <vTaskSwitchContext+0x42>
	__asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	607b      	str	r3, [r7, #4]
}
 8008a9c:	bf00      	nop
 8008a9e:	bf00      	nop
 8008aa0:	e7fd      	b.n	8008a9e <vTaskSwitchContext+0x3e>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	60fb      	str	r3, [r7, #12]
 8008aa8:	491a      	ldr	r1, [pc, #104]	@ (8008b14 <vTaskSwitchContext+0xb4>)
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	4613      	mov	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	440b      	add	r3, r1
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d0e3      	beq.n	8008a84 <vTaskSwitchContext+0x24>
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	4613      	mov	r3, r2
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4a13      	ldr	r2, [pc, #76]	@ (8008b14 <vTaskSwitchContext+0xb4>)
 8008ac8:	4413      	add	r3, r2
 8008aca:	60bb      	str	r3, [r7, #8]
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	685a      	ldr	r2, [r3, #4]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	605a      	str	r2, [r3, #4]
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	3308      	adds	r3, #8
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d104      	bne.n	8008aec <vTaskSwitchContext+0x8c>
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	605a      	str	r2, [r3, #4]
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	4a09      	ldr	r2, [pc, #36]	@ (8008b18 <vTaskSwitchContext+0xb8>)
 8008af4:	6013      	str	r3, [r2, #0]
 8008af6:	4a06      	ldr	r2, [pc, #24]	@ (8008b10 <vTaskSwitchContext+0xb0>)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6013      	str	r3, [r2, #0]
}
 8008afc:	bf00      	nop
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	200016d8 	.word	0x200016d8
 8008b0c:	200016c4 	.word	0x200016c4
 8008b10:	200016b8 	.word	0x200016b8
 8008b14:	200011e0 	.word	0x200011e0
 8008b18:	200011dc 	.word	0x200011dc

08008b1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d10b      	bne.n	8008b44 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b30:	f383 8811 	msr	BASEPRI, r3
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	60fb      	str	r3, [r7, #12]
}
 8008b3e:	bf00      	nop
 8008b40:	bf00      	nop
 8008b42:	e7fd      	b.n	8008b40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b44:	4b07      	ldr	r3, [pc, #28]	@ (8008b64 <vTaskPlaceOnEventList+0x48>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	3318      	adds	r3, #24
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7fe fde8 	bl	8007722 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b52:	2101      	movs	r1, #1
 8008b54:	6838      	ldr	r0, [r7, #0]
 8008b56:	f000 fa81 	bl	800905c <prvAddCurrentTaskToDelayedList>
}
 8008b5a:	bf00      	nop
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	200011dc 	.word	0x200011dc

08008b68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10b      	bne.n	8008b92 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	617b      	str	r3, [r7, #20]
}
 8008b8c:	bf00      	nop
 8008b8e:	bf00      	nop
 8008b90:	e7fd      	b.n	8008b8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b92:	4b0a      	ldr	r3, [pc, #40]	@ (8008bbc <vTaskPlaceOnEventListRestricted+0x54>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3318      	adds	r3, #24
 8008b98:	4619      	mov	r1, r3
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f7fe fd9d 	bl	80076da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8008baa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008bac:	6879      	ldr	r1, [r7, #4]
 8008bae:	68b8      	ldr	r0, [r7, #8]
 8008bb0:	f000 fa54 	bl	800905c <prvAddCurrentTaskToDelayedList>
	}
 8008bb4:	bf00      	nop
 8008bb6:	3718      	adds	r7, #24
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	200011dc 	.word	0x200011dc

08008bc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10b      	bne.n	8008bee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	60fb      	str	r3, [r7, #12]
}
 8008be8:	bf00      	nop
 8008bea:	bf00      	nop
 8008bec:	e7fd      	b.n	8008bea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	3318      	adds	r3, #24
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7fe fdce 	bl	8007794 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8008c70 <xTaskRemoveFromEventList+0xb0>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d11d      	bne.n	8008c3c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	3304      	adds	r3, #4
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fe fdc5 	bl	8007794 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c0e:	4b19      	ldr	r3, [pc, #100]	@ (8008c74 <xTaskRemoveFromEventList+0xb4>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d903      	bls.n	8008c1e <xTaskRemoveFromEventList+0x5e>
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1a:	4a16      	ldr	r2, [pc, #88]	@ (8008c74 <xTaskRemoveFromEventList+0xb4>)
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c22:	4613      	mov	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4a13      	ldr	r2, [pc, #76]	@ (8008c78 <xTaskRemoveFromEventList+0xb8>)
 8008c2c:	441a      	add	r2, r3
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	3304      	adds	r3, #4
 8008c32:	4619      	mov	r1, r3
 8008c34:	4610      	mov	r0, r2
 8008c36:	f7fe fd50 	bl	80076da <vListInsertEnd>
 8008c3a:	e005      	b.n	8008c48 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	3318      	adds	r3, #24
 8008c40:	4619      	mov	r1, r3
 8008c42:	480e      	ldr	r0, [pc, #56]	@ (8008c7c <xTaskRemoveFromEventList+0xbc>)
 8008c44:	f7fe fd49 	bl	80076da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8008c80 <xTaskRemoveFromEventList+0xc0>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d905      	bls.n	8008c62 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c56:	2301      	movs	r3, #1
 8008c58:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8008c84 <xTaskRemoveFromEventList+0xc4>)
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	e001      	b.n	8008c66 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008c62:	2300      	movs	r3, #0
 8008c64:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c66:	697b      	ldr	r3, [r7, #20]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3718      	adds	r7, #24
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	200016d8 	.word	0x200016d8
 8008c74:	200016b8 	.word	0x200016b8
 8008c78:	200011e0 	.word	0x200011e0
 8008c7c:	20001670 	.word	0x20001670
 8008c80:	200011dc 	.word	0x200011dc
 8008c84:	200016c4 	.word	0x200016c4

08008c88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c90:	4b06      	ldr	r3, [pc, #24]	@ (8008cac <vTaskInternalSetTimeOutState+0x24>)
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c98:	4b05      	ldr	r3, [pc, #20]	@ (8008cb0 <vTaskInternalSetTimeOutState+0x28>)
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	605a      	str	r2, [r3, #4]
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	200016c8 	.word	0x200016c8
 8008cb0:	200016b4 	.word	0x200016b4

08008cb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b088      	sub	sp, #32
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10b      	bne.n	8008cdc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	613b      	str	r3, [r7, #16]
}
 8008cd6:	bf00      	nop
 8008cd8:	bf00      	nop
 8008cda:	e7fd      	b.n	8008cd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10b      	bne.n	8008cfa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	60fb      	str	r3, [r7, #12]
}
 8008cf4:	bf00      	nop
 8008cf6:	bf00      	nop
 8008cf8:	e7fd      	b.n	8008cf6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008cfa:	f000 fe8d 	bl	8009a18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8008d74 <xTaskCheckForTimeOut+0xc0>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	69ba      	ldr	r2, [r7, #24]
 8008d0a:	1ad3      	subs	r3, r2, r3
 8008d0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d16:	d102      	bne.n	8008d1e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	61fb      	str	r3, [r7, #28]
 8008d1c:	e023      	b.n	8008d66 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	4b15      	ldr	r3, [pc, #84]	@ (8008d78 <xTaskCheckForTimeOut+0xc4>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d007      	beq.n	8008d3a <xTaskCheckForTimeOut+0x86>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	69ba      	ldr	r2, [r7, #24]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d302      	bcc.n	8008d3a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d34:	2301      	movs	r3, #1
 8008d36:	61fb      	str	r3, [r7, #28]
 8008d38:	e015      	b.n	8008d66 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d20b      	bcs.n	8008d5c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	1ad2      	subs	r2, r2, r3
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7ff ff99 	bl	8008c88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d56:	2300      	movs	r3, #0
 8008d58:	61fb      	str	r3, [r7, #28]
 8008d5a:	e004      	b.n	8008d66 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d62:	2301      	movs	r3, #1
 8008d64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d66:	f000 fe89 	bl	8009a7c <vPortExitCritical>

	return xReturn;
 8008d6a:	69fb      	ldr	r3, [r7, #28]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3720      	adds	r7, #32
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	200016b4 	.word	0x200016b4
 8008d78:	200016c8 	.word	0x200016c8

08008d7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d80:	4b03      	ldr	r3, [pc, #12]	@ (8008d90 <vTaskMissedYield+0x14>)
 8008d82:	2201      	movs	r2, #1
 8008d84:	601a      	str	r2, [r3, #0]
}
 8008d86:	bf00      	nop
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr
 8008d90:	200016c4 	.word	0x200016c4

08008d94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d9c:	f000 f852 	bl	8008e44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008da0:	4b06      	ldr	r3, [pc, #24]	@ (8008dbc <prvIdleTask+0x28>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d9f9      	bls.n	8008d9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008da8:	4b05      	ldr	r3, [pc, #20]	@ (8008dc0 <prvIdleTask+0x2c>)
 8008daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	f3bf 8f4f 	dsb	sy
 8008db4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008db8:	e7f0      	b.n	8008d9c <prvIdleTask+0x8>
 8008dba:	bf00      	nop
 8008dbc:	200011e0 	.word	0x200011e0
 8008dc0:	e000ed04 	.word	0xe000ed04

08008dc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dca:	2300      	movs	r3, #0
 8008dcc:	607b      	str	r3, [r7, #4]
 8008dce:	e00c      	b.n	8008dea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4a12      	ldr	r2, [pc, #72]	@ (8008e24 <prvInitialiseTaskLists+0x60>)
 8008ddc:	4413      	add	r3, r2
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fe fc4e 	bl	8007680 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	3301      	adds	r3, #1
 8008de8:	607b      	str	r3, [r7, #4]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2b37      	cmp	r3, #55	@ 0x37
 8008dee:	d9ef      	bls.n	8008dd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008df0:	480d      	ldr	r0, [pc, #52]	@ (8008e28 <prvInitialiseTaskLists+0x64>)
 8008df2:	f7fe fc45 	bl	8007680 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008df6:	480d      	ldr	r0, [pc, #52]	@ (8008e2c <prvInitialiseTaskLists+0x68>)
 8008df8:	f7fe fc42 	bl	8007680 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008dfc:	480c      	ldr	r0, [pc, #48]	@ (8008e30 <prvInitialiseTaskLists+0x6c>)
 8008dfe:	f7fe fc3f 	bl	8007680 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e02:	480c      	ldr	r0, [pc, #48]	@ (8008e34 <prvInitialiseTaskLists+0x70>)
 8008e04:	f7fe fc3c 	bl	8007680 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e08:	480b      	ldr	r0, [pc, #44]	@ (8008e38 <prvInitialiseTaskLists+0x74>)
 8008e0a:	f7fe fc39 	bl	8007680 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e3c <prvInitialiseTaskLists+0x78>)
 8008e10:	4a05      	ldr	r2, [pc, #20]	@ (8008e28 <prvInitialiseTaskLists+0x64>)
 8008e12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e14:	4b0a      	ldr	r3, [pc, #40]	@ (8008e40 <prvInitialiseTaskLists+0x7c>)
 8008e16:	4a05      	ldr	r2, [pc, #20]	@ (8008e2c <prvInitialiseTaskLists+0x68>)
 8008e18:	601a      	str	r2, [r3, #0]
}
 8008e1a:	bf00      	nop
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	200011e0 	.word	0x200011e0
 8008e28:	20001640 	.word	0x20001640
 8008e2c:	20001654 	.word	0x20001654
 8008e30:	20001670 	.word	0x20001670
 8008e34:	20001684 	.word	0x20001684
 8008e38:	2000169c 	.word	0x2000169c
 8008e3c:	20001668 	.word	0x20001668
 8008e40:	2000166c 	.word	0x2000166c

08008e44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e4a:	e019      	b.n	8008e80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e4c:	f000 fde4 	bl	8009a18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e50:	4b10      	ldr	r3, [pc, #64]	@ (8008e94 <prvCheckTasksWaitingTermination+0x50>)
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7fe fc99 	bl	8007794 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e62:	4b0d      	ldr	r3, [pc, #52]	@ (8008e98 <prvCheckTasksWaitingTermination+0x54>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	3b01      	subs	r3, #1
 8008e68:	4a0b      	ldr	r2, [pc, #44]	@ (8008e98 <prvCheckTasksWaitingTermination+0x54>)
 8008e6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e9c <prvCheckTasksWaitingTermination+0x58>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	4a0a      	ldr	r2, [pc, #40]	@ (8008e9c <prvCheckTasksWaitingTermination+0x58>)
 8008e74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e76:	f000 fe01 	bl	8009a7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f810 	bl	8008ea0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e80:	4b06      	ldr	r3, [pc, #24]	@ (8008e9c <prvCheckTasksWaitingTermination+0x58>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1e1      	bne.n	8008e4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e88:	bf00      	nop
 8008e8a:	bf00      	nop
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	20001684 	.word	0x20001684
 8008e98:	200016b0 	.word	0x200016b0
 8008e9c:	20001698 	.word	0x20001698

08008ea0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d108      	bne.n	8008ec4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 ff9e 	bl	8009df8 <vPortFree>
				vPortFree( pxTCB );
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 ff9b 	bl	8009df8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ec2:	e019      	b.n	8008ef8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d103      	bne.n	8008ed6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 ff92 	bl	8009df8 <vPortFree>
	}
 8008ed4:	e010      	b.n	8008ef8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d00b      	beq.n	8008ef8 <prvDeleteTCB+0x58>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	60fb      	str	r3, [r7, #12]
}
 8008ef2:	bf00      	nop
 8008ef4:	bf00      	nop
 8008ef6:	e7fd      	b.n	8008ef4 <prvDeleteTCB+0x54>
	}
 8008ef8:	bf00      	nop
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f06:	4b0c      	ldr	r3, [pc, #48]	@ (8008f38 <prvResetNextTaskUnblockTime+0x38>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d104      	bne.n	8008f1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f10:	4b0a      	ldr	r3, [pc, #40]	@ (8008f3c <prvResetNextTaskUnblockTime+0x3c>)
 8008f12:	f04f 32ff 	mov.w	r2, #4294967295
 8008f16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f18:	e008      	b.n	8008f2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f1a:	4b07      	ldr	r3, [pc, #28]	@ (8008f38 <prvResetNextTaskUnblockTime+0x38>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	4a04      	ldr	r2, [pc, #16]	@ (8008f3c <prvResetNextTaskUnblockTime+0x3c>)
 8008f2a:	6013      	str	r3, [r2, #0]
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr
 8008f38:	20001668 	.word	0x20001668
 8008f3c:	200016d0 	.word	0x200016d0

08008f40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f46:	4b0b      	ldr	r3, [pc, #44]	@ (8008f74 <xTaskGetSchedulerState+0x34>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d102      	bne.n	8008f54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	607b      	str	r3, [r7, #4]
 8008f52:	e008      	b.n	8008f66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f54:	4b08      	ldr	r3, [pc, #32]	@ (8008f78 <xTaskGetSchedulerState+0x38>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d102      	bne.n	8008f62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	607b      	str	r3, [r7, #4]
 8008f60:	e001      	b.n	8008f66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f62:	2300      	movs	r3, #0
 8008f64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f66:	687b      	ldr	r3, [r7, #4]
	}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	200016bc 	.word	0x200016bc
 8008f78:	200016d8 	.word	0x200016d8

08008f7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b086      	sub	sp, #24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d058      	beq.n	8009044 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f92:	4b2f      	ldr	r3, [pc, #188]	@ (8009050 <xTaskPriorityDisinherit+0xd4>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d00b      	beq.n	8008fb4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa0:	f383 8811 	msr	BASEPRI, r3
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	60fb      	str	r3, [r7, #12]
}
 8008fae:	bf00      	nop
 8008fb0:	bf00      	nop
 8008fb2:	e7fd      	b.n	8008fb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10b      	bne.n	8008fd4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	60bb      	str	r3, [r7, #8]
}
 8008fce:	bf00      	nop
 8008fd0:	bf00      	nop
 8008fd2:	e7fd      	b.n	8008fd0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fd8:	1e5a      	subs	r2, r3, #1
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d02c      	beq.n	8009044 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d128      	bne.n	8009044 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fe fbcc 	bl	8007794 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009008:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009014:	4b0f      	ldr	r3, [pc, #60]	@ (8009054 <xTaskPriorityDisinherit+0xd8>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	429a      	cmp	r2, r3
 800901a:	d903      	bls.n	8009024 <xTaskPriorityDisinherit+0xa8>
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009020:	4a0c      	ldr	r2, [pc, #48]	@ (8009054 <xTaskPriorityDisinherit+0xd8>)
 8009022:	6013      	str	r3, [r2, #0]
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009028:	4613      	mov	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4413      	add	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4a09      	ldr	r2, [pc, #36]	@ (8009058 <xTaskPriorityDisinherit+0xdc>)
 8009032:	441a      	add	r2, r3
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	3304      	adds	r3, #4
 8009038:	4619      	mov	r1, r3
 800903a:	4610      	mov	r0, r2
 800903c:	f7fe fb4d 	bl	80076da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009040:	2301      	movs	r3, #1
 8009042:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009044:	697b      	ldr	r3, [r7, #20]
	}
 8009046:	4618      	mov	r0, r3
 8009048:	3718      	adds	r7, #24
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	200011dc 	.word	0x200011dc
 8009054:	200016b8 	.word	0x200016b8
 8009058:	200011e0 	.word	0x200011e0

0800905c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009066:	4b21      	ldr	r3, [pc, #132]	@ (80090ec <prvAddCurrentTaskToDelayedList+0x90>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800906c:	4b20      	ldr	r3, [pc, #128]	@ (80090f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3304      	adds	r3, #4
 8009072:	4618      	mov	r0, r3
 8009074:	f7fe fb8e 	bl	8007794 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907e:	d10a      	bne.n	8009096 <prvAddCurrentTaskToDelayedList+0x3a>
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d007      	beq.n	8009096 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009086:	4b1a      	ldr	r3, [pc, #104]	@ (80090f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3304      	adds	r3, #4
 800908c:	4619      	mov	r1, r3
 800908e:	4819      	ldr	r0, [pc, #100]	@ (80090f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009090:	f7fe fb23 	bl	80076da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009094:	e026      	b.n	80090e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4413      	add	r3, r2
 800909c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800909e:	4b14      	ldr	r3, [pc, #80]	@ (80090f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d209      	bcs.n	80090c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090ae:	4b12      	ldr	r3, [pc, #72]	@ (80090f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	4b0f      	ldr	r3, [pc, #60]	@ (80090f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3304      	adds	r3, #4
 80090b8:	4619      	mov	r1, r3
 80090ba:	4610      	mov	r0, r2
 80090bc:	f7fe fb31 	bl	8007722 <vListInsert>
}
 80090c0:	e010      	b.n	80090e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090c2:	4b0e      	ldr	r3, [pc, #56]	@ (80090fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	4b0a      	ldr	r3, [pc, #40]	@ (80090f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	3304      	adds	r3, #4
 80090cc:	4619      	mov	r1, r3
 80090ce:	4610      	mov	r0, r2
 80090d0:	f7fe fb27 	bl	8007722 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80090d4:	4b0a      	ldr	r3, [pc, #40]	@ (8009100 <prvAddCurrentTaskToDelayedList+0xa4>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d202      	bcs.n	80090e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80090de:	4a08      	ldr	r2, [pc, #32]	@ (8009100 <prvAddCurrentTaskToDelayedList+0xa4>)
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	6013      	str	r3, [r2, #0]
}
 80090e4:	bf00      	nop
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	200016b4 	.word	0x200016b4
 80090f0:	200011dc 	.word	0x200011dc
 80090f4:	2000169c 	.word	0x2000169c
 80090f8:	2000166c 	.word	0x2000166c
 80090fc:	20001668 	.word	0x20001668
 8009100:	200016d0 	.word	0x200016d0

08009104 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b08a      	sub	sp, #40	@ 0x28
 8009108:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800910a:	2300      	movs	r3, #0
 800910c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800910e:	f000 fb13 	bl	8009738 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009112:	4b1d      	ldr	r3, [pc, #116]	@ (8009188 <xTimerCreateTimerTask+0x84>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d021      	beq.n	800915e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800911a:	2300      	movs	r3, #0
 800911c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800911e:	2300      	movs	r3, #0
 8009120:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009122:	1d3a      	adds	r2, r7, #4
 8009124:	f107 0108 	add.w	r1, r7, #8
 8009128:	f107 030c 	add.w	r3, r7, #12
 800912c:	4618      	mov	r0, r3
 800912e:	f7fe fa8d 	bl	800764c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009132:	6879      	ldr	r1, [r7, #4]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	9202      	str	r2, [sp, #8]
 800913a:	9301      	str	r3, [sp, #4]
 800913c:	2302      	movs	r3, #2
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	2300      	movs	r3, #0
 8009142:	460a      	mov	r2, r1
 8009144:	4911      	ldr	r1, [pc, #68]	@ (800918c <xTimerCreateTimerTask+0x88>)
 8009146:	4812      	ldr	r0, [pc, #72]	@ (8009190 <xTimerCreateTimerTask+0x8c>)
 8009148:	f7ff f906 	bl	8008358 <xTaskCreateStatic>
 800914c:	4603      	mov	r3, r0
 800914e:	4a11      	ldr	r2, [pc, #68]	@ (8009194 <xTimerCreateTimerTask+0x90>)
 8009150:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009152:	4b10      	ldr	r3, [pc, #64]	@ (8009194 <xTimerCreateTimerTask+0x90>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800915a:	2301      	movs	r3, #1
 800915c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10b      	bne.n	800917c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	613b      	str	r3, [r7, #16]
}
 8009176:	bf00      	nop
 8009178:	bf00      	nop
 800917a:	e7fd      	b.n	8009178 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800917c:	697b      	ldr	r3, [r7, #20]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	2000170c 	.word	0x2000170c
 800918c:	0800af64 	.word	0x0800af64
 8009190:	080092d1 	.word	0x080092d1
 8009194:	20001710 	.word	0x20001710

08009198 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b08a      	sub	sp, #40	@ 0x28
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
 80091a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80091a6:	2300      	movs	r3, #0
 80091a8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10b      	bne.n	80091c8 <xTimerGenericCommand+0x30>
	__asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	623b      	str	r3, [r7, #32]
}
 80091c2:	bf00      	nop
 80091c4:	bf00      	nop
 80091c6:	e7fd      	b.n	80091c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80091c8:	4b19      	ldr	r3, [pc, #100]	@ (8009230 <xTimerGenericCommand+0x98>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d02a      	beq.n	8009226 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	2b05      	cmp	r3, #5
 80091e0:	dc18      	bgt.n	8009214 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80091e2:	f7ff fead 	bl	8008f40 <xTaskGetSchedulerState>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d109      	bne.n	8009200 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80091ec:	4b10      	ldr	r3, [pc, #64]	@ (8009230 <xTimerGenericCommand+0x98>)
 80091ee:	6818      	ldr	r0, [r3, #0]
 80091f0:	f107 0110 	add.w	r1, r7, #16
 80091f4:	2300      	movs	r3, #0
 80091f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091f8:	f7fe fc3c 	bl	8007a74 <xQueueGenericSend>
 80091fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80091fe:	e012      	b.n	8009226 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009200:	4b0b      	ldr	r3, [pc, #44]	@ (8009230 <xTimerGenericCommand+0x98>)
 8009202:	6818      	ldr	r0, [r3, #0]
 8009204:	f107 0110 	add.w	r1, r7, #16
 8009208:	2300      	movs	r3, #0
 800920a:	2200      	movs	r2, #0
 800920c:	f7fe fc32 	bl	8007a74 <xQueueGenericSend>
 8009210:	6278      	str	r0, [r7, #36]	@ 0x24
 8009212:	e008      	b.n	8009226 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009214:	4b06      	ldr	r3, [pc, #24]	@ (8009230 <xTimerGenericCommand+0x98>)
 8009216:	6818      	ldr	r0, [r3, #0]
 8009218:	f107 0110 	add.w	r1, r7, #16
 800921c:	2300      	movs	r3, #0
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	f7fe fd2a 	bl	8007c78 <xQueueGenericSendFromISR>
 8009224:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009228:	4618      	mov	r0, r3
 800922a:	3728      	adds	r7, #40	@ 0x28
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	2000170c 	.word	0x2000170c

08009234 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b088      	sub	sp, #32
 8009238:	af02      	add	r7, sp, #8
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800923e:	4b23      	ldr	r3, [pc, #140]	@ (80092cc <prvProcessExpiredTimer+0x98>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	3304      	adds	r3, #4
 800924c:	4618      	mov	r0, r3
 800924e:	f7fe faa1 	bl	8007794 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009258:	f003 0304 	and.w	r3, r3, #4
 800925c:	2b00      	cmp	r3, #0
 800925e:	d023      	beq.n	80092a8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	699a      	ldr	r2, [r3, #24]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	18d1      	adds	r1, r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	6978      	ldr	r0, [r7, #20]
 800926e:	f000 f8d5 	bl	800941c <prvInsertTimerInActiveList>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d020      	beq.n	80092ba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009278:	2300      	movs	r3, #0
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	2300      	movs	r3, #0
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	2100      	movs	r1, #0
 8009282:	6978      	ldr	r0, [r7, #20]
 8009284:	f7ff ff88 	bl	8009198 <xTimerGenericCommand>
 8009288:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d114      	bne.n	80092ba <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	60fb      	str	r3, [r7, #12]
}
 80092a2:	bf00      	nop
 80092a4:	bf00      	nop
 80092a6:	e7fd      	b.n	80092a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092ae:	f023 0301 	bic.w	r3, r3, #1
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	6978      	ldr	r0, [r7, #20]
 80092c0:	4798      	blx	r3
}
 80092c2:	bf00      	nop
 80092c4:	3718      	adds	r7, #24
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	20001704 	.word	0x20001704

080092d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092d8:	f107 0308 	add.w	r3, r7, #8
 80092dc:	4618      	mov	r0, r3
 80092de:	f000 f859 	bl	8009394 <prvGetNextExpireTime>
 80092e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	4619      	mov	r1, r3
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 f805 	bl	80092f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80092ee:	f000 f8d7 	bl	80094a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092f2:	bf00      	nop
 80092f4:	e7f0      	b.n	80092d8 <prvTimerTask+0x8>
	...

080092f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009302:	f7ff fa37 	bl	8008774 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009306:	f107 0308 	add.w	r3, r7, #8
 800930a:	4618      	mov	r0, r3
 800930c:	f000 f866 	bl	80093dc <prvSampleTimeNow>
 8009310:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d130      	bne.n	800937a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10a      	bne.n	8009334 <prvProcessTimerOrBlockTask+0x3c>
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	429a      	cmp	r2, r3
 8009324:	d806      	bhi.n	8009334 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009326:	f7ff fa33 	bl	8008790 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800932a:	68f9      	ldr	r1, [r7, #12]
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7ff ff81 	bl	8009234 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009332:	e024      	b.n	800937e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d008      	beq.n	800934c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800933a:	4b13      	ldr	r3, [pc, #76]	@ (8009388 <prvProcessTimerOrBlockTask+0x90>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <prvProcessTimerOrBlockTask+0x50>
 8009344:	2301      	movs	r3, #1
 8009346:	e000      	b.n	800934a <prvProcessTimerOrBlockTask+0x52>
 8009348:	2300      	movs	r3, #0
 800934a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800934c:	4b0f      	ldr	r3, [pc, #60]	@ (800938c <prvProcessTimerOrBlockTask+0x94>)
 800934e:	6818      	ldr	r0, [r3, #0]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	4619      	mov	r1, r3
 800935a:	f7fe ffc9 	bl	80082f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800935e:	f7ff fa17 	bl	8008790 <xTaskResumeAll>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10a      	bne.n	800937e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009368:	4b09      	ldr	r3, [pc, #36]	@ (8009390 <prvProcessTimerOrBlockTask+0x98>)
 800936a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800936e:	601a      	str	r2, [r3, #0]
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	f3bf 8f6f 	isb	sy
}
 8009378:	e001      	b.n	800937e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800937a:	f7ff fa09 	bl	8008790 <xTaskResumeAll>
}
 800937e:	bf00      	nop
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	20001708 	.word	0x20001708
 800938c:	2000170c 	.word	0x2000170c
 8009390:	e000ed04 	.word	0xe000ed04

08009394 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800939c:	4b0e      	ldr	r3, [pc, #56]	@ (80093d8 <prvGetNextExpireTime+0x44>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d101      	bne.n	80093aa <prvGetNextExpireTime+0x16>
 80093a6:	2201      	movs	r2, #1
 80093a8:	e000      	b.n	80093ac <prvGetNextExpireTime+0x18>
 80093aa:	2200      	movs	r2, #0
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d105      	bne.n	80093c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093b8:	4b07      	ldr	r3, [pc, #28]	@ (80093d8 <prvGetNextExpireTime+0x44>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	60fb      	str	r3, [r7, #12]
 80093c2:	e001      	b.n	80093c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80093c8:	68fb      	ldr	r3, [r7, #12]
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3714      	adds	r7, #20
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	20001704 	.word	0x20001704

080093dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80093e4:	f7ff fa72 	bl	80088cc <xTaskGetTickCount>
 80093e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80093ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009418 <prvSampleTimeNow+0x3c>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d205      	bcs.n	8009400 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80093f4:	f000 f93a 	bl	800966c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	601a      	str	r2, [r3, #0]
 80093fe:	e002      	b.n	8009406 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009406:	4a04      	ldr	r2, [pc, #16]	@ (8009418 <prvSampleTimeNow+0x3c>)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800940c:	68fb      	ldr	r3, [r7, #12]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	20001714 	.word	0x20001714

0800941c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
 8009428:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800942a:	2300      	movs	r3, #0
 800942c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	429a      	cmp	r2, r3
 8009440:	d812      	bhi.n	8009468 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	1ad2      	subs	r2, r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	429a      	cmp	r2, r3
 800944e:	d302      	bcc.n	8009456 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009450:	2301      	movs	r3, #1
 8009452:	617b      	str	r3, [r7, #20]
 8009454:	e01b      	b.n	800948e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009456:	4b10      	ldr	r3, [pc, #64]	@ (8009498 <prvInsertTimerInActiveList+0x7c>)
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	3304      	adds	r3, #4
 800945e:	4619      	mov	r1, r3
 8009460:	4610      	mov	r0, r2
 8009462:	f7fe f95e 	bl	8007722 <vListInsert>
 8009466:	e012      	b.n	800948e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	429a      	cmp	r2, r3
 800946e:	d206      	bcs.n	800947e <prvInsertTimerInActiveList+0x62>
 8009470:	68ba      	ldr	r2, [r7, #8]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	429a      	cmp	r2, r3
 8009476:	d302      	bcc.n	800947e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009478:	2301      	movs	r3, #1
 800947a:	617b      	str	r3, [r7, #20]
 800947c:	e007      	b.n	800948e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800947e:	4b07      	ldr	r3, [pc, #28]	@ (800949c <prvInsertTimerInActiveList+0x80>)
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3304      	adds	r3, #4
 8009486:	4619      	mov	r1, r3
 8009488:	4610      	mov	r0, r2
 800948a:	f7fe f94a 	bl	8007722 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800948e:	697b      	ldr	r3, [r7, #20]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3718      	adds	r7, #24
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	20001708 	.word	0x20001708
 800949c:	20001704 	.word	0x20001704

080094a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b08e      	sub	sp, #56	@ 0x38
 80094a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094a6:	e0ce      	b.n	8009646 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	da19      	bge.n	80094e2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80094ae:	1d3b      	adds	r3, r7, #4
 80094b0:	3304      	adds	r3, #4
 80094b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80094b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10b      	bne.n	80094d2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	61fb      	str	r3, [r7, #28]
}
 80094cc:	bf00      	nop
 80094ce:	bf00      	nop
 80094d0:	e7fd      	b.n	80094ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80094d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094d8:	6850      	ldr	r0, [r2, #4]
 80094da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094dc:	6892      	ldr	r2, [r2, #8]
 80094de:	4611      	mov	r1, r2
 80094e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f2c0 80ae 	blt.w	8009646 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80094ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d004      	beq.n	8009500 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f8:	3304      	adds	r3, #4
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fe f94a 	bl	8007794 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009500:	463b      	mov	r3, r7
 8009502:	4618      	mov	r0, r3
 8009504:	f7ff ff6a 	bl	80093dc <prvSampleTimeNow>
 8009508:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b09      	cmp	r3, #9
 800950e:	f200 8097 	bhi.w	8009640 <prvProcessReceivedCommands+0x1a0>
 8009512:	a201      	add	r2, pc, #4	@ (adr r2, 8009518 <prvProcessReceivedCommands+0x78>)
 8009514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009518:	08009541 	.word	0x08009541
 800951c:	08009541 	.word	0x08009541
 8009520:	08009541 	.word	0x08009541
 8009524:	080095b7 	.word	0x080095b7
 8009528:	080095cb 	.word	0x080095cb
 800952c:	08009617 	.word	0x08009617
 8009530:	08009541 	.word	0x08009541
 8009534:	08009541 	.word	0x08009541
 8009538:	080095b7 	.word	0x080095b7
 800953c:	080095cb 	.word	0x080095cb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009542:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009546:	f043 0301 	orr.w	r3, r3, #1
 800954a:	b2da      	uxtb	r2, r3
 800954c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800954e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009556:	699b      	ldr	r3, [r3, #24]
 8009558:	18d1      	adds	r1, r2, r3
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800955e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009560:	f7ff ff5c 	bl	800941c <prvInsertTimerInActiveList>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d06c      	beq.n	8009644 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800956a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800956c:	6a1b      	ldr	r3, [r3, #32]
 800956e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009570:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009574:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009578:	f003 0304 	and.w	r3, r3, #4
 800957c:	2b00      	cmp	r3, #0
 800957e:	d061      	beq.n	8009644 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	441a      	add	r2, r3
 8009588:	2300      	movs	r3, #0
 800958a:	9300      	str	r3, [sp, #0]
 800958c:	2300      	movs	r3, #0
 800958e:	2100      	movs	r1, #0
 8009590:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009592:	f7ff fe01 	bl	8009198 <xTimerGenericCommand>
 8009596:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009598:	6a3b      	ldr	r3, [r7, #32]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d152      	bne.n	8009644 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800959e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	61bb      	str	r3, [r7, #24]
}
 80095b0:	bf00      	nop
 80095b2:	bf00      	nop
 80095b4:	e7fd      	b.n	80095b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095bc:	f023 0301 	bic.w	r3, r3, #1
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80095c8:	e03d      	b.n	8009646 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095d0:	f043 0301 	orr.w	r3, r3, #1
 80095d4:	b2da      	uxtb	r2, r3
 80095d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80095e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10b      	bne.n	8009602 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80095ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	617b      	str	r3, [r7, #20]
}
 80095fc:	bf00      	nop
 80095fe:	bf00      	nop
 8009600:	e7fd      	b.n	80095fe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009604:	699a      	ldr	r2, [r3, #24]
 8009606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009608:	18d1      	adds	r1, r2, r3
 800960a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800960e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009610:	f7ff ff04 	bl	800941c <prvInsertTimerInActiveList>
					break;
 8009614:	e017      	b.n	8009646 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009618:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800961c:	f003 0302 	and.w	r3, r3, #2
 8009620:	2b00      	cmp	r3, #0
 8009622:	d103      	bne.n	800962c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009624:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009626:	f000 fbe7 	bl	8009df8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800962a:	e00c      	b.n	8009646 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800962c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009632:	f023 0301 	bic.w	r3, r3, #1
 8009636:	b2da      	uxtb	r2, r3
 8009638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800963e:	e002      	b.n	8009646 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009640:	bf00      	nop
 8009642:	e000      	b.n	8009646 <prvProcessReceivedCommands+0x1a6>
					break;
 8009644:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009646:	4b08      	ldr	r3, [pc, #32]	@ (8009668 <prvProcessReceivedCommands+0x1c8>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	1d39      	adds	r1, r7, #4
 800964c:	2200      	movs	r2, #0
 800964e:	4618      	mov	r0, r3
 8009650:	f7fe fbb0 	bl	8007db4 <xQueueReceive>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	f47f af26 	bne.w	80094a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800965c:	bf00      	nop
 800965e:	bf00      	nop
 8009660:	3730      	adds	r7, #48	@ 0x30
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	2000170c 	.word	0x2000170c

0800966c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b088      	sub	sp, #32
 8009670:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009672:	e049      	b.n	8009708 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009674:	4b2e      	ldr	r3, [pc, #184]	@ (8009730 <prvSwitchTimerLists+0xc4>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800967e:	4b2c      	ldr	r3, [pc, #176]	@ (8009730 <prvSwitchTimerLists+0xc4>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	3304      	adds	r3, #4
 800968c:	4618      	mov	r0, r3
 800968e:	f7fe f881 	bl	8007794 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096a0:	f003 0304 	and.w	r3, r3, #4
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d02f      	beq.n	8009708 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	699b      	ldr	r3, [r3, #24]
 80096ac:	693a      	ldr	r2, [r7, #16]
 80096ae:	4413      	add	r3, r2
 80096b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80096b2:	68ba      	ldr	r2, [r7, #8]
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d90e      	bls.n	80096d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096c6:	4b1a      	ldr	r3, [pc, #104]	@ (8009730 <prvSwitchTimerLists+0xc4>)
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	3304      	adds	r3, #4
 80096ce:	4619      	mov	r1, r3
 80096d0:	4610      	mov	r0, r2
 80096d2:	f7fe f826 	bl	8007722 <vListInsert>
 80096d6:	e017      	b.n	8009708 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096d8:	2300      	movs	r3, #0
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	2300      	movs	r3, #0
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	2100      	movs	r1, #0
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f7ff fd58 	bl	8009198 <xTimerGenericCommand>
 80096e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d10b      	bne.n	8009708 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80096f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	603b      	str	r3, [r7, #0]
}
 8009702:	bf00      	nop
 8009704:	bf00      	nop
 8009706:	e7fd      	b.n	8009704 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009708:	4b09      	ldr	r3, [pc, #36]	@ (8009730 <prvSwitchTimerLists+0xc4>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1b0      	bne.n	8009674 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009712:	4b07      	ldr	r3, [pc, #28]	@ (8009730 <prvSwitchTimerLists+0xc4>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009718:	4b06      	ldr	r3, [pc, #24]	@ (8009734 <prvSwitchTimerLists+0xc8>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a04      	ldr	r2, [pc, #16]	@ (8009730 <prvSwitchTimerLists+0xc4>)
 800971e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009720:	4a04      	ldr	r2, [pc, #16]	@ (8009734 <prvSwitchTimerLists+0xc8>)
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	6013      	str	r3, [r2, #0]
}
 8009726:	bf00      	nop
 8009728:	3718      	adds	r7, #24
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	20001704 	.word	0x20001704
 8009734:	20001708 	.word	0x20001708

08009738 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800973e:	f000 f96b 	bl	8009a18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009742:	4b15      	ldr	r3, [pc, #84]	@ (8009798 <prvCheckForValidListAndQueue+0x60>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d120      	bne.n	800978c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800974a:	4814      	ldr	r0, [pc, #80]	@ (800979c <prvCheckForValidListAndQueue+0x64>)
 800974c:	f7fd ff98 	bl	8007680 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009750:	4813      	ldr	r0, [pc, #76]	@ (80097a0 <prvCheckForValidListAndQueue+0x68>)
 8009752:	f7fd ff95 	bl	8007680 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009756:	4b13      	ldr	r3, [pc, #76]	@ (80097a4 <prvCheckForValidListAndQueue+0x6c>)
 8009758:	4a10      	ldr	r2, [pc, #64]	@ (800979c <prvCheckForValidListAndQueue+0x64>)
 800975a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800975c:	4b12      	ldr	r3, [pc, #72]	@ (80097a8 <prvCheckForValidListAndQueue+0x70>)
 800975e:	4a10      	ldr	r2, [pc, #64]	@ (80097a0 <prvCheckForValidListAndQueue+0x68>)
 8009760:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009762:	2300      	movs	r3, #0
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	4b11      	ldr	r3, [pc, #68]	@ (80097ac <prvCheckForValidListAndQueue+0x74>)
 8009768:	4a11      	ldr	r2, [pc, #68]	@ (80097b0 <prvCheckForValidListAndQueue+0x78>)
 800976a:	2110      	movs	r1, #16
 800976c:	200a      	movs	r0, #10
 800976e:	f7fe f8a5 	bl	80078bc <xQueueGenericCreateStatic>
 8009772:	4603      	mov	r3, r0
 8009774:	4a08      	ldr	r2, [pc, #32]	@ (8009798 <prvCheckForValidListAndQueue+0x60>)
 8009776:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009778:	4b07      	ldr	r3, [pc, #28]	@ (8009798 <prvCheckForValidListAndQueue+0x60>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d005      	beq.n	800978c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009780:	4b05      	ldr	r3, [pc, #20]	@ (8009798 <prvCheckForValidListAndQueue+0x60>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	490b      	ldr	r1, [pc, #44]	@ (80097b4 <prvCheckForValidListAndQueue+0x7c>)
 8009786:	4618      	mov	r0, r3
 8009788:	f7fe fd88 	bl	800829c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800978c:	f000 f976 	bl	8009a7c <vPortExitCritical>
}
 8009790:	bf00      	nop
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	2000170c 	.word	0x2000170c
 800979c:	200016dc 	.word	0x200016dc
 80097a0:	200016f0 	.word	0x200016f0
 80097a4:	20001704 	.word	0x20001704
 80097a8:	20001708 	.word	0x20001708
 80097ac:	200017b8 	.word	0x200017b8
 80097b0:	20001718 	.word	0x20001718
 80097b4:	0800af6c 	.word	0x0800af6c

080097b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	3b04      	subs	r3, #4
 80097c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80097d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	3b04      	subs	r3, #4
 80097d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	f023 0201 	bic.w	r2, r3, #1
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3b04      	subs	r3, #4
 80097e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097e8:	4a0c      	ldr	r2, [pc, #48]	@ (800981c <pxPortInitialiseStack+0x64>)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	3b14      	subs	r3, #20
 80097f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3b04      	subs	r3, #4
 80097fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f06f 0202 	mvn.w	r2, #2
 8009806:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	3b20      	subs	r3, #32
 800980c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800980e:	68fb      	ldr	r3, [r7, #12]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3714      	adds	r7, #20
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr
 800981c:	08009821 	.word	0x08009821

08009820 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009826:	2300      	movs	r3, #0
 8009828:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800982a:	4b13      	ldr	r3, [pc, #76]	@ (8009878 <prvTaskExitError+0x58>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009832:	d00b      	beq.n	800984c <prvTaskExitError+0x2c>
	__asm volatile
 8009834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009838:	f383 8811 	msr	BASEPRI, r3
 800983c:	f3bf 8f6f 	isb	sy
 8009840:	f3bf 8f4f 	dsb	sy
 8009844:	60fb      	str	r3, [r7, #12]
}
 8009846:	bf00      	nop
 8009848:	bf00      	nop
 800984a:	e7fd      	b.n	8009848 <prvTaskExitError+0x28>
	__asm volatile
 800984c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009850:	f383 8811 	msr	BASEPRI, r3
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	f3bf 8f4f 	dsb	sy
 800985c:	60bb      	str	r3, [r7, #8]
}
 800985e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009860:	bf00      	nop
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d0fc      	beq.n	8009862 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009868:	bf00      	nop
 800986a:	bf00      	nop
 800986c:	3714      	adds	r7, #20
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	2000000c 	.word	0x2000000c
 800987c:	00000000 	.word	0x00000000

08009880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009880:	4b07      	ldr	r3, [pc, #28]	@ (80098a0 <pxCurrentTCBConst2>)
 8009882:	6819      	ldr	r1, [r3, #0]
 8009884:	6808      	ldr	r0, [r1, #0]
 8009886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988a:	f380 8809 	msr	PSP, r0
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f04f 0000 	mov.w	r0, #0
 8009896:	f380 8811 	msr	BASEPRI, r0
 800989a:	4770      	bx	lr
 800989c:	f3af 8000 	nop.w

080098a0 <pxCurrentTCBConst2>:
 80098a0:	200011dc 	.word	0x200011dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80098a4:	bf00      	nop
 80098a6:	bf00      	nop

080098a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80098a8:	4808      	ldr	r0, [pc, #32]	@ (80098cc <prvPortStartFirstTask+0x24>)
 80098aa:	6800      	ldr	r0, [r0, #0]
 80098ac:	6800      	ldr	r0, [r0, #0]
 80098ae:	f380 8808 	msr	MSP, r0
 80098b2:	f04f 0000 	mov.w	r0, #0
 80098b6:	f380 8814 	msr	CONTROL, r0
 80098ba:	b662      	cpsie	i
 80098bc:	b661      	cpsie	f
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	f3bf 8f6f 	isb	sy
 80098c6:	df00      	svc	0
 80098c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80098ca:	bf00      	nop
 80098cc:	e000ed08 	.word	0xe000ed08

080098d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80098d6:	4b47      	ldr	r3, [pc, #284]	@ (80099f4 <xPortStartScheduler+0x124>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a47      	ldr	r2, [pc, #284]	@ (80099f8 <xPortStartScheduler+0x128>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d10b      	bne.n	80098f8 <xPortStartScheduler+0x28>
	__asm volatile
 80098e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	60fb      	str	r3, [r7, #12]
}
 80098f2:	bf00      	nop
 80098f4:	bf00      	nop
 80098f6:	e7fd      	b.n	80098f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098f8:	4b3e      	ldr	r3, [pc, #248]	@ (80099f4 <xPortStartScheduler+0x124>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a3f      	ldr	r2, [pc, #252]	@ (80099fc <xPortStartScheduler+0x12c>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d10b      	bne.n	800991a <xPortStartScheduler+0x4a>
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	613b      	str	r3, [r7, #16]
}
 8009914:	bf00      	nop
 8009916:	bf00      	nop
 8009918:	e7fd      	b.n	8009916 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800991a:	4b39      	ldr	r3, [pc, #228]	@ (8009a00 <xPortStartScheduler+0x130>)
 800991c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	b2db      	uxtb	r3, r3
 8009924:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	22ff      	movs	r2, #255	@ 0xff
 800992a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	b2db      	uxtb	r3, r3
 8009932:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009934:	78fb      	ldrb	r3, [r7, #3]
 8009936:	b2db      	uxtb	r3, r3
 8009938:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800993c:	b2da      	uxtb	r2, r3
 800993e:	4b31      	ldr	r3, [pc, #196]	@ (8009a04 <xPortStartScheduler+0x134>)
 8009940:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009942:	4b31      	ldr	r3, [pc, #196]	@ (8009a08 <xPortStartScheduler+0x138>)
 8009944:	2207      	movs	r2, #7
 8009946:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009948:	e009      	b.n	800995e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800994a:	4b2f      	ldr	r3, [pc, #188]	@ (8009a08 <xPortStartScheduler+0x138>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	3b01      	subs	r3, #1
 8009950:	4a2d      	ldr	r2, [pc, #180]	@ (8009a08 <xPortStartScheduler+0x138>)
 8009952:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009954:	78fb      	ldrb	r3, [r7, #3]
 8009956:	b2db      	uxtb	r3, r3
 8009958:	005b      	lsls	r3, r3, #1
 800995a:	b2db      	uxtb	r3, r3
 800995c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800995e:	78fb      	ldrb	r3, [r7, #3]
 8009960:	b2db      	uxtb	r3, r3
 8009962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009966:	2b80      	cmp	r3, #128	@ 0x80
 8009968:	d0ef      	beq.n	800994a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800996a:	4b27      	ldr	r3, [pc, #156]	@ (8009a08 <xPortStartScheduler+0x138>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f1c3 0307 	rsb	r3, r3, #7
 8009972:	2b04      	cmp	r3, #4
 8009974:	d00b      	beq.n	800998e <xPortStartScheduler+0xbe>
	__asm volatile
 8009976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	60bb      	str	r3, [r7, #8]
}
 8009988:	bf00      	nop
 800998a:	bf00      	nop
 800998c:	e7fd      	b.n	800998a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800998e:	4b1e      	ldr	r3, [pc, #120]	@ (8009a08 <xPortStartScheduler+0x138>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	021b      	lsls	r3, r3, #8
 8009994:	4a1c      	ldr	r2, [pc, #112]	@ (8009a08 <xPortStartScheduler+0x138>)
 8009996:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009998:	4b1b      	ldr	r3, [pc, #108]	@ (8009a08 <xPortStartScheduler+0x138>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80099a0:	4a19      	ldr	r2, [pc, #100]	@ (8009a08 <xPortStartScheduler+0x138>)
 80099a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	b2da      	uxtb	r2, r3
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80099ac:	4b17      	ldr	r3, [pc, #92]	@ (8009a0c <xPortStartScheduler+0x13c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a16      	ldr	r2, [pc, #88]	@ (8009a0c <xPortStartScheduler+0x13c>)
 80099b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80099b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80099b8:	4b14      	ldr	r3, [pc, #80]	@ (8009a0c <xPortStartScheduler+0x13c>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a13      	ldr	r2, [pc, #76]	@ (8009a0c <xPortStartScheduler+0x13c>)
 80099be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80099c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80099c4:	f000 f8da 	bl	8009b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80099c8:	4b11      	ldr	r3, [pc, #68]	@ (8009a10 <xPortStartScheduler+0x140>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80099ce:	f000 f8f9 	bl	8009bc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80099d2:	4b10      	ldr	r3, [pc, #64]	@ (8009a14 <xPortStartScheduler+0x144>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a0f      	ldr	r2, [pc, #60]	@ (8009a14 <xPortStartScheduler+0x144>)
 80099d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80099dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099de:	f7ff ff63 	bl	80098a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099e2:	f7ff f83d 	bl	8008a60 <vTaskSwitchContext>
	prvTaskExitError();
 80099e6:	f7ff ff1b 	bl	8009820 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	e000ed00 	.word	0xe000ed00
 80099f8:	410fc271 	.word	0x410fc271
 80099fc:	410fc270 	.word	0x410fc270
 8009a00:	e000e400 	.word	0xe000e400
 8009a04:	20001808 	.word	0x20001808
 8009a08:	2000180c 	.word	0x2000180c
 8009a0c:	e000ed20 	.word	0xe000ed20
 8009a10:	2000000c 	.word	0x2000000c
 8009a14:	e000ef34 	.word	0xe000ef34

08009a18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	607b      	str	r3, [r7, #4]
}
 8009a30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a32:	4b10      	ldr	r3, [pc, #64]	@ (8009a74 <vPortEnterCritical+0x5c>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	3301      	adds	r3, #1
 8009a38:	4a0e      	ldr	r2, [pc, #56]	@ (8009a74 <vPortEnterCritical+0x5c>)
 8009a3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8009a74 <vPortEnterCritical+0x5c>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d110      	bne.n	8009a66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a44:	4b0c      	ldr	r3, [pc, #48]	@ (8009a78 <vPortEnterCritical+0x60>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00b      	beq.n	8009a66 <vPortEnterCritical+0x4e>
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	603b      	str	r3, [r7, #0]
}
 8009a60:	bf00      	nop
 8009a62:	bf00      	nop
 8009a64:	e7fd      	b.n	8009a62 <vPortEnterCritical+0x4a>
	}
}
 8009a66:	bf00      	nop
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	2000000c 	.word	0x2000000c
 8009a78:	e000ed04 	.word	0xe000ed04

08009a7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a82:	4b12      	ldr	r3, [pc, #72]	@ (8009acc <vPortExitCritical+0x50>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d10b      	bne.n	8009aa2 <vPortExitCritical+0x26>
	__asm volatile
 8009a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a8e:	f383 8811 	msr	BASEPRI, r3
 8009a92:	f3bf 8f6f 	isb	sy
 8009a96:	f3bf 8f4f 	dsb	sy
 8009a9a:	607b      	str	r3, [r7, #4]
}
 8009a9c:	bf00      	nop
 8009a9e:	bf00      	nop
 8009aa0:	e7fd      	b.n	8009a9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8009acc <vPortExitCritical+0x50>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	4a08      	ldr	r2, [pc, #32]	@ (8009acc <vPortExitCritical+0x50>)
 8009aaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009aac:	4b07      	ldr	r3, [pc, #28]	@ (8009acc <vPortExitCritical+0x50>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d105      	bne.n	8009ac0 <vPortExitCritical+0x44>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	f383 8811 	msr	BASEPRI, r3
}
 8009abe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr
 8009acc:	2000000c 	.word	0x2000000c

08009ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ad0:	f3ef 8009 	mrs	r0, PSP
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	4b15      	ldr	r3, [pc, #84]	@ (8009b30 <pxCurrentTCBConst>)
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	f01e 0f10 	tst.w	lr, #16
 8009ae0:	bf08      	it	eq
 8009ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aea:	6010      	str	r0, [r2, #0]
 8009aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009af0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009af4:	f380 8811 	msr	BASEPRI, r0
 8009af8:	f3bf 8f4f 	dsb	sy
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f7fe ffae 	bl	8008a60 <vTaskSwitchContext>
 8009b04:	f04f 0000 	mov.w	r0, #0
 8009b08:	f380 8811 	msr	BASEPRI, r0
 8009b0c:	bc09      	pop	{r0, r3}
 8009b0e:	6819      	ldr	r1, [r3, #0]
 8009b10:	6808      	ldr	r0, [r1, #0]
 8009b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b16:	f01e 0f10 	tst.w	lr, #16
 8009b1a:	bf08      	it	eq
 8009b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b20:	f380 8809 	msr	PSP, r0
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	f3af 8000 	nop.w

08009b30 <pxCurrentTCBConst>:
 8009b30:	200011dc 	.word	0x200011dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b34:	bf00      	nop
 8009b36:	bf00      	nop

08009b38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b42:	f383 8811 	msr	BASEPRI, r3
 8009b46:	f3bf 8f6f 	isb	sy
 8009b4a:	f3bf 8f4f 	dsb	sy
 8009b4e:	607b      	str	r3, [r7, #4]
}
 8009b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b52:	f7fe fecb 	bl	80088ec <xTaskIncrementTick>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d003      	beq.n	8009b64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b5c:	4b06      	ldr	r3, [pc, #24]	@ (8009b78 <xPortSysTickHandler+0x40>)
 8009b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	2300      	movs	r3, #0
 8009b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	f383 8811 	msr	BASEPRI, r3
}
 8009b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b70:	bf00      	nop
 8009b72:	3708      	adds	r7, #8
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	e000ed04 	.word	0xe000ed04

08009b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b80:	4b0b      	ldr	r3, [pc, #44]	@ (8009bb0 <vPortSetupTimerInterrupt+0x34>)
 8009b82:	2200      	movs	r2, #0
 8009b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b86:	4b0b      	ldr	r3, [pc, #44]	@ (8009bb4 <vPortSetupTimerInterrupt+0x38>)
 8009b88:	2200      	movs	r2, #0
 8009b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009bb8 <vPortSetupTimerInterrupt+0x3c>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a0a      	ldr	r2, [pc, #40]	@ (8009bbc <vPortSetupTimerInterrupt+0x40>)
 8009b92:	fba2 2303 	umull	r2, r3, r2, r3
 8009b96:	099b      	lsrs	r3, r3, #6
 8009b98:	4a09      	ldr	r2, [pc, #36]	@ (8009bc0 <vPortSetupTimerInterrupt+0x44>)
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b9e:	4b04      	ldr	r3, [pc, #16]	@ (8009bb0 <vPortSetupTimerInterrupt+0x34>)
 8009ba0:	2207      	movs	r2, #7
 8009ba2:	601a      	str	r2, [r3, #0]
}
 8009ba4:	bf00      	nop
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	e000e010 	.word	0xe000e010
 8009bb4:	e000e018 	.word	0xe000e018
 8009bb8:	20000000 	.word	0x20000000
 8009bbc:	10624dd3 	.word	0x10624dd3
 8009bc0:	e000e014 	.word	0xe000e014

08009bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009bd4 <vPortEnableVFP+0x10>
 8009bc8:	6801      	ldr	r1, [r0, #0]
 8009bca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009bce:	6001      	str	r1, [r0, #0]
 8009bd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009bd2:	bf00      	nop
 8009bd4:	e000ed88 	.word	0xe000ed88

08009bd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009bde:	f3ef 8305 	mrs	r3, IPSR
 8009be2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2b0f      	cmp	r3, #15
 8009be8:	d915      	bls.n	8009c16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bea:	4a18      	ldr	r2, [pc, #96]	@ (8009c4c <vPortValidateInterruptPriority+0x74>)
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4413      	add	r3, r2
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009bf4:	4b16      	ldr	r3, [pc, #88]	@ (8009c50 <vPortValidateInterruptPriority+0x78>)
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	7afa      	ldrb	r2, [r7, #11]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d20b      	bcs.n	8009c16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	607b      	str	r3, [r7, #4]
}
 8009c10:	bf00      	nop
 8009c12:	bf00      	nop
 8009c14:	e7fd      	b.n	8009c12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c16:	4b0f      	ldr	r3, [pc, #60]	@ (8009c54 <vPortValidateInterruptPriority+0x7c>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8009c58 <vPortValidateInterruptPriority+0x80>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d90b      	bls.n	8009c3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c2a:	f383 8811 	msr	BASEPRI, r3
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	f3bf 8f4f 	dsb	sy
 8009c36:	603b      	str	r3, [r7, #0]
}
 8009c38:	bf00      	nop
 8009c3a:	bf00      	nop
 8009c3c:	e7fd      	b.n	8009c3a <vPortValidateInterruptPriority+0x62>
	}
 8009c3e:	bf00      	nop
 8009c40:	3714      	adds	r7, #20
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	e000e3f0 	.word	0xe000e3f0
 8009c50:	20001808 	.word	0x20001808
 8009c54:	e000ed0c 	.word	0xe000ed0c
 8009c58:	2000180c 	.word	0x2000180c

08009c5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b08a      	sub	sp, #40	@ 0x28
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c64:	2300      	movs	r3, #0
 8009c66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c68:	f7fe fd84 	bl	8008774 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c6c:	4b5c      	ldr	r3, [pc, #368]	@ (8009de0 <pvPortMalloc+0x184>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d101      	bne.n	8009c78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c74:	f000 f924 	bl	8009ec0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c78:	4b5a      	ldr	r3, [pc, #360]	@ (8009de4 <pvPortMalloc+0x188>)
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4013      	ands	r3, r2
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f040 8095 	bne.w	8009db0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d01e      	beq.n	8009cca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009c8c:	2208      	movs	r2, #8
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4413      	add	r3, r2
 8009c92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f003 0307 	and.w	r3, r3, #7
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d015      	beq.n	8009cca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f023 0307 	bic.w	r3, r3, #7
 8009ca4:	3308      	adds	r3, #8
 8009ca6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f003 0307 	and.w	r3, r3, #7
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00b      	beq.n	8009cca <pvPortMalloc+0x6e>
	__asm volatile
 8009cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb6:	f383 8811 	msr	BASEPRI, r3
 8009cba:	f3bf 8f6f 	isb	sy
 8009cbe:	f3bf 8f4f 	dsb	sy
 8009cc2:	617b      	str	r3, [r7, #20]
}
 8009cc4:	bf00      	nop
 8009cc6:	bf00      	nop
 8009cc8:	e7fd      	b.n	8009cc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d06f      	beq.n	8009db0 <pvPortMalloc+0x154>
 8009cd0:	4b45      	ldr	r3, [pc, #276]	@ (8009de8 <pvPortMalloc+0x18c>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d86a      	bhi.n	8009db0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009cda:	4b44      	ldr	r3, [pc, #272]	@ (8009dec <pvPortMalloc+0x190>)
 8009cdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009cde:	4b43      	ldr	r3, [pc, #268]	@ (8009dec <pvPortMalloc+0x190>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ce4:	e004      	b.n	8009cf0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d903      	bls.n	8009d02 <pvPortMalloc+0xa6>
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1f1      	bne.n	8009ce6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d02:	4b37      	ldr	r3, [pc, #220]	@ (8009de0 <pvPortMalloc+0x184>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d051      	beq.n	8009db0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d0c:	6a3b      	ldr	r3, [r7, #32]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2208      	movs	r2, #8
 8009d12:	4413      	add	r3, r2
 8009d14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	6a3b      	ldr	r3, [r7, #32]
 8009d1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d20:	685a      	ldr	r2, [r3, #4]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	1ad2      	subs	r2, r2, r3
 8009d26:	2308      	movs	r3, #8
 8009d28:	005b      	lsls	r3, r3, #1
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d920      	bls.n	8009d70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4413      	add	r3, r2
 8009d34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	f003 0307 	and.w	r3, r3, #7
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00b      	beq.n	8009d58 <pvPortMalloc+0xfc>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	613b      	str	r3, [r7, #16]
}
 8009d52:	bf00      	nop
 8009d54:	bf00      	nop
 8009d56:	e7fd      	b.n	8009d54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5a:	685a      	ldr	r2, [r3, #4]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	1ad2      	subs	r2, r2, r3
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d6a:	69b8      	ldr	r0, [r7, #24]
 8009d6c:	f000 f90a 	bl	8009f84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d70:	4b1d      	ldr	r3, [pc, #116]	@ (8009de8 <pvPortMalloc+0x18c>)
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	1ad3      	subs	r3, r2, r3
 8009d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8009de8 <pvPortMalloc+0x18c>)
 8009d7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8009de8 <pvPortMalloc+0x18c>)
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	4b1b      	ldr	r3, [pc, #108]	@ (8009df0 <pvPortMalloc+0x194>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d203      	bcs.n	8009d92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d8a:	4b17      	ldr	r3, [pc, #92]	@ (8009de8 <pvPortMalloc+0x18c>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a18      	ldr	r2, [pc, #96]	@ (8009df0 <pvPortMalloc+0x194>)
 8009d90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d94:	685a      	ldr	r2, [r3, #4]
 8009d96:	4b13      	ldr	r3, [pc, #76]	@ (8009de4 <pvPortMalloc+0x188>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	431a      	orrs	r2, r3
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da2:	2200      	movs	r2, #0
 8009da4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009da6:	4b13      	ldr	r3, [pc, #76]	@ (8009df4 <pvPortMalloc+0x198>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	3301      	adds	r3, #1
 8009dac:	4a11      	ldr	r2, [pc, #68]	@ (8009df4 <pvPortMalloc+0x198>)
 8009dae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009db0:	f7fe fcee 	bl	8008790 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	f003 0307 	and.w	r3, r3, #7
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00b      	beq.n	8009dd6 <pvPortMalloc+0x17a>
	__asm volatile
 8009dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	60fb      	str	r3, [r7, #12]
}
 8009dd0:	bf00      	nop
 8009dd2:	bf00      	nop
 8009dd4:	e7fd      	b.n	8009dd2 <pvPortMalloc+0x176>
	return pvReturn;
 8009dd6:	69fb      	ldr	r3, [r7, #28]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3728      	adds	r7, #40	@ 0x28
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	200023d0 	.word	0x200023d0
 8009de4:	200023e4 	.word	0x200023e4
 8009de8:	200023d4 	.word	0x200023d4
 8009dec:	200023c8 	.word	0x200023c8
 8009df0:	200023d8 	.word	0x200023d8
 8009df4:	200023dc 	.word	0x200023dc

08009df8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d04f      	beq.n	8009eaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e0a:	2308      	movs	r3, #8
 8009e0c:	425b      	negs	r3, r3
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	4413      	add	r3, r2
 8009e12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	4b25      	ldr	r3, [pc, #148]	@ (8009eb4 <vPortFree+0xbc>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4013      	ands	r3, r2
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d10b      	bne.n	8009e3e <vPortFree+0x46>
	__asm volatile
 8009e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e2a:	f383 8811 	msr	BASEPRI, r3
 8009e2e:	f3bf 8f6f 	isb	sy
 8009e32:	f3bf 8f4f 	dsb	sy
 8009e36:	60fb      	str	r3, [r7, #12]
}
 8009e38:	bf00      	nop
 8009e3a:	bf00      	nop
 8009e3c:	e7fd      	b.n	8009e3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00b      	beq.n	8009e5e <vPortFree+0x66>
	__asm volatile
 8009e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e4a:	f383 8811 	msr	BASEPRI, r3
 8009e4e:	f3bf 8f6f 	isb	sy
 8009e52:	f3bf 8f4f 	dsb	sy
 8009e56:	60bb      	str	r3, [r7, #8]
}
 8009e58:	bf00      	nop
 8009e5a:	bf00      	nop
 8009e5c:	e7fd      	b.n	8009e5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	685a      	ldr	r2, [r3, #4]
 8009e62:	4b14      	ldr	r3, [pc, #80]	@ (8009eb4 <vPortFree+0xbc>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4013      	ands	r3, r2
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d01e      	beq.n	8009eaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d11a      	bne.n	8009eaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	685a      	ldr	r2, [r3, #4]
 8009e78:	4b0e      	ldr	r3, [pc, #56]	@ (8009eb4 <vPortFree+0xbc>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	43db      	mvns	r3, r3
 8009e7e:	401a      	ands	r2, r3
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e84:	f7fe fc76 	bl	8008774 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	685a      	ldr	r2, [r3, #4]
 8009e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009eb8 <vPortFree+0xc0>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4413      	add	r3, r2
 8009e92:	4a09      	ldr	r2, [pc, #36]	@ (8009eb8 <vPortFree+0xc0>)
 8009e94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e96:	6938      	ldr	r0, [r7, #16]
 8009e98:	f000 f874 	bl	8009f84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e9c:	4b07      	ldr	r3, [pc, #28]	@ (8009ebc <vPortFree+0xc4>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	4a06      	ldr	r2, [pc, #24]	@ (8009ebc <vPortFree+0xc4>)
 8009ea4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009ea6:	f7fe fc73 	bl	8008790 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009eaa:	bf00      	nop
 8009eac:	3718      	adds	r7, #24
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	200023e4 	.word	0x200023e4
 8009eb8:	200023d4 	.word	0x200023d4
 8009ebc:	200023e0 	.word	0x200023e0

08009ec0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009ec6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009eca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ecc:	4b27      	ldr	r3, [pc, #156]	@ (8009f6c <prvHeapInit+0xac>)
 8009ece:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f003 0307 	and.w	r3, r3, #7
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00c      	beq.n	8009ef4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	3307      	adds	r3, #7
 8009ede:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f023 0307 	bic.w	r3, r3, #7
 8009ee6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	4a1f      	ldr	r2, [pc, #124]	@ (8009f6c <prvHeapInit+0xac>)
 8009ef0:	4413      	add	r3, r2
 8009ef2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8009f70 <prvHeapInit+0xb0>)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009efe:	4b1c      	ldr	r3, [pc, #112]	@ (8009f70 <prvHeapInit+0xb0>)
 8009f00:	2200      	movs	r2, #0
 8009f02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	4413      	add	r3, r2
 8009f0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f0c:	2208      	movs	r2, #8
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	1a9b      	subs	r3, r3, r2
 8009f12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f023 0307 	bic.w	r3, r3, #7
 8009f1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	4a15      	ldr	r2, [pc, #84]	@ (8009f74 <prvHeapInit+0xb4>)
 8009f20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f22:	4b14      	ldr	r3, [pc, #80]	@ (8009f74 <prvHeapInit+0xb4>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	2200      	movs	r2, #0
 8009f28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f2a:	4b12      	ldr	r3, [pc, #72]	@ (8009f74 <prvHeapInit+0xb4>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	1ad2      	subs	r2, r2, r3
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f40:	4b0c      	ldr	r3, [pc, #48]	@ (8009f74 <prvHeapInit+0xb4>)
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8009f78 <prvHeapInit+0xb8>)
 8009f4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	4a09      	ldr	r2, [pc, #36]	@ (8009f7c <prvHeapInit+0xbc>)
 8009f56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f58:	4b09      	ldr	r3, [pc, #36]	@ (8009f80 <prvHeapInit+0xc0>)
 8009f5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009f5e:	601a      	str	r2, [r3, #0]
}
 8009f60:	bf00      	nop
 8009f62:	3714      	adds	r7, #20
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr
 8009f6c:	20001810 	.word	0x20001810
 8009f70:	200023c8 	.word	0x200023c8
 8009f74:	200023d0 	.word	0x200023d0
 8009f78:	200023d8 	.word	0x200023d8
 8009f7c:	200023d4 	.word	0x200023d4
 8009f80:	200023e4 	.word	0x200023e4

08009f84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f8c:	4b28      	ldr	r3, [pc, #160]	@ (800a030 <prvInsertBlockIntoFreeList+0xac>)
 8009f8e:	60fb      	str	r3, [r7, #12]
 8009f90:	e002      	b.n	8009f98 <prvInsertBlockIntoFreeList+0x14>
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	60fb      	str	r3, [r7, #12]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d8f7      	bhi.n	8009f92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	4413      	add	r3, r2
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d108      	bne.n	8009fc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	685a      	ldr	r2, [r3, #4]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	441a      	add	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	441a      	add	r2, r3
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d118      	bne.n	800a00c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	4b15      	ldr	r3, [pc, #84]	@ (800a034 <prvInsertBlockIntoFreeList+0xb0>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d00d      	beq.n	800a002 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	685a      	ldr	r2, [r3, #4]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	441a      	add	r2, r3
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	601a      	str	r2, [r3, #0]
 800a000:	e008      	b.n	800a014 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a002:	4b0c      	ldr	r3, [pc, #48]	@ (800a034 <prvInsertBlockIntoFreeList+0xb0>)
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	601a      	str	r2, [r3, #0]
 800a00a:	e003      	b.n	800a014 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d002      	beq.n	800a022 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a022:	bf00      	nop
 800a024:	3714      	adds	r7, #20
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	200023c8 	.word	0x200023c8
 800a034:	200023d0 	.word	0x200023d0

0800a038 <std>:
 800a038:	2300      	movs	r3, #0
 800a03a:	b510      	push	{r4, lr}
 800a03c:	4604      	mov	r4, r0
 800a03e:	e9c0 3300 	strd	r3, r3, [r0]
 800a042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a046:	6083      	str	r3, [r0, #8]
 800a048:	8181      	strh	r1, [r0, #12]
 800a04a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a04c:	81c2      	strh	r2, [r0, #14]
 800a04e:	6183      	str	r3, [r0, #24]
 800a050:	4619      	mov	r1, r3
 800a052:	2208      	movs	r2, #8
 800a054:	305c      	adds	r0, #92	@ 0x5c
 800a056:	f000 f90e 	bl	800a276 <memset>
 800a05a:	4b0d      	ldr	r3, [pc, #52]	@ (800a090 <std+0x58>)
 800a05c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a05e:	4b0d      	ldr	r3, [pc, #52]	@ (800a094 <std+0x5c>)
 800a060:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a062:	4b0d      	ldr	r3, [pc, #52]	@ (800a098 <std+0x60>)
 800a064:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a066:	4b0d      	ldr	r3, [pc, #52]	@ (800a09c <std+0x64>)
 800a068:	6323      	str	r3, [r4, #48]	@ 0x30
 800a06a:	4b0d      	ldr	r3, [pc, #52]	@ (800a0a0 <std+0x68>)
 800a06c:	6224      	str	r4, [r4, #32]
 800a06e:	429c      	cmp	r4, r3
 800a070:	d006      	beq.n	800a080 <std+0x48>
 800a072:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a076:	4294      	cmp	r4, r2
 800a078:	d002      	beq.n	800a080 <std+0x48>
 800a07a:	33d0      	adds	r3, #208	@ 0xd0
 800a07c:	429c      	cmp	r4, r3
 800a07e:	d105      	bne.n	800a08c <std+0x54>
 800a080:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a088:	f000 b96e 	b.w	800a368 <__retarget_lock_init_recursive>
 800a08c:	bd10      	pop	{r4, pc}
 800a08e:	bf00      	nop
 800a090:	0800a1f1 	.word	0x0800a1f1
 800a094:	0800a213 	.word	0x0800a213
 800a098:	0800a24b 	.word	0x0800a24b
 800a09c:	0800a26f 	.word	0x0800a26f
 800a0a0:	200023e8 	.word	0x200023e8

0800a0a4 <stdio_exit_handler>:
 800a0a4:	4a02      	ldr	r2, [pc, #8]	@ (800a0b0 <stdio_exit_handler+0xc>)
 800a0a6:	4903      	ldr	r1, [pc, #12]	@ (800a0b4 <stdio_exit_handler+0x10>)
 800a0a8:	4803      	ldr	r0, [pc, #12]	@ (800a0b8 <stdio_exit_handler+0x14>)
 800a0aa:	f000 b869 	b.w	800a180 <_fwalk_sglue>
 800a0ae:	bf00      	nop
 800a0b0:	20000010 	.word	0x20000010
 800a0b4:	0800ac21 	.word	0x0800ac21
 800a0b8:	20000020 	.word	0x20000020

0800a0bc <cleanup_stdio>:
 800a0bc:	6841      	ldr	r1, [r0, #4]
 800a0be:	4b0c      	ldr	r3, [pc, #48]	@ (800a0f0 <cleanup_stdio+0x34>)
 800a0c0:	4299      	cmp	r1, r3
 800a0c2:	b510      	push	{r4, lr}
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	d001      	beq.n	800a0cc <cleanup_stdio+0x10>
 800a0c8:	f000 fdaa 	bl	800ac20 <_fflush_r>
 800a0cc:	68a1      	ldr	r1, [r4, #8]
 800a0ce:	4b09      	ldr	r3, [pc, #36]	@ (800a0f4 <cleanup_stdio+0x38>)
 800a0d0:	4299      	cmp	r1, r3
 800a0d2:	d002      	beq.n	800a0da <cleanup_stdio+0x1e>
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	f000 fda3 	bl	800ac20 <_fflush_r>
 800a0da:	68e1      	ldr	r1, [r4, #12]
 800a0dc:	4b06      	ldr	r3, [pc, #24]	@ (800a0f8 <cleanup_stdio+0x3c>)
 800a0de:	4299      	cmp	r1, r3
 800a0e0:	d004      	beq.n	800a0ec <cleanup_stdio+0x30>
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0e8:	f000 bd9a 	b.w	800ac20 <_fflush_r>
 800a0ec:	bd10      	pop	{r4, pc}
 800a0ee:	bf00      	nop
 800a0f0:	200023e8 	.word	0x200023e8
 800a0f4:	20002450 	.word	0x20002450
 800a0f8:	200024b8 	.word	0x200024b8

0800a0fc <global_stdio_init.part.0>:
 800a0fc:	b510      	push	{r4, lr}
 800a0fe:	4b0b      	ldr	r3, [pc, #44]	@ (800a12c <global_stdio_init.part.0+0x30>)
 800a100:	4c0b      	ldr	r4, [pc, #44]	@ (800a130 <global_stdio_init.part.0+0x34>)
 800a102:	4a0c      	ldr	r2, [pc, #48]	@ (800a134 <global_stdio_init.part.0+0x38>)
 800a104:	601a      	str	r2, [r3, #0]
 800a106:	4620      	mov	r0, r4
 800a108:	2200      	movs	r2, #0
 800a10a:	2104      	movs	r1, #4
 800a10c:	f7ff ff94 	bl	800a038 <std>
 800a110:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a114:	2201      	movs	r2, #1
 800a116:	2109      	movs	r1, #9
 800a118:	f7ff ff8e 	bl	800a038 <std>
 800a11c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a120:	2202      	movs	r2, #2
 800a122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a126:	2112      	movs	r1, #18
 800a128:	f7ff bf86 	b.w	800a038 <std>
 800a12c:	20002520 	.word	0x20002520
 800a130:	200023e8 	.word	0x200023e8
 800a134:	0800a0a5 	.word	0x0800a0a5

0800a138 <__sfp_lock_acquire>:
 800a138:	4801      	ldr	r0, [pc, #4]	@ (800a140 <__sfp_lock_acquire+0x8>)
 800a13a:	f000 b916 	b.w	800a36a <__retarget_lock_acquire_recursive>
 800a13e:	bf00      	nop
 800a140:	20002529 	.word	0x20002529

0800a144 <__sfp_lock_release>:
 800a144:	4801      	ldr	r0, [pc, #4]	@ (800a14c <__sfp_lock_release+0x8>)
 800a146:	f000 b911 	b.w	800a36c <__retarget_lock_release_recursive>
 800a14a:	bf00      	nop
 800a14c:	20002529 	.word	0x20002529

0800a150 <__sinit>:
 800a150:	b510      	push	{r4, lr}
 800a152:	4604      	mov	r4, r0
 800a154:	f7ff fff0 	bl	800a138 <__sfp_lock_acquire>
 800a158:	6a23      	ldr	r3, [r4, #32]
 800a15a:	b11b      	cbz	r3, 800a164 <__sinit+0x14>
 800a15c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a160:	f7ff bff0 	b.w	800a144 <__sfp_lock_release>
 800a164:	4b04      	ldr	r3, [pc, #16]	@ (800a178 <__sinit+0x28>)
 800a166:	6223      	str	r3, [r4, #32]
 800a168:	4b04      	ldr	r3, [pc, #16]	@ (800a17c <__sinit+0x2c>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1f5      	bne.n	800a15c <__sinit+0xc>
 800a170:	f7ff ffc4 	bl	800a0fc <global_stdio_init.part.0>
 800a174:	e7f2      	b.n	800a15c <__sinit+0xc>
 800a176:	bf00      	nop
 800a178:	0800a0bd 	.word	0x0800a0bd
 800a17c:	20002520 	.word	0x20002520

0800a180 <_fwalk_sglue>:
 800a180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a184:	4607      	mov	r7, r0
 800a186:	4688      	mov	r8, r1
 800a188:	4614      	mov	r4, r2
 800a18a:	2600      	movs	r6, #0
 800a18c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a190:	f1b9 0901 	subs.w	r9, r9, #1
 800a194:	d505      	bpl.n	800a1a2 <_fwalk_sglue+0x22>
 800a196:	6824      	ldr	r4, [r4, #0]
 800a198:	2c00      	cmp	r4, #0
 800a19a:	d1f7      	bne.n	800a18c <_fwalk_sglue+0xc>
 800a19c:	4630      	mov	r0, r6
 800a19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1a2:	89ab      	ldrh	r3, [r5, #12]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d907      	bls.n	800a1b8 <_fwalk_sglue+0x38>
 800a1a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	d003      	beq.n	800a1b8 <_fwalk_sglue+0x38>
 800a1b0:	4629      	mov	r1, r5
 800a1b2:	4638      	mov	r0, r7
 800a1b4:	47c0      	blx	r8
 800a1b6:	4306      	orrs	r6, r0
 800a1b8:	3568      	adds	r5, #104	@ 0x68
 800a1ba:	e7e9      	b.n	800a190 <_fwalk_sglue+0x10>

0800a1bc <iprintf>:
 800a1bc:	b40f      	push	{r0, r1, r2, r3}
 800a1be:	b507      	push	{r0, r1, r2, lr}
 800a1c0:	4906      	ldr	r1, [pc, #24]	@ (800a1dc <iprintf+0x20>)
 800a1c2:	ab04      	add	r3, sp, #16
 800a1c4:	6808      	ldr	r0, [r1, #0]
 800a1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ca:	6881      	ldr	r1, [r0, #8]
 800a1cc:	9301      	str	r3, [sp, #4]
 800a1ce:	f000 f9ff 	bl	800a5d0 <_vfiprintf_r>
 800a1d2:	b003      	add	sp, #12
 800a1d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1d8:	b004      	add	sp, #16
 800a1da:	4770      	bx	lr
 800a1dc:	2000001c 	.word	0x2000001c

0800a1e0 <putchar>:
 800a1e0:	4b02      	ldr	r3, [pc, #8]	@ (800a1ec <putchar+0xc>)
 800a1e2:	4601      	mov	r1, r0
 800a1e4:	6818      	ldr	r0, [r3, #0]
 800a1e6:	6882      	ldr	r2, [r0, #8]
 800a1e8:	f000 bd42 	b.w	800ac70 <_putc_r>
 800a1ec:	2000001c 	.word	0x2000001c

0800a1f0 <__sread>:
 800a1f0:	b510      	push	{r4, lr}
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1f8:	f000 f868 	bl	800a2cc <_read_r>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	bfab      	itete	ge
 800a200:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a202:	89a3      	ldrhlt	r3, [r4, #12]
 800a204:	181b      	addge	r3, r3, r0
 800a206:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a20a:	bfac      	ite	ge
 800a20c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a20e:	81a3      	strhlt	r3, [r4, #12]
 800a210:	bd10      	pop	{r4, pc}

0800a212 <__swrite>:
 800a212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a216:	461f      	mov	r7, r3
 800a218:	898b      	ldrh	r3, [r1, #12]
 800a21a:	05db      	lsls	r3, r3, #23
 800a21c:	4605      	mov	r5, r0
 800a21e:	460c      	mov	r4, r1
 800a220:	4616      	mov	r6, r2
 800a222:	d505      	bpl.n	800a230 <__swrite+0x1e>
 800a224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a228:	2302      	movs	r3, #2
 800a22a:	2200      	movs	r2, #0
 800a22c:	f000 f83c 	bl	800a2a8 <_lseek_r>
 800a230:	89a3      	ldrh	r3, [r4, #12]
 800a232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a236:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a23a:	81a3      	strh	r3, [r4, #12]
 800a23c:	4632      	mov	r2, r6
 800a23e:	463b      	mov	r3, r7
 800a240:	4628      	mov	r0, r5
 800a242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a246:	f000 b853 	b.w	800a2f0 <_write_r>

0800a24a <__sseek>:
 800a24a:	b510      	push	{r4, lr}
 800a24c:	460c      	mov	r4, r1
 800a24e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a252:	f000 f829 	bl	800a2a8 <_lseek_r>
 800a256:	1c43      	adds	r3, r0, #1
 800a258:	89a3      	ldrh	r3, [r4, #12]
 800a25a:	bf15      	itete	ne
 800a25c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a25e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a262:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a266:	81a3      	strheq	r3, [r4, #12]
 800a268:	bf18      	it	ne
 800a26a:	81a3      	strhne	r3, [r4, #12]
 800a26c:	bd10      	pop	{r4, pc}

0800a26e <__sclose>:
 800a26e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a272:	f000 b809 	b.w	800a288 <_close_r>

0800a276 <memset>:
 800a276:	4402      	add	r2, r0
 800a278:	4603      	mov	r3, r0
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d100      	bne.n	800a280 <memset+0xa>
 800a27e:	4770      	bx	lr
 800a280:	f803 1b01 	strb.w	r1, [r3], #1
 800a284:	e7f9      	b.n	800a27a <memset+0x4>
	...

0800a288 <_close_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	4d06      	ldr	r5, [pc, #24]	@ (800a2a4 <_close_r+0x1c>)
 800a28c:	2300      	movs	r3, #0
 800a28e:	4604      	mov	r4, r0
 800a290:	4608      	mov	r0, r1
 800a292:	602b      	str	r3, [r5, #0]
 800a294:	f7f7 faa0 	bl	80017d8 <_close>
 800a298:	1c43      	adds	r3, r0, #1
 800a29a:	d102      	bne.n	800a2a2 <_close_r+0x1a>
 800a29c:	682b      	ldr	r3, [r5, #0]
 800a29e:	b103      	cbz	r3, 800a2a2 <_close_r+0x1a>
 800a2a0:	6023      	str	r3, [r4, #0]
 800a2a2:	bd38      	pop	{r3, r4, r5, pc}
 800a2a4:	20002524 	.word	0x20002524

0800a2a8 <_lseek_r>:
 800a2a8:	b538      	push	{r3, r4, r5, lr}
 800a2aa:	4d07      	ldr	r5, [pc, #28]	@ (800a2c8 <_lseek_r+0x20>)
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	4608      	mov	r0, r1
 800a2b0:	4611      	mov	r1, r2
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	602a      	str	r2, [r5, #0]
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	f7f7 fab5 	bl	8001826 <_lseek>
 800a2bc:	1c43      	adds	r3, r0, #1
 800a2be:	d102      	bne.n	800a2c6 <_lseek_r+0x1e>
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	b103      	cbz	r3, 800a2c6 <_lseek_r+0x1e>
 800a2c4:	6023      	str	r3, [r4, #0]
 800a2c6:	bd38      	pop	{r3, r4, r5, pc}
 800a2c8:	20002524 	.word	0x20002524

0800a2cc <_read_r>:
 800a2cc:	b538      	push	{r3, r4, r5, lr}
 800a2ce:	4d07      	ldr	r5, [pc, #28]	@ (800a2ec <_read_r+0x20>)
 800a2d0:	4604      	mov	r4, r0
 800a2d2:	4608      	mov	r0, r1
 800a2d4:	4611      	mov	r1, r2
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	602a      	str	r2, [r5, #0]
 800a2da:	461a      	mov	r2, r3
 800a2dc:	f7f7 fa43 	bl	8001766 <_read>
 800a2e0:	1c43      	adds	r3, r0, #1
 800a2e2:	d102      	bne.n	800a2ea <_read_r+0x1e>
 800a2e4:	682b      	ldr	r3, [r5, #0]
 800a2e6:	b103      	cbz	r3, 800a2ea <_read_r+0x1e>
 800a2e8:	6023      	str	r3, [r4, #0]
 800a2ea:	bd38      	pop	{r3, r4, r5, pc}
 800a2ec:	20002524 	.word	0x20002524

0800a2f0 <_write_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	4d07      	ldr	r5, [pc, #28]	@ (800a310 <_write_r+0x20>)
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	4608      	mov	r0, r1
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	602a      	str	r2, [r5, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	f7f7 fa4e 	bl	80017a0 <_write>
 800a304:	1c43      	adds	r3, r0, #1
 800a306:	d102      	bne.n	800a30e <_write_r+0x1e>
 800a308:	682b      	ldr	r3, [r5, #0]
 800a30a:	b103      	cbz	r3, 800a30e <_write_r+0x1e>
 800a30c:	6023      	str	r3, [r4, #0]
 800a30e:	bd38      	pop	{r3, r4, r5, pc}
 800a310:	20002524 	.word	0x20002524

0800a314 <__errno>:
 800a314:	4b01      	ldr	r3, [pc, #4]	@ (800a31c <__errno+0x8>)
 800a316:	6818      	ldr	r0, [r3, #0]
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	2000001c 	.word	0x2000001c

0800a320 <__libc_init_array>:
 800a320:	b570      	push	{r4, r5, r6, lr}
 800a322:	4d0d      	ldr	r5, [pc, #52]	@ (800a358 <__libc_init_array+0x38>)
 800a324:	4c0d      	ldr	r4, [pc, #52]	@ (800a35c <__libc_init_array+0x3c>)
 800a326:	1b64      	subs	r4, r4, r5
 800a328:	10a4      	asrs	r4, r4, #2
 800a32a:	2600      	movs	r6, #0
 800a32c:	42a6      	cmp	r6, r4
 800a32e:	d109      	bne.n	800a344 <__libc_init_array+0x24>
 800a330:	4d0b      	ldr	r5, [pc, #44]	@ (800a360 <__libc_init_array+0x40>)
 800a332:	4c0c      	ldr	r4, [pc, #48]	@ (800a364 <__libc_init_array+0x44>)
 800a334:	f000 fdf8 	bl	800af28 <_init>
 800a338:	1b64      	subs	r4, r4, r5
 800a33a:	10a4      	asrs	r4, r4, #2
 800a33c:	2600      	movs	r6, #0
 800a33e:	42a6      	cmp	r6, r4
 800a340:	d105      	bne.n	800a34e <__libc_init_array+0x2e>
 800a342:	bd70      	pop	{r4, r5, r6, pc}
 800a344:	f855 3b04 	ldr.w	r3, [r5], #4
 800a348:	4798      	blx	r3
 800a34a:	3601      	adds	r6, #1
 800a34c:	e7ee      	b.n	800a32c <__libc_init_array+0xc>
 800a34e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a352:	4798      	blx	r3
 800a354:	3601      	adds	r6, #1
 800a356:	e7f2      	b.n	800a33e <__libc_init_array+0x1e>
 800a358:	0800b034 	.word	0x0800b034
 800a35c:	0800b034 	.word	0x0800b034
 800a360:	0800b034 	.word	0x0800b034
 800a364:	0800b038 	.word	0x0800b038

0800a368 <__retarget_lock_init_recursive>:
 800a368:	4770      	bx	lr

0800a36a <__retarget_lock_acquire_recursive>:
 800a36a:	4770      	bx	lr

0800a36c <__retarget_lock_release_recursive>:
 800a36c:	4770      	bx	lr

0800a36e <memcpy>:
 800a36e:	440a      	add	r2, r1
 800a370:	4291      	cmp	r1, r2
 800a372:	f100 33ff 	add.w	r3, r0, #4294967295
 800a376:	d100      	bne.n	800a37a <memcpy+0xc>
 800a378:	4770      	bx	lr
 800a37a:	b510      	push	{r4, lr}
 800a37c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a380:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a384:	4291      	cmp	r1, r2
 800a386:	d1f9      	bne.n	800a37c <memcpy+0xe>
 800a388:	bd10      	pop	{r4, pc}
	...

0800a38c <_free_r>:
 800a38c:	b538      	push	{r3, r4, r5, lr}
 800a38e:	4605      	mov	r5, r0
 800a390:	2900      	cmp	r1, #0
 800a392:	d041      	beq.n	800a418 <_free_r+0x8c>
 800a394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a398:	1f0c      	subs	r4, r1, #4
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	bfb8      	it	lt
 800a39e:	18e4      	addlt	r4, r4, r3
 800a3a0:	f000 f8e0 	bl	800a564 <__malloc_lock>
 800a3a4:	4a1d      	ldr	r2, [pc, #116]	@ (800a41c <_free_r+0x90>)
 800a3a6:	6813      	ldr	r3, [r2, #0]
 800a3a8:	b933      	cbnz	r3, 800a3b8 <_free_r+0x2c>
 800a3aa:	6063      	str	r3, [r4, #4]
 800a3ac:	6014      	str	r4, [r2, #0]
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3b4:	f000 b8dc 	b.w	800a570 <__malloc_unlock>
 800a3b8:	42a3      	cmp	r3, r4
 800a3ba:	d908      	bls.n	800a3ce <_free_r+0x42>
 800a3bc:	6820      	ldr	r0, [r4, #0]
 800a3be:	1821      	adds	r1, r4, r0
 800a3c0:	428b      	cmp	r3, r1
 800a3c2:	bf01      	itttt	eq
 800a3c4:	6819      	ldreq	r1, [r3, #0]
 800a3c6:	685b      	ldreq	r3, [r3, #4]
 800a3c8:	1809      	addeq	r1, r1, r0
 800a3ca:	6021      	streq	r1, [r4, #0]
 800a3cc:	e7ed      	b.n	800a3aa <_free_r+0x1e>
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	b10b      	cbz	r3, 800a3d8 <_free_r+0x4c>
 800a3d4:	42a3      	cmp	r3, r4
 800a3d6:	d9fa      	bls.n	800a3ce <_free_r+0x42>
 800a3d8:	6811      	ldr	r1, [r2, #0]
 800a3da:	1850      	adds	r0, r2, r1
 800a3dc:	42a0      	cmp	r0, r4
 800a3de:	d10b      	bne.n	800a3f8 <_free_r+0x6c>
 800a3e0:	6820      	ldr	r0, [r4, #0]
 800a3e2:	4401      	add	r1, r0
 800a3e4:	1850      	adds	r0, r2, r1
 800a3e6:	4283      	cmp	r3, r0
 800a3e8:	6011      	str	r1, [r2, #0]
 800a3ea:	d1e0      	bne.n	800a3ae <_free_r+0x22>
 800a3ec:	6818      	ldr	r0, [r3, #0]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	6053      	str	r3, [r2, #4]
 800a3f2:	4408      	add	r0, r1
 800a3f4:	6010      	str	r0, [r2, #0]
 800a3f6:	e7da      	b.n	800a3ae <_free_r+0x22>
 800a3f8:	d902      	bls.n	800a400 <_free_r+0x74>
 800a3fa:	230c      	movs	r3, #12
 800a3fc:	602b      	str	r3, [r5, #0]
 800a3fe:	e7d6      	b.n	800a3ae <_free_r+0x22>
 800a400:	6820      	ldr	r0, [r4, #0]
 800a402:	1821      	adds	r1, r4, r0
 800a404:	428b      	cmp	r3, r1
 800a406:	bf04      	itt	eq
 800a408:	6819      	ldreq	r1, [r3, #0]
 800a40a:	685b      	ldreq	r3, [r3, #4]
 800a40c:	6063      	str	r3, [r4, #4]
 800a40e:	bf04      	itt	eq
 800a410:	1809      	addeq	r1, r1, r0
 800a412:	6021      	streq	r1, [r4, #0]
 800a414:	6054      	str	r4, [r2, #4]
 800a416:	e7ca      	b.n	800a3ae <_free_r+0x22>
 800a418:	bd38      	pop	{r3, r4, r5, pc}
 800a41a:	bf00      	nop
 800a41c:	20002530 	.word	0x20002530

0800a420 <sbrk_aligned>:
 800a420:	b570      	push	{r4, r5, r6, lr}
 800a422:	4e0f      	ldr	r6, [pc, #60]	@ (800a460 <sbrk_aligned+0x40>)
 800a424:	460c      	mov	r4, r1
 800a426:	6831      	ldr	r1, [r6, #0]
 800a428:	4605      	mov	r5, r0
 800a42a:	b911      	cbnz	r1, 800a432 <sbrk_aligned+0x12>
 800a42c:	f000 fce8 	bl	800ae00 <_sbrk_r>
 800a430:	6030      	str	r0, [r6, #0]
 800a432:	4621      	mov	r1, r4
 800a434:	4628      	mov	r0, r5
 800a436:	f000 fce3 	bl	800ae00 <_sbrk_r>
 800a43a:	1c43      	adds	r3, r0, #1
 800a43c:	d103      	bne.n	800a446 <sbrk_aligned+0x26>
 800a43e:	f04f 34ff 	mov.w	r4, #4294967295
 800a442:	4620      	mov	r0, r4
 800a444:	bd70      	pop	{r4, r5, r6, pc}
 800a446:	1cc4      	adds	r4, r0, #3
 800a448:	f024 0403 	bic.w	r4, r4, #3
 800a44c:	42a0      	cmp	r0, r4
 800a44e:	d0f8      	beq.n	800a442 <sbrk_aligned+0x22>
 800a450:	1a21      	subs	r1, r4, r0
 800a452:	4628      	mov	r0, r5
 800a454:	f000 fcd4 	bl	800ae00 <_sbrk_r>
 800a458:	3001      	adds	r0, #1
 800a45a:	d1f2      	bne.n	800a442 <sbrk_aligned+0x22>
 800a45c:	e7ef      	b.n	800a43e <sbrk_aligned+0x1e>
 800a45e:	bf00      	nop
 800a460:	2000252c 	.word	0x2000252c

0800a464 <_malloc_r>:
 800a464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a468:	1ccd      	adds	r5, r1, #3
 800a46a:	f025 0503 	bic.w	r5, r5, #3
 800a46e:	3508      	adds	r5, #8
 800a470:	2d0c      	cmp	r5, #12
 800a472:	bf38      	it	cc
 800a474:	250c      	movcc	r5, #12
 800a476:	2d00      	cmp	r5, #0
 800a478:	4606      	mov	r6, r0
 800a47a:	db01      	blt.n	800a480 <_malloc_r+0x1c>
 800a47c:	42a9      	cmp	r1, r5
 800a47e:	d904      	bls.n	800a48a <_malloc_r+0x26>
 800a480:	230c      	movs	r3, #12
 800a482:	6033      	str	r3, [r6, #0]
 800a484:	2000      	movs	r0, #0
 800a486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a48a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a560 <_malloc_r+0xfc>
 800a48e:	f000 f869 	bl	800a564 <__malloc_lock>
 800a492:	f8d8 3000 	ldr.w	r3, [r8]
 800a496:	461c      	mov	r4, r3
 800a498:	bb44      	cbnz	r4, 800a4ec <_malloc_r+0x88>
 800a49a:	4629      	mov	r1, r5
 800a49c:	4630      	mov	r0, r6
 800a49e:	f7ff ffbf 	bl	800a420 <sbrk_aligned>
 800a4a2:	1c43      	adds	r3, r0, #1
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	d158      	bne.n	800a55a <_malloc_r+0xf6>
 800a4a8:	f8d8 4000 	ldr.w	r4, [r8]
 800a4ac:	4627      	mov	r7, r4
 800a4ae:	2f00      	cmp	r7, #0
 800a4b0:	d143      	bne.n	800a53a <_malloc_r+0xd6>
 800a4b2:	2c00      	cmp	r4, #0
 800a4b4:	d04b      	beq.n	800a54e <_malloc_r+0xea>
 800a4b6:	6823      	ldr	r3, [r4, #0]
 800a4b8:	4639      	mov	r1, r7
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	eb04 0903 	add.w	r9, r4, r3
 800a4c0:	f000 fc9e 	bl	800ae00 <_sbrk_r>
 800a4c4:	4581      	cmp	r9, r0
 800a4c6:	d142      	bne.n	800a54e <_malloc_r+0xea>
 800a4c8:	6821      	ldr	r1, [r4, #0]
 800a4ca:	1a6d      	subs	r5, r5, r1
 800a4cc:	4629      	mov	r1, r5
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	f7ff ffa6 	bl	800a420 <sbrk_aligned>
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	d03a      	beq.n	800a54e <_malloc_r+0xea>
 800a4d8:	6823      	ldr	r3, [r4, #0]
 800a4da:	442b      	add	r3, r5
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	f8d8 3000 	ldr.w	r3, [r8]
 800a4e2:	685a      	ldr	r2, [r3, #4]
 800a4e4:	bb62      	cbnz	r2, 800a540 <_malloc_r+0xdc>
 800a4e6:	f8c8 7000 	str.w	r7, [r8]
 800a4ea:	e00f      	b.n	800a50c <_malloc_r+0xa8>
 800a4ec:	6822      	ldr	r2, [r4, #0]
 800a4ee:	1b52      	subs	r2, r2, r5
 800a4f0:	d420      	bmi.n	800a534 <_malloc_r+0xd0>
 800a4f2:	2a0b      	cmp	r2, #11
 800a4f4:	d917      	bls.n	800a526 <_malloc_r+0xc2>
 800a4f6:	1961      	adds	r1, r4, r5
 800a4f8:	42a3      	cmp	r3, r4
 800a4fa:	6025      	str	r5, [r4, #0]
 800a4fc:	bf18      	it	ne
 800a4fe:	6059      	strne	r1, [r3, #4]
 800a500:	6863      	ldr	r3, [r4, #4]
 800a502:	bf08      	it	eq
 800a504:	f8c8 1000 	streq.w	r1, [r8]
 800a508:	5162      	str	r2, [r4, r5]
 800a50a:	604b      	str	r3, [r1, #4]
 800a50c:	4630      	mov	r0, r6
 800a50e:	f000 f82f 	bl	800a570 <__malloc_unlock>
 800a512:	f104 000b 	add.w	r0, r4, #11
 800a516:	1d23      	adds	r3, r4, #4
 800a518:	f020 0007 	bic.w	r0, r0, #7
 800a51c:	1ac2      	subs	r2, r0, r3
 800a51e:	bf1c      	itt	ne
 800a520:	1a1b      	subne	r3, r3, r0
 800a522:	50a3      	strne	r3, [r4, r2]
 800a524:	e7af      	b.n	800a486 <_malloc_r+0x22>
 800a526:	6862      	ldr	r2, [r4, #4]
 800a528:	42a3      	cmp	r3, r4
 800a52a:	bf0c      	ite	eq
 800a52c:	f8c8 2000 	streq.w	r2, [r8]
 800a530:	605a      	strne	r2, [r3, #4]
 800a532:	e7eb      	b.n	800a50c <_malloc_r+0xa8>
 800a534:	4623      	mov	r3, r4
 800a536:	6864      	ldr	r4, [r4, #4]
 800a538:	e7ae      	b.n	800a498 <_malloc_r+0x34>
 800a53a:	463c      	mov	r4, r7
 800a53c:	687f      	ldr	r7, [r7, #4]
 800a53e:	e7b6      	b.n	800a4ae <_malloc_r+0x4a>
 800a540:	461a      	mov	r2, r3
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	42a3      	cmp	r3, r4
 800a546:	d1fb      	bne.n	800a540 <_malloc_r+0xdc>
 800a548:	2300      	movs	r3, #0
 800a54a:	6053      	str	r3, [r2, #4]
 800a54c:	e7de      	b.n	800a50c <_malloc_r+0xa8>
 800a54e:	230c      	movs	r3, #12
 800a550:	6033      	str	r3, [r6, #0]
 800a552:	4630      	mov	r0, r6
 800a554:	f000 f80c 	bl	800a570 <__malloc_unlock>
 800a558:	e794      	b.n	800a484 <_malloc_r+0x20>
 800a55a:	6005      	str	r5, [r0, #0]
 800a55c:	e7d6      	b.n	800a50c <_malloc_r+0xa8>
 800a55e:	bf00      	nop
 800a560:	20002530 	.word	0x20002530

0800a564 <__malloc_lock>:
 800a564:	4801      	ldr	r0, [pc, #4]	@ (800a56c <__malloc_lock+0x8>)
 800a566:	f7ff bf00 	b.w	800a36a <__retarget_lock_acquire_recursive>
 800a56a:	bf00      	nop
 800a56c:	20002528 	.word	0x20002528

0800a570 <__malloc_unlock>:
 800a570:	4801      	ldr	r0, [pc, #4]	@ (800a578 <__malloc_unlock+0x8>)
 800a572:	f7ff befb 	b.w	800a36c <__retarget_lock_release_recursive>
 800a576:	bf00      	nop
 800a578:	20002528 	.word	0x20002528

0800a57c <__sfputc_r>:
 800a57c:	6893      	ldr	r3, [r2, #8]
 800a57e:	3b01      	subs	r3, #1
 800a580:	2b00      	cmp	r3, #0
 800a582:	b410      	push	{r4}
 800a584:	6093      	str	r3, [r2, #8]
 800a586:	da08      	bge.n	800a59a <__sfputc_r+0x1e>
 800a588:	6994      	ldr	r4, [r2, #24]
 800a58a:	42a3      	cmp	r3, r4
 800a58c:	db01      	blt.n	800a592 <__sfputc_r+0x16>
 800a58e:	290a      	cmp	r1, #10
 800a590:	d103      	bne.n	800a59a <__sfputc_r+0x1e>
 800a592:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a596:	f000 bb9f 	b.w	800acd8 <__swbuf_r>
 800a59a:	6813      	ldr	r3, [r2, #0]
 800a59c:	1c58      	adds	r0, r3, #1
 800a59e:	6010      	str	r0, [r2, #0]
 800a5a0:	7019      	strb	r1, [r3, #0]
 800a5a2:	4608      	mov	r0, r1
 800a5a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <__sfputs_r>:
 800a5aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ac:	4606      	mov	r6, r0
 800a5ae:	460f      	mov	r7, r1
 800a5b0:	4614      	mov	r4, r2
 800a5b2:	18d5      	adds	r5, r2, r3
 800a5b4:	42ac      	cmp	r4, r5
 800a5b6:	d101      	bne.n	800a5bc <__sfputs_r+0x12>
 800a5b8:	2000      	movs	r0, #0
 800a5ba:	e007      	b.n	800a5cc <__sfputs_r+0x22>
 800a5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5c0:	463a      	mov	r2, r7
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	f7ff ffda 	bl	800a57c <__sfputc_r>
 800a5c8:	1c43      	adds	r3, r0, #1
 800a5ca:	d1f3      	bne.n	800a5b4 <__sfputs_r+0xa>
 800a5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5d0 <_vfiprintf_r>:
 800a5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d4:	460d      	mov	r5, r1
 800a5d6:	b09d      	sub	sp, #116	@ 0x74
 800a5d8:	4614      	mov	r4, r2
 800a5da:	4698      	mov	r8, r3
 800a5dc:	4606      	mov	r6, r0
 800a5de:	b118      	cbz	r0, 800a5e8 <_vfiprintf_r+0x18>
 800a5e0:	6a03      	ldr	r3, [r0, #32]
 800a5e2:	b90b      	cbnz	r3, 800a5e8 <_vfiprintf_r+0x18>
 800a5e4:	f7ff fdb4 	bl	800a150 <__sinit>
 800a5e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5ea:	07d9      	lsls	r1, r3, #31
 800a5ec:	d405      	bmi.n	800a5fa <_vfiprintf_r+0x2a>
 800a5ee:	89ab      	ldrh	r3, [r5, #12]
 800a5f0:	059a      	lsls	r2, r3, #22
 800a5f2:	d402      	bmi.n	800a5fa <_vfiprintf_r+0x2a>
 800a5f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5f6:	f7ff feb8 	bl	800a36a <__retarget_lock_acquire_recursive>
 800a5fa:	89ab      	ldrh	r3, [r5, #12]
 800a5fc:	071b      	lsls	r3, r3, #28
 800a5fe:	d501      	bpl.n	800a604 <_vfiprintf_r+0x34>
 800a600:	692b      	ldr	r3, [r5, #16]
 800a602:	b99b      	cbnz	r3, 800a62c <_vfiprintf_r+0x5c>
 800a604:	4629      	mov	r1, r5
 800a606:	4630      	mov	r0, r6
 800a608:	f000 fba4 	bl	800ad54 <__swsetup_r>
 800a60c:	b170      	cbz	r0, 800a62c <_vfiprintf_r+0x5c>
 800a60e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a610:	07dc      	lsls	r4, r3, #31
 800a612:	d504      	bpl.n	800a61e <_vfiprintf_r+0x4e>
 800a614:	f04f 30ff 	mov.w	r0, #4294967295
 800a618:	b01d      	add	sp, #116	@ 0x74
 800a61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61e:	89ab      	ldrh	r3, [r5, #12]
 800a620:	0598      	lsls	r0, r3, #22
 800a622:	d4f7      	bmi.n	800a614 <_vfiprintf_r+0x44>
 800a624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a626:	f7ff fea1 	bl	800a36c <__retarget_lock_release_recursive>
 800a62a:	e7f3      	b.n	800a614 <_vfiprintf_r+0x44>
 800a62c:	2300      	movs	r3, #0
 800a62e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a630:	2320      	movs	r3, #32
 800a632:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a636:	f8cd 800c 	str.w	r8, [sp, #12]
 800a63a:	2330      	movs	r3, #48	@ 0x30
 800a63c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a7ec <_vfiprintf_r+0x21c>
 800a640:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a644:	f04f 0901 	mov.w	r9, #1
 800a648:	4623      	mov	r3, r4
 800a64a:	469a      	mov	sl, r3
 800a64c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a650:	b10a      	cbz	r2, 800a656 <_vfiprintf_r+0x86>
 800a652:	2a25      	cmp	r2, #37	@ 0x25
 800a654:	d1f9      	bne.n	800a64a <_vfiprintf_r+0x7a>
 800a656:	ebba 0b04 	subs.w	fp, sl, r4
 800a65a:	d00b      	beq.n	800a674 <_vfiprintf_r+0xa4>
 800a65c:	465b      	mov	r3, fp
 800a65e:	4622      	mov	r2, r4
 800a660:	4629      	mov	r1, r5
 800a662:	4630      	mov	r0, r6
 800a664:	f7ff ffa1 	bl	800a5aa <__sfputs_r>
 800a668:	3001      	adds	r0, #1
 800a66a:	f000 80a7 	beq.w	800a7bc <_vfiprintf_r+0x1ec>
 800a66e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a670:	445a      	add	r2, fp
 800a672:	9209      	str	r2, [sp, #36]	@ 0x24
 800a674:	f89a 3000 	ldrb.w	r3, [sl]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f000 809f 	beq.w	800a7bc <_vfiprintf_r+0x1ec>
 800a67e:	2300      	movs	r3, #0
 800a680:	f04f 32ff 	mov.w	r2, #4294967295
 800a684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a688:	f10a 0a01 	add.w	sl, sl, #1
 800a68c:	9304      	str	r3, [sp, #16]
 800a68e:	9307      	str	r3, [sp, #28]
 800a690:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a694:	931a      	str	r3, [sp, #104]	@ 0x68
 800a696:	4654      	mov	r4, sl
 800a698:	2205      	movs	r2, #5
 800a69a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a69e:	4853      	ldr	r0, [pc, #332]	@ (800a7ec <_vfiprintf_r+0x21c>)
 800a6a0:	f7f5 fd96 	bl	80001d0 <memchr>
 800a6a4:	9a04      	ldr	r2, [sp, #16]
 800a6a6:	b9d8      	cbnz	r0, 800a6e0 <_vfiprintf_r+0x110>
 800a6a8:	06d1      	lsls	r1, r2, #27
 800a6aa:	bf44      	itt	mi
 800a6ac:	2320      	movmi	r3, #32
 800a6ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6b2:	0713      	lsls	r3, r2, #28
 800a6b4:	bf44      	itt	mi
 800a6b6:	232b      	movmi	r3, #43	@ 0x2b
 800a6b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a6c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6c2:	d015      	beq.n	800a6f0 <_vfiprintf_r+0x120>
 800a6c4:	9a07      	ldr	r2, [sp, #28]
 800a6c6:	4654      	mov	r4, sl
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	f04f 0c0a 	mov.w	ip, #10
 800a6ce:	4621      	mov	r1, r4
 800a6d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6d4:	3b30      	subs	r3, #48	@ 0x30
 800a6d6:	2b09      	cmp	r3, #9
 800a6d8:	d94b      	bls.n	800a772 <_vfiprintf_r+0x1a2>
 800a6da:	b1b0      	cbz	r0, 800a70a <_vfiprintf_r+0x13a>
 800a6dc:	9207      	str	r2, [sp, #28]
 800a6de:	e014      	b.n	800a70a <_vfiprintf_r+0x13a>
 800a6e0:	eba0 0308 	sub.w	r3, r0, r8
 800a6e4:	fa09 f303 	lsl.w	r3, r9, r3
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	9304      	str	r3, [sp, #16]
 800a6ec:	46a2      	mov	sl, r4
 800a6ee:	e7d2      	b.n	800a696 <_vfiprintf_r+0xc6>
 800a6f0:	9b03      	ldr	r3, [sp, #12]
 800a6f2:	1d19      	adds	r1, r3, #4
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	9103      	str	r1, [sp, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	bfbb      	ittet	lt
 800a6fc:	425b      	neglt	r3, r3
 800a6fe:	f042 0202 	orrlt.w	r2, r2, #2
 800a702:	9307      	strge	r3, [sp, #28]
 800a704:	9307      	strlt	r3, [sp, #28]
 800a706:	bfb8      	it	lt
 800a708:	9204      	strlt	r2, [sp, #16]
 800a70a:	7823      	ldrb	r3, [r4, #0]
 800a70c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a70e:	d10a      	bne.n	800a726 <_vfiprintf_r+0x156>
 800a710:	7863      	ldrb	r3, [r4, #1]
 800a712:	2b2a      	cmp	r3, #42	@ 0x2a
 800a714:	d132      	bne.n	800a77c <_vfiprintf_r+0x1ac>
 800a716:	9b03      	ldr	r3, [sp, #12]
 800a718:	1d1a      	adds	r2, r3, #4
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	9203      	str	r2, [sp, #12]
 800a71e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a722:	3402      	adds	r4, #2
 800a724:	9305      	str	r3, [sp, #20]
 800a726:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a7fc <_vfiprintf_r+0x22c>
 800a72a:	7821      	ldrb	r1, [r4, #0]
 800a72c:	2203      	movs	r2, #3
 800a72e:	4650      	mov	r0, sl
 800a730:	f7f5 fd4e 	bl	80001d0 <memchr>
 800a734:	b138      	cbz	r0, 800a746 <_vfiprintf_r+0x176>
 800a736:	9b04      	ldr	r3, [sp, #16]
 800a738:	eba0 000a 	sub.w	r0, r0, sl
 800a73c:	2240      	movs	r2, #64	@ 0x40
 800a73e:	4082      	lsls	r2, r0
 800a740:	4313      	orrs	r3, r2
 800a742:	3401      	adds	r4, #1
 800a744:	9304      	str	r3, [sp, #16]
 800a746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a74a:	4829      	ldr	r0, [pc, #164]	@ (800a7f0 <_vfiprintf_r+0x220>)
 800a74c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a750:	2206      	movs	r2, #6
 800a752:	f7f5 fd3d 	bl	80001d0 <memchr>
 800a756:	2800      	cmp	r0, #0
 800a758:	d03f      	beq.n	800a7da <_vfiprintf_r+0x20a>
 800a75a:	4b26      	ldr	r3, [pc, #152]	@ (800a7f4 <_vfiprintf_r+0x224>)
 800a75c:	bb1b      	cbnz	r3, 800a7a6 <_vfiprintf_r+0x1d6>
 800a75e:	9b03      	ldr	r3, [sp, #12]
 800a760:	3307      	adds	r3, #7
 800a762:	f023 0307 	bic.w	r3, r3, #7
 800a766:	3308      	adds	r3, #8
 800a768:	9303      	str	r3, [sp, #12]
 800a76a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a76c:	443b      	add	r3, r7
 800a76e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a770:	e76a      	b.n	800a648 <_vfiprintf_r+0x78>
 800a772:	fb0c 3202 	mla	r2, ip, r2, r3
 800a776:	460c      	mov	r4, r1
 800a778:	2001      	movs	r0, #1
 800a77a:	e7a8      	b.n	800a6ce <_vfiprintf_r+0xfe>
 800a77c:	2300      	movs	r3, #0
 800a77e:	3401      	adds	r4, #1
 800a780:	9305      	str	r3, [sp, #20]
 800a782:	4619      	mov	r1, r3
 800a784:	f04f 0c0a 	mov.w	ip, #10
 800a788:	4620      	mov	r0, r4
 800a78a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a78e:	3a30      	subs	r2, #48	@ 0x30
 800a790:	2a09      	cmp	r2, #9
 800a792:	d903      	bls.n	800a79c <_vfiprintf_r+0x1cc>
 800a794:	2b00      	cmp	r3, #0
 800a796:	d0c6      	beq.n	800a726 <_vfiprintf_r+0x156>
 800a798:	9105      	str	r1, [sp, #20]
 800a79a:	e7c4      	b.n	800a726 <_vfiprintf_r+0x156>
 800a79c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7a0:	4604      	mov	r4, r0
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e7f0      	b.n	800a788 <_vfiprintf_r+0x1b8>
 800a7a6:	ab03      	add	r3, sp, #12
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	462a      	mov	r2, r5
 800a7ac:	4b12      	ldr	r3, [pc, #72]	@ (800a7f8 <_vfiprintf_r+0x228>)
 800a7ae:	a904      	add	r1, sp, #16
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f3af 8000 	nop.w
 800a7b6:	4607      	mov	r7, r0
 800a7b8:	1c78      	adds	r0, r7, #1
 800a7ba:	d1d6      	bne.n	800a76a <_vfiprintf_r+0x19a>
 800a7bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7be:	07d9      	lsls	r1, r3, #31
 800a7c0:	d405      	bmi.n	800a7ce <_vfiprintf_r+0x1fe>
 800a7c2:	89ab      	ldrh	r3, [r5, #12]
 800a7c4:	059a      	lsls	r2, r3, #22
 800a7c6:	d402      	bmi.n	800a7ce <_vfiprintf_r+0x1fe>
 800a7c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7ca:	f7ff fdcf 	bl	800a36c <__retarget_lock_release_recursive>
 800a7ce:	89ab      	ldrh	r3, [r5, #12]
 800a7d0:	065b      	lsls	r3, r3, #25
 800a7d2:	f53f af1f 	bmi.w	800a614 <_vfiprintf_r+0x44>
 800a7d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7d8:	e71e      	b.n	800a618 <_vfiprintf_r+0x48>
 800a7da:	ab03      	add	r3, sp, #12
 800a7dc:	9300      	str	r3, [sp, #0]
 800a7de:	462a      	mov	r2, r5
 800a7e0:	4b05      	ldr	r3, [pc, #20]	@ (800a7f8 <_vfiprintf_r+0x228>)
 800a7e2:	a904      	add	r1, sp, #16
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	f000 f879 	bl	800a8dc <_printf_i>
 800a7ea:	e7e4      	b.n	800a7b6 <_vfiprintf_r+0x1e6>
 800a7ec:	0800aff8 	.word	0x0800aff8
 800a7f0:	0800b002 	.word	0x0800b002
 800a7f4:	00000000 	.word	0x00000000
 800a7f8:	0800a5ab 	.word	0x0800a5ab
 800a7fc:	0800affe 	.word	0x0800affe

0800a800 <_printf_common>:
 800a800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a804:	4616      	mov	r6, r2
 800a806:	4698      	mov	r8, r3
 800a808:	688a      	ldr	r2, [r1, #8]
 800a80a:	690b      	ldr	r3, [r1, #16]
 800a80c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a810:	4293      	cmp	r3, r2
 800a812:	bfb8      	it	lt
 800a814:	4613      	movlt	r3, r2
 800a816:	6033      	str	r3, [r6, #0]
 800a818:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a81c:	4607      	mov	r7, r0
 800a81e:	460c      	mov	r4, r1
 800a820:	b10a      	cbz	r2, 800a826 <_printf_common+0x26>
 800a822:	3301      	adds	r3, #1
 800a824:	6033      	str	r3, [r6, #0]
 800a826:	6823      	ldr	r3, [r4, #0]
 800a828:	0699      	lsls	r1, r3, #26
 800a82a:	bf42      	ittt	mi
 800a82c:	6833      	ldrmi	r3, [r6, #0]
 800a82e:	3302      	addmi	r3, #2
 800a830:	6033      	strmi	r3, [r6, #0]
 800a832:	6825      	ldr	r5, [r4, #0]
 800a834:	f015 0506 	ands.w	r5, r5, #6
 800a838:	d106      	bne.n	800a848 <_printf_common+0x48>
 800a83a:	f104 0a19 	add.w	sl, r4, #25
 800a83e:	68e3      	ldr	r3, [r4, #12]
 800a840:	6832      	ldr	r2, [r6, #0]
 800a842:	1a9b      	subs	r3, r3, r2
 800a844:	42ab      	cmp	r3, r5
 800a846:	dc26      	bgt.n	800a896 <_printf_common+0x96>
 800a848:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a84c:	6822      	ldr	r2, [r4, #0]
 800a84e:	3b00      	subs	r3, #0
 800a850:	bf18      	it	ne
 800a852:	2301      	movne	r3, #1
 800a854:	0692      	lsls	r2, r2, #26
 800a856:	d42b      	bmi.n	800a8b0 <_printf_common+0xb0>
 800a858:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a85c:	4641      	mov	r1, r8
 800a85e:	4638      	mov	r0, r7
 800a860:	47c8      	blx	r9
 800a862:	3001      	adds	r0, #1
 800a864:	d01e      	beq.n	800a8a4 <_printf_common+0xa4>
 800a866:	6823      	ldr	r3, [r4, #0]
 800a868:	6922      	ldr	r2, [r4, #16]
 800a86a:	f003 0306 	and.w	r3, r3, #6
 800a86e:	2b04      	cmp	r3, #4
 800a870:	bf02      	ittt	eq
 800a872:	68e5      	ldreq	r5, [r4, #12]
 800a874:	6833      	ldreq	r3, [r6, #0]
 800a876:	1aed      	subeq	r5, r5, r3
 800a878:	68a3      	ldr	r3, [r4, #8]
 800a87a:	bf0c      	ite	eq
 800a87c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a880:	2500      	movne	r5, #0
 800a882:	4293      	cmp	r3, r2
 800a884:	bfc4      	itt	gt
 800a886:	1a9b      	subgt	r3, r3, r2
 800a888:	18ed      	addgt	r5, r5, r3
 800a88a:	2600      	movs	r6, #0
 800a88c:	341a      	adds	r4, #26
 800a88e:	42b5      	cmp	r5, r6
 800a890:	d11a      	bne.n	800a8c8 <_printf_common+0xc8>
 800a892:	2000      	movs	r0, #0
 800a894:	e008      	b.n	800a8a8 <_printf_common+0xa8>
 800a896:	2301      	movs	r3, #1
 800a898:	4652      	mov	r2, sl
 800a89a:	4641      	mov	r1, r8
 800a89c:	4638      	mov	r0, r7
 800a89e:	47c8      	blx	r9
 800a8a0:	3001      	adds	r0, #1
 800a8a2:	d103      	bne.n	800a8ac <_printf_common+0xac>
 800a8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ac:	3501      	adds	r5, #1
 800a8ae:	e7c6      	b.n	800a83e <_printf_common+0x3e>
 800a8b0:	18e1      	adds	r1, r4, r3
 800a8b2:	1c5a      	adds	r2, r3, #1
 800a8b4:	2030      	movs	r0, #48	@ 0x30
 800a8b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a8ba:	4422      	add	r2, r4
 800a8bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a8c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a8c4:	3302      	adds	r3, #2
 800a8c6:	e7c7      	b.n	800a858 <_printf_common+0x58>
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	4622      	mov	r2, r4
 800a8cc:	4641      	mov	r1, r8
 800a8ce:	4638      	mov	r0, r7
 800a8d0:	47c8      	blx	r9
 800a8d2:	3001      	adds	r0, #1
 800a8d4:	d0e6      	beq.n	800a8a4 <_printf_common+0xa4>
 800a8d6:	3601      	adds	r6, #1
 800a8d8:	e7d9      	b.n	800a88e <_printf_common+0x8e>
	...

0800a8dc <_printf_i>:
 800a8dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8e0:	7e0f      	ldrb	r7, [r1, #24]
 800a8e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a8e4:	2f78      	cmp	r7, #120	@ 0x78
 800a8e6:	4691      	mov	r9, r2
 800a8e8:	4680      	mov	r8, r0
 800a8ea:	460c      	mov	r4, r1
 800a8ec:	469a      	mov	sl, r3
 800a8ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a8f2:	d807      	bhi.n	800a904 <_printf_i+0x28>
 800a8f4:	2f62      	cmp	r7, #98	@ 0x62
 800a8f6:	d80a      	bhi.n	800a90e <_printf_i+0x32>
 800a8f8:	2f00      	cmp	r7, #0
 800a8fa:	f000 80d1 	beq.w	800aaa0 <_printf_i+0x1c4>
 800a8fe:	2f58      	cmp	r7, #88	@ 0x58
 800a900:	f000 80b8 	beq.w	800aa74 <_printf_i+0x198>
 800a904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a908:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a90c:	e03a      	b.n	800a984 <_printf_i+0xa8>
 800a90e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a912:	2b15      	cmp	r3, #21
 800a914:	d8f6      	bhi.n	800a904 <_printf_i+0x28>
 800a916:	a101      	add	r1, pc, #4	@ (adr r1, 800a91c <_printf_i+0x40>)
 800a918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a91c:	0800a975 	.word	0x0800a975
 800a920:	0800a989 	.word	0x0800a989
 800a924:	0800a905 	.word	0x0800a905
 800a928:	0800a905 	.word	0x0800a905
 800a92c:	0800a905 	.word	0x0800a905
 800a930:	0800a905 	.word	0x0800a905
 800a934:	0800a989 	.word	0x0800a989
 800a938:	0800a905 	.word	0x0800a905
 800a93c:	0800a905 	.word	0x0800a905
 800a940:	0800a905 	.word	0x0800a905
 800a944:	0800a905 	.word	0x0800a905
 800a948:	0800aa87 	.word	0x0800aa87
 800a94c:	0800a9b3 	.word	0x0800a9b3
 800a950:	0800aa41 	.word	0x0800aa41
 800a954:	0800a905 	.word	0x0800a905
 800a958:	0800a905 	.word	0x0800a905
 800a95c:	0800aaa9 	.word	0x0800aaa9
 800a960:	0800a905 	.word	0x0800a905
 800a964:	0800a9b3 	.word	0x0800a9b3
 800a968:	0800a905 	.word	0x0800a905
 800a96c:	0800a905 	.word	0x0800a905
 800a970:	0800aa49 	.word	0x0800aa49
 800a974:	6833      	ldr	r3, [r6, #0]
 800a976:	1d1a      	adds	r2, r3, #4
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	6032      	str	r2, [r6, #0]
 800a97c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a980:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a984:	2301      	movs	r3, #1
 800a986:	e09c      	b.n	800aac2 <_printf_i+0x1e6>
 800a988:	6833      	ldr	r3, [r6, #0]
 800a98a:	6820      	ldr	r0, [r4, #0]
 800a98c:	1d19      	adds	r1, r3, #4
 800a98e:	6031      	str	r1, [r6, #0]
 800a990:	0606      	lsls	r6, r0, #24
 800a992:	d501      	bpl.n	800a998 <_printf_i+0xbc>
 800a994:	681d      	ldr	r5, [r3, #0]
 800a996:	e003      	b.n	800a9a0 <_printf_i+0xc4>
 800a998:	0645      	lsls	r5, r0, #25
 800a99a:	d5fb      	bpl.n	800a994 <_printf_i+0xb8>
 800a99c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a9a0:	2d00      	cmp	r5, #0
 800a9a2:	da03      	bge.n	800a9ac <_printf_i+0xd0>
 800a9a4:	232d      	movs	r3, #45	@ 0x2d
 800a9a6:	426d      	negs	r5, r5
 800a9a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9ac:	4858      	ldr	r0, [pc, #352]	@ (800ab10 <_printf_i+0x234>)
 800a9ae:	230a      	movs	r3, #10
 800a9b0:	e011      	b.n	800a9d6 <_printf_i+0xfa>
 800a9b2:	6821      	ldr	r1, [r4, #0]
 800a9b4:	6833      	ldr	r3, [r6, #0]
 800a9b6:	0608      	lsls	r0, r1, #24
 800a9b8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a9bc:	d402      	bmi.n	800a9c4 <_printf_i+0xe8>
 800a9be:	0649      	lsls	r1, r1, #25
 800a9c0:	bf48      	it	mi
 800a9c2:	b2ad      	uxthmi	r5, r5
 800a9c4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a9c6:	4852      	ldr	r0, [pc, #328]	@ (800ab10 <_printf_i+0x234>)
 800a9c8:	6033      	str	r3, [r6, #0]
 800a9ca:	bf14      	ite	ne
 800a9cc:	230a      	movne	r3, #10
 800a9ce:	2308      	moveq	r3, #8
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a9d6:	6866      	ldr	r6, [r4, #4]
 800a9d8:	60a6      	str	r6, [r4, #8]
 800a9da:	2e00      	cmp	r6, #0
 800a9dc:	db05      	blt.n	800a9ea <_printf_i+0x10e>
 800a9de:	6821      	ldr	r1, [r4, #0]
 800a9e0:	432e      	orrs	r6, r5
 800a9e2:	f021 0104 	bic.w	r1, r1, #4
 800a9e6:	6021      	str	r1, [r4, #0]
 800a9e8:	d04b      	beq.n	800aa82 <_printf_i+0x1a6>
 800a9ea:	4616      	mov	r6, r2
 800a9ec:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9f0:	fb03 5711 	mls	r7, r3, r1, r5
 800a9f4:	5dc7      	ldrb	r7, [r0, r7]
 800a9f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9fa:	462f      	mov	r7, r5
 800a9fc:	42bb      	cmp	r3, r7
 800a9fe:	460d      	mov	r5, r1
 800aa00:	d9f4      	bls.n	800a9ec <_printf_i+0x110>
 800aa02:	2b08      	cmp	r3, #8
 800aa04:	d10b      	bne.n	800aa1e <_printf_i+0x142>
 800aa06:	6823      	ldr	r3, [r4, #0]
 800aa08:	07df      	lsls	r7, r3, #31
 800aa0a:	d508      	bpl.n	800aa1e <_printf_i+0x142>
 800aa0c:	6923      	ldr	r3, [r4, #16]
 800aa0e:	6861      	ldr	r1, [r4, #4]
 800aa10:	4299      	cmp	r1, r3
 800aa12:	bfde      	ittt	le
 800aa14:	2330      	movle	r3, #48	@ 0x30
 800aa16:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aa1e:	1b92      	subs	r2, r2, r6
 800aa20:	6122      	str	r2, [r4, #16]
 800aa22:	f8cd a000 	str.w	sl, [sp]
 800aa26:	464b      	mov	r3, r9
 800aa28:	aa03      	add	r2, sp, #12
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	4640      	mov	r0, r8
 800aa2e:	f7ff fee7 	bl	800a800 <_printf_common>
 800aa32:	3001      	adds	r0, #1
 800aa34:	d14a      	bne.n	800aacc <_printf_i+0x1f0>
 800aa36:	f04f 30ff 	mov.w	r0, #4294967295
 800aa3a:	b004      	add	sp, #16
 800aa3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa40:	6823      	ldr	r3, [r4, #0]
 800aa42:	f043 0320 	orr.w	r3, r3, #32
 800aa46:	6023      	str	r3, [r4, #0]
 800aa48:	4832      	ldr	r0, [pc, #200]	@ (800ab14 <_printf_i+0x238>)
 800aa4a:	2778      	movs	r7, #120	@ 0x78
 800aa4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa50:	6823      	ldr	r3, [r4, #0]
 800aa52:	6831      	ldr	r1, [r6, #0]
 800aa54:	061f      	lsls	r7, r3, #24
 800aa56:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa5a:	d402      	bmi.n	800aa62 <_printf_i+0x186>
 800aa5c:	065f      	lsls	r7, r3, #25
 800aa5e:	bf48      	it	mi
 800aa60:	b2ad      	uxthmi	r5, r5
 800aa62:	6031      	str	r1, [r6, #0]
 800aa64:	07d9      	lsls	r1, r3, #31
 800aa66:	bf44      	itt	mi
 800aa68:	f043 0320 	orrmi.w	r3, r3, #32
 800aa6c:	6023      	strmi	r3, [r4, #0]
 800aa6e:	b11d      	cbz	r5, 800aa78 <_printf_i+0x19c>
 800aa70:	2310      	movs	r3, #16
 800aa72:	e7ad      	b.n	800a9d0 <_printf_i+0xf4>
 800aa74:	4826      	ldr	r0, [pc, #152]	@ (800ab10 <_printf_i+0x234>)
 800aa76:	e7e9      	b.n	800aa4c <_printf_i+0x170>
 800aa78:	6823      	ldr	r3, [r4, #0]
 800aa7a:	f023 0320 	bic.w	r3, r3, #32
 800aa7e:	6023      	str	r3, [r4, #0]
 800aa80:	e7f6      	b.n	800aa70 <_printf_i+0x194>
 800aa82:	4616      	mov	r6, r2
 800aa84:	e7bd      	b.n	800aa02 <_printf_i+0x126>
 800aa86:	6833      	ldr	r3, [r6, #0]
 800aa88:	6825      	ldr	r5, [r4, #0]
 800aa8a:	6961      	ldr	r1, [r4, #20]
 800aa8c:	1d18      	adds	r0, r3, #4
 800aa8e:	6030      	str	r0, [r6, #0]
 800aa90:	062e      	lsls	r6, r5, #24
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	d501      	bpl.n	800aa9a <_printf_i+0x1be>
 800aa96:	6019      	str	r1, [r3, #0]
 800aa98:	e002      	b.n	800aaa0 <_printf_i+0x1c4>
 800aa9a:	0668      	lsls	r0, r5, #25
 800aa9c:	d5fb      	bpl.n	800aa96 <_printf_i+0x1ba>
 800aa9e:	8019      	strh	r1, [r3, #0]
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	6123      	str	r3, [r4, #16]
 800aaa4:	4616      	mov	r6, r2
 800aaa6:	e7bc      	b.n	800aa22 <_printf_i+0x146>
 800aaa8:	6833      	ldr	r3, [r6, #0]
 800aaaa:	1d1a      	adds	r2, r3, #4
 800aaac:	6032      	str	r2, [r6, #0]
 800aaae:	681e      	ldr	r6, [r3, #0]
 800aab0:	6862      	ldr	r2, [r4, #4]
 800aab2:	2100      	movs	r1, #0
 800aab4:	4630      	mov	r0, r6
 800aab6:	f7f5 fb8b 	bl	80001d0 <memchr>
 800aaba:	b108      	cbz	r0, 800aac0 <_printf_i+0x1e4>
 800aabc:	1b80      	subs	r0, r0, r6
 800aabe:	6060      	str	r0, [r4, #4]
 800aac0:	6863      	ldr	r3, [r4, #4]
 800aac2:	6123      	str	r3, [r4, #16]
 800aac4:	2300      	movs	r3, #0
 800aac6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aaca:	e7aa      	b.n	800aa22 <_printf_i+0x146>
 800aacc:	6923      	ldr	r3, [r4, #16]
 800aace:	4632      	mov	r2, r6
 800aad0:	4649      	mov	r1, r9
 800aad2:	4640      	mov	r0, r8
 800aad4:	47d0      	blx	sl
 800aad6:	3001      	adds	r0, #1
 800aad8:	d0ad      	beq.n	800aa36 <_printf_i+0x15a>
 800aada:	6823      	ldr	r3, [r4, #0]
 800aadc:	079b      	lsls	r3, r3, #30
 800aade:	d413      	bmi.n	800ab08 <_printf_i+0x22c>
 800aae0:	68e0      	ldr	r0, [r4, #12]
 800aae2:	9b03      	ldr	r3, [sp, #12]
 800aae4:	4298      	cmp	r0, r3
 800aae6:	bfb8      	it	lt
 800aae8:	4618      	movlt	r0, r3
 800aaea:	e7a6      	b.n	800aa3a <_printf_i+0x15e>
 800aaec:	2301      	movs	r3, #1
 800aaee:	4632      	mov	r2, r6
 800aaf0:	4649      	mov	r1, r9
 800aaf2:	4640      	mov	r0, r8
 800aaf4:	47d0      	blx	sl
 800aaf6:	3001      	adds	r0, #1
 800aaf8:	d09d      	beq.n	800aa36 <_printf_i+0x15a>
 800aafa:	3501      	adds	r5, #1
 800aafc:	68e3      	ldr	r3, [r4, #12]
 800aafe:	9903      	ldr	r1, [sp, #12]
 800ab00:	1a5b      	subs	r3, r3, r1
 800ab02:	42ab      	cmp	r3, r5
 800ab04:	dcf2      	bgt.n	800aaec <_printf_i+0x210>
 800ab06:	e7eb      	b.n	800aae0 <_printf_i+0x204>
 800ab08:	2500      	movs	r5, #0
 800ab0a:	f104 0619 	add.w	r6, r4, #25
 800ab0e:	e7f5      	b.n	800aafc <_printf_i+0x220>
 800ab10:	0800b009 	.word	0x0800b009
 800ab14:	0800b01a 	.word	0x0800b01a

0800ab18 <__sflush_r>:
 800ab18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab20:	0716      	lsls	r6, r2, #28
 800ab22:	4605      	mov	r5, r0
 800ab24:	460c      	mov	r4, r1
 800ab26:	d454      	bmi.n	800abd2 <__sflush_r+0xba>
 800ab28:	684b      	ldr	r3, [r1, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	dc02      	bgt.n	800ab34 <__sflush_r+0x1c>
 800ab2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	dd48      	ble.n	800abc6 <__sflush_r+0xae>
 800ab34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab36:	2e00      	cmp	r6, #0
 800ab38:	d045      	beq.n	800abc6 <__sflush_r+0xae>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab40:	682f      	ldr	r7, [r5, #0]
 800ab42:	6a21      	ldr	r1, [r4, #32]
 800ab44:	602b      	str	r3, [r5, #0]
 800ab46:	d030      	beq.n	800abaa <__sflush_r+0x92>
 800ab48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab4a:	89a3      	ldrh	r3, [r4, #12]
 800ab4c:	0759      	lsls	r1, r3, #29
 800ab4e:	d505      	bpl.n	800ab5c <__sflush_r+0x44>
 800ab50:	6863      	ldr	r3, [r4, #4]
 800ab52:	1ad2      	subs	r2, r2, r3
 800ab54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab56:	b10b      	cbz	r3, 800ab5c <__sflush_r+0x44>
 800ab58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab5a:	1ad2      	subs	r2, r2, r3
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab60:	6a21      	ldr	r1, [r4, #32]
 800ab62:	4628      	mov	r0, r5
 800ab64:	47b0      	blx	r6
 800ab66:	1c43      	adds	r3, r0, #1
 800ab68:	89a3      	ldrh	r3, [r4, #12]
 800ab6a:	d106      	bne.n	800ab7a <__sflush_r+0x62>
 800ab6c:	6829      	ldr	r1, [r5, #0]
 800ab6e:	291d      	cmp	r1, #29
 800ab70:	d82b      	bhi.n	800abca <__sflush_r+0xb2>
 800ab72:	4a2a      	ldr	r2, [pc, #168]	@ (800ac1c <__sflush_r+0x104>)
 800ab74:	40ca      	lsrs	r2, r1
 800ab76:	07d6      	lsls	r6, r2, #31
 800ab78:	d527      	bpl.n	800abca <__sflush_r+0xb2>
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	6062      	str	r2, [r4, #4]
 800ab7e:	04d9      	lsls	r1, r3, #19
 800ab80:	6922      	ldr	r2, [r4, #16]
 800ab82:	6022      	str	r2, [r4, #0]
 800ab84:	d504      	bpl.n	800ab90 <__sflush_r+0x78>
 800ab86:	1c42      	adds	r2, r0, #1
 800ab88:	d101      	bne.n	800ab8e <__sflush_r+0x76>
 800ab8a:	682b      	ldr	r3, [r5, #0]
 800ab8c:	b903      	cbnz	r3, 800ab90 <__sflush_r+0x78>
 800ab8e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab92:	602f      	str	r7, [r5, #0]
 800ab94:	b1b9      	cbz	r1, 800abc6 <__sflush_r+0xae>
 800ab96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab9a:	4299      	cmp	r1, r3
 800ab9c:	d002      	beq.n	800aba4 <__sflush_r+0x8c>
 800ab9e:	4628      	mov	r0, r5
 800aba0:	f7ff fbf4 	bl	800a38c <_free_r>
 800aba4:	2300      	movs	r3, #0
 800aba6:	6363      	str	r3, [r4, #52]	@ 0x34
 800aba8:	e00d      	b.n	800abc6 <__sflush_r+0xae>
 800abaa:	2301      	movs	r3, #1
 800abac:	4628      	mov	r0, r5
 800abae:	47b0      	blx	r6
 800abb0:	4602      	mov	r2, r0
 800abb2:	1c50      	adds	r0, r2, #1
 800abb4:	d1c9      	bne.n	800ab4a <__sflush_r+0x32>
 800abb6:	682b      	ldr	r3, [r5, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d0c6      	beq.n	800ab4a <__sflush_r+0x32>
 800abbc:	2b1d      	cmp	r3, #29
 800abbe:	d001      	beq.n	800abc4 <__sflush_r+0xac>
 800abc0:	2b16      	cmp	r3, #22
 800abc2:	d11e      	bne.n	800ac02 <__sflush_r+0xea>
 800abc4:	602f      	str	r7, [r5, #0]
 800abc6:	2000      	movs	r0, #0
 800abc8:	e022      	b.n	800ac10 <__sflush_r+0xf8>
 800abca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abce:	b21b      	sxth	r3, r3
 800abd0:	e01b      	b.n	800ac0a <__sflush_r+0xf2>
 800abd2:	690f      	ldr	r7, [r1, #16]
 800abd4:	2f00      	cmp	r7, #0
 800abd6:	d0f6      	beq.n	800abc6 <__sflush_r+0xae>
 800abd8:	0793      	lsls	r3, r2, #30
 800abda:	680e      	ldr	r6, [r1, #0]
 800abdc:	bf08      	it	eq
 800abde:	694b      	ldreq	r3, [r1, #20]
 800abe0:	600f      	str	r7, [r1, #0]
 800abe2:	bf18      	it	ne
 800abe4:	2300      	movne	r3, #0
 800abe6:	eba6 0807 	sub.w	r8, r6, r7
 800abea:	608b      	str	r3, [r1, #8]
 800abec:	f1b8 0f00 	cmp.w	r8, #0
 800abf0:	dde9      	ble.n	800abc6 <__sflush_r+0xae>
 800abf2:	6a21      	ldr	r1, [r4, #32]
 800abf4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800abf6:	4643      	mov	r3, r8
 800abf8:	463a      	mov	r2, r7
 800abfa:	4628      	mov	r0, r5
 800abfc:	47b0      	blx	r6
 800abfe:	2800      	cmp	r0, #0
 800ac00:	dc08      	bgt.n	800ac14 <__sflush_r+0xfc>
 800ac02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac0a:	81a3      	strh	r3, [r4, #12]
 800ac0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac14:	4407      	add	r7, r0
 800ac16:	eba8 0800 	sub.w	r8, r8, r0
 800ac1a:	e7e7      	b.n	800abec <__sflush_r+0xd4>
 800ac1c:	20400001 	.word	0x20400001

0800ac20 <_fflush_r>:
 800ac20:	b538      	push	{r3, r4, r5, lr}
 800ac22:	690b      	ldr	r3, [r1, #16]
 800ac24:	4605      	mov	r5, r0
 800ac26:	460c      	mov	r4, r1
 800ac28:	b913      	cbnz	r3, 800ac30 <_fflush_r+0x10>
 800ac2a:	2500      	movs	r5, #0
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	bd38      	pop	{r3, r4, r5, pc}
 800ac30:	b118      	cbz	r0, 800ac3a <_fflush_r+0x1a>
 800ac32:	6a03      	ldr	r3, [r0, #32]
 800ac34:	b90b      	cbnz	r3, 800ac3a <_fflush_r+0x1a>
 800ac36:	f7ff fa8b 	bl	800a150 <__sinit>
 800ac3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d0f3      	beq.n	800ac2a <_fflush_r+0xa>
 800ac42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac44:	07d0      	lsls	r0, r2, #31
 800ac46:	d404      	bmi.n	800ac52 <_fflush_r+0x32>
 800ac48:	0599      	lsls	r1, r3, #22
 800ac4a:	d402      	bmi.n	800ac52 <_fflush_r+0x32>
 800ac4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac4e:	f7ff fb8c 	bl	800a36a <__retarget_lock_acquire_recursive>
 800ac52:	4628      	mov	r0, r5
 800ac54:	4621      	mov	r1, r4
 800ac56:	f7ff ff5f 	bl	800ab18 <__sflush_r>
 800ac5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac5c:	07da      	lsls	r2, r3, #31
 800ac5e:	4605      	mov	r5, r0
 800ac60:	d4e4      	bmi.n	800ac2c <_fflush_r+0xc>
 800ac62:	89a3      	ldrh	r3, [r4, #12]
 800ac64:	059b      	lsls	r3, r3, #22
 800ac66:	d4e1      	bmi.n	800ac2c <_fflush_r+0xc>
 800ac68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac6a:	f7ff fb7f 	bl	800a36c <__retarget_lock_release_recursive>
 800ac6e:	e7dd      	b.n	800ac2c <_fflush_r+0xc>

0800ac70 <_putc_r>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	460d      	mov	r5, r1
 800ac74:	4614      	mov	r4, r2
 800ac76:	4606      	mov	r6, r0
 800ac78:	b118      	cbz	r0, 800ac82 <_putc_r+0x12>
 800ac7a:	6a03      	ldr	r3, [r0, #32]
 800ac7c:	b90b      	cbnz	r3, 800ac82 <_putc_r+0x12>
 800ac7e:	f7ff fa67 	bl	800a150 <__sinit>
 800ac82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac84:	07d8      	lsls	r0, r3, #31
 800ac86:	d405      	bmi.n	800ac94 <_putc_r+0x24>
 800ac88:	89a3      	ldrh	r3, [r4, #12]
 800ac8a:	0599      	lsls	r1, r3, #22
 800ac8c:	d402      	bmi.n	800ac94 <_putc_r+0x24>
 800ac8e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac90:	f7ff fb6b 	bl	800a36a <__retarget_lock_acquire_recursive>
 800ac94:	68a3      	ldr	r3, [r4, #8]
 800ac96:	3b01      	subs	r3, #1
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	60a3      	str	r3, [r4, #8]
 800ac9c:	da05      	bge.n	800acaa <_putc_r+0x3a>
 800ac9e:	69a2      	ldr	r2, [r4, #24]
 800aca0:	4293      	cmp	r3, r2
 800aca2:	db12      	blt.n	800acca <_putc_r+0x5a>
 800aca4:	b2eb      	uxtb	r3, r5
 800aca6:	2b0a      	cmp	r3, #10
 800aca8:	d00f      	beq.n	800acca <_putc_r+0x5a>
 800acaa:	6823      	ldr	r3, [r4, #0]
 800acac:	1c5a      	adds	r2, r3, #1
 800acae:	6022      	str	r2, [r4, #0]
 800acb0:	701d      	strb	r5, [r3, #0]
 800acb2:	b2ed      	uxtb	r5, r5
 800acb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800acb6:	07da      	lsls	r2, r3, #31
 800acb8:	d405      	bmi.n	800acc6 <_putc_r+0x56>
 800acba:	89a3      	ldrh	r3, [r4, #12]
 800acbc:	059b      	lsls	r3, r3, #22
 800acbe:	d402      	bmi.n	800acc6 <_putc_r+0x56>
 800acc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acc2:	f7ff fb53 	bl	800a36c <__retarget_lock_release_recursive>
 800acc6:	4628      	mov	r0, r5
 800acc8:	bd70      	pop	{r4, r5, r6, pc}
 800acca:	4629      	mov	r1, r5
 800accc:	4622      	mov	r2, r4
 800acce:	4630      	mov	r0, r6
 800acd0:	f000 f802 	bl	800acd8 <__swbuf_r>
 800acd4:	4605      	mov	r5, r0
 800acd6:	e7ed      	b.n	800acb4 <_putc_r+0x44>

0800acd8 <__swbuf_r>:
 800acd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acda:	460e      	mov	r6, r1
 800acdc:	4614      	mov	r4, r2
 800acde:	4605      	mov	r5, r0
 800ace0:	b118      	cbz	r0, 800acea <__swbuf_r+0x12>
 800ace2:	6a03      	ldr	r3, [r0, #32]
 800ace4:	b90b      	cbnz	r3, 800acea <__swbuf_r+0x12>
 800ace6:	f7ff fa33 	bl	800a150 <__sinit>
 800acea:	69a3      	ldr	r3, [r4, #24]
 800acec:	60a3      	str	r3, [r4, #8]
 800acee:	89a3      	ldrh	r3, [r4, #12]
 800acf0:	071a      	lsls	r2, r3, #28
 800acf2:	d501      	bpl.n	800acf8 <__swbuf_r+0x20>
 800acf4:	6923      	ldr	r3, [r4, #16]
 800acf6:	b943      	cbnz	r3, 800ad0a <__swbuf_r+0x32>
 800acf8:	4621      	mov	r1, r4
 800acfa:	4628      	mov	r0, r5
 800acfc:	f000 f82a 	bl	800ad54 <__swsetup_r>
 800ad00:	b118      	cbz	r0, 800ad0a <__swbuf_r+0x32>
 800ad02:	f04f 37ff 	mov.w	r7, #4294967295
 800ad06:	4638      	mov	r0, r7
 800ad08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad0a:	6823      	ldr	r3, [r4, #0]
 800ad0c:	6922      	ldr	r2, [r4, #16]
 800ad0e:	1a98      	subs	r0, r3, r2
 800ad10:	6963      	ldr	r3, [r4, #20]
 800ad12:	b2f6      	uxtb	r6, r6
 800ad14:	4283      	cmp	r3, r0
 800ad16:	4637      	mov	r7, r6
 800ad18:	dc05      	bgt.n	800ad26 <__swbuf_r+0x4e>
 800ad1a:	4621      	mov	r1, r4
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	f7ff ff7f 	bl	800ac20 <_fflush_r>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d1ed      	bne.n	800ad02 <__swbuf_r+0x2a>
 800ad26:	68a3      	ldr	r3, [r4, #8]
 800ad28:	3b01      	subs	r3, #1
 800ad2a:	60a3      	str	r3, [r4, #8]
 800ad2c:	6823      	ldr	r3, [r4, #0]
 800ad2e:	1c5a      	adds	r2, r3, #1
 800ad30:	6022      	str	r2, [r4, #0]
 800ad32:	701e      	strb	r6, [r3, #0]
 800ad34:	6962      	ldr	r2, [r4, #20]
 800ad36:	1c43      	adds	r3, r0, #1
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d004      	beq.n	800ad46 <__swbuf_r+0x6e>
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	07db      	lsls	r3, r3, #31
 800ad40:	d5e1      	bpl.n	800ad06 <__swbuf_r+0x2e>
 800ad42:	2e0a      	cmp	r6, #10
 800ad44:	d1df      	bne.n	800ad06 <__swbuf_r+0x2e>
 800ad46:	4621      	mov	r1, r4
 800ad48:	4628      	mov	r0, r5
 800ad4a:	f7ff ff69 	bl	800ac20 <_fflush_r>
 800ad4e:	2800      	cmp	r0, #0
 800ad50:	d0d9      	beq.n	800ad06 <__swbuf_r+0x2e>
 800ad52:	e7d6      	b.n	800ad02 <__swbuf_r+0x2a>

0800ad54 <__swsetup_r>:
 800ad54:	b538      	push	{r3, r4, r5, lr}
 800ad56:	4b29      	ldr	r3, [pc, #164]	@ (800adfc <__swsetup_r+0xa8>)
 800ad58:	4605      	mov	r5, r0
 800ad5a:	6818      	ldr	r0, [r3, #0]
 800ad5c:	460c      	mov	r4, r1
 800ad5e:	b118      	cbz	r0, 800ad68 <__swsetup_r+0x14>
 800ad60:	6a03      	ldr	r3, [r0, #32]
 800ad62:	b90b      	cbnz	r3, 800ad68 <__swsetup_r+0x14>
 800ad64:	f7ff f9f4 	bl	800a150 <__sinit>
 800ad68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad6c:	0719      	lsls	r1, r3, #28
 800ad6e:	d422      	bmi.n	800adb6 <__swsetup_r+0x62>
 800ad70:	06da      	lsls	r2, r3, #27
 800ad72:	d407      	bmi.n	800ad84 <__swsetup_r+0x30>
 800ad74:	2209      	movs	r2, #9
 800ad76:	602a      	str	r2, [r5, #0]
 800ad78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad7c:	81a3      	strh	r3, [r4, #12]
 800ad7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad82:	e033      	b.n	800adec <__swsetup_r+0x98>
 800ad84:	0758      	lsls	r0, r3, #29
 800ad86:	d512      	bpl.n	800adae <__swsetup_r+0x5a>
 800ad88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad8a:	b141      	cbz	r1, 800ad9e <__swsetup_r+0x4a>
 800ad8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad90:	4299      	cmp	r1, r3
 800ad92:	d002      	beq.n	800ad9a <__swsetup_r+0x46>
 800ad94:	4628      	mov	r0, r5
 800ad96:	f7ff faf9 	bl	800a38c <_free_r>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad9e:	89a3      	ldrh	r3, [r4, #12]
 800ada0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ada4:	81a3      	strh	r3, [r4, #12]
 800ada6:	2300      	movs	r3, #0
 800ada8:	6063      	str	r3, [r4, #4]
 800adaa:	6923      	ldr	r3, [r4, #16]
 800adac:	6023      	str	r3, [r4, #0]
 800adae:	89a3      	ldrh	r3, [r4, #12]
 800adb0:	f043 0308 	orr.w	r3, r3, #8
 800adb4:	81a3      	strh	r3, [r4, #12]
 800adb6:	6923      	ldr	r3, [r4, #16]
 800adb8:	b94b      	cbnz	r3, 800adce <__swsetup_r+0x7a>
 800adba:	89a3      	ldrh	r3, [r4, #12]
 800adbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800adc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adc4:	d003      	beq.n	800adce <__swsetup_r+0x7a>
 800adc6:	4621      	mov	r1, r4
 800adc8:	4628      	mov	r0, r5
 800adca:	f000 f84f 	bl	800ae6c <__smakebuf_r>
 800adce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800add2:	f013 0201 	ands.w	r2, r3, #1
 800add6:	d00a      	beq.n	800adee <__swsetup_r+0x9a>
 800add8:	2200      	movs	r2, #0
 800adda:	60a2      	str	r2, [r4, #8]
 800addc:	6962      	ldr	r2, [r4, #20]
 800adde:	4252      	negs	r2, r2
 800ade0:	61a2      	str	r2, [r4, #24]
 800ade2:	6922      	ldr	r2, [r4, #16]
 800ade4:	b942      	cbnz	r2, 800adf8 <__swsetup_r+0xa4>
 800ade6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800adea:	d1c5      	bne.n	800ad78 <__swsetup_r+0x24>
 800adec:	bd38      	pop	{r3, r4, r5, pc}
 800adee:	0799      	lsls	r1, r3, #30
 800adf0:	bf58      	it	pl
 800adf2:	6962      	ldrpl	r2, [r4, #20]
 800adf4:	60a2      	str	r2, [r4, #8]
 800adf6:	e7f4      	b.n	800ade2 <__swsetup_r+0x8e>
 800adf8:	2000      	movs	r0, #0
 800adfa:	e7f7      	b.n	800adec <__swsetup_r+0x98>
 800adfc:	2000001c 	.word	0x2000001c

0800ae00 <_sbrk_r>:
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	4d06      	ldr	r5, [pc, #24]	@ (800ae1c <_sbrk_r+0x1c>)
 800ae04:	2300      	movs	r3, #0
 800ae06:	4604      	mov	r4, r0
 800ae08:	4608      	mov	r0, r1
 800ae0a:	602b      	str	r3, [r5, #0]
 800ae0c:	f7f6 fd18 	bl	8001840 <_sbrk>
 800ae10:	1c43      	adds	r3, r0, #1
 800ae12:	d102      	bne.n	800ae1a <_sbrk_r+0x1a>
 800ae14:	682b      	ldr	r3, [r5, #0]
 800ae16:	b103      	cbz	r3, 800ae1a <_sbrk_r+0x1a>
 800ae18:	6023      	str	r3, [r4, #0]
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}
 800ae1c:	20002524 	.word	0x20002524

0800ae20 <__swhatbuf_r>:
 800ae20:	b570      	push	{r4, r5, r6, lr}
 800ae22:	460c      	mov	r4, r1
 800ae24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae28:	2900      	cmp	r1, #0
 800ae2a:	b096      	sub	sp, #88	@ 0x58
 800ae2c:	4615      	mov	r5, r2
 800ae2e:	461e      	mov	r6, r3
 800ae30:	da0d      	bge.n	800ae4e <__swhatbuf_r+0x2e>
 800ae32:	89a3      	ldrh	r3, [r4, #12]
 800ae34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae38:	f04f 0100 	mov.w	r1, #0
 800ae3c:	bf14      	ite	ne
 800ae3e:	2340      	movne	r3, #64	@ 0x40
 800ae40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae44:	2000      	movs	r0, #0
 800ae46:	6031      	str	r1, [r6, #0]
 800ae48:	602b      	str	r3, [r5, #0]
 800ae4a:	b016      	add	sp, #88	@ 0x58
 800ae4c:	bd70      	pop	{r4, r5, r6, pc}
 800ae4e:	466a      	mov	r2, sp
 800ae50:	f000 f848 	bl	800aee4 <_fstat_r>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	dbec      	blt.n	800ae32 <__swhatbuf_r+0x12>
 800ae58:	9901      	ldr	r1, [sp, #4]
 800ae5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ae5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae62:	4259      	negs	r1, r3
 800ae64:	4159      	adcs	r1, r3
 800ae66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae6a:	e7eb      	b.n	800ae44 <__swhatbuf_r+0x24>

0800ae6c <__smakebuf_r>:
 800ae6c:	898b      	ldrh	r3, [r1, #12]
 800ae6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae70:	079d      	lsls	r5, r3, #30
 800ae72:	4606      	mov	r6, r0
 800ae74:	460c      	mov	r4, r1
 800ae76:	d507      	bpl.n	800ae88 <__smakebuf_r+0x1c>
 800ae78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ae7c:	6023      	str	r3, [r4, #0]
 800ae7e:	6123      	str	r3, [r4, #16]
 800ae80:	2301      	movs	r3, #1
 800ae82:	6163      	str	r3, [r4, #20]
 800ae84:	b003      	add	sp, #12
 800ae86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae88:	ab01      	add	r3, sp, #4
 800ae8a:	466a      	mov	r2, sp
 800ae8c:	f7ff ffc8 	bl	800ae20 <__swhatbuf_r>
 800ae90:	9f00      	ldr	r7, [sp, #0]
 800ae92:	4605      	mov	r5, r0
 800ae94:	4639      	mov	r1, r7
 800ae96:	4630      	mov	r0, r6
 800ae98:	f7ff fae4 	bl	800a464 <_malloc_r>
 800ae9c:	b948      	cbnz	r0, 800aeb2 <__smakebuf_r+0x46>
 800ae9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aea2:	059a      	lsls	r2, r3, #22
 800aea4:	d4ee      	bmi.n	800ae84 <__smakebuf_r+0x18>
 800aea6:	f023 0303 	bic.w	r3, r3, #3
 800aeaa:	f043 0302 	orr.w	r3, r3, #2
 800aeae:	81a3      	strh	r3, [r4, #12]
 800aeb0:	e7e2      	b.n	800ae78 <__smakebuf_r+0xc>
 800aeb2:	89a3      	ldrh	r3, [r4, #12]
 800aeb4:	6020      	str	r0, [r4, #0]
 800aeb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeba:	81a3      	strh	r3, [r4, #12]
 800aebc:	9b01      	ldr	r3, [sp, #4]
 800aebe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aec2:	b15b      	cbz	r3, 800aedc <__smakebuf_r+0x70>
 800aec4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aec8:	4630      	mov	r0, r6
 800aeca:	f000 f81d 	bl	800af08 <_isatty_r>
 800aece:	b128      	cbz	r0, 800aedc <__smakebuf_r+0x70>
 800aed0:	89a3      	ldrh	r3, [r4, #12]
 800aed2:	f023 0303 	bic.w	r3, r3, #3
 800aed6:	f043 0301 	orr.w	r3, r3, #1
 800aeda:	81a3      	strh	r3, [r4, #12]
 800aedc:	89a3      	ldrh	r3, [r4, #12]
 800aede:	431d      	orrs	r5, r3
 800aee0:	81a5      	strh	r5, [r4, #12]
 800aee2:	e7cf      	b.n	800ae84 <__smakebuf_r+0x18>

0800aee4 <_fstat_r>:
 800aee4:	b538      	push	{r3, r4, r5, lr}
 800aee6:	4d07      	ldr	r5, [pc, #28]	@ (800af04 <_fstat_r+0x20>)
 800aee8:	2300      	movs	r3, #0
 800aeea:	4604      	mov	r4, r0
 800aeec:	4608      	mov	r0, r1
 800aeee:	4611      	mov	r1, r2
 800aef0:	602b      	str	r3, [r5, #0]
 800aef2:	f7f6 fc7d 	bl	80017f0 <_fstat>
 800aef6:	1c43      	adds	r3, r0, #1
 800aef8:	d102      	bne.n	800af00 <_fstat_r+0x1c>
 800aefa:	682b      	ldr	r3, [r5, #0]
 800aefc:	b103      	cbz	r3, 800af00 <_fstat_r+0x1c>
 800aefe:	6023      	str	r3, [r4, #0]
 800af00:	bd38      	pop	{r3, r4, r5, pc}
 800af02:	bf00      	nop
 800af04:	20002524 	.word	0x20002524

0800af08 <_isatty_r>:
 800af08:	b538      	push	{r3, r4, r5, lr}
 800af0a:	4d06      	ldr	r5, [pc, #24]	@ (800af24 <_isatty_r+0x1c>)
 800af0c:	2300      	movs	r3, #0
 800af0e:	4604      	mov	r4, r0
 800af10:	4608      	mov	r0, r1
 800af12:	602b      	str	r3, [r5, #0]
 800af14:	f7f6 fc7c 	bl	8001810 <_isatty>
 800af18:	1c43      	adds	r3, r0, #1
 800af1a:	d102      	bne.n	800af22 <_isatty_r+0x1a>
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	b103      	cbz	r3, 800af22 <_isatty_r+0x1a>
 800af20:	6023      	str	r3, [r4, #0]
 800af22:	bd38      	pop	{r3, r4, r5, pc}
 800af24:	20002524 	.word	0x20002524

0800af28 <_init>:
 800af28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2a:	bf00      	nop
 800af2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af2e:	bc08      	pop	{r3}
 800af30:	469e      	mov	lr, r3
 800af32:	4770      	bx	lr

0800af34 <_fini>:
 800af34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af36:	bf00      	nop
 800af38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af3a:	bc08      	pop	{r3}
 800af3c:	469e      	mov	lr, r3
 800af3e:	4770      	bx	lr
